
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024f08  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c9d0  08025090  08025090  00026090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031a60  08031a60  000332f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08031a60  08031a60  00032a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031a68  08031a68  000332f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031a68  08031a68  00032a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08031a6c  08031a6c  00032a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08031a70  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd78  200002f0  08031d60  000332f0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000c068  08031d60  00034068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000332f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f2b6  00000000  00000000  00033319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ad2f  00000000  00000000  000725cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  0007d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000216c  00000000  00000000  0007fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be54  00000000  00000000  00081f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005124a  00000000  00000000  000bdd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea29  00000000  00000000  0010efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fd9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c370  00000000  00000000  001fda18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00209d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002f0 	.word	0x200002f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08025078 	.word	0x08025078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002f4 	.word	0x200002f4
 80001c4:	08025078 	.word	0x08025078

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpun>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x14>
 800116a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116e:	d108      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 8001170:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001174:	d102      	bne.n	800117c <__aeabi_fcmpun+0x20>
 8001176:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117a:	d102      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	f04f 0001 	mov.w	r0, #1
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2uiz>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	d20e      	bcs.n	80011f6 <__aeabi_f2uiz+0x22>
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011dc:	d30b      	bcc.n	80011f6 <__aeabi_f2uiz+0x22>
 80011de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d409      	bmi.n	80011fc <__aeabi_f2uiz+0x28>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f0:	fa23 f002 	lsr.w	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2uiz+0x32>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d102      	bne.n	800120c <__aeabi_f2uiz+0x38>
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	4770      	bx	lr
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__aeabi_uldivmod>:
 8001214:	b953      	cbnz	r3, 800122c <__aeabi_uldivmod+0x18>
 8001216:	b94a      	cbnz	r2, 800122c <__aeabi_uldivmod+0x18>
 8001218:	2900      	cmp	r1, #0
 800121a:	bf08      	it	eq
 800121c:	2800      	cmpeq	r0, #0
 800121e:	bf1c      	itt	ne
 8001220:	f04f 31ff 	movne.w	r1, #4294967295
 8001224:	f04f 30ff 	movne.w	r0, #4294967295
 8001228:	f000 b98c 	b.w	8001544 <__aeabi_idiv0>
 800122c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001234:	f000 f806 	bl	8001244 <__udivmoddi4>
 8001238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800123c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <__udivmoddi4>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	9d08      	ldr	r5, [sp, #32]
 800124a:	468e      	mov	lr, r1
 800124c:	4604      	mov	r4, r0
 800124e:	4688      	mov	r8, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14a      	bne.n	80012ea <__udivmoddi4+0xa6>
 8001254:	428a      	cmp	r2, r1
 8001256:	4617      	mov	r7, r2
 8001258:	d962      	bls.n	8001320 <__udivmoddi4+0xdc>
 800125a:	fab2 f682 	clz	r6, r2
 800125e:	b14e      	cbz	r6, 8001274 <__udivmoddi4+0x30>
 8001260:	f1c6 0320 	rsb	r3, r6, #32
 8001264:	fa01 f806 	lsl.w	r8, r1, r6
 8001268:	fa20 f303 	lsr.w	r3, r0, r3
 800126c:	40b7      	lsls	r7, r6
 800126e:	ea43 0808 	orr.w	r8, r3, r8
 8001272:	40b4      	lsls	r4, r6
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fbb8 f1fe 	udiv	r1, r8, lr
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb0e 8811 	mls	r8, lr, r1, r8
 8001284:	fb01 f20c 	mul.w	r2, r1, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x62>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f101 30ff 	add.w	r0, r1, #4294967295
 8001298:	f080 80eb 	bcs.w	8001472 <__udivmoddi4+0x22e>
 800129c:	429a      	cmp	r2, r3
 800129e:	f240 80e8 	bls.w	8001472 <__udivmoddi4+0x22e>
 80012a2:	3902      	subs	r1, #2
 80012a4:	443b      	add	r3, r7
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80012ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80012b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012b4:	b2a3      	uxth	r3, r4
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	459c      	cmp	ip, r3
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0x8e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c4:	f080 80d7 	bcs.w	8001476 <__udivmoddi4+0x232>
 80012c8:	459c      	cmp	ip, r3
 80012ca:	f240 80d4 	bls.w	8001476 <__udivmoddi4+0x232>
 80012ce:	443b      	add	r3, r7
 80012d0:	3802      	subs	r0, #2
 80012d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d6:	2100      	movs	r1, #0
 80012d8:	eba3 030c 	sub.w	r3, r3, ip
 80012dc:	b11d      	cbz	r5, 80012e6 <__udivmoddi4+0xa2>
 80012de:	2200      	movs	r2, #0
 80012e0:	40f3      	lsrs	r3, r6
 80012e2:	e9c5 3200 	strd	r3, r2, [r5]
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d905      	bls.n	80012fa <__udivmoddi4+0xb6>
 80012ee:	b10d      	cbz	r5, 80012f4 <__udivmoddi4+0xb0>
 80012f0:	e9c5 0100 	strd	r0, r1, [r5]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4608      	mov	r0, r1
 80012f8:	e7f5      	b.n	80012e6 <__udivmoddi4+0xa2>
 80012fa:	fab3 f183 	clz	r1, r3
 80012fe:	2900      	cmp	r1, #0
 8001300:	d146      	bne.n	8001390 <__udivmoddi4+0x14c>
 8001302:	4573      	cmp	r3, lr
 8001304:	d302      	bcc.n	800130c <__udivmoddi4+0xc8>
 8001306:	4282      	cmp	r2, r0
 8001308:	f200 8108 	bhi.w	800151c <__udivmoddi4+0x2d8>
 800130c:	1a84      	subs	r4, r0, r2
 800130e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001312:	2001      	movs	r0, #1
 8001314:	4690      	mov	r8, r2
 8001316:	2d00      	cmp	r5, #0
 8001318:	d0e5      	beq.n	80012e6 <__udivmoddi4+0xa2>
 800131a:	e9c5 4800 	strd	r4, r8, [r5]
 800131e:	e7e2      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	f000 8091 	beq.w	8001448 <__udivmoddi4+0x204>
 8001326:	fab2 f682 	clz	r6, r2
 800132a:	2e00      	cmp	r6, #0
 800132c:	f040 80a5 	bne.w	800147a <__udivmoddi4+0x236>
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c03      	lsrs	r3, r0, #16
 8001336:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800133a:	b280      	uxth	r0, r0
 800133c:	b2bc      	uxth	r4, r7
 800133e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001342:	fb0e 221c 	mls	r2, lr, ip, r2
 8001346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800134a:	fb04 f20c 	mul.w	r2, r4, ip
 800134e:	429a      	cmp	r2, r3
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x11e>
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x11c>
 800135a:	429a      	cmp	r2, r3
 800135c:	f200 80e3 	bhi.w	8001526 <__udivmoddi4+0x2e2>
 8001360:	46c4      	mov	ip, r8
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	fbb3 f2fe 	udiv	r2, r3, lr
 8001368:	fb0e 3312 	mls	r3, lr, r2, r3
 800136c:	fb02 f404 	mul.w	r4, r2, r4
 8001370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001374:	429c      	cmp	r4, r3
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x144>
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	f102 30ff 	add.w	r0, r2, #4294967295
 800137e:	d202      	bcs.n	8001386 <__udivmoddi4+0x142>
 8001380:	429c      	cmp	r4, r3
 8001382:	f200 80cd 	bhi.w	8001520 <__udivmoddi4+0x2dc>
 8001386:	4602      	mov	r2, r0
 8001388:	1b1b      	subs	r3, r3, r4
 800138a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800138e:	e7a5      	b.n	80012dc <__udivmoddi4+0x98>
 8001390:	f1c1 0620 	rsb	r6, r1, #32
 8001394:	408b      	lsls	r3, r1
 8001396:	fa22 f706 	lsr.w	r7, r2, r6
 800139a:	431f      	orrs	r7, r3
 800139c:	fa2e fa06 	lsr.w	sl, lr, r6
 80013a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013a4:	fbba f8f9 	udiv	r8, sl, r9
 80013a8:	fa0e fe01 	lsl.w	lr, lr, r1
 80013ac:	fa20 f306 	lsr.w	r3, r0, r6
 80013b0:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b4:	fa1f fc87 	uxth.w	ip, r7
 80013b8:	ea43 030e 	orr.w	r3, r3, lr
 80013bc:	fa00 fe01 	lsl.w	lr, r0, r1
 80013c0:	fb08 f00c 	mul.w	r0, r8, ip
 80013c4:	0c1c      	lsrs	r4, r3, #16
 80013c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x1a4>
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d8:	f080 809e 	bcs.w	8001518 <__udivmoddi4+0x2d4>
 80013dc:	42a0      	cmp	r0, r4
 80013de:	f240 809b 	bls.w	8001518 <__udivmoddi4+0x2d4>
 80013e2:	f1a8 0802 	sub.w	r8, r8, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	b298      	uxth	r0, r3
 80013ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f0:	fb09 4413 	mls	r4, r9, r3, r4
 80013f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013fc:	45a4      	cmp	ip, r4
 80013fe:	d909      	bls.n	8001414 <__udivmoddi4+0x1d0>
 8001400:	193c      	adds	r4, r7, r4
 8001402:	f103 30ff 	add.w	r0, r3, #4294967295
 8001406:	f080 8085 	bcs.w	8001514 <__udivmoddi4+0x2d0>
 800140a:	45a4      	cmp	ip, r4
 800140c:	f240 8082 	bls.w	8001514 <__udivmoddi4+0x2d0>
 8001410:	3b02      	subs	r3, #2
 8001412:	443c      	add	r4, r7
 8001414:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001418:	eba4 040c 	sub.w	r4, r4, ip
 800141c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001420:	4564      	cmp	r4, ip
 8001422:	4643      	mov	r3, r8
 8001424:	46e1      	mov	r9, ip
 8001426:	d364      	bcc.n	80014f2 <__udivmoddi4+0x2ae>
 8001428:	d061      	beq.n	80014ee <__udivmoddi4+0x2aa>
 800142a:	b15d      	cbz	r5, 8001444 <__udivmoddi4+0x200>
 800142c:	ebbe 0203 	subs.w	r2, lr, r3
 8001430:	eb64 0409 	sbc.w	r4, r4, r9
 8001434:	fa04 f606 	lsl.w	r6, r4, r6
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	431e      	orrs	r6, r3
 800143e:	40cc      	lsrs	r4, r1
 8001440:	e9c5 6400 	strd	r6, r4, [r5]
 8001444:	2100      	movs	r1, #0
 8001446:	e74e      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001448:	fbb1 fcf2 	udiv	ip, r1, r2
 800144c:	0c01      	lsrs	r1, r0, #16
 800144e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001452:	b280      	uxth	r0, r0
 8001454:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001458:	463b      	mov	r3, r7
 800145a:	fbb1 f1f7 	udiv	r1, r1, r7
 800145e:	4638      	mov	r0, r7
 8001460:	463c      	mov	r4, r7
 8001462:	46b8      	mov	r8, r7
 8001464:	46be      	mov	lr, r7
 8001466:	2620      	movs	r6, #32
 8001468:	eba2 0208 	sub.w	r2, r2, r8
 800146c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001470:	e765      	b.n	800133e <__udivmoddi4+0xfa>
 8001472:	4601      	mov	r1, r0
 8001474:	e717      	b.n	80012a6 <__udivmoddi4+0x62>
 8001476:	4610      	mov	r0, r2
 8001478:	e72b      	b.n	80012d2 <__udivmoddi4+0x8e>
 800147a:	f1c6 0120 	rsb	r1, r6, #32
 800147e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001482:	40b7      	lsls	r7, r6
 8001484:	fa0e fe06 	lsl.w	lr, lr, r6
 8001488:	fa20 f101 	lsr.w	r1, r0, r1
 800148c:	ea41 010e 	orr.w	r1, r1, lr
 8001490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001494:	fbbc f8fe 	udiv	r8, ip, lr
 8001498:	b2bc      	uxth	r4, r7
 800149a:	fb0e cc18 	mls	ip, lr, r8, ip
 800149e:	fb08 f904 	mul.w	r9, r8, r4
 80014a2:	0c0a      	lsrs	r2, r1, #16
 80014a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a8:	40b0      	lsls	r0, r6
 80014aa:	4591      	cmp	r9, r2
 80014ac:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014b0:	b280      	uxth	r0, r0
 80014b2:	d93e      	bls.n	8001532 <__udivmoddi4+0x2ee>
 80014b4:	18ba      	adds	r2, r7, r2
 80014b6:	f108 3cff 	add.w	ip, r8, #4294967295
 80014ba:	d201      	bcs.n	80014c0 <__udivmoddi4+0x27c>
 80014bc:	4591      	cmp	r9, r2
 80014be:	d81f      	bhi.n	8001500 <__udivmoddi4+0x2bc>
 80014c0:	eba2 0209 	sub.w	r2, r2, r9
 80014c4:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c8:	fb09 f804 	mul.w	r8, r9, r4
 80014cc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014d0:	b28a      	uxth	r2, r1
 80014d2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014d6:	4542      	cmp	r2, r8
 80014d8:	d229      	bcs.n	800152e <__udivmoddi4+0x2ea>
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	f109 31ff 	add.w	r1, r9, #4294967295
 80014e0:	d2c2      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e2:	4542      	cmp	r2, r8
 80014e4:	d2c0      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e6:	f1a9 0102 	sub.w	r1, r9, #2
 80014ea:	443a      	add	r2, r7
 80014ec:	e7bc      	b.n	8001468 <__udivmoddi4+0x224>
 80014ee:	45c6      	cmp	lr, r8
 80014f0:	d29b      	bcs.n	800142a <__udivmoddi4+0x1e6>
 80014f2:	ebb8 0302 	subs.w	r3, r8, r2
 80014f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014fa:	3801      	subs	r0, #1
 80014fc:	46e1      	mov	r9, ip
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e6>
 8001500:	eba7 0909 	sub.w	r9, r7, r9
 8001504:	444a      	add	r2, r9
 8001506:	fbb2 f9fe 	udiv	r9, r2, lr
 800150a:	f1a8 0c02 	sub.w	ip, r8, #2
 800150e:	fb09 f804 	mul.w	r8, r9, r4
 8001512:	e7db      	b.n	80014cc <__udivmoddi4+0x288>
 8001514:	4603      	mov	r3, r0
 8001516:	e77d      	b.n	8001414 <__udivmoddi4+0x1d0>
 8001518:	46d0      	mov	r8, sl
 800151a:	e765      	b.n	80013e8 <__udivmoddi4+0x1a4>
 800151c:	4608      	mov	r0, r1
 800151e:	e6fa      	b.n	8001316 <__udivmoddi4+0xd2>
 8001520:	443b      	add	r3, r7
 8001522:	3a02      	subs	r2, #2
 8001524:	e730      	b.n	8001388 <__udivmoddi4+0x144>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443b      	add	r3, r7
 800152c:	e719      	b.n	8001362 <__udivmoddi4+0x11e>
 800152e:	4649      	mov	r1, r9
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x224>
 8001532:	eba2 0209 	sub.w	r2, r2, r9
 8001536:	fbb2 f9fe 	udiv	r9, r2, lr
 800153a:	46c4      	mov	ip, r8
 800153c:	fb09 f804 	mul.w	r8, r9, r4
 8001540:	e7c4      	b.n	80014cc <__udivmoddi4+0x288>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <Auth_SetCurrentRemoteIp>:
    g_req_ip_set = false;
    g_req_cookie_sid_present = false;
    g_resp_setcookie_pending = false;
}

void Auth_SetCurrentRemoteIp(const ip_addr_t* ip) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    if (ip) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <Auth_SetCurrentRemoteIp+0x1e>
        g_req_ip = *ip;
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <Auth_SetCurrentRemoteIp+0x30>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6013      	str	r3, [r2, #0]
        g_req_ip_set = true;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <Auth_SetCurrentRemoteIp+0x34>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
    } else {
        g_req_ip_set = false;
    }
}
 8001564:	e002      	b.n	800156c <Auth_SetCurrentRemoteIp+0x24>
        g_req_ip_set = false;
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <Auth_SetCurrentRemoteIp+0x34>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000030c 	.word	0x2000030c
 800157c:	20000310 	.word	0x20000310

08001580 <Auth_BeginRequestWithCookieHeader>:

void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
    /* Parse a very simple "Cookie: SID=<sid>" header if present */
    g_req_cookie_sid_present = false;
 800158c:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <Auth_BeginRequestWithCookieHeader+0x15c>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    g_req_cookie_sid[0] = '\0';
 8001592:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    if (!headers || headers_len == 0) return;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8096 	beq.w	80016cc <Auth_BeginRequestWithCookieHeader+0x14c>
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8092 	beq.w	80016cc <Auth_BeginRequestWithCookieHeader+0x14c>
    const char* p = headers;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    const char* end = headers + headers_len;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
    while (p < end) {
 80015b4:	e084      	b.n	80016c0 <Auth_BeginRequestWithCookieHeader+0x140>
        const char* line_end = (const char*)memchr(p, '\n', (size_t)(end - p));
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	210a      	movs	r1, #10
 80015c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015c2:	f021 f92a 	bl	802281a <memchr>
 80015c6:	6178      	str	r0, [r7, #20]
        size_t line_len = line_end ? (size_t)(line_end - p) : (size_t)(end - p);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <Auth_BeginRequestWithCookieHeader+0x56>
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	e002      	b.n	80015dc <Auth_BeginRequestWithCookieHeader+0x5c>
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	613b      	str	r3, [r7, #16]
        if (line_len >= 7 && !strncasecmp(p, "Cookie:", 7)) {
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d967      	bls.n	80016b4 <Auth_BeginRequestWithCookieHeader+0x134>
 80015e4:	2207      	movs	r2, #7
 80015e6:	493f      	ldr	r1, [pc, #252]	@ (80016e4 <Auth_BeginRequestWithCookieHeader+0x164>)
 80015e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015ea:	f021 f815 	bl	8022618 <strncasecmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d15f      	bne.n	80016b4 <Auth_BeginRequestWithCookieHeader+0x134>
            const char* v = p + 7;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	3307      	adds	r3, #7
 80015f8:	623b      	str	r3, [r7, #32]
            while (v < p + line_len && (*v == ' ' || *v == '\t')) v++;
 80015fa:	e002      	b.n	8001602 <Auth_BeginRequestWithCookieHeader+0x82>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	3301      	adds	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	429a      	cmp	r2, r3
 800160c:	d207      	bcs.n	800161e <Auth_BeginRequestWithCookieHeader+0x9e>
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b20      	cmp	r3, #32
 8001614:	d0f2      	beq.n	80015fc <Auth_BeginRequestWithCookieHeader+0x7c>
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d0ee      	beq.n	80015fc <Auth_BeginRequestWithCookieHeader+0x7c>
            const char* sid_pos = strcasestr(v, "SID=");
 800161e:	4932      	ldr	r1, [pc, #200]	@ (80016e8 <Auth_BeginRequestWithCookieHeader+0x168>)
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f021 f855 	bl	80226d0 <strcasestr>
 8001626:	4603      	mov	r3, r0
 8001628:	60fb      	str	r3, [r7, #12]
            if (sid_pos) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d04f      	beq.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
                sid_pos += 4;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3304      	adds	r3, #4
 8001634:	60fb      	str	r3, [r7, #12]
                size_t i = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 800163a:	e024      	b.n	8001686 <Auth_BeginRequestWithCookieHeader+0x106>
                    char c = sid_pos[i];
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	72fb      	strb	r3, [r7, #11]
                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) break;
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	2b2f      	cmp	r3, #47	@ 0x2f
 800164a:	d902      	bls.n	8001652 <Auth_BeginRequestWithCookieHeader+0xd2>
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	2b39      	cmp	r3, #57	@ 0x39
 8001650:	d90b      	bls.n	800166a <Auth_BeginRequestWithCookieHeader+0xea>
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	2b60      	cmp	r3, #96	@ 0x60
 8001656:	d902      	bls.n	800165e <Auth_BeginRequestWithCookieHeader+0xde>
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	2b66      	cmp	r3, #102	@ 0x66
 800165c:	d905      	bls.n	800166a <Auth_BeginRequestWithCookieHeader+0xea>
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	2b40      	cmp	r3, #64	@ 0x40
 8001662:	d91b      	bls.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	2b46      	cmp	r3, #70	@ 0x46
 8001668:	d818      	bhi.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
                    g_req_cookie_sid[i] = (char)tolower((unsigned char)c);
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	4618      	mov	r0, r3
 800166e:	f020 f8c1 	bl	80217f4 <tolower>
 8001672:	4603      	mov	r3, r0
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	460a      	mov	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
                    i++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b1f      	cmp	r3, #31
 800168a:	d807      	bhi.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	441a      	add	r2, r3
 8001692:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	440b      	add	r3, r1
 8001698:	429a      	cmp	r2, r3
 800169a:	d3cf      	bcc.n	800163c <Auth_BeginRequestWithCookieHeader+0xbc>
                }
                g_req_cookie_sid[i] = '\0';
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
                if (i == 32) g_req_cookie_sid_present = true;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d111      	bne.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <Auth_BeginRequestWithCookieHeader+0x15c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80016b2:	e00d      	b.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
        }
        if (!line_end) break;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00c      	beq.n	80016d4 <Auth_BeginRequestWithCookieHeader+0x154>
        p = line_end + 1;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (p < end) {
 80016c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f4ff af76 	bcc.w	80015b6 <Auth_BeginRequestWithCookieHeader+0x36>
 80016ca:	e004      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
    if (!headers || headers_len == 0) return;
 80016cc:	bf00      	nop
 80016ce:	e002      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
            break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
        if (!line_end) break;
 80016d4:	bf00      	nop
    }
}
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000335 	.word	0x20000335
 80016e0:	20000314 	.word	0x20000314
 80016e4:	08025090 	.word	0x08025090
 80016e8:	08025098 	.word	0x08025098

080016ec <backup_write_pass>:
        }
    }
    return ~crc;
}

static void backup_write_pass(const char *pass) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    uint32_t word = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    /* password: 8 chars max packed into 2 DRs */
    for (int i = 0; i < 2; ++i) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	e031      	b.n	8001762 <backup_write_pass+0x76>
        word = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
        for (int b = 0; b < 4; ++b) {
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e01f      	b.n	8001748 <backup_write_pass+0x5c>
            int idx = i * 4 + b;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
            uint8_t ch = pass && pass[idx] ? (uint8_t)pass[idx] : 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00a      	beq.n	800172e <backup_write_pass+0x42>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <backup_write_pass+0x42>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	e000      	b.n	8001730 <backup_write_pass+0x44>
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
            word |= ((uint32_t)ch) << (8 * b);
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	4313      	orrs	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
        for (int b = 0; b < 4; ++b) {
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b03      	cmp	r3, #3
 800174c:	dddc      	ble.n	8001708 <backup_write_pass+0x1c>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t)(BKP_PASS_DR + i), word);
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	3311      	adds	r3, #17
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <backup_write_pass+0x88>)
 8001758:	f009 fc7b 	bl	800b052 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 2; ++i) {
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3301      	adds	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b01      	cmp	r3, #1
 8001766:	ddca      	ble.n	80016fe <backup_write_pass+0x12>
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200029d0 	.word	0x200029d0

08001778 <backup_read_pass>:

static void backup_read_pass(char *pass) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e020      	b.n	80017c8 <backup_read_pass+0x50>
        uint32_t w = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t)(BKP_PASS_DR + i));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3311      	adds	r3, #17
 800178a:	4619      	mov	r1, r3
 800178c:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <backup_read_pass+0x68>)
 800178e:	f009 fc79 	bl	800b084 <HAL_RTCEx_BKUPRead>
 8001792:	60f8      	str	r0, [r7, #12]
        for (int b = 0; b < 4; ++b) pass[i*4 + b] = (char)((w >> (8*b)) & 0xFF);
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e010      	b.n	80017bc <backup_read_pass+0x44>
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	fa22 f103 	lsr.w	r1, r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	009a      	lsls	r2, r3, #2
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	3301      	adds	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	ddeb      	ble.n	800179a <backup_read_pass+0x22>
    for (int i = 0; i < 2; ++i) {
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	dddb      	ble.n	8001786 <backup_read_pass+0xe>
    }
    pass[8] = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200029d0 	.word	0x200029d0

080017e4 <Creds_Init>:

// публичные функции
void Creds_Init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
    char p[9] = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	721a      	strb	r2, [r3, #8]
    backup_read_pass(p);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffbe 	bl	8001778 <backup_read_pass>
    if (p[0] == 0) {
 80017fc:	793b      	ldrb	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10b      	bne.n	800181a <Creds_Init+0x36>
        creds.username[0] = 0; // username unused
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <Creds_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
        strncpy(creds.password, "admin", MAX_CRED_LEN-1);
 8001808:	2208      	movs	r2, #8
 800180a:	490d      	ldr	r1, [pc, #52]	@ (8001840 <Creds_Init+0x5c>)
 800180c:	480d      	ldr	r0, [pc, #52]	@ (8001844 <Creds_Init+0x60>)
 800180e:	f020 ff35 	bl	802267c <strncpy>
        backup_write_pass(creds.password);
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <Creds_Init+0x60>)
 8001814:	f7ff ff6a 	bl	80016ec <backup_write_pass>
    } else {
        strncpy(creds.password, p, MAX_CRED_LEN-1);
        creds.password[MAX_CRED_LEN-1] = 0;
        creds.username[0] = 0;
    }
}
 8001818:	e00b      	b.n	8001832 <Creds_Init+0x4e>
        strncpy(creds.password, p, MAX_CRED_LEN-1);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2208      	movs	r2, #8
 800181e:	4619      	mov	r1, r3
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <Creds_Init+0x60>)
 8001822:	f020 ff2b 	bl	802267c <strncpy>
        creds.password[MAX_CRED_LEN-1] = 0;
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <Creds_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	745a      	strb	r2, [r3, #17]
        creds.username[0] = 0;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <Creds_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000338 	.word	0x20000338
 8001840:	080250b4 	.word	0x080250b4
 8001844:	20000341 	.word	0x20000341

08001848 <Creds_CheckLogin>:

bool Creds_CheckLogin(const char *user, const char *pass) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    (void)user; // username disabled
    return (strncmp(pass, creds.password, MAX_CRED_LEN) == 0);
 8001852:	2209      	movs	r2, #9
 8001854:	4906      	ldr	r1, [pc, #24]	@ (8001870 <Creds_CheckLogin+0x28>)
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f020 fefe 	bl	8022658 <strncmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000341 	.word	0x20000341

08001874 <Creds_Update>:

void Creds_Update(const char *user, const char *pass) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
    (void)user; // ignore username, only password used
    strncpy(creds.password, pass, MAX_CRED_LEN-1);
 800187e:	2208      	movs	r2, #8
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <Creds_Update+0x28>)
 8001884:	f020 fefa 	bl	802267c <strncpy>
    creds.password[MAX_CRED_LEN-1] = 0;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <Creds_Update+0x2c>)
 800188a:	2200      	movs	r2, #0
 800188c:	745a      	strb	r2, [r3, #17]
    backup_write_pass(creds.password);
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <Creds_Update+0x28>)
 8001890:	f7ff ff2c 	bl	80016ec <backup_write_pass>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000341 	.word	0x20000341
 80018a0:	20000338 	.word	0x20000338

080018a4 <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFFER_SIZE   (3 * ADC_SAMPLES)
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile uint8_t dma_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    dma_ready = 1;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_ADC_ConvCpltCallback+0x18>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	200028d0 	.word	0x200028d0

080018c0 <NET_CGI_Handler>:
const tCGI LOGIN_CGI = {"/login.cgi", LOGIN_CGI_Handler};
tCGI CREDS_CGI = {"/set_creds.cgi", CREDS_CGI_Handler};
tCGI CGI_TAB[6];

const char* NET_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
    // Reset DHCP flag; it's set only when parameter is present
    new_dhcp_enabled = 0;
 80018ce:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <NET_CGI_Handler+0x118>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e071      	b.n	80019be <NET_CGI_Handler+0xfe>
        // Сетевые
        if (strcmp(pcParam[i], "ip") == 0 && pcValue[i][0] != '\0') new_ip.addr = ipaddr_addr(pcValue[i]);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	493d      	ldr	r1, [pc, #244]	@ (80019dc <NET_CGI_Handler+0x11c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fc6e 	bl	80001c8 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d113      	bne.n	800191a <NET_CGI_Handler+0x5a>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <NET_CGI_Handler+0x5a>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f01e fd8b 	bl	8020428 <ipaddr_addr>
 8001912:	4603      	mov	r3, r0
 8001914:	4a32      	ldr	r2, [pc, #200]	@ (80019e0 <NET_CGI_Handler+0x120>)
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e04e      	b.n	80019b8 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "mask") == 0 && pcValue[i][0] != '\0') new_mask.addr = ipaddr_addr(pcValue[i]);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	492f      	ldr	r1, [pc, #188]	@ (80019e4 <NET_CGI_Handler+0x124>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc4e 	bl	80001c8 <strcmp>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d113      	bne.n	800195a <NET_CGI_Handler+0x9a>
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <NET_CGI_Handler+0x9a>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4413      	add	r3, r2
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f01e fd6b 	bl	8020428 <ipaddr_addr>
 8001952:	4603      	mov	r3, r0
 8001954:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <NET_CGI_Handler+0x128>)
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e02e      	b.n	80019b8 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "gateway") == 0 && pcValue[i][0] != '\0') new_gw.addr = ipaddr_addr(pcValue[i]);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4921      	ldr	r1, [pc, #132]	@ (80019ec <NET_CGI_Handler+0x12c>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fc2e 	bl	80001c8 <strcmp>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d113      	bne.n	800199a <NET_CGI_Handler+0xda>
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <NET_CGI_Handler+0xda>
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f01e fd4b 	bl	8020428 <ipaddr_addr>
 8001992:	4603      	mov	r3, r0
 8001994:	4a16      	ldr	r2, [pc, #88]	@ (80019f0 <NET_CGI_Handler+0x130>)
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e00e      	b.n	80019b8 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "dhcp") == 0) new_dhcp_enabled = 1;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4913      	ldr	r1, [pc, #76]	@ (80019f4 <NET_CGI_Handler+0x134>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc0e 	bl	80001c8 <strcmp>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <NET_CGI_Handler+0xf8>
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <NET_CGI_Handler+0x118>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	db89      	blt.n	80018da <NET_CGI_Handler+0x1a>
    }

    apply_network_settings = 1;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <NET_CGI_Handler+0x138>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]

    return "/settings.html";  // редирект обратно
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <NET_CGI_Handler+0x13c>)
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20002a48 	.word	0x20002a48
 80019dc:	080250ec 	.word	0x080250ec
 80019e0:	20002a3c 	.word	0x20002a3c
 80019e4:	080250f0 	.word	0x080250f0
 80019e8:	20002a40 	.word	0x20002a40
 80019ec:	080250f8 	.word	0x080250f8
 80019f0:	20002a44 	.word	0x20002a44
 80019f4:	08025100 	.word	0x08025100
 80019f8:	20002a49 	.word	0x20002a49
 80019fc:	08025108 	.word	0x08025108

08001a00 <DATE_CGI_Handler>:

uint8_t new_year=0, new_month=0, new_day=0;
uint8_t apply_date_settings = 0;

const char* DATE_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e042      	b.n	8001a9a <DATE_CGI_Handler+0x9a>
    {
        if(strcmp(pcParam[i],"date")==0 && pcValue[i][0]!='\0')
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4923      	ldr	r1, [pc, #140]	@ (8001aac <DATE_CGI_Handler+0xac>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fbd1 	bl	80001c8 <strcmp>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d133      	bne.n	8001a94 <DATE_CGI_Handler+0x94>
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d02b      	beq.n	8001a94 <DATE_CGI_Handler+0x94>
        {
            int y,m,d;
            if(sscanf(pcValue[i], "%d-%d-%d", &y,&m,&d)==3)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f107 0114 	add.w	r1, r7, #20
 8001a4a:	f107 0218 	add.w	r2, r7, #24
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	460b      	mov	r3, r1
 8001a56:	4916      	ldr	r1, [pc, #88]	@ (8001ab0 <DATE_CGI_Handler+0xb0>)
 8001a58:	f020 fc98 	bl	802238c <siscanf>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d118      	bne.n	8001a94 <DATE_CGI_Handler+0x94>
            {
                new_year  = (uint8_t)(y % 100);
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <DATE_CGI_Handler+0xb4>)
 8001a66:	fb82 1203 	smull	r1, r2, r2, r3
 8001a6a:	1151      	asrs	r1, r2, #5
 8001a6c:	17da      	asrs	r2, r3, #31
 8001a6e:	1a8a      	subs	r2, r1, r2
 8001a70:	2164      	movs	r1, #100	@ 0x64
 8001a72:	fb01 f202 	mul.w	r2, r1, r2
 8001a76:	1a9a      	subs	r2, r3, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <DATE_CGI_Handler+0xb8>)
 8001a7c:	701a      	strb	r2, [r3, #0]
                new_month = (uint8_t)m;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <DATE_CGI_Handler+0xbc>)
 8001a84:	701a      	strb	r2, [r3, #0]
                new_day   = (uint8_t)d;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <DATE_CGI_Handler+0xc0>)
 8001a8c:	701a      	strb	r2, [r3, #0]
                apply_date_settings = 1;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <DATE_CGI_Handler+0xc4>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<iNumParams; i++)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbb8      	blt.n	8001a14 <DATE_CGI_Handler+0x14>
            }
        }
    }
    // --- сразу сохраняем в backup (если RTC уже инициализирован) ---
}
 8001aa2:	bf00      	nop
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08025118 	.word	0x08025118
 8001ab0:	08025120 	.word	0x08025120
 8001ab4:	51eb851f 	.word	0x51eb851f
 8001ab8:	20002a7c 	.word	0x20002a7c
 8001abc:	20002a7d 	.word	0x20002a7d
 8001ac0:	20002a7e 	.word	0x20002a7e
 8001ac4:	20002a7f 	.word	0x20002a7f

08001ac8 <TIME_CGI_Handler>:

uint8_t new_hours = 0, new_minutes = 0, new_seconds = 0;
uint8_t apply_time_settings = 0;

const char* TIME_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    apply_time_settings = 0;
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <TIME_CGI_Handler+0x110>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < iNumParams; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae0:	e071      	b.n	8001bc6 <TIME_CGI_Handler+0xfe>
    {
        if(strcmp(pcParam[i], "time") == 0 && strlen(pcValue[i]) >= 5)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	493b      	ldr	r1, [pc, #236]	@ (8001bdc <TIME_CGI_Handler+0x114>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb6a 	bl	80001c8 <strcmp>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d162      	bne.n	8001bc0 <TIME_CGI_Handler+0xf8>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fb69 	bl	80001dc <strlen>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d957      	bls.n	8001bc0 <TIME_CGI_Handler+0xf8>
        {
            // Простой парсинг без sscanf
            char *colon = strchr(pcValue[i], ':');
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	213a      	movs	r1, #58	@ 0x3a
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f020 fd6d 	bl	80225fc <strchr>
 8001b22:	6238      	str	r0, [r7, #32]
            if(colon != NULL)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04a      	beq.n	8001bc0 <TIME_CGI_Handler+0xf8>
            {
                // Берем первые 2 символа как часы
                char hour_str[3] = {0};
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2100      	movs	r1, #0
 8001b30:	460a      	mov	r2, r1
 8001b32:	801a      	strh	r2, [r3, #0]
 8001b34:	460a      	mov	r2, r1
 8001b36:	709a      	strb	r2, [r3, #2]
                strncpy(hour_str, pcValue[i], 2);
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	2202      	movs	r2, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f020 fd97 	bl	802267c <strncpy>
                hour_str[2] = '\0';
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75bb      	strb	r3, [r7, #22]

                // Берем 2 символа после двоеточия как минуты
                char min_str[3] = {0};
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	2100      	movs	r1, #0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	801a      	strh	r2, [r3, #0]
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	709a      	strb	r2, [r3, #2]
                strncpy(min_str, colon + 1, 2);
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	1c59      	adds	r1, r3, #1
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f020 fd86 	bl	802267c <strncpy>
                min_str[2] = '\0';
 8001b70:	2300      	movs	r3, #0
 8001b72:	74bb      	strb	r3, [r7, #18]

                int h = atoi(hour_str);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f01f fd73 	bl	8021664 <atoi>
 8001b7e:	61f8      	str	r0, [r7, #28]
                int mi = atoi(min_str);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4618      	mov	r0, r3
 8001b86:	f01f fd6d 	bl	8021664 <atoi>
 8001b8a:	61b8      	str	r0, [r7, #24]

                if(h >= 0 && h < 24 && mi >= 0 && mi < 60)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db16      	blt.n	8001bc0 <TIME_CGI_Handler+0xf8>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b17      	cmp	r3, #23
 8001b96:	dc13      	bgt.n	8001bc0 <TIME_CGI_Handler+0xf8>
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db10      	blt.n	8001bc0 <TIME_CGI_Handler+0xf8>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ba2:	dc0d      	bgt.n	8001bc0 <TIME_CGI_Handler+0xf8>
                {
                    new_hours = (uint8_t)h;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <TIME_CGI_Handler+0x118>)
 8001baa:	701a      	strb	r2, [r3, #0]
                    new_minutes = (uint8_t)mi;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <TIME_CGI_Handler+0x11c>)
 8001bb2:	701a      	strb	r2, [r3, #0]
                    new_seconds = 0;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <TIME_CGI_Handler+0x120>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
                    apply_time_settings = 1;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <TIME_CGI_Handler+0x110>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < iNumParams; i++)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	db89      	blt.n	8001ae2 <TIME_CGI_Handler+0x1a>
                }
            }
        }
    }
    return "/settings.html";
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <TIME_CGI_Handler+0x124>)
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20002a83 	.word	0x20002a83
 8001bdc:	0802513c 	.word	0x0802513c
 8001be0:	20002a80 	.word	0x20002a80
 8001be4:	20002a81 	.word	0x20002a81
 8001be8:	20002a82 	.word	0x20002a82
 8001bec:	08025108 	.word	0x08025108

08001bf0 <SNMP_CGI_Handler>:
char snmp_trap[32] = "public";
uint8_t apply_snmp_settings = 0;

// CGI-хэндлер для SNMP
const char* SNMP_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e067      	b.n	8001cd4 <SNMP_CGI_Handler+0xe4>
    {
        if(strcmp(pcParam[i],"snmp-read")==0 && pcValue[i][0]!='\0')
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4937      	ldr	r1, [pc, #220]	@ (8001cec <SNMP_CGI_Handler+0xfc>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fad9 	bl	80001c8 <strcmp>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d115      	bne.n	8001c48 <SNMP_CGI_Handler+0x58>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00d      	beq.n	8001c48 <SNMP_CGI_Handler+0x58>
        {
            strncpy(snmp_read, pcValue[i], sizeof(snmp_read)-1);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	221f      	movs	r2, #31
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482d      	ldr	r0, [pc, #180]	@ (8001cf0 <SNMP_CGI_Handler+0x100>)
 8001c3c:	f020 fd1e 	bl	802267c <strncpy>
            snmp_read[sizeof(snmp_read)-1] = 0;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <SNMP_CGI_Handler+0x100>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	77da      	strb	r2, [r3, #31]
 8001c46:	e042      	b.n	8001cce <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-write")==0 && pcValue[i][0]!='\0')
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4928      	ldr	r1, [pc, #160]	@ (8001cf4 <SNMP_CGI_Handler+0x104>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fab7 	bl	80001c8 <strcmp>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d115      	bne.n	8001c8c <SNMP_CGI_Handler+0x9c>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00d      	beq.n	8001c8c <SNMP_CGI_Handler+0x9c>
        {
            strncpy(snmp_write, pcValue[i], sizeof(snmp_write)-1);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481e      	ldr	r0, [pc, #120]	@ (8001cf8 <SNMP_CGI_Handler+0x108>)
 8001c80:	f020 fcfc 	bl	802267c <strncpy>
            snmp_write[sizeof(snmp_write)-1] = 0;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <SNMP_CGI_Handler+0x108>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	77da      	strb	r2, [r3, #31]
 8001c8a:	e020      	b.n	8001cce <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-trap")==0 && pcValue[i][0]!='\0')
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4919      	ldr	r1, [pc, #100]	@ (8001cfc <SNMP_CGI_Handler+0x10c>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fa95 	bl	80001c8 <strcmp>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d114      	bne.n	8001cce <SNMP_CGI_Handler+0xde>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <SNMP_CGI_Handler+0xde>
        {
            strncpy(snmp_trap, pcValue[i], sizeof(snmp_trap)-1);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480f      	ldr	r0, [pc, #60]	@ (8001d00 <SNMP_CGI_Handler+0x110>)
 8001cc4:	f020 fcda 	bl	802267c <strncpy>
            snmp_trap[sizeof(snmp_trap)-1] = 0;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <SNMP_CGI_Handler+0x110>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	77da      	strb	r2, [r3, #31]
    for(int i=0; i<iNumParams; i++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	db93      	blt.n	8001c04 <SNMP_CGI_Handler+0x14>
        }
    }
    apply_snmp_settings = 1; // ставим флаг применения в main()
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <SNMP_CGI_Handler+0x114>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    return "/settings.html";  // редирект обратно
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <SNMP_CGI_Handler+0x118>)
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	08025154 	.word	0x08025154
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	08025160 	.word	0x08025160
 8001cf8:	20000030 	.word	0x20000030
 8001cfc:	0802516c 	.word	0x0802516c
 8001d00:	20000050 	.word	0x20000050
 8001d04:	20002a84 	.word	0x20002a84
 8001d08:	08025108 	.word	0x08025108

08001d0c <CREDS_CGI_Handler>:

// CGI для смены логина/пароля (GET, user/pass, до 8 символов)
const char * CREDS_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    char user[9] = {0}, pass[9] = {0};
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	721a      	strb	r2, [r3, #8]
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < iNumParams; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d36:	e03f      	b.n	8001db8 <CREDS_CGI_Handler+0xac>
        if (strcmp(pcParam[i], "user") == 0 && pcValue[i]) {
 8001d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4928      	ldr	r1, [pc, #160]	@ (8001de4 <CREDS_CGI_Handler+0xd8>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fa3f 	bl	80001c8 <strcmp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d112      	bne.n	8001d76 <CREDS_CGI_Handler+0x6a>
 8001d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <CREDS_CGI_Handler+0x6a>
            strncpy(user, pcValue[i], sizeof(user)-1);
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	6819      	ldr	r1, [r3, #0]
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f020 fc84 	bl	802267c <strncpy>
 8001d74:	e01d      	b.n	8001db2 <CREDS_CGI_Handler+0xa6>
        } else if (strcmp(pcParam[i], "pass") == 0 && pcValue[i]) {
 8001d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4919      	ldr	r1, [pc, #100]	@ (8001de8 <CREDS_CGI_Handler+0xdc>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fa20 	bl	80001c8 <strcmp>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d111      	bne.n	8001db2 <CREDS_CGI_Handler+0xa6>
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <CREDS_CGI_Handler+0xa6>
            strncpy(pass, pcValue[i], sizeof(pass)-1);
 8001d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	2208      	movs	r2, #8
 8001dac:	4618      	mov	r0, r3
 8001dae:	f020 fc65 	bl	802267c <strncpy>
    for (int i = 0; i < iNumParams; i++) {
 8001db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db4:	3301      	adds	r3, #1
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbbb      	blt.n	8001d38 <CREDS_CGI_Handler+0x2c>
        }
    }
    // обрежем на стороне сервера до 8 ascii-символов
    user[8] = 0; pass[8] = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	773b      	strb	r3, [r7, #28]
    Creds_Update(user, pass);
 8001dca:	f107 0214 	add.w	r2, r7, #20
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd4d 	bl	8001874 <Creds_Update>
    return "/settings.html";
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <CREDS_CGI_Handler+0xe0>)
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3730      	adds	r7, #48	@ 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08025178 	.word	0x08025178
 8001de8:	08025180 	.word	0x08025180
 8001dec:	08025108 	.word	0x08025108

08001df0 <Flash_GetSector>:

FW_Update_Context fw_ctx;
static bool fw_request_active = false;   // текущий POST = fw_update?
// --- Helpers for Flash OTA ---
static uint32_t Flash_GetSector(uint32_t Address)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    if (Address < 0x08004000U) return FLASH_SECTOR_0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <Flash_GetSector+0x50>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d201      	bcs.n	8001e04 <Flash_GetSector+0x14>
 8001e00:	2300      	movs	r3, #0
 8001e02:	e018      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08008000U) return FLASH_SECTOR_1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <Flash_GetSector+0x54>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d201      	bcs.n	8001e10 <Flash_GetSector+0x20>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e012      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x0800C000U) return FLASH_SECTOR_2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <Flash_GetSector+0x58>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d201      	bcs.n	8001e1c <Flash_GetSector+0x2c>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00c      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08010000U) return FLASH_SECTOR_3;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <Flash_GetSector+0x5c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d801      	bhi.n	8001e28 <Flash_GetSector+0x38>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08020000U) return FLASH_SECTOR_4;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <Flash_GetSector+0x60>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d801      	bhi.n	8001e34 <Flash_GetSector+0x44>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e000      	b.n	8001e36 <Flash_GetSector+0x46>
    return FLASH_SECTOR_5; // up to 0x0803FFFF for 256KB devices
 8001e34:	2305      	movs	r3, #5
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	08004000 	.word	0x08004000
 8001e44:	08008000 	.word	0x08008000
 8001e48:	0800c000 	.word	0x0800c000
 8001e4c:	0800ffff 	.word	0x0800ffff
 8001e50:	0801ffff 	.word	0x0801ffff

08001e54 <Flash_IsBlank>:

static bool Flash_IsBlank(uint32_t addr, uint32_t bytes_to_check)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e00d      	b.n	8001e80 <Flash_IsBlank+0x2c>
        uint32_t v = *(volatile uint32_t *)(addr + off);
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
        if (v != 0xFFFFFFFFU) return false;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d001      	beq.n	8001e7a <Flash_IsBlank+0x26>
 8001e76:	2300      	movs	r3, #0
 8001e78:	e007      	b.n	8001e8a <Flash_IsBlank+0x36>
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3ed      	bcc.n	8001e64 <Flash_IsBlank+0x10>
    }
    return true;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <FW_ResetContext>:

static void FW_ResetContext(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    fw_ctx.active = false;
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <FW_ResetContext+0x68>)
 8001e9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	721a      	strb	r2, [r3, #8]
    fw_ctx.error = false;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <FW_ResetContext+0x68>)
 8001ea4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	725a      	strb	r2, [r3, #9]
    fw_ctx.buffer_len = 0;
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <FW_ResetContext+0x68>)
 8001eae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
    fw_ctx.total_len = 0;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <FW_ResetContext+0x68>)
 8001eba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6053      	str	r3, [r2, #4]
    fw_ctx.write_addr = FLASH_UPDATE_ADDR;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <FW_ResetContext+0x68>)
 8001ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <FW_ResetContext+0x6c>)
 8001ece:	60d3      	str	r3, [r2, #12]
    fw_ctx.word_buf_len = 0;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <FW_ResetContext+0x68>)
 8001ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	751a      	strb	r2, [r3, #20]
    fw_ctx.crc = 0xFFFFFFFFU;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <FW_ResetContext+0x68>)
 8001edc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	6193      	str	r3, [r2, #24]
    fw_ctx.erased = false;
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <FW_ResetContext+0x68>)
 8001eea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20002a88 	.word	0x20002a88
 8001f00:	08020000 	.word	0x08020000

08001f04 <FW_CrcUpdate>:

static inline void FW_CrcUpdate(const uint8_t *data, uint32_t len)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e02b      	b.n	8001f6c <FW_CrcUpdate+0x68>
        fw_ctx.crc ^= data[i];
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	440a      	add	r2, r1
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	4053      	eors	r3, r2
 8001f26:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f28:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f2c:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	72fb      	strb	r3, [r7, #11]
 8001f32:	e015      	b.n	8001f60 <FW_CrcUpdate+0x5c>
            fw_ctx.crc = (fw_ctx.crc >> 1) ^ (0xEDB88320U & (~(fw_ctx.crc & 1U) + 1U));
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	085a      	lsrs	r2, r3, #1
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	4259      	negs	r1, r3
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <FW_CrcUpdate+0x80>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	4053      	eors	r3, r2
 8001f52:	4a0b      	ldr	r2, [pc, #44]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f58:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	72fb      	strb	r3, [r7, #11]
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d9e6      	bls.n	8001f34 <FW_CrcUpdate+0x30>
    for (uint32_t i = 0; i < len; i++) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3cf      	bcc.n	8001f14 <FW_CrcUpdate+0x10>
        }
    }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20002a88 	.word	0x20002a88
 8001f84:	edb88320 	.word	0xedb88320

08001f88 <FW_EnsureErasedForAddress>:

static HAL_StatusTypeDef FW_EnsureErasedForAddress(uint32_t address)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    if (fw_ctx.erased) return HAL_OK;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001f92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f96:	7f1b      	ldrb	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <FW_EnsureErasedForAddress+0x18>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e03a      	b.n	8002016 <FW_EnsureErasedForAddress+0x8e>
    // Проверка: область должна быть пустой, иначе это часть прошивки — отменяем OTA
    if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) { // проверим первые 1KB
 8001fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fa4:	481f      	ldr	r0, [pc, #124]	@ (8002024 <FW_EnsureErasedForAddress+0x9c>)
 8001fa6:	f7ff ff55 	bl	8001e54 <Flash_IsBlank>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <FW_EnsureErasedForAddress+0x3c>
        fw_ctx.error = true;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001fb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	725a      	strb	r2, [r3, #9]
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e028      	b.n	8002016 <FW_EnsureErasedForAddress+0x8e>
    }

    FLASH_EraseInitTypeDef erase;
    uint32_t pageError = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    erase.Sector = Flash_GetSector(address);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff0d 	bl	8001df0 <Flash_GetSector>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = 1; // стираем только сектор слота OTA
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef st = HAL_FLASHEx_Erase(&erase, &pageError);
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f007 f841 	bl	8009070 <HAL_FLASHEx_Erase>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (st == HAL_OK) fw_ctx.erased = true;
 8001ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <FW_EnsureErasedForAddress+0x80>
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001ffe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002002:	2201      	movs	r2, #1
 8002004:	771a      	strb	r2, [r3, #28]
 8002006:	e004      	b.n	8002012 <FW_EnsureErasedForAddress+0x8a>
    else fw_ctx.error = true;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 800200a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800200e:	2201      	movs	r2, #1
 8002010:	725a      	strb	r2, [r3, #9]
    return st;
 8002012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002016:	4618      	mov	r0, r3
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20002a88 	.word	0x20002a88
 8002024:	08020000 	.word	0x08020000

08002028 <FW_FlashWriteStream>:

static HAL_StatusTypeDef FW_FlashWriteStream(const uint8_t *data, uint32_t len)
{
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
    // Обеспечиваем стирание перед первой записью
    if (!fw_ctx.erased) {
 8002034:	4b64      	ldr	r3, [pc, #400]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002036:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800203a:	7f1b      	ldrb	r3, [r3, #28]
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <FW_FlashWriteStream+0x3a>
        HAL_StatusTypeDef est = FW_EnsureErasedForAddress(fw_ctx.write_addr);
 8002046:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff9a 	bl	8001f88 <FW_EnsureErasedForAddress>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
        if (est != HAL_OK) return est;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <FW_FlashWriteStream+0x3a>
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	e0ac      	b.n	80021bc <FW_FlashWriteStream+0x194>
    }

    // Обновляем CRC по потоку
    FW_CrcUpdate(data, len);
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff4d 	bl	8001f04 <FW_CrcUpdate>

    uint32_t idx = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
    // Дополним незавершённое слово, если было
    if (fw_ctx.word_buf_len > 0) {
 800206e:	4b56      	ldr	r3, [pc, #344]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002070:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002074:	7d1b      	ldrb	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d07e      	beq.n	8002178 <FW_FlashWriteStream+0x150>
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 800207a:	e016      	b.n	80020aa <FW_FlashWriteStream+0x82>
            fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	617a      	str	r2, [r7, #20]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	441a      	add	r2, r3
 8002086:	4b50      	ldr	r3, [pc, #320]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800208c:	7d1b      	ldrb	r3, [r3, #20]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	b2c8      	uxtb	r0, r1
 8002092:	494d      	ldr	r1, [pc, #308]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002094:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002098:	7508      	strb	r0, [r1, #20]
 800209a:	4619      	mov	r1, r3
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020a6:	3310      	adds	r3, #16
 80020a8:	701a      	strb	r2, [r3, #0]
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020b0:	7d1b      	ldrb	r3, [r3, #20]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d803      	bhi.n	80020be <FW_FlashWriteStream+0x96>
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3de      	bcc.n	800207c <FW_FlashWriteStream+0x54>
        }
        if (fw_ctx.word_buf_len == 4) {
 80020be:	4b42      	ldr	r3, [pc, #264]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020c4:	7d1b      	ldrb	r3, [r3, #20]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d156      	bne.n	8002178 <FW_FlashWriteStream+0x150>
            uint32_t word;
            memcpy(&word, fw_ctx.word_buf, 4);
 80020ca:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60fb      	str	r3, [r7, #12]
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 80020d4:	4b3c      	ldr	r3, [pc, #240]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	4698      	mov	r8, r3
 80020e2:	4691      	mov	r9, r2
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	2002      	movs	r0, #2
 80020ea:	f006 fe0f 	bl	8008d0c <HAL_FLASH_Program>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <FW_FlashWriteStream+0xd0>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e061      	b.n	80021bc <FW_FlashWriteStream+0x194>
            fw_ctx.write_addr += 4;
 80020f8:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	4a31      	ldr	r2, [pc, #196]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002104:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002108:	60d3      	str	r3, [r2, #12]
            fw_ctx.word_buf_len = 0;
 800210a:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800210c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002110:	2200      	movs	r2, #0
 8002112:	751a      	strb	r2, [r3, #20]
        }
    }

    // Пишем целыми словами напрямую из входного буфера
    while ((idx + 4) <= len) {
 8002114:	e030      	b.n	8002178 <FW_FlashWriteStream+0x150>
        uint32_t word;
        memcpy(&word, &data[idx], 4);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	461c      	mov	r4, r3
 800212e:	4615      	mov	r5, r2
 8002130:	4622      	mov	r2, r4
 8002132:	462b      	mov	r3, r5
 8002134:	2002      	movs	r0, #2
 8002136:	f006 fde9 	bl	8008d0c <HAL_FLASH_Program>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <FW_FlashWriteStream+0x11c>
 8002140:	2301      	movs	r3, #1
 8002142:	e03b      	b.n	80021bc <FW_FlashWriteStream+0x194>
        fw_ctx.write_addr += 4;
 8002144:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002146:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002150:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002154:	60d3      	str	r3, [r2, #12]
        idx += 4;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
        if (fw_ctx.write_addr >= FLASH_UPDATE_END) { fw_ctx.error = true; return HAL_ERROR; }
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800215e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <FW_FlashWriteStream+0x1a4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d906      	bls.n	8002178 <FW_FlashWriteStream+0x150>
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800216c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002170:	2201      	movs	r2, #1
 8002172:	725a      	strb	r2, [r3, #9]
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <FW_FlashWriteStream+0x194>
    while ((idx + 4) <= len) {
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3304      	adds	r3, #4
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d2c9      	bcs.n	8002116 <FW_FlashWriteStream+0xee>
    }

    // Остаток < 4 байт сохраняем в буфер до завершения
    while (idx < len) {
 8002182:	e016      	b.n	80021b2 <FW_FlashWriteStream+0x18a>
        fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	617a      	str	r2, [r7, #20]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	441a      	add	r2, r3
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002190:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002194:	7d1b      	ldrb	r3, [r3, #20]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	b2c8      	uxtb	r0, r1
 800219a:	490b      	ldr	r1, [pc, #44]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800219c:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80021a0:	7508      	strb	r0, [r1, #20]
 80021a2:	4619      	mov	r1, r3
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021ae:	3310      	adds	r3, #16
 80021b0:	701a      	strb	r2, [r3, #0]
    while (idx < len) {
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3e4      	bcc.n	8002184 <FW_FlashWriteStream+0x15c>
    }
    return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021c6:	bf00      	nop
 80021c8:	20002a88 	.word	0x20002a88
 80021cc:	0803ffff 	.word	0x0803ffff

080021d0 <FW_Update_CGI_Handler>:
    return ~crc;
}

// --- CGI ---
const char* FW_Update_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
    return "/update.html";
 80021de:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <FW_Update_CGI_Handler+0x1c>)
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	08025198 	.word	0x08025198

080021f0 <LOGIN_CGI_Handler>:

const tCGI FW_UPDATE_CGI = {"/fw_update.cgi", FW_Update_CGI_Handler};

// GET-логин через CGI-параметры user/pass
const char* LOGIN_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b096      	sub	sp, #88	@ 0x58
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
    char user[32] = {0};
 80021fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002202:	2220      	movs	r2, #32
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f020 f9f0 	bl	80225ec <memset>
    char pass[32] = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2220      	movs	r2, #32
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f020 f9e9 	bl	80225ec <memset>
    for (int i = 0; i < iNumParams; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	657b      	str	r3, [r7, #84]	@ 0x54
 800221e:	e04f      	b.n	80022c0 <LOGIN_CGI_Handler+0xd0>
        if (strcmp(pcParam[i], "user") == 0 && pcValue[i] && pcValue[i][0]) {
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4941      	ldr	r1, [pc, #260]	@ (8002330 <LOGIN_CGI_Handler+0x140>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7fd ffcb 	bl	80001c8 <strcmp>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11a      	bne.n	800226e <LOGIN_CGI_Handler+0x7e>
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d013      	beq.n	800226e <LOGIN_CGI_Handler+0x7e>
 8002246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4413      	add	r3, r2
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <LOGIN_CGI_Handler+0x7e>
            strncpy(user, pcValue[i], sizeof(user) - 1);
 8002256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002264:	221f      	movs	r2, #31
 8002266:	4618      	mov	r0, r3
 8002268:	f020 fa08 	bl	802267c <strncpy>
 800226c:	e025      	b.n	80022ba <LOGIN_CGI_Handler+0xca>
        } else if (strcmp(pcParam[i], "pass") == 0 && pcValue[i] && pcValue[i][0]) {
 800226e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	492e      	ldr	r1, [pc, #184]	@ (8002334 <LOGIN_CGI_Handler+0x144>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fd ffa4 	bl	80001c8 <strcmp>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d119      	bne.n	80022ba <LOGIN_CGI_Handler+0xca>
 8002286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <LOGIN_CGI_Handler+0xca>
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	4413      	add	r3, r2
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <LOGIN_CGI_Handler+0xca>
            strncpy(pass, pcValue[i], sizeof(pass) - 1);
 80022a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	221f      	movs	r2, #31
 80022b4:	4618      	mov	r0, r3
 80022b6:	f020 f9e1 	bl	802267c <strncpy>
    for (int i = 0; i < iNumParams; i++) {
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	3301      	adds	r3, #1
 80022be:	657b      	str	r3, [r7, #84]	@ 0x54
 80022c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbab      	blt.n	8002220 <LOGIN_CGI_Handler+0x30>
        }
    }
    url_decode(user, user);
 80022c8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80022cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f836 	bl	8002344 <url_decode>
    url_decode(pass, pass);
 80022d8:	f107 0214 	add.w	r2, r7, #20
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f82e 	bl	8002344 <url_decode>
    extern volatile uint8_t g_is_authenticated;
    g_is_authenticated = (user[0] && pass[0] && Creds_CheckLogin(user, pass)) ? 1 : 0;
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <LOGIN_CGI_Handler+0x120>
 80022f0:	7d3b      	ldrb	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <LOGIN_CGI_Handler+0x120>
 80022f6:	f107 0214 	add.w	r2, r7, #20
 80022fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff faa1 	bl	8001848 <Creds_CheckLogin>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <LOGIN_CGI_Handler+0x120>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LOGIN_CGI_Handler+0x122>
 8002310:	2300      	movs	r3, #0
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <LOGIN_CGI_Handler+0x148>)
 8002316:	701a      	strb	r2, [r3, #0]
    return g_is_authenticated ? "/index.html" : "/login_failed.html";
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <LOGIN_CGI_Handler+0x148>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <LOGIN_CGI_Handler+0x136>
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <LOGIN_CGI_Handler+0x14c>)
 8002324:	e000      	b.n	8002328 <LOGIN_CGI_Handler+0x138>
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <LOGIN_CGI_Handler+0x150>)
}
 8002328:	4618      	mov	r0, r3
 800232a:	3758      	adds	r7, #88	@ 0x58
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08025178 	.word	0x08025178
 8002334:	08025180 	.word	0x08025180
 8002338:	20002a38 	.word	0x20002a38
 800233c:	080251b8 	.word	0x080251b8
 8002340:	080251c4 	.word	0x080251c4

08002344 <url_decode>:

void url_decode(char *dst, const char *src)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    char a, b;
    while (*src)
 800234e:	e06a      	b.n	8002426 <url_decode+0xe2>
    {
        if ((*src == '%') &&
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b25      	cmp	r3, #37	@ 0x25
 8002356:	d151      	bne.n	80023fc <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	73fb      	strb	r3, [r7, #15]
        if ((*src == '%') &&
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04a      	beq.n	80023fc <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3302      	adds	r3, #2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	73bb      	strb	r3, [r7, #14]
 800236e:	7bbb      	ldrb	r3, [r7, #14]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d043      	beq.n	80023fc <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <url_decode+0xfc>)
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
            ((a = src[1]) && (b = src[2])) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03a      	beq.n	80023fc <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	3301      	adds	r3, #1
 800238a:	4a2d      	ldr	r2, [pc, #180]	@ (8002440 <url_decode+0xfc>)
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8002394:	2b00      	cmp	r3, #0
 8002396:	d031      	beq.n	80023fc <url_decode+0xb8>
        {
            a = (a >= 'a') ? a - 'a' + 10 : (a >= 'A') ? a - 'A' + 10 : a - '0';
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b60      	cmp	r3, #96	@ 0x60
 800239c:	d903      	bls.n	80023a6 <url_decode+0x62>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3b57      	subs	r3, #87	@ 0x57
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e009      	b.n	80023ba <url_decode+0x76>
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b40      	cmp	r3, #64	@ 0x40
 80023aa:	d903      	bls.n	80023b4 <url_decode+0x70>
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3b37      	subs	r3, #55	@ 0x37
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e002      	b.n	80023ba <url_decode+0x76>
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3b30      	subs	r3, #48	@ 0x30
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	73fb      	strb	r3, [r7, #15]
            b = (b >= 'a') ? b - 'a' + 10 : (b >= 'A') ? b - 'A' + 10 : b - '0';
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	2b60      	cmp	r3, #96	@ 0x60
 80023c0:	d903      	bls.n	80023ca <url_decode+0x86>
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	3b57      	subs	r3, #87	@ 0x57
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e009      	b.n	80023de <url_decode+0x9a>
 80023ca:	7bbb      	ldrb	r3, [r7, #14]
 80023cc:	2b40      	cmp	r3, #64	@ 0x40
 80023ce:	d903      	bls.n	80023d8 <url_decode+0x94>
 80023d0:	7bbb      	ldrb	r3, [r7, #14]
 80023d2:	3b37      	subs	r3, #55	@ 0x37
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e002      	b.n	80023de <url_decode+0x9a>
 80023d8:	7bbb      	ldrb	r3, [r7, #14]
 80023da:	3b30      	subs	r3, #48	@ 0x30
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	73bb      	strb	r3, [r7, #14]
            *dst++ = (char)(16 * a + b);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	7bba      	ldrb	r2, [r7, #14]
 80023ee:	440a      	add	r2, r1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
            src += 3;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	3303      	adds	r3, #3
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	e014      	b.n	8002426 <url_decode+0xe2>
        }
        else if (*src == '+')
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b2b      	cmp	r3, #43	@ 0x2b
 8002402:	d108      	bne.n	8002416 <url_decode+0xd2>
        {
            *dst++ = ' ';
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	701a      	strb	r2, [r3, #0]
            src++;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	e007      	b.n	8002426 <url_decode+0xe2>
        }
        else
        {
            *dst++ = *src++;
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	1c53      	adds	r3, r2, #1
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	6079      	str	r1, [r7, #4]
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
    while (*src)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d190      	bne.n	8002350 <url_decode+0xc>
        }
    }
    *dst = '\0';
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	08031854 	.word	0x08031854

08002444 <httpd_post_begin>:
                       u16_t content_len,
                       int total_data_len,
                       char *post_data,
                       u16_t post_data_len,
                       u8_t *connection_status)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	807b      	strh	r3, [r7, #2]
    // Сброс признаков по умолчанию
    fw_request_active = false;
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <httpd_post_begin+0x80>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]

    if(strcmp(uri, "/fw_update.cgi") == 0) {
 8002458:	491b      	ldr	r1, [pc, #108]	@ (80024c8 <httpd_post_begin+0x84>)
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	f7fd feb4 	bl	80001c8 <strcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d128      	bne.n	80024b8 <httpd_post_begin+0x74>
        fw_request_active = true;
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <httpd_post_begin+0x80>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
        FW_ResetContext();
 800246c:	f7ff fd12 	bl	8001e94 <FW_ResetContext>
        // Если слот OTA потенциально пересекается с текущей прошивкой (не пустой) — не начинаем запись
        if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) {
 8002470:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002474:	4815      	ldr	r0, [pc, #84]	@ (80024cc <httpd_post_begin+0x88>)
 8002476:	f7ff fced 	bl	8001e54 <Flash_IsBlank>
 800247a:	4603      	mov	r3, r0
 800247c:	f083 0301 	eor.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <httpd_post_begin+0x60>
            fw_ctx.error = true;
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <httpd_post_begin+0x8c>)
 8002488:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800248c:	2201      	movs	r2, #1
 800248e:	725a      	strb	r2, [r3, #9]
            fw_ctx.active = false;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <httpd_post_begin+0x8c>)
 8002492:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002496:	2200      	movs	r2, #0
 8002498:	721a      	strb	r2, [r3, #8]
            *connection_status = 0; // не буферизуем лишние данные
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
            return ERR_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e00a      	b.n	80024ba <httpd_post_begin+0x76>
        }
        fw_ctx.active = true;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <httpd_post_begin+0x8c>)
 80024a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024aa:	2201      	movs	r2, #1
 80024ac:	721a      	strb	r2, [r3, #8]
        *connection_status = 1; // продолжаем принимать
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 80024b4:	f006 fc7e 	bl	8008db4 <HAL_FLASH_Unlock>
    }
    return ERR_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20004aa8 	.word	0x20004aa8
 80024c8:	080251a8 	.word	0x080251a8
 80024cc:	08020000 	.word	0x08020000
 80024d0:	20002a88 	.word	0x20002a88

080024d4 <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    if (p == NULL) return ERR_OK;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <httpd_post_receive_data+0x14>
 80024e4:	2300      	movs	r3, #0
 80024e6:	e030      	b.n	800254a <httpd_post_receive_data+0x76>

    if (fw_ctx.active) {
 80024e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <httpd_post_receive_data+0x80>)
 80024ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024ee:	7a1b      	ldrb	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d029      	beq.n	8002548 <httpd_post_receive_data+0x74>
        struct pbuf *q = p;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
        while(q) {
 80024f8:	e023      	b.n	8002542 <httpd_post_receive_data+0x6e>
            if (FW_FlashWriteStream((const uint8_t*)q->payload, q->len) != HAL_OK) {
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	895b      	ldrh	r3, [r3, #10]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7ff fd8f 	bl	8002028 <FW_FlashWriteStream>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <httpd_post_receive_data+0x52>
                fw_ctx.error = true;
 8002510:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <httpd_post_receive_data+0x80>)
 8002512:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002516:	2201      	movs	r2, #1
 8002518:	725a      	strb	r2, [r3, #9]
                fw_ctx.active = false;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <httpd_post_receive_data+0x80>)
 800251c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
                break;
 8002524:	e010      	b.n	8002548 <httpd_post_receive_data+0x74>
            }
            fw_ctx.total_len += q->len;
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <httpd_post_receive_data+0x80>)
 8002528:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	8952      	ldrh	r2, [r2, #10]
 8002532:	4413      	add	r3, r2
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <httpd_post_receive_data+0x80>)
 8002536:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800253a:	6053      	str	r3, [r2, #4]
            q = q->next;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
        while(q) {
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1d8      	bne.n	80024fa <httpd_post_receive_data+0x26>
        }
    }
    return ERR_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20002a88 	.word	0x20002a88

08002558 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
    // Если это был fw_update — завершим запись и отдадим соответствующую страницу
    if (fw_request_active) {
 8002566:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <httpd_post_finished+0x110>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d078      	beq.n	8002660 <httpd_post_finished+0x108>
        // Завершаем запись: дописываем неполное слово, если нужно
        if (fw_ctx.active && !fw_ctx.error) {
 800256e:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <httpd_post_finished+0x114>)
 8002570:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002574:	7a1b      	ldrb	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04b      	beq.n	8002612 <httpd_post_finished+0xba>
 800257a:	4b3c      	ldr	r3, [pc, #240]	@ (800266c <httpd_post_finished+0x114>)
 800257c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002580:	7a5b      	ldrb	r3, [r3, #9]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d042      	beq.n	8002612 <httpd_post_finished+0xba>
            if (fw_ctx.word_buf_len > 0) {
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <httpd_post_finished+0x114>)
 800258e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002592:	7d1b      	ldrb	r3, [r3, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03c      	beq.n	8002612 <httpd_post_finished+0xba>
                while (fw_ctx.word_buf_len < 4) fw_ctx.word_buf[fw_ctx.word_buf_len++] = 0xFF;
 8002598:	e011      	b.n	80025be <httpd_post_finished+0x66>
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <httpd_post_finished+0x114>)
 800259c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025a0:	7d1b      	ldrb	r3, [r3, #20]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	b2d1      	uxtb	r1, r2
 80025a6:	4a31      	ldr	r2, [pc, #196]	@ (800266c <httpd_post_finished+0x114>)
 80025a8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80025ac:	7511      	strb	r1, [r2, #20]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <httpd_post_finished+0x114>)
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025b8:	3310      	adds	r3, #16
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <httpd_post_finished+0x114>)
 80025c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025c4:	7d1b      	ldrb	r3, [r3, #20]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d9e7      	bls.n	800259a <httpd_post_finished+0x42>
                uint32_t word;
                memcpy(&word, fw_ctx.word_buf, 4);
 80025ca:	4b28      	ldr	r3, [pc, #160]	@ (800266c <httpd_post_finished+0x114>)
 80025cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	617b      	str	r3, [r7, #20]
                if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) {
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <httpd_post_finished+0x114>)
 80025d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2200      	movs	r2, #0
 80025e0:	461c      	mov	r4, r3
 80025e2:	4615      	mov	r5, r2
 80025e4:	4622      	mov	r2, r4
 80025e6:	462b      	mov	r3, r5
 80025e8:	2002      	movs	r0, #2
 80025ea:	f006 fb8f 	bl	8008d0c <HAL_FLASH_Program>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <httpd_post_finished+0xa8>
                    fw_ctx.error = true;
 80025f4:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <httpd_post_finished+0x114>)
 80025f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025fa:	2201      	movs	r2, #1
 80025fc:	725a      	strb	r2, [r3, #9]
 80025fe:	e008      	b.n	8002612 <httpd_post_finished+0xba>
                } else {
                    fw_ctx.write_addr += 4;
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <httpd_post_finished+0x114>)
 8002602:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	3304      	adds	r3, #4
 800260a:	4a18      	ldr	r2, [pc, #96]	@ (800266c <httpd_post_finished+0x114>)
 800260c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002610:	60d3      	str	r3, [r2, #12]
                }
            }
        }
        HAL_FLASH_Lock();
 8002612:	f006 fbf1 	bl	8008df8 <HAL_FLASH_Lock>
        fw_ctx.active = false;
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <httpd_post_finished+0x114>)
 8002618:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800261c:	2200      	movs	r2, #0
 800261e:	721a      	strb	r2, [r3, #8]
        if (response_uri && response_uri_len) {
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01b      	beq.n	800265e <httpd_post_finished+0x106>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d018      	beq.n	800265e <httpd_post_finished+0x106>
            if (fw_ctx.error || fw_ctx.total_len == 0) {
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <httpd_post_finished+0x114>)
 800262e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002632:	7a5b      	ldrb	r3, [r3, #9]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <httpd_post_finished+0xec>
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <httpd_post_finished+0x114>)
 800263a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <httpd_post_finished+0xfa>
                strncpy(response_uri, "/update.html", response_uri_len);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	461a      	mov	r2, r3
 8002648:	4909      	ldr	r1, [pc, #36]	@ (8002670 <httpd_post_finished+0x118>)
 800264a:	68b8      	ldr	r0, [r7, #8]
 800264c:	f020 f816 	bl	802267c <strncpy>
            } else {
                strncpy(response_uri, "/update_complete.html", response_uri_len);
            }
        }
        return;
 8002650:	e005      	b.n	800265e <httpd_post_finished+0x106>
                strncpy(response_uri, "/update_complete.html", response_uri_len);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	4907      	ldr	r1, [pc, #28]	@ (8002674 <httpd_post_finished+0x11c>)
 8002658:	68b8      	ldr	r0, [r7, #8]
 800265a:	f020 f80f 	bl	802267c <strncpy>
        return;
 800265e:	bf00      	nop
    }
}
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	bf00      	nop
 8002668:	20004aa8 	.word	0x20004aa8
 800266c:	20002a88 	.word	0x20002a88
 8002670:	08025198 	.word	0x08025198
 8002674:	080251d8 	.word	0x080251d8

08002678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b0b3      	sub	sp, #204	@ 0xcc
 800267c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267e:	f004 f965 	bl	800694c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002682:	f000 fa07 	bl	8002a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002686:	f000 fbe7 	bl	8002e58 <MX_GPIO_Init>
  MX_DMA_Init();
 800268a:	f000 fbc5 	bl	8002e18 <MX_DMA_Init>
  MX_I2C1_Init();
 800268e:	f000 fad3 	bl	8002c38 <MX_I2C1_Init>
  MX_LWIP_Init();
 8002692:	f009 f845 	bl	800b720 <MX_LWIP_Init>
  MX_ADC1_Init();
 8002696:	f000 fa5d 	bl	8002b54 <MX_ADC1_Init>
  MX_TIM3_Init();
 800269a:	f000 fb71 	bl	8002d80 <MX_TIM3_Init>
  MX_RTC_Init();
 800269e:	f000 faf9 	bl	8002c94 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация логина/пароля (admin/admin по умолчанию)
  Creds_Init();
 80026a2:	f7ff f89f 	bl	80017e4 <Creds_Init>
  Settings_Init();
 80026a6:	f000 fd23 	bl	80030f0 <Settings_Init>
  // Load and apply display rotation before drawing anything
  {
    uint8_t rot180 = Settings_Load_Rotation();
 80026aa:	f000 fe53 	bl	8003354 <Settings_Load_Rotation>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    ssd1306_SetRotation180(rot180);
 80026b4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fe0d 	bl	80062d8 <ssd1306_SetRotation180>

  ip4_addr_t bk_ip, bk_mask, bk_gw;
  uint8_t bk_dhcp;
  char bk_snmp_read[32], bk_snmp_write[32], bk_snmp_trap[32];

  Settings_Load_From_Backup(&bk_ip, &bk_mask, &bk_gw, &bk_dhcp,
 80026be:	f107 049f 	add.w	r4, r7, #159	@ 0x9f
 80026c2:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80026c6:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80026ca:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80026ce:	2320      	movs	r3, #32
 80026d0:	9305      	str	r3, [sp, #20]
 80026d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	2320      	movs	r3, #32
 80026da:	9303      	str	r3, [sp, #12]
 80026dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2320      	movs	r3, #32
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4623      	mov	r3, r4
 80026ee:	f000 fd67 	bl	80031c0 <Settings_Load_From_Backup>
                            bk_snmp_read, sizeof(bk_snmp_read),
                            bk_snmp_write, sizeof(bk_snmp_write),
                            bk_snmp_trap, sizeof(bk_snmp_trap));

  // Apply saved network settings on boot if present
  if (bk_dhcp || bk_ip.addr != 0) {
 80026f2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <main+0x8a>
 80026fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d017      	beq.n	8002732 <main+0xba>
      netif_set_down(&gnetif);
 8002702:	4869      	ldr	r0, [pc, #420]	@ (80028a8 <main+0x230>)
 8002704:	f013 f94a 	bl	801599c <netif_set_down>
      if (bk_dhcp) {
 8002708:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <main+0xa0>
          dhcp_start(&gnetif);
 8002710:	4865      	ldr	r0, [pc, #404]	@ (80028a8 <main+0x230>)
 8002712:	f01a fcd5 	bl	801d0c0 <dhcp_start>
 8002716:	e008      	b.n	800272a <main+0xb2>
      } else {
          netif_set_addr(&gnetif, &bk_ip, &bk_mask, &bk_gw);
 8002718:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800271c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002720:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002724:	4860      	ldr	r0, [pc, #384]	@ (80028a8 <main+0x230>)
 8002726:	f013 f851 	bl	80157cc <netif_set_addr>
      }
      netif_set_up(&gnetif);
 800272a:	485f      	ldr	r0, [pc, #380]	@ (80028a8 <main+0x230>)
 800272c:	f013 f8e6 	bl	80158fc <netif_set_up>
 8002730:	e015      	b.n	800275e <main+0xe6>
  } else {
      // Backup пуст — применяем заводские значения (статический IP)
      ip4_addr_t def_ip, def_mask, def_gw;
      IP4_ADDR(&def_ip, 192,168,0,254);
 8002732:	4b5e      	ldr	r3, [pc, #376]	@ (80028ac <main+0x234>)
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
      IP4_ADDR(&def_mask, 255,255,255,0);
 8002736:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
      IP4_ADDR(&def_gw, 192,168,0,1);
 800273c:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <main+0x238>)
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
      netif_set_down(&gnetif);
 8002740:	4859      	ldr	r0, [pc, #356]	@ (80028a8 <main+0x230>)
 8002742:	f013 f92b 	bl	801599c <netif_set_down>
      netif_set_addr(&gnetif, &def_ip, &def_mask, &def_gw);
 8002746:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800274a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800274e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002752:	4855      	ldr	r0, [pc, #340]	@ (80028a8 <main+0x230>)
 8002754:	f013 f83a 	bl	80157cc <netif_set_addr>
      netif_set_up(&gnetif);
 8002758:	4853      	ldr	r0, [pc, #332]	@ (80028a8 <main+0x230>)
 800275a:	f013 f8cf 	bl	80158fc <netif_set_up>
  }

  /* Инициализируем SNMP community из backup */
  if (bk_snmp_read[0])  strncpy(snmp_read,  bk_snmp_read,  sizeof(snmp_read)-1);
 800275e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d006      	beq.n	8002774 <main+0xfc>
 8002766:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800276a:	221f      	movs	r2, #31
 800276c:	4619      	mov	r1, r3
 800276e:	4851      	ldr	r0, [pc, #324]	@ (80028b4 <main+0x23c>)
 8002770:	f01f ff84 	bl	802267c <strncpy>
  if (bk_snmp_write[0]) strncpy(snmp_write, bk_snmp_write, sizeof(snmp_write)-1);
 8002774:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <main+0x112>
 800277c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002780:	221f      	movs	r2, #31
 8002782:	4619      	mov	r1, r3
 8002784:	484c      	ldr	r0, [pc, #304]	@ (80028b8 <main+0x240>)
 8002786:	f01f ff79 	bl	802267c <strncpy>
  if (bk_snmp_trap[0])  strncpy(snmp_trap,  bk_snmp_trap,  sizeof(snmp_trap)-1);
 800278a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <main+0x128>
 8002792:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002796:	221f      	movs	r2, #31
 8002798:	4619      	mov	r1, r3
 800279a:	4848      	ldr	r0, [pc, #288]	@ (80028bc <main+0x244>)
 800279c:	f01f ff6e 	bl	802267c <strncpy>
  /* Применяем к SNMP-агенту на старте */
  snmp_community[0] = snmp_read;
 80027a0:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <main+0x248>)
 80027a2:	4a44      	ldr	r2, [pc, #272]	@ (80028b4 <main+0x23c>)
 80027a4:	601a      	str	r2, [r3, #0]
  snmp_community_write[0] = snmp_write;
 80027a6:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <main+0x24c>)
 80027a8:	4a43      	ldr	r2, [pc, #268]	@ (80028b8 <main+0x240>)
 80027aa:	601a      	str	r2, [r3, #0]
  snmp_set_community_trap(snmp_trap);
 80027ac:	4843      	ldr	r0, [pc, #268]	@ (80028bc <main+0x244>)
 80027ae:	f00f f867 	bl	8011880 <snmp_set_community_trap>


  httpd_init();
 80027b2:	f00b fab3 	bl	800dd1c <httpd_init>

  httpd_ssi_init_custom();
 80027b6:	f009 feb7 	bl	800c528 <httpd_ssi_init_custom>

  // Регистрация CGI

  CGI_TAB[0] = NET_CGI;
 80027ba:	4b43      	ldr	r3, [pc, #268]	@ (80028c8 <main+0x250>)
 80027bc:	4a43      	ldr	r2, [pc, #268]	@ (80028cc <main+0x254>)
 80027be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c2:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[1] = DATE_CGI;
 80027c6:	4b40      	ldr	r3, [pc, #256]	@ (80028c8 <main+0x250>)
 80027c8:	4a41      	ldr	r2, [pc, #260]	@ (80028d0 <main+0x258>)
 80027ca:	3308      	adds	r3, #8
 80027cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d0:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[2] = TIME_CGI;
 80027d4:	4b3c      	ldr	r3, [pc, #240]	@ (80028c8 <main+0x250>)
 80027d6:	4a3f      	ldr	r2, [pc, #252]	@ (80028d4 <main+0x25c>)
 80027d8:	3310      	adds	r3, #16
 80027da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027de:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[3] = SNMP_CGI;
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <main+0x250>)
 80027e4:	4a3c      	ldr	r2, [pc, #240]	@ (80028d8 <main+0x260>)
 80027e6:	3318      	adds	r3, #24
 80027e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ec:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[4] = FW_UPDATE_CGI;
 80027f0:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <main+0x250>)
 80027f2:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <main+0x264>)
 80027f4:	3320      	adds	r3, #32
 80027f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027fa:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[5] = LOGIN_CGI;
 80027fe:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <main+0x250>)
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <main+0x268>)
 8002802:	3328      	adds	r3, #40	@ 0x28
 8002804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002808:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[6] = CREDS_CGI;
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <main+0x250>)
 800280e:	4a35      	ldr	r2, [pc, #212]	@ (80028e4 <main+0x26c>)
 8002810:	3330      	adds	r3, #48	@ 0x30
 8002812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002816:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 7); // количество зарегистрированных CGI
 800281a:	2107      	movs	r1, #7
 800281c:	482a      	ldr	r0, [pc, #168]	@ (80028c8 <main+0x250>)
 800281e:	f00b fb0b 	bl	800de38 <http_set_cgi_handlers>
  snmp_init();
 8002822:	f011 fa55 	bl	8013cd0 <snmp_init>

  snmp_set_mibs(mib_array, snmp_num_mibs);
 8002826:	2302      	movs	r3, #2
 8002828:	4619      	mov	r1, r3
 800282a:	482f      	ldr	r0, [pc, #188]	@ (80028e8 <main+0x270>)
 800282c:	f00c f898 	bl	800e960 <snmp_set_mibs>


  ssd1306_Init();
 8002830:	f003 fce8 	bl	8006204 <ssd1306_Init>

  ssd1306_UpdateScreen();
 8002834:	f003 fd88 	bl	8006348 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 8002838:	2000      	movs	r0, #0
 800283a:	f003 fd6d 	bl	8006318 <ssd1306_Fill>

  Buttons_Init();
 800283e:	f001 f9e9 	bl	8003c14 <Buttons_Init>


  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8002842:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002846:	4929      	ldr	r1, [pc, #164]	@ (80028ec <main+0x274>)
 8002848:	4829      	ldr	r0, [pc, #164]	@ (80028f0 <main+0x278>)
 800284a:	f004 f955 	bl	8006af8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 800284e:	4829      	ldr	r0, [pc, #164]	@ (80028f4 <main+0x27c>)
 8002850:	f008 fc7e 	bl	800b150 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8002854:	f009 f88c 	bl	800b970 <MX_LWIP_Process>

      if (dma_ready) {
 8002858:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <main+0x280>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <main+0x1fa>
          SignalProcessor_Update(adc_buffer, ADC_SAMPLES);
 8002862:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002866:	4821      	ldr	r0, [pc, #132]	@ (80028ec <main+0x274>)
 8002868:	f000 fdba 	bl	80033e0 <SignalProcessor_Update>
          dma_ready = 0;
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <main+0x280>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
      }
	    Buttons_Process();
 8002872:	f001 fb21 	bl	8003eb8 <Buttons_Process>

	    OLED_Settings_TimeoutCheck();
 8002876:	f003 fba5 	bl	8005fc4 <OLED_Settings_TimeoutCheck>

	    OLED_UpdateDisplay();
 800287a:	f003 fbcd 	bl	8006018 <OLED_UpdateDisplay>

	    if (apply_network_settings) {
 800287e:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <main+0x284>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d057      	beq.n	8002936 <main+0x2be>
	        apply_network_settings = 0;
 8002886:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <main+0x284>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

	        netif_set_down(&gnetif);
 800288c:	4806      	ldr	r0, [pc, #24]	@ (80028a8 <main+0x230>)
 800288e:	f013 f885 	bl	801599c <netif_set_down>
	        dhcp_stop(&gnetif);
 8002892:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <main+0x230>)
 8002894:	f01b f8f0 	bl	801da78 <dhcp_stop>

	        if (new_dhcp_enabled) {
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <main+0x288>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d031      	beq.n	8002904 <main+0x28c>
	            dhcp_start(&gnetif);
 80028a0:	4801      	ldr	r0, [pc, #4]	@ (80028a8 <main+0x230>)
 80028a2:	f01a fc0d 	bl	801d0c0 <dhcp_start>
 80028a6:	e033      	b.n	8002910 <main+0x298>
 80028a8:	20004f7c 	.word	0x20004f7c
 80028ac:	fe00a8c0 	.word	0xfe00a8c0
 80028b0:	0100a8c0 	.word	0x0100a8c0
 80028b4:	20000010 	.word	0x20000010
 80028b8:	20000030 	.word	0x20000030
 80028bc:	20000050 	.word	0x20000050
 80028c0:	2000010c 	.word	0x2000010c
 80028c4:	20000110 	.word	0x20000110
 80028c8:	20002a4c 	.word	0x20002a4c
 80028cc:	08027f84 	.word	0x08027f84
 80028d0:	08027f94 	.word	0x08027f94
 80028d4:	08027f9c 	.word	0x08027f9c
 80028d8:	08027fa4 	.word	0x08027fa4
 80028dc:	08027fac 	.word	0x08027fac
 80028e0:	08027f8c 	.word	0x08027f8c
 80028e4:	20000008 	.word	0x20000008
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000350 	.word	0x20000350
 80028f0:	200028d4 	.word	0x200028d4
 80028f4:	200029f0 	.word	0x200029f0
 80028f8:	200028d0 	.word	0x200028d0
 80028fc:	20002a49 	.word	0x20002a49
 8002900:	20002a48 	.word	0x20002a48
	        } else {
	            netif_set_addr(&gnetif, &new_ip, &new_mask, &new_gw);
 8002904:	4b4f      	ldr	r3, [pc, #316]	@ (8002a44 <main+0x3cc>)
 8002906:	4a50      	ldr	r2, [pc, #320]	@ (8002a48 <main+0x3d0>)
 8002908:	4950      	ldr	r1, [pc, #320]	@ (8002a4c <main+0x3d4>)
 800290a:	4851      	ldr	r0, [pc, #324]	@ (8002a50 <main+0x3d8>)
 800290c:	f012 ff5e 	bl	80157cc <netif_set_addr>
	        }
	        netif_set_up(&gnetif);
 8002910:	484f      	ldr	r0, [pc, #316]	@ (8002a50 <main+0x3d8>)
 8002912:	f012 fff3 	bl	80158fc <netif_set_up>

	        Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8002916:	4b4f      	ldr	r3, [pc, #316]	@ (8002a54 <main+0x3dc>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a44 <main+0x3cc>)
 800291c:	494a      	ldr	r1, [pc, #296]	@ (8002a48 <main+0x3d0>)
 800291e:	484b      	ldr	r0, [pc, #300]	@ (8002a4c <main+0x3d4>)
 8002920:	4c4d      	ldr	r4, [pc, #308]	@ (8002a58 <main+0x3e0>)
 8002922:	9402      	str	r4, [sp, #8]
 8002924:	4c4d      	ldr	r4, [pc, #308]	@ (8002a5c <main+0x3e4>)
 8002926:	9401      	str	r4, [sp, #4]
 8002928:	4c4d      	ldr	r4, [pc, #308]	@ (8002a60 <main+0x3e8>)
 800292a:	9400      	str	r4, [sp, #0]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	6800      	ldr	r0, [r0, #0]
 8002932:	f000 fbf7 	bl	8003124 <Settings_Save_To_Backup>
	                                snmp_read, snmp_write, snmp_trap);
	    }


	    	// Дата
	    if(apply_date_settings)
 8002936:	4b4b      	ldr	r3, [pc, #300]	@ (8002a64 <main+0x3ec>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <main+0x310>
	    {
	        apply_date_settings = 0;
 800293e:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <main+0x3ec>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]

	        RTC_DateTypeDef sDate = {0};
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        sDate.Year  = new_year;
 8002948:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <main+0x3f0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	        sDate.Month = new_month;
 8002950:	4b46      	ldr	r3, [pc, #280]	@ (8002a6c <main+0x3f4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	        sDate.Date  = new_day;
 8002958:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <main+0x3f8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	        sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002960:	2302      	movs	r3, #2
 8002962:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	        if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 8002966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	4841      	ldr	r0, [pc, #260]	@ (8002a74 <main+0x3fc>)
 8002970:	f008 f9e8 	bl	800ad44 <HAL_RTC_SetDate>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <main+0x310>
	        {
	            RTC_TimeTypeDef t;
	            HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	2200      	movs	r2, #0
 8002980:	4619      	mov	r1, r3
 8002982:	483c      	ldr	r0, [pc, #240]	@ (8002a74 <main+0x3fc>)
 8002984:	f008 f98c 	bl	800aca0 <HAL_RTC_GetTime>
	        }
	    }


	    	// Обработка ВРЕМЕНИ
	    if(apply_time_settings)
 8002988:	4b3b      	ldr	r3, [pc, #236]	@ (8002a78 <main+0x400>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d026      	beq.n	80029de <main+0x366>
	    {
	        apply_time_settings = 0;
 8002990:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <main+0x400>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]

	        RTC_TimeTypeDef sTime = {0};
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
	        sTime.Hours   = new_hours;
 80029a2:	4b36      	ldr	r3, [pc, #216]	@ (8002a7c <main+0x404>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	753b      	strb	r3, [r7, #20]
	        sTime.Minutes = new_minutes;
 80029a8:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <main+0x408>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	757b      	strb	r3, [r7, #21]
	        sTime.Seconds = new_seconds;
 80029ae:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <main+0x40c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	75bb      	strb	r3, [r7, #22]
	        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
	        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]

        if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	482b      	ldr	r0, [pc, #172]	@ (8002a74 <main+0x3fc>)
 80029c6:	f008 f8d1 	bl	800ab6c <HAL_RTC_SetTime>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <main+0x366>
	        {
	            RTC_DateTypeDef d;
	            HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	4619      	mov	r1, r3
 80029d8:	4826      	ldr	r0, [pc, #152]	@ (8002a74 <main+0x3fc>)
 80029da:	f008 fa37 	bl	800ae4c <HAL_RTC_GetDate>
	        }
	    }


	        // Проверка применения SNMP
	    	if (apply_snmp_settings) {
 80029de:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <main+0x410>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f43f af36 	beq.w	8002854 <main+0x1dc>
	    	    apply_snmp_settings = 0;
 80029e8:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <main+0x410>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
            snmp_community[0] = snmp_read;
 80029ee:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <main+0x414>)
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <main+0x3e8>)
 80029f2:	601a      	str	r2, [r3, #0]
            snmp_community_write[0] = snmp_write;
 80029f4:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <main+0x418>)
 80029f6:	4a19      	ldr	r2, [pc, #100]	@ (8002a5c <main+0x3e4>)
 80029f8:	601a      	str	r2, [r3, #0]
            snmp_set_community_trap(snmp_trap);
 80029fa:	4817      	ldr	r0, [pc, #92]	@ (8002a58 <main+0x3e0>)
 80029fc:	f00e ff40 	bl	8011880 <snmp_set_community_trap>

            // Preserve current network settings: reload them from backup and rewrite with new SNMP
            ip4_addr_t saved_ip, saved_mask, saved_gw;
            uint8_t saved_dhcp;
            Settings_Load_From_Backup(&saved_ip, &saved_mask, &saved_gw, &saved_dhcp,
 8002a00:	1cfb      	adds	r3, r7, #3
 8002a02:	1d3a      	adds	r2, r7, #4
 8002a04:	f107 0108 	add.w	r1, r7, #8
 8002a08:	f107 000c 	add.w	r0, r7, #12
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	9405      	str	r4, [sp, #20]
 8002a10:	2400      	movs	r4, #0
 8002a12:	9404      	str	r4, [sp, #16]
 8002a14:	2400      	movs	r4, #0
 8002a16:	9403      	str	r4, [sp, #12]
 8002a18:	2400      	movs	r4, #0
 8002a1a:	9402      	str	r4, [sp, #8]
 8002a1c:	2400      	movs	r4, #0
 8002a1e:	9401      	str	r4, [sp, #4]
 8002a20:	2400      	movs	r4, #0
 8002a22:	9400      	str	r4, [sp, #0]
 8002a24:	f000 fbcc 	bl	80031c0 <Settings_Load_From_Backup>
                                      NULL, 0, NULL, 0, NULL, 0);
            Settings_Save_To_Backup(saved_ip, saved_mask, saved_gw, saved_dhcp,
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <main+0x3e0>)
 8002a2c:	9202      	str	r2, [sp, #8]
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <main+0x3e4>)
 8002a30:	9201      	str	r2, [sp, #4]
 8002a32:	4a0b      	ldr	r2, [pc, #44]	@ (8002a60 <main+0x3e8>)
 8002a34:	9200      	str	r2, [sp, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fb72 	bl	8003124 <Settings_Save_To_Backup>
	  MX_LWIP_Process();
 8002a40:	e708      	b.n	8002854 <main+0x1dc>
 8002a42:	bf00      	nop
 8002a44:	20002a44 	.word	0x20002a44
 8002a48:	20002a40 	.word	0x20002a40
 8002a4c:	20002a3c 	.word	0x20002a3c
 8002a50:	20004f7c 	.word	0x20004f7c
 8002a54:	20002a48 	.word	0x20002a48
 8002a58:	20000050 	.word	0x20000050
 8002a5c:	20000030 	.word	0x20000030
 8002a60:	20000010 	.word	0x20000010
 8002a64:	20002a7f 	.word	0x20002a7f
 8002a68:	20002a7c 	.word	0x20002a7c
 8002a6c:	20002a7d 	.word	0x20002a7d
 8002a70:	20002a7e 	.word	0x20002a7e
 8002a74:	200029d0 	.word	0x200029d0
 8002a78:	20002a83 	.word	0x20002a83
 8002a7c:	20002a80 	.word	0x20002a80
 8002a80:	20002a81 	.word	0x20002a81
 8002a84:	20002a82 	.word	0x20002a82
 8002a88:	20002a84 	.word	0x20002a84
 8002a8c:	2000010c 	.word	0x2000010c
 8002a90:	20000110 	.word	0x20000110

08002a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b096      	sub	sp, #88	@ 0x58
 8002a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a9e:	2230      	movs	r2, #48	@ 0x30
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f01f fda2 	bl	80225ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	463b      	mov	r3, r7
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ac6:	2309      	movs	r3, #9
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aca:	2301      	movs	r3, #1
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ad6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002adc:	2314      	movs	r3, #20
 8002ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ae0:	23c0      	movs	r3, #192	@ 0xc0
 8002ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002af0:	4618      	mov	r0, r3
 8002af2:	f007 fa7b 	bl	8009fec <HAL_RCC_OscConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002afc:	f000 fa2a 	bl	8002f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b00:	230f      	movs	r3, #15
 8002b02:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b10:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f007 fcb8 	bl	800a494 <HAL_RCC_ClockConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b2a:	f000 fa13 	bl	8002f54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f007 fe88 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002b46:	f000 fa05 	bl	8002f54 <Error_Handler>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3758      	adds	r7, #88	@ 0x58
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b66:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b68:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <MX_ADC1_Init+0xe0>)
 8002b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b6c:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b72:	4b2f      	ldr	r3, [pc, #188]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b84:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002b94:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bb6:	481e      	ldr	r0, [pc, #120]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002bb8:	f003 ff5a 	bl	8006a70 <HAL_ADC_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002bc2:	f000 f9c7 	bl	8002f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4816      	ldr	r0, [pc, #88]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002bd8:	f004 f87e 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002be2:	f000 f9b7 	bl	8002f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002be6:	2306      	movs	r3, #6
 8002be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002bea:	2302      	movs	r3, #2
 8002bec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480e      	ldr	r0, [pc, #56]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002bf8:	f004 f86e 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002c02:	f000 f9a7 	bl	8002f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c06:	230a      	movs	r3, #10
 8002c08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c12:	463b      	mov	r3, r7
 8002c14:	4619      	mov	r1, r3
 8002c16:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <MX_ADC1_Init+0xdc>)
 8002c18:	f004 f85e 	bl	8006cd8 <HAL_ADC_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002c22:	f000 f997 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200028d4 	.word	0x200028d4
 8002c34:	40012000 	.word	0x40012000

08002c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c3e:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <MX_I2C1_Init+0x54>)
 8002c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c44:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <MX_I2C1_Init+0x58>)
 8002c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <MX_I2C1_Init+0x50>)
 8002c76:	f006 fcf1 	bl	800965c <HAL_I2C_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c80:	f000 f968 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000297c 	.word	0x2000297c
 8002c8c:	40005400 	.word	0x40005400
 8002c90:	000186a0 	.word	0x000186a0

08002c94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
    RTC_DateTypeDef sDate = {0};
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]

    __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	4b30      	ldr	r3, [pc, #192]	@ (8002d70 <MX_RTC_Init+0xdc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d70 <MX_RTC_Init+0xdc>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b2d      	ldr	r3, [pc, #180]	@ (8002d70 <MX_RTC_Init+0xdc>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess(); // 🔹 доступ к backup-домену
 8002cc6:	f007 f975 	bl	8009fb4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_ENABLE();     // 🔹 включаем тактирование RTC, если ещё не включено
 8002cca:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <MX_RTC_Init+0xe0>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

    hrtc.Instance = RTC;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d7c <MX_RTC_Init+0xe8>)
 8002cd4:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8002cdc:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cde:	227f      	movs	r2, #127	@ 0x7f
 8002ce0:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8002ce2:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002ce4:	22ff      	movs	r2, #255	@ 0xff
 8002ce6:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ce8:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]

    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cfa:	481f      	ldr	r0, [pc, #124]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002cfc:	f007 fe9e 	bl	800aa3c <HAL_RTC_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_RTC_Init+0x76>
    {
        Error_Handler();
 8002d06:	f000 f925 	bl	8002f54 <Error_Handler>
    }

    /* Проверяем, был ли RTC уже инициализирован */
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	481a      	ldr	r0, [pc, #104]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002d0e:	f008 f9b9 	bl	800b084 <HAL_RTCEx_BKUPRead>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d025      	beq.n	8002d68 <MX_RTC_Init+0xd4>
    {
        // --- Первый запуск ---
        sTime.Hours = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	733b      	strb	r3, [r7, #12]
        sTime.Minutes = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	737b      	strb	r3, [r7, #13]
        sTime.Seconds = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	4619      	mov	r1, r3
 8002d38:	480f      	ldr	r0, [pc, #60]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002d3a:	f007 ff17 	bl	800ab6c <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_JANUARY;
 8002d42:	2301      	movs	r3, #1
 8002d44:	727b      	strb	r3, [r7, #9]
        sDate.Date = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002d58:	f007 fff4 	bl	800ad44 <HAL_RTC_SetDate>

        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // 💾 флаг инициализации
 8002d5c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002d60:	2100      	movs	r1, #0
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_RTC_Init+0xe4>)
 8002d64:	f008 f975 	bl	800b052 <HAL_RTCEx_BKUPWrite>
    }
    else
    {
        // --- RTC уже настроен, ничего не трогаем ---
    }
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470e3c 	.word	0x42470e3c
 8002d78:	200029d0 	.word	0x200029d0
 8002d7c:	40002800 	.word	0x40002800

08002d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d94:	463b      	mov	r3, r7
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <MX_TIM3_Init+0x94>)
 8002da0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002da4:	223b      	movs	r2, #59	@ 0x3b
 8002da6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002dae:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002db0:	2263      	movs	r2, #99	@ 0x63
 8002db2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db4:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002dbc:	2280      	movs	r2, #128	@ 0x80
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dc0:	4813      	ldr	r0, [pc, #76]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002dc2:	f008 f976 	bl	800b0b2 <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002dcc:	f000 f8c2 	bl	8002f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002dde:	f008 fa1d 	bl	800b21c <HAL_TIM_ConfigClockSource>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002de8:	f000 f8b4 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dec:	2320      	movs	r3, #32
 8002dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002df4:	463b      	mov	r3, r7
 8002df6:	4619      	mov	r1, r3
 8002df8:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <MX_TIM3_Init+0x90>)
 8002dfa:	f008 fc17 	bl	800b62c <HAL_TIMEx_MasterConfigSynchronization>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002e04:	f000 f8a6 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200029f0 	.word	0x200029f0
 8002e14:	40000400 	.word	0x40000400

08002e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_DMA_Init+0x3c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <MX_DMA_Init+0x3c>)
 8002e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_DMA_Init+0x3c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2038      	movs	r0, #56	@ 0x38
 8002e40:	f004 fac9 	bl	80073d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e44:	2038      	movs	r0, #56	@ 0x38
 8002e46:	f004 fae2 	bl	800740e <HAL_NVIC_EnableIRQ>

}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a35      	ldr	r2, [pc, #212]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b33      	ldr	r3, [pc, #204]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a2e      	ldr	r2, [pc, #184]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b28      	ldr	r3, [pc, #160]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a20      	ldr	r2, [pc, #128]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ee8:	f043 0308 	orr.w	r3, r3, #8
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <MX_GPIO_Init+0xf4>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002efa:	230e      	movs	r3, #14
 8002efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002efe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4810      	ldr	r0, [pc, #64]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002f10:	f006 f9d6 	bl	80092c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2105      	movs	r1, #5
 8002f18:	2007      	movs	r0, #7
 8002f1a:	f004 fa5c 	bl	80073d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f1e:	2007      	movs	r0, #7
 8002f20:	f004 fa75 	bl	800740e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2105      	movs	r1, #5
 8002f28:	2008      	movs	r0, #8
 8002f2a:	f004 fa54 	bl	80073d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002f2e:	2008      	movs	r0, #8
 8002f30:	f004 fa6d 	bl	800740e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2105      	movs	r1, #5
 8002f38:	2009      	movs	r0, #9
 8002f3a:	f004 fa4c 	bl	80073d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002f3e:	2009      	movs	r0, #9
 8002f40:	f004 fa65 	bl	800740e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	@ 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020c00 	.word	0x40020c00

08002f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f58:	b672      	cpsid	i
}
 8002f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <Error_Handler+0x8>

08002f60 <bk_write_u32>:
#define BKP_MAGIC_REG        RTC_BKP_DR19
#define BKP_ROT_REG          RTC_BKP_DR18
#define BKP_MAGIC_VALUE      0xBEEFCAFE

/* --- Вспомогательные функции --- */
static void bk_write_u32(uint32_t reg, uint32_t value) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, reg, value);
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4803      	ldr	r0, [pc, #12]	@ (8002f7c <bk_write_u32+0x1c>)
 8002f70:	f008 f86f 	bl	800b052 <HAL_RTCEx_BKUPWrite>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200029d0 	.word	0x200029d0

08002f80 <bk_read_u32>:

static uint32_t bk_read_u32(uint32_t reg) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, reg);
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <bk_read_u32+0x1c>)
 8002f8c:	f008 f87a 	bl	800b084 <HAL_RTCEx_BKUPRead>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200029d0 	.word	0x200029d0

08002fa0 <bk_write_string>:

static void bk_write_string(uint32_t start_reg, const char *s, int reg_count) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	@ 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
    int max_len = reg_count * 4 - 1; // оставляем 1 байт под '\0'
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
    int str_len = s ? strlen(s) : 0;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <bk_write_string+0x24>
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f7fd f90e 	bl	80001dc <strlen>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e000      	b.n	8002fc6 <bk_write_string+0x26>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (str_len > max_len) str_len = max_len;
 8002fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dd01      	ble.n	8002fd4 <bk_write_string+0x34>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < reg_count; i++) {
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd8:	e02d      	b.n	8003036 <bk_write_string+0x96>
        uint32_t word = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	e01a      	b.n	800301a <bk_write_string+0x7a>
            int idx = i * 4 + b;
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	4413      	add	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
            uint8_t ch = (idx < str_len) ? (uint8_t)s[idx] : 0;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	da04      	bge.n	8003000 <bk_write_string+0x60>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	e000      	b.n	8003002 <bk_write_string+0x62>
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
            word |= ((uint32_t)ch) << (8 * b);
 8003004:	7dfa      	ldrb	r2, [r7, #23]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003010:	4313      	orrs	r3, r2
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	3301      	adds	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	2b03      	cmp	r3, #3
 800301e:	dde1      	ble.n	8002fe4 <bk_write_string+0x44>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, start_reg + i, word);
 8003020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4807      	ldr	r0, [pc, #28]	@ (8003048 <bk_write_string+0xa8>)
 800302c:	f008 f811 	bl	800b052 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < reg_count; i++) {
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	3301      	adds	r3, #1
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	dbcd      	blt.n	8002fda <bk_write_string+0x3a>
    }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3730      	adds	r7, #48	@ 0x30
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200029d0 	.word	0x200029d0

0800304c <bk_read_string>:

static void bk_read_string(uint32_t start_reg, char *out, int reg_count) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
    int pos = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
    int max_len = reg_count * 4 - 1; // оставляем место для '\0'
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3b01      	subs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < reg_count; i++) {
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	e034      	b.n	80030d4 <bk_read_string+0x88>
        uint32_t word = HAL_RTCEx_BKUPRead(&hrtc, start_reg + i);
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	4619      	mov	r1, r3
 8003072:	481e      	ldr	r0, [pc, #120]	@ (80030ec <bk_read_string+0xa0>)
 8003074:	f008 f806 	bl	800b084 <HAL_RTCEx_BKUPRead>
 8003078:	6178      	str	r0, [r7, #20]
        for (int b = 0; b < 4; b++) {
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e023      	b.n	80030c8 <bk_read_string+0x7c>
            if (pos >= max_len) { out[pos] = 0; return; }
 8003080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	429a      	cmp	r2, r3
 8003086:	db05      	blt.n	8003094 <bk_read_string+0x48>
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e028      	b.n	80030e6 <bk_read_string+0x9a>
            uint8_t ch = (word >> (8 * b)) & 0xFF;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	74fb      	strb	r3, [r7, #19]
            if (ch == 0) { out[pos] = 0; return; }
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <bk_read_string+0x66>
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4413      	add	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e019      	b.n	80030e6 <bk_read_string+0x9a>
            out[pos++] = ch;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4413      	add	r3, r2
 80030be:	7cfa      	ldrb	r2, [r7, #19]
 80030c0:	701a      	strb	r2, [r3, #0]
        for (int b = 0; b < 4; b++) {
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	ddd8      	ble.n	8003080 <bk_read_string+0x34>
    for (int i = 0; i < reg_count; i++) {
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	3301      	adds	r3, #1
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	dbc6      	blt.n	800306a <bk_read_string+0x1e>
        }
    }
    out[pos] = 0;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
}
 80030e6:	3728      	adds	r7, #40	@ 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200029d0 	.word	0x200029d0

080030f0 <Settings_Init>:

/* --- Инициализация backup-доступа --- */
void Settings_Init(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <Settings_Init+0x30>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <Settings_Init+0x30>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <Settings_Init+0x30>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 8003112:	f006 ff4f 	bl	8009fb4 <HAL_PWR_EnableBkUpAccess>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <Settings_Save_To_Backup>:

/* --- Сохранение всех настроек в backup --- */
void Settings_Save_To_Backup(ip4_addr_t ip, ip4_addr_t mask, ip4_addr_t gw, uint8_t dhcp,
                             const char *snmp_read, const char *snmp_write, const char *snmp_trap)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	70fb      	strb	r3, [r7, #3]
    bk_write_u32(BKP_IP_REG0, ip.addr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4619      	mov	r1, r3
 8003136:	2001      	movs	r0, #1
 8003138:	f7ff ff12 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, mask.addr);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4619      	mov	r1, r3
 8003140:	2002      	movs	r0, #2
 8003142:	f7ff ff0d 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, gw.addr);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4619      	mov	r1, r3
 800314a:	2003      	movs	r0, #3
 800314c:	f7ff ff08 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, dhcp ? 1 : 0);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	2004      	movs	r0, #4
 8003160:	f7ff fefe 	bl	8002f60 <bk_write_u32>

    bk_write_string(BKP_SNMP_BASE + 0, snmp_read  ? snmp_read  : "", BKP_SNMP_REG_COUNT);
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <Settings_Save_To_Backup+0x4a>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e000      	b.n	8003170 <Settings_Save_To_Backup+0x4c>
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <Settings_Save_To_Backup+0x94>)
 8003170:	2204      	movs	r2, #4
 8003172:	4619      	mov	r1, r3
 8003174:	2005      	movs	r0, #5
 8003176:	f7ff ff13 	bl	8002fa0 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, snmp_write ? snmp_write : "", BKP_SNMP_REG_COUNT);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <Settings_Save_To_Backup+0x60>
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	e000      	b.n	8003186 <Settings_Save_To_Backup+0x62>
 8003184:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <Settings_Save_To_Backup+0x94>)
 8003186:	2204      	movs	r2, #4
 8003188:	4619      	mov	r1, r3
 800318a:	2009      	movs	r0, #9
 800318c:	f7ff ff08 	bl	8002fa0 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, snmp_trap  ? snmp_trap  : "", BKP_SNMP_REG_COUNT);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <Settings_Save_To_Backup+0x76>
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	e000      	b.n	800319c <Settings_Save_To_Backup+0x78>
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <Settings_Save_To_Backup+0x94>)
 800319c:	2204      	movs	r2, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	200d      	movs	r0, #13
 80031a2:	f7ff fefd 	bl	8002fa0 <bk_write_string>

    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE); // Обязательно ставим magic
 80031a6:	4905      	ldr	r1, [pc, #20]	@ (80031bc <Settings_Save_To_Backup+0x98>)
 80031a8:	2013      	movs	r0, #19
 80031aa:	f7ff fed9 	bl	8002f60 <bk_write_u32>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	080251f0 	.word	0x080251f0
 80031bc:	beefcafe 	.word	0xbeefcafe

080031c0 <Settings_Load_From_Backup>:
/* --- Загрузка всех настроек из backup --- */
void Settings_Load_From_Backup(ip4_addr_t *ip, ip4_addr_t *mask, ip4_addr_t *gw, uint8_t *dhcp,
                              char *snmp_read, int snmp_read_size,
                              char *snmp_write, int snmp_write_size,
                              char *snmp_trap, int snmp_trap_size)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	@ 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) {
 80031ce:	2013      	movs	r0, #19
 80031d0:	f7ff fed6 	bl	8002f80 <bk_read_u32>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4a51      	ldr	r2, [pc, #324]	@ (800331c <Settings_Load_From_Backup+0x15c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d02a      	beq.n	8003232 <Settings_Load_From_Backup+0x72>
        // backup пустой или некорректный
        if (ip) ip->addr = 0;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <Settings_Load_From_Backup+0x28>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
        if (mask) mask->addr = 0;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <Settings_Load_From_Backup+0x34>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
        if (gw) gw->addr = 0;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <Settings_Load_From_Backup+0x40>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
        if (dhcp) *dhcp = 0;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <Settings_Load_From_Backup+0x4c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
        if (snmp_read)  snmp_read[0]  = 0;
 800320c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <Settings_Load_From_Backup+0x58>
 8003212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
        if (snmp_write) snmp_write[0] = 0;
 8003218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <Settings_Load_From_Backup+0x64>
 800321e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
        if (snmp_trap)  snmp_trap[0]  = 0;
 8003224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d074      	beq.n	8003314 <Settings_Load_From_Backup+0x154>
 800322a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e071      	b.n	8003316 <Settings_Load_From_Backup+0x156>
        return;
    }

    if (ip)    ip->addr   = bk_read_u32(BKP_IP_REG0);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <Settings_Load_From_Backup+0x84>
 8003238:	2001      	movs	r0, #1
 800323a:	f7ff fea1 	bl	8002f80 <bk_read_u32>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	601a      	str	r2, [r3, #0]
    if (mask)  mask->addr = bk_read_u32(BKP_MASK_REG1);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <Settings_Load_From_Backup+0x96>
 800324a:	2002      	movs	r0, #2
 800324c:	f7ff fe98 	bl	8002f80 <bk_read_u32>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	601a      	str	r2, [r3, #0]
    if (gw)    gw->addr   = bk_read_u32(BKP_GW_REG2);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <Settings_Load_From_Backup+0xa8>
 800325c:	2003      	movs	r0, #3
 800325e:	f7ff fe8f 	bl	8002f80 <bk_read_u32>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
    if (dhcp)  *dhcp      = (uint8_t)(bk_read_u32(BKP_DHCP_REG3) & 0xFF);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <Settings_Load_From_Backup+0xbc>
 800326e:	2004      	movs	r0, #4
 8003270:	f7ff fe86 	bl	8002f80 <bk_read_u32>
 8003274:	4603      	mov	r3, r0
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	701a      	strb	r2, [r3, #0]

    char tmp[33];

    bk_read_string(BKP_SNMP_BASE + 0, tmp, BKP_SNMP_REG_COUNT);
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2204      	movs	r2, #4
 8003282:	4619      	mov	r1, r3
 8003284:	2005      	movs	r0, #5
 8003286:	f7ff fee1 	bl	800304c <bk_read_string>
    if (snmp_read) { strncpy(snmp_read, tmp, snmp_read_size-1); snmp_read[snmp_read_size-1]=0; }
 800328a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <Settings_Load_From_Backup+0xee>
 8003290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003292:	3b01      	subs	r3, #1
 8003294:	461a      	mov	r2, r3
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800329e:	f01f f9ed 	bl	802267c <strncpy>
 80032a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a4:	3b01      	subs	r3, #1
 80032a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a8:	4413      	add	r3, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, tmp, BKP_SNMP_REG_COUNT);
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	2204      	movs	r2, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	2009      	movs	r0, #9
 80032b8:	f7ff fec8 	bl	800304c <bk_read_string>
    if (snmp_write) { strncpy(snmp_write, tmp, snmp_write_size-1); snmp_write[snmp_write_size-1]=0; }
 80032bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <Settings_Load_From_Backup+0x120>
 80032c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c4:	3b01      	subs	r3, #1
 80032c6:	461a      	mov	r2, r3
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80032d0:	f01f f9d4 	bl	802267c <strncpy>
 80032d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032da:	4413      	add	r3, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, tmp, BKP_SNMP_REG_COUNT);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	2204      	movs	r2, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	200d      	movs	r0, #13
 80032ea:	f7ff feaf 	bl	800304c <bk_read_string>
    if (snmp_trap) { strncpy(snmp_trap, tmp, snmp_trap_size-1); snmp_trap[snmp_trap_size-1]=0; }
 80032ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <Settings_Load_From_Backup+0x156>
 80032f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f6:	3b01      	subs	r3, #1
 80032f8:	461a      	mov	r2, r3
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003302:	f01f f9bb 	bl	802267c <strncpy>
 8003306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003308:	3b01      	subs	r3, #1
 800330a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800330c:	4413      	add	r3, r2
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e000      	b.n	8003316 <Settings_Load_From_Backup+0x156>
        return;
 8003314:	bf00      	nop
}
 8003316:	3738      	adds	r7, #56	@ 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	beefcafe 	.word	0xbeefcafe

08003320 <Settings_Save_Rotation>:

// --- Rotation flag helpers ---
void Settings_Save_Rotation(uint8_t rot180)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
    bk_write_u32(BKP_ROT_REG, (rot180 ? 1U : 0U));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <Settings_Save_Rotation+0x14>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <Settings_Save_Rotation+0x16>
 8003334:	2300      	movs	r3, #0
 8003336:	4619      	mov	r1, r3
 8003338:	2012      	movs	r0, #18
 800333a:	f7ff fe11 	bl	8002f60 <bk_write_u32>
    // Ensure backup domain marked as valid
    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE);
 800333e:	4904      	ldr	r1, [pc, #16]	@ (8003350 <Settings_Save_Rotation+0x30>)
 8003340:	2013      	movs	r0, #19
 8003342:	f7ff fe0d 	bl	8002f60 <bk_write_u32>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	beefcafe 	.word	0xbeefcafe

08003354 <Settings_Load_Rotation>:

uint8_t Settings_Load_Rotation(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) return 0;
 8003358:	2013      	movs	r0, #19
 800335a:	f7ff fe11 	bl	8002f80 <bk_read_u32>
 800335e:	4603      	mov	r3, r0
 8003360:	4a07      	ldr	r2, [pc, #28]	@ (8003380 <Settings_Load_Rotation+0x2c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d001      	beq.n	800336a <Settings_Load_Rotation+0x16>
 8003366:	2300      	movs	r3, #0
 8003368:	e007      	b.n	800337a <Settings_Load_Rotation+0x26>
    return (uint8_t)(bk_read_u32(BKP_ROT_REG) & 0x1U);
 800336a:	2012      	movs	r0, #18
 800336c:	f7ff fe08 	bl	8002f80 <bk_read_u32>
 8003370:	4603      	mov	r3, r0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
}
 800337a:	4618      	mov	r0, r3
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	beefcafe 	.word	0xbeefcafe

08003384 <Settings_Clear_Backup>:

// Сброс всех backup регистров (очистка домена)
void Settings_Clear_Backup(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
    // Стираем основные используемые регистры
    bk_write_u32(BKP_IP_REG0, 0);
 800338a:	2100      	movs	r1, #0
 800338c:	2001      	movs	r0, #1
 800338e:	f7ff fde7 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, 0);
 8003392:	2100      	movs	r1, #0
 8003394:	2002      	movs	r0, #2
 8003396:	f7ff fde3 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, 0);
 800339a:	2100      	movs	r1, #0
 800339c:	2003      	movs	r0, #3
 800339e:	f7ff fddf 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, 0);
 80033a2:	2100      	movs	r1, #0
 80033a4:	2004      	movs	r0, #4
 80033a6:	f7ff fddb 	bl	8002f60 <bk_write_u32>
    bk_write_u32(BKP_ROT_REG, 0);
 80033aa:	2100      	movs	r1, #0
 80033ac:	2012      	movs	r0, #18
 80033ae:	f7ff fdd7 	bl	8002f60 <bk_write_u32>

    // Стираем SNMP строки
    for (int i = 0; i < BKP_SNMP_REG_COUNT * 3; ++i) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	e008      	b.n	80033ca <Settings_Clear_Backup+0x46>
        bk_write_u32(BKP_SNMP_BASE + i, 0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3305      	adds	r3, #5
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fdce 	bl	8002f60 <bk_write_u32>
    for (int i = 0; i < BKP_SNMP_REG_COUNT * 3; ++i) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0b      	cmp	r3, #11
 80033ce:	ddf3      	ble.n	80033b8 <Settings_Clear_Backup+0x34>
    }

    // Сбрасываем magic, чтобы загрузка считала, что backup пуст
    bk_write_u32(BKP_MAGIC_REG, 0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	2013      	movs	r0, #19
 80033d4:	f7ff fdc4 	bl	8002f60 <bk_write_u32>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <SignalProcessor_Update>:
float voltage2 = 0.0f;
float current  = 0.0f;
float selected_voltage = 0.0f;

void SignalProcessor_Update(uint32_t *adc_buf, size_t samples)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b090      	sub	sp, #64	@ 0x40
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    double sum_v1 = 0.0;
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double sum_v2 = 0.0;
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double sum_i  = 0.0;
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    for (size_t n = 0; n < samples; n++) {
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
 8003412:	e095      	b.n	8003540 <SignalProcessor_Update+0x160>
        // Буфер имеет вид [ch1, ch2, ch3, ch1, ch2, ch3, ...]
        uint32_t raw1 = adc_buf[n * 3 + 0];
 8003414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	623b      	str	r3, [r7, #32]
        uint32_t raw2 = adc_buf[n * 3 + 1];
 8003428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	3304      	adds	r3, #4
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61fb      	str	r3, [r7, #28]
        uint32_t raw3 = adc_buf[n * 3 + 2];
 800343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	3308      	adds	r3, #8
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61bb      	str	r3, [r7, #24]

        // Переводим в напряжение на пине (0…3.3 В)
        float v1 = (raw1 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003450:	6a38      	ldr	r0, [r7, #32]
 8003452:	f7fd fc65 	bl	8000d20 <__aeabi_ui2f>
 8003456:	4603      	mov	r3, r0
 8003458:	4999      	ldr	r1, [pc, #612]	@ (80036c0 <SignalProcessor_Update+0x2e0>)
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fcb8 	bl	8000dd0 <__aeabi_fmul>
 8003460:	4603      	mov	r3, r0
 8003462:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fd66 	bl	8000f38 <__aeabi_fdiv>
 800346c:	4603      	mov	r3, r0
 800346e:	4995      	ldr	r1, [pc, #596]	@ (80036c4 <SignalProcessor_Update+0x2e4>)
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fba3 	bl	8000bbc <__aeabi_fsub>
 8003476:	4603      	mov	r3, r0
 8003478:	617b      	str	r3, [r7, #20]
        float v2 = (raw2 * VREF / ADC_RESOLUTION) - VREF_HALF;
 800347a:	69f8      	ldr	r0, [r7, #28]
 800347c:	f7fd fc50 	bl	8000d20 <__aeabi_ui2f>
 8003480:	4603      	mov	r3, r0
 8003482:	498f      	ldr	r1, [pc, #572]	@ (80036c0 <SignalProcessor_Update+0x2e0>)
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fca3 	bl	8000dd0 <__aeabi_fmul>
 800348a:	4603      	mov	r3, r0
 800348c:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fd51 	bl	8000f38 <__aeabi_fdiv>
 8003496:	4603      	mov	r3, r0
 8003498:	498a      	ldr	r1, [pc, #552]	@ (80036c4 <SignalProcessor_Update+0x2e4>)
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb8e 	bl	8000bbc <__aeabi_fsub>
 80034a0:	4603      	mov	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]
        float i  = (raw3 * VREF / ADC_RESOLUTION) - VREF_HALF;
 80034a4:	69b8      	ldr	r0, [r7, #24]
 80034a6:	f7fd fc3b 	bl	8000d20 <__aeabi_ui2f>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4984      	ldr	r1, [pc, #528]	@ (80036c0 <SignalProcessor_Update+0x2e0>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fc8e 	bl	8000dd0 <__aeabi_fmul>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fd3c 	bl	8000f38 <__aeabi_fdiv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4980      	ldr	r1, [pc, #512]	@ (80036c4 <SignalProcessor_Update+0x2e4>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fb79 	bl	8000bbc <__aeabi_fsub>
 80034ca:	4603      	mov	r3, r0
 80034cc:	60fb      	str	r3, [r7, #12]

        // Суммируем квадраты
        sum_v1 += (double)(v1 * v1);
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7fd fc7d 	bl	8000dd0 <__aeabi_fmul>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fc ffeb 	bl	80004b4 <__aeabi_f2d>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80034e6:	f7fc fe87 	bl	80001f8 <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        sum_v2 += (double)(v2 * v2);
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	6938      	ldr	r0, [r7, #16]
 80034f6:	f7fd fc6b 	bl	8000dd0 <__aeabi_fmul>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fc ffd9 	bl	80004b4 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800350a:	f7fc fe75 	bl	80001f8 <__adddf3>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        sum_i  += (double)(i  * i);
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7fd fc59 	bl	8000dd0 <__aeabi_fmul>
 800351e:	4603      	mov	r3, r0
 8003520:	4618      	mov	r0, r3
 8003522:	f7fc ffc7 	bl	80004b4 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800352e:	f7fc fe63 	bl	80001f8 <__adddf3>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (size_t n = 0; n < samples; n++) {
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	3301      	adds	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	f4ff af65 	bcc.w	8003414 <SignalProcessor_Update+0x34>
    }

    // RMS
    voltage1 = (sqrtf(sum_v1 / samples)*244.4);
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f7fc ff90 	bl	8000470 <__aeabi_ui2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003558:	f7fd f92e 	bl	80007b8 <__aeabi_ddiv>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fad6 	bl	8000b14 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	4618      	mov	r0, r3
 800356c:	f021 fcfa 	bl	8024f64 <sqrtf>
 8003570:	4603      	mov	r3, r0
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc ff9e 	bl	80004b4 <__aeabi_f2d>
 8003578:	a34b      	add	r3, pc, #300	@ (adr r3, 80036a8 <SignalProcessor_Update+0x2c8>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fc fff1 	bl	8000564 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fac3 	bl	8000b14 <__aeabi_d2f>
 800358e:	4603      	mov	r3, r0
 8003590:	4a4d      	ldr	r2, [pc, #308]	@ (80036c8 <SignalProcessor_Update+0x2e8>)
 8003592:	6013      	str	r3, [r2, #0]
    if (voltage1 < 10.0f) {
 8003594:	4b4c      	ldr	r3, [pc, #304]	@ (80036c8 <SignalProcessor_Update+0x2e8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	494c      	ldr	r1, [pc, #304]	@ (80036cc <SignalProcessor_Update+0x2ec>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fdb6 	bl	800110c <__aeabi_fcmplt>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <SignalProcessor_Update+0x1ce>
        voltage1 = 0.0f;
 80035a6:	4b48      	ldr	r3, [pc, #288]	@ (80036c8 <SignalProcessor_Update+0x2e8>)
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    }
    voltage2 = (sqrtf(sum_v2 / samples)*245.9);
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	f7fc ff5e 	bl	8000470 <__aeabi_ui2d>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80035bc:	f7fd f8fc 	bl	80007b8 <__aeabi_ddiv>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f7fd faa4 	bl	8000b14 <__aeabi_d2f>
 80035cc:	4603      	mov	r3, r0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f021 fcc8 	bl	8024f64 <sqrtf>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff6c 	bl	80004b4 <__aeabi_f2d>
 80035dc:	a334      	add	r3, pc, #208	@ (adr r3, 80036b0 <SignalProcessor_Update+0x2d0>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc ffbf 	bl	8000564 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fa91 	bl	8000b14 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a36      	ldr	r2, [pc, #216]	@ (80036d0 <SignalProcessor_Update+0x2f0>)
 80035f6:	6013      	str	r3, [r2, #0]
    if (voltage2 < 10.0f) {
 80035f8:	4b35      	ldr	r3, [pc, #212]	@ (80036d0 <SignalProcessor_Update+0x2f0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4933      	ldr	r1, [pc, #204]	@ (80036cc <SignalProcessor_Update+0x2ec>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fd84 	bl	800110c <__aeabi_fcmplt>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <SignalProcessor_Update+0x232>
        voltage2 = 0.0f;
 800360a:	4b31      	ldr	r3, [pc, #196]	@ (80036d0 <SignalProcessor_Update+0x2f0>)
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    }
	current  = (sqrtf(sum_i  / samples)*4.8);
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f7fc ff2c 	bl	8000470 <__aeabi_ui2d>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003620:	f7fd f8ca 	bl	80007b8 <__aeabi_ddiv>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f7fd fa72 	bl	8000b14 <__aeabi_d2f>
 8003630:	4603      	mov	r3, r0
 8003632:	4618      	mov	r0, r3
 8003634:	f021 fc96 	bl	8024f64 <sqrtf>
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff3a 	bl	80004b4 <__aeabi_f2d>
 8003640:	a31d      	add	r3, pc, #116	@ (adr r3, 80036b8 <SignalProcessor_Update+0x2d8>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc ff8d 	bl	8000564 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f7fd fa5f 	bl	8000b14 <__aeabi_d2f>
 8003656:	4603      	mov	r3, r0
 8003658:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <SignalProcessor_Update+0x2f4>)
 800365a:	6013      	str	r3, [r2, #0]
    if (current < 0.10f) {
 800365c:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <SignalProcessor_Update+0x2f4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	491d      	ldr	r1, [pc, #116]	@ (80036d8 <SignalProcessor_Update+0x2f8>)
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fd52 	bl	800110c <__aeabi_fcmplt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <SignalProcessor_Update+0x296>
        current = 0.0f;
 800366e:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <SignalProcessor_Update+0x2f4>)
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    }

    // Выбор активного напряжения
    if (voltage1 > 50.0f) {
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <SignalProcessor_Update+0x2e8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4918      	ldr	r1, [pc, #96]	@ (80036dc <SignalProcessor_Update+0x2fc>)
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fd63 	bl	8001148 <__aeabi_fcmpgt>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <SignalProcessor_Update+0x2b2>
        selected_voltage = voltage1;
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <SignalProcessor_Update+0x2e8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <SignalProcessor_Update+0x300>)
 800368e:	6013      	str	r3, [r2, #0]
    } else {
        selected_voltage = voltage2;
    }
}
 8003690:	e003      	b.n	800369a <SignalProcessor_Update+0x2ba>
        selected_voltage = voltage2;
 8003692:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <SignalProcessor_Update+0x2f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <SignalProcessor_Update+0x300>)
 8003698:	6013      	str	r3, [r2, #0]
}
 800369a:	bf00      	nop
 800369c:	3740      	adds	r7, #64	@ 0x40
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	f3af 8000 	nop.w
 80036a8:	cccccccd 	.word	0xcccccccd
 80036ac:	406e8ccc 	.word	0x406e8ccc
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	406ebccc 	.word	0x406ebccc
 80036b8:	33333333 	.word	0x33333333
 80036bc:	40133333 	.word	0x40133333
 80036c0:	40533333 	.word	0x40533333
 80036c4:	3fd33333 	.word	0x3fd33333
 80036c8:	20004aac 	.word	0x20004aac
 80036cc:	41200000 	.word	0x41200000
 80036d0:	20004ab0 	.word	0x20004ab0
 80036d4:	20004ab4 	.word	0x20004ab4
 80036d8:	3dcccccd 	.word	0x3dcccccd
 80036dc:	42480000 	.word	0x42480000
 80036e0:	20004ab8 	.word	0x20004ab8

080036e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_MspInit+0x48>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	4a0e      	ldr	r2, [pc, #56]	@ (800372c <HAL_MspInit+0x48>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036fa:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <HAL_MspInit+0x48>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_MspInit+0x48>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	4a07      	ldr	r2, [pc, #28]	@ (800372c <HAL_MspInit+0x48>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	@ 0x40
 8003716:	4b05      	ldr	r3, [pc, #20]	@ (800372c <HAL_MspInit+0x48>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40023800 	.word	0x40023800

08003730 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a3c      	ldr	r2, [pc, #240]	@ (8003840 <HAL_ADC_MspInit+0x110>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d172      	bne.n	8003838 <HAL_ADC_MspInit+0x108>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	4b3b      	ldr	r3, [pc, #236]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	4a3a      	ldr	r2, [pc, #232]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003760:	6453      	str	r3, [r2, #68]	@ 0x44
 8003762:	4b38      	ldr	r3, [pc, #224]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b34      	ldr	r3, [pc, #208]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a33      	ldr	r2, [pc, #204]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b2a      	ldr	r3, [pc, #168]	@ (8003844 <HAL_ADC_MspInit+0x114>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037aa:	2303      	movs	r3, #3
 80037ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	4823      	ldr	r0, [pc, #140]	@ (8003848 <HAL_ADC_MspInit+0x118>)
 80037ba:	f005 fd81 	bl	80092c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037be:	2360      	movs	r3, #96	@ 0x60
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c2:	2303      	movs	r3, #3
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	481e      	ldr	r0, [pc, #120]	@ (800384c <HAL_ADC_MspInit+0x11c>)
 80037d2:	f005 fd75 	bl	80092c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_ADC_MspInit+0x124>)
 80037da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037de:	2200      	movs	r2, #0
 80037e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037ee:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 80037f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003800:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003804:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800380e:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003810:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003814:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003816:	4b0e      	ldr	r3, [pc, #56]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003818:	2200      	movs	r2, #0
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800381c:	480c      	ldr	r0, [pc, #48]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 800381e:	f003 fe11 	bl	8007444 <HAL_DMA_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8003828:	f7ff fb94 	bl	8002f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a08      	ldr	r2, [pc, #32]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38
 8003832:	4a07      	ldr	r2, [pc, #28]	@ (8003850 <HAL_ADC_MspInit+0x120>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003838:	bf00      	nop
 800383a:	3728      	adds	r7, #40	@ 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012000 	.word	0x40012000
 8003844:	40023800 	.word	0x40023800
 8003848:	40020800 	.word	0x40020800
 800384c:	40020000 	.word	0x40020000
 8003850:	2000291c 	.word	0x2000291c
 8003854:	40026410 	.word	0x40026410

08003858 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	@ 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_I2C_MspInit+0x84>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d12b      	bne.n	80038d2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003896:	23c0      	movs	r3, #192	@ 0xc0
 8003898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800389a:	2312      	movs	r3, #18
 800389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	2303      	movs	r3, #3
 80038a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038a6:	2304      	movs	r3, #4
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	480c      	ldr	r0, [pc, #48]	@ (80038e4 <HAL_I2C_MspInit+0x8c>)
 80038b2:	f005 fd05 	bl	80092c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 80038c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_I2C_MspInit+0x88>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	@ 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40005400 	.word	0x40005400
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020400 	.word	0x40020400

080038e8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_RTC_MspInit+0x24>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d102      	bne.n	8003900 <HAL_RTC_MspInit+0x18>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RTC_MspInit+0x28>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40002800 	.word	0x40002800
 8003910:	42470e3c 	.word	0x42470e3c

08003914 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0a      	ldr	r2, [pc, #40]	@ (800394c <HAL_TIM_Base_MspInit+0x38>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10d      	bne.n	8003942 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6413      	str	r3, [r2, #64]	@ 0x40
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_TIM_Base_MspInit+0x3c>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40000400 	.word	0x40000400
 8003950:	40023800 	.word	0x40023800

08003954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <NMI_Handler+0x4>

0800395c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <HardFault_Handler+0x4>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003968:	bf00      	nop
 800396a:	e7fd      	b.n	8003968 <MemManage_Handler+0x4>

0800396c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <BusFault_Handler+0x4>

08003974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <UsageFault_Handler+0x4>

0800397c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a4:	f003 f824 	bl	80069f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80039b0:	2002      	movs	r0, #2
 80039b2:	f005 fe3b 	bl	800962c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}

080039ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039be:	2004      	movs	r0, #4
 80039c0:	f005 fe34 	bl	800962c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80039cc:	2008      	movs	r0, #8
 80039ce:	f005 fe2d 	bl	800962c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039dc:	4802      	ldr	r0, [pc, #8]	@ (80039e8 <DMA2_Stream0_IRQHandler+0x10>)
 80039de:	f003 fe37 	bl	8007650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000291c 	.word	0x2000291c

080039ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return 1;
 80039f0:	2301      	movs	r3, #1
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <_kill>:

int _kill(int pid, int sig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <_kill+0x20>)
 8003a08:	2216      	movs	r2, #22
 8003a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000c058 	.word	0x2000c058

08003a20 <_exit>:

void _exit (int status)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ffe5 	bl	80039fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a32:	bf00      	nop
 8003a34:	e7fd      	b.n	8003a32 <_exit+0x12>

08003a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e00a      	b.n	8003a5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a48:	f3af 8000 	nop.w
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	60ba      	str	r2, [r7, #8]
 8003a54:	b2ca      	uxtb	r2, r1
 8003a56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	dbf0      	blt.n	8003a48 <_read+0x12>
  }

  return len;
 8003a66:	687b      	ldr	r3, [r7, #4]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e009      	b.n	8003a96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3301      	adds	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	dbf1      	blt.n	8003a82 <_write+0x12>
  }
  return len;
 8003a9e:	687b      	ldr	r3, [r7, #4]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_close>:

int _close(int file)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ace:	605a      	str	r2, [r3, #4]
  return 0;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <_isatty>:

int _isatty(int file)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <_sbrk+0x5c>)
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <_sbrk+0x60>)
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <_sbrk+0x64>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <_sbrk+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d205      	bcs.n	8003b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <_sbrk+0x6c>)
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	e009      	b.n	8003b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <_sbrk+0x64>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <_sbrk+0x64>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <_sbrk+0x64>)
 8003b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b56:	68fb      	ldr	r3, [r7, #12]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2001c000 	.word	0x2001c000
 8003b68:	00004000 	.word	0x00004000
 8003b6c:	20004abc 	.word	0x20004abc
 8003b70:	2000c068 	.word	0x2000c068
 8003b74:	2000c058 	.word	0x2000c058

08003b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <pin_to_index>:
} ButtonInfo_t;

static volatile ButtonInfo_t buttons[BTN_COUNT];

static int pin_to_index(uint16_t gpio_pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
    switch (gpio_pin) {
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d006      	beq.n	8003ba2 <pin_to_index+0x1e>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	dc0a      	bgt.n	8003bae <pin_to_index+0x2a>
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d006      	beq.n	8003baa <pin_to_index+0x26>
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d002      	beq.n	8003ba6 <pin_to_index+0x22>
 8003ba0:	e005      	b.n	8003bae <pin_to_index+0x2a>
    case GPIO_PIN_3: return BTN_A;  // Изменено
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e005      	b.n	8003bb2 <pin_to_index+0x2e>
    case GPIO_PIN_2: return BTN_B;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e003      	b.n	8003bb2 <pin_to_index+0x2e>
    case GPIO_PIN_1: return BTN_C;  // Изменено
 8003baa:	2302      	movs	r3, #2
 8003bac:	e001      	b.n	8003bb2 <pin_to_index+0x2e>
    default: return -1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <Buttons_GetState>:

ButtonState_t Buttons_GetState(ButtonId_t id)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
    uint16_t pin;
    switch (id) {
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d00c      	beq.n	8003be6 <Buttons_GetState+0x2a>
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dc0d      	bgt.n	8003bec <Buttons_GetState+0x30>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <Buttons_GetState+0x1e>
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d003      	beq.n	8003be0 <Buttons_GetState+0x24>
 8003bd8:	e008      	b.n	8003bec <Buttons_GetState+0x30>
    case BTN_A: pin = BTN_A_PIN; break;  // Теперь это правая кнопка
 8003bda:	2308      	movs	r3, #8
 8003bdc:	81fb      	strh	r3, [r7, #14]
 8003bde:	e007      	b.n	8003bf0 <Buttons_GetState+0x34>
    case BTN_B: pin = BTN_B_PIN; break;  // Средняя
 8003be0:	2304      	movs	r3, #4
 8003be2:	81fb      	strh	r3, [r7, #14]
 8003be4:	e004      	b.n	8003bf0 <Buttons_GetState+0x34>
    case BTN_C: pin = BTN_C_PIN; break;  // Теперь это левая кнопка
 8003be6:	2302      	movs	r3, #2
 8003be8:	81fb      	strh	r3, [r7, #14]
 8003bea:	e001      	b.n	8003bf0 <Buttons_GetState+0x34>
    default: return BUTTON_RELEASED;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e00a      	b.n	8003c06 <Buttons_GetState+0x4a>
    }
    return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, pin) == GPIO_PIN_SET) ?
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4806      	ldr	r0, [pc, #24]	@ (8003c10 <Buttons_GetState+0x54>)
 8003bf6:	f005 fd01 	bl	80095fc <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
            BUTTON_PRESSED : BUTTON_RELEASED;
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40020c00 	.word	0x40020c00

08003c14 <Buttons_Init>:

void Buttons_SetDebounceMs(uint32_t ms) { debounce_ms = ms; }
void Buttons_SetLongPressMs(uint32_t ms) { longpress_ms = ms; }

void Buttons_Init(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	e03d      	b.n	8003c9c <Buttons_Init+0x88>
        buttons[i].last_tick = 0;
 8003c20:	4923      	ldr	r1, [pc, #140]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
        buttons[i].press_start = 0;
 8003c32:	491f      	ldr	r1, [pc, #124]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3304      	adds	r3, #4
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
        buttons[i].state = BUTTON_RELEASED;
 8003c46:	491a      	ldr	r1, [pc, #104]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	3308      	adds	r3, #8
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
        buttons[i].callback = NULL;
 8003c5a:	4915      	ldr	r1, [pc, #84]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	330c      	adds	r3, #12
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
        buttons[i].long30_reported = 0;
 8003c6e:	4910      	ldr	r1, [pc, #64]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
        buttons[i].long60_reported = 0;
 8003c82:	490b      	ldr	r1, [pc, #44]	@ (8003cb0 <Buttons_Init+0x9c>)
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3311      	adds	r3, #17
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	ddbe      	ble.n	8003c20 <Buttons_Init+0xc>
    }
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20004ac0 	.word	0x20004ac0

08003cb4 <Buttons_EXTI_Handle>:
        buttons[id].callback = callback;
    }
}

void Buttons_EXTI_Handle(uint16_t GPIO_Pin)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	80fb      	strh	r3, [r7, #6]
    int idx = pin_to_index(GPIO_Pin);
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff5f 	bl	8003b84 <pin_to_index>
 8003cc6:	6178      	str	r0, [r7, #20]
    if (idx < 0) return;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f2c0 809f 	blt.w	8003e0e <Buttons_EXTI_Handle+0x15a>

    uint32_t now = HAL_GetTick();
 8003cd0:	f002 fea0 	bl	8006a14 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8003cd6:	4951      	ldr	r1, [pc, #324]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	1ad2      	subs	r2, r2, r3
 8003cea:	4b4d      	ldr	r3, [pc, #308]	@ (8003e20 <Buttons_EXTI_Handle+0x16c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f0c0 808f 	bcc.w	8003e12 <Buttons_EXTI_Handle+0x15e>
    buttons[idx].last_tick = now;
 8003cf4:	4949      	ldr	r1, [pc, #292]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	601a      	str	r2, [r3, #0]

    ButtonState_t cur = Buttons_GetState((ButtonId_t)idx);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff56 	bl	8003bbc <Buttons_GetState>
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]

    if (cur != buttons[idx].state) {
 8003d14:	4941      	ldr	r1, [pc, #260]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3308      	adds	r3, #8
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d072      	beq.n	8003e14 <Buttons_EXTI_Handle+0x160>
        buttons[idx].state = cur;
 8003d2e:	493b      	ldr	r1, [pc, #236]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	701a      	strb	r2, [r3, #0]

        if (cur == BUTTON_PRESSED) {
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d11e      	bne.n	8003d86 <Buttons_EXTI_Handle+0xd2>
            buttons[idx].press_start = now;
 8003d48:	4934      	ldr	r1, [pc, #208]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3304      	adds	r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	601a      	str	r2, [r3, #0]
            buttons[idx].long30_reported = 0;
 8003d5c:	492f      	ldr	r1, [pc, #188]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
            buttons[idx].long60_reported = 0;
 8003d70:	492a      	ldr	r1, [pc, #168]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3311      	adds	r3, #17
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e046      	b.n	8003e14 <Buttons_EXTI_Handle+0x160>
        } else {
            /* Отпускание */
            uint32_t dur = now - buttons[idx].press_start;
 8003d86:	4925      	ldr	r1, [pc, #148]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
            if (buttons[idx].callback) {
 8003d9e:	491f      	ldr	r1, [pc, #124]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	330c      	adds	r3, #12
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d02f      	beq.n	8003e14 <Buttons_EXTI_Handle+0x160>
                if (dur >= longpress_ms && dur < LONG30_MS) {
 8003db4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <Buttons_EXTI_Handle+0x170>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d313      	bcc.n	8003de6 <Buttons_EXTI_Handle+0x132>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d80e      	bhi.n	8003de6 <Buttons_EXTI_Handle+0x132>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_LONG);
 8003dc8:	4914      	ldr	r1, [pc, #80]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	2101      	movs	r1, #1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
 8003de4:	e016      	b.n	8003e14 <Buttons_EXTI_Handle+0x160>
                } else if (dur < longpress_ms) {
 8003de6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <Buttons_EXTI_Handle+0x170>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d211      	bcs.n	8003e14 <Buttons_EXTI_Handle+0x160>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_SHORT);
 8003df0:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <Buttons_EXTI_Handle+0x168>)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	330c      	adds	r3, #12
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	2100      	movs	r1, #0
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
 8003e0c:	e002      	b.n	8003e14 <Buttons_EXTI_Handle+0x160>
    if (idx < 0) return;
 8003e0e:	bf00      	nop
 8003e10:	e000      	b.n	8003e14 <Buttons_EXTI_Handle+0x160>
    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8003e12:	bf00      	nop
                }
                /* Если удержали >30 или >60 — событие уже сработало в Task */
            }
        }
    }
}
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20004ac0 	.word	0x20004ac0
 8003e20:	20000074 	.word	0x20000074
 8003e24:	20000078 	.word	0x20000078

08003e28 <HAL_GPIO_EXTI_Callback>:
    }
}

/* вызывать из stm32f2xx_it.c */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
    Buttons_EXTI_Handle(GPIO_Pin);
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff3d 	bl	8003cb4 <Buttons_EXTI_Handle>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e48:	f3bf 8f4f 	dsb	sy
}
 8003e4c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <__NVIC_SystemReset+0x24>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e56:	4904      	ldr	r1, [pc, #16]	@ (8003e68 <__NVIC_SystemReset+0x24>)
 8003e58:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <__NVIC_SystemReset+0x28>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e5e:	f3bf 8f4f 	dsb	sy
}
 8003e62:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <__NVIC_SystemReset+0x20>
 8003e68:	e000ed00 	.word	0xe000ed00
 8003e6c:	05fa0004 	.word	0x05fa0004

08003e70 <OLED_ShowCurrentPage>:


// Добавим глобальную переменную для текущей страницы
int current_page = 0; // 0 = AB page, 1 = NETINFO page

void OLED_ShowCurrentPage(void) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f002 fa4f 	bl	8006318 <ssd1306_Fill>

    switch (current_page) {
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <OLED_ShowCurrentPage+0x40>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <OLED_ShowCurrentPage+0x18>
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d003      	beq.n	8003e8e <OLED_ShowCurrentPage+0x1e>
 8003e86:	e008      	b.n	8003e9a <OLED_ShowCurrentPage+0x2a>
        case 0:
            OLED_DrawABPage();
 8003e88:	f000 fabe 	bl	8004408 <OLED_DrawABPage>
            break;
 8003e8c:	e00b      	b.n	8003ea6 <OLED_ShowCurrentPage+0x36>
        case 1:
            OLED_DrawNetInfo(&gnetif, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	4808      	ldr	r0, [pc, #32]	@ (8003eb4 <OLED_ShowCurrentPage+0x44>)
 8003e94:	f000 fcae 	bl	80047f4 <OLED_DrawNetInfo>
            break;
 8003e98:	e005      	b.n	8003ea6 <OLED_ShowCurrentPage+0x36>
        default:
            current_page = 0;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <OLED_ShowCurrentPage+0x40>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
            OLED_DrawABPage();
 8003ea0:	f000 fab2 	bl	8004408 <OLED_DrawABPage>
            break;
 8003ea4:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8003ea6:	f002 fa4f 	bl	8006348 <ssd1306_UpdateScreen>
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20004b08 	.word	0x20004b08
 8003eb4:	20004f7c 	.word	0x20004f7c

08003eb8 <Buttons_Process>:

void Buttons_Process(void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af00      	add	r7, sp, #0
    static uint32_t btn1_last_action = 0;
    static uint32_t btn3_last_action = 0;
    static uint8_t btn1_held = 0;
    static uint8_t btn3_held = 0;

    uint32_t now = HAL_GetTick();
 8003ebe:	f002 fda9 	bl	8006a14 <HAL_GetTick>
 8003ec2:	61b8      	str	r0, [r7, #24]

    // ---- Если меню Settings активно ----
    if (settings_active) {
 8003ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80040b4 <Buttons_Process+0x1fc>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8103 	beq.w	80040d4 <Buttons_Process+0x21c>
        int any_pressed = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24

        // Обработка кнопки 3 (ПРАВАЯ кнопка - ВВЕРХ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	4878      	ldr	r0, [pc, #480]	@ (80040b8 <Buttons_Process+0x200>)
 8003ed6:	f005 fb91 	bl	80095fc <HAL_GPIO_ReadPin>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13c      	bne.n	8003f5a <Buttons_Process+0xa2>
            if (!btn3_held) {
 8003ee0:	4b76      	ldr	r3, [pc, #472]	@ (80040bc <Buttons_Process+0x204>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <Buttons_Process+0x46>
                // Первое нажатие
                btn3_held = 1;
 8003ee8:	4b74      	ldr	r3, [pc, #464]	@ (80040bc <Buttons_Process+0x204>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
                btn3_last_action = now;
 8003eee:	4a74      	ldr	r2, [pc, #464]	@ (80040c0 <Buttons_Process+0x208>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveUp();
 8003ef4:	f001 fdd4 	bl	8005aa0 <OLED_Settings_MoveUp>
                any_pressed = 1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e030      	b.n	8003f60 <Buttons_Process+0xa8>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn3_last_action;
 8003efe:	4b70      	ldr	r3, [pc, #448]	@ (80040c0 <Buttons_Process+0x208>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	60fb      	str	r3, [r7, #12]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d902      	bls.n	8003f18 <Buttons_Process+0x60>
                    delay_ms = 20;
 8003f12:	2314      	movs	r3, #20
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	e011      	b.n	8003f3c <Buttons_Process+0x84>
                } else if (hold_time > 3000) {
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d902      	bls.n	8003f28 <Buttons_Process+0x70>
                    delay_ms = 50;
 8003f22:	2332      	movs	r3, #50	@ 0x32
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	e009      	b.n	8003f3c <Buttons_Process+0x84>
                } else if (hold_time > 1000) {
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f2e:	d902      	bls.n	8003f36 <Buttons_Process+0x7e>
                    delay_ms = 100;
 8003f30:	2364      	movs	r3, #100	@ 0x64
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e002      	b.n	8003f3c <Buttons_Process+0x84>
                } else {
                    delay_ms = 300;
 8003f36:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f3a:	623b      	str	r3, [r7, #32]
                }

                if (now - btn3_last_action > delay_ms) {
 8003f3c:	4b60      	ldr	r3, [pc, #384]	@ (80040c0 <Buttons_Process+0x208>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20a      	bcs.n	8003f60 <Buttons_Process+0xa8>
                    OLED_Settings_MoveUp();
 8003f4a:	f001 fda9 	bl	8005aa0 <OLED_Settings_MoveUp>
                    btn3_last_action = now;
 8003f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80040c0 <Buttons_Process+0x208>)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	e002      	b.n	8003f60 <Buttons_Process+0xa8>
                }
            }
        } else {
            btn3_held = 0;
 8003f5a:	4b58      	ldr	r3, [pc, #352]	@ (80040bc <Buttons_Process+0x204>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 1 (ЛЕВАЯ кнопка - ВНИЗ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8003f60:	2102      	movs	r1, #2
 8003f62:	4855      	ldr	r0, [pc, #340]	@ (80040b8 <Buttons_Process+0x200>)
 8003f64:	f005 fb4a 	bl	80095fc <HAL_GPIO_ReadPin>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13c      	bne.n	8003fe8 <Buttons_Process+0x130>
            if (!btn1_held) {
 8003f6e:	4b55      	ldr	r3, [pc, #340]	@ (80040c4 <Buttons_Process+0x20c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <Buttons_Process+0xd4>
                // Первое нажатие
                btn1_held = 1;
 8003f76:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <Buttons_Process+0x20c>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
                btn1_last_action = now;
 8003f7c:	4a52      	ldr	r2, [pc, #328]	@ (80040c8 <Buttons_Process+0x210>)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveDown();
 8003f82:	f001 fdd1 	bl	8005b28 <OLED_Settings_MoveDown>
                any_pressed = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8a:	e030      	b.n	8003fee <Buttons_Process+0x136>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn1_last_action;
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80040c8 <Buttons_Process+0x210>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	60bb      	str	r3, [r7, #8]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d902      	bls.n	8003fa6 <Buttons_Process+0xee>
                    delay_ms = 20;
 8003fa0:	2314      	movs	r3, #20
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e011      	b.n	8003fca <Buttons_Process+0x112>
                } else if (hold_time > 3000) {
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d902      	bls.n	8003fb6 <Buttons_Process+0xfe>
                    delay_ms = 50;
 8003fb0:	2332      	movs	r3, #50	@ 0x32
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e009      	b.n	8003fca <Buttons_Process+0x112>
                } else if (hold_time > 1000) {
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fbc:	d902      	bls.n	8003fc4 <Buttons_Process+0x10c>
                    delay_ms = 100;
 8003fbe:	2364      	movs	r3, #100	@ 0x64
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e002      	b.n	8003fca <Buttons_Process+0x112>
                } else {
                    delay_ms = 300;
 8003fc4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003fc8:	61fb      	str	r3, [r7, #28]
                }

                if (now - btn1_last_action > delay_ms) {
 8003fca:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <Buttons_Process+0x210>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d20a      	bcs.n	8003fee <Buttons_Process+0x136>
                    OLED_Settings_MoveDown();
 8003fd8:	f001 fda6 	bl	8005b28 <OLED_Settings_MoveDown>
                    btn1_last_action = now;
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80040c8 <Buttons_Process+0x210>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe6:	e002      	b.n	8003fee <Buttons_Process+0x136>
                }
            }
        } else {
            btn1_held = 0;
 8003fe8:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <Buttons_Process+0x20c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 2 (Выбор / Долгое нажатие = Назад)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8003fee:	2104      	movs	r1, #4
 8003ff0:	4831      	ldr	r0, [pc, #196]	@ (80040b8 <Buttons_Process+0x200>)
 8003ff2:	f005 fb03 	bl	80095fc <HAL_GPIO_ReadPin>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d12c      	bne.n	8004056 <Buttons_Process+0x19e>
            // фиксируем момент первого нажатия (debounce)
            if (btn2_press_time == 0) {
 8003ffc:	4b33      	ldr	r3, [pc, #204]	@ (80040cc <Buttons_Process+0x214>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <Buttons_Process+0x152>
                btn2_press_time = now;
 8004004:	4a31      	ldr	r2, [pc, #196]	@ (80040cc <Buttons_Process+0x214>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6013      	str	r3, [r2, #0]
            }
            HAL_Delay(20);
 800400a:	2014      	movs	r0, #20
 800400c:	f002 fd0c 	bl	8006a28 <HAL_Delay>
            if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004010:	2104      	movs	r1, #4
 8004012:	4829      	ldr	r0, [pc, #164]	@ (80040b8 <Buttons_Process+0x200>)
 8004014:	f005 faf2 	bl	80095fc <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d134      	bne.n	8004088 <Buttons_Process+0x1d0>
                uint32_t held_ms = now - btn2_press_time;
 800401e:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <Buttons_Process+0x214>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	603b      	str	r3, [r7, #0]
                if (held_ms >= 1000) {
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800402e:	d32b      	bcc.n	8004088 <Buttons_Process+0x1d0>
                    // долгое нажатие → назад
                    OLED_Settings_Back();
 8004030:	f000 ffd6 	bl	8004fe0 <OLED_Settings_Back>
                    // ждём отпускания
                    while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) HAL_Delay(10);
 8004034:	e002      	b.n	800403c <Buttons_Process+0x184>
 8004036:	200a      	movs	r0, #10
 8004038:	f002 fcf6 	bl	8006a28 <HAL_Delay>
 800403c:	2104      	movs	r1, #4
 800403e:	481e      	ldr	r0, [pc, #120]	@ (80040b8 <Buttons_Process+0x200>)
 8004040:	f005 fadc 	bl	80095fc <HAL_GPIO_ReadPin>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f5      	beq.n	8004036 <Buttons_Process+0x17e>
                    btn2_press_time = 0;
 800404a:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <Buttons_Process+0x214>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
                    any_pressed = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	e018      	b.n	8004088 <Buttons_Process+0x1d0>
                }
            }
        } else {
            if (btn2_press_time != 0) {
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <Buttons_Process+0x214>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d014      	beq.n	8004088 <Buttons_Process+0x1d0>
                // короткое нажатие → Select
                uint32_t press_ms = HAL_GetTick() - btn2_press_time;
 800405e:	f002 fcd9 	bl	8006a14 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <Buttons_Process+0x214>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	607b      	str	r3, [r7, #4]
                if (press_ms >= 50 && press_ms < 1000) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b31      	cmp	r3, #49	@ 0x31
 8004070:	d907      	bls.n	8004082 <Buttons_Process+0x1ca>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004078:	d203      	bcs.n	8004082 <Buttons_Process+0x1ca>
                    OLED_Settings_Select();
 800407a:	f001 fd9b 	bl	8005bb4 <OLED_Settings_Select>
                    any_pressed = 1;
 800407e:	2301      	movs	r3, #1
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
                }
                btn2_press_time = 0;
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <Buttons_Process+0x214>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
            }
        }

        // Обновляем таймер последней активности
        if (any_pressed) settings_last_activity = now;
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <Buttons_Process+0x1dc>
 800408e:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <Buttons_Process+0x218>)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	6013      	str	r3, [r2, #0]

        // Если прошло 10 секунд без действий → выход из настроек
        if ((now - settings_last_activity) >= 10000) {
 8004094:	4b0e      	ldr	r3, [pc, #56]	@ (80040d0 <Buttons_Process+0x218>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80040a0:	4293      	cmp	r3, r2
 80040a2:	f240 80cc 	bls.w	800423e <Buttons_Process+0x386>
            settings_active = 0;
 80040a6:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <Buttons_Process+0x1fc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
            OLED_DrawABPage();
 80040ac:	f000 f9ac 	bl	8004408 <OLED_DrawABPage>
        }

        return;
 80040b0:	e0c5      	b.n	800423e <Buttons_Process+0x386>
 80040b2:	bf00      	nop
 80040b4:	20004afc 	.word	0x20004afc
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	20004b0c 	.word	0x20004b0c
 80040c0:	20004b10 	.word	0x20004b10
 80040c4:	20004b14 	.word	0x20004b14
 80040c8:	20004b18 	.word	0x20004b18
 80040cc:	20004b00 	.word	0x20004b00
 80040d0:	20004b1c 	.word	0x20004b1c
    }

    // ---- Режим обычного переключения страниц ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {  // Правая кнопка = предыдущая страница
 80040d4:	2108      	movs	r1, #8
 80040d6:	485c      	ldr	r0, [pc, #368]	@ (8004248 <Buttons_Process+0x390>)
 80040d8:	f005 fa90 	bl	80095fc <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11f      	bne.n	8004122 <Buttons_Process+0x26a>
        HAL_Delay(200);
 80040e2:	20c8      	movs	r0, #200	@ 0xc8
 80040e4:	f002 fca0 	bl	8006a28 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 80040e8:	2108      	movs	r1, #8
 80040ea:	4857      	ldr	r0, [pc, #348]	@ (8004248 <Buttons_Process+0x390>)
 80040ec:	f005 fa86 	bl	80095fc <HAL_GPIO_ReadPin>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d115      	bne.n	8004122 <Buttons_Process+0x26a>
            current_page--;
 80040f6:	4b55      	ldr	r3, [pc, #340]	@ (800424c <Buttons_Process+0x394>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	4a53      	ldr	r2, [pc, #332]	@ (800424c <Buttons_Process+0x394>)
 80040fe:	6013      	str	r3, [r2, #0]
            if (current_page < 0) current_page = 1;
 8004100:	4b52      	ldr	r3, [pc, #328]	@ (800424c <Buttons_Process+0x394>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da02      	bge.n	800410e <Buttons_Process+0x256>
 8004108:	4b50      	ldr	r3, [pc, #320]	@ (800424c <Buttons_Process+0x394>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 800410e:	f7ff feaf 	bl	8003e70 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET);
 8004112:	bf00      	nop
 8004114:	2108      	movs	r1, #8
 8004116:	484c      	ldr	r0, [pc, #304]	@ (8004248 <Buttons_Process+0x390>)
 8004118:	f005 fa70 	bl	80095fc <HAL_GPIO_ReadPin>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f8      	beq.n	8004114 <Buttons_Process+0x25c>
        }
    }

    if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {  // Левая кнопка = следующая страница
 8004122:	2102      	movs	r1, #2
 8004124:	4848      	ldr	r0, [pc, #288]	@ (8004248 <Buttons_Process+0x390>)
 8004126:	f005 fa69 	bl	80095fc <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11f      	bne.n	8004170 <Buttons_Process+0x2b8>
        HAL_Delay(200);
 8004130:	20c8      	movs	r0, #200	@ 0xc8
 8004132:	f002 fc79 	bl	8006a28 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8004136:	2102      	movs	r1, #2
 8004138:	4843      	ldr	r0, [pc, #268]	@ (8004248 <Buttons_Process+0x390>)
 800413a:	f005 fa5f 	bl	80095fc <HAL_GPIO_ReadPin>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d115      	bne.n	8004170 <Buttons_Process+0x2b8>
            current_page++;
 8004144:	4b41      	ldr	r3, [pc, #260]	@ (800424c <Buttons_Process+0x394>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	4a40      	ldr	r2, [pc, #256]	@ (800424c <Buttons_Process+0x394>)
 800414c:	6013      	str	r3, [r2, #0]
            if (current_page > 1) current_page = 0;
 800414e:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <Buttons_Process+0x394>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	dd02      	ble.n	800415c <Buttons_Process+0x2a4>
 8004156:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <Buttons_Process+0x394>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 800415c:	f7ff fe88 	bl	8003e70 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET);
 8004160:	bf00      	nop
 8004162:	2102      	movs	r1, #2
 8004164:	4838      	ldr	r0, [pc, #224]	@ (8004248 <Buttons_Process+0x390>)
 8004166:	f005 fa49 	bl	80095fc <HAL_GPIO_ReadPin>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f8      	beq.n	8004162 <Buttons_Process+0x2aa>
        }
    }

    // ---- Кнопка 2 (Settings / RESET) ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004170:	2104      	movs	r1, #4
 8004172:	4835      	ldr	r0, [pc, #212]	@ (8004248 <Buttons_Process+0x390>)
 8004174:	f005 fa42 	bl	80095fc <HAL_GPIO_ReadPin>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d132      	bne.n	80041e4 <Buttons_Process+0x32c>
        if (!btn2_held) {
 800417e:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <Buttons_Process+0x398>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <Buttons_Process+0x2e0>
            btn2_held = 1;
 8004186:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <Buttons_Process+0x398>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
            btn2_press_time = HAL_GetTick();
 800418c:	f002 fc42 	bl	8006a14 <HAL_GetTick>
 8004190:	4603      	mov	r3, r0
 8004192:	4a30      	ldr	r2, [pc, #192]	@ (8004254 <Buttons_Process+0x39c>)
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e053      	b.n	8004240 <Buttons_Process+0x388>
        } else {
            uint32_t held_time = (HAL_GetTick() - btn2_press_time) / 1000;
 8004198:	f002 fc3c 	bl	8006a14 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <Buttons_Process+0x39c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <Buttons_Process+0x3a0>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	613b      	str	r3, [r7, #16]

            if (held_time >= 60) {
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b3b      	cmp	r3, #59	@ 0x3b
 80041b2:	d912      	bls.n	80041da <Buttons_Process+0x322>
                // HARD RESET через IWDG
                IWDG->KR = 0x5555;
 80041b4:	4b29      	ldr	r3, [pc, #164]	@ (800425c <Buttons_Process+0x3a4>)
 80041b6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80041ba:	601a      	str	r2, [r3, #0]
                IWDG->PR = 0;
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <Buttons_Process+0x3a4>)
 80041be:	2200      	movs	r2, #0
 80041c0:	605a      	str	r2, [r3, #4]
                IWDG->RLR = 10;
 80041c2:	4b26      	ldr	r3, [pc, #152]	@ (800425c <Buttons_Process+0x3a4>)
 80041c4:	220a      	movs	r2, #10
 80041c6:	609a      	str	r2, [r3, #8]
                IWDG->KR = 0xAAAA;
 80041c8:	4b24      	ldr	r3, [pc, #144]	@ (800425c <Buttons_Process+0x3a4>)
 80041ca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80041ce:	601a      	str	r2, [r3, #0]
                IWDG->KR = 0xCCCC;
 80041d0:	4b22      	ldr	r3, [pc, #136]	@ (800425c <Buttons_Process+0x3a4>)
 80041d2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e032      	b.n	8004240 <Buttons_Process+0x388>
            } else if (held_time >= 30) {
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b1d      	cmp	r3, #29
 80041de:	d92f      	bls.n	8004240 <Buttons_Process+0x388>
                // SOFT RESET
                NVIC_SystemReset();
 80041e0:	f7ff fe30 	bl	8003e44 <__NVIC_SystemReset>
            }
        }
    } else {
        if (btn2_held) {
 80041e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <Buttons_Process+0x398>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d024      	beq.n	8004236 <Buttons_Process+0x37e>
            uint32_t press_time = (HAL_GetTick() - btn2_press_time);
 80041ec:	f002 fc12 	bl	8006a14 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <Buttons_Process+0x39c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
            if (press_time >= 50 && press_time < 1000) {
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b31      	cmp	r3, #49	@ 0x31
 80041fe:	d917      	bls.n	8004230 <Buttons_Process+0x378>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004206:	d213      	bcs.n	8004230 <Buttons_Process+0x378>
                // Короткое нажатие → открыть/закрыть Settings
                if (!settings_active) {
 8004208:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <Buttons_Process+0x3a8>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <Buttons_Process+0x36e>
                    settings_active = 1;
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <Buttons_Process+0x3a8>)
 8004212:	2201      	movs	r2, #1
 8004214:	701a      	strb	r2, [r3, #0]
                    OLED_Settings_Init();
 8004216:	f000 fbd9 	bl	80049cc <OLED_Settings_Init>
                    settings_last_activity = HAL_GetTick();
 800421a:	f002 fbfb 	bl	8006a14 <HAL_GetTick>
 800421e:	4603      	mov	r3, r0
 8004220:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <Buttons_Process+0x3ac>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e004      	b.n	8004230 <Buttons_Process+0x378>
                } else {
                    settings_active = 0;
 8004226:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <Buttons_Process+0x3a8>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
                    OLED_DrawABPage();
 800422c:	f000 f8ec 	bl	8004408 <OLED_DrawABPage>
                }
            }
            // Сбросим время нажатия, чтобы избежать двойной обработки при входе в Settings
            btn2_press_time = 0;
 8004230:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <Buttons_Process+0x39c>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
        }
        btn2_held = 0;
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <Buttons_Process+0x398>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e000      	b.n	8004240 <Buttons_Process+0x388>
        return;
 800423e:	bf00      	nop
    }
}
 8004240:	3728      	adds	r7, #40	@ 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40020c00 	.word	0x40020c00
 800424c:	20004b08 	.word	0x20004b08
 8004250:	20004b04 	.word	0x20004b04
 8004254:	20004b00 	.word	0x20004b00
 8004258:	10624dd3 	.word	0x10624dd3
 800425c:	40003000 	.word	0x40003000
 8004260:	20004afc 	.word	0x20004afc
 8004264:	20004b1c 	.word	0x20004b1c

08004268 <draw_cross>:
extern float current;

/* --- Вспомогательные функции --- */

/* Рисует крест поверх круга */
static void draw_cross(int cx, int cy, int r) {
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
    int d = (int)(r * 0.65f);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fc fd57 	bl	8000d28 <__aeabi_i2f>
 800427a:	4603      	mov	r3, r0
 800427c:	4923      	ldr	r1, [pc, #140]	@ (800430c <draw_cross+0xa4>)
 800427e:	4618      	mov	r0, r3
 8004280:	f7fc fda6 	bl	8000dd0 <__aeabi_fmul>
 8004284:	4603      	mov	r3, r0
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc ff7e 	bl	8001188 <__aeabi_f2iz>
 800428c:	4603      	mov	r3, r0
 800428e:	617b      	str	r3, [r7, #20]
    ssd1306_Line(cx - d, cy - d, cx + d, cy + d, White);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b2d8      	uxtb	r0, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b2d9      	uxtb	r1, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	b2dc      	uxtb	r4, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4413      	add	r3, r2
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2201      	movs	r2, #1
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	4622      	mov	r2, r4
 80042c6:	f002 f987 	bl	80065d8 <ssd1306_Line>
    ssd1306_Line(cx - d, cy + d, cx + d, cy - d, White);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	b2d8      	uxtb	r0, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4413      	add	r3, r2
 80042e0:	b2d9      	uxtb	r1, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	b2dc      	uxtb	r4, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	4622      	mov	r2, r4
 8004300:	f002 f96a 	bl	80065d8 <ssd1306_Line>
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd90      	pop	{r4, r7, pc}
 800430c:	3f266666 	.word	0x3f266666

08004310 <draw_centered_char>:

/* Центрированный символ */
static void draw_centered_char(int cx, int cy, char ch, const SSD1306_Font_t *font) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	@ 0x30
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	71fb      	strb	r3, [r7, #7]
    char s[2] = { ch, '\0' };
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	753b      	strb	r3, [r7, #20]
 8004324:	2300      	movs	r3, #0
 8004326:	757b      	strb	r3, [r7, #21]
    int fw = font->width;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	61fb      	str	r3, [r7, #28]
    int fh = font->height;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	61bb      	str	r3, [r7, #24]
    int x = cx - fw / 2;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	0fda      	lsrs	r2, r3, #31
 8004338:	4413      	add	r3, r2
 800433a:	105b      	asrs	r3, r3, #1
 800433c:	425b      	negs	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = cy - fh / 2;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	0fda      	lsrs	r2, r3, #31
 800434a:	4413      	add	r3, r2
 800434c:	105b      	asrs	r3, r3, #1
 800434e:	425b      	negs	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	623b      	str	r3, [r7, #32]
    if (x < 0) x = 0;
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	da01      	bge.n	8004362 <draw_centered_char+0x52>
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) y = 0;
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	da01      	bge.n	800436c <draw_centered_char+0x5c>
 8004368:	2300      	movs	r3, #0
 800436a:	623b      	str	r3, [r7, #32]
    ssd1306_SetCursor((uint8_t)x, (uint8_t)y);
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	b2db      	uxtb	r3, r3
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f002 f916 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(s, *font, White);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f107 0014 	add.w	r0, r7, #20
 8004382:	2201      	movs	r2, #1
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004388:	f002 f8e8 	bl	800655c <ssd1306_WriteString>
}
 800438c:	bf00      	nop
 800438e:	3728      	adds	r7, #40	@ 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <draw_input_circle>:

/* Кружок с буквой. Если нет входа — крест. Если активный — двойной круг */
static void draw_input_circle(int cx, int cy, char label, uint8_t hasInput, uint8_t isActive) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	460b      	mov	r3, r1
 80043a4:	71fb      	strb	r3, [r7, #7]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71bb      	strb	r3, [r7, #6]
    const int r = 12;
 80043aa:	230c      	movs	r3, #12
 80043ac:	617b      	str	r3, [r7, #20]
    ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)r, White);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	b2d8      	uxtb	r0, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	b2d9      	uxtb	r1, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	2301      	movs	r3, #1
 80043bc:	f002 f978 	bl	80066b0 <ssd1306_DrawCircle>

    // буква всегда рисуется
    draw_centered_char(cx, cy, label, &Font_11x18);
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <draw_input_circle+0x70>)
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff ffa2 	bl	8004310 <draw_centered_char>

    if (!hasInput) {
 80043cc:	79bb      	ldrb	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <draw_input_circle+0x4a>
        draw_cross(cx, cy, r);
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff46 	bl	8004268 <draw_cross>
    } else if (isActive) {
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
    }
}
 80043dc:	e00e      	b.n	80043fc <draw_input_circle+0x68>
    } else if (isActive) {
 80043de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <draw_input_circle+0x68>
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	b2d8      	uxtb	r0, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	b2d9      	uxtb	r1, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	3303      	adds	r3, #3
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	2301      	movs	r3, #1
 80043f8:	f002 f95a 	bl	80066b0 <ssd1306_DrawCircle>
}
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08029590 	.word	0x08029590

08004408 <OLED_DrawABPage>:

/* --- Главная функция --- */
void OLED_DrawABPage(void) {
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b0a5      	sub	sp, #148	@ 0x94
 800440c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800440e:	2000      	movs	r0, #0
 8004410:	f001 ff82 	bl	8006318 <ssd1306_Fill>

    const int SW = SSD1306_ROTATED_WIDTH;   // 64
 8004414:	2340      	movs	r3, #64	@ 0x40
 8004416:	677b      	str	r3, [r7, #116]	@ 0x74
    const int SH = SSD1306_ROTATED_HEIGHT;  // 128
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	673b      	str	r3, [r7, #112]	@ 0x70

    // Заголовок сверху - БОЛЬШИМИ БУКВАМИ ДЛЯ ТЕСТА
    const char title[] = "BONCH-ATS";
 800441c:	4a72      	ldr	r2, [pc, #456]	@ (80045e8 <OLED_DrawABPage+0x1e0>)
 800441e:	f107 0320 	add.w	r3, r7, #32
 8004422:	ca07      	ldmia	r2, {r0, r1, r2}
 8004424:	c303      	stmia	r3!, {r0, r1}
 8004426:	801a      	strh	r2, [r3, #0]
    const SSD1306_Font_t *title_font = &Font_7x10;
 8004428:	4b70      	ldr	r3, [pc, #448]	@ (80045ec <OLED_DrawABPage+0x1e4>)
 800442a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int title_x = (SW / 2) - ((int)strlen(title) * title_font->width / 2);
 800442c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442e:	0fda      	lsrs	r2, r3, #31
 8004430:	4413      	add	r3, r2
 8004432:	105b      	asrs	r3, r3, #1
 8004434:	4619      	mov	r1, r3
 8004436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	0fda      	lsrs	r2, r3, #31
 8004444:	4413      	add	r3, r2
 8004446:	105b      	asrs	r3, r3, #1
 8004448:	425b      	negs	r3, r3
 800444a:	440b      	add	r3, r1
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (title_x < 0) title_x = 0;
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004454:	2b00      	cmp	r3, #0
 8004456:	da02      	bge.n	800445e <OLED_DrawABPage+0x56>
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ssd1306_SetCursor(title_x, 2);
 800445e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f002 f89e 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *title_font, White);
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	f107 0020 	add.w	r0, r7, #32
 8004472:	2201      	movs	r2, #1
 8004474:	9200      	str	r2, [sp, #0]
 8004476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004478:	f002 f870 	bl	800655c <ssd1306_WriteString>
    int title_bottom = 2 + title_font->height;
 800447c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	3302      	adds	r3, #2
 8004482:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Нижний блок (U/I/P)
    const SSD1306_Font_t *fval = &Font_7x10;
 8004484:	4b59      	ldr	r3, [pc, #356]	@ (80045ec <OLED_DrawABPage+0x1e4>)
 8004486:	667b      	str	r3, [r7, #100]	@ 0x64
    const int fh = fval->height;   // ~10
 8004488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	663b      	str	r3, [r7, #96]	@ 0x60
    const int vpad = 4;
 800448e:	2304      	movs	r3, #4
 8004490:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int box_x = 2;
 8004492:	2302      	movs	r3, #2
 8004494:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int lines = 3;
 8004496:	2303      	movs	r3, #3
 8004498:	657b      	str	r3, [r7, #84]	@ 0x54
    const int box_h = (fh * lines) + (vpad * (lines + 1));
 800449a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800449e:	fb03 f202 	mul.w	r2, r3, r2
 80044a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a4:	3301      	adds	r3, #1
 80044a6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	653b      	str	r3, [r7, #80]	@ 0x50
    const int box_w = SW - 4;
 80044b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044b2:	3b04      	subs	r3, #4
 80044b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int box_y = SH - box_h - 4;
 80044b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	3b04      	subs	r3, #4
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48
    int data_top = box_y;
 80044c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c2:	647b      	str	r3, [r7, #68]	@ 0x44

    // Параметры входов
    uint8_t hasA = (voltage1 > ABPAGE_VOLTAGE_THRESHOLD);
 80044c4:	4b4a      	ldr	r3, [pc, #296]	@ (80045f0 <OLED_DrawABPage+0x1e8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4614      	mov	r4, r2
 80044cc:	4949      	ldr	r1, [pc, #292]	@ (80045f4 <OLED_DrawABPage+0x1ec>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc fe3a 	bl	8001148 <__aeabi_fcmpgt>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <OLED_DrawABPage+0xd6>
 80044da:	2300      	movs	r3, #0
 80044dc:	461c      	mov	r4, r3
 80044de:	b2e3      	uxtb	r3, r4
 80044e0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t hasB = (voltage2 > ABPAGE_VOLTAGE_THRESHOLD);
 80044e4:	4b44      	ldr	r3, [pc, #272]	@ (80045f8 <OLED_DrawABPage+0x1f0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	4614      	mov	r4, r2
 80044ec:	4941      	ldr	r1, [pc, #260]	@ (80045f4 <OLED_DrawABPage+0x1ec>)
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc fe2a 	bl	8001148 <__aeabi_fcmpgt>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <OLED_DrawABPage+0xf6>
 80044fa:	2300      	movs	r3, #0
 80044fc:	461c      	mov	r4, r3
 80044fe:	b2e3      	uxtb	r3, r4
 8004500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    uint8_t activeA = 0, activeB = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    if (hasA && hasB) activeA = 1;     // A приоритет
 8004510:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <OLED_DrawABPage+0x120>
 8004518:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <OLED_DrawABPage+0x120>
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004526:	e00e      	b.n	8004546 <OLED_DrawABPage+0x13e>
    else if (hasA) activeA = 1;
 8004528:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <OLED_DrawABPage+0x130>
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004536:	e006      	b.n	8004546 <OLED_DrawABPage+0x13e>
    else if (hasB) activeB = 1;
 8004538:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <OLED_DrawABPage+0x13e>
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

    // Кружки A и B — по центру между заголовком и блоком данных
    // ЯВНО СДВИГАЕМ ВНИЗ НА 10 ПИКСЕЛЕЙ ДЛЯ ТЕСТА
    int center_y = title_bottom + 10 + ((data_top - title_bottom - 10) / 2);
 8004546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004548:	f103 020a 	add.w	r2, r3, #10
 800454c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800454e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004550:	1acb      	subs	r3, r1, r3
 8004552:	3b0a      	subs	r3, #10
 8004554:	0fd9      	lsrs	r1, r3, #31
 8004556:	440b      	add	r3, r1
 8004558:	105b      	asrs	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int ax = SW / 4;
 800455e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004560:	2b00      	cmp	r3, #0
 8004562:	da00      	bge.n	8004566 <OLED_DrawABPage+0x15e>
 8004564:	3303      	adds	r3, #3
 8004566:	109b      	asrs	r3, r3, #2
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int bx = (SW * 3) / 4;
 800456a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	da00      	bge.n	8004578 <OLED_DrawABPage+0x170>
 8004576:	3303      	adds	r3, #3
 8004578:	109b      	asrs	r3, r3, #2
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34

    draw_input_circle(ax, center_y, 'A', hasA, activeA);
 800457c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004580:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	2241      	movs	r2, #65	@ 0x41
 800458a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800458e:	f7ff ff01 	bl	8004394 <draw_input_circle>
    draw_input_circle(bx, center_y, 'B', hasB, activeB);
 8004592:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8004596:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	2242      	movs	r2, #66	@ 0x42
 80045a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045a4:	f7ff fef6 	bl	8004394 <draw_input_circle>

    // Рисуем нижний блок
    ssd1306_DrawRectangle(box_x, box_y, box_x + box_w, box_y + box_h, White);
 80045a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045aa:	b2d8      	uxtb	r0, r3
 80045ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ae:	b2d9      	uxtb	r1, r3
 80045b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	b2dc      	uxtb	r4, r3
 80045bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2201      	movs	r2, #1
 80045ca:	9200      	str	r2, [sp, #0]
 80045cc:	4622      	mov	r2, r4
 80045ce:	f002 f8f6 	bl	80067be <ssd1306_DrawRectangle>

    // Значения
    float u_work = 0.0f;
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (activeA) u_work = voltage1;
 80045d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <OLED_DrawABPage+0x1f4>
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <OLED_DrawABPage+0x1e8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045e6:	e010      	b.n	800460a <OLED_DrawABPage+0x202>
 80045e8:	08025210 	.word	0x08025210
 80045ec:	08029584 	.word	0x08029584
 80045f0:	20004aac 	.word	0x20004aac
 80045f4:	41a00000 	.word	0x41a00000
 80045f8:	20004ab0 	.word	0x20004ab0
    else if (activeB) u_work = voltage2;
 80045fc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <OLED_DrawABPage+0x202>
 8004604:	4b48      	ldr	r3, [pc, #288]	@ (8004728 <OLED_DrawABPage+0x320>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Округление мощности до целых - ТЕПЕРЬ ТОЧНО БЕЗ ДРОБНОЙ ЧАСТИ
    int power_int = (int)(current * u_work);
 800460a:	4b48      	ldr	r3, [pc, #288]	@ (800472c <OLED_DrawABPage+0x324>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004610:	4618      	mov	r0, r3
 8004612:	f7fc fbdd 	bl	8000dd0 <__aeabi_fmul>
 8004616:	4603      	mov	r3, r0
 8004618:	4618      	mov	r0, r3
 800461a:	f7fc fdb5 	bl	8001188 <__aeabi_f2iz>
 800461e:	4603      	mov	r3, r0
 8004620:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (current * u_work - power_int >= 0.5) power_int++; // Правильное округление
 8004622:	4b42      	ldr	r3, [pc, #264]	@ (800472c <OLED_DrawABPage+0x324>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fbd1 	bl	8000dd0 <__aeabi_fmul>
 800462e:	4603      	mov	r3, r0
 8004630:	461c      	mov	r4, r3
 8004632:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004634:	f7fc fb78 	bl	8000d28 <__aeabi_i2f>
 8004638:	4603      	mov	r3, r0
 800463a:	4619      	mov	r1, r3
 800463c:	4620      	mov	r0, r4
 800463e:	f7fc fabd 	bl	8000bbc <__aeabi_fsub>
 8004642:	4603      	mov	r3, r0
 8004644:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fd73 	bl	8001134 <__aeabi_fcmpge>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <OLED_DrawABPage+0x252>
 8004654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004656:	3301      	adds	r3, #1
 8004658:	67bb      	str	r3, [r7, #120]	@ 0x78

    char buf[32];
    int text_x = box_x + 4;
 800465a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800465c:	3304      	adds	r3, #4
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
    int y = box_y + vpad;
 8004660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004664:	4413      	add	r3, r2
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // ИЗМЕНИЛ ФОРМАТ ДЛЯ ТЕСТА - БОЛЬШИЕ БУКВЫ
    snprintf(buf, sizeof(buf), "U=%.1fV", u_work);
 8004668:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800466a:	f7fb ff23 	bl	80004b4 <__aeabi_f2d>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4638      	mov	r0, r7
 8004674:	e9cd 2300 	strd	r2, r3, [sp]
 8004678:	4a2d      	ldr	r2, [pc, #180]	@ (8004730 <OLED_DrawABPage+0x328>)
 800467a:	2120      	movs	r1, #32
 800467c:	f01d fe50 	bl	8022320 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	b2db      	uxtb	r3, r3
 8004684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f001 ff8c 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8004690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004692:	4638      	mov	r0, r7
 8004694:	2201      	movs	r2, #1
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469a:	f001 ff5f 	bl	800655c <ssd1306_WriteString>

    y += fh + vpad;
 800469e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a2:	4413      	add	r3, r2
 80046a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a6:	4413      	add	r3, r2
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buf, sizeof(buf), "I=%.1f A", current);
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <OLED_DrawABPage+0x324>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb ff00 	bl	80004b4 <__aeabi_f2d>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4638      	mov	r0, r7
 80046ba:	e9cd 2300 	strd	r2, r3, [sp]
 80046be:	4a1d      	ldr	r2, [pc, #116]	@ (8004734 <OLED_DrawABPage+0x32c>)
 80046c0:	2120      	movs	r1, #32
 80046c2:	f01d fe2d 	bl	8022320 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 ff69 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80046d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d8:	4638      	mov	r0, r7
 80046da:	2201      	movs	r2, #1
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e0:	f001 ff3c 	bl	800655c <ssd1306_WriteString>

    y += fh + vpad;
 80046e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e8:	4413      	add	r3, r2
 80046ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ec:	4413      	add	r3, r2
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // ЯВНОЕ ИЗМЕНЕНИЕ - ЦЕЛОЕ ЧИСЛО БЕЗ ТОЧКИ
    snprintf(buf, sizeof(buf), "P=%d W", power_int);
 80046f0:	4638      	mov	r0, r7
 80046f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046f4:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <OLED_DrawABPage+0x330>)
 80046f6:	2120      	movs	r1, #32
 80046f8:	f01d fe12 	bl	8022320 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 ff4e 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 800470c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800470e:	4638      	mov	r0, r7
 8004710:	2201      	movs	r2, #1
 8004712:	9200      	str	r2, [sp, #0]
 8004714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004716:	f001 ff21 	bl	800655c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800471a:	f001 fe15 	bl	8006348 <ssd1306_UpdateScreen>
}
 800471e:	bf00      	nop
 8004720:	378c      	adds	r7, #140	@ 0x8c
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}
 8004726:	bf00      	nop
 8004728:	20004ab0 	.word	0x20004ab0
 800472c:	20004ab4 	.word	0x20004ab4
 8004730:	080251f4 	.word	0x080251f4
 8004734:	080251fc 	.word	0x080251fc
 8004738:	08025208 	.word	0x08025208

0800473c <OLED_DrawIP_Split>:
 *
 * @param x   позиция курсора X
 * @param y   позиция курсора Y
 * @param addr указатель на ip4_addr_t
 */
void OLED_DrawIP_Split(uint8_t x, uint8_t y, const ip4_addr_t *addr) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	@ 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	4603      	mov	r3, r0
 8004744:	603a      	str	r2, [r7, #0]
 8004746:	71fb      	strb	r3, [r7, #7]
 8004748:	460b      	mov	r3, r1
 800474a:	71bb      	strb	r3, [r7, #6]
    char line[20];

    if (!addr) return;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d045      	beq.n	80047de <OLED_DrawIP_Split+0xa2>

    uint8_t o1 = ip4_addr1_16(addr);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	77fb      	strb	r3, [r7, #31]
    uint8_t o2 = ip4_addr2_16(addr);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	77bb      	strb	r3, [r7, #30]
    uint8_t o3 = ip4_addr3_16(addr);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	3302      	adds	r3, #2
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	777b      	strb	r3, [r7, #29]
    uint8_t o4 = ip4_addr4_16(addr);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	3303      	adds	r3, #3
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	773b      	strb	r3, [r7, #28]

    // Вторая строка: первые два октета
    snprintf(line, sizeof(line), "%u.%u.", o1, o2);
 8004770:	7ffa      	ldrb	r2, [r7, #31]
 8004772:	7fbb      	ldrb	r3, [r7, #30]
 8004774:	f107 0008 	add.w	r0, r7, #8
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	4a1a      	ldr	r2, [pc, #104]	@ (80047e8 <OLED_DrawIP_Split+0xac>)
 800477e:	2114      	movs	r1, #20
 8004780:	f01d fdce 	bl	8022320 <sniprintf>
    ssd1306_SetCursor(x, y);
 8004784:	79ba      	ldrb	r2, [r7, #6]
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 ff0c 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8004790:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <OLED_DrawIP_Split+0xb0>)
 8004792:	f107 0008 	add.w	r0, r7, #8
 8004796:	2201      	movs	r2, #1
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800479c:	f001 fede 	bl	800655c <ssd1306_WriteString>

    // Третья строка: последние два октета
    snprintf(line, sizeof(line), "%u.%u", o3, o4);
 80047a0:	7f7a      	ldrb	r2, [r7, #29]
 80047a2:	7f3b      	ldrb	r3, [r7, #28]
 80047a4:	f107 0008 	add.w	r0, r7, #8
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <OLED_DrawIP_Split+0xb4>)
 80047ae:	2114      	movs	r1, #20
 80047b0:	f01d fdb6 	bl	8022320 <sniprintf>
    ssd1306_SetCursor(x, y + Font_7x10.height + 2);
 80047b4:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <OLED_DrawIP_Split+0xb0>)
 80047b6:	785a      	ldrb	r2, [r3, #1]
 80047b8:	79bb      	ldrb	r3, [r7, #6]
 80047ba:	4413      	add	r3, r2
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	3302      	adds	r3, #2
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 feee 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 80047cc:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <OLED_DrawIP_Split+0xb0>)
 80047ce:	f107 0008 	add.w	r0, r7, #8
 80047d2:	2201      	movs	r2, #1
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d8:	f001 fec0 	bl	800655c <ssd1306_WriteString>
 80047dc:	e000      	b.n	80047e0 <OLED_DrawIP_Split+0xa4>
    if (!addr) return;
 80047de:	bf00      	nop
}
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	0802521c 	.word	0x0802521c
 80047ec:	08029584 	.word	0x08029584
 80047f0:	08025224 	.word	0x08025224

080047f4 <OLED_DrawNetInfo>:
 *
 * @param netif  структура сетевого интерфейса LwIP
 * @param startX начальная позиция X
 * @param startY начальная позиция Y
 */
void OLED_DrawNetInfo(struct netif *netif, uint8_t startX, uint8_t startY) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b096      	sub	sp, #88	@ 0x58
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
 8004800:	4613      	mov	r3, r2
 8004802:	70bb      	strb	r3, [r7, #2]
	char buffer[64];
	uint8_t lineY = startY;
 8004804:	78bb      	ldrb	r3, [r7, #2]
 8004806:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ssd1306_Fill(Black);
 800480a:	2000      	movs	r0, #0
 800480c:	f001 fd84 	bl	8006318 <ssd1306_Fill>

    ssd1306_SetCursor(startX, startY);
 8004810:	78ba      	ldrb	r2, [r7, #2]
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f001 fec6 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("NETINF", Font_7x10, White);
 800481c:	4b5b      	ldr	r3, [pc, #364]	@ (800498c <OLED_DrawNetInfo+0x198>)
 800481e:	2201      	movs	r2, #1
 8004820:	9200      	str	r2, [sp, #0]
 8004822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004824:	485a      	ldr	r0, [pc, #360]	@ (8004990 <OLED_DrawNetInfo+0x19c>)
 8004826:	f001 fe99 	bl	800655c <ssd1306_WriteString>

    // Полоса под заголовком
    ssd1306_DrawRectangle(0, startY + Font_7x10.height + 1, SSD1306_ROTATED_WIDTH-1, startY + Font_7x10.height + 2, White);
 800482a:	4b58      	ldr	r3, [pc, #352]	@ (800498c <OLED_DrawNetInfo+0x198>)
 800482c:	785a      	ldrb	r2, [r3, #1]
 800482e:	78bb      	ldrb	r3, [r7, #2]
 8004830:	4413      	add	r3, r2
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3301      	adds	r3, #1
 8004836:	b2d9      	uxtb	r1, r3
 8004838:	4b54      	ldr	r3, [pc, #336]	@ (800498c <OLED_DrawNetInfo+0x198>)
 800483a:	785a      	ldrb	r2, [r3, #1]
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	4413      	add	r3, r2
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3302      	adds	r3, #2
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2201      	movs	r2, #1
 8004848:	9200      	str	r2, [sp, #0]
 800484a:	223f      	movs	r2, #63	@ 0x3f
 800484c:	2000      	movs	r0, #0
 800484e:	f001 ffb6 	bl	80067be <ssd1306_DrawRectangle>

    // IP
    lineY = startY + Font_7x10.height + 6;
 8004852:	4b4e      	ldr	r3, [pc, #312]	@ (800498c <OLED_DrawNetInfo+0x198>)
 8004854:	785a      	ldrb	r2, [r3, #1]
 8004856:	78bb      	ldrb	r3, [r7, #2]
 8004858:	4413      	add	r3, r2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3306      	adds	r3, #6
 800485e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004862:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fe9c 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", Font_7x10, White);
 8004870:	4b46      	ldr	r3, [pc, #280]	@ (800498c <OLED_DrawNetInfo+0x198>)
 8004872:	2201      	movs	r2, #1
 8004874:	9200      	str	r2, [sp, #0]
 8004876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004878:	4846      	ldr	r0, [pc, #280]	@ (8004994 <OLED_DrawNetInfo+0x1a0>)
 800487a:	f001 fe6f 	bl	800655c <ssd1306_WriteString>
    OLED_DrawIP_Split(startX , lineY + Font_7x10.height + 2, netif_ip4_addr(netif));
 800487e:	4b43      	ldr	r3, [pc, #268]	@ (800498c <OLED_DrawNetInfo+0x198>)
 8004880:	785a      	ldrb	r2, [r3, #1]
 8004882:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004886:	4413      	add	r3, r2
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3302      	adds	r3, #2
 800488c:	b2d9      	uxtb	r1, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1d1a      	adds	r2, r3, #4
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff51 	bl	800473c <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 800489a:	4b3c      	ldr	r3, [pc, #240]	@ (800498c <OLED_DrawNetInfo+0x198>)
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	3301      	adds	r3, #1
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	0052      	lsls	r2, r2, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048ae:	4413      	add	r3, r2
 80048b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 80048b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048b8:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80048bc:	2201      	movs	r2, #1
 80048be:	9200      	str	r2, [sp, #0]
 80048c0:	223f      	movs	r2, #63	@ 0x3f
 80048c2:	2000      	movs	r0, #0
 80048c4:	f001 ff7b 	bl	80067be <ssd1306_DrawRectangle>

    // MASK
    lineY += 4;
 80048c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048cc:	3304      	adds	r3, #4
 80048ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 80048d2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 fe64 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("MASK:", Font_7x10, White);
 80048e0:	4b2a      	ldr	r3, [pc, #168]	@ (800498c <OLED_DrawNetInfo+0x198>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	9200      	str	r2, [sp, #0]
 80048e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e8:	482b      	ldr	r0, [pc, #172]	@ (8004998 <OLED_DrawNetInfo+0x1a4>)
 80048ea:	f001 fe37 	bl	800655c <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_netmask(netif));
 80048ee:	4b27      	ldr	r3, [pc, #156]	@ (800498c <OLED_DrawNetInfo+0x198>)
 80048f0:	785a      	ldrb	r2, [r3, #1]
 80048f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048f6:	4413      	add	r3, r2
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	3302      	adds	r3, #2
 80048fc:	b2d9      	uxtb	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff18 	bl	800473c <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 800490c:	4b1f      	ldr	r3, [pc, #124]	@ (800498c <OLED_DrawNetInfo+0x198>)
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	3301      	adds	r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	0052      	lsls	r2, r2, #1
 8004918:	4413      	add	r3, r2
 800491a:	b2da      	uxtb	r2, r3
 800491c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004920:	4413      	add	r3, r2
 8004922:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8004926:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800492a:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 800492e:	2201      	movs	r2, #1
 8004930:	9200      	str	r2, [sp, #0]
 8004932:	223f      	movs	r2, #63	@ 0x3f
 8004934:	2000      	movs	r0, #0
 8004936:	f001 ff42 	bl	80067be <ssd1306_DrawRectangle>

    // GW
    lineY += 4;
 800493a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800493e:	3304      	adds	r3, #4
 8004940:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004944:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fe2b 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("GW:", Font_7x10, White);
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <OLED_DrawNetInfo+0x198>)
 8004954:	2201      	movs	r2, #1
 8004956:	9200      	str	r2, [sp, #0]
 8004958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800495a:	4810      	ldr	r0, [pc, #64]	@ (800499c <OLED_DrawNetInfo+0x1a8>)
 800495c:	f001 fdfe 	bl	800655c <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_gw(netif));
 8004960:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <OLED_DrawNetInfo+0x198>)
 8004962:	785a      	ldrb	r2, [r3, #1]
 8004964:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004968:	4413      	add	r3, r2
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3302      	adds	r3, #2
 800496e:	b2d9      	uxtb	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f103 020c 	add.w	r2, r3, #12
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fedf 	bl	800473c <OLED_DrawIP_Split>
    // отправить буфер на дисплей
    ssd1306_UpdateScreen();
 800497e:	f001 fce3 	bl	8006348 <ssd1306_UpdateScreen>
}
 8004982:	bf00      	nop
 8004984:	3750      	adds	r7, #80	@ 0x50
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08029584 	.word	0x08029584
 8004990:	0802522c 	.word	0x0802522c
 8004994:	08025234 	.word	0x08025234
 8004998:	08025238 	.word	0x08025238
 800499c:	08025240 	.word	0x08025240

080049a0 <__NVIC_SystemReset>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80049a4:	f3bf 8f4f 	dsb	sy
}
 80049a8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <__NVIC_SystemReset+0x24>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049b2:	4904      	ldr	r1, [pc, #16]	@ (80049c4 <__NVIC_SystemReset+0x24>)
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <__NVIC_SystemReset+0x28>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ba:	f3bf 8f4f 	dsb	sy
}
 80049be:	bf00      	nop
    __NOP();
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <__NVIC_SystemReset+0x20>
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	05fa0004 	.word	0x05fa0004

080049cc <OLED_Settings_Init>:
static ConfirmType confirm_type = CONFIRM_NONE;
// Pending values to apply after confirmation

// Инициализация меню
void OLED_Settings_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
    selected_index = 0;
 80049d0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a0c <OLED_Settings_Init+0x40>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    editing_active = false;
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <OLED_Settings_Init+0x44>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <OLED_Settings_Init+0x48>)
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    settings_active = true;
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <OLED_Settings_Init+0x4c>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 80049e8:	f002 f814 	bl	8006a14 <HAL_GetTick>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4a0b      	ldr	r2, [pc, #44]	@ (8004a1c <OLED_Settings_Init+0x50>)
 80049f0:	6013      	str	r3, [r2, #0]
    submenu_active = false;
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <OLED_Settings_Init+0x54>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
    submenu_type = SUBMENU_NONE;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <OLED_Settings_Init+0x58>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
    // Подтягиваем актуальные IP/Mask/GW из сетевого интерфейса
    Sync_From_Netif();
 80049fe:	f000 fa29 	bl	8004e54 <Sync_From_Netif>
    OLED_Settings_Draw();
 8004a02:	f000 fe73 	bl	80056ec <OLED_Settings_Draw>
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20004b20 	.word	0x20004b20
 8004a10:	20004b28 	.word	0x20004b28
 8004a14:	20004b31 	.word	0x20004b31
 8004a18:	20004afc 	.word	0x20004afc
 8004a1c:	20004b2c 	.word	0x20004b2c
 8004a20:	20004b39 	.word	0x20004b39
 8004a24:	20004b38 	.word	0x20004b38

08004a28 <OLED_Draw_Confirm>:

// --- Отображение меню подтверждения ---
static void OLED_Draw_Confirm(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f001 fc72 	bl	8006318 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8004a34:	2340      	movs	r3, #64	@ 0x40
 8004a36:	617b      	str	r3, [r7, #20]

    // Заголовок
    ssd1306_SetCursor(0, 2);
 8004a38:	2102      	movs	r1, #2
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f001 fdb4 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("Confirm", *menu_font, White);
 8004a40:	4b9b      	ldr	r3, [pc, #620]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	9200      	str	r2, [sp, #0]
 8004a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a4a:	489a      	ldr	r0, [pc, #616]	@ (8004cb4 <OLED_Draw_Confirm+0x28c>)
 8004a4c:	f001 fd86 	bl	800655c <ssd1306_WriteString>

    // Подзаголовок и содержимое в зависимости от типа подтверждения
    char line[16];
    switch (confirm_type) {
 8004a50:	4b99      	ldr	r3, [pc, #612]	@ (8004cb8 <OLED_Draw_Confirm+0x290>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	f200 8121 	bhi.w	8004c9e <OLED_Draw_Confirm+0x276>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <OLED_Draw_Confirm+0x3c>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	08004afb 	.word	0x08004afb
 8004a6c:	08004b75 	.word	0x08004b75
 8004a70:	08004bef 	.word	0x08004bef
 8004a74:	08004c09 	.word	0x08004c09
 8004a78:	08004c23 	.word	0x08004c23
 8004a7c:	08004c55 	.word	0x08004c55
        case CONFIRM_APPLY_IP: {
            ssd1306_SetCursor(0, 14);
 8004a80:	210e      	movs	r1, #14
 8004a82:	2000      	movs	r0, #0
 8004a84:	f001 fd90 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply IP", *menu_font, White);
 8004a88:	4b89      	ldr	r3, [pc, #548]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	9200      	str	r2, [sp, #0]
 8004a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a92:	488a      	ldr	r0, [pc, #552]	@ (8004cbc <OLED_Draw_Confirm+0x294>)
 8004a94:	f001 fd62 	bl	800655c <ssd1306_WriteString>

            // Показ значения IP в две строки (192.168. / x.y)
            snprintf(line, sizeof(line), "%d.%d.", last_ip[0], last_ip[1]);
 8004a98:	4b89      	ldr	r3, [pc, #548]	@ (8004cc0 <OLED_Draw_Confirm+0x298>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b88      	ldr	r3, [pc, #544]	@ (8004cc0 <OLED_Draw_Confirm+0x298>)
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	1d38      	adds	r0, r7, #4
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	4a86      	ldr	r2, [pc, #536]	@ (8004cc4 <OLED_Draw_Confirm+0x29c>)
 8004aaa:	2110      	movs	r1, #16
 8004aac:	f01d fc38 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004ab0:	211c      	movs	r1, #28
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f001 fd78 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1d38      	adds	r0, r7, #4
 8004abe:	2201      	movs	r2, #1
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac4:	f001 fd4a 	bl	800655c <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_ip[2], last_ip[3]);
 8004ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8004cc0 <OLED_Draw_Confirm+0x298>)
 8004aca:	789b      	ldrb	r3, [r3, #2]
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b7c      	ldr	r3, [pc, #496]	@ (8004cc0 <OLED_Draw_Confirm+0x298>)
 8004ad0:	78db      	ldrb	r3, [r3, #3]
 8004ad2:	1d38      	adds	r0, r7, #4
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8004cc8 <OLED_Draw_Confirm+0x2a0>)
 8004ada:	2110      	movs	r1, #16
 8004adc:	f01d fc20 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004ae0:	2128      	movs	r1, #40	@ 0x28
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f001 fd60 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004ae8:	4b71      	ldr	r3, [pc, #452]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1d38      	adds	r0, r7, #4
 8004aee:	2201      	movs	r2, #1
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af4:	f001 fd32 	bl	800655c <ssd1306_WriteString>
            break;
 8004af8:	e0d2      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_APPLY_MASK: {
            ssd1306_SetCursor(0, 14);
 8004afa:	210e      	movs	r1, #14
 8004afc:	2000      	movs	r0, #0
 8004afe:	f001 fd53 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply msk", *menu_font, White);
 8004b02:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2201      	movs	r2, #1
 8004b08:	9200      	str	r2, [sp, #0]
 8004b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0c:	486f      	ldr	r0, [pc, #444]	@ (8004ccc <OLED_Draw_Confirm+0x2a4>)
 8004b0e:	f001 fd25 	bl	800655c <ssd1306_WriteString>

            snprintf(line, sizeof(line), "%d.%d.", last_mask[0], last_mask[1]);
 8004b12:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <OLED_Draw_Confirm+0x2a8>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd0 <OLED_Draw_Confirm+0x2a8>)
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	1d38      	adds	r0, r7, #4
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	4a68      	ldr	r2, [pc, #416]	@ (8004cc4 <OLED_Draw_Confirm+0x29c>)
 8004b24:	2110      	movs	r1, #16
 8004b26:	f01d fbfb 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004b2a:	211c      	movs	r1, #28
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f001 fd3b 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004b32:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1d38      	adds	r0, r7, #4
 8004b38:	2201      	movs	r2, #1
 8004b3a:	9200      	str	r2, [sp, #0]
 8004b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b3e:	f001 fd0d 	bl	800655c <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_mask[2], last_mask[3]);
 8004b42:	4b63      	ldr	r3, [pc, #396]	@ (8004cd0 <OLED_Draw_Confirm+0x2a8>)
 8004b44:	789b      	ldrb	r3, [r3, #2]
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b61      	ldr	r3, [pc, #388]	@ (8004cd0 <OLED_Draw_Confirm+0x2a8>)
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	1d38      	adds	r0, r7, #4
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	4a5d      	ldr	r2, [pc, #372]	@ (8004cc8 <OLED_Draw_Confirm+0x2a0>)
 8004b54:	2110      	movs	r1, #16
 8004b56:	f01d fbe3 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004b5a:	2128      	movs	r1, #40	@ 0x28
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f001 fd23 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004b62:	4b53      	ldr	r3, [pc, #332]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	1d38      	adds	r0, r7, #4
 8004b68:	2201      	movs	r2, #1
 8004b6a:	9200      	str	r2, [sp, #0]
 8004b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b6e:	f001 fcf5 	bl	800655c <ssd1306_WriteString>
            break;
 8004b72:	e095      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_APPLY_GW: {
            ssd1306_SetCursor(0, 14);
 8004b74:	210e      	movs	r1, #14
 8004b76:	2000      	movs	r0, #0
 8004b78:	f001 fd16 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply GW", *menu_font, White);
 8004b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	9200      	str	r2, [sp, #0]
 8004b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b86:	4853      	ldr	r0, [pc, #332]	@ (8004cd4 <OLED_Draw_Confirm+0x2ac>)
 8004b88:	f001 fce8 	bl	800655c <ssd1306_WriteString>

            snprintf(line, sizeof(line), "%d.%d.", last_gw[0], last_gw[1]);
 8004b8c:	4b52      	ldr	r3, [pc, #328]	@ (8004cd8 <OLED_Draw_Confirm+0x2b0>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b51      	ldr	r3, [pc, #324]	@ (8004cd8 <OLED_Draw_Confirm+0x2b0>)
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	1d38      	adds	r0, r7, #4
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	4a49      	ldr	r2, [pc, #292]	@ (8004cc4 <OLED_Draw_Confirm+0x29c>)
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	f01d fbbe 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004ba4:	211c      	movs	r1, #28
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f001 fcfe 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004bac:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1d38      	adds	r0, r7, #4
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb8:	f001 fcd0 	bl	800655c <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_gw[2], last_gw[3]);
 8004bbc:	4b46      	ldr	r3, [pc, #280]	@ (8004cd8 <OLED_Draw_Confirm+0x2b0>)
 8004bbe:	789b      	ldrb	r3, [r3, #2]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b45      	ldr	r3, [pc, #276]	@ (8004cd8 <OLED_Draw_Confirm+0x2b0>)
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	1d38      	adds	r0, r7, #4
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8004cc8 <OLED_Draw_Confirm+0x2a0>)
 8004bce:	2110      	movs	r1, #16
 8004bd0:	f01d fba6 	bl	8022320 <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004bd4:	2128      	movs	r1, #40	@ 0x28
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f001 fce6 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004bdc:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	1d38      	adds	r0, r7, #4
 8004be2:	2201      	movs	r2, #1
 8004be4:	9200      	str	r2, [sp, #0]
 8004be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be8:	f001 fcb8 	bl	800655c <ssd1306_WriteString>
            break;
 8004bec:	e058      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_DHCP_ENABLE: {
            ssd1306_SetCursor(0, 14);
 8004bee:	210e      	movs	r1, #14
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f001 fcd9 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("DHCP on", *menu_font, White);
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	9200      	str	r2, [sp, #0]
 8004bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c00:	4836      	ldr	r0, [pc, #216]	@ (8004cdc <OLED_Draw_Confirm+0x2b4>)
 8004c02:	f001 fcab 	bl	800655c <ssd1306_WriteString>
            break;
 8004c06:	e04b      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_DHCP_DISABLE: {
            ssd1306_SetCursor(0, 14);
 8004c08:	210e      	movs	r1, #14
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f001 fccc 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("DHCP off", *menu_font, White);
 8004c10:	4b27      	ldr	r3, [pc, #156]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1a:	4831      	ldr	r0, [pc, #196]	@ (8004ce0 <OLED_Draw_Confirm+0x2b8>)
 8004c1c:	f001 fc9e 	bl	800655c <ssd1306_WriteString>
            break;
 8004c20:	e03e      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_RESET_MCU: {
            ssd1306_SetCursor(0, 14);
 8004c22:	210e      	movs	r1, #14
 8004c24:	2000      	movs	r0, #0
 8004c26:	f001 fcbf 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("MCU will", *menu_font, White);
 8004c2a:	4b21      	ldr	r3, [pc, #132]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	9200      	str	r2, [sp, #0]
 8004c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c34:	482b      	ldr	r0, [pc, #172]	@ (8004ce4 <OLED_Draw_Confirm+0x2bc>)
 8004c36:	f001 fc91 	bl	800655c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 28);
 8004c3a:	211c      	movs	r1, #28
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f001 fcb3 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("reboot", *menu_font, White);
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	9200      	str	r2, [sp, #0]
 8004c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c4c:	4826      	ldr	r0, [pc, #152]	@ (8004ce8 <OLED_Draw_Confirm+0x2c0>)
 8004c4e:	f001 fc85 	bl	800655c <ssd1306_WriteString>
            break;
 8004c52:	e025      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_FACTORY_RESET: {
            ssd1306_SetCursor(0, 14);
 8004c54:	210e      	movs	r1, #14
 8004c56:	2000      	movs	r0, #0
 8004c58:	f001 fca6 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("Reset to", *menu_font, White);
 8004c5c:	4b14      	ldr	r3, [pc, #80]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	9200      	str	r2, [sp, #0]
 8004c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c66:	4821      	ldr	r0, [pc, #132]	@ (8004cec <OLED_Draw_Confirm+0x2c4>)
 8004c68:	f001 fc78 	bl	800655c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 28);
 8004c6c:	211c      	movs	r1, #28
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f001 fc9a 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("factory", *menu_font, White);
 8004c74:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	9200      	str	r2, [sp, #0]
 8004c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c7e:	481c      	ldr	r0, [pc, #112]	@ (8004cf0 <OLED_Draw_Confirm+0x2c8>)
 8004c80:	f001 fc6c 	bl	800655c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 40);
 8004c84:	2128      	movs	r1, #40	@ 0x28
 8004c86:	2000      	movs	r0, #0
 8004c88:	f001 fc8e 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString("settings", *menu_font, White);
 8004c8c:	4b08      	ldr	r3, [pc, #32]	@ (8004cb0 <OLED_Draw_Confirm+0x288>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	9200      	str	r2, [sp, #0]
 8004c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c96:	4817      	ldr	r0, [pc, #92]	@ (8004cf4 <OLED_Draw_Confirm+0x2cc>)
 8004c98:	f001 fc60 	bl	800655c <ssd1306_WriteString>
            break;
 8004c9c:	e000      	b.n	8004ca0 <OLED_Draw_Confirm+0x278>
        }
        default:
            break;
 8004c9e:	bf00      	nop
    }

    OLED_Draw_YesNo();
 8004ca0:	f000 f940 	bl	8004f24 <OLED_Draw_YesNo>

    ssd1306_UpdateScreen();
 8004ca4:	f001 fb50 	bl	8006348 <ssd1306_UpdateScreen>
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200000a4 	.word	0x200000a4
 8004cb4:	0802527c 	.word	0x0802527c
 8004cb8:	20004b40 	.word	0x20004b40
 8004cbc:	08025284 	.word	0x08025284
 8004cc0:	2000007c 	.word	0x2000007c
 8004cc4:	08025290 	.word	0x08025290
 8004cc8:	08025298 	.word	0x08025298
 8004ccc:	080252a0 	.word	0x080252a0
 8004cd0:	20000080 	.word	0x20000080
 8004cd4:	080252ac 	.word	0x080252ac
 8004cd8:	20000084 	.word	0x20000084
 8004cdc:	080252b8 	.word	0x080252b8
 8004ce0:	080252c0 	.word	0x080252c0
 8004ce4:	080252cc 	.word	0x080252cc
 8004ce8:	080252d8 	.word	0x080252d8
 8004cec:	080252e0 	.word	0x080252e0
 8004cf0:	080252ec 	.word	0x080252ec
 8004cf4:	080252f4 	.word	0x080252f4

08004cf8 <OLED_Draw_Submenu>:

// --- Рисование подменю (2 варианта) ---
static void OLED_Draw_Submenu(void)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08b      	sub	sp, #44	@ 0x2c
 8004cfc:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f001 fb0a 	bl	8006318 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8004d04:	2340      	movs	r3, #64	@ 0x40
 8004d06:	613b      	str	r3, [r7, #16]

    const char *title = (submenu_type == SUBMENU_DHCP) ? "DHCP" : "Rotation";
 8004d08:	4b49      	ldr	r3, [pc, #292]	@ (8004e30 <OLED_Draw_Submenu+0x138>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <OLED_Draw_Submenu+0x1c>
 8004d10:	4b48      	ldr	r3, [pc, #288]	@ (8004e34 <OLED_Draw_Submenu+0x13c>)
 8004d12:	e000      	b.n	8004d16 <OLED_Draw_Submenu+0x1e>
 8004d14:	4b48      	ldr	r3, [pc, #288]	@ (8004e38 <OLED_Draw_Submenu+0x140>)
 8004d16:	60fb      	str	r3, [r7, #12]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	0fda      	lsrs	r2, r3, #31
 8004d1c:	4413      	add	r3, r2
 8004d1e:	105b      	asrs	r3, r3, #1
 8004d20:	461c      	mov	r4, r3
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fb fa5a 	bl	80001dc <strlen>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b43      	ldr	r3, [pc, #268]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	0fda      	lsrs	r2, r3, #31
 8004d38:	4413      	add	r3, r2
 8004d3a:	105b      	asrs	r3, r3, #1
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	4423      	add	r3, r4
 8004d40:	61fb      	str	r3, [r7, #28]
    if (title_x < 0) title_x = 0;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da01      	bge.n	8004d4c <OLED_Draw_Submenu+0x54>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fc28 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 8004d58:	4b38      	ldr	r3, [pc, #224]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	9200      	str	r2, [sp, #0]
 8004d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 fbfa 	bl	800655c <ssd1306_WriteString>

    const char *opt0 = (submenu_type == SUBMENU_DHCP) ? "Enable" : "0 deg";
 8004d68:	4b31      	ldr	r3, [pc, #196]	@ (8004e30 <OLED_Draw_Submenu+0x138>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <OLED_Draw_Submenu+0x7c>
 8004d70:	4b33      	ldr	r3, [pc, #204]	@ (8004e40 <OLED_Draw_Submenu+0x148>)
 8004d72:	e000      	b.n	8004d76 <OLED_Draw_Submenu+0x7e>
 8004d74:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <OLED_Draw_Submenu+0x14c>)
 8004d76:	60bb      	str	r3, [r7, #8]
    const char *opt1 = (submenu_type == SUBMENU_DHCP) ? "Disable" : "180 deg";
 8004d78:	4b2d      	ldr	r3, [pc, #180]	@ (8004e30 <OLED_Draw_Submenu+0x138>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <OLED_Draw_Submenu+0x8c>
 8004d80:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <OLED_Draw_Submenu+0x150>)
 8004d82:	e000      	b.n	8004d86 <OLED_Draw_Submenu+0x8e>
 8004d84:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <OLED_Draw_Submenu+0x154>)
 8004d86:	607b      	str	r3, [r7, #4]

    int y = 20;
 8004d88:	2314      	movs	r3, #20
 8004d8a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 2; i++) {
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e044      	b.n	8004e1c <OLED_Draw_Submenu+0x124>
        const char *label = (i == 0) ? opt0 : opt1;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <OLED_Draw_Submenu+0xa4>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	e000      	b.n	8004d9e <OLED_Draw_Submenu+0xa6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
        if (i == submenu_index) {
 8004da0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e50 <OLED_Draw_Submenu+0x158>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d11e      	bne.n	8004de8 <OLED_Draw_Submenu+0xf0>
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b2d9      	uxtb	r1, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4b21      	ldr	r3, [pc, #132]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	9000      	str	r0, [sp, #0]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f001 fd63 	bl	8006890 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	2002      	movs	r0, #2
 8004dd2:	f001 fbe9 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)label, *menu_font, Black);
 8004dd6:	4b19      	ldr	r3, [pc, #100]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	9200      	str	r2, [sp, #0]
 8004dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f001 fbbb 	bl	800655c <ssd1306_WriteString>
 8004de6:	e00d      	b.n	8004e04 <OLED_Draw_Submenu+0x10c>
        } else {
            ssd1306_SetCursor(2, y);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	4619      	mov	r1, r3
 8004dee:	2002      	movs	r0, #2
 8004df0:	f001 fbda 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)label, *menu_font, White);
 8004df4:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	9200      	str	r2, [sp, #0]
 8004dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dfe:	6838      	ldr	r0, [r7, #0]
 8004e00:	f001 fbac 	bl	800655c <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <OLED_Draw_Submenu+0x144>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	4413      	add	r3, r2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4413      	add	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 2; i++) {
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	ddb7      	ble.n	8004d92 <OLED_Draw_Submenu+0x9a>
    }


    ssd1306_UpdateScreen();
 8004e22:	f001 fa91 	bl	8006348 <ssd1306_UpdateScreen>
}
 8004e26:	bf00      	nop
 8004e28:	3724      	adds	r7, #36	@ 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20004b38 	.word	0x20004b38
 8004e34:	08025258 	.word	0x08025258
 8004e38:	08025300 	.word	0x08025300
 8004e3c:	200000a4 	.word	0x200000a4
 8004e40:	0802530c 	.word	0x0802530c
 8004e44:	08025314 	.word	0x08025314
 8004e48:	0802531c 	.word	0x0802531c
 8004e4c:	08025324 	.word	0x08025324
 8004e50:	20004b3c 	.word	0x20004b3c

08004e54 <Sync_From_Netif>:

// Синхронизация last_ip/mask/gw из текущего состояния netif
static void Sync_From_Netif(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
    const ip4_addr_t *a_ip = netif_ip4_addr(&gnetif);
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f0c <Sync_From_Netif+0xb8>)
 8004e5c:	60fb      	str	r3, [r7, #12]
    const ip4_addr_t *a_mask = netif_ip4_netmask(&gnetif);
 8004e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f10 <Sync_From_Netif+0xbc>)
 8004e60:	60bb      	str	r3, [r7, #8]
    const ip4_addr_t *a_gw = netif_ip4_gw(&gnetif);
 8004e62:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <Sync_From_Netif+0xc0>)
 8004e64:	607b      	str	r3, [r7, #4]

    if (a_ip && a_ip->addr != 0) {
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d016      	beq.n	8004e9a <Sync_From_Netif+0x46>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d012      	beq.n	8004e9a <Sync_From_Netif+0x46>
        last_ip[0] = ip4_addr1_16(a_ip);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b27      	ldr	r3, [pc, #156]	@ (8004f18 <Sync_From_Netif+0xc4>)
 8004e7a:	701a      	strb	r2, [r3, #0]
        last_ip[1] = ip4_addr2_16(a_ip);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <Sync_From_Netif+0xc4>)
 8004e84:	705a      	strb	r2, [r3, #1]
        last_ip[2] = ip4_addr3_16(a_ip);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3302      	adds	r3, #2
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	4b22      	ldr	r3, [pc, #136]	@ (8004f18 <Sync_From_Netif+0xc4>)
 8004e8e:	709a      	strb	r2, [r3, #2]
        last_ip[3] = ip4_addr4_16(a_ip);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3303      	adds	r3, #3
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <Sync_From_Netif+0xc4>)
 8004e98:	70da      	strb	r2, [r3, #3]
    }
    if (a_mask && a_mask->addr != 0) {
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d016      	beq.n	8004ece <Sync_From_Netif+0x7a>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <Sync_From_Netif+0x7a>
        last_mask[0] = ip4_addr1_16(a_mask);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <Sync_From_Netif+0xc8>)
 8004eae:	701a      	strb	r2, [r3, #0]
        last_mask[1] = ip4_addr2_16(a_mask);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <Sync_From_Netif+0xc8>)
 8004eb8:	705a      	strb	r2, [r3, #1]
        last_mask[2] = ip4_addr3_16(a_mask);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	4b16      	ldr	r3, [pc, #88]	@ (8004f1c <Sync_From_Netif+0xc8>)
 8004ec2:	709a      	strb	r2, [r3, #2]
        last_mask[3] = ip4_addr4_16(a_mask);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3303      	adds	r3, #3
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	4b14      	ldr	r3, [pc, #80]	@ (8004f1c <Sync_From_Netif+0xc8>)
 8004ecc:	70da      	strb	r2, [r3, #3]
    }
    if (a_gw && a_gw->addr != 0) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <Sync_From_Netif+0xae>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <Sync_From_Netif+0xae>
        last_gw[0] = ip4_addr1_16(a_gw);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <Sync_From_Netif+0xcc>)
 8004ee2:	701a      	strb	r2, [r3, #0]
        last_gw[1] = ip4_addr2_16(a_gw);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <Sync_From_Netif+0xcc>)
 8004eec:	705a      	strb	r2, [r3, #1]
        last_gw[2] = ip4_addr3_16(a_gw);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <Sync_From_Netif+0xcc>)
 8004ef6:	709a      	strb	r2, [r3, #2]
        last_gw[3] = ip4_addr4_16(a_gw);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3303      	adds	r3, #3
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <Sync_From_Netif+0xcc>)
 8004f00:	70da      	strb	r2, [r3, #3]
    }
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	20004f80 	.word	0x20004f80
 8004f10:	20004f84 	.word	0x20004f84
 8004f14:	20004f88 	.word	0x20004f88
 8004f18:	2000007c 	.word	0x2000007c
 8004f1c:	20000080 	.word	0x20000080
 8004f20:	20000084 	.word	0x20000084

08004f24 <OLED_Draw_YesNo>:

// Общий рендер для кнопок Да/Нет внизу
static void OLED_Draw_YesNo(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af02      	add	r7, sp, #8
    const uint8_t y = 53;
 8004f2a:	2335      	movs	r3, #53	@ 0x35
 8004f2c:	71fb      	strb	r3, [r7, #7]
    const uint8_t h = (uint8_t)(menu_font->height);
 8004f2e:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <OLED_Draw_YesNo+0xac>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	71bb      	strb	r3, [r7, #6]
    // Убрали рамку, чтобы не перекрывать текст
    if (confirm_selection == 0) {
 8004f36:	4b27      	ldr	r3, [pc, #156]	@ (8004fd4 <OLED_Draw_YesNo+0xb0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d122      	bne.n	8004f84 <OLED_Draw_YesNo+0x60>
        // Yes выделено
        ssd1306_FillRect(0, y, 30, h, White);
 8004f3e:	79bb      	ldrb	r3, [r7, #6]
 8004f40:	79f9      	ldrb	r1, [r7, #7]
 8004f42:	2201      	movs	r2, #1
 8004f44:	9200      	str	r2, [sp, #0]
 8004f46:	221e      	movs	r2, #30
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f001 fca1 	bl	8006890 <ssd1306_FillRect>
        ssd1306_SetCursor(2, y);
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	4619      	mov	r1, r3
 8004f52:	2002      	movs	r0, #2
 8004f54:	f001 fb28 	bl	80065a8 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, Black);
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <OLED_Draw_YesNo+0xac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	9200      	str	r2, [sp, #0]
 8004f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f62:	481d      	ldr	r0, [pc, #116]	@ (8004fd8 <OLED_Draw_YesNo+0xb4>)
 8004f64:	f001 fafa 	bl	800655c <ssd1306_WriteString>

        ssd1306_SetCursor(34, y);
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	2022      	movs	r0, #34	@ 0x22
 8004f6e:	f001 fb1b 	bl	80065a8 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, White);
 8004f72:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <OLED_Draw_YesNo+0xac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7c:	4817      	ldr	r0, [pc, #92]	@ (8004fdc <OLED_Draw_YesNo+0xb8>)
 8004f7e:	f001 faed 	bl	800655c <ssd1306_WriteString>

        ssd1306_FillRect(32, y, 26, h, White);
        ssd1306_SetCursor(34, y);
        ssd1306_WriteString("No", *menu_font, Black);
    }
}
 8004f82:	e021      	b.n	8004fc8 <OLED_Draw_YesNo+0xa4>
        ssd1306_SetCursor(2, y);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	4619      	mov	r1, r3
 8004f88:	2002      	movs	r0, #2
 8004f8a:	f001 fb0d 	bl	80065a8 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, White);
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <OLED_Draw_YesNo+0xac>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	9200      	str	r2, [sp, #0]
 8004f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f98:	480f      	ldr	r0, [pc, #60]	@ (8004fd8 <OLED_Draw_YesNo+0xb4>)
 8004f9a:	f001 fadf 	bl	800655c <ssd1306_WriteString>
        ssd1306_FillRect(32, y, 26, h, White);
 8004f9e:	79bb      	ldrb	r3, [r7, #6]
 8004fa0:	79f9      	ldrb	r1, [r7, #7]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	221a      	movs	r2, #26
 8004fa8:	2020      	movs	r0, #32
 8004faa:	f001 fc71 	bl	8006890 <ssd1306_FillRect>
        ssd1306_SetCursor(34, y);
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	2022      	movs	r0, #34	@ 0x22
 8004fb4:	f001 faf8 	bl	80065a8 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, Black);
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <OLED_Draw_YesNo+0xac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	9200      	str	r2, [sp, #0]
 8004fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc2:	4806      	ldr	r0, [pc, #24]	@ (8004fdc <OLED_Draw_YesNo+0xb8>)
 8004fc4:	f001 faca 	bl	800655c <ssd1306_WriteString>
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200000a4 	.word	0x200000a4
 8004fd4:	20004b34 	.word	0x20004b34
 8004fd8:	0802532c 	.word	0x0802532c
 8004fdc:	08025330 	.word	0x08025330

08004fe0 <OLED_Settings_Back>:

void OLED_Settings_Back(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 8004fe4:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <OLED_Settings_Back+0x64>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d028      	beq.n	800503e <OLED_Settings_Back+0x5e>
    if (confirm_active) {
 8004fec:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <OLED_Settings_Back+0x68>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <OLED_Settings_Back+0x26>
        confirm_active = false;
 8004ff4:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <OLED_Settings_Back+0x68>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
        confirm_type = CONFIRM_NONE;
 8004ffa:	4b14      	ldr	r3, [pc, #80]	@ (800504c <OLED_Settings_Back+0x6c>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8005000:	f000 fb74 	bl	80056ec <OLED_Settings_Draw>
        return;
 8005004:	e01c      	b.n	8005040 <OLED_Settings_Back+0x60>
    }
    if (submenu_active) {
 8005006:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <OLED_Settings_Back+0x70>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <OLED_Settings_Back+0x40>
        submenu_active = false;
 800500e:	4b10      	ldr	r3, [pc, #64]	@ (8005050 <OLED_Settings_Back+0x70>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
        submenu_type = SUBMENU_NONE;
 8005014:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <OLED_Settings_Back+0x74>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 800501a:	f000 fb67 	bl	80056ec <OLED_Settings_Draw>
        return;
 800501e:	e00f      	b.n	8005040 <OLED_Settings_Back+0x60>
    }
    if (editing_active) {
 8005020:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <OLED_Settings_Back+0x78>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <OLED_Settings_Back+0x54>
        editing_active = false;
 8005028:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <OLED_Settings_Back+0x78>)
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 800502e:	f000 fb5d 	bl	80056ec <OLED_Settings_Draw>
        return;
 8005032:	e005      	b.n	8005040 <OLED_Settings_Back+0x60>
    }
    // Если мы в корневом меню — выходим на главную страницу
    OLED_Settings_Exit();
 8005034:	f000 ffb0 	bl	8005f98 <OLED_Settings_Exit>
    OLED_ShowCurrentPage();
 8005038:	f7fe ff1a 	bl	8003e70 <OLED_ShowCurrentPage>
 800503c:	e000      	b.n	8005040 <OLED_Settings_Back+0x60>
    if (!settings_active) return;
 800503e:	bf00      	nop
}
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20004afc 	.word	0x20004afc
 8005048:	20004b31 	.word	0x20004b31
 800504c:	20004b40 	.word	0x20004b40
 8005050:	20004b39 	.word	0x20004b39
 8005054:	20004b38 	.word	0x20004b38
 8005058:	20004b28 	.word	0x20004b28

0800505c <Apply_Network_Settings>:

// --- Применение сетевых настроек в LwIP ---
void Apply_Network_Settings(void)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b089      	sub	sp, #36	@ 0x24
 8005060:	af04      	add	r7, sp, #16
    ip_addr_t ip_addr, netmask, gw;

    IP4_ADDR(&ip_addr, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8005062:	4baa      	ldr	r3, [pc, #680]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	061a      	lsls	r2, r3, #24
 8005068:	4ba8      	ldr	r3, [pc, #672]	@ (800530c <Apply_Network_Settings+0x2b0>)
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	431a      	orrs	r2, r3
 8005070:	4ba6      	ldr	r3, [pc, #664]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005072:	789b      	ldrb	r3, [r3, #2]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	4313      	orrs	r3, r2
 8005078:	4aa4      	ldr	r2, [pc, #656]	@ (800530c <Apply_Network_Settings+0x2b0>)
 800507a:	78d2      	ldrb	r2, [r2, #3]
 800507c:	4313      	orrs	r3, r2
 800507e:	061a      	lsls	r2, r3, #24
 8005080:	4ba2      	ldr	r3, [pc, #648]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	0619      	lsls	r1, r3, #24
 8005086:	4ba1      	ldr	r3, [pc, #644]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	4319      	orrs	r1, r3
 800508e:	4b9f      	ldr	r3, [pc, #636]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005090:	789b      	ldrb	r3, [r3, #2]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	430b      	orrs	r3, r1
 8005096:	499d      	ldr	r1, [pc, #628]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005098:	78c9      	ldrb	r1, [r1, #3]
 800509a:	430b      	orrs	r3, r1
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050a2:	431a      	orrs	r2, r3
 80050a4:	4b99      	ldr	r3, [pc, #612]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	0619      	lsls	r1, r3, #24
 80050aa:	4b98      	ldr	r3, [pc, #608]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	4319      	orrs	r1, r3
 80050b2:	4b96      	ldr	r3, [pc, #600]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	430b      	orrs	r3, r1
 80050ba:	4994      	ldr	r1, [pc, #592]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050bc:	78c9      	ldrb	r1, [r1, #3]
 80050be:	430b      	orrs	r3, r1
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050c6:	431a      	orrs	r2, r3
 80050c8:	4b90      	ldr	r3, [pc, #576]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	0619      	lsls	r1, r3, #24
 80050ce:	4b8f      	ldr	r3, [pc, #572]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	4319      	orrs	r1, r3
 80050d6:	4b8d      	ldr	r3, [pc, #564]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050d8:	789b      	ldrb	r3, [r3, #2]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	430b      	orrs	r3, r1
 80050de:	498b      	ldr	r1, [pc, #556]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80050e0:	78c9      	ldrb	r1, [r1, #3]
 80050e2:	430b      	orrs	r3, r1
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 80050ea:	4b89      	ldr	r3, [pc, #548]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	061a      	lsls	r2, r3, #24
 80050f0:	4b87      	ldr	r3, [pc, #540]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	4b85      	ldr	r3, [pc, #532]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4313      	orrs	r3, r2
 8005100:	4a83      	ldr	r2, [pc, #524]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005102:	78d2      	ldrb	r2, [r2, #3]
 8005104:	4313      	orrs	r3, r2
 8005106:	061a      	lsls	r2, r3, #24
 8005108:	4b81      	ldr	r3, [pc, #516]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	0619      	lsls	r1, r3, #24
 800510e:	4b80      	ldr	r3, [pc, #512]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4319      	orrs	r1, r3
 8005116:	4b7e      	ldr	r3, [pc, #504]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	430b      	orrs	r3, r1
 800511e:	497c      	ldr	r1, [pc, #496]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005120:	78c9      	ldrb	r1, [r1, #3]
 8005122:	430b      	orrs	r3, r1
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800512a:	431a      	orrs	r2, r3
 800512c:	4b78      	ldr	r3, [pc, #480]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	0619      	lsls	r1, r3, #24
 8005132:	4b77      	ldr	r3, [pc, #476]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	4319      	orrs	r1, r3
 800513a:	4b75      	ldr	r3, [pc, #468]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 800513c:	789b      	ldrb	r3, [r3, #2]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	430b      	orrs	r3, r1
 8005142:	4973      	ldr	r1, [pc, #460]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005144:	78c9      	ldrb	r1, [r1, #3]
 8005146:	430b      	orrs	r3, r1
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800514e:	431a      	orrs	r2, r3
 8005150:	4b6f      	ldr	r3, [pc, #444]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	0619      	lsls	r1, r3, #24
 8005156:	4b6e      	ldr	r3, [pc, #440]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	4319      	orrs	r1, r3
 800515e:	4b6c      	ldr	r3, [pc, #432]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005160:	789b      	ldrb	r3, [r3, #2]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	430b      	orrs	r3, r1
 8005166:	496a      	ldr	r1, [pc, #424]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005168:	78c9      	ldrb	r1, [r1, #3]
 800516a:	430b      	orrs	r3, r1
 800516c:	0e1b      	lsrs	r3, r3, #24
 800516e:	4313      	orrs	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8005172:	4b68      	ldr	r3, [pc, #416]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	061a      	lsls	r2, r3, #24
 8005178:	4b66      	ldr	r3, [pc, #408]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	431a      	orrs	r2, r3
 8005180:	4b64      	ldr	r3, [pc, #400]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005182:	789b      	ldrb	r3, [r3, #2]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4313      	orrs	r3, r2
 8005188:	4a62      	ldr	r2, [pc, #392]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 800518a:	78d2      	ldrb	r2, [r2, #3]
 800518c:	4313      	orrs	r3, r2
 800518e:	061a      	lsls	r2, r3, #24
 8005190:	4b60      	ldr	r3, [pc, #384]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	0619      	lsls	r1, r3, #24
 8005196:	4b5f      	ldr	r3, [pc, #380]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	4319      	orrs	r1, r3
 800519e:	4b5d      	ldr	r3, [pc, #372]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	430b      	orrs	r3, r1
 80051a6:	495b      	ldr	r1, [pc, #364]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051a8:	78c9      	ldrb	r1, [r1, #3]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051b2:	431a      	orrs	r2, r3
 80051b4:	4b57      	ldr	r3, [pc, #348]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	0619      	lsls	r1, r3, #24
 80051ba:	4b56      	ldr	r3, [pc, #344]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	4319      	orrs	r1, r3
 80051c2:	4b54      	ldr	r3, [pc, #336]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	430b      	orrs	r3, r1
 80051ca:	4952      	ldr	r1, [pc, #328]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051cc:	78c9      	ldrb	r1, [r1, #3]
 80051ce:	430b      	orrs	r3, r1
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051d6:	431a      	orrs	r2, r3
 80051d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	0619      	lsls	r1, r3, #24
 80051de:	4b4d      	ldr	r3, [pc, #308]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	4319      	orrs	r1, r3
 80051e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	430b      	orrs	r3, r1
 80051ee:	4949      	ldr	r1, [pc, #292]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 80051f0:	78c9      	ldrb	r1, [r1, #3]
 80051f2:	430b      	orrs	r3, r1
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	4313      	orrs	r3, r2
 80051f8:	607b      	str	r3, [r7, #4]

    netif_set_addr(&gnetif, &ip_addr, &netmask, &gw);
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	f107 010c 	add.w	r1, r7, #12
 8005204:	4844      	ldr	r0, [pc, #272]	@ (8005318 <Apply_Network_Settings+0x2bc>)
 8005206:	f010 fae1 	bl	80157cc <netif_set_addr>

    printf("Network settings applied:\n");
 800520a:	4844      	ldr	r0, [pc, #272]	@ (800531c <Apply_Network_Settings+0x2c0>)
 800520c:	f01d f880 	bl	8022310 <puts>
    printf("IP: %d.%d.%d.%d\n", last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8005210:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	4b3d      	ldr	r3, [pc, #244]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	461a      	mov	r2, r3
 800521c:	4b3b      	ldr	r3, [pc, #236]	@ (800530c <Apply_Network_Settings+0x2b0>)
 800521e:	789b      	ldrb	r3, [r3, #2]
 8005220:	4618      	mov	r0, r3
 8005222:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4603      	mov	r3, r0
 800522a:	483d      	ldr	r0, [pc, #244]	@ (8005320 <Apply_Network_Settings+0x2c4>)
 800522c:	f01d f808 	bl	8022240 <iprintf>
    printf("Mask: %d.%d.%d.%d\n", last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8005230:	4b37      	ldr	r3, [pc, #220]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	461a      	mov	r2, r3
 800523c:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 800523e:	789b      	ldrb	r3, [r3, #2]
 8005240:	4618      	mov	r0, r3
 8005242:	4b33      	ldr	r3, [pc, #204]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005244:	78db      	ldrb	r3, [r3, #3]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4603      	mov	r3, r0
 800524a:	4836      	ldr	r0, [pc, #216]	@ (8005324 <Apply_Network_Settings+0x2c8>)
 800524c:	f01c fff8 	bl	8022240 <iprintf>
    printf("GW: %d.%d.%d.%d\n", last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8005250:	4b30      	ldr	r3, [pc, #192]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	4b2f      	ldr	r3, [pc, #188]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	461a      	mov	r2, r3
 800525c:	4b2d      	ldr	r3, [pc, #180]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 800525e:	789b      	ldrb	r3, [r3, #2]
 8005260:	4618      	mov	r0, r3
 8005262:	4b2c      	ldr	r3, [pc, #176]	@ (8005314 <Apply_Network_Settings+0x2b8>)
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4603      	mov	r3, r0
 800526a:	482f      	ldr	r0, [pc, #188]	@ (8005328 <Apply_Network_Settings+0x2cc>)
 800526c:	f01c ffe8 	bl	8022240 <iprintf>

    /* --- сохраняем в backup-регистры --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8005270:	4b26      	ldr	r3, [pc, #152]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	061a      	lsls	r2, r3, #24
 8005276:	4b25      	ldr	r3, [pc, #148]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	431a      	orrs	r2, r3
 800527e:	4b23      	ldr	r3, [pc, #140]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005280:	789b      	ldrb	r3, [r3, #2]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	4313      	orrs	r3, r2
 8005286:	4a21      	ldr	r2, [pc, #132]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005288:	78d2      	ldrb	r2, [r2, #3]
 800528a:	4313      	orrs	r3, r2
 800528c:	061a      	lsls	r2, r3, #24
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	0619      	lsls	r1, r3, #24
 8005294:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <Apply_Network_Settings+0x2b0>)
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4319      	orrs	r1, r3
 800529c:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <Apply_Network_Settings+0x2b0>)
 800529e:	789b      	ldrb	r3, [r3, #2]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	430b      	orrs	r3, r1
 80052a4:	4919      	ldr	r1, [pc, #100]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052a6:	78c9      	ldrb	r1, [r1, #3]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80052b0:	431a      	orrs	r2, r3
 80052b2:	4b16      	ldr	r3, [pc, #88]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	0619      	lsls	r1, r3, #24
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	4319      	orrs	r1, r3
 80052c0:	4b12      	ldr	r3, [pc, #72]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052c2:	789b      	ldrb	r3, [r3, #2]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	430b      	orrs	r3, r1
 80052c8:	4910      	ldr	r1, [pc, #64]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052ca:	78c9      	ldrb	r1, [r1, #3]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80052d4:	431a      	orrs	r2, r3
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	0619      	lsls	r1, r3, #24
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	4319      	orrs	r1, r3
 80052e4:	4b09      	ldr	r3, [pc, #36]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052e6:	789b      	ldrb	r3, [r3, #2]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	4907      	ldr	r1, [pc, #28]	@ (800530c <Apply_Network_Settings+0x2b0>)
 80052ee:	78c9      	ldrb	r1, [r1, #3]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	4313      	orrs	r3, r2
 80052f6:	4a0d      	ldr	r2, [pc, #52]	@ (800532c <Apply_Network_Settings+0x2d0>)
 80052f8:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 80052fa:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	061a      	lsls	r2, r3, #24
 8005300:	4b03      	ldr	r3, [pc, #12]	@ (8005310 <Apply_Network_Settings+0x2b4>)
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	e012      	b.n	8005330 <Apply_Network_Settings+0x2d4>
 800530a:	bf00      	nop
 800530c:	2000007c 	.word	0x2000007c
 8005310:	20000080 	.word	0x20000080
 8005314:	20000084 	.word	0x20000084
 8005318:	20004f7c 	.word	0x20004f7c
 800531c:	08025334 	.word	0x08025334
 8005320:	08025350 	.word	0x08025350
 8005324:	08025364 	.word	0x08025364
 8005328:	08025378 	.word	0x08025378
 800532c:	20002a3c 	.word	0x20002a3c
 8005330:	4b51      	ldr	r3, [pc, #324]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005332:	789b      	ldrb	r3, [r3, #2]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	4313      	orrs	r3, r2
 8005338:	4a4f      	ldr	r2, [pc, #316]	@ (8005478 <Apply_Network_Settings+0x41c>)
 800533a:	78d2      	ldrb	r2, [r2, #3]
 800533c:	4313      	orrs	r3, r2
 800533e:	061a      	lsls	r2, r3, #24
 8005340:	4b4d      	ldr	r3, [pc, #308]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	0619      	lsls	r1, r3, #24
 8005346:	4b4c      	ldr	r3, [pc, #304]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	4319      	orrs	r1, r3
 800534e:	4b4a      	ldr	r3, [pc, #296]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005350:	789b      	ldrb	r3, [r3, #2]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	430b      	orrs	r3, r1
 8005356:	4948      	ldr	r1, [pc, #288]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005358:	78c9      	ldrb	r1, [r1, #3]
 800535a:	430b      	orrs	r3, r1
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005362:	431a      	orrs	r2, r3
 8005364:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	0619      	lsls	r1, r3, #24
 800536a:	4b43      	ldr	r3, [pc, #268]	@ (8005478 <Apply_Network_Settings+0x41c>)
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	4319      	orrs	r1, r3
 8005372:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005374:	789b      	ldrb	r3, [r3, #2]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	430b      	orrs	r3, r1
 800537a:	493f      	ldr	r1, [pc, #252]	@ (8005478 <Apply_Network_Settings+0x41c>)
 800537c:	78c9      	ldrb	r1, [r1, #3]
 800537e:	430b      	orrs	r3, r1
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005386:	431a      	orrs	r2, r3
 8005388:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <Apply_Network_Settings+0x41c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	0619      	lsls	r1, r3, #24
 800538e:	4b3a      	ldr	r3, [pc, #232]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	4319      	orrs	r1, r3
 8005396:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <Apply_Network_Settings+0x41c>)
 8005398:	789b      	ldrb	r3, [r3, #2]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	430b      	orrs	r3, r1
 800539e:	4936      	ldr	r1, [pc, #216]	@ (8005478 <Apply_Network_Settings+0x41c>)
 80053a0:	78c9      	ldrb	r1, [r1, #3]
 80053a2:	430b      	orrs	r3, r1
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	4313      	orrs	r3, r2
 80053a8:	4a34      	ldr	r2, [pc, #208]	@ (800547c <Apply_Network_Settings+0x420>)
 80053aa:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 80053ac:	4b34      	ldr	r3, [pc, #208]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	061a      	lsls	r2, r3, #24
 80053b2:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	431a      	orrs	r2, r3
 80053ba:	4b31      	ldr	r3, [pc, #196]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053bc:	789b      	ldrb	r3, [r3, #2]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	4313      	orrs	r3, r2
 80053c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053c4:	78d2      	ldrb	r2, [r2, #3]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	061a      	lsls	r2, r3, #24
 80053ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	0619      	lsls	r1, r3, #24
 80053d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	4319      	orrs	r1, r3
 80053d8:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	430b      	orrs	r3, r1
 80053e0:	4927      	ldr	r1, [pc, #156]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053e2:	78c9      	ldrb	r1, [r1, #3]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80053ec:	431a      	orrs	r2, r3
 80053ee:	4b24      	ldr	r3, [pc, #144]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	0619      	lsls	r1, r3, #24
 80053f4:	4b22      	ldr	r3, [pc, #136]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	4319      	orrs	r1, r3
 80053fc:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <Apply_Network_Settings+0x424>)
 80053fe:	789b      	ldrb	r3, [r3, #2]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	430b      	orrs	r3, r1
 8005404:	491e      	ldr	r1, [pc, #120]	@ (8005480 <Apply_Network_Settings+0x424>)
 8005406:	78c9      	ldrb	r1, [r1, #3]
 8005408:	430b      	orrs	r3, r1
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005410:	431a      	orrs	r2, r3
 8005412:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <Apply_Network_Settings+0x424>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	0619      	lsls	r1, r3, #24
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <Apply_Network_Settings+0x424>)
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	4319      	orrs	r1, r3
 8005420:	4b17      	ldr	r3, [pc, #92]	@ (8005480 <Apply_Network_Settings+0x424>)
 8005422:	789b      	ldrb	r3, [r3, #2]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	430b      	orrs	r3, r1
 8005428:	4915      	ldr	r1, [pc, #84]	@ (8005480 <Apply_Network_Settings+0x424>)
 800542a:	78c9      	ldrb	r1, [r1, #3]
 800542c:	430b      	orrs	r3, r1
 800542e:	0e1b      	lsrs	r3, r3, #24
 8005430:	4313      	orrs	r3, r2
 8005432:	4a14      	ldr	r2, [pc, #80]	@ (8005484 <Apply_Network_Settings+0x428>)
 8005434:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 8005436:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <Apply_Network_Settings+0x42c>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	4b11      	ldr	r3, [pc, #68]	@ (800548c <Apply_Network_Settings+0x430>)
 8005448:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;  // чтобы main тоже увидел изменение
 800544a:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <Apply_Network_Settings+0x434>)
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]

    /* Сохраняем в backup (используем текущие SNMP community из main) */
    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <Apply_Network_Settings+0x430>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4a0b      	ldr	r2, [pc, #44]	@ (8005484 <Apply_Network_Settings+0x428>)
 8005456:	4909      	ldr	r1, [pc, #36]	@ (800547c <Apply_Network_Settings+0x420>)
 8005458:	480e      	ldr	r0, [pc, #56]	@ (8005494 <Apply_Network_Settings+0x438>)
 800545a:	4c0f      	ldr	r4, [pc, #60]	@ (8005498 <Apply_Network_Settings+0x43c>)
 800545c:	9402      	str	r4, [sp, #8]
 800545e:	4c0f      	ldr	r4, [pc, #60]	@ (800549c <Apply_Network_Settings+0x440>)
 8005460:	9401      	str	r4, [sp, #4]
 8005462:	4c0f      	ldr	r4, [pc, #60]	@ (80054a0 <Apply_Network_Settings+0x444>)
 8005464:	9400      	str	r4, [sp, #0]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	6809      	ldr	r1, [r1, #0]
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	f7fd fe5a 	bl	8003124 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}
 8005478:	20000080 	.word	0x20000080
 800547c:	20002a40 	.word	0x20002a40
 8005480:	20000084 	.word	0x20000084
 8005484:	20002a44 	.word	0x20002a44
 8005488:	200000c0 	.word	0x200000c0
 800548c:	20002a48 	.word	0x20002a48
 8005490:	20002a49 	.word	0x20002a49
 8005494:	20002a3c 	.word	0x20002a3c
 8005498:	20000050 	.word	0x20000050
 800549c:	20000030 	.word	0x20000030
 80054a0:	20000010 	.word	0x20000010

080054a4 <DHCP_Apply>:


// --- Применение DHCP ---
static void DHCP_Apply()
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af04      	add	r7, sp, #16
    if (dhcp_on)
 80054aa:	4b81      	ldr	r3, [pc, #516]	@ (80056b0 <DHCP_Apply+0x20c>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <DHCP_Apply+0x1c>
    {
        dhcp_start(&gnetif);
 80054b2:	4880      	ldr	r0, [pc, #512]	@ (80056b4 <DHCP_Apply+0x210>)
 80054b4:	f017 fe04 	bl	801d0c0 <dhcp_start>
        printf("DHCP enabled\n");
 80054b8:	487f      	ldr	r0, [pc, #508]	@ (80056b8 <DHCP_Apply+0x214>)
 80054ba:	f01c ff29 	bl	8022310 <puts>
 80054be:	e007      	b.n	80054d0 <DHCP_Apply+0x2c>
    }
    else
    {
        dhcp_stop(&gnetif);
 80054c0:	487c      	ldr	r0, [pc, #496]	@ (80056b4 <DHCP_Apply+0x210>)
 80054c2:	f018 fad9 	bl	801da78 <dhcp_stop>
        Apply_Network_Settings();
 80054c6:	f7ff fdc9 	bl	800505c <Apply_Network_Settings>
        printf("DHCP disabled, static IP applied\n");
 80054ca:	487c      	ldr	r0, [pc, #496]	@ (80056bc <DHCP_Apply+0x218>)
 80054cc:	f01c ff20 	bl	8022310 <puts>
    }

    /* --- сохраняем флаг DHCP в backup --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 80054d0:	4b7b      	ldr	r3, [pc, #492]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	061a      	lsls	r2, r3, #24
 80054d6:	4b7a      	ldr	r3, [pc, #488]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	431a      	orrs	r2, r3
 80054de:	4b78      	ldr	r3, [pc, #480]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054e0:	789b      	ldrb	r3, [r3, #2]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	4313      	orrs	r3, r2
 80054e6:	4a76      	ldr	r2, [pc, #472]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054e8:	78d2      	ldrb	r2, [r2, #3]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	4b74      	ldr	r3, [pc, #464]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	0619      	lsls	r1, r3, #24
 80054f4:	4b72      	ldr	r3, [pc, #456]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	4319      	orrs	r1, r3
 80054fc:	4b70      	ldr	r3, [pc, #448]	@ (80056c0 <DHCP_Apply+0x21c>)
 80054fe:	789b      	ldrb	r3, [r3, #2]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	430b      	orrs	r3, r1
 8005504:	496e      	ldr	r1, [pc, #440]	@ (80056c0 <DHCP_Apply+0x21c>)
 8005506:	78c9      	ldrb	r1, [r1, #3]
 8005508:	430b      	orrs	r3, r1
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005510:	431a      	orrs	r2, r3
 8005512:	4b6b      	ldr	r3, [pc, #428]	@ (80056c0 <DHCP_Apply+0x21c>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	0619      	lsls	r1, r3, #24
 8005518:	4b69      	ldr	r3, [pc, #420]	@ (80056c0 <DHCP_Apply+0x21c>)
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	4319      	orrs	r1, r3
 8005520:	4b67      	ldr	r3, [pc, #412]	@ (80056c0 <DHCP_Apply+0x21c>)
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	430b      	orrs	r3, r1
 8005528:	4965      	ldr	r1, [pc, #404]	@ (80056c0 <DHCP_Apply+0x21c>)
 800552a:	78c9      	ldrb	r1, [r1, #3]
 800552c:	430b      	orrs	r3, r1
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005534:	431a      	orrs	r2, r3
 8005536:	4b62      	ldr	r3, [pc, #392]	@ (80056c0 <DHCP_Apply+0x21c>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	0619      	lsls	r1, r3, #24
 800553c:	4b60      	ldr	r3, [pc, #384]	@ (80056c0 <DHCP_Apply+0x21c>)
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	4319      	orrs	r1, r3
 8005544:	4b5e      	ldr	r3, [pc, #376]	@ (80056c0 <DHCP_Apply+0x21c>)
 8005546:	789b      	ldrb	r3, [r3, #2]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	430b      	orrs	r3, r1
 800554c:	495c      	ldr	r1, [pc, #368]	@ (80056c0 <DHCP_Apply+0x21c>)
 800554e:	78c9      	ldrb	r1, [r1, #3]
 8005550:	430b      	orrs	r3, r1
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	4313      	orrs	r3, r2
 8005556:	4a5b      	ldr	r2, [pc, #364]	@ (80056c4 <DHCP_Apply+0x220>)
 8005558:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 800555a:	4b5b      	ldr	r3, [pc, #364]	@ (80056c8 <DHCP_Apply+0x224>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	061a      	lsls	r2, r3, #24
 8005560:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <DHCP_Apply+0x224>)
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	4b57      	ldr	r3, [pc, #348]	@ (80056c8 <DHCP_Apply+0x224>)
 800556a:	789b      	ldrb	r3, [r3, #2]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4313      	orrs	r3, r2
 8005570:	4a55      	ldr	r2, [pc, #340]	@ (80056c8 <DHCP_Apply+0x224>)
 8005572:	78d2      	ldrb	r2, [r2, #3]
 8005574:	4313      	orrs	r3, r2
 8005576:	061a      	lsls	r2, r3, #24
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <DHCP_Apply+0x224>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	0619      	lsls	r1, r3, #24
 800557e:	4b52      	ldr	r3, [pc, #328]	@ (80056c8 <DHCP_Apply+0x224>)
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	4319      	orrs	r1, r3
 8005586:	4b50      	ldr	r3, [pc, #320]	@ (80056c8 <DHCP_Apply+0x224>)
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	430b      	orrs	r3, r1
 800558e:	494e      	ldr	r1, [pc, #312]	@ (80056c8 <DHCP_Apply+0x224>)
 8005590:	78c9      	ldrb	r1, [r1, #3]
 8005592:	430b      	orrs	r3, r1
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800559a:	431a      	orrs	r2, r3
 800559c:	4b4a      	ldr	r3, [pc, #296]	@ (80056c8 <DHCP_Apply+0x224>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	0619      	lsls	r1, r3, #24
 80055a2:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <DHCP_Apply+0x224>)
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	4319      	orrs	r1, r3
 80055aa:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <DHCP_Apply+0x224>)
 80055ac:	789b      	ldrb	r3, [r3, #2]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	430b      	orrs	r3, r1
 80055b2:	4945      	ldr	r1, [pc, #276]	@ (80056c8 <DHCP_Apply+0x224>)
 80055b4:	78c9      	ldrb	r1, [r1, #3]
 80055b6:	430b      	orrs	r3, r1
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80055be:	431a      	orrs	r2, r3
 80055c0:	4b41      	ldr	r3, [pc, #260]	@ (80056c8 <DHCP_Apply+0x224>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	0619      	lsls	r1, r3, #24
 80055c6:	4b40      	ldr	r3, [pc, #256]	@ (80056c8 <DHCP_Apply+0x224>)
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	4319      	orrs	r1, r3
 80055ce:	4b3e      	ldr	r3, [pc, #248]	@ (80056c8 <DHCP_Apply+0x224>)
 80055d0:	789b      	ldrb	r3, [r3, #2]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	430b      	orrs	r3, r1
 80055d6:	493c      	ldr	r1, [pc, #240]	@ (80056c8 <DHCP_Apply+0x224>)
 80055d8:	78c9      	ldrb	r1, [r1, #3]
 80055da:	430b      	orrs	r3, r1
 80055dc:	0e1b      	lsrs	r3, r3, #24
 80055de:	4313      	orrs	r3, r2
 80055e0:	4a3a      	ldr	r2, [pc, #232]	@ (80056cc <DHCP_Apply+0x228>)
 80055e2:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 80055e4:	4b3a      	ldr	r3, [pc, #232]	@ (80056d0 <DHCP_Apply+0x22c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	061a      	lsls	r2, r3, #24
 80055ea:	4b39      	ldr	r3, [pc, #228]	@ (80056d0 <DHCP_Apply+0x22c>)
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	431a      	orrs	r2, r3
 80055f2:	4b37      	ldr	r3, [pc, #220]	@ (80056d0 <DHCP_Apply+0x22c>)
 80055f4:	789b      	ldrb	r3, [r3, #2]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	4313      	orrs	r3, r2
 80055fa:	4a35      	ldr	r2, [pc, #212]	@ (80056d0 <DHCP_Apply+0x22c>)
 80055fc:	78d2      	ldrb	r2, [r2, #3]
 80055fe:	4313      	orrs	r3, r2
 8005600:	061a      	lsls	r2, r3, #24
 8005602:	4b33      	ldr	r3, [pc, #204]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	0619      	lsls	r1, r3, #24
 8005608:	4b31      	ldr	r3, [pc, #196]	@ (80056d0 <DHCP_Apply+0x22c>)
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	4319      	orrs	r1, r3
 8005610:	4b2f      	ldr	r3, [pc, #188]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005612:	789b      	ldrb	r3, [r3, #2]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	430b      	orrs	r3, r1
 8005618:	492d      	ldr	r1, [pc, #180]	@ (80056d0 <DHCP_Apply+0x22c>)
 800561a:	78c9      	ldrb	r1, [r1, #3]
 800561c:	430b      	orrs	r3, r1
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005624:	431a      	orrs	r2, r3
 8005626:	4b2a      	ldr	r3, [pc, #168]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	0619      	lsls	r1, r3, #24
 800562c:	4b28      	ldr	r3, [pc, #160]	@ (80056d0 <DHCP_Apply+0x22c>)
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	4319      	orrs	r1, r3
 8005634:	4b26      	ldr	r3, [pc, #152]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005636:	789b      	ldrb	r3, [r3, #2]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	430b      	orrs	r3, r1
 800563c:	4924      	ldr	r1, [pc, #144]	@ (80056d0 <DHCP_Apply+0x22c>)
 800563e:	78c9      	ldrb	r1, [r1, #3]
 8005640:	430b      	orrs	r3, r1
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005648:	431a      	orrs	r2, r3
 800564a:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <DHCP_Apply+0x22c>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	0619      	lsls	r1, r3, #24
 8005650:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	4319      	orrs	r1, r3
 8005658:	4b1d      	ldr	r3, [pc, #116]	@ (80056d0 <DHCP_Apply+0x22c>)
 800565a:	789b      	ldrb	r3, [r3, #2]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	430b      	orrs	r3, r1
 8005660:	491b      	ldr	r1, [pc, #108]	@ (80056d0 <DHCP_Apply+0x22c>)
 8005662:	78c9      	ldrb	r1, [r1, #3]
 8005664:	430b      	orrs	r3, r1
 8005666:	0e1b      	lsrs	r3, r3, #24
 8005668:	4313      	orrs	r3, r2
 800566a:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <DHCP_Apply+0x230>)
 800566c:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <DHCP_Apply+0x20c>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <DHCP_Apply+0x234>)
 8005680:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;
 8005682:	4b16      	ldr	r3, [pc, #88]	@ (80056dc <DHCP_Apply+0x238>)
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]

    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005688:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <DHCP_Apply+0x234>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	4a11      	ldr	r2, [pc, #68]	@ (80056d4 <DHCP_Apply+0x230>)
 800568e:	490f      	ldr	r1, [pc, #60]	@ (80056cc <DHCP_Apply+0x228>)
 8005690:	480c      	ldr	r0, [pc, #48]	@ (80056c4 <DHCP_Apply+0x220>)
 8005692:	4c13      	ldr	r4, [pc, #76]	@ (80056e0 <DHCP_Apply+0x23c>)
 8005694:	9402      	str	r4, [sp, #8]
 8005696:	4c13      	ldr	r4, [pc, #76]	@ (80056e4 <DHCP_Apply+0x240>)
 8005698:	9401      	str	r4, [sp, #4]
 800569a:	4c13      	ldr	r4, [pc, #76]	@ (80056e8 <DHCP_Apply+0x244>)
 800569c:	9400      	str	r4, [sp, #0]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	6809      	ldr	r1, [r1, #0]
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	f7fd fd3e 	bl	8003124 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 80056a8:	bf00      	nop
 80056aa:	3704      	adds	r7, #4
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd90      	pop	{r4, r7, pc}
 80056b0:	200000c0 	.word	0x200000c0
 80056b4:	20004f7c 	.word	0x20004f7c
 80056b8:	0802538c 	.word	0x0802538c
 80056bc:	0802539c 	.word	0x0802539c
 80056c0:	2000007c 	.word	0x2000007c
 80056c4:	20002a3c 	.word	0x20002a3c
 80056c8:	20000080 	.word	0x20000080
 80056cc:	20002a40 	.word	0x20002a40
 80056d0:	20000084 	.word	0x20000084
 80056d4:	20002a44 	.word	0x20002a44
 80056d8:	20002a48 	.word	0x20002a48
 80056dc:	20002a49 	.word	0x20002a49
 80056e0:	20000050 	.word	0x20000050
 80056e4:	20000030 	.word	0x20000030
 80056e8:	20000010 	.word	0x20000010

080056ec <OLED_Settings_Draw>:
    }
}

// Рисуем меню
void OLED_Settings_Draw(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af02      	add	r7, sp, #8
    if(confirm_active) {
 80056f2:	4b43      	ldr	r3, [pc, #268]	@ (8005800 <OLED_Settings_Draw+0x114>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <OLED_Settings_Draw+0x14>
        OLED_Draw_Confirm();
 80056fa:	f7ff f995 	bl	8004a28 <OLED_Draw_Confirm>
        return;
 80056fe:	e07c      	b.n	80057fa <OLED_Settings_Draw+0x10e>
    }
    if (submenu_active) {
 8005700:	4b40      	ldr	r3, [pc, #256]	@ (8005804 <OLED_Settings_Draw+0x118>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <OLED_Settings_Draw+0x22>
        OLED_Draw_Submenu();
 8005708:	f7ff faf6 	bl	8004cf8 <OLED_Draw_Submenu>
        return;
 800570c:	e075      	b.n	80057fa <OLED_Settings_Draw+0x10e>
    }

    ssd1306_Fill(Black);
 800570e:	2000      	movs	r0, #0
 8005710:	f000 fe02 	bl	8006318 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8005714:	2340      	movs	r3, #64	@ 0x40
 8005716:	613b      	str	r3, [r7, #16]

    // Заголовок
    const char title[] = "Settings";
 8005718:	4a3b      	ldr	r2, [pc, #236]	@ (8005808 <OLED_Settings_Draw+0x11c>)
 800571a:	1d3b      	adds	r3, r7, #4
 800571c:	ca07      	ldmia	r2, {r0, r1, r2}
 800571e:	c303      	stmia	r3!, {r0, r1}
 8005720:	701a      	strb	r2, [r3, #0]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	0fda      	lsrs	r2, r3, #31
 8005726:	4413      	add	r3, r2
 8005728:	105b      	asrs	r3, r3, #1
 800572a:	461a      	mov	r2, r3
 800572c:	4b37      	ldr	r3, [pc, #220]	@ (800580c <OLED_Settings_Draw+0x120>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	61fb      	str	r3, [r7, #28]
    if(title_x < 0) title_x = 0;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da01      	bge.n	8005742 <OLED_Settings_Draw+0x56>
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2102      	movs	r1, #2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 ff2d 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 800574e:	4b2f      	ldr	r3, [pc, #188]	@ (800580c <OLED_Settings_Draw+0x120>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1d38      	adds	r0, r7, #4
 8005754:	2201      	movs	r2, #1
 8005756:	9200      	str	r2, [sp, #0]
 8005758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800575a:	f000 feff 	bl	800655c <ssd1306_WriteString>

    // Список пунктов
    int y = 16;
 800575e:	2310      	movs	r3, #16
 8005760:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e043      	b.n	80057f0 <OLED_Settings_Draw+0x104>
    {
        if(i == selected_index)
 8005768:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <OLED_Settings_Draw+0x124>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	429a      	cmp	r2, r3
 8005770:	d121      	bne.n	80057b6 <OLED_Settings_Draw+0xca>
        {
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b2d9      	uxtb	r1, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b23      	ldr	r3, [pc, #140]	@ (800580c <OLED_Settings_Draw+0x120>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	3302      	adds	r3, #2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2001      	movs	r0, #1
 800578a:	9000      	str	r0, [sp, #0]
 800578c:	2000      	movs	r0, #0
 800578e:	f001 f87f 	bl	8006890 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	2002      	movs	r0, #2
 800579a:	f000 ff05 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, Black);
 800579e:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <OLED_Settings_Draw+0x128>)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80057a6:	4b19      	ldr	r3, [pc, #100]	@ (800580c <OLED_Settings_Draw+0x120>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	9200      	str	r2, [sp, #0]
 80057ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b0:	f000 fed4 	bl	800655c <ssd1306_WriteString>
 80057b4:	e010      	b.n	80057d8 <OLED_Settings_Draw+0xec>
        }
        else
        {
            ssd1306_SetCursor(2, y);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	2002      	movs	r0, #2
 80057be:	f000 fef3 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, White);
 80057c2:	4a14      	ldr	r2, [pc, #80]	@ (8005814 <OLED_Settings_Draw+0x128>)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80057ca:	4b10      	ldr	r3, [pc, #64]	@ (800580c <OLED_Settings_Draw+0x120>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	9200      	str	r2, [sp, #0]
 80057d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d4:	f000 fec2 	bl	800655c <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <OLED_Settings_Draw+0x120>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	461a      	mov	r2, r3
 80057e0:	2303      	movs	r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d9b8      	bls.n	8005768 <OLED_Settings_Draw+0x7c>
    }

    ssd1306_UpdateScreen();
 80057f6:	f000 fda7 	bl	8006348 <ssd1306_UpdateScreen>
}
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20004b31 	.word	0x20004b31
 8005804:	20004b39 	.word	0x20004b39
 8005808:	080253cc 	.word	0x080253cc
 800580c:	200000a4 	.word	0x200000a4
 8005810:	20004b20 	.word	0x20004b20
 8005814:	20000088 	.word	0x20000088

08005818 <OLED_Draw_Edit>:

// --- Отображение IP/Mask/GW при редактировании ---
static void OLED_Draw_Edit()
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b08d      	sub	sp, #52	@ 0x34
 800581c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800581e:	2000      	movs	r0, #0
 8005820:	f000 fd7a 	bl	8006318 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8005824:	2340      	movs	r3, #64	@ 0x40
 8005826:	617b      	str	r3, [r7, #20]
    const int SH = SSD1306_ROTATED_HEIGHT;
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	613b      	str	r3, [r7, #16]

    // Заголовок по центру
    int title_x = (SW / 2) - ((int)strlen(edit_title) * menu_font->width / 2);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	0fda      	lsrs	r2, r3, #31
 8005830:	4413      	add	r3, r2
 8005832:	105b      	asrs	r3, r3, #1
 8005834:	461c      	mov	r4, r3
 8005836:	4866      	ldr	r0, [pc, #408]	@ (80059d0 <OLED_Draw_Edit+0x1b8>)
 8005838:	f7fa fcd0 	bl	80001dc <strlen>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	4b64      	ldr	r3, [pc, #400]	@ (80059d4 <OLED_Draw_Edit+0x1bc>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	0fda      	lsrs	r2, r3, #31
 800584c:	4413      	add	r3, r2
 800584e:	105b      	asrs	r3, r3, #1
 8005850:	425b      	negs	r3, r3
 8005852:	4423      	add	r3, r4
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
    if(title_x < 0) title_x = 0;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	da01      	bge.n	8005860 <OLED_Draw_Edit+0x48>
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
    ssd1306_SetCursor(title_x, 2);
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2102      	movs	r1, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fe9e 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString(edit_title, *menu_font, White);
 800586c:	4b59      	ldr	r3, [pc, #356]	@ (80059d4 <OLED_Draw_Edit+0x1bc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	9200      	str	r2, [sp, #0]
 8005874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005876:	4856      	ldr	r0, [pc, #344]	@ (80059d0 <OLED_Draw_Edit+0x1b8>)
 8005878:	f000 fe70 	bl	800655c <ssd1306_WriteString>

    // Отображение IP адреса в столбик по центру
    int start_y = 15;
 800587c:	230f      	movs	r3, #15
 800587e:	623b      	str	r3, [r7, #32]
    int part_spacing = edit_font->height + 2;
 8005880:	4b55      	ldr	r3, [pc, #340]	@ (80059d8 <OLED_Draw_Edit+0x1c0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	3302      	adds	r3, #2
 8005888:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 4; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e066      	b.n	800595e <OLED_Draw_Edit+0x146>
    {
        char part_str[4];
        snprintf(part_str, sizeof(part_str), "%d", edit_parts[i]);
 8005890:	4a52      	ldr	r2, [pc, #328]	@ (80059dc <OLED_Draw_Edit+0x1c4>)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	1d38      	adds	r0, r7, #4
 800589a:	4a51      	ldr	r2, [pc, #324]	@ (80059e0 <OLED_Draw_Edit+0x1c8>)
 800589c:	2104      	movs	r1, #4
 800589e:	f01c fd3f 	bl	8022320 <sniprintf>

        // Центрирование по горизонтали
        int part_width = strlen(part_str) * edit_font->width;
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fa fc99 	bl	80001dc <strlen>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <OLED_Draw_Edit+0x1c0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	60bb      	str	r3, [r7, #8]
        int part_x = (SW / 2) - (part_width / 2);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	0fda      	lsrs	r2, r3, #31
 80058bc:	4413      	add	r3, r2
 80058be:	105b      	asrs	r3, r3, #1
 80058c0:	4619      	mov	r1, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	0fda      	lsrs	r2, r3, #31
 80058c6:	4413      	add	r3, r2
 80058c8:	105b      	asrs	r3, r3, #1
 80058ca:	425b      	negs	r3, r3
 80058cc:	440b      	add	r3, r1
 80058ce:	61bb      	str	r3, [r7, #24]
        if(part_x < 0) part_x = 0;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da01      	bge.n	80058da <OLED_Draw_Edit+0xc2>
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]

        // Подсветка текущей части
        if(i == edit_digit)
 80058da:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <OLED_Draw_Edit+0x1cc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d125      	bne.n	8005930 <OLED_Draw_Edit+0x118>
        {
            ssd1306_FillRect(part_x - 2, start_y - 1, part_width + 4, edit_font->height + 2, White);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	3b02      	subs	r3, #2
 80058ea:	b2d8      	uxtb	r0, r3
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b2d9      	uxtb	r1, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3304      	adds	r3, #4
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <OLED_Draw_Edit+0x1c0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	3302      	adds	r3, #2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2401      	movs	r4, #1
 8005908:	9400      	str	r4, [sp, #0]
 800590a:	f000 ffc1 	bl	8006890 <ssd1306_FillRect>
            ssd1306_SetCursor(part_x, start_y);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fe45 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, Black);
 800591e:	4b2e      	ldr	r3, [pc, #184]	@ (80059d8 <OLED_Draw_Edit+0x1c0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1d38      	adds	r0, r7, #4
 8005924:	2200      	movs	r2, #0
 8005926:	9200      	str	r2, [sp, #0]
 8005928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800592a:	f000 fe17 	bl	800655c <ssd1306_WriteString>
 800592e:	e00f      	b.n	8005950 <OLED_Draw_Edit+0x138>
        }
        else
        {
            ssd1306_SetCursor(part_x, start_y);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fe34 	bl	80065a8 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, White);
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <OLED_Draw_Edit+0x1c0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	1d38      	adds	r0, r7, #4
 8005946:	2201      	movs	r2, #1
 8005948:	9200      	str	r2, [sp, #0]
 800594a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800594c:	f000 fe06 	bl	800655c <ssd1306_WriteString>
        }

        start_y += part_spacing;
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < 4; i++)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b03      	cmp	r3, #3
 8005962:	dd95      	ble.n	8005890 <OLED_Draw_Edit+0x78>
    }

    // Инструкция внизу
    ssd1306_SetCursor(0, SH - 30);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	3b1e      	subs	r3, #30
 800596a:	b2db      	uxtb	r3, r3
 800596c:	4619      	mov	r1, r3
 800596e:	2000      	movs	r0, #0
 8005970:	f000 fe1a 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("Up/Dn:", *menu_font, White);
 8005974:	4b17      	ldr	r3, [pc, #92]	@ (80059d4 <OLED_Draw_Edit+0x1bc>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2201      	movs	r2, #1
 800597a:	9200      	str	r2, [sp, #0]
 800597c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800597e:	481a      	ldr	r0, [pc, #104]	@ (80059e8 <OLED_Draw_Edit+0x1d0>)
 8005980:	f000 fdec 	bl	800655c <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 20);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3b14      	subs	r3, #20
 800598a:	b2db      	uxtb	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	2000      	movs	r0, #0
 8005990:	f000 fe0a 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("Change", *menu_font, White);
 8005994:	4b0f      	ldr	r3, [pc, #60]	@ (80059d4 <OLED_Draw_Edit+0x1bc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2201      	movs	r2, #1
 800599a:	9200      	str	r2, [sp, #0]
 800599c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800599e:	4813      	ldr	r0, [pc, #76]	@ (80059ec <OLED_Draw_Edit+0x1d4>)
 80059a0:	f000 fddc 	bl	800655c <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 10);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	3b0a      	subs	r3, #10
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 fdfa 	bl	80065a8 <ssd1306_SetCursor>
    ssd1306_WriteString("Mid- Next", *menu_font, White);
 80059b4:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <OLED_Draw_Edit+0x1bc>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	9200      	str	r2, [sp, #0]
 80059bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059be:	480c      	ldr	r0, [pc, #48]	@ (80059f0 <OLED_Draw_Edit+0x1d8>)
 80059c0:	f000 fdcc 	bl	800655c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80059c4:	f000 fcc0 	bl	8006348 <ssd1306_UpdateScreen>
}
 80059c8:	bf00      	nop
 80059ca:	372c      	adds	r7, #44	@ 0x2c
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}
 80059d0:	200000b0 	.word	0x200000b0
 80059d4:	200000a4 	.word	0x200000a4
 80059d8:	200000a8 	.word	0x200000a8
 80059dc:	200000ac 	.word	0x200000ac
 80059e0:	080253d8 	.word	0x080253d8
 80059e4:	20004b24 	.word	0x20004b24
 80059e8:	080253dc 	.word	0x080253dc
 80059ec:	080253e4 	.word	0x080253e4
 80059f0:	080253ec 	.word	0x080253ec

080059f4 <update_activity_time>:

// Обновление времени активности
static void update_activity_time(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
    last_activity_time = HAL_GetTick();
 80059f8:	f001 f80c 	bl	8006a14 <HAL_GetTick>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a02      	ldr	r2, [pc, #8]	@ (8005a08 <update_activity_time+0x14>)
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004b2c 	.word	0x20004b2c

08005a0c <change_edit_value>:

// Изменение значения с учетом удержания
static void change_edit_value(int delta)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8005a14:	f000 fffe 	bl	8006a14 <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]
    static uint32_t last_change_time = 0;
    static uint32_t change_delay = 300;

    if(!button_held)
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a8c <change_edit_value+0x80>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10e      	bne.n	8005a40 <change_edit_value+0x34>
    {
        edit_parts[edit_digit] += delta;
 8005a22:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <change_edit_value+0x84>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	@ (8005a94 <change_edit_value+0x88>)
 8005a28:	5cd1      	ldrb	r1, [r2, r3]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	4b18      	ldr	r3, [pc, #96]	@ (8005a90 <change_edit_value+0x84>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	440a      	add	r2, r1
 8005a34:	b2d1      	uxtb	r1, r2
 8005a36:	4a17      	ldr	r2, [pc, #92]	@ (8005a94 <change_edit_value+0x88>)
 8005a38:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;
        OLED_Draw_Edit();
 8005a3a:	f7ff feed 	bl	8005818 <OLED_Draw_Edit>
        return;
 8005a3e:	e021      	b.n	8005a84 <change_edit_value+0x78>
    }

    if(now - last_change_time > change_delay)
 8005a40:	4b15      	ldr	r3, [pc, #84]	@ (8005a98 <change_edit_value+0x8c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <change_edit_value+0x90>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d919      	bls.n	8005a84 <change_edit_value+0x78>
    {
        edit_parts[edit_digit] += delta;
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <change_edit_value+0x84>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0f      	ldr	r2, [pc, #60]	@ (8005a94 <change_edit_value+0x88>)
 8005a56:	5cd1      	ldrb	r1, [r2, r3]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <change_edit_value+0x84>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	440a      	add	r2, r1
 8005a62:	b2d1      	uxtb	r1, r2
 8005a64:	4a0b      	ldr	r2, [pc, #44]	@ (8005a94 <change_edit_value+0x88>)
 8005a66:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;

        if(change_delay > 50) change_delay -= 10;
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <change_edit_value+0x90>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b32      	cmp	r3, #50	@ 0x32
 8005a6e:	d904      	bls.n	8005a7a <change_edit_value+0x6e>
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <change_edit_value+0x90>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b0a      	subs	r3, #10
 8005a76:	4a09      	ldr	r2, [pc, #36]	@ (8005a9c <change_edit_value+0x90>)
 8005a78:	6013      	str	r3, [r2, #0]

        last_change_time = now;
 8005a7a:	4a07      	ldr	r2, [pc, #28]	@ (8005a98 <change_edit_value+0x8c>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6013      	str	r3, [r2, #0]
        OLED_Draw_Edit();
 8005a80:	f7ff feca 	bl	8005818 <OLED_Draw_Edit>
    }
}
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20004b30 	.word	0x20004b30
 8005a90:	20004b24 	.word	0x20004b24
 8005a94:	200000ac 	.word	0x200000ac
 8005a98:	20004b44 	.word	0x20004b44
 8005a9c:	200000c4 	.word	0x200000c4

08005aa0 <OLED_Settings_MoveUp>:

// --- Навигация меню ---
void OLED_Settings_MoveUp(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005aa4:	4b19      	ldr	r3, [pc, #100]	@ (8005b0c <OLED_Settings_MoveUp+0x6c>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02d      	beq.n	8005b08 <OLED_Settings_MoveUp+0x68>

    update_activity_time();
 8005aac:	f7ff ffa2 	bl	80059f4 <update_activity_time>

    if(confirm_active) {
 8005ab0:	4b17      	ldr	r3, [pc, #92]	@ (8005b10 <OLED_Settings_MoveUp+0x70>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <OLED_Settings_MoveUp+0x24>
        confirm_selection = 0; // Yes (слева)
 8005ab8:	4b16      	ldr	r3, [pc, #88]	@ (8005b14 <OLED_Settings_MoveUp+0x74>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 8005abe:	f7fe ffb3 	bl	8004a28 <OLED_Draw_Confirm>
        return;
 8005ac2:	e022      	b.n	8005b0a <OLED_Settings_MoveUp+0x6a>
    }

    if (submenu_active) {
 8005ac4:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <OLED_Settings_MoveUp+0x78>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <OLED_Settings_MoveUp+0x38>
        submenu_index = 0; // всегда 0/1
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <OLED_Settings_MoveUp+0x7c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
        OLED_Draw_Submenu();
 8005ad2:	f7ff f911 	bl	8004cf8 <OLED_Draw_Submenu>
        return;
 8005ad6:	e018      	b.n	8005b0a <OLED_Settings_MoveUp+0x6a>
    }

    if(editing_active)
 8005ad8:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <OLED_Settings_MoveUp+0x80>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <OLED_Settings_MoveUp+0x48>
    {
        change_edit_value(1);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7ff ff93 	bl	8005a0c <change_edit_value>
        return;
 8005ae6:	e010      	b.n	8005b0a <OLED_Settings_MoveUp+0x6a>
    }

    if(selected_index > 0)
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <OLED_Settings_MoveUp+0x84>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd05      	ble.n	8005afc <OLED_Settings_MoveUp+0x5c>
        selected_index--;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <OLED_Settings_MoveUp+0x84>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4a0b      	ldr	r2, [pc, #44]	@ (8005b24 <OLED_Settings_MoveUp+0x84>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e002      	b.n	8005b02 <OLED_Settings_MoveUp+0x62>
    else
        selected_index = MENU_ITEMS_COUNT - 1;
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <OLED_Settings_MoveUp+0x84>)
 8005afe:	2206      	movs	r2, #6
 8005b00:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 8005b02:	f7ff fdf3 	bl	80056ec <OLED_Settings_Draw>
 8005b06:	e000      	b.n	8005b0a <OLED_Settings_MoveUp+0x6a>
    if(!settings_active) return;
 8005b08:	bf00      	nop
}
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20004afc 	.word	0x20004afc
 8005b10:	20004b31 	.word	0x20004b31
 8005b14:	20004b34 	.word	0x20004b34
 8005b18:	20004b39 	.word	0x20004b39
 8005b1c:	20004b3c 	.word	0x20004b3c
 8005b20:	20004b28 	.word	0x20004b28
 8005b24:	20004b20 	.word	0x20004b20

08005b28 <OLED_Settings_MoveDown>:

void OLED_Settings_MoveDown(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b98 <OLED_Settings_MoveDown+0x70>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d02e      	beq.n	8005b92 <OLED_Settings_MoveDown+0x6a>

    update_activity_time();
 8005b34:	f7ff ff5e 	bl	80059f4 <update_activity_time>

    if(confirm_active) {
 8005b38:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <OLED_Settings_MoveDown+0x74>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <OLED_Settings_MoveDown+0x24>
        confirm_selection = 1; // No (справа)
 8005b40:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <OLED_Settings_MoveDown+0x78>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 8005b46:	f7fe ff6f 	bl	8004a28 <OLED_Draw_Confirm>
        return;
 8005b4a:	e023      	b.n	8005b94 <OLED_Settings_MoveDown+0x6c>
    }

    if (submenu_active) {
 8005b4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <OLED_Settings_MoveDown+0x7c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <OLED_Settings_MoveDown+0x38>
        submenu_index = 1; // всегда 0/1
 8005b54:	4b14      	ldr	r3, [pc, #80]	@ (8005ba8 <OLED_Settings_MoveDown+0x80>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
        OLED_Draw_Submenu();
 8005b5a:	f7ff f8cd 	bl	8004cf8 <OLED_Draw_Submenu>
        return;
 8005b5e:	e019      	b.n	8005b94 <OLED_Settings_MoveDown+0x6c>
    }

    if(editing_active)
 8005b60:	4b12      	ldr	r3, [pc, #72]	@ (8005bac <OLED_Settings_MoveDown+0x84>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <OLED_Settings_MoveDown+0x4a>
    {
        change_edit_value(-1);
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	f7ff ff4e 	bl	8005a0c <change_edit_value>
        return;
 8005b70:	e010      	b.n	8005b94 <OLED_Settings_MoveDown+0x6c>
    }

    if(selected_index < MENU_ITEMS_COUNT - 1)
 8005b72:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb0 <OLED_Settings_MoveDown+0x88>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d805      	bhi.n	8005b86 <OLED_Settings_MoveDown+0x5e>
        selected_index++;
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <OLED_Settings_MoveDown+0x88>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb0 <OLED_Settings_MoveDown+0x88>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e002      	b.n	8005b8c <OLED_Settings_MoveDown+0x64>
    else
        selected_index = 0;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <OLED_Settings_MoveDown+0x88>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 8005b8c:	f7ff fdae 	bl	80056ec <OLED_Settings_Draw>
 8005b90:	e000      	b.n	8005b94 <OLED_Settings_MoveDown+0x6c>
    if(!settings_active) return;
 8005b92:	bf00      	nop
}
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20004afc 	.word	0x20004afc
 8005b9c:	20004b31 	.word	0x20004b31
 8005ba0:	20004b34 	.word	0x20004b34
 8005ba4:	20004b39 	.word	0x20004b39
 8005ba8:	20004b3c 	.word	0x20004b3c
 8005bac:	20004b28 	.word	0x20004b28
 8005bb0:	20004b20 	.word	0x20004b20

08005bb4 <OLED_Settings_Select>:
// --- Выбор пункта меню ---
void OLED_Settings_Select(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005bba:	4ba8      	ldr	r3, [pc, #672]	@ (8005e5c <OLED_Settings_Select+0x2a8>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 81ca 	beq.w	8005f58 <OLED_Settings_Select+0x3a4>

    update_activity_time();
 8005bc4:	f7ff ff16 	bl	80059f4 <update_activity_time>

    if(confirm_active) {
 8005bc8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e60 <OLED_Settings_Select+0x2ac>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8087 	beq.w	8005ce0 <OLED_Settings_Select+0x12c>
        if(confirm_selection == 0) {
 8005bd2:	4ba4      	ldr	r3, [pc, #656]	@ (8005e64 <OLED_Settings_Select+0x2b0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d173      	bne.n	8005cc2 <OLED_Settings_Select+0x10e>
            // Yes - применяем/выполняем действие в зависимости от типа
            switch (confirm_type) {
 8005bda:	4ba3      	ldr	r3, [pc, #652]	@ (8005e68 <OLED_Settings_Select+0x2b4>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d86d      	bhi.n	8005cc0 <OLED_Settings_Select+0x10c>
 8005be4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <OLED_Settings_Select+0x38>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c09 	.word	0x08005c09
 8005bf4:	08005c09 	.word	0x08005c09
 8005bf8:	08005c0f 	.word	0x08005c0f
 8005bfc:	08005c0f 	.word	0x08005c0f
 8005c00:	08005c15 	.word	0x08005c15
 8005c04:	08005c19 	.word	0x08005c19
                case CONFIRM_APPLY_IP:
                case CONFIRM_APPLY_MASK:
                case CONFIRM_APPLY_GW:
                    Apply_Network_Settings();
 8005c08:	f7ff fa28 	bl	800505c <Apply_Network_Settings>
                    break;
 8005c0c:	e059      	b.n	8005cc2 <OLED_Settings_Select+0x10e>
                case CONFIRM_DHCP_ENABLE:
                case CONFIRM_DHCP_DISABLE:
                    DHCP_Apply();
 8005c0e:	f7ff fc49 	bl	80054a4 <DHCP_Apply>
                    break;
 8005c12:	e056      	b.n	8005cc2 <OLED_Settings_Select+0x10e>
                case CONFIRM_RESET_MCU:
                    NVIC_SystemReset();
 8005c14:	f7fe fec4 	bl	80049a0 <__NVIC_SystemReset>
                    break;
                case CONFIRM_FACTORY_RESET: {
                    // Устанавливаем заводские сетевые настройки
                    last_ip[0] = 192; last_ip[1] = 168; last_ip[2] = 0; last_ip[3] = 254;
 8005c18:	4b94      	ldr	r3, [pc, #592]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005c1a:	22c0      	movs	r2, #192	@ 0xc0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	4b93      	ldr	r3, [pc, #588]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005c20:	22a8      	movs	r2, #168	@ 0xa8
 8005c22:	705a      	strb	r2, [r3, #1]
 8005c24:	4b91      	ldr	r3, [pc, #580]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	709a      	strb	r2, [r3, #2]
 8005c2a:	4b90      	ldr	r3, [pc, #576]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005c2c:	22fe      	movs	r2, #254	@ 0xfe
 8005c2e:	70da      	strb	r2, [r3, #3]
                    last_mask[0] = 255; last_mask[1] = 255; last_mask[2] = 255; last_mask[3] = 0;
 8005c30:	4b8f      	ldr	r3, [pc, #572]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005c32:	22ff      	movs	r2, #255	@ 0xff
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	4b8e      	ldr	r3, [pc, #568]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005c38:	22ff      	movs	r2, #255	@ 0xff
 8005c3a:	705a      	strb	r2, [r3, #1]
 8005c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005c3e:	22ff      	movs	r2, #255	@ 0xff
 8005c40:	709a      	strb	r2, [r3, #2]
 8005c42:	4b8b      	ldr	r3, [pc, #556]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	70da      	strb	r2, [r3, #3]
                    last_gw[0] = 192; last_gw[1] = 168; last_gw[2] = 0; last_gw[3] = 1;
 8005c48:	4b8a      	ldr	r3, [pc, #552]	@ (8005e74 <OLED_Settings_Select+0x2c0>)
 8005c4a:	22c0      	movs	r2, #192	@ 0xc0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <OLED_Settings_Select+0x2c0>)
 8005c50:	22a8      	movs	r2, #168	@ 0xa8
 8005c52:	705a      	strb	r2, [r3, #1]
 8005c54:	4b87      	ldr	r3, [pc, #540]	@ (8005e74 <OLED_Settings_Select+0x2c0>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	709a      	strb	r2, [r3, #2]
 8005c5a:	4b86      	ldr	r3, [pc, #536]	@ (8005e74 <OLED_Settings_Select+0x2c0>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	70da      	strb	r2, [r3, #3]
                    dhcp_on = false;
 8005c60:	4b85      	ldr	r3, [pc, #532]	@ (8005e78 <OLED_Settings_Select+0x2c4>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
                    Apply_Network_Settings();
 8005c66:	f7ff f9f9 	bl	800505c <Apply_Network_Settings>

                    // Обнуляем RTC
                    RTC_TimeTypeDef t = {0};
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	605a      	str	r2, [r3, #4]
 8005c74:	609a      	str	r2, [r3, #8]
                    t.Hours = 0; t.Minutes = 0; t.Seconds = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	723b      	strb	r3, [r7, #8]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	727b      	strb	r3, [r7, #9]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	72bb      	strb	r3, [r7, #10]
                    t.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
                    t.StoreOperation = RTC_STOREOPERATION_RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
                    HAL_RTC_SetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4619      	mov	r1, r3
 8005c92:	487a      	ldr	r0, [pc, #488]	@ (8005e7c <OLED_Settings_Select+0x2c8>)
 8005c94:	f004 ff6a 	bl	800ab6c <HAL_RTC_SetTime>
                    RTC_DateTypeDef d = {0};
 8005c98:	2300      	movs	r3, #0
 8005c9a:	607b      	str	r3, [r7, #4]
                    d.Year = 0; d.Month = RTC_MONTH_JANUARY; d.Date = 1; d.WeekDay = RTC_WEEKDAY_MONDAY;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	71fb      	strb	r3, [r7, #7]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	717b      	strb	r3, [r7, #5]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	71bb      	strb	r3, [r7, #6]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	713b      	strb	r3, [r7, #4]
                    HAL_RTC_SetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4872      	ldr	r0, [pc, #456]	@ (8005e7c <OLED_Settings_Select+0x2c8>)
 8005cb4:	f005 f846 	bl	800ad44 <HAL_RTC_SetDate>

                    // Чистим backup-регистры
                    Settings_Clear_Backup();
 8005cb8:	f7fd fb64 	bl	8003384 <Settings_Clear_Backup>

                    // Полная перезагрузка
                    NVIC_SystemReset();
 8005cbc:	f7fe fe70 	bl	80049a0 <__NVIC_SystemReset>
                    break;
                }
                default:
                    break;
 8005cc0:	bf00      	nop
            }
        }
        confirm_active = false;
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <OLED_Settings_Select+0x2ac>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
        confirm_type = CONFIRM_NONE;
 8005cc8:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <OLED_Settings_Select+0x2b4>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
        submenu_active = false;
 8005cce:	4b6c      	ldr	r3, [pc, #432]	@ (8005e80 <OLED_Settings_Select+0x2cc>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
        submenu_type = SUBMENU_NONE;
 8005cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8005e84 <OLED_Settings_Select+0x2d0>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8005cda:	f7ff fd07 	bl	80056ec <OLED_Settings_Draw>
        return;
 8005cde:	e13e      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
    }

    if (submenu_active) {
 8005ce0:	4b67      	ldr	r3, [pc, #412]	@ (8005e80 <OLED_Settings_Select+0x2cc>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d036      	beq.n	8005d56 <OLED_Settings_Select+0x1a2>
        if (submenu_type == SUBMENU_DHCP) {
 8005ce8:	4b66      	ldr	r3, [pc, #408]	@ (8005e84 <OLED_Settings_Select+0x2d0>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d114      	bne.n	8005d1a <OLED_Settings_Select+0x166>
            dhcp_on = (submenu_index == 0);
 8005cf0:	4b65      	ldr	r3, [pc, #404]	@ (8005e88 <OLED_Settings_Select+0x2d4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4b5d      	ldr	r3, [pc, #372]	@ (8005e78 <OLED_Settings_Select+0x2c4>)
 8005d02:	701a      	strb	r2, [r3, #0]
            // Применяем без подтверждения
            DHCP_Apply();
 8005d04:	f7ff fbce 	bl	80054a4 <DHCP_Apply>
            submenu_active = false;
 8005d08:	4b5d      	ldr	r3, [pc, #372]	@ (8005e80 <OLED_Settings_Select+0x2cc>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_NONE;
 8005d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e84 <OLED_Settings_Select+0x2d0>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
            OLED_Settings_Draw();
 8005d14:	f7ff fcea 	bl	80056ec <OLED_Settings_Draw>
            Settings_Save_Rotation(rot180);
            submenu_active = false;
            submenu_type = SUBMENU_NONE;
            OLED_Settings_Draw();
        }
        return;
 8005d18:	e120      	b.n	8005f5c <OLED_Settings_Select+0x3a8>
        } else if (submenu_type == SUBMENU_ROTATION) {
 8005d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8005e84 <OLED_Settings_Select+0x2d0>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	f040 811c 	bne.w	8005f5c <OLED_Settings_Select+0x3a8>
            uint8_t rot180 = (submenu_index == 1) ? 1 : 0;
 8005d24:	4b58      	ldr	r3, [pc, #352]	@ (8005e88 <OLED_Settings_Select+0x2d4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	75fb      	strb	r3, [r7, #23]
            ssd1306_SetRotation180(rot180);
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 face 	bl	80062d8 <ssd1306_SetRotation180>
            Settings_Save_Rotation(rot180);
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd faee 	bl	8003320 <Settings_Save_Rotation>
            submenu_active = false;
 8005d44:	4b4e      	ldr	r3, [pc, #312]	@ (8005e80 <OLED_Settings_Select+0x2cc>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_NONE;
 8005d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e84 <OLED_Settings_Select+0x2d0>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
            OLED_Settings_Draw();
 8005d50:	f7ff fccc 	bl	80056ec <OLED_Settings_Draw>
        return;
 8005d54:	e102      	b.n	8005f5c <OLED_Settings_Select+0x3a8>
    }

    if(editing_active)
 8005d56:	4b4d      	ldr	r3, [pc, #308]	@ (8005e8c <OLED_Settings_Select+0x2d8>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d03a      	beq.n	8005dd4 <OLED_Settings_Select+0x220>
    {
        edit_digit++;
 8005d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e90 <OLED_Settings_Select+0x2dc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a4a      	ldr	r2, [pc, #296]	@ (8005e90 <OLED_Settings_Select+0x2dc>)
 8005d66:	6013      	str	r3, [r2, #0]
        if(edit_digit > 3)
 8005d68:	4b49      	ldr	r3, [pc, #292]	@ (8005e90 <OLED_Settings_Select+0x2dc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	dd2e      	ble.n	8005dce <OLED_Settings_Select+0x21a>
        {
            editing_active = false;
 8005d70:	4b46      	ldr	r3, [pc, #280]	@ (8005e8c <OLED_Settings_Select+0x2d8>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]

            // Сохраняем изменения и показываем подтверждение
            switch(selected_index)
 8005d76:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <OLED_Settings_Select+0x2e0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d016      	beq.n	8005dac <OLED_Settings_Select+0x1f8>
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	dc1c      	bgt.n	8005dbc <OLED_Settings_Select+0x208>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <OLED_Settings_Select+0x1d8>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d008      	beq.n	8005d9c <OLED_Settings_Select+0x1e8>
 8005d8a:	e017      	b.n	8005dbc <OLED_Settings_Select+0x208>
            {
                case 0:
                    memcpy(last_ip, edit_parts, 4);
 8005d8c:	4b42      	ldr	r3, [pc, #264]	@ (8005e98 <OLED_Settings_Select+0x2e4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a36      	ldr	r2, [pc, #216]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005d92:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_IP;
 8005d94:	4b34      	ldr	r3, [pc, #208]	@ (8005e68 <OLED_Settings_Select+0x2b4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
                    break;
 8005d9a:	e00f      	b.n	8005dbc <OLED_Settings_Select+0x208>
                case 1:
                    memcpy(last_mask, edit_parts, 4);
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e98 <OLED_Settings_Select+0x2e4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a33      	ldr	r2, [pc, #204]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005da2:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_MASK;
 8005da4:	4b30      	ldr	r3, [pc, #192]	@ (8005e68 <OLED_Settings_Select+0x2b4>)
 8005da6:	2202      	movs	r2, #2
 8005da8:	701a      	strb	r2, [r3, #0]
                    break;
 8005daa:	e007      	b.n	8005dbc <OLED_Settings_Select+0x208>
                case 2:
                    memcpy(last_gw, edit_parts, 4);
 8005dac:	4b3a      	ldr	r3, [pc, #232]	@ (8005e98 <OLED_Settings_Select+0x2e4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a30      	ldr	r2, [pc, #192]	@ (8005e74 <OLED_Settings_Select+0x2c0>)
 8005db2:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_GW;
 8005db4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e68 <OLED_Settings_Select+0x2b4>)
 8005db6:	2203      	movs	r2, #3
 8005db8:	701a      	strb	r2, [r3, #0]
                    break;
 8005dba:	bf00      	nop
            }

            confirm_active = true;
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <OLED_Settings_Select+0x2ac>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005dc2:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <OLED_Settings_Select+0x2b0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005dc8:	f7fe fe2e 	bl	8004a28 <OLED_Draw_Confirm>
        }
        else
            OLED_Draw_Edit();
        return;
 8005dcc:	e0c7      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
            OLED_Draw_Edit();
 8005dce:	f7ff fd23 	bl	8005818 <OLED_Draw_Edit>
        return;
 8005dd2:	e0c4      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
    }

    switch(selected_index)
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <OLED_Settings_Select+0x2e0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b06      	cmp	r3, #6
 8005dda:	f200 80c0 	bhi.w	8005f5e <OLED_Settings_Select+0x3aa>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <OLED_Settings_Select+0x230>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e33 	.word	0x08005e33
 8005dec:	08005ea9 	.word	0x08005ea9
 8005df0:	08005edb 	.word	0x08005edb
 8005df4:	08005f01 	.word	0x08005f01
 8005df8:	08005f19 	.word	0x08005f19
 8005dfc:	08005f31 	.word	0x08005f31
    {
        case 0: // IP
            editing_active = true;
 8005e00:	4b22      	ldr	r3, [pc, #136]	@ (8005e8c <OLED_Settings_Select+0x2d8>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005e06:	4b22      	ldr	r3, [pc, #136]	@ (8005e90 <OLED_Settings_Select+0x2dc>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set IP");
 8005e0c:	4b23      	ldr	r3, [pc, #140]	@ (8005e9c <OLED_Settings_Select+0x2e8>)
 8005e0e:	4a24      	ldr	r2, [pc, #144]	@ (8005ea0 <OLED_Settings_Select+0x2ec>)
 8005e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e14:	6018      	str	r0, [r3, #0]
 8005e16:	3304      	adds	r3, #4
 8005e18:	8019      	strh	r1, [r3, #0]
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	0c0a      	lsrs	r2, r1, #16
 8005e1e:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005e20:	f7ff f818 	bl	8004e54 <Sync_From_Netif>
            memcpy(edit_parts, last_ip, 4);
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <OLED_Settings_Select+0x2b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <OLED_Settings_Select+0x2e4>)
 8005e2a:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005e2c:	f7ff fcf4 	bl	8005818 <OLED_Draw_Edit>
            break;
 8005e30:	e095      	b.n	8005f5e <OLED_Settings_Select+0x3aa>

        case 1: // Mask
            editing_active = true;
 8005e32:	4b16      	ldr	r3, [pc, #88]	@ (8005e8c <OLED_Settings_Select+0x2d8>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005e38:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <OLED_Settings_Select+0x2dc>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set Mask");
 8005e3e:	4b17      	ldr	r3, [pc, #92]	@ (8005e9c <OLED_Settings_Select+0x2e8>)
 8005e40:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <OLED_Settings_Select+0x2f0>)
 8005e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e44:	c303      	stmia	r3!, {r0, r1}
 8005e46:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005e48:	f7ff f804 	bl	8004e54 <Sync_From_Netif>
            memcpy(edit_parts, last_mask, 4);
 8005e4c:	4b08      	ldr	r3, [pc, #32]	@ (8005e70 <OLED_Settings_Select+0x2bc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a11      	ldr	r2, [pc, #68]	@ (8005e98 <OLED_Settings_Select+0x2e4>)
 8005e52:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005e54:	f7ff fce0 	bl	8005818 <OLED_Draw_Edit>
            break;
 8005e58:	e081      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
 8005e5a:	bf00      	nop
 8005e5c:	20004afc 	.word	0x20004afc
 8005e60:	20004b31 	.word	0x20004b31
 8005e64:	20004b34 	.word	0x20004b34
 8005e68:	20004b40 	.word	0x20004b40
 8005e6c:	2000007c 	.word	0x2000007c
 8005e70:	20000080 	.word	0x20000080
 8005e74:	20000084 	.word	0x20000084
 8005e78:	200000c0 	.word	0x200000c0
 8005e7c:	200029d0 	.word	0x200029d0
 8005e80:	20004b39 	.word	0x20004b39
 8005e84:	20004b38 	.word	0x20004b38
 8005e88:	20004b3c 	.word	0x20004b3c
 8005e8c:	20004b28 	.word	0x20004b28
 8005e90:	20004b24 	.word	0x20004b24
 8005e94:	20004b20 	.word	0x20004b20
 8005e98:	200000ac 	.word	0x200000ac
 8005e9c:	200000b0 	.word	0x200000b0
 8005ea0:	080253f8 	.word	0x080253f8
 8005ea4:	08025400 	.word	0x08025400

        case 2: // Gateway
            editing_active = true;
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8005f64 <OLED_Settings_Select+0x3b0>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005eae:	4b2e      	ldr	r3, [pc, #184]	@ (8005f68 <OLED_Settings_Select+0x3b4>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set GW");
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f6c <OLED_Settings_Select+0x3b8>)
 8005eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f70 <OLED_Settings_Select+0x3bc>)
 8005eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ebc:	6018      	str	r0, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	8019      	strh	r1, [r3, #0]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	0c0a      	lsrs	r2, r1, #16
 8005ec6:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005ec8:	f7fe ffc4 	bl	8004e54 <Sync_From_Netif>
            memcpy(edit_parts, last_gw, 4);
 8005ecc:	4b29      	ldr	r3, [pc, #164]	@ (8005f74 <OLED_Settings_Select+0x3c0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	@ (8005f78 <OLED_Settings_Select+0x3c4>)
 8005ed2:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005ed4:	f7ff fca0 	bl	8005818 <OLED_Draw_Edit>
            break;
 8005ed8:	e041      	b.n	8005f5e <OLED_Settings_Select+0x3aa>

        case 3: // DHCP
            submenu_active = true;
 8005eda:	4b28      	ldr	r3, [pc, #160]	@ (8005f7c <OLED_Settings_Select+0x3c8>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_DHCP;
 8005ee0:	4b27      	ldr	r3, [pc, #156]	@ (8005f80 <OLED_Settings_Select+0x3cc>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
            submenu_index = dhcp_on ? 0 : 1;
 8005ee6:	4b27      	ldr	r3, [pc, #156]	@ (8005f84 <OLED_Settings_Select+0x3d0>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <OLED_Settings_Select+0x3d4>)
 8005ef8:	601a      	str	r2, [r3, #0]
            OLED_Draw_Submenu();
 8005efa:	f7fe fefd 	bl	8004cf8 <OLED_Draw_Submenu>
            break;
 8005efe:	e02e      	b.n	8005f5e <OLED_Settings_Select+0x3aa>

        case 4: // Reboot -> Программная перезагрузка MCU (без доп. действий)
            confirm_active = true;
 8005f00:	4b22      	ldr	r3, [pc, #136]	@ (8005f8c <OLED_Settings_Select+0x3d8>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005f06:	4b22      	ldr	r3, [pc, #136]	@ (8005f90 <OLED_Settings_Select+0x3dc>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
            confirm_type = CONFIRM_RESET_MCU;
 8005f0c:	4b21      	ldr	r3, [pc, #132]	@ (8005f94 <OLED_Settings_Select+0x3e0>)
 8005f0e:	2206      	movs	r2, #6
 8005f10:	701a      	strb	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005f12:	f7fe fd89 	bl	8004a28 <OLED_Draw_Confirm>
            break;
 8005f16:	e022      	b.n	8005f5e <OLED_Settings_Select+0x3aa>

        case 5: // Reset -> Factory Reset (заводские настройки)
            confirm_active = true;
 8005f18:	4b1c      	ldr	r3, [pc, #112]	@ (8005f8c <OLED_Settings_Select+0x3d8>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <OLED_Settings_Select+0x3dc>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
            confirm_type = CONFIRM_FACTORY_RESET;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	@ (8005f94 <OLED_Settings_Select+0x3e0>)
 8005f26:	2207      	movs	r2, #7
 8005f28:	701a      	strb	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005f2a:	f7fe fd7d 	bl	8004a28 <OLED_Draw_Confirm>
            break;
 8005f2e:	e016      	b.n	8005f5e <OLED_Settings_Select+0x3aa>

        case 6: // Set rotation
            submenu_active = true;
 8005f30:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <OLED_Settings_Select+0x3c8>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_ROTATION;
 8005f36:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <OLED_Settings_Select+0x3cc>)
 8005f38:	2202      	movs	r2, #2
 8005f3a:	701a      	strb	r2, [r3, #0]
            submenu_index = ssd1306_GetRotation180() ? 1 : 0;
 8005f3c:	f000 f9e2 	bl	8006304 <ssd1306_GetRotation180>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2300      	moveq	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <OLED_Settings_Select+0x3d4>)
 8005f50:	601a      	str	r2, [r3, #0]
            OLED_Draw_Submenu();
 8005f52:	f7fe fed1 	bl	8004cf8 <OLED_Draw_Submenu>
            break;
 8005f56:	e002      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
    if(!settings_active) return;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <OLED_Settings_Select+0x3aa>
        return;
 8005f5c:	bf00      	nop
    }
}
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20004b28 	.word	0x20004b28
 8005f68:	20004b24 	.word	0x20004b24
 8005f6c:	200000b0 	.word	0x200000b0
 8005f70:	0802540c 	.word	0x0802540c
 8005f74:	20000084 	.word	0x20000084
 8005f78:	200000ac 	.word	0x200000ac
 8005f7c:	20004b39 	.word	0x20004b39
 8005f80:	20004b38 	.word	0x20004b38
 8005f84:	200000c0 	.word	0x200000c0
 8005f88:	20004b3c 	.word	0x20004b3c
 8005f8c:	20004b31 	.word	0x20004b31
 8005f90:	20004b34 	.word	0x20004b34
 8005f94:	20004b40 	.word	0x20004b40

08005f98 <OLED_Settings_Exit>:

// Выход из меню настроек
void OLED_Settings_Exit(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
    settings_active = false;
 8005f9c:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <OLED_Settings_Exit+0x20>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
    editing_active = false;
 8005fa2:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <OLED_Settings_Exit+0x24>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <OLED_Settings_Exit+0x28>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20004afc 	.word	0x20004afc
 8005fbc:	20004b28 	.word	0x20004b28
 8005fc0:	20004b31 	.word	0x20004b31

08005fc4 <OLED_Settings_TimeoutCheck>:

// Проверка таймаута бездействия
void OLED_Settings_TimeoutCheck(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 8005fca:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <OLED_Settings_TimeoutCheck+0x44>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <OLED_Settings_TimeoutCheck+0x3a>

    uint32_t now = HAL_GetTick();
 8005fd2:	f000 fd1f 	bl	8006a14 <HAL_GetTick>
 8005fd6:	6078      	str	r0, [r7, #4]

    // Таймаут работает ТОЛЬКО если мы не в режиме редактирования и не в подтверждении
    if (!editing_active && !confirm_active && (now - last_activity_time) >= 10000)
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <OLED_Settings_TimeoutCheck+0x48>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10f      	bne.n	8006000 <OLED_Settings_TimeoutCheck+0x3c>
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <OLED_Settings_TimeoutCheck+0x4c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <OLED_Settings_TimeoutCheck+0x3c>
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <OLED_Settings_TimeoutCheck+0x50>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d903      	bls.n	8006000 <OLED_Settings_TimeoutCheck+0x3c>
    {
        OLED_Settings_Exit();
 8005ff8:	f7ff ffce 	bl	8005f98 <OLED_Settings_Exit>
 8005ffc:	e000      	b.n	8006000 <OLED_Settings_TimeoutCheck+0x3c>
    if (!settings_active) return;
 8005ffe:	bf00      	nop
    }
}
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20004afc 	.word	0x20004afc
 800600c:	20004b28 	.word	0x20004b28
 8006010:	20004b31 	.word	0x20004b31
 8006014:	20004b2c 	.word	0x20004b2c

08006018 <OLED_UpdateDisplay>:
    button_held = held;
    if(!held) button_press_time = 0;
}

void OLED_UpdateDisplay(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
    static uint32_t last_display_update = 0;
    uint32_t now = HAL_GetTick();
 800601e:	f000 fcf9 	bl	8006a14 <HAL_GetTick>
 8006022:	6078      	str	r0, [r7, #4]

    if (now - last_display_update < 500) {
 8006024:	4b16      	ldr	r3, [pc, #88]	@ (8006080 <OLED_UpdateDisplay+0x68>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006030:	d321      	bcc.n	8006076 <OLED_UpdateDisplay+0x5e>
        return;
    }
    last_display_update = now;
 8006032:	4a13      	ldr	r2, [pc, #76]	@ (8006080 <OLED_UpdateDisplay+0x68>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6013      	str	r3, [r2, #0]

    if (settings_active) {
 8006038:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <OLED_UpdateDisplay+0x6c>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d017      	beq.n	8006070 <OLED_UpdateDisplay+0x58>
        if (confirm_active) {
 8006040:	4b11      	ldr	r3, [pc, #68]	@ (8006088 <OLED_UpdateDisplay+0x70>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <OLED_UpdateDisplay+0x36>
            OLED_Draw_Confirm();
 8006048:	f7fe fcee 	bl	8004a28 <OLED_Draw_Confirm>
 800604c:	e014      	b.n	8006078 <OLED_UpdateDisplay+0x60>
        }
        else if (editing_active) {
 800604e:	4b0f      	ldr	r3, [pc, #60]	@ (800608c <OLED_UpdateDisplay+0x74>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <OLED_UpdateDisplay+0x44>
            OLED_Draw_Edit();
 8006056:	f7ff fbdf 	bl	8005818 <OLED_Draw_Edit>
 800605a:	e00d      	b.n	8006078 <OLED_UpdateDisplay+0x60>
        }
        else if (submenu_active) {
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <OLED_UpdateDisplay+0x78>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <OLED_UpdateDisplay+0x52>
            OLED_Draw_Submenu();
 8006064:	f7fe fe48 	bl	8004cf8 <OLED_Draw_Submenu>
 8006068:	e006      	b.n	8006078 <OLED_UpdateDisplay+0x60>
        }
        else {
            OLED_Settings_Draw();
 800606a:	f7ff fb3f 	bl	80056ec <OLED_Settings_Draw>
 800606e:	e003      	b.n	8006078 <OLED_UpdateDisplay+0x60>
        }
    }
    else {
        OLED_ShowCurrentPage();
 8006070:	f7fd fefe 	bl	8003e70 <OLED_ShowCurrentPage>
 8006074:	e000      	b.n	8006078 <OLED_UpdateDisplay+0x60>
        return;
 8006076:	bf00      	nop
    }
}
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20004b48 	.word	0x20004b48
 8006084:	20004afc 	.word	0x20004afc
 8006088:	20004b31 	.word	0x20004b31
 800608c:	20004b28 	.word	0x20004b28
 8006090:	20004b39 	.word	0x20004b39

08006094 <custom_get_value>:
static const u32_t custom_base_oid[] = { 1,3,6,1,4,1,62283,1 };



/* Колбэки для чтения переменных */
static s16_t custom_get_value(struct snmp_node_instance* instance, void* value) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage1;
 800609e:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <custom_get_value+0x24>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fb f896 	bl	80011d4 <__aeabi_f2uiz>
 80060a8:	4602      	mov	r2, r0
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060ae:	2304      	movs	r3, #4
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20004aac 	.word	0x20004aac

080060bc <custom_get_var1>:

static s16_t custom_get_var1(struct snmp_node_instance* instance, void* value) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage2;
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <custom_get_var1+0x24>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fb f882 	bl	80011d4 <__aeabi_f2uiz>
 80060d0:	4602      	mov	r2, r0
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060d6:	2304      	movs	r3, #4
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20004ab0 	.word	0x20004ab0

080060e4 <custom_get_var2>:

static s16_t custom_get_var2(struct snmp_node_instance* instance, void* value) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = current;
 80060ee:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <custom_get_var2+0x24>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb f86e 	bl	80011d4 <__aeabi_f2uiz>
 80060f8:	4602      	mov	r2, r0
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060fe:	2304      	movs	r3, #4
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20004ab4 	.word	0x20004ab4

0800610c <custom_get_var3>:

static s16_t custom_get_var3(struct snmp_node_instance* instance, void* value) {
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 123;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	227b      	movs	r2, #123	@ 0x7b
 800611a:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 800611c:	2304      	movs	r3, #4
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <custom_get_var4>:

static s16_t custom_get_var4(struct snmp_node_instance* instance, void* value) {
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 228;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	22e4      	movs	r2, #228	@ 0xe4
 8006136:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8006138:	2304      	movs	r3, #4
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <ssd1306_map_logical_to_physical>:
 */
// Optional 180° flip flag (in addition to the base 90° layout)
static uint8_t g_rotation_180 = 0;

// Map logical to physical with base 90° rotation plus optional 180° flip
static inline void ssd1306_map_logical_to_physical(uint8_t lx, uint8_t ly, uint8_t *px, uint8_t *py) {
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60ba      	str	r2, [r7, #8]
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
 8006152:	460b      	mov	r3, r1
 8006154:	73bb      	strb	r3, [r7, #14]
    if (!g_rotation_180) {
 8006156:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <ssd1306_map_logical_to_physical+0x4c>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <ssd1306_map_logical_to_physical+0x2e>
        *px = ly;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	7bba      	ldrb	r2, [r7, #14]
 8006162:	701a      	strb	r2, [r3, #0]
        *py = (uint8_t)(SSD1306_HEIGHT - 1 - lx);
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	701a      	strb	r2, [r3, #0]
    } else {
        // Additional 180° flip: mirror both axes relative to the 90° mapping
        *px = (uint8_t)(SSD1306_WIDTH - 1 - ly);
        *py = lx;
    }
}
 8006170:	e008      	b.n	8006184 <ssd1306_map_logical_to_physical+0x40>
        *px = (uint8_t)(SSD1306_WIDTH - 1 - ly);
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	701a      	strb	r2, [r3, #0]
        *py = lx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	701a      	strb	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20004b4c 	.word	0x20004b4c

08006194 <ssd1306_Reset>:


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af04      	add	r7, sp, #16
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	2301      	movs	r3, #1
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	1dfb      	adds	r3, r7, #7
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2301      	movs	r3, #1
 80061ba:	2200      	movs	r2, #0
 80061bc:	2178      	movs	r1, #120	@ 0x78
 80061be:	4803      	ldr	r0, [pc, #12]	@ (80061cc <ssd1306_WriteCommand+0x2c>)
 80061c0:	f003 fb90 	bl	80098e4 <HAL_I2C_Mem_Write>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	2000297c 	.word	0x2000297c

080061d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af04      	add	r7, sp, #16
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f04f 32ff 	mov.w	r2, #4294967295
 80061e2:	9202      	str	r2, [sp, #8]
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	2301      	movs	r3, #1
 80061ec:	2240      	movs	r2, #64	@ 0x40
 80061ee:	2178      	movs	r1, #120	@ 0x78
 80061f0:	4803      	ldr	r0, [pc, #12]	@ (8006200 <ssd1306_WriteData+0x30>)
 80061f2:	f003 fb77 	bl	80098e4 <HAL_I2C_Mem_Write>
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	2000297c 	.word	0x2000297c

08006204 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006208:	f7ff ffc4 	bl	8006194 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800620c:	2064      	movs	r0, #100	@ 0x64
 800620e:	f000 fc0b 	bl	8006a28 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006212:	2000      	movs	r0, #0
 8006214:	f000 fb1e 	bl	8006854 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006218:	2020      	movs	r0, #32
 800621a:	f7ff ffc1 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800621e:	2000      	movs	r0, #0
 8006220:	f7ff ffbe 	bl	80061a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006224:	20b0      	movs	r0, #176	@ 0xb0
 8006226:	f7ff ffbb 	bl	80061a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800622a:	20c8      	movs	r0, #200	@ 0xc8
 800622c:	f7ff ffb8 	bl	80061a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006230:	2000      	movs	r0, #0
 8006232:	f7ff ffb5 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006236:	2010      	movs	r0, #16
 8006238:	f7ff ffb2 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800623c:	2040      	movs	r0, #64	@ 0x40
 800623e:	f7ff ffaf 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006242:	20ff      	movs	r0, #255	@ 0xff
 8006244:	f000 faf2 	bl	800682c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006248:	20a1      	movs	r0, #161	@ 0xa1
 800624a:	f7ff ffa9 	bl	80061a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800624e:	20a6      	movs	r0, #166	@ 0xa6
 8006250:	f7ff ffa6 	bl	80061a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006254:	20a8      	movs	r0, #168	@ 0xa8
 8006256:	f7ff ffa3 	bl	80061a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800625a:	203f      	movs	r0, #63	@ 0x3f
 800625c:	f7ff ffa0 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006260:	20a4      	movs	r0, #164	@ 0xa4
 8006262:	f7ff ff9d 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006266:	20d3      	movs	r0, #211	@ 0xd3
 8006268:	f7ff ff9a 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800626c:	2000      	movs	r0, #0
 800626e:	f7ff ff97 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006272:	20d5      	movs	r0, #213	@ 0xd5
 8006274:	f7ff ff94 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006278:	20f0      	movs	r0, #240	@ 0xf0
 800627a:	f7ff ff91 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800627e:	20d9      	movs	r0, #217	@ 0xd9
 8006280:	f7ff ff8e 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006284:	2022      	movs	r0, #34	@ 0x22
 8006286:	f7ff ff8b 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800628a:	20da      	movs	r0, #218	@ 0xda
 800628c:	f7ff ff88 	bl	80061a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006290:	2012      	movs	r0, #18
 8006292:	f7ff ff85 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006296:	20db      	movs	r0, #219	@ 0xdb
 8006298:	f7ff ff82 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800629c:	2020      	movs	r0, #32
 800629e:	f7ff ff7f 	bl	80061a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80062a2:	208d      	movs	r0, #141	@ 0x8d
 80062a4:	f7ff ff7c 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80062a8:	2014      	movs	r0, #20
 80062aa:	f7ff ff79 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80062ae:	2001      	movs	r0, #1
 80062b0:	f000 fad0 	bl	8006854 <ssd1306_SetDisplayOn>

    // Clear screen (logical)
    ssd1306_Fill(Black);
 80062b4:	2000      	movs	r0, #0
 80062b6:	f000 f82f 	bl	8006318 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80062ba:	f000 f845 	bl	8006348 <ssd1306_UpdateScreen>

    // Set default values for screen object (logical coords)
    SSD1306.CurrentX = 0;
 80062be:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <ssd1306_Init+0xd0>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80062c4:	4b03      	ldr	r3, [pc, #12]	@ (80062d4 <ssd1306_Init+0xd0>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80062ca:	4b02      	ldr	r3, [pc, #8]	@ (80062d4 <ssd1306_Init+0xd0>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	711a      	strb	r2, [r3, #4]
}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20004f50 	.word	0x20004f50

080062d8 <ssd1306_SetRotation180>:

void ssd1306_SetRotation180(uint8_t enable) {
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
    g_rotation_180 = (enable ? 1 : 0);
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	4b03      	ldr	r3, [pc, #12]	@ (8006300 <ssd1306_SetRotation180+0x28>)
 80062f2:	701a      	strb	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20004b4c 	.word	0x20004b4c

08006304 <ssd1306_GetRotation180>:

uint8_t ssd1306_GetRotation180(void) {
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
    return g_rotation_180;
 8006308:	4b02      	ldr	r3, [pc, #8]	@ (8006314 <ssd1306_GetRotation180+0x10>)
 800630a:	781b      	ldrb	r3, [r3, #0]
}
 800630c:	4618      	mov	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	20004b4c 	.word	0x20004b4c

08006318 <ssd1306_Fill>:

/* Fill the whole screen with the given color (physical buffer fill) */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <ssd1306_Fill+0x14>
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <ssd1306_Fill+0x16>
 800632c:	23ff      	movs	r3, #255	@ 0xff
 800632e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006332:	4619      	mov	r1, r3
 8006334:	4803      	ldr	r0, [pc, #12]	@ (8006344 <ssd1306_Fill+0x2c>)
 8006336:	f01c f959 	bl	80225ec <memset>
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20004b50 	.word	0x20004b50

08006348 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen (physical pages) */
void ssd1306_UpdateScreen(void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
    // depends on the screen height (physical):
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800634e:	2300      	movs	r3, #0
 8006350:	71fb      	strb	r3, [r7, #7]
 8006352:	e016      	b.n	8006382 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	3b50      	subs	r3, #80	@ 0x50
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff ff20 	bl	80061a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006360:	2000      	movs	r0, #0
 8006362:	f7ff ff1d 	bl	80061a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006366:	2010      	movs	r0, #16
 8006368:	f7ff ff1a 	bl	80061a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	01db      	lsls	r3, r3, #7
 8006370:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <ssd1306_UpdateScreen+0x4c>)
 8006372:	4413      	add	r3, r2
 8006374:	2180      	movs	r1, #128	@ 0x80
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff ff2a 	bl	80061d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	3301      	adds	r3, #1
 8006380:	71fb      	strb	r3, [r7, #7]
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	2b07      	cmp	r3, #7
 8006386:	d9e5      	bls.n	8006354 <ssd1306_UpdateScreen+0xc>
    }
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20004b50 	.word	0x20004b50

08006398 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer (logical coords)
 * X => X Logical Coordinate (0..SSD1306_ROTATED_WIDTH-1)
 * Y => Y Logical Coordinate (0..SSD1306_ROTATED_HEIGHT-1)
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	460b      	mov	r3, r1
 80063a4:	71bb      	strb	r3, [r7, #6]
 80063a6:	4613      	mov	r3, r2
 80063a8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_ROTATED_WIDTH || y >= SSD1306_ROTATED_HEIGHT) {
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80063ae:	d83c      	bhi.n	800642a <ssd1306_DrawPixel+0x92>
 80063b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db38      	blt.n	800642a <ssd1306_DrawPixel+0x92>
        // Don't write outside the logical buffer
        return;
    }

    uint8_t px, py;
    ssd1306_map_logical_to_physical(x, y, &px, &py);
 80063b8:	f107 0309 	add.w	r3, r7, #9
 80063bc:	f107 020a 	add.w	r2, r7, #10
 80063c0:	79b9      	ldrb	r1, [r7, #6]
 80063c2:	79f8      	ldrb	r0, [r7, #7]
 80063c4:	f7ff febe 	bl	8006144 <ssd1306_map_logical_to_physical>

    uint32_t index = (uint32_t)px + ((uint32_t)(py / 8) * SSD1306_WIDTH);
 80063c8:	7abb      	ldrb	r3, [r7, #10]
 80063ca:	461a      	mov	r2, r3
 80063cc:	7a7b      	ldrb	r3, [r7, #9]
 80063ce:	08db      	lsrs	r3, r3, #3
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	4413      	add	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
    uint8_t mask = (uint8_t)(1 << (py % 8));
 80063d8:	7a7b      	ldrb	r3, [r7, #9]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2201      	movs	r2, #1
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	72fb      	strb	r3, [r7, #11]

    if (color == White) {
 80063e6:	797b      	ldrb	r3, [r7, #5]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d10c      	bne.n	8006406 <ssd1306_DrawPixel+0x6e>
        SSD1306_Buffer[index] |= mask;
 80063ec:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <ssd1306_DrawPixel+0x9c>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b2d9      	uxtb	r1, r3
 80063fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006434 <ssd1306_DrawPixel+0x9c>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	460a      	mov	r2, r1
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e012      	b.n	800642c <ssd1306_DrawPixel+0x94>
    } else {
        SSD1306_Buffer[index] &= ~mask;
 8006406:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <ssd1306_DrawPixel+0x9c>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	b25a      	sxtb	r2, r3
 8006410:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006414:	43db      	mvns	r3, r3
 8006416:	b25b      	sxtb	r3, r3
 8006418:	4013      	ands	r3, r2
 800641a:	b25b      	sxtb	r3, r3
 800641c:	b2d9      	uxtb	r1, r3
 800641e:	4a05      	ldr	r2, [pc, #20]	@ (8006434 <ssd1306_DrawPixel+0x9c>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	460a      	mov	r2, r1
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e000      	b.n	800642c <ssd1306_DrawPixel+0x94>
        return;
 800642a:	bf00      	nop
    }
}
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20004b50 	.word	0x20004b50

08006438 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer (logical coords)
 * ch       => char to write
 * Font     => Font to use
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b089      	sub	sp, #36	@ 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4638      	mov	r0, r7
 8006442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006446:	4623      	mov	r3, r4
 8006448:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b1f      	cmp	r3, #31
 800644e:	d902      	bls.n	8006456 <ssd1306_WriteChar+0x1e>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b7e      	cmp	r3, #126	@ 0x7e
 8006454:	d901      	bls.n	800645a <ssd1306_WriteChar+0x22>
        return 0;
 8006456:	2300      	movs	r3, #0
 8006458:	e079      	b.n	800654e <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <ssd1306_WriteChar+0x34>
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	3b20      	subs	r3, #32
 8006466:	4413      	add	r3, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	e000      	b.n	800646e <ssd1306_WriteChar+0x36>
 800646c:	783b      	ldrb	r3, [r7, #0]
 800646e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line (logical)
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006470:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <ssd1306_WriteChar+0x120>)
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	4413      	add	r3, r2
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	dc06      	bgt.n	800648c <ssd1306_WriteChar+0x54>
        SSD1306_ROTATED_HEIGHT < (SSD1306.CurrentY + Font.height))
 800647e:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <ssd1306_WriteChar+0x120>)
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	461a      	mov	r2, r3
 8006484:	787b      	ldrb	r3, [r7, #1]
 8006486:	4413      	add	r3, r2
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006488:	2b80      	cmp	r3, #128	@ 0x80
 800648a:	dd01      	ble.n	8006490 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800648c:	2300      	movs	r3, #0
 800648e:	e05e      	b.n	800654e <ssd1306_WriteChar+0x116>
    }

    // Use the font to write (font expected to be in conventional orientation;
    // since DrawPixel maps logical->physical, characters will be rotated accordingly)
    for(i = 0; i < Font.height; i++) {
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e04d      	b.n	8006532 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	3b20      	subs	r3, #32
 800649c:	7879      	ldrb	r1, [r7, #1]
 800649e:	fb01 f303 	mul.w	r3, r1, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	440b      	add	r3, r1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e036      	b.n	8006524 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80064c6:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <ssd1306_WriteChar+0x120>)
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	b2d8      	uxtb	r0, r3
 80064d4:	4b20      	ldr	r3, [pc, #128]	@ (8006558 <ssd1306_WriteChar+0x120>)
 80064d6:	885b      	ldrh	r3, [r3, #2]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	4413      	add	r3, r2
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80064e6:	4619      	mov	r1, r3
 80064e8:	f7ff ff56 	bl	8006398 <ssd1306_DrawPixel>
 80064ec:	e017      	b.n	800651e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <ssd1306_WriteChar+0x120>)
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	b2d8      	uxtb	r0, r3
 80064fc:	4b16      	ldr	r3, [pc, #88]	@ (8006558 <ssd1306_WriteChar+0x120>)
 80064fe:	885b      	ldrh	r3, [r3, #2]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4413      	add	r3, r2
 8006508:	b2d9      	uxtb	r1, r3
 800650a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	f7ff ff3d 	bl	8006398 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	3301      	adds	r3, #1
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	429a      	cmp	r2, r3
 800652a:	d3c4      	bcc.n	80064b6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	3301      	adds	r3, #1
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	787b      	ldrb	r3, [r7, #1]
 8006534:	461a      	mov	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4293      	cmp	r3, r2
 800653a:	d3ac      	bcc.n	8006496 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <ssd1306_WriteChar+0x120>)
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	b29b      	uxth	r3, r3
 8006544:	4413      	add	r3, r2
 8006546:	b29a      	uxth	r2, r3
 8006548:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <ssd1306_WriteChar+0x120>)
 800654a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3724      	adds	r7, #36	@ 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}
 8006556:	bf00      	nop
 8006558:	20004f50 	.word	0x20004f50

0800655c <ssd1306_WriteString>:

/* Write full string to screenbuffer (logical) */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	4638      	mov	r0, r7
 8006566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800656a:	e013      	b.n	8006594 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	7818      	ldrb	r0, [r3, #0]
 8006570:	7e3b      	ldrb	r3, [r7, #24]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	463b      	mov	r3, r7
 8006576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006578:	f7ff ff5e 	bl	8006438 <ssd1306_WriteChar>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d002      	beq.n	800658e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	e008      	b.n	80065a0 <ssd1306_WriteString+0x44>
        }
        str++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e7      	bne.n	800656c <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	781b      	ldrb	r3, [r3, #0]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <ssd1306_SetCursor>:

/* Position the cursor (logical) */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	460a      	mov	r2, r1
 80065b2:	71fb      	strb	r3, [r7, #7]
 80065b4:	4613      	mov	r3, r2
 80065b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <ssd1306_SetCursor+0x2c>)
 80065be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80065c0:	79bb      	ldrb	r3, [r7, #6]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	4b03      	ldr	r3, [pc, #12]	@ (80065d4 <ssd1306_SetCursor+0x2c>)
 80065c6:	805a      	strh	r2, [r3, #2]
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20004f50 	.word	0x20004f50

080065d8 <ssd1306_Line>:

/* Draw line by Bresenham's algorithm (logical coords) */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b089      	sub	sp, #36	@ 0x24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4623      	mov	r3, r4
 80065e8:	71fb      	strb	r3, [r7, #7]
 80065ea:	4603      	mov	r3, r0
 80065ec:	71bb      	strb	r3, [r7, #6]
 80065ee:	460b      	mov	r3, r1
 80065f0:	717b      	strb	r3, [r7, #5]
 80065f2:	4613      	mov	r3, r2
 80065f4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs((int32_t)x2 - (int32_t)x1);
 80065f6:	797a      	ldrb	r2, [r7, #5]
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bfb8      	it	lt
 8006600:	425b      	neglt	r3, r3
 8006602:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs((int32_t)y2 - (int32_t)y1);
 8006604:	793a      	ldrb	r2, [r7, #4]
 8006606:	79bb      	ldrb	r3, [r7, #6]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfb8      	it	lt
 800660e:	425b      	neglt	r3, r3
 8006610:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8006612:	79fa      	ldrb	r2, [r7, #7]
 8006614:	797b      	ldrb	r3, [r7, #5]
 8006616:	429a      	cmp	r2, r3
 8006618:	d201      	bcs.n	800661e <ssd1306_Line+0x46>
 800661a:	2301      	movs	r3, #1
 800661c:	e001      	b.n	8006622 <ssd1306_Line+0x4a>
 800661e:	f04f 33ff 	mov.w	r3, #4294967295
 8006622:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8006624:	79ba      	ldrb	r2, [r7, #6]
 8006626:	793b      	ldrb	r3, [r7, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d201      	bcs.n	8006630 <ssd1306_Line+0x58>
 800662c:	2301      	movs	r3, #1
 800662e:	e001      	b.n	8006634 <ssd1306_Line+0x5c>
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 800663e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006642:	7939      	ldrb	r1, [r7, #4]
 8006644:	797b      	ldrb	r3, [r7, #5]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fea6 	bl	8006398 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800664c:	e024      	b.n	8006698 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800664e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006652:	79b9      	ldrb	r1, [r7, #6]
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fe9e 	bl	8006398 <ssd1306_DrawPixel>
        error2 = error * 2;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	425b      	negs	r3, r3
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	dd08      	ble.n	800667e <ssd1306_Line+0xa6>
            error -= deltaY;
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	4413      	add	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	429a      	cmp	r2, r3
 8006684:	da08      	bge.n	8006698 <ssd1306_Line+0xc0>
            error += deltaX;
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	4413      	add	r3, r2
 800668c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	79bb      	ldrb	r3, [r7, #6]
 8006694:	4413      	add	r3, r2
 8006696:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006698:	79fa      	ldrb	r2, [r7, #7]
 800669a:	797b      	ldrb	r3, [r7, #5]
 800669c:	429a      	cmp	r2, r3
 800669e:	d1d6      	bne.n	800664e <ssd1306_Line+0x76>
 80066a0:	79ba      	ldrb	r2, [r7, #6]
 80066a2:	793b      	ldrb	r3, [r7, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d1d2      	bne.n	800664e <ssd1306_Line+0x76>
        }
    }
    return;
 80066a8:	bf00      	nop
}
 80066aa:	3724      	adds	r7, #36	@ 0x24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd90      	pop	{r4, r7, pc}

080066b0 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenham's algorithm (logical) */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	4623      	mov	r3, r4
 80066c0:	71fb      	strb	r3, [r7, #7]
 80066c2:	4603      	mov	r3, r0
 80066c4:	71bb      	strb	r3, [r7, #6]
 80066c6:	460b      	mov	r3, r1
 80066c8:	717b      	strb	r3, [r7, #5]
 80066ca:	4613      	mov	r3, r2
 80066cc:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80066ce:	797b      	ldrb	r3, [r7, #5]
 80066d0:	425b      	negs	r3, r3
 80066d2:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80066d8:	797b      	ldrb	r3, [r7, #5]
 80066da:	f1c3 0301 	rsb	r3, r3, #1
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_ROTATED_WIDTH || par_y >= SSD1306_ROTATED_HEIGHT) {
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80066e6:	d866      	bhi.n	80067b6 <ssd1306_DrawCircle+0x106>
 80066e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db62      	blt.n	80067b6 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	79fa      	ldrb	r2, [r7, #7]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	b2d8      	uxtb	r0, r3
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	79bb      	ldrb	r3, [r7, #6]
 8006700:	4413      	add	r3, r2
 8006702:	b2db      	uxtb	r3, r3
 8006704:	793a      	ldrb	r2, [r7, #4]
 8006706:	4619      	mov	r1, r3
 8006708:	f7ff fe46 	bl	8006398 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	4413      	add	r3, r2
 8006714:	b2d8      	uxtb	r0, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	79bb      	ldrb	r3, [r7, #6]
 800671c:	4413      	add	r3, r2
 800671e:	b2db      	uxtb	r3, r3
 8006720:	793a      	ldrb	r2, [r7, #4]
 8006722:	4619      	mov	r1, r3
 8006724:	f7ff fe38 	bl	8006398 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	4413      	add	r3, r2
 8006730:	b2d8      	uxtb	r0, r3
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	79ba      	ldrb	r2, [r7, #6]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	793a      	ldrb	r2, [r7, #4]
 800673e:	4619      	mov	r1, r3
 8006740:	f7ff fe2a 	bl	8006398 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	79fa      	ldrb	r2, [r7, #7]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	b2d8      	uxtb	r0, r3
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	79ba      	ldrb	r2, [r7, #6]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	b2db      	uxtb	r3, r3
 8006758:	793a      	ldrb	r2, [r7, #4]
 800675a:	4619      	mov	r1, r3
 800675c:	f7ff fe1c 	bl	8006398 <ssd1306_DrawPixel>
        e2 = err;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	dc13      	bgt.n	8006794 <ssd1306_DrawCircle+0xe4>
            y++;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3301      	adds	r3, #1
 8006770:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	3301      	adds	r3, #1
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	425b      	negs	r3, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d105      	bne.n	8006794 <ssd1306_DrawCircle+0xe4>
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	429a      	cmp	r2, r3
 800678e:	dc01      	bgt.n	8006794 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	429a      	cmp	r2, r3
 800679a:	dd08      	ble.n	80067ae <ssd1306_DrawCircle+0xfe>
            x++;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3301      	adds	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	3301      	adds	r3, #1
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dd9d      	ble.n	80066f0 <ssd1306_DrawCircle+0x40>

    return;
 80067b4:	e000      	b.n	80067b8 <ssd1306_DrawCircle+0x108>
        return;
 80067b6:	bf00      	nop
}
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}

080067be <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle (logical) */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80067be:	b590      	push	{r4, r7, lr}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af02      	add	r7, sp, #8
 80067c4:	4604      	mov	r4, r0
 80067c6:	4608      	mov	r0, r1
 80067c8:	4611      	mov	r1, r2
 80067ca:	461a      	mov	r2, r3
 80067cc:	4623      	mov	r3, r4
 80067ce:	71fb      	strb	r3, [r7, #7]
 80067d0:	4603      	mov	r3, r0
 80067d2:	71bb      	strb	r3, [r7, #6]
 80067d4:	460b      	mov	r3, r1
 80067d6:	717b      	strb	r3, [r7, #5]
 80067d8:	4613      	mov	r3, r2
 80067da:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80067dc:	79bc      	ldrb	r4, [r7, #6]
 80067de:	797a      	ldrb	r2, [r7, #5]
 80067e0:	79b9      	ldrb	r1, [r7, #6]
 80067e2:	79f8      	ldrb	r0, [r7, #7]
 80067e4:	7e3b      	ldrb	r3, [r7, #24]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	4623      	mov	r3, r4
 80067ea:	f7ff fef5 	bl	80065d8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80067ee:	793c      	ldrb	r4, [r7, #4]
 80067f0:	797a      	ldrb	r2, [r7, #5]
 80067f2:	79b9      	ldrb	r1, [r7, #6]
 80067f4:	7978      	ldrb	r0, [r7, #5]
 80067f6:	7e3b      	ldrb	r3, [r7, #24]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	4623      	mov	r3, r4
 80067fc:	f7ff feec 	bl	80065d8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8006800:	793c      	ldrb	r4, [r7, #4]
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	7939      	ldrb	r1, [r7, #4]
 8006806:	7978      	ldrb	r0, [r7, #5]
 8006808:	7e3b      	ldrb	r3, [r7, #24]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	4623      	mov	r3, r4
 800680e:	f7ff fee3 	bl	80065d8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8006812:	79bc      	ldrb	r4, [r7, #6]
 8006814:	79fa      	ldrb	r2, [r7, #7]
 8006816:	7939      	ldrb	r1, [r7, #4]
 8006818:	79f8      	ldrb	r0, [r7, #7]
 800681a:	7e3b      	ldrb	r3, [r7, #24]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4623      	mov	r3, r4
 8006820:	f7ff feda 	bl	80065d8 <ssd1306_Line>

    return;
 8006824:	bf00      	nop
}
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}

0800682c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006836:	2381      	movs	r3, #129	@ 0x81
 8006838:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fcaf 	bl	80061a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fcab 	bl	80061a0 <ssd1306_WriteCommand>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006864:	23af      	movs	r3, #175	@ 0xaf
 8006866:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <ssd1306_SetDisplayOn+0x38>)
 800686a:	2201      	movs	r2, #1
 800686c:	715a      	strb	r2, [r3, #5]
 800686e:	e004      	b.n	800687a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006870:	23ae      	movs	r3, #174	@ 0xae
 8006872:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <ssd1306_SetDisplayOn+0x38>)
 8006876:	2200      	movs	r2, #0
 8006878:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fc8f 	bl	80061a0 <ssd1306_WriteCommand>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20004f50 	.word	0x20004f50

08006890 <ssd1306_FillRect>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	4603      	mov	r3, r0
 80068a4:	71bb      	strb	r3, [r7, #6]
 80068a6:	460b      	mov	r3, r1
 80068a8:	717b      	strb	r3, [r7, #5]
 80068aa:	4613      	mov	r3, r2
 80068ac:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = y; i < y + h; i++) {
 80068ae:	79bb      	ldrb	r3, [r7, #6]
 80068b0:	73fb      	strb	r3, [r7, #15]
 80068b2:	e015      	b.n	80068e0 <ssd1306_FillRect+0x50>
        for (uint8_t j = x; j < x + w; j++) {
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	73bb      	strb	r3, [r7, #14]
 80068b8:	e009      	b.n	80068ce <ssd1306_FillRect+0x3e>
            ssd1306_DrawPixel(j, i, color);
 80068ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80068be:	7bf9      	ldrb	r1, [r7, #15]
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fd68 	bl	8006398 <ssd1306_DrawPixel>
        for (uint8_t j = x; j < x + w; j++) {
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	3301      	adds	r3, #1
 80068cc:	73bb      	strb	r3, [r7, #14]
 80068ce:	7bba      	ldrb	r2, [r7, #14]
 80068d0:	79f9      	ldrb	r1, [r7, #7]
 80068d2:	797b      	ldrb	r3, [r7, #5]
 80068d4:	440b      	add	r3, r1
 80068d6:	429a      	cmp	r2, r3
 80068d8:	dbef      	blt.n	80068ba <ssd1306_FillRect+0x2a>
    for (uint8_t i = y; i < y + h; i++) {
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	3301      	adds	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	7bfa      	ldrb	r2, [r7, #15]
 80068e2:	79b9      	ldrb	r1, [r7, #6]
 80068e4:	793b      	ldrb	r3, [r7, #4]
 80068e6:	440b      	add	r3, r1
 80068e8:	429a      	cmp	r2, r3
 80068ea:	dbe3      	blt.n	80068b4 <ssd1306_FillRect+0x24>
        }
    }
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}
	...

080068f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80068fc:	f7fd f93c 	bl	8003b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006900:	480c      	ldr	r0, [pc, #48]	@ (8006934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006902:	490d      	ldr	r1, [pc, #52]	@ (8006938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006904:	4a0d      	ldr	r2, [pc, #52]	@ (800693c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006908:	e002      	b.n	8006910 <LoopCopyDataInit>

0800690a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800690a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800690c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800690e:	3304      	adds	r3, #4

08006910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006914:	d3f9      	bcc.n	800690a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006918:	4c0a      	ldr	r4, [pc, #40]	@ (8006944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800691a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800691c:	e001      	b.n	8006922 <LoopFillZerobss>

0800691e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800691e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006920:	3204      	adds	r2, #4

08006922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006924:	d3fb      	bcc.n	800691e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006926:	f01b ff51 	bl	80227cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800692a:	f7fb fea5 	bl	8002678 <main>
  bx  lr
 800692e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006930:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8006934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006938:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 800693c:	08031a70 	.word	0x08031a70
  ldr r2, =_sbss
 8006940:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8006944:	2000c068 	.word	0x2000c068

08006948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006948:	e7fe      	b.n	8006948 <ADC_IRQHandler>
	...

0800694c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006950:	4b0e      	ldr	r3, [pc, #56]	@ (800698c <HAL_Init+0x40>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0d      	ldr	r2, [pc, #52]	@ (800698c <HAL_Init+0x40>)
 8006956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800695a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800695c:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <HAL_Init+0x40>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_Init+0x40>)
 8006962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006968:	4b08      	ldr	r3, [pc, #32]	@ (800698c <HAL_Init+0x40>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a07      	ldr	r2, [pc, #28]	@ (800698c <HAL_Init+0x40>)
 800696e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006974:	2003      	movs	r0, #3
 8006976:	f000 fd23 	bl	80073c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800697a:	200f      	movs	r0, #15
 800697c:	f000 f808 	bl	8006990 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006980:	f7fc feb0 	bl	80036e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40023c00 	.word	0x40023c00

08006990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006998:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <HAL_InitTick+0x54>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <HAL_InitTick+0x58>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fd3b 	bl	800742a <HAL_SYSTICK_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e00e      	b.n	80069dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b0f      	cmp	r3, #15
 80069c2:	d80a      	bhi.n	80069da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069c4:	2200      	movs	r2, #0
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	f000 fd03 	bl	80073d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069d0:	4a06      	ldr	r2, [pc, #24]	@ (80069ec <HAL_InitTick+0x5c>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000070 	.word	0x20000070
 80069e8:	200000cc 	.word	0x200000cc
 80069ec:	200000c8 	.word	0x200000c8

080069f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069f4:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <HAL_IncTick+0x1c>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <HAL_IncTick+0x20>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	4a03      	ldr	r2, [pc, #12]	@ (8006a10 <HAL_IncTick+0x20>)
 8006a02:	6013      	str	r3, [r2, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	200000cc 	.word	0x200000cc
 8006a10:	20004f58 	.word	0x20004f58

08006a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return uwTick;
 8006a18:	4b02      	ldr	r3, [pc, #8]	@ (8006a24 <HAL_GetTick+0x10>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	20004f58 	.word	0x20004f58

08006a28 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a30:	f7ff fff0 	bl	8006a14 <HAL_GetTick>
 8006a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d005      	beq.n	8006a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_Delay+0x44>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a4e:	bf00      	nop
 8006a50:	f7ff ffe0 	bl	8006a14 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d8f7      	bhi.n	8006a50 <HAL_Delay+0x28>
  {
  }
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200000cc 	.word	0x200000cc

08006a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e033      	b.n	8006aee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc fe4e 	bl	8003730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d118      	bne.n	8006ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006ab6:	f023 0302 	bic.w	r3, r3, #2
 8006aba:	f043 0202 	orr.w	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa28 	bl	8006f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ade:	e001      	b.n	8006ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_ADC_Start_DMA+0x1e>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e0bc      	b.n	8006c90 <HAL_ADC_Start_DMA+0x198>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d018      	beq.n	8006b5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b3c:	4b56      	ldr	r3, [pc, #344]	@ (8006c98 <HAL_ADC_Start_DMA+0x1a0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a56      	ldr	r2, [pc, #344]	@ (8006c9c <HAL_ADC_Start_DMA+0x1a4>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0c9a      	lsrs	r2, r3, #18
 8006b48:	4613      	mov	r3, r2
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006b50:	e002      	b.n	8006b58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f9      	bne.n	8006b52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f040 8084 	bne.w	8006c76 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bac:	d106      	bne.n	8006bbc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f023 0206 	bic.w	r2, r3, #6
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bba:	e002      	b.n	8006bc2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	4a34      	ldr	r2, [pc, #208]	@ (8006ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8006bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	4a33      	ldr	r2, [pc, #204]	@ (8006ca4 <HAL_ADC_Start_DMA+0x1ac>)
 8006bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <HAL_ADC_Start_DMA+0x1b0>)
 8006be0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006bea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006bfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	334c      	adds	r3, #76	@ 0x4c
 8006c16:	4619      	mov	r1, r3
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f000 fcc0 	bl	80075a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006c20:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <HAL_ADC_Start_DMA+0x1b4>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10f      	bne.n	8006c4c <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d129      	bne.n	8006c8e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	e020      	b.n	8006c8e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <HAL_ADC_Start_DMA+0x1b8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d11b      	bne.n	8006c8e <HAL_ADC_Start_DMA+0x196>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d114      	bne.n	8006c8e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	e00b      	b.n	8006c8e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f043 0210 	orr.w	r2, r3, #16
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c86:	f043 0201 	orr.w	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000070 	.word	0x20000070
 8006c9c:	431bde83 	.word	0x431bde83
 8006ca0:	08007125 	.word	0x08007125
 8006ca4:	080071df 	.word	0x080071df
 8006ca8:	080071fb 	.word	0x080071fb
 8006cac:	40012300 	.word	0x40012300
 8006cb0:	40012000 	.word	0x40012000

08006cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x1c>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e103      	b.n	8006efc <HAL_ADC_ConfigChannel+0x224>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	d925      	bls.n	8006d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68d9      	ldr	r1, [r3, #12]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	3b1e      	subs	r3, #30
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43da      	mvns	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	400a      	ands	r2, r1
 8006d28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68d9      	ldr	r1, [r3, #12]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	4403      	add	r3, r0
 8006d42:	3b1e      	subs	r3, #30
 8006d44:	409a      	lsls	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	e022      	b.n	8006d96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6919      	ldr	r1, [r3, #16]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4613      	mov	r3, r2
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4413      	add	r3, r2
 8006d64:	2207      	movs	r2, #7
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	43da      	mvns	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	400a      	ands	r2, r1
 8006d72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6919      	ldr	r1, [r3, #16]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4618      	mov	r0, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4403      	add	r3, r0
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b06      	cmp	r3, #6
 8006d9c:	d824      	bhi.n	8006de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	3b05      	subs	r3, #5
 8006db0:	221f      	movs	r2, #31
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43da      	mvns	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4618      	mov	r0, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3b05      	subs	r3, #5
 8006dda:	fa00 f203 	lsl.w	r2, r0, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006de6:	e04c      	b.n	8006e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b0c      	cmp	r3, #12
 8006dee:	d824      	bhi.n	8006e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	3b23      	subs	r3, #35	@ 0x23
 8006e02:	221f      	movs	r2, #31
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	43da      	mvns	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	400a      	ands	r2, r1
 8006e10:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4618      	mov	r0, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	3b23      	subs	r3, #35	@ 0x23
 8006e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e38:	e023      	b.n	8006e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	3b41      	subs	r3, #65	@ 0x41
 8006e4c:	221f      	movs	r2, #31
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	43da      	mvns	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	400a      	ands	r2, r1
 8006e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4618      	mov	r0, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	3b41      	subs	r3, #65	@ 0x41
 8006e76:	fa00 f203 	lsl.w	r2, r0, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <HAL_ADC_ConfigChannel+0x230>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d109      	bne.n	8006ea0 <HAL_ADC_ConfigChannel+0x1c8>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b12      	cmp	r3, #18
 8006e92:	d105      	bne.n	8006ea0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006e94:	4b1d      	ldr	r3, [pc, #116]	@ (8006f0c <HAL_ADC_ConfigChannel+0x234>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	@ (8006f0c <HAL_ADC_ConfigChannel+0x234>)
 8006e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e9e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a18      	ldr	r2, [pc, #96]	@ (8006f08 <HAL_ADC_ConfigChannel+0x230>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d123      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x21a>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d003      	beq.n	8006eba <HAL_ADC_ConfigChannel+0x1e2>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b11      	cmp	r3, #17
 8006eb8:	d11b      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006eba:	4b14      	ldr	r3, [pc, #80]	@ (8006f0c <HAL_ADC_ConfigChannel+0x234>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	@ (8006f0c <HAL_ADC_ConfigChannel+0x234>)
 8006ec0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ec4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d111      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ece:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <HAL_ADC_ConfigChannel+0x238>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <HAL_ADC_ConfigChannel+0x23c>)
 8006ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed8:	0c9a      	lsrs	r2, r3, #18
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006ee4:	e002      	b.n	8006eec <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f9      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012000 	.word	0x40012000
 8006f0c:	40012300 	.word	0x40012300
 8006f10:	20000070 	.word	0x20000070
 8006f14:	431bde83 	.word	0x431bde83

08006f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006f20:	4b7e      	ldr	r3, [pc, #504]	@ (800711c <ADC_Init+0x204>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a7d      	ldr	r2, [pc, #500]	@ (800711c <ADC_Init+0x204>)
 8006f26:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006f2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800711c <ADC_Init+0x204>)
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	4979      	ldr	r1, [pc, #484]	@ (800711c <ADC_Init+0x204>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	021a      	lsls	r2, r3, #8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6899      	ldr	r1, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8007120 <ADC_Init+0x208>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d022      	beq.n	8006ff2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6899      	ldr	r1, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6899      	ldr	r1, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	e00f      	b.n	8007012 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0202 	bic.w	r2, r2, #2
 8007020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6899      	ldr	r1, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7e1b      	ldrb	r3, [r3, #24]
 800702c:	005a      	lsls	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d027      	beq.n	8007090 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800704e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800705e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	3b01      	subs	r3, #1
 8007066:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800706a:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	fa92 f2a2 	rbit	r2, r2
 8007072:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	fab2 f282 	clz	r2, r2
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	fa03 f102 	lsl.w	r1, r3, r2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	e007      	b.n	80070a0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800709e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	051a      	lsls	r2, r3, #20
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80070d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6899      	ldr	r1, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070e2:	025a      	lsls	r2, r3, #9
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6899      	ldr	r1, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	029a      	lsls	r2, r3, #10
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40012300 	.word	0x40012300
 8007120:	0f000001 	.word	0x0f000001

08007124 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800713a:	2b00      	cmp	r3, #0
 800713c:	d13c      	bne.n	80071b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d12b      	bne.n	80071b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800715c:	2b00      	cmp	r3, #0
 800715e:	d127      	bne.n	80071b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007178:	2b00      	cmp	r3, #0
 800717a:	d119      	bne.n	80071b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0220 	bic.w	r2, r2, #32
 800718a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	f043 0201 	orr.w	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7fa fb77 	bl	80018a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071b6:	e00e      	b.n	80071d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fd7e 	bl	8006cc6 <HAL_ADC_ErrorCallback>
}
 80071ca:	e004      	b.n	80071d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fd61 	bl	8006cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2240      	movs	r2, #64	@ 0x40
 800720c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	f043 0204 	orr.w	r2, r3, #4
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff fd53 	bl	8006cc6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <__NVIC_SetPriorityGrouping>:
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007238:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <__NVIC_SetPriorityGrouping+0x44>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007244:	4013      	ands	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800725a:	4a04      	ldr	r2, [pc, #16]	@ (800726c <__NVIC_SetPriorityGrouping+0x44>)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	60d3      	str	r3, [r2, #12]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	e000ed00 	.word	0xe000ed00

08007270 <__NVIC_GetPriorityGrouping>:
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007274:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <__NVIC_GetPriorityGrouping+0x18>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 0307 	and.w	r3, r3, #7
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	e000ed00 	.word	0xe000ed00

0800728c <__NVIC_EnableIRQ>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	2b00      	cmp	r3, #0
 800729c:	db0b      	blt.n	80072b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	f003 021f 	and.w	r2, r3, #31
 80072a4:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <__NVIC_EnableIRQ+0x34>)
 80072a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2001      	movs	r0, #1
 80072ae:	fa00 f202 	lsl.w	r2, r0, r2
 80072b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr
 80072c0:	e000e100 	.word	0xe000e100

080072c4 <__NVIC_SetPriority>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	db0a      	blt.n	80072ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	490c      	ldr	r1, [pc, #48]	@ (8007310 <__NVIC_SetPriority+0x4c>)
 80072de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e2:	0112      	lsls	r2, r2, #4
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	440b      	add	r3, r1
 80072e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072ec:	e00a      	b.n	8007304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4908      	ldr	r1, [pc, #32]	@ (8007314 <__NVIC_SetPriority+0x50>)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	3b04      	subs	r3, #4
 80072fc:	0112      	lsls	r2, r2, #4
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	440b      	add	r3, r1
 8007302:	761a      	strb	r2, [r3, #24]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	e000e100 	.word	0xe000e100
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <NVIC_EncodePriority>:
{
 8007318:	b480      	push	{r7}
 800731a:	b089      	sub	sp, #36	@ 0x24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f1c3 0307 	rsb	r3, r3, #7
 8007332:	2b04      	cmp	r3, #4
 8007334:	bf28      	it	cs
 8007336:	2304      	movcs	r3, #4
 8007338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	3304      	adds	r3, #4
 800733e:	2b06      	cmp	r3, #6
 8007340:	d902      	bls.n	8007348 <NVIC_EncodePriority+0x30>
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	3b03      	subs	r3, #3
 8007346:	e000      	b.n	800734a <NVIC_EncodePriority+0x32>
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800734c:	f04f 32ff 	mov.w	r2, #4294967295
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43da      	mvns	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	401a      	ands	r2, r3
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007360:	f04f 31ff 	mov.w	r1, #4294967295
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	fa01 f303 	lsl.w	r3, r1, r3
 800736a:	43d9      	mvns	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007370:	4313      	orrs	r3, r2
}
 8007372:	4618      	mov	r0, r3
 8007374:	3724      	adds	r7, #36	@ 0x24
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3b01      	subs	r3, #1
 8007388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800738c:	d301      	bcc.n	8007392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800738e:	2301      	movs	r3, #1
 8007390:	e00f      	b.n	80073b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <SysTick_Config+0x40>)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3b01      	subs	r3, #1
 8007398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800739a:	210f      	movs	r1, #15
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	f7ff ff90 	bl	80072c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <SysTick_Config+0x40>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073aa:	4b04      	ldr	r3, [pc, #16]	@ (80073bc <SysTick_Config+0x40>)
 80073ac:	2207      	movs	r2, #7
 80073ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000e010 	.word	0xe000e010

080073c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff2d 	bl	8007228 <__NVIC_SetPriorityGrouping>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4603      	mov	r3, r0
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073e8:	f7ff ff42 	bl	8007270 <__NVIC_GetPriorityGrouping>
 80073ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f7ff ff90 	bl	8007318 <NVIC_EncodePriority>
 80073f8:	4602      	mov	r2, r0
 80073fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073fe:	4611      	mov	r1, r2
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff ff5f 	bl	80072c4 <__NVIC_SetPriority>
}
 8007406:	bf00      	nop
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	4603      	mov	r3, r0
 8007416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff ff35 	bl	800728c <__NVIC_EnableIRQ>
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ffa2 	bl	800737c <SysTick_Config>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007450:	f7ff fae0 	bl	8006a14 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e099      	b.n	8007594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007480:	e00f      	b.n	80074a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007482:	f7ff fac7 	bl	8006a14 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b05      	cmp	r3, #5
 800748e:	d908      	bls.n	80074a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2203      	movs	r2, #3
 800749a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e078      	b.n	8007594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e8      	bne.n	8007482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4b38      	ldr	r3, [pc, #224]	@ (800759c <HAL_DMA_Init+0x158>)
 80074bc:	4013      	ands	r3, r2
 80074be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d107      	bne.n	800750c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007504:	4313      	orrs	r3, r2
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0307 	bic.w	r3, r3, #7
 8007522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007532:	2b04      	cmp	r3, #4
 8007534:	d117      	bne.n	8007566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa6d 	bl	8007a28 <DMA_CheckFifoParam>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2240      	movs	r2, #64	@ 0x40
 8007558:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007562:	2301      	movs	r3, #1
 8007564:	e016      	b.n	8007594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa26 	bl	80079c0 <DMA_CalcBaseAndBitshift>
 8007574:	4603      	mov	r3, r0
 8007576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757c:	223f      	movs	r2, #63	@ 0x3f
 800757e:	409a      	lsls	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	f010803f 	.word	0xf010803f

080075a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_DMA_Start_IT+0x26>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e040      	b.n	8007648 <HAL_DMA_Start_IT+0xa8>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d12f      	bne.n	800763a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f9b8 	bl	8007964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f8:	223f      	movs	r2, #63	@ 0x3f
 80075fa:	409a      	lsls	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0216 	orr.w	r2, r2, #22
 800760e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e005      	b.n	8007646 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007642:	2302      	movs	r3, #2
 8007644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800765c:	4b8e      	ldr	r3, [pc, #568]	@ (8007898 <HAL_DMA_IRQHandler+0x248>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a8e      	ldr	r2, [pc, #568]	@ (800789c <HAL_DMA_IRQHandler+0x24c>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	0a9b      	lsrs	r3, r3, #10
 8007668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767a:	2208      	movs	r2, #8
 800767c:	409a      	lsls	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d013      	beq.n	80076bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0204 	bic.w	r2, r2, #4
 80076a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a8:	2208      	movs	r2, #8
 80076aa:	409a      	lsls	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b4:	f043 0201 	orr.w	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c0:	2201      	movs	r2, #1
 80076c2:	409a      	lsls	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d012      	beq.n	80076f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076de:	2201      	movs	r2, #1
 80076e0:	409a      	lsls	r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f6:	2204      	movs	r2, #4
 80076f8:	409a      	lsls	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d012      	beq.n	8007728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007714:	2204      	movs	r2, #4
 8007716:	409a      	lsls	r2, r3
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007720:	f043 0204 	orr.w	r2, r3, #4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772c:	2210      	movs	r2, #16
 800772e:	409a      	lsls	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d043      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d03c      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	2210      	movs	r2, #16
 800774c:	409a      	lsls	r2, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d018      	beq.n	8007792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d108      	bne.n	8007780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d024      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	e01f      	b.n	80077c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01b      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
 8007790:	e016      	b.n	80077c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0208 	bic.w	r2, r2, #8
 80077ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c4:	2220      	movs	r2, #32
 80077c6:	409a      	lsls	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 808f 	beq.w	80078f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8087 	beq.w	80078f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e6:	2220      	movs	r2, #32
 80077e8:	409a      	lsls	r2, r3
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d136      	bne.n	8007868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0216 	bic.w	r2, r2, #22
 8007808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695a      	ldr	r2, [r3, #20]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <HAL_DMA_IRQHandler+0x1da>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0208 	bic.w	r2, r2, #8
 8007838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783e:	223f      	movs	r2, #63	@ 0x3f
 8007840:	409a      	lsls	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785a:	2b00      	cmp	r3, #0
 800785c:	d07e      	beq.n	800795c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
        }
        return;
 8007866:	e079      	b.n	800795c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01d      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007888:	2b00      	cmp	r3, #0
 800788a:	d031      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	e02c      	b.n	80078f0 <HAL_DMA_IRQHandler+0x2a0>
 8007896:	bf00      	nop
 8007898:	20000070 	.word	0x20000070
 800789c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d023      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
 80078b0:	e01e      	b.n	80078f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10f      	bne.n	80078e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0210 	bic.w	r2, r2, #16
 80078ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d032      	beq.n	800795e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d022      	beq.n	800794a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2205      	movs	r2, #5
 8007908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3301      	adds	r3, #1
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	429a      	cmp	r2, r3
 8007926:	d307      	bcc.n	8007938 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f2      	bne.n	800791c <HAL_DMA_IRQHandler+0x2cc>
 8007936:	e000      	b.n	800793a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007938:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	e000      	b.n	800795e <HAL_DMA_IRQHandler+0x30e>
        return;
 800795c:	bf00      	nop
    }
  }
}
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b40      	cmp	r3, #64	@ 0x40
 8007990:	d108      	bne.n	80079a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079a2:	e007      	b.n	80079b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	60da      	str	r2, [r3, #12]
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr
	...

080079c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3b10      	subs	r3, #16
 80079d0:	4a13      	ldr	r2, [pc, #76]	@ (8007a20 <DMA_CalcBaseAndBitshift+0x60>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079da:	4a12      	ldr	r2, [pc, #72]	@ (8007a24 <DMA_CalcBaseAndBitshift+0x64>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d909      	bls.n	8007a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a00:	e007      	b.n	8007a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	aaaaaaab 	.word	0xaaaaaaab
 8007a24:	0802959c 	.word	0x0802959c

08007a28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11f      	bne.n	8007a82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d856      	bhi.n	8007af6 <DMA_CheckFifoParam+0xce>
 8007a48:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <DMA_CheckFifoParam+0x28>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a73 	.word	0x08007a73
 8007a58:	08007a61 	.word	0x08007a61
 8007a5c:	08007af7 	.word	0x08007af7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d046      	beq.n	8007afa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a70:	e043      	b.n	8007afa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a7a:	d140      	bne.n	8007afe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a80:	e03d      	b.n	8007afe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a8a:	d121      	bne.n	8007ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d837      	bhi.n	8007b02 <DMA_CheckFifoParam+0xda>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <DMA_CheckFifoParam+0x70>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007aaf 	.word	0x08007aaf
 8007aa0:	08007aa9 	.word	0x08007aa9
 8007aa4:	08007ac1 	.word	0x08007ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e030      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d025      	beq.n	8007b06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007abe:	e022      	b.n	8007b06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ac8:	d11f      	bne.n	8007b0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ace:	e01c      	b.n	8007b0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d903      	bls.n	8007ade <DMA_CheckFifoParam+0xb6>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d003      	beq.n	8007ae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007adc:	e018      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae2:	e015      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
      break;
 8007af4:	e00b      	b.n	8007b0e <DMA_CheckFifoParam+0xe6>
      break;
 8007af6:	bf00      	nop
 8007af8:	e00a      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;
 8007afa:	bf00      	nop
 8007afc:	e008      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;
 8007afe:	bf00      	nop
 8007b00:	e006      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;
 8007b02:	bf00      	nop
 8007b04:	e004      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;
 8007b06:	bf00      	nop
 8007b08:	e002      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;   
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <DMA_CheckFifoParam+0xe8>
      break;
 8007b0e:	bf00      	nop
    }
  } 
  
  return status; 
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr

08007b1c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8007b2c:	4ba3      	ldr	r3, [pc, #652]	@ (8007dbc <HAL_ETH_Init+0x2a0>)
 8007b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e173      	b.n	8007e2a <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f003 ff16 	bl	800b988 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60bb      	str	r3, [r7, #8]
 8007b60:	4b97      	ldr	r3, [pc, #604]	@ (8007dc0 <HAL_ETH_Init+0x2a4>)
 8007b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b64:	4a96      	ldr	r2, [pc, #600]	@ (8007dc0 <HAL_ETH_Init+0x2a4>)
 8007b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b6c:	4b94      	ldr	r3, [pc, #592]	@ (8007dc0 <HAL_ETH_Init+0x2a4>)
 8007b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007b78:	4b92      	ldr	r3, [pc, #584]	@ (8007dc4 <HAL_ETH_Init+0x2a8>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a91      	ldr	r2, [pc, #580]	@ (8007dc4 <HAL_ETH_Init+0x2a8>)
 8007b7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b82:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007b84:	4b8f      	ldr	r3, [pc, #572]	@ (8007dc4 <HAL_ETH_Init+0x2a8>)
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	498d      	ldr	r1, [pc, #564]	@ (8007dc4 <HAL_ETH_Init+0x2a8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ba8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007baa:	f7fe ff33 	bl	8006a14 <HAL_GetTick>
 8007bae:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007bb0:	e011      	b.n	8007bd6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8007bb2:	f7fe ff2f 	bl	8006a14 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007bc0:	d909      	bls.n	8007bd6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e129      	b.n	8007e2a <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e4      	bne.n	8007bb2 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f023 031c 	bic.w	r3, r3, #28
 8007bf6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007bf8:	f002 fdfe 	bl	800a7f8 <HAL_RCC_GetHCLKFreq>
 8007bfc:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	4a71      	ldr	r2, [pc, #452]	@ (8007dc8 <HAL_ETH_Init+0x2ac>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d908      	bls.n	8007c18 <HAL_ETH_Init+0xfc>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	4a70      	ldr	r2, [pc, #448]	@ (8007dcc <HAL_ETH_Init+0x2b0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d804      	bhi.n	8007c18 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	e01a      	b.n	8007c4e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8007dcc <HAL_ETH_Init+0x2b0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d908      	bls.n	8007c32 <HAL_ETH_Init+0x116>
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	4a66      	ldr	r2, [pc, #408]	@ (8007dbc <HAL_ETH_Init+0x2a0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d204      	bcs.n	8007c32 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f043 030c 	orr.w	r3, r3, #12
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	e00d      	b.n	8007c4e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	4a61      	ldr	r2, [pc, #388]	@ (8007dbc <HAL_ETH_Init+0x2a0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d303      	bcc.n	8007c42 <HAL_ETH_Init+0x126>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	4a64      	ldr	r2, [pc, #400]	@ (8007dd0 <HAL_ETH_Init+0x2b4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d904      	bls.n	8007c4c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	61fb      	str	r3, [r7, #28]
 8007c4a:	e000      	b.n	8007c4e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8007c4c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007c56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fb8e 	bl	800837e <HAL_ETH_WritePHYRegister>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8007c6c:	6939      	ldr	r1, [r7, #16]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fd44 	bl	80086fc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0d4      	b.n	8007e2a <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8007c80:	20ff      	movs	r0, #255	@ 0xff
 8007c82:	f7fe fed1 	bl	8006a28 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80a2 	beq.w	8007dd4 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c90:	f7fe fec0 	bl	8006a14 <HAL_GetTick>
 8007c94:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb05 	bl	80082ae <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8007ca4:	f7fe feb6 	bl	8006a14 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d90f      	bls.n	8007cd6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007cba:	6939      	ldr	r1, [r7, #16]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fd1d 	bl	80086fc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e0a9      	b.n	8007e2a <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0da      	beq.n	8007c96 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007ce0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb49 	bl	800837e <HAL_ETH_WritePHYRegister>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007cf6:	6939      	ldr	r1, [r7, #16]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fcff 	bl	80086fc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e08f      	b.n	8007e2a <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d0a:	f7fe fe83 	bl	8006a14 <HAL_GetTick>
 8007d0e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007d10:	f107 030c 	add.w	r3, r7, #12
 8007d14:	461a      	mov	r2, r3
 8007d16:	2101      	movs	r1, #1
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fac8 	bl	80082ae <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007d1e:	f7fe fe79 	bl	8006a14 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d90f      	bls.n	8007d50 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007d34:	6939      	ldr	r1, [r7, #16]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fce0 	bl	80086fc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e06c      	b.n	8007e2a <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0da      	beq.n	8007d10 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2110      	movs	r1, #16
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 faa3 	bl	80082ae <HAL_ETH_ReadPHYRegister>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007d72:	6939      	ldr	r1, [r7, #16]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcc1 	bl	80086fc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e051      	b.n	8007e2a <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d96:	60da      	str	r2, [r3, #12]
 8007d98:	e002      	b.n	8007da0 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	e032      	b.n	8007e18 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007db8:	609a      	str	r2, [r3, #8]
 8007dba:	e02d      	b.n	8007e18 <HAL_ETH_Init+0x2fc>
 8007dbc:	03938700 	.word	0x03938700
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	40013800 	.word	0x40013800
 8007dc8:	01312cff 	.word	0x01312cff
 8007dcc:	02160ebf 	.word	0x02160ebf
 8007dd0:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007de4:	4313      	orrs	r3, r2
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fac6 	bl	800837e <HAL_ETH_WritePHYRegister>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007dfc:	6939      	ldr	r1, [r7, #16]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fc7c 	bl	80086fc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e00c      	b.n	8007e2a <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8007e10:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8007e14:	f7fe fe08 	bl	8006a28 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8007e18:	6939      	ldr	r1, [r7, #16]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fc6e 	bl	80086fc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3720      	adds	r7, #32
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop

08007e34 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_ETH_DMATxDescListInit+0x20>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e051      	b.n	8007ef8 <HAL_ETH_DMATxDescListInit+0xc4>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e030      	b.n	8007ed2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	015b      	lsls	r3, r3, #5
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	4413      	add	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d208      	bcs.n	8007ec6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	015b      	lsls	r3, r3, #5
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e002      	b.n	8007ecc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d3ca      	bcc.n	8007e70 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ee4:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b087      	sub	sp, #28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_ETH_DMARxDescListInit+0x20>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e055      	b.n	8007fce <HAL_ETH_DMARxDescListInit+0xcc>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e034      	b.n	8007fa8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	015b      	lsls	r3, r3, #5
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f4e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8007f56:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	461a      	mov	r2, r3
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d105      	bne.n	8007f80 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d208      	bcs.n	8007f9c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	015b      	lsls	r3, r3, #5
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	4413      	add	r3, r2
 8007f94:	461a      	mov	r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	60da      	str	r2, [r3, #12]
 8007f9a:	e002      	b.n	8007fa2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3c6      	bcc.n	8007f3e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fba:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	2300      	movs	r3, #0
 8007fec:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_ETH_TransmitFrame+0x24>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e0cc      	b.n	8008196 <HAL_ETH_TransmitFrame+0x1be>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e0b7      	b.n	8008196 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	da09      	bge.n	8008044 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2212      	movs	r2, #18
 8008034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0a8      	b.n	8008196 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800804a:	4293      	cmp	r3, r2
 800804c:	d915      	bls.n	800807a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	4a53      	ldr	r2, [pc, #332]	@ (80081a0 <HAL_ETH_TransmitFrame+0x1c8>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	0a9b      	lsrs	r3, r3, #10
 8008058:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4b50      	ldr	r3, [pc, #320]	@ (80081a0 <HAL_ETH_TransmitFrame+0x1c8>)
 800805e:	fba3 1302 	umull	r1, r3, r3, r2
 8008062:	0a9b      	lsrs	r3, r3, #10
 8008064:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3301      	adds	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e001      	b.n	800807e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800807a:	2301      	movs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d11c      	bne.n	80080be <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8008092:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800809e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80080ae:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80080bc:	e04b      	b.n	8008156 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e044      	b.n	800814e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80080d2:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80080f2:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d116      	bne.n	800812c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800810c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	4a24      	ldr	r2, [pc, #144]	@ (80081a4 <HAL_ETH_TransmitFrame+0x1cc>)
 8008112:	fb03 f202 	mul.w	r2, r3, r2
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	4413      	add	r3, r2
 800811a:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800811e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800812a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800813a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3301      	adds	r3, #1
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3b6      	bcc.n	80080c4 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00d      	beq.n	8008184 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008170:	461a      	mov	r2, r3
 8008172:	2304      	movs	r3, #4
 8008174:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817e:	461a      	mov	r2, r3
 8008180:	2300      	movs	r3, #0
 8008182:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr
 80081a0:	ac02b00b 	.word	0xac02b00b
 80081a4:	fffffa0c 	.word	0xfffffa0c

080081a8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <HAL_ETH_GetReceivedFrame+0x1a>
 80081be:	2302      	movs	r3, #2
 80081c0:	e070      	b.n	80082a4 <HAL_ETH_GetReceivedFrame+0xfc>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db5a      	blt.n	8008292 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d030      	beq.n	800824c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d103      	bne.n	8008204 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008218:	3b04      	subs	r3, #4
 800821a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e02b      	b.n	80082a4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008256:	2b00      	cmp	r3, #0
 8008258:	d010      	beq.n	800827c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	629a      	str	r2, [r3, #40]	@ 0x28
 800827a:	e00a      	b.n	8008292 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	460b      	mov	r3, r1
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b82      	cmp	r3, #130	@ 0x82
 80082ce:	d101      	bne.n	80082d4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
 80082d2:	e050      	b.n	8008376 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2282      	movs	r2, #130	@ 0x82
 80082d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f003 031c 	and.w	r3, r3, #28
 80082ea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8a1b      	ldrh	r3, [r3, #16]
 80082f0:	02db      	lsls	r3, r3, #11
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80082fa:	897b      	ldrh	r3, [r7, #10]
 80082fc:	019b      	lsls	r3, r3, #6
 80082fe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0302 	bic.w	r3, r3, #2
 800830e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008320:	f7fe fb78 	bl	8006a14 <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008326:	e015      	b.n	8008354 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8008328:	f7fe fb74 	bl	8006a14 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d309      	bcc.n	800834c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e014      	b.n	8008376 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e4      	bne.n	8008328 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	b29b      	uxth	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	460b      	mov	r3, r1
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b42      	cmp	r3, #66	@ 0x42
 800839e:	d101      	bne.n	80083a4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
 80083a2:	e04e      	b.n	8008442 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2242      	movs	r2, #66	@ 0x42
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f003 031c 	and.w	r3, r3, #28
 80083ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8a1b      	ldrh	r3, [r3, #16]
 80083c0:	02db      	lsls	r3, r3, #11
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	019b      	lsls	r3, r3, #6
 80083ce:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f043 0302 	orr.w	r3, r3, #2
 80083de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083fa:	f7fe fb0b 	bl	8006a14 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008400:	e015      	b.n	800842e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8008402:	f7fe fb07 	bl	8006a14 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008410:	d309      	bcc.n	8008426 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e00d      	b.n	8008442 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e4      	bne.n	8008402 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_ETH_Start+0x16>
 800845c:	2302      	movs	r3, #2
 800845e:	e01f      	b.n	80084a0 <HAL_ETH_Start+0x56>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb3f 	bl	8008af4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fb76 	bl	8008b68 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fc01 	bl	8008c84 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fbaa 	bl	8008bdc <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbd1 	bl	8008c30 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d101      	bne.n	80084be <HAL_ETH_Stop+0x16>
 80084ba:	2302      	movs	r3, #2
 80084bc:	e01f      	b.n	80084fe <HAL_ETH_Stop+0x56>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fb99 	bl	8008c06 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fbc0 	bl	8008c5a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fb61 	bl	8008ba2 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fbcf 	bl	8008c84 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb21 	bl	8008b2e <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <HAL_ETH_ConfigMAC+0x1c>
 8008520:	2302      	movs	r3, #2
 8008522:	e0e4      	b.n	80086ee <HAL_ETH_ConfigMAC+0x1e6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80b1 	beq.w	800869e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4b6c      	ldr	r3, [pc, #432]	@ (80086f8 <HAL_ETH_ConfigMAC+0x1f0>)
 8008548:	4013      	ands	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008554:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 800855a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8008560:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8008566:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 800856c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8008572:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8008578:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800857e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8008584:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 800858a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8008590:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8008596:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80085ae:	2001      	movs	r0, #1
 80085b0:	f7fe fa3a 	bl	8006a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085c4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 80085ca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 80085d0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 80085d6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 80085dc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 80085e2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80085ee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085f0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80085fa:	2001      	movs	r0, #1
 80085fc:	f7fe fa14 	bl	8006a28 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008610:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800861a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800862a:	4013      	ands	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008638:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 800863e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8008644:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 800864a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8008650:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008668:	2001      	movs	r0, #1
 800866a:	f7fe f9dd 	bl	8006a28 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800868e:	2001      	movs	r0, #1
 8008690:	f7fe f9ca 	bl	8006a28 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	61da      	str	r2, [r3, #28]
 800869c:	e01e      	b.n	80086dc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80086ac:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80086ce:	2001      	movs	r0, #1
 80086d0:	f7fe f9aa 	bl	8006a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	ff20810f 	.word	0xff20810f

080086fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b0b0      	sub	sp, #192	@ 0xc0
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008718:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008720:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8008722:	2300      	movs	r3, #0
 8008724:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8008726:	2300      	movs	r3, #0
 8008728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800872a:	2300      	movs	r3, #0
 800872c:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800872e:	2300      	movs	r3, #0
 8008730:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8008732:	2300      	movs	r3, #0
 8008734:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8008736:	2300      	movs	r3, #0
 8008738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008746:	663b      	str	r3, [r7, #96]	@ 0x60
 8008748:	e001      	b.n	800874e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800874a:	2300      	movs	r3, #0
 800874c:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800874e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008752:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008754:	2300      	movs	r3, #0
 8008756:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008758:	2300      	movs	r3, #0
 800875a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800875c:	2300      	movs	r3, #0
 800875e:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8008760:	2300      	movs	r3, #0
 8008762:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8008764:	2300      	movs	r3, #0
 8008766:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8008768:	2340      	movs	r3, #64	@ 0x40
 800876a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800877e:	2300      	movs	r3, #0
 8008780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 800878a:	2300      	movs	r3, #0
 800878c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80087d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80087d4:	4baa      	ldr	r3, [pc, #680]	@ (8008a80 <ETH_MACDMAConfig+0x384>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80087dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 80087de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80087e0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80087e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 80087e4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 80087e8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80087ee:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80087f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 80087f2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80087f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 80087f6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80087fc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80087fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8008800:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8008802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8008804:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8008806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8008808:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800880a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 800880c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800880e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8008810:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008812:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008824:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008830:	2001      	movs	r0, #1
 8008832:	f7fe f8f9 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800883e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008840:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8008842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008844:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8008848:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800884a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 800884e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8008854:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008856:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 800885a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800885c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8008860:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008864:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800886c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800886e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800887a:	2001      	movs	r0, #1
 800887c:	f7fe f8d4 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008888:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008892:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800889c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80088a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088ac:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80088b0:	4013      	ands	r3, r2
 80088b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80088b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088ba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80088bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80088c0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80088c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 80088c6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80088c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 80088cc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80088ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 80088d2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80088d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 80088d8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80088da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088ec:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80088f8:	2001      	movs	r0, #1
 80088fa:	f7fe f895 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008906:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8008908:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 800890c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008922:	2001      	movs	r0, #1
 8008924:	f7fe f880 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008930:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8008936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800893a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800893c:	2300      	movs	r3, #0
 800893e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8008940:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008944:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008946:	2300      	movs	r3, #0
 8008948:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800894e:	2300      	movs	r3, #0
 8008950:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008952:	2300      	movs	r3, #0
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008956:	2304      	movs	r3, #4
 8008958:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800895a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800895e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008964:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800896c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008970:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8008972:	2380      	movs	r3, #128	@ 0x80
 8008974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8008976:	2300      	movs	r3, #0
 8008978:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800897a:	2300      	movs	r3, #0
 800897c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800898c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008990:	4b3c      	ldr	r3, [pc, #240]	@ (8008a84 <ETH_MACDMAConfig+0x388>)
 8008992:	4013      	ands	r3, r2
 8008994:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008998:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800899a:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800899c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800899e:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80089a0:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80089a2:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80089a4:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80089a6:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80089a8:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80089aa:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 80089ac:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80089ae:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 80089b0:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 80089b4:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 80089b8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80089ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089cc:	461a      	mov	r2, r3
 80089ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089d2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80089e2:	2001      	movs	r0, #1
 80089e4:	f7fe f820 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089f0:	461a      	mov	r2, r3
 80089f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089f6:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80089f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80089fc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 8008a00:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008a04:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8008a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 8008a08:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a0c:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8008a0e:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8008a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8008a12:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a20:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a30:	2001      	movs	r0, #1
 8008a32:	f7fd fff9 	bl	8006a28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a44:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d10d      	bne.n	8008a6a <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a68:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f808 	bl	8008a88 <ETH_MACAddressConfig>
}
 8008a78:	bf00      	nop
 8008a7a:	37c0      	adds	r7, #192	@ 0xc0
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	ff20810f 	.word	0xff20810f
 8008a84:	f8de3f23 	.word	0xf8de3f23

08008a88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3305      	adds	r3, #5
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	3204      	adds	r2, #4
 8008aa0:	7812      	ldrb	r2, [r2, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4b10      	ldr	r3, [pc, #64]	@ (8008aec <ETH_MACAddressConfig+0x64>)
 8008aaa:	4413      	add	r3, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3303      	adds	r3, #3
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	061a      	lsls	r2, r3, #24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3302      	adds	r3, #2
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	4313      	orrs	r3, r2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	7812      	ldrb	r2, [r2, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <ETH_MACAddressConfig+0x68>)
 8008ada:	4413      	add	r3, r2
 8008adc:	461a      	mov	r2, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6013      	str	r3, [r2, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr
 8008aec:	40028040 	.word	0x40028040
 8008af0:	40028044 	.word	0x40028044

08008af4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0208 	orr.w	r2, r2, #8
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b18:	2001      	movs	r0, #1
 8008b1a:	f000 f8d9 	bl	8008cd0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0208 	bic.w	r2, r2, #8
 8008b48:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b52:	2001      	movs	r0, #1
 8008b54:	f000 f8bc 	bl	8008cd0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0204 	orr.w	r2, r2, #4
 8008b82:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	f000 f89f 	bl	8008cd0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0204 	bic.w	r2, r2, #4
 8008bbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	f000 f882 	bl	8008cd0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008bfa:	6193      	str	r3, [r2, #24]
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c24:	6193      	str	r3, [r2, #24]
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr

08008c30 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	f043 0302 	orr.w	r3, r3, #2
 8008c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c4e:	6193      	str	r3, [r2, #24]
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr

08008c5a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	f023 0302 	bic.w	r3, r3, #2
 8008c74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c78:	6193      	str	r3, [r2, #24]
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ca2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ca6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	f000 f80b 	bl	8008cd0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cc4:	6193      	str	r3, [r2, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d04 <ETH_Delay+0x34>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8008d08 <ETH_Delay+0x38>)
 8008cde:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce2:	0a5b      	lsrs	r3, r3, #9
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008cec:	bf00      	nop
  }
  while (Delay --);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	60fa      	str	r2, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1f9      	bne.n	8008cec <ETH_Delay+0x1c>
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	20000070 	.word	0x20000070
 8008d08:	10624dd3 	.word	0x10624dd3

08008d0c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008d1e:	4b23      	ldr	r3, [pc, #140]	@ (8008dac <HAL_FLASH_Program+0xa0>)
 8008d20:	7e1b      	ldrb	r3, [r3, #24]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_FLASH_Program+0x1e>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e03b      	b.n	8008da2 <HAL_FLASH_Program+0x96>
 8008d2a:	4b20      	ldr	r3, [pc, #128]	@ (8008dac <HAL_FLASH_Program+0xa0>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008d34:	f000 f870 	bl	8008e18 <FLASH_WaitForLastOperation>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d12b      	bne.n	8008d9a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008d48:	783b      	ldrb	r3, [r7, #0]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68b8      	ldr	r0, [r7, #8]
 8008d4e:	f000 f919 	bl	8008f84 <FLASH_Program_Byte>
 8008d52:	e016      	b.n	8008d82 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d105      	bne.n	8008d66 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008d5a:	883b      	ldrh	r3, [r7, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	68b8      	ldr	r0, [r7, #8]
 8008d60:	f000 f8ee 	bl	8008f40 <FLASH_Program_HalfWord>
 8008d64:	e00d      	b.n	8008d82 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d105      	bne.n	8008d78 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	68b8      	ldr	r0, [r7, #8]
 8008d72:	f000 f8c3 	bl	8008efc <FLASH_Program_Word>
 8008d76:	e004      	b.n	8008d82 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7c:	68b8      	ldr	r0, [r7, #8]
 8008d7e:	f000 f88b 	bl	8008e98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d82:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008d86:	f000 f847 	bl	8008e18 <FLASH_WaitForLastOperation>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8008d8e:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <HAL_FLASH_Program+0xa4>)
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	4a07      	ldr	r2, [pc, #28]	@ (8008db0 <HAL_FLASH_Program+0xa4>)
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d9a:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <HAL_FLASH_Program+0xa0>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20004f5c 	.word	0x20004f5c
 8008db0:	40023c00 	.word	0x40023c00

08008db4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008dec <HAL_FLASH_Unlock+0x38>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da0b      	bge.n	8008dde <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008dc6:	4b09      	ldr	r3, [pc, #36]	@ (8008dec <HAL_FLASH_Unlock+0x38>)
 8008dc8:	4a09      	ldr	r2, [pc, #36]	@ (8008df0 <HAL_FLASH_Unlock+0x3c>)
 8008dca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <HAL_FLASH_Unlock+0x38>)
 8008dce:	4a09      	ldr	r2, [pc, #36]	@ (8008df4 <HAL_FLASH_Unlock+0x40>)
 8008dd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008dd2:	4b06      	ldr	r3, [pc, #24]	@ (8008dec <HAL_FLASH_Unlock+0x38>)
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	da01      	bge.n	8008dde <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008dde:	79fb      	ldrb	r3, [r7, #7]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40023c00 	.word	0x40023c00
 8008df0:	45670123 	.word	0x45670123
 8008df4:	cdef89ab 	.word	0xcdef89ab

08008df8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008dfc:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <HAL_FLASH_Lock+0x1c>)
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	4a04      	ldr	r2, [pc, #16]	@ (8008e14 <HAL_FLASH_Lock+0x1c>)
 8008e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e06:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	40023c00 	.word	0x40023c00

08008e18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008e24:	4b1a      	ldr	r3, [pc, #104]	@ (8008e90 <FLASH_WaitForLastOperation+0x78>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008e2a:	f7fd fdf3 	bl	8006a14 <HAL_GetTick>
 8008e2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008e30:	e010      	b.n	8008e54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d00c      	beq.n	8008e54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <FLASH_WaitForLastOperation+0x38>
 8008e40:	f7fd fde8 	bl	8006a14 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d201      	bcs.n	8008e54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e019      	b.n	8008e88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008e54:	4b0f      	ldr	r3, [pc, #60]	@ (8008e94 <FLASH_WaitForLastOperation+0x7c>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e8      	bne.n	8008e32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008e60:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <FLASH_WaitForLastOperation+0x7c>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008e6c:	4b09      	ldr	r3, [pc, #36]	@ (8008e94 <FLASH_WaitForLastOperation+0x7c>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008e72:	4b08      	ldr	r3, [pc, #32]	@ (8008e94 <FLASH_WaitForLastOperation+0x7c>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008e7e:	f000 f8a1 	bl	8008fc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
  
}  
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20004f5c 	.word	0x20004f5c
 8008e94:	40023c00 	.word	0x40023c00

08008e98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008ea4:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	4a13      	ldr	r2, [pc, #76]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008eb0:	4b11      	ldr	r3, [pc, #68]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	4a10      	ldr	r2, [pc, #64]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008eb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8008ef8 <FLASH_Program_DoubleWord+0x60>)
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008ece:	f3bf 8f6f 	isb	sy
}
 8008ed2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	000a      	movs	r2, r1
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	3104      	adds	r1, #4
 8008ee8:	4613      	mov	r3, r2
 8008eea:	600b      	str	r3, [r1, #0]
}
 8008eec:	bf00      	nop
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40023c00 	.word	0x40023c00

08008efc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f06:	4b0d      	ldr	r3, [pc, #52]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008f12:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	4a09      	ldr	r2, [pc, #36]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f1e:	4b07      	ldr	r3, [pc, #28]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	4a06      	ldr	r2, [pc, #24]	@ (8008f3c <FLASH_Program_Word+0x40>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	601a      	str	r2, [r3, #0]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40023c00 	.word	0x40023c00

08008f40 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	4a0b      	ldr	r2, [pc, #44]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008f58:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	4a08      	ldr	r2, [pc, #32]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f64:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	4a05      	ldr	r2, [pc, #20]	@ (8008f80 <FLASH_Program_HalfWord+0x40>)
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	887a      	ldrh	r2, [r7, #2]
 8008f74:	801a      	strh	r2, [r3, #0]
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr
 8008f80:	40023c00 	.word	0x40023c00

08008f84 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f90:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008f9c:	4b08      	ldr	r3, [pc, #32]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008f9e:	4a08      	ldr	r2, [pc, #32]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008fa4:	4b06      	ldr	r3, [pc, #24]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	4a05      	ldr	r2, [pc, #20]	@ (8008fc0 <FLASH_Program_Byte+0x3c>)
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	701a      	strb	r2, [r3, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr
 8008fc0:	40023c00 	.word	0x40023c00

08008fc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008fc8:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008fd4:	4b25      	ldr	r3, [pc, #148]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f043 0308 	orr.w	r3, r3, #8
 8008fdc:	4a23      	ldr	r2, [pc, #140]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8008fde:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008fe0:	4b21      	ldr	r3, [pc, #132]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8008fe2:	2210      	movs	r2, #16
 8008fe4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008fe6:	4b20      	ldr	r3, [pc, #128]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d008      	beq.n	8009004 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f043 0304 	orr.w	r3, r3, #4
 8008ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8008ffc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8009000:	2220      	movs	r2, #32
 8009002:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009004:	4b18      	ldr	r3, [pc, #96]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009010:	4b16      	ldr	r3, [pc, #88]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	4a14      	ldr	r2, [pc, #80]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 800901a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800901c:	4b12      	ldr	r3, [pc, #72]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 800901e:	2240      	movs	r2, #64	@ 0x40
 8009020:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009022:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d008      	beq.n	8009040 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800902e:	4b0f      	ldr	r3, [pc, #60]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	4a0d      	ldr	r2, [pc, #52]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8009038:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800903a:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 800903c:	2280      	movs	r2, #128	@ 0x80
 800903e:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009040:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d008      	beq.n	800905e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800904c:	4b07      	ldr	r3, [pc, #28]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f043 0310 	orr.w	r3, r3, #16
 8009054:	4a05      	ldr	r2, [pc, #20]	@ (800906c <FLASH_SetErrorCode+0xa8>)
 8009056:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009058:	4b03      	ldr	r3, [pc, #12]	@ (8009068 <FLASH_SetErrorCode+0xa4>)
 800905a:	2202      	movs	r2, #2
 800905c:	60da      	str	r2, [r3, #12]
  }
}
 800905e:	bf00      	nop
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	40023c00 	.word	0x40023c00
 800906c:	20004f5c 	.word	0x20004f5c

08009070 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009082:	4b31      	ldr	r3, [pc, #196]	@ (8009148 <HAL_FLASHEx_Erase+0xd8>)
 8009084:	7e1b      	ldrb	r3, [r3, #24]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_FLASHEx_Erase+0x1e>
 800908a:	2302      	movs	r3, #2
 800908c:	e058      	b.n	8009140 <HAL_FLASHEx_Erase+0xd0>
 800908e:	4b2e      	ldr	r3, [pc, #184]	@ (8009148 <HAL_FLASHEx_Erase+0xd8>)
 8009090:	2201      	movs	r2, #1
 8009092:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009094:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009098:	f7ff febe 	bl	8008e18 <FLASH_WaitForLastOperation>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d148      	bne.n	8009138 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d115      	bne.n	80090e2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f000 f8da 	bl	800927c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80090cc:	f7ff fea4 	bl	8008e18 <FLASH_WaitForLastOperation>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80090d4:	4b1d      	ldr	r3, [pc, #116]	@ (800914c <HAL_FLASHEx_Erase+0xdc>)
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	4a1c      	ldr	r2, [pc, #112]	@ (800914c <HAL_FLASHEx_Erase+0xdc>)
 80090da:	f023 0304 	bic.w	r3, r3, #4
 80090de:	6113      	str	r3, [r2, #16]
 80090e0:	e028      	b.n	8009134 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	60bb      	str	r3, [r7, #8]
 80090e8:	e01c      	b.n	8009124 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	4619      	mov	r1, r3
 80090f2:	68b8      	ldr	r0, [r7, #8]
 80090f4:	f000 f82c 	bl	8009150 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80090fc:	f7ff fe8c 	bl	8008e18 <FLASH_WaitForLastOperation>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009104:	4b11      	ldr	r3, [pc, #68]	@ (800914c <HAL_FLASHEx_Erase+0xdc>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	4a10      	ldr	r2, [pc, #64]	@ (800914c <HAL_FLASHEx_Erase+0xdc>)
 800910a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800910e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	601a      	str	r2, [r3, #0]
          break;
 800911c:	e00a      	b.n	8009134 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	3301      	adds	r3, #1
 8009122:	60bb      	str	r3, [r7, #8]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4413      	add	r3, r2
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	429a      	cmp	r2, r3
 8009132:	d3da      	bcc.n	80090ea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8009134:	f000 f85e 	bl	80091f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009138:	4b03      	ldr	r3, [pc, #12]	@ (8009148 <HAL_FLASHEx_Erase+0xd8>)
 800913a:	2200      	movs	r2, #0
 800913c:	761a      	strb	r2, [r3, #24]

  return status;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20004f5c 	.word	0x20004f5c
 800914c:	40023c00 	.word	0x40023c00

08009150 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e010      	b.n	800918e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d103      	bne.n	800917a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e009      	b.n	800918e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d103      	bne.n	8009188 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e002      	b.n	800918e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009188:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800918c:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800918e:	4b18      	ldr	r3, [pc, #96]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	4a17      	ldr	r2, [pc, #92]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 8009194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800919a:	4b15      	ldr	r3, [pc, #84]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	4914      	ldr	r1, [pc, #80]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80091a6:	4b12      	ldr	r3, [pc, #72]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	4a11      	ldr	r2, [pc, #68]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80091b0:	6113      	str	r3, [r2, #16]
 80091b2:	23f8      	movs	r3, #248	@ 0xf8
 80091b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	fa93 f3a3 	rbit	r3, r3
 80091bc:	60fb      	str	r3, [r7, #12]
  return result;
 80091be:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 80091c0:	fab3 f383 	clz	r3, r3
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4093      	lsls	r3, r2
 80091cc:	f043 0202 	orr.w	r2, r3, #2
 80091d0:	4b07      	ldr	r3, [pc, #28]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	4906      	ldr	r1, [pc, #24]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80091da:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	4a04      	ldr	r2, [pc, #16]	@ (80091f0 <FLASH_Erase_Sector+0xa0>)
 80091e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091e4:	6113      	str	r3, [r2, #16]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr
 80091f0:	40023c00 	.word	0x40023c00

080091f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80091f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009278 <FLASH_FlushCaches+0x84>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009200:	2b00      	cmp	r3, #0
 8009202:	d017      	beq.n	8009234 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009204:	4b1c      	ldr	r3, [pc, #112]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a1b      	ldr	r2, [pc, #108]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800920a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800920e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009210:	4b19      	ldr	r3, [pc, #100]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a18      	ldr	r2, [pc, #96]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009216:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	4b16      	ldr	r3, [pc, #88]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a15      	ldr	r2, [pc, #84]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009226:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009228:	4b13      	ldr	r3, [pc, #76]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a12      	ldr	r2, [pc, #72]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800922e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009232:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009234:	4b10      	ldr	r3, [pc, #64]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009240:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0c      	ldr	r2, [pc, #48]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800924a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800924c:	4b0a      	ldr	r3, [pc, #40]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a09      	ldr	r2, [pc, #36]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009252:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	4b07      	ldr	r3, [pc, #28]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a06      	ldr	r2, [pc, #24]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800925e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009262:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <FLASH_FlushCaches+0x84>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a03      	ldr	r2, [pc, #12]	@ (8009278 <FLASH_FlushCaches+0x84>)
 800926a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800926e:	6013      	str	r3, [r2, #0]
  }
}
 8009270:	bf00      	nop
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr
 8009278:	40023c00 	.word	0x40023c00

0800927c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009288:	4b0c      	ldr	r3, [pc, #48]	@ (80092bc <FLASH_MassErase+0x40>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	4a0b      	ldr	r2, [pc, #44]	@ (80092bc <FLASH_MassErase+0x40>)
 800928e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009292:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009294:	4b09      	ldr	r3, [pc, #36]	@ (80092bc <FLASH_MassErase+0x40>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	4a08      	ldr	r2, [pc, #32]	@ (80092bc <FLASH_MassErase+0x40>)
 800929a:	f043 0304 	orr.w	r3, r3, #4
 800929e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092a0:	4b06      	ldr	r3, [pc, #24]	@ (80092bc <FLASH_MassErase+0x40>)
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	4313      	orrs	r3, r2
 80092aa:	4a04      	ldr	r2, [pc, #16]	@ (80092bc <FLASH_MassErase+0x40>)
 80092ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092b0:	6113      	str	r3, [r2, #16]
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr
 80092bc:	40023c00 	.word	0x40023c00

080092c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092ce:	e16f      	b.n	80095b0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	2101      	movs	r1, #1
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	fa01 f303 	lsl.w	r3, r1, r3
 80092dc:	4013      	ands	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8161 	beq.w	80095aa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d005      	beq.n	8009300 <HAL_GPIO_Init+0x40>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d130      	bne.n	8009362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	2203      	movs	r2, #3
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	43db      	mvns	r3, r3
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4013      	ands	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	fa02 f303 	lsl.w	r3, r2, r3
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009336:	2201      	movs	r2, #1
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	43db      	mvns	r3, r3
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4013      	ands	r3, r2
 8009344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	091b      	lsrs	r3, r3, #4
 800934c:	f003 0201 	and.w	r2, r3, #1
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	2b03      	cmp	r3, #3
 800936c:	d017      	beq.n	800939e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	2203      	movs	r2, #3
 800937a:	fa02 f303 	lsl.w	r3, r2, r3
 800937e:	43db      	mvns	r3, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4013      	ands	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4313      	orrs	r3, r2
 8009396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d123      	bne.n	80093f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	08da      	lsrs	r2, r3, #3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3208      	adds	r2, #8
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	220f      	movs	r2, #15
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	43db      	mvns	r3, r3
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4013      	ands	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	fa02 f303 	lsl.w	r3, r2, r3
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	08da      	lsrs	r2, r3, #3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3208      	adds	r2, #8
 80093ec:	6939      	ldr	r1, [r7, #16]
 80093ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	2203      	movs	r2, #3
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43db      	mvns	r3, r3
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4013      	ands	r3, r2
 8009408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f003 0203 	and.w	r2, r3, #3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 80bb 	beq.w	80095aa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009434:	2300      	movs	r3, #0
 8009436:	60bb      	str	r3, [r7, #8]
 8009438:	4b64      	ldr	r3, [pc, #400]	@ (80095cc <HAL_GPIO_Init+0x30c>)
 800943a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943c:	4a63      	ldr	r2, [pc, #396]	@ (80095cc <HAL_GPIO_Init+0x30c>)
 800943e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009442:	6453      	str	r3, [r2, #68]	@ 0x44
 8009444:	4b61      	ldr	r3, [pc, #388]	@ (80095cc <HAL_GPIO_Init+0x30c>)
 8009446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800944c:	60bb      	str	r3, [r7, #8]
 800944e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009450:	4a5f      	ldr	r2, [pc, #380]	@ (80095d0 <HAL_GPIO_Init+0x310>)
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	089b      	lsrs	r3, r3, #2
 8009456:	3302      	adds	r3, #2
 8009458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	220f      	movs	r2, #15
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	43db      	mvns	r3, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4013      	ands	r3, r2
 8009472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a57      	ldr	r2, [pc, #348]	@ (80095d4 <HAL_GPIO_Init+0x314>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d031      	beq.n	80094e0 <HAL_GPIO_Init+0x220>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a56      	ldr	r2, [pc, #344]	@ (80095d8 <HAL_GPIO_Init+0x318>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d02b      	beq.n	80094dc <HAL_GPIO_Init+0x21c>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a55      	ldr	r2, [pc, #340]	@ (80095dc <HAL_GPIO_Init+0x31c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d025      	beq.n	80094d8 <HAL_GPIO_Init+0x218>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a54      	ldr	r2, [pc, #336]	@ (80095e0 <HAL_GPIO_Init+0x320>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d01f      	beq.n	80094d4 <HAL_GPIO_Init+0x214>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a53      	ldr	r2, [pc, #332]	@ (80095e4 <HAL_GPIO_Init+0x324>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d019      	beq.n	80094d0 <HAL_GPIO_Init+0x210>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a52      	ldr	r2, [pc, #328]	@ (80095e8 <HAL_GPIO_Init+0x328>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <HAL_GPIO_Init+0x20c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a51      	ldr	r2, [pc, #324]	@ (80095ec <HAL_GPIO_Init+0x32c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00d      	beq.n	80094c8 <HAL_GPIO_Init+0x208>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a50      	ldr	r2, [pc, #320]	@ (80095f0 <HAL_GPIO_Init+0x330>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d007      	beq.n	80094c4 <HAL_GPIO_Init+0x204>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a4f      	ldr	r2, [pc, #316]	@ (80095f4 <HAL_GPIO_Init+0x334>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d101      	bne.n	80094c0 <HAL_GPIO_Init+0x200>
 80094bc:	2308      	movs	r3, #8
 80094be:	e010      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094c0:	2309      	movs	r3, #9
 80094c2:	e00e      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094c4:	2307      	movs	r3, #7
 80094c6:	e00c      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094c8:	2306      	movs	r3, #6
 80094ca:	e00a      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094cc:	2305      	movs	r3, #5
 80094ce:	e008      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094d0:	2304      	movs	r3, #4
 80094d2:	e006      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094d4:	2303      	movs	r3, #3
 80094d6:	e004      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094d8:	2302      	movs	r3, #2
 80094da:	e002      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <HAL_GPIO_Init+0x222>
 80094e0:	2300      	movs	r3, #0
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	f002 0203 	and.w	r2, r2, #3
 80094e8:	0092      	lsls	r2, r2, #2
 80094ea:	4093      	lsls	r3, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80094f4:	4936      	ldr	r1, [pc, #216]	@ (80095d0 <HAL_GPIO_Init+0x310>)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	089b      	lsrs	r3, r3, #2
 80094fa:	3302      	adds	r3, #2
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009502:	4b3d      	ldr	r3, [pc, #244]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	43db      	mvns	r3, r3
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	4013      	ands	r3, r2
 8009510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009526:	4a34      	ldr	r2, [pc, #208]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800952c:	4b32      	ldr	r3, [pc, #200]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	43db      	mvns	r3, r3
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4013      	ands	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4313      	orrs	r3, r2
 800954e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009550:	4a29      	ldr	r2, [pc, #164]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009556:	4b28      	ldr	r3, [pc, #160]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	43db      	mvns	r3, r3
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4013      	ands	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800957a:	4a1f      	ldr	r2, [pc, #124]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009580:	4b1d      	ldr	r3, [pc, #116]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	43db      	mvns	r3, r3
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4013      	ands	r3, r2
 800958e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80095a4:	4a14      	ldr	r2, [pc, #80]	@ (80095f8 <HAL_GPIO_Init+0x338>)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	3301      	adds	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f ae88 	bne.w	80092d0 <HAL_GPIO_Init+0x10>
  }
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40013800 	.word	0x40013800
 80095d4:	40020000 	.word	0x40020000
 80095d8:	40020400 	.word	0x40020400
 80095dc:	40020800 	.word	0x40020800
 80095e0:	40020c00 	.word	0x40020c00
 80095e4:	40021000 	.word	0x40021000
 80095e8:	40021400 	.word	0x40021400
 80095ec:	40021800 	.word	0x40021800
 80095f0:	40021c00 	.word	0x40021c00
 80095f4:	40022000 	.word	0x40022000
 80095f8:	40013c00 	.word	0x40013c00

080095fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	4013      	ands	r3, r2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
 8009618:	e001      	b.n	800961e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr
	...

0800962c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009636:	4b08      	ldr	r3, [pc, #32]	@ (8009658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009638:	695a      	ldr	r2, [r3, #20]
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	4013      	ands	r3, r2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d006      	beq.n	8009650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009642:	4a05      	ldr	r2, [pc, #20]	@ (8009658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	4618      	mov	r0, r3
 800964c:	f7fa fbec 	bl	8003e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40013c00 	.word	0x40013c00

0800965c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e12b      	b.n	80098c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7fa f8e8 	bl	8003858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2224      	movs	r2, #36	@ 0x24
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0201 	bic.w	r2, r2, #1
 800969e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80096c0:	f001 f8a4 	bl	800a80c <HAL_RCC_GetPCLK1Freq>
 80096c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4a81      	ldr	r2, [pc, #516]	@ (80098d0 <HAL_I2C_Init+0x274>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d807      	bhi.n	80096e0 <HAL_I2C_Init+0x84>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a80      	ldr	r2, [pc, #512]	@ (80098d4 <HAL_I2C_Init+0x278>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	bf94      	ite	ls
 80096d8:	2301      	movls	r3, #1
 80096da:	2300      	movhi	r3, #0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	e006      	b.n	80096ee <HAL_I2C_Init+0x92>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4a7d      	ldr	r2, [pc, #500]	@ (80098d8 <HAL_I2C_Init+0x27c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	bf94      	ite	ls
 80096e8:	2301      	movls	r3, #1
 80096ea:	2300      	movhi	r3, #0
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e0e7      	b.n	80098c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a78      	ldr	r2, [pc, #480]	@ (80098dc <HAL_I2C_Init+0x280>)
 80096fa:	fba2 2303 	umull	r2, r3, r2, r3
 80096fe:	0c9b      	lsrs	r3, r3, #18
 8009700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	4a6a      	ldr	r2, [pc, #424]	@ (80098d0 <HAL_I2C_Init+0x274>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d802      	bhi.n	8009730 <HAL_I2C_Init+0xd4>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	3301      	adds	r3, #1
 800972e:	e009      	b.n	8009744 <HAL_I2C_Init+0xe8>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009736:	fb02 f303 	mul.w	r3, r2, r3
 800973a:	4a69      	ldr	r2, [pc, #420]	@ (80098e0 <HAL_I2C_Init+0x284>)
 800973c:	fba2 2303 	umull	r2, r3, r2, r3
 8009740:	099b      	lsrs	r3, r3, #6
 8009742:	3301      	adds	r3, #1
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	430b      	orrs	r3, r1
 800974a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009756:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	495c      	ldr	r1, [pc, #368]	@ (80098d0 <HAL_I2C_Init+0x274>)
 8009760:	428b      	cmp	r3, r1
 8009762:	d819      	bhi.n	8009798 <HAL_I2C_Init+0x13c>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	1e59      	subs	r1, r3, #1
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009778:	400b      	ands	r3, r1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <HAL_I2C_Init+0x138>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	1e59      	subs	r1, r3, #1
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	fbb1 f3f3 	udiv	r3, r1, r3
 800978c:	3301      	adds	r3, #1
 800978e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009792:	e051      	b.n	8009838 <HAL_I2C_Init+0x1dc>
 8009794:	2304      	movs	r3, #4
 8009796:	e04f      	b.n	8009838 <HAL_I2C_Init+0x1dc>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d111      	bne.n	80097c4 <HAL_I2C_Init+0x168>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	1e58      	subs	r0, r3, #1
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6859      	ldr	r1, [r3, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	440b      	add	r3, r1
 80097ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80097b2:	3301      	adds	r3, #1
 80097b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	e012      	b.n	80097ea <HAL_I2C_Init+0x18e>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	1e58      	subs	r0, r3, #1
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	0099      	lsls	r1, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80097da:	3301      	adds	r3, #1
 80097dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <HAL_I2C_Init+0x196>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e022      	b.n	8009838 <HAL_I2C_Init+0x1dc>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10e      	bne.n	8009818 <HAL_I2C_Init+0x1bc>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	1e58      	subs	r0, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6859      	ldr	r1, [r3, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	440b      	add	r3, r1
 8009808:	fbb0 f3f3 	udiv	r3, r0, r3
 800980c:	3301      	adds	r3, #1
 800980e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009816:	e00f      	b.n	8009838 <HAL_I2C_Init+0x1dc>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	1e58      	subs	r0, r3, #1
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6859      	ldr	r1, [r3, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	0099      	lsls	r1, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	fbb0 f3f3 	udiv	r3, r0, r3
 800982e:	3301      	adds	r3, #1
 8009830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	6809      	ldr	r1, [r1, #0]
 800983c:	4313      	orrs	r3, r2
 800983e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69da      	ldr	r2, [r3, #28]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009866:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6911      	ldr	r1, [r2, #16]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	68d2      	ldr	r2, [r2, #12]
 8009872:	4311      	orrs	r1, r2
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	430b      	orrs	r3, r1
 800987a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695a      	ldr	r2, [r3, #20]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0201 	orr.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	000186a0 	.word	0x000186a0
 80098d4:	001e847f 	.word	0x001e847f
 80098d8:	003d08ff 	.word	0x003d08ff
 80098dc:	431bde83 	.word	0x431bde83
 80098e0:	10624dd3 	.word	0x10624dd3

080098e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	817b      	strh	r3, [r7, #10]
 80098f6:	460b      	mov	r3, r1
 80098f8:	813b      	strh	r3, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098fe:	f7fd f889 	bl	8006a14 <HAL_GetTick>
 8009902:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b20      	cmp	r3, #32
 800990e:	f040 80d9 	bne.w	8009ac4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	2319      	movs	r3, #25
 8009918:	2201      	movs	r2, #1
 800991a:	496d      	ldr	r1, [pc, #436]	@ (8009ad0 <HAL_I2C_Mem_Write+0x1ec>)
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 f971 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
 800992a:	e0cc      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_I2C_Mem_Write+0x56>
 8009936:	2302      	movs	r3, #2
 8009938:	e0c5      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b01      	cmp	r3, #1
 800994e:	d007      	beq.n	8009960 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800996e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2221      	movs	r2, #33	@ 0x21
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2240      	movs	r2, #64	@ 0x40
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a3a      	ldr	r2, [r7, #32]
 800998a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009990:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4a4d      	ldr	r2, [pc, #308]	@ (8009ad4 <HAL_I2C_Mem_Write+0x1f0>)
 80099a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099a2:	88f8      	ldrh	r0, [r7, #6]
 80099a4:	893a      	ldrh	r2, [r7, #8]
 80099a6:	8979      	ldrh	r1, [r7, #10]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	4603      	mov	r3, r0
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f890 	bl	8009ad8 <I2C_RequestMemoryWrite>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d052      	beq.n	8009a64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e081      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fa36 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00d      	beq.n	80099ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d107      	bne.n	80099ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e06b      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d11b      	bne.n	8009a64 <HAL_I2C_Mem_Write+0x180>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d017      	beq.n	8009a64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a38:	781a      	ldrb	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1aa      	bne.n	80099c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fa29 	bl	8009ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00d      	beq.n	8009a98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d107      	bne.n	8009a94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e016      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e000      	b.n	8009ac6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ac4:	2302      	movs	r3, #2
  }
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	00100002 	.word	0x00100002
 8009ad4:	ffff0000 	.word	0xffff0000

08009ad8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	817b      	strh	r3, [r7, #10]
 8009aea:	460b      	mov	r3, r1
 8009aec:	813b      	strh	r3, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f878 	bl	8009c04 <I2C_WaitOnFlagUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00d      	beq.n	8009b36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b28:	d103      	bne.n	8009b32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e05f      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	6a3a      	ldr	r2, [r7, #32]
 8009b4a:	492d      	ldr	r1, [pc, #180]	@ (8009c00 <I2C_RequestMemoryWrite+0x128>)
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f8d3 	bl	8009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e04c      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b74:	6a39      	ldr	r1, [r7, #32]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 f95e 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00d      	beq.n	8009b9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d107      	bne.n	8009b9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e02b      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d105      	bne.n	8009bb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ba4:	893b      	ldrh	r3, [r7, #8]
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	611a      	str	r2, [r3, #16]
 8009bae:	e021      	b.n	8009bf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bc0:	6a39      	ldr	r1, [r7, #32]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 f938 	bl	8009e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00d      	beq.n	8009bea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d107      	bne.n	8009be6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e005      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	00010002 	.word	0x00010002

08009c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c14:	e048      	b.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1c:	d044      	beq.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7fc fef9 	bl	8006a14 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d139      	bne.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d10d      	bne.n	8009c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	43da      	mvns	r2, r3
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bf0c      	ite	eq
 8009c50:	2301      	moveq	r3, #1
 8009c52:	2300      	movne	r3, #0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	e00c      	b.n	8009c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	43da      	mvns	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4013      	ands	r3, r2
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2301      	moveq	r3, #1
 8009c6e:	2300      	movne	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d116      	bne.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c94:	f043 0220 	orr.w	r2, r3, #32
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e023      	b.n	8009cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d10d      	bne.n	8009cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	43da      	mvns	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bf0c      	ite	eq
 8009cc4:	2301      	moveq	r3, #1
 8009cc6:	2300      	movne	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	e00c      	b.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	43da      	mvns	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d093      	beq.n	8009c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d06:	e071      	b.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d16:	d123      	bne.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	f043 0204 	orr.w	r2, r3, #4
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e067      	b.n	8009e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d041      	beq.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d68:	f7fc fe54 	bl	8006a14 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d302      	bcc.n	8009d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d136      	bne.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	0c1b      	lsrs	r3, r3, #16
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10c      	bne.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4013      	ands	r3, r2
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bf14      	ite	ne
 8009d9a:	2301      	movne	r3, #1
 8009d9c:	2300      	moveq	r3, #0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	e00b      	b.n	8009dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	43da      	mvns	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4013      	ands	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d016      	beq.n	8009dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd8:	f043 0220 	orr.w	r2, r3, #32
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e021      	b.n	8009e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	0c1b      	lsrs	r3, r3, #16
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d10c      	bne.n	8009e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	43da      	mvns	r2, r3
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4013      	ands	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bf14      	ite	ne
 8009e08:	2301      	movne	r3, #1
 8009e0a:	2300      	moveq	r3, #0
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	e00b      	b.n	8009e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	43da      	mvns	r2, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bf14      	ite	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	2300      	moveq	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f af6d 	bne.w	8009d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e44:	e034      	b.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 f886 	bl	8009f58 <I2C_IsAcknowledgeFailed>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e034      	b.n	8009ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5c:	d028      	beq.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e5e:	f7fc fdd9 	bl	8006a14 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d302      	bcc.n	8009e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11d      	bne.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b80      	cmp	r3, #128	@ 0x80
 8009e80:	d016      	beq.n	8009eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9c:	f043 0220 	orr.w	r2, r3, #32
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e007      	b.n	8009ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eba:	2b80      	cmp	r3, #128	@ 0x80
 8009ebc:	d1c3      	bne.n	8009e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ed4:	e034      	b.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 f83e 	bl	8009f58 <I2C_IsAcknowledgeFailed>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e034      	b.n	8009f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d028      	beq.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eee:	f7fc fd91 	bl	8006a14 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d302      	bcc.n	8009f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d11d      	bne.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d016      	beq.n	8009f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2c:	f043 0220 	orr.w	r2, r3, #32
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e007      	b.n	8009f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d1c3      	bne.n	8009ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f6e:	d11b      	bne.n	8009fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f94:	f043 0204 	orr.w	r2, r3, #4
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bc80      	pop	{r7}
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fbe:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	fa93 f3a3 	rbit	r3, r3
 8009fc6:	603b      	str	r3, [r7, #0]
  return result;
 8009fc8:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009fca:	fab3 f383 	clz	r3, r3
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009fd4:	f503 3360 	add.w	r3, r3, #229376	@ 0x38000
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2301      	movs	r3, #1
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr
	...

08009fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e23b      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d050      	beq.n	800a0ac <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a00a:	4b9e      	ldr	r3, [pc, #632]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f003 030c 	and.w	r3, r3, #12
 800a012:	2b04      	cmp	r3, #4
 800a014:	d00c      	beq.n	800a030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a016:	4b9b      	ldr	r3, [pc, #620]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a01e:	2b08      	cmp	r3, #8
 800a020:	d112      	bne.n	800a048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a022:	4b98      	ldr	r3, [pc, #608]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a02a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a02e:	d10b      	bne.n	800a048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a030:	4b94      	ldr	r3, [pc, #592]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d036      	beq.n	800a0aa <HAL_RCC_OscConfig+0xbe>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d132      	bne.n	800a0aa <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e216      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	4b8e      	ldr	r3, [pc, #568]	@ (800a288 <HAL_RCC_OscConfig+0x29c>)
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d013      	beq.n	800a082 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a05a:	f7fc fcdb 	bl	8006a14 <HAL_GetTick>
 800a05e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a060:	e008      	b.n	800a074 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a062:	f7fc fcd7 	bl	8006a14 <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b64      	cmp	r3, #100	@ 0x64
 800a06e:	d901      	bls.n	800a074 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e200      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a074:	4b83      	ldr	r3, [pc, #524]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0f0      	beq.n	800a062 <HAL_RCC_OscConfig+0x76>
 800a080:	e014      	b.n	800a0ac <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a082:	f7fc fcc7 	bl	8006a14 <HAL_GetTick>
 800a086:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a088:	e008      	b.n	800a09c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a08a:	f7fc fcc3 	bl	8006a14 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b64      	cmp	r3, #100	@ 0x64
 800a096:	d901      	bls.n	800a09c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e1ec      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a09c:	4b79      	ldr	r3, [pc, #484]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1f0      	bne.n	800a08a <HAL_RCC_OscConfig+0x9e>
 800a0a8:	e000      	b.n	800a0ac <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d077      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0b8:	4b72      	ldr	r3, [pc, #456]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f003 030c 	and.w	r3, r3, #12
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0c4:	4b6f      	ldr	r3, [pc, #444]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d126      	bne.n	800a11e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0d0:	4b6c      	ldr	r3, [pc, #432]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d120      	bne.n	800a11e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0dc:	4b69      	ldr	r3, [pc, #420]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d005      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x108>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d001      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e1c0      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0f4:	4b63      	ldr	r3, [pc, #396]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	21f8      	movs	r1, #248	@ 0xf8
 800a102:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a104:	68f9      	ldr	r1, [r7, #12]
 800a106:	fa91 f1a1 	rbit	r1, r1
 800a10a:	6139      	str	r1, [r7, #16]
  return result;
 800a10c:	6939      	ldr	r1, [r7, #16]
 800a10e:	fab1 f181 	clz	r1, r1
 800a112:	b2c9      	uxtb	r1, r1
 800a114:	408b      	lsls	r3, r1
 800a116:	495b      	ldr	r1, [pc, #364]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a11c:	e044      	b.n	800a1a8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d02a      	beq.n	800a17c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a126:	4b59      	ldr	r3, [pc, #356]	@ (800a28c <HAL_RCC_OscConfig+0x2a0>)
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a12c:	f7fc fc72 	bl	8006a14 <HAL_GetTick>
 800a130:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a132:	e008      	b.n	800a146 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a134:	f7fc fc6e 	bl	8006a14 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e197      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a146:	4b4f      	ldr	r3, [pc, #316]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a152:	4b4c      	ldr	r3, [pc, #304]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	21f8      	movs	r1, #248	@ 0xf8
 800a160:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a162:	6979      	ldr	r1, [r7, #20]
 800a164:	fa91 f1a1 	rbit	r1, r1
 800a168:	61b9      	str	r1, [r7, #24]
  return result;
 800a16a:	69b9      	ldr	r1, [r7, #24]
 800a16c:	fab1 f181 	clz	r1, r1
 800a170:	b2c9      	uxtb	r1, r1
 800a172:	408b      	lsls	r3, r1
 800a174:	4943      	ldr	r1, [pc, #268]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a176:	4313      	orrs	r3, r2
 800a178:	600b      	str	r3, [r1, #0]
 800a17a:	e015      	b.n	800a1a8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a17c:	4b43      	ldr	r3, [pc, #268]	@ (800a28c <HAL_RCC_OscConfig+0x2a0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a182:	f7fc fc47 	bl	8006a14 <HAL_GetTick>
 800a186:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a188:	e008      	b.n	800a19c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a18a:	f7fc fc43 	bl	8006a14 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d901      	bls.n	800a19c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e16c      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a19c:	4b39      	ldr	r3, [pc, #228]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f0      	bne.n	800a18a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d030      	beq.n	800a216 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d016      	beq.n	800a1ea <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1bc:	4b34      	ldr	r3, [pc, #208]	@ (800a290 <HAL_RCC_OscConfig+0x2a4>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1c2:	f7fc fc27 	bl	8006a14 <HAL_GetTick>
 800a1c6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1c8:	e008      	b.n	800a1dc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1ca:	f7fc fc23 	bl	8006a14 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e14c      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1dc:	4b29      	ldr	r3, [pc, #164]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a1de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0f0      	beq.n	800a1ca <HAL_RCC_OscConfig+0x1de>
 800a1e8:	e015      	b.n	800a216 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1ea:	4b29      	ldr	r3, [pc, #164]	@ (800a290 <HAL_RCC_OscConfig+0x2a4>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1f0:	f7fc fc10 	bl	8006a14 <HAL_GetTick>
 800a1f4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1f8:	f7fc fc0c 	bl	8006a14 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e135      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a20a:	4b1e      	ldr	r3, [pc, #120]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1f0      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 8087 	beq.w	800a332 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a224:	2300      	movs	r3, #0
 800a226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a22a:	4b16      	ldr	r3, [pc, #88]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d110      	bne.n	800a258 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a236:	2300      	movs	r3, #0
 800a238:	60bb      	str	r3, [r7, #8]
 800a23a:	4b12      	ldr	r3, [pc, #72]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23e:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a244:	6413      	str	r3, [r2, #64]	@ 0x40
 800a246:	4b0f      	ldr	r3, [pc, #60]	@ (800a284 <HAL_RCC_OscConfig+0x298>)
 800a248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a24e:	60bb      	str	r3, [r7, #8]
 800a250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a258:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <HAL_RCC_OscConfig+0x2a8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a0d      	ldr	r2, [pc, #52]	@ (800a294 <HAL_RCC_OscConfig+0x2a8>)
 800a25e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a262:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a264:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <HAL_RCC_OscConfig+0x2a8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d122      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a270:	4b08      	ldr	r3, [pc, #32]	@ (800a294 <HAL_RCC_OscConfig+0x2a8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a07      	ldr	r2, [pc, #28]	@ (800a294 <HAL_RCC_OscConfig+0x2a8>)
 800a276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a27a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a27c:	f7fc fbca 	bl	8006a14 <HAL_GetTick>
 800a280:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a282:	e012      	b.n	800a2aa <HAL_RCC_OscConfig+0x2be>
 800a284:	40023800 	.word	0x40023800
 800a288:	40023802 	.word	0x40023802
 800a28c:	42470000 	.word	0x42470000
 800a290:	42470e80 	.word	0x42470e80
 800a294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a298:	f7fc fbbc 	bl	8006a14 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e0e5      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2aa:	4b75      	ldr	r3, [pc, #468]	@ (800a480 <HAL_RCC_OscConfig+0x494>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	4b72      	ldr	r3, [pc, #456]	@ (800a484 <HAL_RCC_OscConfig+0x498>)
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d015      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2c8:	f7fc fba4 	bl	8006a14 <HAL_GetTick>
 800a2cc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2ce:	e00a      	b.n	800a2e6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2d0:	f7fc fba0 	bl	8006a14 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e0c7      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2e6:	4b68      	ldr	r3, [pc, #416]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a2e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0ee      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x2e4>
 800a2f2:	e014      	b.n	800a31e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2f4:	f7fc fb8e 	bl	8006a14 <HAL_GetTick>
 800a2f8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2fa:	e00a      	b.n	800a312 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2fc:	f7fc fb8a 	bl	8006a14 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e0b1      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a312:	4b5d      	ldr	r3, [pc, #372]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1ee      	bne.n	800a2fc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a31e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a322:	2b01      	cmp	r3, #1
 800a324:	d105      	bne.n	800a332 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a326:	4b58      	ldr	r3, [pc, #352]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32a:	4a57      	ldr	r2, [pc, #348]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a32c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a330:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 809c 	beq.w	800a474 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a33c:	4b52      	ldr	r3, [pc, #328]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f003 030c 	and.w	r3, r3, #12
 800a344:	2b08      	cmp	r3, #8
 800a346:	d061      	beq.n	800a40c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d146      	bne.n	800a3de <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a350:	4b4e      	ldr	r3, [pc, #312]	@ (800a48c <HAL_RCC_OscConfig+0x4a0>)
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a356:	f7fc fb5d 	bl	8006a14 <HAL_GetTick>
 800a35a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a35e:	f7fc fb59 	bl	8006a14 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b64      	cmp	r3, #100	@ 0x64
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e082      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a370:	4b45      	ldr	r3, [pc, #276]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f0      	bne.n	800a35e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a37c:	4b42      	ldr	r3, [pc, #264]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	4b43      	ldr	r3, [pc, #268]	@ (800a490 <HAL_RCC_OscConfig+0x4a4>)
 800a382:	4013      	ands	r3, r2
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	69d1      	ldr	r1, [r2, #28]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6a12      	ldr	r2, [r2, #32]
 800a38c:	4311      	orrs	r1, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a392:	0192      	lsls	r2, r2, #6
 800a394:	4311      	orrs	r1, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a39a:	0612      	lsls	r2, r2, #24
 800a39c:	4311      	orrs	r1, r2
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a3a2:	0852      	lsrs	r2, r2, #1
 800a3a4:	3a01      	subs	r2, #1
 800a3a6:	0412      	lsls	r2, r2, #16
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	4937      	ldr	r1, [pc, #220]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3b0:	4b36      	ldr	r3, [pc, #216]	@ (800a48c <HAL_RCC_OscConfig+0x4a0>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3b6:	f7fc fb2d 	bl	8006a14 <HAL_GetTick>
 800a3ba:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3bc:	e008      	b.n	800a3d0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3be:	f7fc fb29 	bl	8006a14 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b64      	cmp	r3, #100	@ 0x64
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e052      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0f0      	beq.n	800a3be <HAL_RCC_OscConfig+0x3d2>
 800a3dc:	e04a      	b.n	800a474 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3de:	4b2b      	ldr	r3, [pc, #172]	@ (800a48c <HAL_RCC_OscConfig+0x4a0>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3e4:	f7fc fb16 	bl	8006a14 <HAL_GetTick>
 800a3e8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3ec:	f7fc fb12 	bl	8006a14 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b64      	cmp	r3, #100	@ 0x64
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e03b      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3fe:	4b22      	ldr	r3, [pc, #136]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f0      	bne.n	800a3ec <HAL_RCC_OscConfig+0x400>
 800a40a:	e033      	b.n	800a474 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e02e      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a418:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <HAL_RCC_OscConfig+0x49c>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d121      	bne.n	800a470 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a436:	429a      	cmp	r2, r3
 800a438:	d11a      	bne.n	800a470 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a440:	4013      	ands	r3, r2
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a446:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a448:	4293      	cmp	r3, r2
 800a44a:	d111      	bne.n	800a470 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	3b01      	subs	r3, #1
 800a45a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d107      	bne.n	800a470 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d001      	beq.n	800a474 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3728      	adds	r7, #40	@ 0x28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	40007000 	.word	0x40007000
 800a484:	40023870 	.word	0x40023870
 800a488:	40023800 	.word	0x40023800
 800a48c:	42470060 	.word	0x42470060
 800a490:	f0bc8000 	.word	0xf0bc8000

0800a494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e0d2      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a4a8:	4b6b      	ldr	r3, [pc, #428]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 030f 	and.w	r3, r3, #15
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d90c      	bls.n	800a4d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4b6:	4b68      	ldr	r3, [pc, #416]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4be:	4b66      	ldr	r3, [pc, #408]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d001      	beq.n	800a4d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e0be      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d020      	beq.n	800a51e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d005      	beq.n	800a4f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4e8:	4b5c      	ldr	r3, [pc, #368]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	4a5b      	ldr	r2, [pc, #364]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a4ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a4f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800a500:	4b56      	ldr	r3, [pc, #344]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	4a55      	ldr	r2, [pc, #340]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a50a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a50c:	4b53      	ldr	r3, [pc, #332]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	4950      	ldr	r1, [pc, #320]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d040      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d107      	bne.n	800a542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a532:	4b4a      	ldr	r3, [pc, #296]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d115      	bne.n	800a56a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e085      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d107      	bne.n	800a55a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a54a:	4b44      	ldr	r3, [pc, #272]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e079      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a55a:	4b40      	ldr	r3, [pc, #256]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e071      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a56a:	4b3c      	ldr	r3, [pc, #240]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f023 0203 	bic.w	r2, r3, #3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	4939      	ldr	r1, [pc, #228]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a57c:	f7fc fa4a 	bl	8006a14 <HAL_GetTick>
 800a580:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a582:	e00a      	b.n	800a59a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a584:	f7fc fa46 	bl	8006a14 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a592:	4293      	cmp	r3, r2
 800a594:	d901      	bls.n	800a59a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e059      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a59a:	4b30      	ldr	r3, [pc, #192]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f003 020c 	and.w	r2, r3, #12
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d1eb      	bne.n	800a584 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a5ac:	4b2a      	ldr	r3, [pc, #168]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d20c      	bcs.n	800a5d4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ba:	4b27      	ldr	r3, [pc, #156]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5c2:	4b25      	ldr	r3, [pc, #148]	@ (800a658 <HAL_RCC_ClockConfig+0x1c4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d001      	beq.n	800a5d4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e03c      	b.n	800a64e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	491b      	ldr	r1, [pc, #108]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5fe:	4b17      	ldr	r3, [pc, #92]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4913      	ldr	r1, [pc, #76]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800a612:	f000 f82b 	bl	800a66c <HAL_RCC_GetSysClockFreq>
 800a616:	4601      	mov	r1, r0
 800a618:	4b10      	ldr	r3, [pc, #64]	@ (800a65c <HAL_RCC_ClockConfig+0x1c8>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a620:	22f0      	movs	r2, #240	@ 0xf0
 800a622:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	fa92 f2a2 	rbit	r2, r2
 800a62a:	613a      	str	r2, [r7, #16]
  return result;
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	fab2 f282 	clz	r2, r2
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	40d3      	lsrs	r3, r2
 800a636:	4a0a      	ldr	r2, [pc, #40]	@ (800a660 <HAL_RCC_ClockConfig+0x1cc>)
 800a638:	5cd3      	ldrb	r3, [r2, r3]
 800a63a:	fa21 f303 	lsr.w	r3, r1, r3
 800a63e:	4a09      	ldr	r2, [pc, #36]	@ (800a664 <HAL_RCC_ClockConfig+0x1d0>)
 800a640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a642:	4b09      	ldr	r3, [pc, #36]	@ (800a668 <HAL_RCC_ClockConfig+0x1d4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4618      	mov	r0, r3
 800a648:	f7fc f9a2 	bl	8006990 <HAL_InitTick>

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	40023c00 	.word	0x40023c00
 800a65c:	40023800 	.word	0x40023800
 800a660:	08027fb4 	.word	0x08027fb4
 800a664:	20000070 	.word	0x20000070
 800a668:	200000c8 	.word	0x200000c8

0800a66c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a66c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a670:	b090      	sub	sp, #64	@ 0x40
 800a672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	637b      	str	r3, [r7, #52]	@ 0x34
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67c:	2300      	movs	r3, #0
 800a67e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a684:	4b59      	ldr	r3, [pc, #356]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f003 030c 	and.w	r3, r3, #12
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d00d      	beq.n	800a6ac <HAL_RCC_GetSysClockFreq+0x40>
 800a690:	2b08      	cmp	r3, #8
 800a692:	f200 80a2 	bhi.w	800a7da <HAL_RCC_GetSysClockFreq+0x16e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <HAL_RCC_GetSysClockFreq+0x34>
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d003      	beq.n	800a6a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a69e:	e09c      	b.n	800a7da <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a6a0:	4b53      	ldr	r3, [pc, #332]	@ (800a7f0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a6a2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a6a4:	e09c      	b.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a6a6:	4b53      	ldr	r3, [pc, #332]	@ (800a7f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a6aa:	e099      	b.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a6ac:	4b4f      	ldr	r3, [pc, #316]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a6b6:	4b4d      	ldr	r3, [pc, #308]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d027      	beq.n	800a712 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6c2:	4b4a      	ldr	r3, [pc, #296]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	099b      	lsrs	r3, r3, #6
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	623b      	str	r3, [r7, #32]
 800a6cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4b47      	ldr	r3, [pc, #284]	@ (800a7f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6d8:	fb03 f201 	mul.w	r2, r3, r1
 800a6dc:	2300      	movs	r3, #0
 800a6de:	fb00 f303 	mul.w	r3, r0, r3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	4a43      	ldr	r2, [pc, #268]	@ (800a7f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6e6:	fba0 2102 	umull	r2, r1, r0, r2
 800a6ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a6ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6f0:	4413      	add	r3, r2
 800a6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	61bb      	str	r3, [r7, #24]
 800a6fa:	61fa      	str	r2, [r7, #28]
 800a6fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a700:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a704:	f7f6 fd86 	bl	8001214 <__aeabi_uldivmod>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4613      	mov	r3, r2
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a710:	e055      	b.n	800a7be <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a712:	4b36      	ldr	r3, [pc, #216]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	099b      	lsrs	r3, r3, #6
 800a718:	2200      	movs	r2, #0
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	617a      	str	r2, [r7, #20]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a724:	f04f 0b00 	mov.w	fp, #0
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	f04f 0000 	mov.w	r0, #0
 800a730:	f04f 0100 	mov.w	r1, #0
 800a734:	0159      	lsls	r1, r3, #5
 800a736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a73a:	0150      	lsls	r0, r2, #5
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	ebb2 080a 	subs.w	r8, r2, sl
 800a744:	eb63 090b 	sbc.w	r9, r3, fp
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a754:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a758:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a75c:	ebb2 0408 	subs.w	r4, r2, r8
 800a760:	eb63 0509 	sbc.w	r5, r3, r9
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	00eb      	lsls	r3, r5, #3
 800a76e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a772:	00e2      	lsls	r2, r4, #3
 800a774:	4614      	mov	r4, r2
 800a776:	461d      	mov	r5, r3
 800a778:	eb14 030a 	adds.w	r3, r4, sl
 800a77c:	603b      	str	r3, [r7, #0]
 800a77e:	eb45 030b 	adc.w	r3, r5, fp
 800a782:	607b      	str	r3, [r7, #4]
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	f04f 0300 	mov.w	r3, #0
 800a78c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a790:	4629      	mov	r1, r5
 800a792:	028b      	lsls	r3, r1, #10
 800a794:	4620      	mov	r0, r4
 800a796:	4629      	mov	r1, r5
 800a798:	4604      	mov	r4, r0
 800a79a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a79e:	4601      	mov	r1, r0
 800a7a0:	028a      	lsls	r2, r1, #10
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	60bb      	str	r3, [r7, #8]
 800a7ac:	60fa      	str	r2, [r7, #12]
 800a7ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7b2:	f7f6 fd2f 	bl	8001214 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a7be:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <HAL_RCC_GetSysClockFreq+0x180>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	0c1b      	lsrs	r3, r3, #16
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a7ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7d8:	e002      	b.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a7da:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a7dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7de:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3740      	adds	r7, #64	@ 0x40
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ec:	40023800 	.word	0x40023800
 800a7f0:	00f42400 	.word	0x00f42400
 800a7f4:	017d7840 	.word	0x017d7840

0800a7f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7fc:	4b02      	ldr	r3, [pc, #8]	@ (800a808 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
}
 800a800:	4618      	mov	r0, r3
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr
 800a808:	20000070 	.word	0x20000070

0800a80c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800a812:	f7ff fff1 	bl	800a7f8 <HAL_RCC_GetHCLKFreq>
 800a816:	4601      	mov	r1, r0
 800a818:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800a820:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800a824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	fa92 f2a2 	rbit	r2, r2
 800a82c:	603a      	str	r2, [r7, #0]
  return result;
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	fab2 f282 	clz	r2, r2
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	40d3      	lsrs	r3, r2
 800a838:	4a04      	ldr	r2, [pc, #16]	@ (800a84c <HAL_RCC_GetPCLK1Freq+0x40>)
 800a83a:	5cd3      	ldrb	r3, [r2, r3]
 800a83c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	40023800 	.word	0x40023800
 800a84c:	08027fc4 	.word	0x08027fc4

0800a850 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08a      	sub	sp, #40	@ 0x28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a870:	2b08      	cmp	r3, #8
 800a872:	d14c      	bne.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a874:	4b6d      	ldr	r3, [pc, #436]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a87a:	f7fc f8cb 	bl	8006a14 <HAL_GetTick>
 800a87e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a880:	e008      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a882:	f7fc f8c7 	bl	8006a14 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d901      	bls.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e0c7      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a894:	4b66      	ldr	r3, [pc, #408]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f0      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800a8a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	fa92 f2a2 	rbit	r2, r2
 800a8b0:	613a      	str	r2, [r7, #16]
  return result;
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	fab2 f282 	clz	r2, r2
 800a8b8:	b2d2      	uxtb	r2, r2
 800a8ba:	fa03 f202 	lsl.w	r2, r3, r2
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a8c6:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8c8:	69f9      	ldr	r1, [r7, #28]
 800a8ca:	fa91 f1a1 	rbit	r1, r1
 800a8ce:	61b9      	str	r1, [r7, #24]
  return result;
 800a8d0:	69b9      	ldr	r1, [r7, #24]
 800a8d2:	fab1 f181 	clz	r1, r1
 800a8d6:	b2c9      	uxtb	r1, r1
 800a8d8:	408b      	lsls	r3, r1
 800a8da:	4955      	ldr	r1, [pc, #340]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8e2:	4b52      	ldr	r3, [pc, #328]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8e8:	f7fc f894 	bl	8006a14 <HAL_GetTick>
 800a8ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8ee:	e008      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8f0:	f7fc f890 	bl	8006a14 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d901      	bls.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e090      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a902:	4b4b      	ldr	r3, [pc, #300]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0f0      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 8083 	beq.w	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	4b43      	ldr	r3, [pc, #268]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	4a42      	ldr	r2, [pc, #264]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a92a:	6413      	str	r3, [r2, #64]	@ 0x40
 800a92c:	4b40      	ldr	r3, [pc, #256]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a938:	4b3e      	ldr	r3, [pc, #248]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a93e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a942:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a944:	f7fc f866 	bl	8006a14 <HAL_GetTick>
 800a948:	6278      	str	r0, [r7, #36]	@ 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a94a:	e008      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a94c:	f7fc f862 	bl	8006a14 <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	2b02      	cmp	r3, #2
 800a958:	d901      	bls.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e062      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a95e:	4b35      	ldr	r3, [pc, #212]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f0      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a96a:	4b31      	ldr	r3, [pc, #196]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a96c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a96e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a972:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d02f      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a982:	6a3a      	ldr	r2, [r7, #32]
 800a984:	429a      	cmp	r2, r3
 800a986:	d028      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a988:	4b29      	ldr	r3, [pc, #164]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a98a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a98c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a990:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a992:	4b29      	ldr	r3, [pc, #164]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a994:	2201      	movs	r2, #1
 800a996:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a998:	4b27      	ldr	r3, [pc, #156]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a99e:	4a24      	ldr	r2, [pc, #144]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a9a4:	4b22      	ldr	r3, [pc, #136]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d114      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a9b0:	f7fc f830 	bl	8006a14 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9b6:	e00a      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9b8:	f7fc f82c 	bl	8006a14 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e02a      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9ce:	4b18      	ldr	r3, [pc, #96]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0ee      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9e6:	d10d      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a9f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9fc:	490c      	ldr	r1, [pc, #48]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	608b      	str	r3, [r1, #8]
 800aa02:	e005      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa04:	4b0a      	ldr	r3, [pc, #40]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	4a09      	ldr	r2, [pc, #36]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aa0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800aa0e:	6093      	str	r3, [r2, #8]
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aa12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa1c:	4904      	ldr	r1, [pc, #16]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3728      	adds	r7, #40	@ 0x28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	42470068 	.word	0x42470068
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40007000 	.word	0x40007000
 800aa38:	42470e40 	.word	0x42470e40

0800aa3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e085      	b.n	800ab5e <HAL_RTC_Init+0x122>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7f5b      	ldrb	r3, [r3, #29]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d105      	bne.n	800aa68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7f8 ff40 	bl	80038e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d055      	beq.n	800ab28 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	22ca      	movs	r2, #202	@ 0xca
 800aa82:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2253      	movs	r2, #83	@ 0x53
 800aa8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa51 	bl	800af34 <RTC_EnterInitMode>
 800aa92:	4603      	mov	r3, r0
 800aa94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d12c      	bne.n	800aaf6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	6812      	ldr	r2, [r2, #0]
 800aaa6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aaaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6899      	ldr	r1, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68d2      	ldr	r2, [r2, #12]
 800aad6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6919      	ldr	r1, [r3, #16]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	041a      	lsls	r2, r3, #16
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa58 	bl	800afa2 <RTC_ExitInitMode>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d110      	bne.n	800ab1e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ab0a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	699a      	ldr	r2, [r3, #24]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	22ff      	movs	r2, #255	@ 0xff
 800ab24:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab26:	e001      	b.n	800ab2c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d102      	bne.n	800ab38 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	775a      	strb	r2, [r3, #29]
  }
  /* USER CODE BEGIN RTC_Init 0 */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60bb      	str	r3, [r7, #8]
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab68 <HAL_RTC_Init+0x12c>)
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab40:	4a09      	ldr	r2, [pc, #36]	@ (800ab68 <HAL_RTC_Init+0x12c>)
 800ab42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab46:	6413      	str	r3, [r2, #64]	@ 0x40
 800ab48:	4b07      	ldr	r3, [pc, #28]	@ (800ab68 <HAL_RTC_Init+0x12c>)
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab50:	60bb      	str	r3, [r7, #8]
 800ab52:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess(); // Разрешаем доступ к backup-домену
 800ab54:	f7ff fa2e 	bl	8009fb4 <HAL_PWR_EnableBkUpAccess>

  // Проверяем, инициализирован ли уже RTC (если нет — включаем его)
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == RESET) {
 800ab58:	4b03      	ldr	r3, [pc, #12]	@ (800ab68 <HAL_RTC_Init+0x12c>)
 800ab5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  }

  // Важно: не вызывать Reset backup domain здесь!
  /* USER CODE END RTC_Init 0 */

  return status;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40023800 	.word	0x40023800

0800ab6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	7f1b      	ldrb	r3, [r3, #28]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d101      	bne.n	800ab88 <HAL_RTC_SetTime+0x1c>
 800ab84:	2302      	movs	r3, #2
 800ab86:	e087      	b.n	800ac98 <HAL_RTC_SetTime+0x12c>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2202      	movs	r2, #2
 800ab92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d126      	bne.n	800abe8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2200      	movs	r2, #0
 800abac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fa13 	bl	800afde <RTC_ByteToBcd2>
 800abb8:	4603      	mov	r3, r0
 800abba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fa0c 	bl	800afde <RTC_ByteToBcd2>
 800abc6:	4603      	mov	r3, r0
 800abc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	789b      	ldrb	r3, [r3, #2]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fa04 	bl	800afde <RTC_ByteToBcd2>
 800abd6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	78db      	ldrb	r3, [r3, #3]
 800abe0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	e018      	b.n	800ac1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2200      	movs	r2, #0
 800abfa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	785b      	ldrb	r3, [r3, #1]
 800ac06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	78db      	ldrb	r3, [r3, #3]
 800ac14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	22ca      	movs	r2, #202	@ 0xca
 800ac20:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2253      	movs	r2, #83	@ 0x53
 800ac28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 f982 	bl	800af34 <RTC_EnterInitMode>
 800ac30:	4603      	mov	r3, r0
 800ac32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d120      	bne.n	800ac7c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ac44:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ac58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6899      	ldr	r1, [r3, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f995 	bl	800afa2 <RTC_ExitInitMode>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ac7c:	7cfb      	ldrb	r3, [r7, #19]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	22ff      	movs	r2, #255	@ 0xff
 800ac8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	771a      	strb	r2, [r3, #28]

  return status;
 800ac96:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}

0800aca0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800acba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800acbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	0c1b      	lsrs	r3, r3, #16
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acca:	b2da      	uxtb	r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	0d9b      	lsrs	r3, r3, #22
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d11a      	bne.n	800ad3a <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f985 	bl	800b018 <RTC_Bcd2ToByte>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	461a      	mov	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f97c 	bl	800b018 <RTC_Bcd2ToByte>
 800ad20:	4603      	mov	r3, r0
 800ad22:	461a      	mov	r2, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	789b      	ldrb	r3, [r3, #2]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 f973 	bl	800b018 <RTC_Bcd2ToByte>
 800ad32:	4603      	mov	r3, r0
 800ad34:	461a      	mov	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	7f1b      	ldrb	r3, [r3, #28]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d101      	bne.n	800ad60 <HAL_RTC_SetDate+0x1c>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e071      	b.n	800ae44 <HAL_RTC_SetDate+0x100>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2201      	movs	r2, #1
 800ad64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10e      	bne.n	800ad90 <HAL_RTC_SetDate+0x4c>
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	f003 0310 	and.w	r3, r3, #16
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d008      	beq.n	800ad90 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	785b      	ldrb	r3, [r3, #1]
 800ad82:	f023 0310 	bic.w	r3, r3, #16
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	330a      	adds	r3, #10
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d11c      	bne.n	800add0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	78db      	ldrb	r3, [r3, #3]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 f91f 	bl	800afde <RTC_ByteToBcd2>
 800ada0:	4603      	mov	r3, r0
 800ada2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	785b      	ldrb	r3, [r3, #1]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f918 	bl	800afde <RTC_ByteToBcd2>
 800adae:	4603      	mov	r3, r0
 800adb0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800adb2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	789b      	ldrb	r3, [r3, #2]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f910 	bl	800afde <RTC_ByteToBcd2>
 800adbe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800adc0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]
 800adce:	e00e      	b.n	800adee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	78db      	ldrb	r3, [r3, #3]
 800add4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	785b      	ldrb	r3, [r3, #1]
 800adda:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800addc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ade2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	22ca      	movs	r2, #202	@ 0xca
 800adf4:	625a      	str	r2, [r3, #36]	@ 0x24
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2253      	movs	r2, #83	@ 0x53
 800adfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f898 	bl	800af34 <RTC_EnterInitMode>
 800ae04:	4603      	mov	r3, r0
 800ae06:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae08:	7cfb      	ldrb	r3, [r7, #19]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10c      	bne.n	800ae28 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f8bf 	bl	800afa2 <RTC_ExitInitMode>
 800ae24:	4603      	mov	r3, r0
 800ae26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ae28:	7cfb      	ldrb	r3, [r7, #19]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d102      	bne.n	800ae34 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2201      	movs	r2, #1
 800ae32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	22ff      	movs	r2, #255	@ 0xff
 800ae3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	771a      	strb	r2, [r3, #28]

  return status;
 800ae42:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd90      	pop	{r4, r7, pc}

0800ae4c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	0c1b      	lsrs	r3, r3, #16
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	0a1b      	lsrs	r3, r3, #8
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	0b5b      	lsrs	r3, r3, #13
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	f003 0307 	and.w	r3, r3, #7
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11a      	bne.n	800aee0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 f8b2 	bl	800b018 <RTC_Bcd2ToByte>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f8a9 	bl	800b018 <RTC_Bcd2ToByte>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	789b      	ldrb	r3, [r3, #2]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f8a0 	bl	800b018 <RTC_Bcd2ToByte>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800aefe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af00:	f7fb fd88 	bl	8006a14 <HAL_GetTick>
 800af04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af06:	e009      	b.n	800af1c <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af08:	f7fb fd84 	bl	8006a14 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af16:	d901      	bls.n	800af1c <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e007      	b.n	800af2c <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0ee      	beq.n	800af08 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d122      	bne.n	800af98 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af62:	f7fb fd57 	bl	8006a14 <HAL_GetTick>
 800af66:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af68:	e00c      	b.n	800af84 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af6a:	f7fb fd53 	bl	8006a14 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af78:	d904      	bls.n	800af84 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2204      	movs	r2, #4
 800af7e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <RTC_EnterInitMode+0x64>
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d1e8      	bne.n	800af6a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afbc:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff ff93 	bl	800aeea <HAL_RTC_WaitForSynchro>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2204      	movs	r2, #4
 800afce:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	4603      	mov	r3, r0
 800afe6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800afec:	e005      	b.n	800affa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3301      	adds	r3, #1
 800aff2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	3b0a      	subs	r3, #10
 800aff8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	2b09      	cmp	r3, #9
 800affe:	d8f6      	bhi.n	800afee <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	b2da      	uxtb	r2, r3
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	b2db      	uxtb	r3, r3
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	091b      	lsrs	r3, r3, #4
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4413      	add	r3, r2
 800b046:	b2db      	uxtb	r3, r3
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr

0800b052 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b052:	b480      	push	{r7}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3350      	adds	r3, #80	@ 0x50
 800b068:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4413      	add	r3, r2
 800b072:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bc80      	pop	{r7}
 800b082:	4770      	bx	lr

0800b084 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3350      	adds	r3, #80	@ 0x50
 800b098:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bc80      	pop	{r7}
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e041      	b.n	800b148 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7f8 fc1b 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f000 f95b 	bl	800b3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b01      	cmp	r3, #1
 800b162:	d001      	beq.n	800b168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e046      	b.n	800b1f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a22      	ldr	r2, [pc, #136]	@ (800b200 <HAL_TIM_Base_Start+0xb0>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d022      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b182:	d01d      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a1e      	ldr	r2, [pc, #120]	@ (800b204 <HAL_TIM_Base_Start+0xb4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d018      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a1d      	ldr	r2, [pc, #116]	@ (800b208 <HAL_TIM_Base_Start+0xb8>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d013      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a1b      	ldr	r2, [pc, #108]	@ (800b20c <HAL_TIM_Base_Start+0xbc>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d00e      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a1a      	ldr	r2, [pc, #104]	@ (800b210 <HAL_TIM_Base_Start+0xc0>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d009      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a18      	ldr	r2, [pc, #96]	@ (800b214 <HAL_TIM_Base_Start+0xc4>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d004      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x70>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a17      	ldr	r2, [pc, #92]	@ (800b218 <HAL_TIM_Base_Start+0xc8>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d111      	bne.n	800b1e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d010      	beq.n	800b1f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0201 	orr.w	r2, r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e2:	e007      	b.n	800b1f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0201 	orr.w	r2, r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bc80      	pop	{r7}
 800b1fe:	4770      	bx	lr
 800b200:	40010000 	.word	0x40010000
 800b204:	40000400 	.word	0x40000400
 800b208:	40000800 	.word	0x40000800
 800b20c:	40000c00 	.word	0x40000c00
 800b210:	40010400 	.word	0x40010400
 800b214:	40014000 	.word	0x40014000
 800b218:	40001800 	.word	0x40001800

0800b21c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_TIM_ConfigClockSource+0x1c>
 800b234:	2302      	movs	r3, #2
 800b236:	e0b4      	b.n	800b3a2 <HAL_TIM_ConfigClockSource+0x186>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b25e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b270:	d03e      	beq.n	800b2f0 <HAL_TIM_ConfigClockSource+0xd4>
 800b272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b276:	f200 8087 	bhi.w	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b27a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b27e:	f000 8086 	beq.w	800b38e <HAL_TIM_ConfigClockSource+0x172>
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b286:	d87f      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b288:	2b70      	cmp	r3, #112	@ 0x70
 800b28a:	d01a      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0xa6>
 800b28c:	2b70      	cmp	r3, #112	@ 0x70
 800b28e:	d87b      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b290:	2b60      	cmp	r3, #96	@ 0x60
 800b292:	d050      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x11a>
 800b294:	2b60      	cmp	r3, #96	@ 0x60
 800b296:	d877      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b298:	2b50      	cmp	r3, #80	@ 0x50
 800b29a:	d03c      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0xfa>
 800b29c:	2b50      	cmp	r3, #80	@ 0x50
 800b29e:	d873      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a0:	2b40      	cmp	r3, #64	@ 0x40
 800b2a2:	d058      	beq.n	800b356 <HAL_TIM_ConfigClockSource+0x13a>
 800b2a4:	2b40      	cmp	r3, #64	@ 0x40
 800b2a6:	d86f      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a8:	2b30      	cmp	r3, #48	@ 0x30
 800b2aa:	d064      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2ac:	2b30      	cmp	r3, #48	@ 0x30
 800b2ae:	d86b      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d060      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d867      	bhi.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05c      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2bc:	2b10      	cmp	r3, #16
 800b2be:	d05a      	beq.n	800b376 <HAL_TIM_ConfigClockSource+0x15a>
 800b2c0:	e062      	b.n	800b388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2d2:	f000 f98c 	bl	800b5ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	609a      	str	r2, [r3, #8]
      break;
 800b2ee:	e04f      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b300:	f000 f975 	bl	800b5ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b312:	609a      	str	r2, [r3, #8]
      break;
 800b314:	e03c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b322:	461a      	mov	r2, r3
 800b324:	f000 f8ec 	bl	800b500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2150      	movs	r1, #80	@ 0x50
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f943 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800b334:	e02c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b342:	461a      	mov	r2, r3
 800b344:	f000 f90a 	bl	800b55c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2160      	movs	r1, #96	@ 0x60
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f933 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800b354:	e01c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b362:	461a      	mov	r2, r3
 800b364:	f000 f8cc 	bl	800b500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2140      	movs	r1, #64	@ 0x40
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f923 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800b374:	e00c      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4619      	mov	r1, r3
 800b380:	4610      	mov	r0, r2
 800b382:	f000 f91a 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800b386:	e003      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	e000      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b38e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a45      	ldr	r2, [pc, #276]	@ (800b4d4 <TIM_Base_SetConfig+0x128>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d013      	beq.n	800b3ec <TIM_Base_SetConfig+0x40>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ca:	d00f      	beq.n	800b3ec <TIM_Base_SetConfig+0x40>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a42      	ldr	r2, [pc, #264]	@ (800b4d8 <TIM_Base_SetConfig+0x12c>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00b      	beq.n	800b3ec <TIM_Base_SetConfig+0x40>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a41      	ldr	r2, [pc, #260]	@ (800b4dc <TIM_Base_SetConfig+0x130>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d007      	beq.n	800b3ec <TIM_Base_SetConfig+0x40>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a40      	ldr	r2, [pc, #256]	@ (800b4e0 <TIM_Base_SetConfig+0x134>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d003      	beq.n	800b3ec <TIM_Base_SetConfig+0x40>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a3f      	ldr	r2, [pc, #252]	@ (800b4e4 <TIM_Base_SetConfig+0x138>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d108      	bne.n	800b3fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a34      	ldr	r2, [pc, #208]	@ (800b4d4 <TIM_Base_SetConfig+0x128>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d02b      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b40c:	d027      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a31      	ldr	r2, [pc, #196]	@ (800b4d8 <TIM_Base_SetConfig+0x12c>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d023      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a30      	ldr	r2, [pc, #192]	@ (800b4dc <TIM_Base_SetConfig+0x130>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d01f      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a2f      	ldr	r2, [pc, #188]	@ (800b4e0 <TIM_Base_SetConfig+0x134>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d01b      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a2e      	ldr	r2, [pc, #184]	@ (800b4e4 <TIM_Base_SetConfig+0x138>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d017      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a2d      	ldr	r2, [pc, #180]	@ (800b4e8 <TIM_Base_SetConfig+0x13c>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d013      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a2c      	ldr	r2, [pc, #176]	@ (800b4ec <TIM_Base_SetConfig+0x140>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d00f      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a2b      	ldr	r2, [pc, #172]	@ (800b4f0 <TIM_Base_SetConfig+0x144>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00b      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f4 <TIM_Base_SetConfig+0x148>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d007      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a29      	ldr	r2, [pc, #164]	@ (800b4f8 <TIM_Base_SetConfig+0x14c>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d003      	beq.n	800b45e <TIM_Base_SetConfig+0xb2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a28      	ldr	r2, [pc, #160]	@ (800b4fc <TIM_Base_SetConfig+0x150>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d108      	bne.n	800b470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a0f      	ldr	r2, [pc, #60]	@ (800b4d4 <TIM_Base_SetConfig+0x128>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_Base_SetConfig+0xf8>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a11      	ldr	r2, [pc, #68]	@ (800b4e4 <TIM_Base_SetConfig+0x138>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d103      	bne.n	800b4ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d105      	bne.n	800b4ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f023 0201 	bic.w	r2, r3, #1
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	611a      	str	r2, [r3, #16]
  }
}
 800b4ca:	bf00      	nop
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bc80      	pop	{r7}
 800b4d2:	4770      	bx	lr
 800b4d4:	40010000 	.word	0x40010000
 800b4d8:	40000400 	.word	0x40000400
 800b4dc:	40000800 	.word	0x40000800
 800b4e0:	40000c00 	.word	0x40000c00
 800b4e4:	40010400 	.word	0x40010400
 800b4e8:	40014000 	.word	0x40014000
 800b4ec:	40014400 	.word	0x40014400
 800b4f0:	40014800 	.word	0x40014800
 800b4f4:	40001800 	.word	0x40001800
 800b4f8:	40001c00 	.word	0x40001c00
 800b4fc:	40002000 	.word	0x40002000

0800b500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b500:	b480      	push	{r7}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6a1b      	ldr	r3, [r3, #32]
 800b510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	f023 0201 	bic.w	r2, r3, #1
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f023 030a 	bic.w	r3, r3, #10
 800b53c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	4313      	orrs	r3, r2
 800b544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	621a      	str	r2, [r3, #32]
}
 800b552:	bf00      	nop
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b087      	sub	sp, #28
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	f023 0210 	bic.w	r2, r3, #16
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	031b      	lsls	r3, r3, #12
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	4313      	orrs	r3, r2
 800b590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	011b      	lsls	r3, r3, #4
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	621a      	str	r2, [r3, #32]
}
 800b5b0:	bf00      	nop
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr

0800b5ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	f043 0307 	orr.w	r3, r3, #7
 800b5dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	609a      	str	r2, [r3, #8]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc80      	pop	{r7}
 800b5ec:	4770      	bx	lr

0800b5ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b608:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	021a      	lsls	r2, r3, #8
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	431a      	orrs	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	4313      	orrs	r3, r2
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	4313      	orrs	r3, r2
 800b61a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	609a      	str	r2, [r3, #8]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	bc80      	pop	{r7}
 800b62a:	4770      	bx	lr

0800b62c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b640:	2302      	movs	r3, #2
 800b642:	e05a      	b.n	800b6fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b66a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	4313      	orrs	r3, r2
 800b674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a20      	ldr	r2, [pc, #128]	@ (800b704 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d022      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b690:	d01d      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a1c      	ldr	r2, [pc, #112]	@ (800b708 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d018      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b70c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d013      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a19      	ldr	r2, [pc, #100]	@ (800b710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00e      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a17      	ldr	r2, [pc, #92]	@ (800b714 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d009      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a16      	ldr	r2, [pc, #88]	@ (800b718 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d004      	beq.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a14      	ldr	r2, [pc, #80]	@ (800b71c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d10c      	bne.n	800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr
 800b704:	40010000 	.word	0x40010000
 800b708:	40000400 	.word	0x40000400
 800b70c:	40000800 	.word	0x40000800
 800b710:	40000c00 	.word	0x40000c00
 800b714:	40010400 	.word	0x40010400
 800b718:	40014000 	.word	0x40014000
 800b71c:	40001800 	.word	0x40001800

0800b720 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b726:	4b88      	ldr	r3, [pc, #544]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b728:	22c0      	movs	r2, #192	@ 0xc0
 800b72a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b72c:	4b86      	ldr	r3, [pc, #536]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b72e:	22a8      	movs	r2, #168	@ 0xa8
 800b730:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b732:	4b85      	ldr	r3, [pc, #532]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b734:	2201      	movs	r2, #1
 800b736:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 800b738:	4b83      	ldr	r3, [pc, #524]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b73a:	22b2      	movs	r2, #178	@ 0xb2
 800b73c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b73e:	4b83      	ldr	r3, [pc, #524]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b740:	22ff      	movs	r2, #255	@ 0xff
 800b742:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b744:	4b81      	ldr	r3, [pc, #516]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b746:	22ff      	movs	r2, #255	@ 0xff
 800b748:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b74a:	4b80      	ldr	r3, [pc, #512]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b74c:	22ff      	movs	r2, #255	@ 0xff
 800b74e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b750:	4b7e      	ldr	r3, [pc, #504]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b752:	2200      	movs	r2, #0
 800b754:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b756:	4b7e      	ldr	r3, [pc, #504]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b758:	22c0      	movs	r2, #192	@ 0xc0
 800b75a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b75c:	4b7c      	ldr	r3, [pc, #496]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b75e:	22a8      	movs	r2, #168	@ 0xa8
 800b760:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b762:	4b7b      	ldr	r3, [pc, #492]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b764:	2201      	movs	r2, #1
 800b766:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b768:	4b79      	ldr	r3, [pc, #484]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b76e:	f009 fb31 	bl	8014dd4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b772:	4b75      	ldr	r3, [pc, #468]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	061a      	lsls	r2, r3, #24
 800b778:	4b73      	ldr	r3, [pc, #460]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	041b      	lsls	r3, r3, #16
 800b77e:	431a      	orrs	r2, r3
 800b780:	4b71      	ldr	r3, [pc, #452]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b782:	789b      	ldrb	r3, [r3, #2]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	4313      	orrs	r3, r2
 800b788:	4a6f      	ldr	r2, [pc, #444]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b78a:	78d2      	ldrb	r2, [r2, #3]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	061a      	lsls	r2, r3, #24
 800b790:	4b6d      	ldr	r3, [pc, #436]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	0619      	lsls	r1, r3, #24
 800b796:	4b6c      	ldr	r3, [pc, #432]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	041b      	lsls	r3, r3, #16
 800b79c:	4319      	orrs	r1, r3
 800b79e:	4b6a      	ldr	r3, [pc, #424]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7a0:	789b      	ldrb	r3, [r3, #2]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	430b      	orrs	r3, r1
 800b7a6:	4968      	ldr	r1, [pc, #416]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7a8:	78c9      	ldrb	r1, [r1, #3]
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	021b      	lsls	r3, r3, #8
 800b7ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	4b64      	ldr	r3, [pc, #400]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	0619      	lsls	r1, r3, #24
 800b7ba:	4b63      	ldr	r3, [pc, #396]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	041b      	lsls	r3, r3, #16
 800b7c0:	4319      	orrs	r1, r3
 800b7c2:	4b61      	ldr	r3, [pc, #388]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7c4:	789b      	ldrb	r3, [r3, #2]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	430b      	orrs	r3, r1
 800b7ca:	495f      	ldr	r1, [pc, #380]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7cc:	78c9      	ldrb	r1, [r1, #3]
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	4b5b      	ldr	r3, [pc, #364]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	0619      	lsls	r1, r3, #24
 800b7de:	4b5a      	ldr	r3, [pc, #360]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7e0:	785b      	ldrb	r3, [r3, #1]
 800b7e2:	041b      	lsls	r3, r3, #16
 800b7e4:	4319      	orrs	r1, r3
 800b7e6:	4b58      	ldr	r3, [pc, #352]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7e8:	789b      	ldrb	r3, [r3, #2]
 800b7ea:	021b      	lsls	r3, r3, #8
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	4956      	ldr	r1, [pc, #344]	@ (800b948 <MX_LWIP_Init+0x228>)
 800b7f0:	78c9      	ldrb	r1, [r1, #3]
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	0e1b      	lsrs	r3, r3, #24
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	4a56      	ldr	r2, [pc, #344]	@ (800b954 <MX_LWIP_Init+0x234>)
 800b7fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b7fc:	4b53      	ldr	r3, [pc, #332]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	061a      	lsls	r2, r3, #24
 800b802:	4b52      	ldr	r3, [pc, #328]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	041b      	lsls	r3, r3, #16
 800b808:	431a      	orrs	r2, r3
 800b80a:	4b50      	ldr	r3, [pc, #320]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b80c:	789b      	ldrb	r3, [r3, #2]
 800b80e:	021b      	lsls	r3, r3, #8
 800b810:	4313      	orrs	r3, r2
 800b812:	4a4e      	ldr	r2, [pc, #312]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b814:	78d2      	ldrb	r2, [r2, #3]
 800b816:	4313      	orrs	r3, r2
 800b818:	061a      	lsls	r2, r3, #24
 800b81a:	4b4c      	ldr	r3, [pc, #304]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	0619      	lsls	r1, r3, #24
 800b820:	4b4a      	ldr	r3, [pc, #296]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	4319      	orrs	r1, r3
 800b828:	4b48      	ldr	r3, [pc, #288]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b82a:	789b      	ldrb	r3, [r3, #2]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	430b      	orrs	r3, r1
 800b830:	4946      	ldr	r1, [pc, #280]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b832:	78c9      	ldrb	r1, [r1, #3]
 800b834:	430b      	orrs	r3, r1
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b83c:	431a      	orrs	r2, r3
 800b83e:	4b43      	ldr	r3, [pc, #268]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	0619      	lsls	r1, r3, #24
 800b844:	4b41      	ldr	r3, [pc, #260]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	041b      	lsls	r3, r3, #16
 800b84a:	4319      	orrs	r1, r3
 800b84c:	4b3f      	ldr	r3, [pc, #252]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b84e:	789b      	ldrb	r3, [r3, #2]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	430b      	orrs	r3, r1
 800b854:	493d      	ldr	r1, [pc, #244]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b856:	78c9      	ldrb	r1, [r1, #3]
 800b858:	430b      	orrs	r3, r1
 800b85a:	0a1b      	lsrs	r3, r3, #8
 800b85c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b860:	431a      	orrs	r2, r3
 800b862:	4b3a      	ldr	r3, [pc, #232]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	0619      	lsls	r1, r3, #24
 800b868:	4b38      	ldr	r3, [pc, #224]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	041b      	lsls	r3, r3, #16
 800b86e:	4319      	orrs	r1, r3
 800b870:	4b36      	ldr	r3, [pc, #216]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b872:	789b      	ldrb	r3, [r3, #2]
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	430b      	orrs	r3, r1
 800b878:	4934      	ldr	r1, [pc, #208]	@ (800b94c <MX_LWIP_Init+0x22c>)
 800b87a:	78c9      	ldrb	r1, [r1, #3]
 800b87c:	430b      	orrs	r3, r1
 800b87e:	0e1b      	lsrs	r3, r3, #24
 800b880:	4313      	orrs	r3, r2
 800b882:	4a35      	ldr	r2, [pc, #212]	@ (800b958 <MX_LWIP_Init+0x238>)
 800b884:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b886:	4b32      	ldr	r3, [pc, #200]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	061a      	lsls	r2, r3, #24
 800b88c:	4b30      	ldr	r3, [pc, #192]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	041b      	lsls	r3, r3, #16
 800b892:	431a      	orrs	r2, r3
 800b894:	4b2e      	ldr	r3, [pc, #184]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b896:	789b      	ldrb	r3, [r3, #2]
 800b898:	021b      	lsls	r3, r3, #8
 800b89a:	4313      	orrs	r3, r2
 800b89c:	4a2c      	ldr	r2, [pc, #176]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b89e:	78d2      	ldrb	r2, [r2, #3]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	061a      	lsls	r2, r3, #24
 800b8a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	0619      	lsls	r1, r3, #24
 800b8aa:	4b29      	ldr	r3, [pc, #164]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	4319      	orrs	r1, r3
 800b8b2:	4b27      	ldr	r3, [pc, #156]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8b4:	789b      	ldrb	r3, [r3, #2]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	4925      	ldr	r1, [pc, #148]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8bc:	78c9      	ldrb	r1, [r1, #3]
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	4b21      	ldr	r3, [pc, #132]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	0619      	lsls	r1, r3, #24
 800b8ce:	4b20      	ldr	r3, [pc, #128]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8d0:	785b      	ldrb	r3, [r3, #1]
 800b8d2:	041b      	lsls	r3, r3, #16
 800b8d4:	4319      	orrs	r1, r3
 800b8d6:	4b1e      	ldr	r3, [pc, #120]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8d8:	789b      	ldrb	r3, [r3, #2]
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	430b      	orrs	r3, r1
 800b8de:	491c      	ldr	r1, [pc, #112]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8e0:	78c9      	ldrb	r1, [r1, #3]
 800b8e2:	430b      	orrs	r3, r1
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	4b18      	ldr	r3, [pc, #96]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	0619      	lsls	r1, r3, #24
 800b8f2:	4b17      	ldr	r3, [pc, #92]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8f4:	785b      	ldrb	r3, [r3, #1]
 800b8f6:	041b      	lsls	r3, r3, #16
 800b8f8:	4319      	orrs	r1, r3
 800b8fa:	4b15      	ldr	r3, [pc, #84]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b8fc:	789b      	ldrb	r3, [r3, #2]
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	430b      	orrs	r3, r1
 800b902:	4913      	ldr	r1, [pc, #76]	@ (800b950 <MX_LWIP_Init+0x230>)
 800b904:	78c9      	ldrb	r1, [r1, #3]
 800b906:	430b      	orrs	r3, r1
 800b908:	0e1b      	lsrs	r3, r3, #24
 800b90a:	4313      	orrs	r3, r2
 800b90c:	4a13      	ldr	r2, [pc, #76]	@ (800b95c <MX_LWIP_Init+0x23c>)
 800b90e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b910:	4b13      	ldr	r3, [pc, #76]	@ (800b960 <MX_LWIP_Init+0x240>)
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	4b13      	ldr	r3, [pc, #76]	@ (800b964 <MX_LWIP_Init+0x244>)
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	2300      	movs	r3, #0
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4b0f      	ldr	r3, [pc, #60]	@ (800b95c <MX_LWIP_Init+0x23c>)
 800b91e:	4a0e      	ldr	r2, [pc, #56]	@ (800b958 <MX_LWIP_Init+0x238>)
 800b920:	490c      	ldr	r1, [pc, #48]	@ (800b954 <MX_LWIP_Init+0x234>)
 800b922:	4811      	ldr	r0, [pc, #68]	@ (800b968 <MX_LWIP_Init+0x248>)
 800b924:	f009 fef4 	bl	8015710 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b928:	480f      	ldr	r0, [pc, #60]	@ (800b968 <MX_LWIP_Init+0x248>)
 800b92a:	f009 ffd9 	bl	80158e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b92e:	480e      	ldr	r0, [pc, #56]	@ (800b968 <MX_LWIP_Init+0x248>)
 800b930:	f009 ffe4 	bl	80158fc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b934:	490d      	ldr	r1, [pc, #52]	@ (800b96c <MX_LWIP_Init+0x24c>)
 800b936:	480c      	ldr	r0, [pc, #48]	@ (800b968 <MX_LWIP_Init+0x248>)
 800b938:	f00a f8ac 	bl	8015a94 <netif_set_link_callback>

/* USER CODE BEGIN 3 */
  /* Force an initial link poll to catch late cable insertions right after boot */
  ethernetif_set_link(&gnetif);
 800b93c:	480a      	ldr	r0, [pc, #40]	@ (800b968 <MX_LWIP_Init+0x248>)
 800b93e:	f000 fb1d 	bl	800bf7c <ethernetif_set_link>
/* USER CODE END 3 */
}
 800b942:	bf00      	nop
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20004ff4 	.word	0x20004ff4
 800b94c:	20004ff8 	.word	0x20004ff8
 800b950:	20004ffc 	.word	0x20004ffc
 800b954:	20004fe8 	.word	0x20004fe8
 800b958:	20004fec 	.word	0x20004fec
 800b95c:	20004ff0 	.word	0x20004ff0
 800b960:	08021439 	.word	0x08021439
 800b964:	0800bf11 	.word	0x0800bf11
 800b968:	20004f7c 	.word	0x20004f7c
 800b96c:	0800c005 	.word	0x0800c005

0800b970 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b974:	4803      	ldr	r0, [pc, #12]	@ (800b984 <MX_LWIP_Process+0x14>)
 800b976:	f000 faab 	bl	800bed0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b97a:	f010 fbff 	bl	801c17c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b97e:	bf00      	nop
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	20004f7c 	.word	0x20004f7c

0800b988 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b08e      	sub	sp, #56	@ 0x38
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	605a      	str	r2, [r3, #4]
 800b99a:	609a      	str	r2, [r3, #8]
 800b99c:	60da      	str	r2, [r3, #12]
 800b99e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a46      	ldr	r2, [pc, #280]	@ (800bac0 <HAL_ETH_MspInit+0x138>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	f040 8085 	bne.w	800bab6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	623b      	str	r3, [r7, #32]
 800b9b0:	4b44      	ldr	r3, [pc, #272]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b4:	4a43      	ldr	r2, [pc, #268]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b9ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9bc:	4b41      	ldr	r3, [pc, #260]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	4b3d      	ldr	r3, [pc, #244]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d0:	4a3c      	ldr	r2, [pc, #240]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9d6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9d8:	4b3a      	ldr	r3, [pc, #232]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	61bb      	str	r3, [r7, #24]
 800b9e8:	4b36      	ldr	r3, [pc, #216]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ec:	4a35      	ldr	r2, [pc, #212]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9f4:	4b33      	ldr	r3, [pc, #204]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9fc:	61bb      	str	r3, [r7, #24]
 800b9fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba00:	2300      	movs	r3, #0
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	4b2f      	ldr	r3, [pc, #188]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba08:	4a2e      	ldr	r2, [pc, #184]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba0a:	f043 0304 	orr.w	r3, r3, #4
 800ba0e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba10:	4b2c      	ldr	r3, [pc, #176]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	4b28      	ldr	r3, [pc, #160]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba24:	4a27      	ldr	r2, [pc, #156]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba26:	f043 0301 	orr.w	r3, r3, #1
 800ba2a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba2c:	4b25      	ldr	r3, [pc, #148]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	613b      	str	r3, [r7, #16]
 800ba36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	4b21      	ldr	r3, [pc, #132]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba40:	4a20      	ldr	r2, [pc, #128]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba42:	f043 0302 	orr.w	r3, r3, #2
 800ba46:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba48:	4b1e      	ldr	r3, [pc, #120]	@ (800bac4 <HAL_ETH_MspInit+0x13c>)
 800ba4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ba54:	2332      	movs	r3, #50	@ 0x32
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba60:	2303      	movs	r3, #3
 800ba62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba64:	230b      	movs	r3, #11
 800ba66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4816      	ldr	r0, [pc, #88]	@ (800bac8 <HAL_ETH_MspInit+0x140>)
 800ba70:	f7fd fc26 	bl	80092c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ba74:	2386      	movs	r3, #134	@ 0x86
 800ba76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba80:	2303      	movs	r3, #3
 800ba82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba84:	230b      	movs	r3, #11
 800ba86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	480f      	ldr	r0, [pc, #60]	@ (800bacc <HAL_ETH_MspInit+0x144>)
 800ba90:	f7fd fc16 	bl	80092c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ba94:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800ba98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baa2:	2303      	movs	r3, #3
 800baa4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800baa6:	230b      	movs	r3, #11
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800baaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800baae:	4619      	mov	r1, r3
 800bab0:	4807      	ldr	r0, [pc, #28]	@ (800bad0 <HAL_ETH_MspInit+0x148>)
 800bab2:	f7fd fc05 	bl	80092c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bab6:	bf00      	nop
 800bab8:	3738      	adds	r7, #56	@ 0x38
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	40028000 	.word	0x40028000
 800bac4:	40023800 	.word	0x40023800
 800bac8:	40020800 	.word	0x40020800
 800bacc:	40020000 	.word	0x40020000
 800bad0:	40020400 	.word	0x40020400

0800bad4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bae0:	4b4d      	ldr	r3, [pc, #308]	@ (800bc18 <low_level_init+0x144>)
 800bae2:	4a4e      	ldr	r2, [pc, #312]	@ (800bc1c <low_level_init+0x148>)
 800bae4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bae6:	4b4c      	ldr	r3, [pc, #304]	@ (800bc18 <low_level_init+0x144>)
 800bae8:	2201      	movs	r2, #1
 800baea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800baec:	4b4a      	ldr	r3, [pc, #296]	@ (800bc18 <low_level_init+0x144>)
 800baee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800baf2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800baf4:	4b48      	ldr	r3, [pc, #288]	@ (800bc18 <low_level_init+0x144>)
 800baf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bafa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bafc:	4b46      	ldr	r3, [pc, #280]	@ (800bc18 <low_level_init+0x144>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800bb02:	2300      	movs	r3, #0
 800bb04:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bb06:	2380      	movs	r3, #128	@ 0x80
 800bb08:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bb0a:	23e1      	movs	r3, #225	@ 0xe1
 800bb0c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bb12:	2300      	movs	r3, #0
 800bb14:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bb16:	2300      	movs	r3, #0
 800bb18:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bb1a:	4a3f      	ldr	r2, [pc, #252]	@ (800bc18 <low_level_init+0x144>)
 800bb1c:	f107 0308 	add.w	r3, r7, #8
 800bb20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800bb22:	4b3d      	ldr	r3, [pc, #244]	@ (800bc18 <low_level_init+0x144>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bb28:	4b3b      	ldr	r3, [pc, #236]	@ (800bc18 <low_level_init+0x144>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bb2e:	4b3a      	ldr	r3, [pc, #232]	@ (800bc18 <low_level_init+0x144>)
 800bb30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bb34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bb36:	4838      	ldr	r0, [pc, #224]	@ (800bc18 <low_level_init+0x144>)
 800bb38:	f7fb fff0 	bl	8007b1c <HAL_ETH_Init>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d108      	bne.n	800bb58 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bb4c:	f043 0304 	orr.w	r3, r3, #4
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bb58:	2304      	movs	r3, #4
 800bb5a:	4a31      	ldr	r2, [pc, #196]	@ (800bc20 <low_level_init+0x14c>)
 800bb5c:	4931      	ldr	r1, [pc, #196]	@ (800bc24 <low_level_init+0x150>)
 800bb5e:	482e      	ldr	r0, [pc, #184]	@ (800bc18 <low_level_init+0x144>)
 800bb60:	f7fc f968 	bl	8007e34 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bb64:	2304      	movs	r3, #4
 800bb66:	4a30      	ldr	r2, [pc, #192]	@ (800bc28 <low_level_init+0x154>)
 800bb68:	4930      	ldr	r1, [pc, #192]	@ (800bc2c <low_level_init+0x158>)
 800bb6a:	482b      	ldr	r0, [pc, #172]	@ (800bc18 <low_level_init+0x144>)
 800bb6c:	f7fc f9c9 	bl	8007f02 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2206      	movs	r2, #6
 800bb74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bb78:	4b27      	ldr	r3, [pc, #156]	@ (800bc18 <low_level_init+0x144>)
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	781a      	ldrb	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bb84:	4b24      	ldr	r3, [pc, #144]	@ (800bc18 <low_level_init+0x144>)
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	785a      	ldrb	r2, [r3, #1]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bb90:	4b21      	ldr	r3, [pc, #132]	@ (800bc18 <low_level_init+0x144>)
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	789a      	ldrb	r2, [r3, #2]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <low_level_init+0x144>)
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	78da      	ldrb	r2, [r3, #3]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bba8:	4b1b      	ldr	r3, [pc, #108]	@ (800bc18 <low_level_init+0x144>)
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	791a      	ldrb	r2, [r3, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bbb4:	4b18      	ldr	r3, [pc, #96]	@ (800bc18 <low_level_init+0x144>)
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	795a      	ldrb	r2, [r3, #5]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bbc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bbce:	f043 030a 	orr.w	r3, r3, #10
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800bbda:	480f      	ldr	r0, [pc, #60]	@ (800bc18 <low_level_init+0x144>)
 800bbdc:	f7fc fc35 	bl	800844a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	211d      	movs	r1, #29
 800bbe8:	480b      	ldr	r0, [pc, #44]	@ (800bc18 <low_level_init+0x144>)
 800bbea:	f7fc fb60 	bl	80082ae <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f043 030b 	orr.w	r3, r3, #11
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	211d      	movs	r1, #29
 800bbfc:	4806      	ldr	r0, [pc, #24]	@ (800bc18 <low_level_init+0x144>)
 800bbfe:	f7fc fbbe 	bl	800837e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bc02:	f107 0310 	add.w	r3, r7, #16
 800bc06:	461a      	mov	r2, r3
 800bc08:	211d      	movs	r1, #29
 800bc0a:	4803      	ldr	r0, [pc, #12]	@ (800bc18 <low_level_init+0x144>)
 800bc0c:	f7fc fb4f 	bl	80082ae <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bc10:	bf00      	nop
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	200080a0 	.word	0x200080a0
 800bc1c:	40028000 	.word	0x40028000
 800bc20:	200068d0 	.word	0x200068d0
 800bc24:	20005080 	.word	0x20005080
 800bc28:	20005100 	.word	0x20005100
 800bc2c:	20005000 	.word	0x20005000

0800bc30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b08a      	sub	sp, #40	@ 0x28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bc3a:	4b4b      	ldr	r3, [pc, #300]	@ (800bd68 <low_level_output+0x138>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800bc52:	4b45      	ldr	r3, [pc, #276]	@ (800bd68 <low_level_output+0x138>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	623b      	str	r3, [r7, #32]
 800bc60:	e05a      	b.n	800bd18 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	da03      	bge.n	800bc72 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800bc6a:	23f8      	movs	r3, #248	@ 0xf8
 800bc6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800bc70:	e05c      	b.n	800bd2c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	895b      	ldrh	r3, [r3, #10]
 800bc76:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc7c:	e02f      	b.n	800bcde <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bc7e:	69fa      	ldr	r2, [r7, #28]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	18d0      	adds	r0, r2, r3
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	18d1      	adds	r1, r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800bc92:	3304      	adds	r3, #4
 800bc94:	461a      	mov	r2, r3
 800bc96:	f016 fdce 	bl	8022836 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	da03      	bge.n	800bcb0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800bca8:	23f8      	movs	r3, #248	@ 0xf8
 800bcaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800bcae:	e03d      	b.n	800bd2c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800bcc0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800bccc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800bcd8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	4413      	add	r3, r2
 800bce4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d8c8      	bhi.n	800bc7e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bcec:	69fa      	ldr	r2, [r7, #28]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	18d0      	adds	r0, r2, r3
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f016 fd9a 	bl	8022836 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	623b      	str	r3, [r7, #32]
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1a1      	bne.n	800bc62 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bd1e:	6979      	ldr	r1, [r7, #20]
 800bd20:	4811      	ldr	r0, [pc, #68]	@ (800bd68 <low_level_output+0x138>)
 800bd22:	f7fc f959 	bl	8007fd8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bd2c:	4b0e      	ldr	r3, [pc, #56]	@ (800bd68 <low_level_output+0x138>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00d      	beq.n	800bd5a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd68 <low_level_output+0x138>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd46:	461a      	mov	r2, r3
 800bd48:	2320      	movs	r3, #32
 800bd4a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bd4c:	4b06      	ldr	r3, [pc, #24]	@ (800bd68 <low_level_output+0x138>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd54:	461a      	mov	r2, r3
 800bd56:	2300      	movs	r3, #0
 800bd58:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800bd5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	@ 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200080a0 	.word	0x200080a0

0800bd6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08c      	sub	sp, #48	@ 0x30
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd74:	2300      	movs	r3, #0
 800bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bd90:	484e      	ldr	r0, [pc, #312]	@ (800becc <low_level_input+0x160>)
 800bd92:	f7fc fa09 	bl	80081a8 <HAL_ETH_GetReceivedFrame>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <low_level_input+0x34>

    return NULL;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e090      	b.n	800bec2 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800bda0:	4b4a      	ldr	r3, [pc, #296]	@ (800becc <low_level_input+0x160>)
 800bda2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bda6:	4b49      	ldr	r3, [pc, #292]	@ (800becc <low_level_input+0x160>)
 800bda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800bdac:	89fb      	ldrh	r3, [r7, #14]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d006      	beq.n	800bdc0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bdb2:	89fb      	ldrh	r3, [r7, #14]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	2004      	movs	r0, #4
 800bdba:	f009 feab 	bl	8015b14 <pbuf_alloc>
 800bdbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d04b      	beq.n	800be5e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bdc6:	4b41      	ldr	r3, [pc, #260]	@ (800becc <low_level_input+0x160>)
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdca:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdd4:	e040      	b.n	800be58 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800bdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd8:	895b      	ldrh	r3, [r3, #10]
 800bdda:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bde0:	e021      	b.n	800be26 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	18d0      	adds	r0, r2, r3
 800bdea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	18d1      	adds	r1, r2, r3
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f016 fd1c 	bl	8022836 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	4413      	add	r3, r2
 800be10:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800be14:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800be16:	69ba      	ldr	r2, [r7, #24]
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800be20:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800be30:	4293      	cmp	r3, r2
 800be32:	d8d6      	bhi.n	800bde2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	18d0      	adds	r0, r2, r3
 800be3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	4413      	add	r3, r2
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	4619      	mov	r1, r3
 800be46:	f016 fcf6 	bl	8022836 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	4413      	add	r3, r2
 800be50:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1bb      	bne.n	800bdd6 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800be5e:	4b1b      	ldr	r3, [pc, #108]	@ (800becc <low_level_input+0x160>)
 800be60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be62:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be64:	2300      	movs	r3, #0
 800be66:	613b      	str	r3, [r7, #16]
 800be68:	e00b      	b.n	800be82 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	3301      	adds	r3, #1
 800be80:	613b      	str	r3, [r7, #16]
 800be82:	4b12      	ldr	r3, [pc, #72]	@ (800becc <low_level_input+0x160>)
 800be84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d3ee      	bcc.n	800be6a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800be8c:	4b0f      	ldr	r3, [pc, #60]	@ (800becc <low_level_input+0x160>)
 800be8e:	2200      	movs	r2, #0
 800be90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800be92:	4b0e      	ldr	r3, [pc, #56]	@ (800becc <low_level_input+0x160>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00d      	beq.n	800bec0 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bea4:	4b09      	ldr	r3, [pc, #36]	@ (800becc <low_level_input+0x160>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beac:	461a      	mov	r2, r3
 800beae:	2380      	movs	r3, #128	@ 0x80
 800beb0:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800beb2:	4b06      	ldr	r3, [pc, #24]	@ (800becc <low_level_input+0x160>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beba:	461a      	mov	r2, r3
 800bebc:	2300      	movs	r3, #0
 800bebe:	6093      	str	r3, [r2, #8]
  }
  return p;
 800bec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3730      	adds	r7, #48	@ 0x30
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200080a0 	.word	0x200080a0

0800bed0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ff47 	bl	800bd6c <low_level_input>
 800bede:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d010      	beq.n	800bf08 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	4798      	blx	r3
 800bef0:	4603      	mov	r3, r0
 800bef2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800bef4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d006      	beq.n	800bf0a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f00a f981 	bl	8016204 <pbuf_free>
    p = NULL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	60fb      	str	r3, [r7, #12]
 800bf06:	e000      	b.n	800bf0a <ethernetif_input+0x3a>
  if (p == NULL) return;
 800bf08:	bf00      	nop
  }
}
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d106      	bne.n	800bf2c <ethernetif_init+0x1c>
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf58 <ethernetif_init+0x48>)
 800bf20:	f240 220a 	movw	r2, #522	@ 0x20a
 800bf24:	490d      	ldr	r1, [pc, #52]	@ (800bf5c <ethernetif_init+0x4c>)
 800bf26:	480e      	ldr	r0, [pc, #56]	@ (800bf60 <ethernetif_init+0x50>)
 800bf28:	f016 f98a 	bl	8022240 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2273      	movs	r2, #115	@ 0x73
 800bf30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->name[1] = IFNAME1;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2274      	movs	r2, #116	@ 0x74
 800bf38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a09      	ldr	r2, [pc, #36]	@ (800bf64 <ethernetif_init+0x54>)
 800bf40:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a08      	ldr	r2, [pc, #32]	@ (800bf68 <ethernetif_init+0x58>)
 800bf46:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff fdc3 	bl	800bad4 <low_level_init>

  return ERR_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	08025414 	.word	0x08025414
 800bf5c:	08025430 	.word	0x08025430
 800bf60:	08025440 	.word	0x08025440
 800bf64:	0801f191 	.word	0x0801f191
 800bf68:	0800bc31 	.word	0x0800bc31

0800bf6c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bf70:	f7fa fd50 	bl	8006a14 <HAL_GetTick>
 800bf74:	4603      	mov	r3, r0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 800bf88:	f7fa fd44 	bl	8006a14 <HAL_GetTick>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4b1b      	ldr	r3, [pc, #108]	@ (800bffc <ethernetif_set_link+0x80>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf96:	d92c      	bls.n	800bff2 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bf98:	f7fa fd3c 	bl	8006a14 <HAL_GetTick>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4a17      	ldr	r2, [pc, #92]	@ (800bffc <ethernetif_set_link+0x80>)
 800bfa0:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	4815      	ldr	r0, [pc, #84]	@ (800c000 <ethernetif_set_link+0x84>)
 800bfac:	f7fc f97f 	bl	80082ae <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f003 0304 	and.w	r3, r3, #4
 800bfb6:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bfbe:	f003 0304 	and.w	r3, r3, #4
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <ethernetif_set_link+0x58>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f009 fd13 	bl	80159f8 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 800bfd2:	e00e      	b.n	800bff2 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d005      	beq.n	800bff2 <ethernetif_set_link+0x76>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f009 fd31 	bl	8015a54 <netif_set_link_down>
}
 800bff2:	bf00      	nop
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	200080e8 	.word	0x200080e8
 800c000:	200080a0 	.word	0x200080a0

0800c004 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800c01a:	089b      	lsrs	r3, r3, #2
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b00      	cmp	r3, #0
 800c024:	d066      	beq.n	800c0f4 <ethernetif_update_config+0xf0>
  {
	  /* Жёсткий перезапуск PHY при появлении линка для LAN8742 */
	      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_RESET);
 800c026:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c02a:	2100      	movs	r1, #0
 800c02c:	4836      	ldr	r0, [pc, #216]	@ (800c108 <ethernetif_update_config+0x104>)
 800c02e:	f7fc f9a6 	bl	800837e <HAL_ETH_WritePHYRegister>
	      HAL_Delay(2);
 800c032:	2002      	movs	r0, #2
 800c034:	f7fa fcf8 	bl	8006a28 <HAL_Delay>
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c038:	4b33      	ldr	r3, [pc, #204]	@ (800c108 <ethernetif_update_config+0x104>)
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d03f      	beq.n	800c0c0 <ethernetif_update_config+0xbc>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c040:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c044:	2100      	movs	r1, #0
 800c046:	4830      	ldr	r0, [pc, #192]	@ (800c108 <ethernetif_update_config+0x104>)
 800c048:	f7fc f999 	bl	800837e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c04c:	f7fa fce2 	bl	8006a14 <HAL_GetTick>
 800c050:	4603      	mov	r3, r0
 800c052:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	461a      	mov	r2, r3
 800c05a:	2101      	movs	r1, #1
 800c05c:	482a      	ldr	r0, [pc, #168]	@ (800c108 <ethernetif_update_config+0x104>)
 800c05e:	f7fc f926 	bl	80082ae <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c062:	f7fa fcd7 	bl	8006a14 <HAL_GetTick>
 800c066:	4602      	mov	r2, r0
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c070:	d828      	bhi.n	800c0c4 <ethernetif_update_config+0xc0>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f003 0320 	and.w	r3, r3, #32
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0eb      	beq.n	800c054 <ethernetif_update_config+0x50>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c07c:	f107 0308 	add.w	r3, r7, #8
 800c080:	461a      	mov	r2, r3
 800c082:	2110      	movs	r1, #16
 800c084:	4820      	ldr	r0, [pc, #128]	@ (800c108 <ethernetif_update_config+0x104>)
 800c086:	f7fc f912 	bl	80082ae <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <ethernetif_update_config+0x9a>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c094:	4b1c      	ldr	r3, [pc, #112]	@ (800c108 <ethernetif_update_config+0x104>)
 800c096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c09a:	60da      	str	r2, [r3, #12]
 800c09c:	e002      	b.n	800c0a4 <ethernetif_update_config+0xa0>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c09e:	4b1a      	ldr	r3, [pc, #104]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f003 0302 	and.w	r3, r3, #2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <ethernetif_update_config+0xb2>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c0ae:	4b16      	ldr	r3, [pc, #88]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	609a      	str	r2, [r3, #8]
 800c0b4:	e016      	b.n	800c0e4 <ethernetif_update_config+0xe0>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800c0bc:	609a      	str	r2, [r3, #8]
 800c0be:	e011      	b.n	800c0e4 <ethernetif_update_config+0xe0>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c0c0:	bf00      	nop
 800c0c2:	e000      	b.n	800c0c6 <ethernetif_update_config+0xc2>
          goto error;
 800c0c4:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c0c6:	4b10      	ldr	r3, [pc, #64]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	08db      	lsrs	r3, r3, #3
 800c0cc:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	085b      	lsrs	r3, r3, #1
 800c0d4:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	461a      	mov	r2, r3
 800c0dc:	2100      	movs	r1, #0
 800c0de:	480a      	ldr	r0, [pc, #40]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0e0:	f7fc f94d 	bl	800837e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4808      	ldr	r0, [pc, #32]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0e8:	f7fc fa0e 	bl	8008508 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c0ec:	4806      	ldr	r0, [pc, #24]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0ee:	f7fc f9ac 	bl	800844a <HAL_ETH_Start>
 800c0f2:	e002      	b.n	800c0fa <ethernetif_update_config+0xf6>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c0f4:	4804      	ldr	r0, [pc, #16]	@ (800c108 <ethernetif_update_config+0x104>)
 800c0f6:	f7fc f9d7 	bl	80084a8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f806 	bl	800c10c <ethernetif_notify_conn_changed>
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	200080a0 	.word	0x200080a0

0800c10c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr
	...

0800c120 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <fs_open+0x16>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d102      	bne.n	800c13c <fs_open+0x1c>
     return ERR_ARG;
 800c136:	f06f 030f 	mvn.w	r3, #15
 800c13a:	e037      	b.n	800c1ac <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f858 	bl	800c1f4 <fs_open_custom>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <fs_open+0x34>
    file->is_custom_file = 1;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	e02b      	b.n	800c1ac <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c15a:	4b16      	ldr	r3, [pc, #88]	@ (800c1b4 <fs_open+0x94>)
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	e020      	b.n	800c1a2 <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4619      	mov	r1, r3
 800c166:	6838      	ldr	r0, [r7, #0]
 800c168:	f7f4 f82e 	bl	80001c8 <strcmp>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d114      	bne.n	800c19c <fs_open+0x7c>
      file->data = (const char *)f->data;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	7c1a      	ldrb	r2, [r3, #16]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	e007      	b.n	800c1ac <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1db      	bne.n	800c160 <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800c1a8:	f06f 0305 	mvn.w	r3, #5
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	08030604 	.word	0x08030604

0800c1b8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7c5b      	ldrb	r3, [r3, #17]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <fs_close+0x16>
    fs_close_custom(file);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f8c9 	bl	800c360 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c1ce:	bf00      	nop
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	1ad3      	subs	r3, r2, r3
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bc80      	pop	{r7}
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <fs_open_custom>:
#include "credentials.h"
#include <string.h>
extern volatile uint8_t g_is_authenticated; // флаг из main.c

int fs_open_custom(struct fs_file *file, const char *name)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  if (file == NULL || name == NULL) return 0;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <fs_open_custom+0x16>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <fs_open_custom+0x1a>
 800c20a:	2300      	movs	r3, #0
 800c20c:	e089      	b.n	800c322 <fs_open_custom+0x12e>

  /* Разрешаем страницы логина и ошибки всегда */
  if (!strcmp(name, "/login.html") || !strcmp(name, "/login_failed.html")) {
 800c20e:	4947      	ldr	r1, [pc, #284]	@ (800c32c <fs_open_custom+0x138>)
 800c210:	6838      	ldr	r0, [r7, #0]
 800c212:	f7f3 ffd9 	bl	80001c8 <strcmp>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d006      	beq.n	800c22a <fs_open_custom+0x36>
 800c21c:	4944      	ldr	r1, [pc, #272]	@ (800c330 <fs_open_custom+0x13c>)
 800c21e:	6838      	ldr	r0, [r7, #0]
 800c220:	f7f3 ffd2 	bl	80001c8 <strcmp>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <fs_open_custom+0x3a>
    return 0; /* обычная отдача */
 800c22a:	2300      	movs	r3, #0
 800c22c:	e079      	b.n	800c322 <fs_open_custom+0x12e>
  }

  /* /login.cgi обрабатывается через CGI handler в main.c */
  if (!strncmp(name, "/login.cgi", 10)) {
 800c22e:	220a      	movs	r2, #10
 800c230:	4940      	ldr	r1, [pc, #256]	@ (800c334 <fs_open_custom+0x140>)
 800c232:	6838      	ldr	r0, [r7, #0]
 800c234:	f016 fa10 	bl	8022658 <strncmp>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <fs_open_custom+0x4e>
    return 0; /* для GET-логина параметры парсит CGI */
 800c23e:	2300      	movs	r3, #0
 800c240:	e06f      	b.n	800c322 <fs_open_custom+0x12e>
  }

  /* Logout */
  if (!strncmp(name, "/logout.cgi", 11)) {
 800c242:	220b      	movs	r2, #11
 800c244:	493c      	ldr	r1, [pc, #240]	@ (800c338 <fs_open_custom+0x144>)
 800c246:	6838      	ldr	r0, [r7, #0]
 800c248:	f016 fa06 	bl	8022658 <strncmp>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d117      	bne.n	800c282 <fs_open_custom+0x8e>
    g_is_authenticated = 0;
 800c252:	4b3a      	ldr	r3, [pc, #232]	@ (800c33c <fs_open_custom+0x148>)
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
    file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a39      	ldr	r2, [pc, #228]	@ (800c340 <fs_open_custom+0x14c>)
 800c25c:	601a      	str	r2, [r3, #0]
    file->len = strlen(file->data);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f7f3 ffba 	bl	80001dc <strlen>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	741a      	strb	r2, [r3, #16]
    return 1;
 800c27e:	2301      	movs	r3, #1
 800c280:	e04f      	b.n	800c322 <fs_open_custom+0x12e>
  }

  /* Для остальных страниц — пропускаем, если авторизован; иначе редирект на login */
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800c282:	4930      	ldr	r1, [pc, #192]	@ (800c344 <fs_open_custom+0x150>)
 800c284:	6838      	ldr	r0, [r7, #0]
 800c286:	f7f3 ff9f 	bl	80001c8 <strcmp>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d022      	beq.n	800c2d6 <fs_open_custom+0xe2>
 800c290:	492d      	ldr	r1, [pc, #180]	@ (800c348 <fs_open_custom+0x154>)
 800c292:	6838      	ldr	r0, [r7, #0]
 800c294:	f7f3 ff98 	bl	80001c8 <strcmp>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01b      	beq.n	800c2d6 <fs_open_custom+0xe2>
 800c29e:	492b      	ldr	r1, [pc, #172]	@ (800c34c <fs_open_custom+0x158>)
 800c2a0:	6838      	ldr	r0, [r7, #0]
 800c2a2:	f7f3 ff91 	bl	80001c8 <strcmp>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d014      	beq.n	800c2d6 <fs_open_custom+0xe2>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800c2ac:	4928      	ldr	r1, [pc, #160]	@ (800c350 <fs_open_custom+0x15c>)
 800c2ae:	6838      	ldr	r0, [r7, #0]
 800c2b0:	f7f3 ff8a 	bl	80001c8 <strcmp>
 800c2b4:	4603      	mov	r3, r0
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00d      	beq.n	800c2d6 <fs_open_custom+0xe2>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800c2ba:	4926      	ldr	r1, [pc, #152]	@ (800c354 <fs_open_custom+0x160>)
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f7f3 ff83 	bl	80001c8 <strcmp>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d006      	beq.n	800c2d6 <fs_open_custom+0xe2>
 800c2c8:	4923      	ldr	r1, [pc, #140]	@ (800c358 <fs_open_custom+0x164>)
 800c2ca:	6838      	ldr	r0, [r7, #0]
 800c2cc:	f016 f9e9 	bl	80226a2 <strstr>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d01b      	beq.n	800c30e <fs_open_custom+0x11a>
    if (g_is_authenticated) {
 800c2d6:	4b19      	ldr	r3, [pc, #100]	@ (800c33c <fs_open_custom+0x148>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <fs_open_custom+0xf0>
      return 0; /* отдать страницу обычно */
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e01e      	b.n	800c322 <fs_open_custom+0x12e>
    } else {
      file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a16      	ldr	r2, [pc, #88]	@ (800c340 <fs_open_custom+0x14c>)
 800c2e8:	601a      	str	r2, [r3, #0]
      file->len = strlen(file->data);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f3 ff74 	bl	80001dc <strlen>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	605a      	str	r2, [r3, #4]
      file->index = file->len;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	609a      	str	r2, [r3, #8]
      file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	741a      	strb	r2, [r3, #16]
      return 1;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e009      	b.n	800c322 <fs_open_custom+0x12e>
    }
  }

  /* Разрешаем прямой доступ к CGI-скриптам (в т.ч. /login.cgi) без авторизации
     иначе браузер может уйти в цикл редиректов при GET-логине */
  if (strstr(name, ".cgi") != NULL) {
 800c30e:	4913      	ldr	r1, [pc, #76]	@ (800c35c <fs_open_custom+0x168>)
 800c310:	6838      	ldr	r0, [r7, #0]
 800c312:	f016 f9c6 	bl	80226a2 <strstr>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <fs_open_custom+0x12c>
    return 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e000      	b.n	800c322 <fs_open_custom+0x12e>
  }
  return 0;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	08025468 	.word	0x08025468
 800c330:	08025474 	.word	0x08025474
 800c334:	08025488 	.word	0x08025488
 800c338:	08025494 	.word	0x08025494
 800c33c:	20002a38 	.word	0x20002a38
 800c340:	080254a0 	.word	0x080254a0
 800c344:	080254d0 	.word	0x080254d0
 800c348:	080254d4 	.word	0x080254d4
 800c34c:	080254e0 	.word	0x080254e0
 800c350:	080254f0 	.word	0x080254f0
 800c354:	080254fc 	.word	0x080254fc
 800c358:	0802550c 	.word	0x0802550c
 800c35c:	08025514 	.word	0x08025514

0800c360 <fs_close_custom>:

void fs_close_custom(struct fs_file *file)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(file);
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bc80      	pop	{r7}
 800c370:	4770      	bx	lr
	...

0800c374 <ssi_handler>:
#include "clock/clock.h"

const char *ssi_tags[] = { "voltage1", "voltage2", "current", "spower", "netip", "netmask", "netgw", "datetime" };

u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 800c374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c376:	b091      	sub	sp, #68	@ 0x44
 800c378:	af06      	add	r7, sp, #24
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
    int len = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    switch (iIndex)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b07      	cmp	r3, #7
 800c388:	f200 80a8 	bhi.w	800c4dc <ssi_handler+0x168>
 800c38c:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <ssi_handler+0x20>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3b5 	.word	0x0800c3b5
 800c398:	0800c3d7 	.word	0x0800c3d7
 800c39c:	0800c3f9 	.word	0x0800c3f9
 800c3a0:	0800c41b 	.word	0x0800c41b
 800c3a4:	0800c44b 	.word	0x0800c44b
 800c3a8:	0800c463 	.word	0x0800c463
 800c3ac:	0800c47b 	.word	0x0800c47b
 800c3b0:	0800c493 	.word	0x0800c493
    {
        case 0:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage1);
 800c3b4:	687c      	ldr	r4, [r7, #4]
 800c3b6:	4b50      	ldr	r3, [pc, #320]	@ (800c4f8 <ssi_handler+0x184>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f4 f87a 	bl	80004b4 <__aeabi_f2d>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	e9cd 2300 	strd	r2, r3, [sp]
 800c3c8:	4a4c      	ldr	r2, [pc, #304]	@ (800c4fc <ssi_handler+0x188>)
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	68b8      	ldr	r0, [r7, #8]
 800c3ce:	f015 ffa7 	bl	8022320 <sniprintf>
 800c3d2:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c3d4:	e089      	b.n	800c4ea <ssi_handler+0x176>
        case 1:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage2);
 800c3d6:	687c      	ldr	r4, [r7, #4]
 800c3d8:	4b49      	ldr	r3, [pc, #292]	@ (800c500 <ssi_handler+0x18c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f4 f869 	bl	80004b4 <__aeabi_f2d>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	e9cd 2300 	strd	r2, r3, [sp]
 800c3ea:	4a44      	ldr	r2, [pc, #272]	@ (800c4fc <ssi_handler+0x188>)
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	68b8      	ldr	r0, [r7, #8]
 800c3f0:	f015 ff96 	bl	8022320 <sniprintf>
 800c3f4:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c3f6:	e078      	b.n	800c4ea <ssi_handler+0x176>
        case 2:
            len = snprintf(pcInsert, iInsertLen, "%.2f", current);
 800c3f8:	687c      	ldr	r4, [r7, #4]
 800c3fa:	4b42      	ldr	r3, [pc, #264]	@ (800c504 <ssi_handler+0x190>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7f4 f858 	bl	80004b4 <__aeabi_f2d>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	e9cd 2300 	strd	r2, r3, [sp]
 800c40c:	4a3b      	ldr	r2, [pc, #236]	@ (800c4fc <ssi_handler+0x188>)
 800c40e:	4621      	mov	r1, r4
 800c410:	68b8      	ldr	r0, [r7, #8]
 800c412:	f015 ff85 	bl	8022320 <sniprintf>
 800c416:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c418:	e067      	b.n	800c4ea <ssi_handler+0x176>
        case 3:
            len = snprintf(pcInsert, iInsertLen, "%.2f", selected_voltage * current);
 800c41a:	687c      	ldr	r4, [r7, #4]
 800c41c:	4b3a      	ldr	r3, [pc, #232]	@ (800c508 <ssi_handler+0x194>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a38      	ldr	r2, [pc, #224]	@ (800c504 <ssi_handler+0x190>)
 800c422:	6812      	ldr	r2, [r2, #0]
 800c424:	4611      	mov	r1, r2
 800c426:	4618      	mov	r0, r3
 800c428:	f7f4 fcd2 	bl	8000dd0 <__aeabi_fmul>
 800c42c:	4603      	mov	r3, r0
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f4 f840 	bl	80004b4 <__aeabi_f2d>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	e9cd 2300 	strd	r2, r3, [sp]
 800c43c:	4a2f      	ldr	r2, [pc, #188]	@ (800c4fc <ssi_handler+0x188>)
 800c43e:	4621      	mov	r1, r4
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f015 ff6d 	bl	8022320 <sniprintf>
 800c446:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c448:	e04f      	b.n	800c4ea <ssi_handler+0x176>
        case 4:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.ip_addr));
 800c44a:	687c      	ldr	r4, [r7, #4]
 800c44c:	482f      	ldr	r0, [pc, #188]	@ (800c50c <ssi_handler+0x198>)
 800c44e:	f014 f941 	bl	80206d4 <ip4addr_ntoa>
 800c452:	4603      	mov	r3, r0
 800c454:	4a2e      	ldr	r2, [pc, #184]	@ (800c510 <ssi_handler+0x19c>)
 800c456:	4621      	mov	r1, r4
 800c458:	68b8      	ldr	r0, [r7, #8]
 800c45a:	f015 ff61 	bl	8022320 <sniprintf>
 800c45e:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c460:	e043      	b.n	800c4ea <ssi_handler+0x176>
        case 5:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.netmask));
 800c462:	687c      	ldr	r4, [r7, #4]
 800c464:	482b      	ldr	r0, [pc, #172]	@ (800c514 <ssi_handler+0x1a0>)
 800c466:	f014 f935 	bl	80206d4 <ip4addr_ntoa>
 800c46a:	4603      	mov	r3, r0
 800c46c:	4a28      	ldr	r2, [pc, #160]	@ (800c510 <ssi_handler+0x19c>)
 800c46e:	4621      	mov	r1, r4
 800c470:	68b8      	ldr	r0, [r7, #8]
 800c472:	f015 ff55 	bl	8022320 <sniprintf>
 800c476:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c478:	e037      	b.n	800c4ea <ssi_handler+0x176>
        case 6:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.gw));
 800c47a:	687c      	ldr	r4, [r7, #4]
 800c47c:	4826      	ldr	r0, [pc, #152]	@ (800c518 <ssi_handler+0x1a4>)
 800c47e:	f014 f929 	bl	80206d4 <ip4addr_ntoa>
 800c482:	4603      	mov	r3, r0
 800c484:	4a22      	ldr	r2, [pc, #136]	@ (800c510 <ssi_handler+0x19c>)
 800c486:	4621      	mov	r1, r4
 800c488:	68b8      	ldr	r0, [r7, #8]
 800c48a:	f015 ff49 	bl	8022320 <sniprintf>
 800c48e:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c490:	e02b      	b.n	800c4ea <ssi_handler+0x176>
        case 7:
            // Получаем текущие дату и время
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c492:	f107 0318 	add.w	r3, r7, #24
 800c496:	2200      	movs	r2, #0
 800c498:	4619      	mov	r1, r3
 800c49a:	4820      	ldr	r0, [pc, #128]	@ (800c51c <ssi_handler+0x1a8>)
 800c49c:	f7fe fc00 	bl	800aca0 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	481c      	ldr	r0, [pc, #112]	@ (800c51c <ssi_handler+0x1a8>)
 800c4aa:	f7fe fccf 	bl	800ae4c <HAL_RTC_GetDate>
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4ae:	6879      	ldr	r1, [r7, #4]
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4b0:	7dbb      	ldrb	r3, [r7, #22]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4b2:	461e      	mov	r6, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4b4:	7d7b      	ldrb	r3, [r7, #21]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4b6:	461a      	mov	r2, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                           sTime.Hours, sTime.Minutes, sTime.Seconds);
 800c4be:	7e38      	ldrb	r0, [r7, #24]
 800c4c0:	7e7c      	ldrb	r4, [r7, #25]
 800c4c2:	7ebd      	ldrb	r5, [r7, #26]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4c4:	9504      	str	r5, [sp, #16]
 800c4c6:	9403      	str	r4, [sp, #12]
 800c4c8:	9002      	str	r0, [sp, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	9200      	str	r2, [sp, #0]
 800c4ce:	4633      	mov	r3, r6
 800c4d0:	4a13      	ldr	r2, [pc, #76]	@ (800c520 <ssi_handler+0x1ac>)
 800c4d2:	68b8      	ldr	r0, [r7, #8]
 800c4d4:	f015 ff24 	bl	8022320 <sniprintf>
 800c4d8:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c4da:	e006      	b.n	800c4ea <ssi_handler+0x176>
        default:
            len = snprintf(pcInsert, iInsertLen, "---");
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a11      	ldr	r2, [pc, #68]	@ (800c524 <ssi_handler+0x1b0>)
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f015 ff1c 	bl	8022320 <sniprintf>
 800c4e8:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    return (u16_t)len;
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	b29b      	uxth	r3, r3
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	372c      	adds	r7, #44	@ 0x2c
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20004aac 	.word	0x20004aac
 800c4fc:	08025588 	.word	0x08025588
 800c500:	20004ab0 	.word	0x20004ab0
 800c504:	20004ab4 	.word	0x20004ab4
 800c508:	20004ab8 	.word	0x20004ab8
 800c50c:	20004f80 	.word	0x20004f80
 800c510:	08025590 	.word	0x08025590
 800c514:	20004f84 	.word	0x20004f84
 800c518:	20004f88 	.word	0x20004f88
 800c51c:	200029d0 	.word	0x200029d0
 800c520:	08025594 	.word	0x08025594
 800c524:	080255b4 	.word	0x080255b4

0800c528 <httpd_ssi_init_custom>:

void httpd_ssi_init_custom(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
    http_set_ssi_handler(ssi_handler, ssi_tags, sizeof(ssi_tags) / sizeof(char*));
 800c52c:	2208      	movs	r2, #8
 800c52e:	4903      	ldr	r1, [pc, #12]	@ (800c53c <httpd_ssi_init_custom+0x14>)
 800c530:	4803      	ldr	r0, [pc, #12]	@ (800c540 <httpd_ssi_init_custom+0x18>)
 800c532:	f001 fc3f 	bl	800ddb4 <http_set_ssi_handler>
}
 800c536:	bf00      	nop
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	200000d0 	.word	0x200000d0
 800c540:	0800c375 	.word	0x0800c375

0800c544 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800c54a:	20dc      	movs	r0, #220	@ 0xdc
 800c54c:	f008 feb0 	bl	80152b0 <mem_malloc>
 800c550:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800c558:	22dc      	movs	r2, #220	@ 0xdc
 800c55a:	2100      	movs	r1, #0
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f016 f845 	bl	80225ec <memset>
  }
  return ret;
 800c562:	687b      	ldr	r3, [r7, #4]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f008 fd1e 	bl	8014fbc <mem_free>
  }
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800c590:	22b4      	movs	r2, #180	@ 0xb4
 800c592:	2100      	movs	r1, #0
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f016 f829 	bl	80225ec <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800c5a8:	20b4      	movs	r0, #180	@ 0xb4
 800c5aa:	f008 fe81 	bl	80152b0 <mem_malloc>
 800c5ae:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d002      	beq.n	800c5bc <http_state_alloc+0x1a>
    http_state_init(ret);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff ffe6 	bl	800c588 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800c5bc:	687b      	ldr	r3, [r7, #4]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d007      	beq.n	800c5e6 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fdec 	bl	800c1b8 <fs_close>
    hs->handle = NULL;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d007      	beq.n	800c5fe <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7ff ffba 	bl	800c56c <http_ssi_state_free>
    hs->ssi = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d007      	beq.n	800c616 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f009 fdfa 	bl	8016204 <pbuf_free>
    hs->req = NULL;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d005      	beq.n	800c638 <http_state_free+0x1a>
    http_state_eof(hs);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ffca 	bl	800c5c6 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f008 fcc2 	bl	8014fbc <mem_free>
  }
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <http_write+0x22>
 800c654:	4b2c      	ldr	r3, [pc, #176]	@ (800c708 <http_write+0xc8>)
 800c656:	f240 2252 	movw	r2, #594	@ 0x252
 800c65a:	492c      	ldr	r1, [pc, #176]	@ (800c70c <http_write+0xcc>)
 800c65c:	482c      	ldr	r0, [pc, #176]	@ (800c710 <http_write+0xd0>)
 800c65e:	f015 fdef 	bl	8022240 <iprintf>
  len = *length;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800c668:	8afb      	ldrh	r3, [r7, #22]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <http_write+0x32>
    return ERR_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	e045      	b.n	800c6fe <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c678:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800c67a:	8aba      	ldrh	r2, [r7, #20]
 800c67c:	8afb      	ldrh	r3, [r7, #22]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d201      	bcs.n	800c686 <http_write+0x46>
    len = max_len;
 800c682:	8abb      	ldrh	r3, [r7, #20]
 800c684:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c68a:	005b      	lsls	r3, r3, #1
 800c68c:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800c68e:	8afa      	ldrh	r2, [r7, #22]
 800c690:	8abb      	ldrh	r3, [r7, #20]
 800c692:	429a      	cmp	r2, r3
 800c694:	d901      	bls.n	800c69a <http_write+0x5a>
    len = max_len;
 800c696:	8abb      	ldrh	r3, [r7, #20]
 800c698:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	8afa      	ldrh	r2, [r7, #22]
 800c69e:	68b9      	ldr	r1, [r7, #8]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f00e fa83 	bl	801abac <tcp_write>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800c6aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d10f      	bne.n	800c6d4 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d902      	bls.n	800c6ce <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	82fb      	strh	r3, [r7, #22]
 800c6cc:	e002      	b.n	800c6d4 <http_write+0x94>
      } else {
        len /= 2;
 800c6ce:	8afb      	ldrh	r3, [r7, #22]
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800c6d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d102      	bne.n	800c6e4 <http_write+0xa4>
 800c6de:	8afb      	ldrh	r3, [r7, #22]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d8da      	bhi.n	800c69a <http_write+0x5a>

  if (err == ERR_OK) {
 800c6e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d103      	bne.n	800c6f4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8afa      	ldrh	r2, [r7, #22]
 800c6f0:	801a      	strh	r2, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800c6fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	08025604 	.word	0x08025604
 800c70c:	0802563c 	.word	0x0802563c
 800c710:	0802564c 	.word	0x0802564c

0800c714 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	4613      	mov	r3, r2
 800c720:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void*)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00c      	beq.n	800c742 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
       || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800c732:	4b1f      	ldr	r3, [pc, #124]	@ (800c7b0 <http_close_or_abort_conn+0x9c>)
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c738:	223f      	movs	r2, #63	@ 0x3f
 800c73a:	491d      	ldr	r1, [pc, #116]	@ (800c7b0 <http_close_or_abort_conn+0x9c>)
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f7f5 ff0b 	bl	8002558 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800c742:	2100      	movs	r1, #0
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f00b fb6b 	bl	8017e20 <tcp_arg>
  tcp_recv(pcb, NULL);
 800c74a:	2100      	movs	r1, #0
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f00b fb77 	bl	8017e40 <tcp_recv>
  tcp_err(pcb, NULL);
 800c752:	2100      	movs	r1, #0
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f00b fbb5 	bl	8017ec4 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800c75a:	2200      	movs	r2, #0
 800c75c:	2100      	movs	r1, #0
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f00b fbe8 	bl	8017f34 <tcp_poll>
  tcp_sent(pcb, NULL);
 800c764:	2100      	movs	r1, #0
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f00b fb8c 	bl	8017e84 <tcp_sent>
  if (hs != NULL) {
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800c772:	68b8      	ldr	r0, [r7, #8]
 800c774:	f7ff ff53 	bl	800c61e <http_state_free>
  }

  if (abort_conn) {
 800c778:	79fb      	ldrb	r3, [r7, #7]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <http_close_or_abort_conn+0x74>
    tcp_abort(pcb);
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f00a fb8a 	bl	8016e98 <tcp_abort>
    return ERR_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	e00f      	b.n	800c7a8 <http_close_or_abort_conn+0x94>
  }
  err = tcp_close(pcb);
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f00a fabb 	bl	8016d04 <tcp_close>
 800c78e:	4603      	mov	r3, r0
 800c790:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800c792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d004      	beq.n	800c7a4 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c79a:	2204      	movs	r2, #4
 800c79c:	4905      	ldr	r1, [pc, #20]	@ (800c7b4 <http_close_or_abort_conn+0xa0>)
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f00b fbc8 	bl	8017f34 <tcp_poll>
  }
  return err;
 800c7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200084ec 	.word	0x200084ec
 800c7b4:	0800dadb 	.word	0x0800dadb

0800c7b8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff ffa4 	bl	800c714 <http_close_or_abort_conn>
 800c7cc:	4603      	mov	r3, r0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7ff ffe8 	bl	800c7b8 <http_close_conn>
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d003      	beq.n	800c808 <extract_uri_parameters+0x18>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <extract_uri_parameters+0x1c>
      return(0);
 800c808:	2300      	movs	r3, #0
 800c80a:	e04b      	b.n	800c8a4 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c810:	2300      	movs	r3, #0
 800c812:	613b      	str	r3, [r7, #16]
 800c814:	e03f      	b.n	800c896 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	320c      	adds	r2, #12
 800c81c:	6979      	ldr	r1, [r7, #20]
 800c81e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800c826:	2126      	movs	r1, #38	@ 0x26
 800c828:	6978      	ldr	r0, [r7, #20]
 800c82a:	f015 fee7 	bl	80225fc <strchr>
 800c82e:	6178      	str	r0, [r7, #20]
    if(pair) {
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <extract_uri_parameters+0x54>
      *pair = '\0';
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2200      	movs	r2, #0
 800c83a:	701a      	strb	r2, [r3, #0]
      pair++;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	3301      	adds	r3, #1
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	e00c      	b.n	800c85e <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800c844:	2120      	movs	r1, #32
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f015 fed8 	bl	80225fc <strchr>
 800c84c:	6178      	str	r0, [r7, #20]
        if(pair) {
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <extract_uri_parameters+0x6a>
            *pair = '\0';
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2200      	movs	r2, #0
 800c858:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800c85e:	213d      	movs	r1, #61	@ 0x3d
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f015 fecb 	bl	80225fc <strchr>
 800c866:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <extract_uri_parameters+0x94>
      *equals = '\0';
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	1c59      	adds	r1, r3, #1
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	321c      	adds	r2, #28
 800c87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c882:	e005      	b.n	800c890 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	321c      	adds	r2, #28
 800c88a:	2100      	movs	r1, #0
 800c88c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3301      	adds	r3, #1
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b0f      	cmp	r3, #15
 800c89a:	dc02      	bgt.n	800c8a2 <extract_uri_parameters+0xb2>
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1b9      	bne.n	800c816 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800c8a2:	693b      	ldr	r3, [r7, #16]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <get_tag_insert+0x1c>
 800c8ba:	4b51      	ldr	r3, [pc, #324]	@ (800ca00 <get_tag_insert+0x154>)
 800c8bc:	f240 323d 	movw	r2, #829	@ 0x33d
 800c8c0:	4950      	ldr	r1, [pc, #320]	@ (800ca04 <get_tag_insert+0x158>)
 800c8c2:	4851      	ldr	r0, [pc, #324]	@ (800ca08 <get_tag_insert+0x15c>)
 800c8c4:	f015 fcbc 	bl	8022240 <iprintf>
  ssi = hs->ssi;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8cc:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d106      	bne.n	800c8e2 <get_tag_insert+0x36>
 800c8d4:	4b4a      	ldr	r3, [pc, #296]	@ (800ca00 <get_tag_insert+0x154>)
 800c8d6:	f240 323f 	movw	r2, #831	@ 0x33f
 800c8da:	494c      	ldr	r1, [pc, #304]	@ (800ca0c <get_tag_insert+0x160>)
 800c8dc:	484a      	ldr	r0, [pc, #296]	@ (800ca08 <get_tag_insert+0x15c>)
 800c8de:	f015 fcaf 	bl	8022240 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800c8e2:	4b4b      	ldr	r3, [pc, #300]	@ (800ca10 <get_tag_insert+0x164>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d02e      	beq.n	800c948 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800c8ea:	4b4a      	ldr	r3, [pc, #296]	@ (800ca14 <get_tag_insert+0x168>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d02a      	beq.n	800c948 <get_tag_insert+0x9c>
 800c8f2:	4b49      	ldr	r3, [pc, #292]	@ (800ca18 <get_tag_insert+0x16c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d026      	beq.n	800c948 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	e01e      	b.n	800c93e <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f103 0011 	add.w	r0, r3, #17
 800c906:	4b43      	ldr	r3, [pc, #268]	@ (800ca14 <get_tag_insert+0x168>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	f7f3 fc58 	bl	80001c8 <strcmp>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10c      	bne.n	800c938 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800c91e:	4b3c      	ldr	r3, [pc, #240]	@ (800ca10 <get_tag_insert+0x164>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	f102 011a 	add.w	r1, r2, #26
 800c928:	22c0      	movs	r2, #192	@ 0xc0
 800c92a:	6978      	ldr	r0, [r7, #20]
 800c92c:	4798      	blx	r3
 800c92e:	4603      	mov	r3, r0
 800c930:	461a      	mov	r2, r3
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800c936:	e060      	b.n	800c9fa <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	3301      	adds	r3, #1
 800c93c:	617b      	str	r3, [r7, #20]
 800c93e:	4b36      	ldr	r3, [pc, #216]	@ (800ca18 <get_tag_insert+0x16c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	429a      	cmp	r2, r3
 800c946:	dbdb      	blt.n	800c900 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3311      	adds	r3, #17
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f3 fc45 	bl	80001dc <strlen>
 800c952:	4603      	mov	r3, r0
 800c954:	2ba6      	cmp	r3, #166	@ 0xa6
 800c956:	d818      	bhi.n	800c98a <get_tag_insert+0xde>
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3311      	adds	r3, #17
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7f3 fc3d 	bl	80001dc <strlen>
 800c962:	4603      	mov	r3, r0
 800c964:	2b09      	cmp	r3, #9
 800c966:	d810      	bhi.n	800c98a <get_tag_insert+0xde>
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3311      	adds	r3, #17
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f3 fc35 	bl	80001dc <strlen>
 800c972:	4603      	mov	r3, r0
 800c974:	2ba6      	cmp	r3, #166	@ 0xa6
 800c976:	d806      	bhi.n	800c986 <get_tag_insert+0xda>
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	3311      	adds	r3, #17
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f3 fc2d 	bl	80001dc <strlen>
 800c982:	4603      	mov	r3, r0
 800c984:	e002      	b.n	800c98c <get_tag_insert+0xe0>
 800c986:	23a7      	movs	r3, #167	@ 0xa7
 800c988:	e000      	b.n	800c98c <get_tag_insert+0xe0>
 800c98a:	2309      	movs	r3, #9
 800c98c:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	331a      	adds	r3, #26
 800c992:	2212      	movs	r2, #18
 800c994:	4921      	ldr	r1, [pc, #132]	@ (800ca1c <get_tag_insert+0x170>)
 800c996:	4618      	mov	r0, r3
 800c998:	f015 ff4d 	bl	8022836 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3311      	adds	r3, #17
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f015 ff44 	bl	8022836 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3312      	adds	r3, #18
 800c9b2:	3318      	adds	r3, #24
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	3302      	adds	r3, #2
 800c9ba:	2207      	movs	r2, #7
 800c9bc:	4918      	ldr	r1, [pc, #96]	@ (800ca20 <get_tag_insert+0x174>)
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f015 ff39 	bl	8022836 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3319      	adds	r3, #25
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	331a      	adds	r3, #26
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7f3 fc01 	bl	80001dc <strlen>
 800c9da:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e2:	d306      	bcc.n	800c9f2 <get_tag_insert+0x146>
 800c9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ca00 <get_tag_insert+0x154>)
 800c9e6:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800c9ea:	490e      	ldr	r1, [pc, #56]	@ (800ca24 <get_tag_insert+0x178>)
 800c9ec:	4806      	ldr	r0, [pc, #24]	@ (800ca08 <get_tag_insert+0x15c>)
 800c9ee:	f015 fc27 	bl	8022240 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	81da      	strh	r2, [r3, #14]
}
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	08025604 	.word	0x08025604
 800ca04:	08025674 	.word	0x08025674
 800ca08:	0802564c 	.word	0x0802564c
 800ca0c:	08025680 	.word	0x08025680
 800ca10:	2000852c 	.word	0x2000852c
 800ca14:	20008534 	.word	0x20008534
 800ca18:	20008530 	.word	0x20008530
 800ca1c:	0802568c 	.word	0x0802568c
 800ca20:	080256a0 	.word	0x080256a0
 800ca24:	080256a8 	.word	0x080256a8

0800ca28 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff feca 	bl	800c7d6 <http_eof>
    return 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	e016      	b.n	800ca74 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff fbc3 	bl	800c1d6 <fs_bytes_left>
 800ca50:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dc05      	bgt.n	800ca64 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff febb 	bl	800c7d6 <http_eof>
    return 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	e007      	b.n	800ca74 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ca64:	4b05      	ldr	r3, [pc, #20]	@ (800ca7c <http_check_eof+0x54>)
 800ca66:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 800ca6a:	4905      	ldr	r1, [pc, #20]	@ (800ca80 <http_check_eof+0x58>)
 800ca6c:	4805      	ldr	r0, [pc, #20]	@ (800ca84 <http_check_eof+0x5c>)
 800ca6e:	f015 fbe7 	bl	8022240 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ca72:	2301      	movs	r3, #1
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	08025604 	.word	0x08025604
 800ca80:	080256b8 	.word	0x080256b8
 800ca84:	0802564c 	.word	0x0802564c

0800ca88 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d803      	bhi.n	800caaa <http_send_data_nonssi+0x22>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	e001      	b.n	800caae <http_send_data_nonssi+0x26>
 800caaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800caae:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	6999      	ldr	r1, [r3, #24]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	bf14      	ite	ne
 800cabc:	2301      	movne	r3, #1
 800cabe:	2300      	moveq	r3, #0
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f107 020c 	add.w	r2, r7, #12
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff fdba 	bl	800c640 <http_write>
 800cacc:	4603      	mov	r3, r0
 800cace:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800cad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10d      	bne.n	800caf4 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	89ba      	ldrh	r2, [r7, #12]
 800cae2:	441a      	add	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caec:	89ba      	ldrh	r2, [r7, #12]
 800caee:	1a9a      	subs	r2, r3, r2
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb16:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <http_send_data_ssi+0x2c>
 800cb1e:	4b8e      	ldr	r3, [pc, #568]	@ (800cd58 <http_send_data_ssi+0x258>)
 800cb20:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 800cb24:	498d      	ldr	r1, [pc, #564]	@ (800cd5c <http_send_data_ssi+0x25c>)
 800cb26:	488e      	ldr	r0, [pc, #568]	@ (800cd60 <http_send_data_ssi+0x260>)
 800cb28:	f015 fb8a 	bl	8022240 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb32:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	f240 824d 	bls.w	800cfdc <http_send_data_ssi+0x4dc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb50:	4293      	cmp	r3, r2
 800cb52:	dc06      	bgt.n	800cb62 <http_send_data_ssi+0x62>
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	e001      	b.n	800cb66 <http_send_data_ssi+0x66>
 800cb62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb66:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	6999      	ldr	r1, [r3, #24]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bf14      	ite	ne
 800cb74:	2301      	movne	r3, #1
 800cb76:	2300      	moveq	r3, #0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	f107 020e 	add.w	r2, r7, #14
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7ff fd5e 	bl	800c640 <http_write>
 800cb84:	4603      	mov	r3, r0
 800cb86:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800cb88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10d      	bne.n	800cbac <http_send_data_ssi+0xac>
      data_to_send = 1;
 800cb90:	2301      	movs	r3, #1
 800cb92:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	89fa      	ldrh	r2, [r7, #14]
 800cb9a:	441a      	add	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba4:	89fa      	ldrh	r2, [r7, #14]
 800cba6:	1a9a      	subs	r2, r3, r2
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f040 8212 	bne.w	800cfdc <http_send_data_ssi+0x4dc>
      return data_to_send;
 800cbb8:	7dbb      	ldrb	r3, [r7, #22]
 800cbba:	e25b      	b.n	800d074 <http_send_data_ssi+0x574>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800cbbc:	89fb      	ldrh	r3, [r7, #14]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <http_send_data_ssi+0xc6>
      return data_to_send;
 800cbc2:	7dbb      	ldrb	r3, [r7, #22]
 800cbc4:	e256      	b.n	800d074 <http_send_data_ssi+0x574>
    }
    switch(ssi->tag_state) {
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	f200 8200 	bhi.w	800cfd2 <http_send_data_ssi+0x4d2>
 800cbd2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd8 <http_send_data_ssi+0xd8>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cbed 	.word	0x0800cbed
 800cbdc:	0800cc1f 	.word	0x0800cc1f
 800cbe0:	0800cc77 	.word	0x0800cc77
 800cbe4:	0800cdb3 	.word	0x0800cdb3
 800cbe8:	0800ceed 	.word	0x0800ceed
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	781a      	ldrb	r2, [r3, #0]
 800cbf2:	4b5c      	ldr	r3, [pc, #368]	@ (800cd64 <http_send_data_ssi+0x264>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d106      	bne.n	800cc08 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->tag_index = 1;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	2201      	movs	r2, #1
 800cc06:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	1e5a      	subs	r2, r3, #1
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	601a      	str	r2, [r3, #0]
        break;
 800cc1c:	e1de      	b.n	800cfdc <http_send_data_ssi+0x4dc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	899b      	ldrh	r3, [r3, #12]
 800cc22:	2b05      	cmp	r3, #5
 800cc24:	d107      	bne.n	800cc36 <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800cc34:	e1d2      	b.n	800cfdc <http_send_data_ssi+0x4dc>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	781a      	ldrb	r2, [r3, #0]
 800cc3c:	4949      	ldr	r1, [pc, #292]	@ (800cd64 <http_send_data_ssi+0x264>)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	899b      	ldrh	r3, [r3, #12]
 800cc42:	440b      	add	r3, r1
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d106      	bne.n	800cc58 <http_send_data_ssi+0x158>
            ssi->tag_index++;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	899b      	ldrh	r3, [r3, #12]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	819a      	strh	r2, [r3, #12]
 800cc56:	e003      	b.n	800cc60 <http_send_data_ssi+0x160>
            ssi->tag_state = TAG_NONE;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->parse_left--;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	1e5a      	subs	r2, r3, #1
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	1c5a      	adds	r2, r3, #1
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	601a      	str	r2, [r3, #0]
        break;
 800cc74:	e1b2      	b.n	800cfdc <http_send_data_ssi+0x4dc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	899b      	ldrh	r3, [r3, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d11e      	bne.n	800ccbc <http_send_data_ssi+0x1bc>
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b20      	cmp	r3, #32
 800cc86:	d00e      	beq.n	800cca6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cc8e:	2b09      	cmp	r3, #9
 800cc90:	d009      	beq.n	800cca6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b0a      	cmp	r3, #10
 800cc9a:	d004      	beq.n	800cca6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cca2:	2b0d      	cmp	r3, #13
 800cca4:	d10a      	bne.n	800ccbc <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	1e5a      	subs	r2, r3, #1
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	601a      	str	r2, [r3, #0]
          break;
 800ccba:	e18f      	b.n	800cfdc <http_send_data_ssi+0x4dc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	781a      	ldrb	r2, [r3, #0]
 800ccc2:	4b29      	ldr	r3, [pc, #164]	@ (800cd68 <http_send_data_ssi+0x268>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d013      	beq.n	800ccf2 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800ccd0:	2b20      	cmp	r3, #32
 800ccd2:	d00e      	beq.n	800ccf2 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b09      	cmp	r3, #9
 800ccdc:	d009      	beq.n	800ccf2 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800cce4:	2b0a      	cmp	r3, #10
 800cce6:	d004      	beq.n	800ccf2 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b0d      	cmp	r3, #13
 800ccf0:	d13e      	bne.n	800cd70 <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d104      	bne.n	800cd04 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          if(ssi->tag_index == 0) {
 800cd02:	e04b      	b.n	800cd9c <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2203      	movs	r2, #3
 800cd08:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	899b      	ldrh	r3, [r3, #12]
 800cd10:	2bff      	cmp	r3, #255	@ 0xff
 800cd12:	d906      	bls.n	800cd22 <http_send_data_ssi+0x222>
 800cd14:	4b10      	ldr	r3, [pc, #64]	@ (800cd58 <http_send_data_ssi+0x258>)
 800cd16:	f240 525d 	movw	r2, #1373	@ 0x55d
 800cd1a:	4914      	ldr	r1, [pc, #80]	@ (800cd6c <http_send_data_ssi+0x26c>)
 800cd1c:	4810      	ldr	r0, [pc, #64]	@ (800cd60 <http_send_data_ssi+0x260>)
 800cd1e:	f015 fa8f 	bl	8022240 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	899b      	ldrh	r3, [r3, #12]
 800cd30:	461a      	mov	r2, r3
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	4413      	add	r3, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	781a      	ldrb	r2, [r3, #0]
 800cd40:	4b09      	ldr	r3, [pc, #36]	@ (800cd68 <http_send_data_ssi+0x268>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d103      	bne.n	800cd50 <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800cd4e:	e025      	b.n	800cd9c <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	2200      	movs	r2, #0
 800cd54:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800cd56:	e021      	b.n	800cd9c <http_send_data_ssi+0x29c>
 800cd58:	08025604 	.word	0x08025604
 800cd5c:	08025680 	.word	0x08025680
 800cd60:	0802564c 	.word	0x0802564c
 800cd64:	080255f8 	.word	0x080255f8
 800cd68:	08025600 	.word	0x08025600
 800cd6c:	080256f0 	.word	0x080256f0
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	899b      	ldrh	r3, [r3, #12]
 800cd74:	2b07      	cmp	r3, #7
 800cd76:	d80d      	bhi.n	800cd94 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	899b      	ldrh	r3, [r3, #12]
 800cd80:	1c59      	adds	r1, r3, #1
 800cd82:	b288      	uxth	r0, r1
 800cd84:	6939      	ldr	r1, [r7, #16]
 800cd86:	8188      	strh	r0, [r1, #12]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	7812      	ldrb	r2, [r2, #0]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	440b      	add	r3, r1
 800cd90:	745a      	strb	r2, [r3, #17]
 800cd92:	e003      	b.n	800cd9c <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	1e5a      	subs	r2, r3, #1
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	1c5a      	adds	r2, r3, #1
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	601a      	str	r2, [r3, #0]

        break;
 800cdb0:	e114      	b.n	800cfdc <http_send_data_ssi+0x4dc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	899b      	ldrh	r3, [r3, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d11e      	bne.n	800cdf8 <http_send_data_ssi+0x2f8>
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b20      	cmp	r3, #32
 800cdc2:	d00e      	beq.n	800cde2 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cdca:	2b09      	cmp	r3, #9
 800cdcc:	d009      	beq.n	800cde2 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b0a      	cmp	r3, #10
 800cdd6:	d004      	beq.n	800cde2 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdde:	2b0d      	cmp	r3, #13
 800cde0:	d10a      	bne.n	800cdf8 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	1e5a      	subs	r2, r3, #1
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	601a      	str	r2, [r3, #0]
          break;
 800cdf6:	e0f1      	b.n	800cfdc <http_send_data_ssi+0x4dc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	4989      	ldr	r1, [pc, #548]	@ (800d024 <http_send_data_ssi+0x524>)
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	899b      	ldrh	r3, [r3, #12]
 800ce04:	440b      	add	r3, r1
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d160      	bne.n	800cece <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	1c5a      	adds	r2, r3, #1
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	899b      	ldrh	r3, [r3, #12]
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d14b      	bne.n	800cec0 <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800ce28:	6838      	ldr	r0, [r7, #0]
 800ce2a:	f7ff fd3f 	bl	800c8ac <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2200      	movs	r2, #0
 800ce32:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	2204      	movs	r2, #4
 800ce38:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            ssi->tag_end = ssi->parsed;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	699b      	ldr	r3, [r3, #24]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	f240 80c2 	bls.w	800cfd6 <http_send_data_ssi+0x4d6>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ce60:	4293      	cmp	r3, r2
 800ce62:	dc06      	bgt.n	800ce72 <http_send_data_ssi+0x372>
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	e001      	b.n	800ce76 <http_send_data_ssi+0x376>
 800ce72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce76:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	6999      	ldr	r1, [r3, #24]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bf14      	ite	ne
 800ce84:	2301      	movne	r3, #1
 800ce86:	2300      	moveq	r3, #0
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	f107 020e 	add.w	r2, r7, #14
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff fbd6 	bl	800c640 <http_write>
 800ce94:	4603      	mov	r3, r0
 800ce96:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800ce98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f040 809a 	bne.w	800cfd6 <http_send_data_ssi+0x4d6>
                data_to_send = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	89fa      	ldrh	r2, [r7, #14]
 800ceac:	441a      	add	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb6:	89fa      	ldrh	r2, [r7, #14]
 800ceb8:	1a9a      	subs	r2, r3, r2
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800cebe:	e08a      	b.n	800cfd6 <http_send_data_ssi+0x4d6>
            ssi->tag_index++;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	899b      	ldrh	r3, [r3, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	819a      	strh	r2, [r3, #12]
        break;
 800cecc:	e083      	b.n	800cfd6 <http_send_data_ssi+0x4d6>
          ssi->parse_left--;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	1e5a      	subs	r2, r3, #1
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        break;
 800ceea:	e074      	b.n	800cfd6 <http_send_data_ssi+0x4d6>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	699b      	ldr	r3, [r3, #24]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d93b      	bls.n	800cf70 <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cf06:	4293      	cmp	r3, r2
 800cf08:	dc06      	bgt.n	800cf18 <http_send_data_ssi+0x418>
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	699b      	ldr	r3, [r3, #24]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	e001      	b.n	800cf1c <http_send_data_ssi+0x41c>
 800cf18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf1c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800cf1e:	89fb      	ldrh	r3, [r7, #14]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d010      	beq.n	800cf46 <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	6999      	ldr	r1, [r3, #24]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	bf14      	ite	ne
 800cf30:	2301      	movne	r3, #1
 800cf32:	2300      	moveq	r3, #0
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	f107 020e 	add.w	r2, r7, #14
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff fb80 	bl	800c640 <http_write>
 800cf40:	4603      	mov	r3, r0
 800cf42:	75fb      	strb	r3, [r7, #23]
 800cf44:	e001      	b.n	800cf4a <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800cf4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d144      	bne.n	800cfdc <http_send_data_ssi+0x4dc>
            data_to_send = 1;
 800cf52:	2301      	movs	r3, #1
 800cf54:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	89fa      	ldrh	r2, [r7, #14]
 800cf5c:	441a      	add	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf66:	89fa      	ldrh	r2, [r7, #14]
 800cf68:	1a9a      	subs	r2, r3, r2
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf6e:	e035      	b.n	800cfdc <http_send_data_ssi+0x4dc>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	899a      	ldrh	r2, [r3, #12]
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	89db      	ldrh	r3, [r3, #14]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d222      	bcs.n	800cfc2 <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	89da      	ldrh	r2, [r3, #14]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	899b      	ldrh	r3, [r3, #12]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	899b      	ldrh	r3, [r3, #12]
 800cf8e:	3318      	adds	r3, #24
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	4413      	add	r3, r2
 800cf94:	1c99      	adds	r1, r3, #2
 800cf96:	f107 020e 	add.w	r2, r7, #14
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff fb4f 	bl	800c640 <http_write>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800cfa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d115      	bne.n	800cfda <http_send_data_ssi+0x4da>
              data_to_send = 1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	899a      	ldrh	r2, [r3, #12]
 800cfb6:	89fb      	ldrh	r3, [r7, #14]
 800cfb8:	4413      	add	r3, r2
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800cfc0:	e00b      	b.n	800cfda <http_send_data_ssi+0x4da>
              ssi->tag_index = 0;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          break;
 800cfd0:	e003      	b.n	800cfda <http_send_data_ssi+0x4da>
        default:
          break;
 800cfd2:	bf00      	nop
 800cfd4:	e002      	b.n	800cfdc <http_send_data_ssi+0x4dc>
        break;
 800cfd6:	bf00      	nop
 800cfd8:	e000      	b.n	800cfdc <http_send_data_ssi+0x4dc>
          break;
 800cfda:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <http_send_data_ssi+0x4ee>
 800cfe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f43f ade7 	beq.w	800cbbc <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800cff4:	2b04      	cmp	r3, #4
 800cff6:	d03c      	beq.n	800d072 <http_send_data_ssi+0x572>
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	d936      	bls.n	800d072 <http_send_data_ssi+0x572>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d012:	4293      	cmp	r3, r2
 800d014:	dc08      	bgt.n	800d028 <http_send_data_ssi+0x528>
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	b29b      	uxth	r3, r3
 800d022:	e003      	b.n	800d02c <http_send_data_ssi+0x52c>
 800d024:	08025600 	.word	0x08025600
 800d028:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d02c:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	6999      	ldr	r1, [r3, #24]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d036:	2b00      	cmp	r3, #0
 800d038:	bf14      	ite	ne
 800d03a:	2301      	movne	r3, #1
 800d03c:	2300      	moveq	r3, #0
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	f107 020e 	add.w	r2, r7, #14
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fafb 	bl	800c640 <http_write>
 800d04a:	4603      	mov	r3, r0
 800d04c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d04e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10d      	bne.n	800d072 <http_send_data_ssi+0x572>
      data_to_send = 1;
 800d056:	2301      	movs	r3, #1
 800d058:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	89fa      	ldrh	r2, [r7, #14]
 800d060:	441a      	add	r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06a:	89fa      	ldrh	r2, [r7, #14]
 800d06c:	1a9a      	subs	r2, r3, r2
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800d072:	7dbb      	ldrb	r3, [r7, #22]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <http_send+0x18>
    return 0;
 800d090:	2300      	movs	r3, #0
 800d092:	e030      	b.n	800d0f6 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d108      	bne.n	800d0ae <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7ff fcc2 	bl	800ca28 <http_check_eof>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <http_send+0x32>
      return 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e023      	b.n	800d0f6 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d006      	beq.n	800d0c4 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff fd21 	bl	800cb00 <http_send_data_ssi>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	73fb      	strb	r3, [r7, #15]
 800d0c2:	e005      	b.n	800d0d0 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff fcde 	bl	800ca88 <http_send_data_nonssi>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10d      	bne.n	800d0f4 <http_send+0x78>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff f87a 	bl	800c1d6 <fs_bytes_left>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	dc05      	bgt.n	800d0f4 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fb73 	bl	800c7d6 <http_eof>
    return 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	4a1c      	ldr	r2, [pc, #112]	@ (800d180 <http_get_404_file+0x80>)
 800d10e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4619      	mov	r1, r3
 800d118:	4610      	mov	r0, r2
 800d11a:	f7ff f801 	bl	800c120 <fs_open>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d024      	beq.n	800d174 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	4a15      	ldr	r2, [pc, #84]	@ (800d184 <http_get_404_file+0x84>)
 800d12e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4619      	mov	r1, r3
 800d138:	4610      	mov	r0, r2
 800d13a:	f7fe fff1 	bl	800c120 <fs_open>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d014      	beq.n	800d174 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	4a0e      	ldr	r2, [pc, #56]	@ (800d188 <http_get_404_file+0x88>)
 800d14e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4619      	mov	r1, r3
 800d158:	4610      	mov	r0, r2
 800d15a:	f7fe ffe1 	bl	800c120 <fs_open>
 800d15e:	4603      	mov	r3, r0
 800d160:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800d162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d004      	beq.n	800d174 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
        return NULL;
 800d170:	2300      	movs	r3, #0
 800d172:	e000      	b.n	800d176 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800d174:	687b      	ldr	r3, [r7, #4]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	08025708 	.word	0x08025708
 800d184:	08025714 	.word	0x08025714
 800d188:	08025720 	.word	0x08025720

0800d18c <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800d194:	4b08      	ldr	r3, [pc, #32]	@ (800d1b8 <http_handle_post_finished+0x2c>)
 800d196:	2200      	movs	r2, #0
 800d198:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800d19a:	223f      	movs	r2, #63	@ 0x3f
 800d19c:	4906      	ldr	r1, [pc, #24]	@ (800d1b8 <http_handle_post_finished+0x2c>)
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7f5 f9da 	bl	8002558 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	4904      	ldr	r1, [pc, #16]	@ (800d1b8 <http_handle_post_finished+0x2c>)
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fa6b 	bl	800d684 <http_find_file>
 800d1ae:	4603      	mov	r3, r0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	200084ec 	.word	0x200084ec

0800d1bc <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d014      	beq.n	800d1f6 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	8912      	ldrh	r2, [r2, #8]
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d204      	bcs.n	800d1e4 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800d1e2:	e008      	b.n	800d1f6 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	8912      	ldrh	r2, [r2, #8]
 800d1ee:	1a9a      	subs	r2, r3, r2
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  err = httpd_post_receive_data(hs, p);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7f5 f96b 	bl	80024d4 <httpd_post_receive_data>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800d202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <http_post_rxpbuf+0x56>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  if (hs->post_content_len_left == 0) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d104      	bne.n	800d226 <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
       return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ffb5 	bl	800d18c <http_handle_post_finished>
 800d222:	4603      	mov	r3, r0
 800d224:	e000      	b.n	800d228 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b092      	sub	sp, #72	@ 0x48
 800d234:	af04      	add	r7, sp, #16
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800d23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d240:	1c58      	adds	r0, r3, #1
 800d242:	887a      	ldrh	r2, [r7, #2]
 800d244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	1acb      	subs	r3, r1, r3
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	461a      	mov	r2, r3
 800d250:	4967      	ldr	r1, [pc, #412]	@ (800d3f0 <http_post_request+0x1c0>)
 800d252:	f007 fd56 	bl	8014d02 <lwip_strnstr>
 800d256:	62b8      	str	r0, [r7, #40]	@ 0x28

  if (crlfcrlf != NULL) {
 800d258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 80c1 	beq.w	800d3e2 <http_post_request+0x1b2>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800d260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d262:	1c58      	adds	r0, r3, #1
 800d264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d266:	3301      	adds	r3, #1
 800d268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	461a      	mov	r2, r3
 800d26e:	4961      	ldr	r1, [pc, #388]	@ (800d3f4 <http_post_request+0x1c4>)
 800d270:	f007 fd47 	bl	8014d02 <lwip_strnstr>
 800d274:	6278      	str	r0, [r7, #36]	@ 0x24
    if (scontent_len != NULL) {
 800d276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80af 	beq.w	800d3dc <http_post_request+0x1ac>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800d27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d280:	3310      	adds	r3, #16
 800d282:	220a      	movs	r2, #10
 800d284:	495c      	ldr	r1, [pc, #368]	@ (800d3f8 <http_post_request+0x1c8>)
 800d286:	4618      	mov	r0, r3
 800d288:	f007 fd3b 	bl	8014d02 <lwip_strnstr>
 800d28c:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 80a3 	beq.w	800d3dc <http_post_request+0x1ac>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	3310      	adds	r3, #16
 800d29a:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800d29c:	69f8      	ldr	r0, [r7, #28]
 800d29e:	f014 f9e1 	bl	8021664 <atoi>
 800d2a2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (content_len == 0) {
 800d2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b30      	cmp	r3, #48	@ 0x30
 800d2b0:	d104      	bne.n	800d2bc <http_post_request+0x8c>
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b0d      	cmp	r3, #13
 800d2ba:	d002      	beq.n	800d2c2 <http_post_request+0x92>
            content_len = -1;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        if (content_len >= 0) {
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f2c0 8086 	blt.w	800d3d6 <http_post_request+0x1a6>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800d2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800d2d0:	887a      	ldrh	r2, [r7, #2]
 800d2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d4:	1d19      	adds	r1, r3, #4
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	1acb      	subs	r3, r1, r3
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	db05      	blt.n	800d2ea <http_post_request+0xba>
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	e000      	b.n	800d2ec <http_post_request+0xbc>
 800d2ea:	887b      	ldrh	r3, [r7, #2]
 800d2ec:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800d2ee:	887a      	ldrh	r2, [r7, #2]
 800d2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f2:	1d19      	adds	r1, r3, #4
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	1acb      	subs	r3, r1, r3
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	db05      	blt.n	800d308 <http_post_request+0xd8>
 800d2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fe:	1d1a      	adds	r2, r3, #4
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	b29b      	uxth	r3, r3
 800d306:	e000      	b.n	800d30a <http_post_request+0xda>
 800d308:	887b      	ldrh	r3, [r7, #2]
 800d30a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800d310:	4b3a      	ldr	r3, [pc, #232]	@ (800d3fc <http_post_request+0x1cc>)
 800d312:	2200      	movs	r2, #0
 800d314:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800d316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800d31c:	8aba      	ldrh	r2, [r7, #20]
 800d31e:	f107 0312 	add.w	r3, r7, #18
 800d322:	9303      	str	r3, [sp, #12]
 800d324:	233f      	movs	r3, #63	@ 0x3f
 800d326:	9302      	str	r3, [sp, #8]
 800d328:	4b34      	ldr	r3, [pc, #208]	@ (800d3fc <http_post_request+0x1cc>)
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	4613      	mov	r3, r2
 800d332:	69ba      	ldr	r2, [r7, #24]
 800d334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d336:	68b8      	ldr	r0, [r7, #8]
 800d338:	f7f5 f884 	bl	8002444 <httpd_post_begin>
 800d33c:	4603      	mov	r3, r0
 800d33e:	74fb      	strb	r3, [r7, #19]
            http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800d340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d13f      	bne.n	800d3c8 <http_post_request+0x198>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	633b      	str	r3, [r7, #48]	@ 0x30
            u16_t start_offset = hdr_len;
 800d34c:	8afb      	ldrh	r3, [r7, #22]
 800d34e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800d350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* get to the pbuf where the body starts */
            while((q != NULL) && (q->len <= start_offset)) {
 800d358:	e007      	b.n	800d36a <http_post_request+0x13a>
              start_offset -= q->len;
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	895b      	ldrh	r3, [r3, #10]
 800d35e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	85fb      	strh	r3, [r7, #46]	@ 0x2e
              q = q->next;
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	633b      	str	r3, [r7, #48]	@ 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <http_post_request+0x14a>
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	895b      	ldrh	r3, [r3, #10]
 800d374:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d376:	429a      	cmp	r2, r3
 800d378:	d2ef      	bcs.n	800d35a <http_post_request+0x12a>
            }
            if (q != NULL) {
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d010      	beq.n	800d3a2 <http_post_request+0x172>
              /* hide the remaining HTTP header */
              pbuf_header(q, -(s16_t)start_offset);
 800d380:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d382:	425b      	negs	r3, r3
 800d384:	b29b      	uxth	r3, r3
 800d386:	b21b      	sxth	r3, r3
 800d388:	4619      	mov	r1, r3
 800d38a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d38c:	f008 ff16 	bl	80161bc <pbuf_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800d390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d392:	f008 ffe1 	bl	8016358 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800d396:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d398:	68b8      	ldr	r0, [r7, #8]
 800d39a:	f7ff ff0f 	bl	800d1bc <http_post_rxpbuf>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	e021      	b.n	800d3e6 <http_post_request+0x1b6>
            } else if (hs->post_content_len_left == 0) {
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10b      	bne.n	800d3c4 <http_post_request+0x194>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	2004      	movs	r0, #4
 800d3b2:	f008 fbaf 	bl	8015b14 <pbuf_alloc>
 800d3b6:	6338      	str	r0, [r7, #48]	@ 0x30
              return http_post_rxpbuf(hs, q);
 800d3b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3ba:	68b8      	ldr	r0, [r7, #8]
 800d3bc:	f7ff fefe 	bl	800d1bc <http_post_rxpbuf>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	e010      	b.n	800d3e6 <http_post_request+0x1b6>
            } else {
              return ERR_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e00e      	b.n	800d3e6 <http_post_request+0x1b6>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	490c      	ldr	r1, [pc, #48]	@ (800d3fc <http_post_request+0x1cc>)
 800d3cc:	68b8      	ldr	r0, [r7, #8]
 800d3ce:	f000 f959 	bl	800d684 <http_find_file>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	e007      	b.n	800d3e6 <http_post_request+0x1b6>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
            content_len_num));
          return ERR_ARG;
 800d3d6:	f06f 030f 	mvn.w	r3, #15
 800d3da:	e004      	b.n	800d3e6 <http_post_request+0x1b6>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800d3dc:	f06f 030f 	mvn.w	r3, #15
 800d3e0:	e001      	b.n	800d3e6 <http_post_request+0x1b6>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800d3e2:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3738      	adds	r7, #56	@ 0x38
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	0802572c 	.word	0x0802572c
 800d3f4:	08025734 	.word	0x08025734
 800d3f8:	08025748 	.word	0x08025748
 800d3fc:	200084ec 	.word	0x200084ec

0800d400 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b092      	sub	sp, #72	@ 0x48
 800d404:	af02      	add	r7, sp, #8
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800d410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d412:	2b00      	cmp	r3, #0
 800d414:	d106      	bne.n	800d424 <http_parse_request+0x24>
 800d416:	4b91      	ldr	r3, [pc, #580]	@ (800d65c <http_parse_request+0x25c>)
 800d418:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800d41c:	4990      	ldr	r1, [pc, #576]	@ (800d660 <http_parse_request+0x260>)
 800d41e:	4891      	ldr	r0, [pc, #580]	@ (800d664 <http_parse_request+0x264>)
 800d420:	f014 ff0e 	bl	8022240 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d106      	bne.n	800d438 <http_parse_request+0x38>
 800d42a:	4b8c      	ldr	r3, [pc, #560]	@ (800d65c <http_parse_request+0x25c>)
 800d42c:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800d430:	498d      	ldr	r1, [pc, #564]	@ (800d668 <http_parse_request+0x268>)
 800d432:	488c      	ldr	r0, [pc, #560]	@ (800d664 <http_parse_request+0x264>)
 800d434:	f014 ff04 	bl	8022240 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	695b      	ldr	r3, [r3, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d103      	bne.n	800d448 <http_parse_request+0x48>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800d448:	f06f 0307 	mvn.w	r3, #7
 800d44c:	e102      	b.n	800d654 <http_parse_request+0x254>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d103      	bne.n	800d45e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d45a:	621a      	str	r2, [r3, #32]
 800d45c:	e005      	b.n	800d46a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d464:	4618      	mov	r0, r3
 800d466:	f008 ff99 	bl	801639c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800d46a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d46c:	f008 ff74 	bl	8016358 <pbuf_ref>

  if (hs->req->next != NULL) {
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	6a1b      	ldr	r3, [r3, #32]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d012      	beq.n	800d4a0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6a1b      	ldr	r3, [r3, #32]
 800d47e:	891b      	ldrh	r3, [r3, #8]
 800d480:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800d484:	4293      	cmp	r3, r2
 800d486:	bf28      	it	cs
 800d488:	4613      	movcs	r3, r2
 800d48a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	6a18      	ldr	r0, [r3, #32]
 800d490:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d492:	2300      	movs	r3, #0
 800d494:	4975      	ldr	r1, [pc, #468]	@ (800d66c <http_parse_request+0x26c>)
 800d496:	f009 f8b3 	bl	8016600 <pbuf_copy_partial>
    data = httpd_req_buf;
 800d49a:	4b74      	ldr	r3, [pc, #464]	@ (800d66c <http_parse_request+0x26c>)
 800d49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d49e:	e005      	b.n	800d4ac <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    data_len = p->len;
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	895b      	ldrh	r3, [r3, #10]
 800d4aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800d4ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4ae:	2b06      	cmp	r3, #6
 800d4b0:	f240 80b6 	bls.w	800d620 <http_parse_request+0x220>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800d4b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	496d      	ldr	r1, [pc, #436]	@ (800d670 <http_parse_request+0x270>)
 800d4ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4bc:	f007 fc21 	bl	8014d02 <lwip_strnstr>
 800d4c0:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 80ab 	beq.w	800d620 <http_parse_request+0x220>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	633b      	str	r3, [r7, #48]	@ 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800d4d2:	2204      	movs	r2, #4
 800d4d4:	4967      	ldr	r1, [pc, #412]	@ (800d674 <http_parse_request+0x274>)
 800d4d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4d8:	f015 f8be 	bl	8022658 <strncmp>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d103      	bne.n	800d4ea <http_parse_request+0xea>
        sp1 = data + 3;
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e4:	3303      	adds	r3, #3
 800d4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4e8:	e014      	b.n	800d514 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800d4ea:	2205      	movs	r2, #5
 800d4ec:	4962      	ldr	r1, [pc, #392]	@ (800d678 <http_parse_request+0x278>)
 800d4ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4f0:	f015 f8b2 	bl	8022658 <strncmp>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        sp1 = data + 4;
 800d4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d500:	3304      	adds	r3, #4
 800d502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d504:	e006      	b.n	800d514 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800d506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d508:	3304      	adds	r3, #4
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
 800d50e:	f06f 030f 	mvn.w	r3, #15
 800d512:	e09f      	b.n	800d654 <http_parse_request+0x254>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800d514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d520:	1ad3      	subs	r3, r2, r3
 800d522:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800d524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d526:	3301      	adds	r3, #1
 800d528:	8bfa      	ldrh	r2, [r7, #30]
 800d52a:	4954      	ldr	r1, [pc, #336]	@ (800d67c <http_parse_request+0x27c>)
 800d52c:	4618      	mov	r0, r3
 800d52e:	f007 fbe8 	bl	8014d02 <lwip_strnstr>
 800d532:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10c      	bne.n	800d554 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	3301      	adds	r3, #1
 800d53e:	8bfa      	ldrh	r2, [r7, #30]
 800d540:	494b      	ldr	r1, [pc, #300]	@ (800d670 <http_parse_request+0x270>)
 800d542:	4618      	mov	r0, r3
 800d544:	f007 fbdd 	bl	8014d02 <lwip_strnstr>
 800d548:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800d54a:	2301      	movs	r3, #1
 800d54c:	633b      	str	r3, [r7, #48]	@ 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800d54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d550:	2b00      	cmp	r3, #0
 800d552:	d178      	bne.n	800d646 <http_parse_request+0x246>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800d554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d556:	3301      	adds	r3, #1
 800d558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800d55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d560:	2b00      	cmp	r3, #0
 800d562:	d05d      	beq.n	800d620 <http_parse_request+0x220>
 800d564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d568:	429a      	cmp	r2, r3
 800d56a:	d959      	bls.n	800d620 <http_parse_request+0x220>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800d56c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d56e:	461a      	mov	r2, r3
 800d570:	4943      	ldr	r1, [pc, #268]	@ (800d680 <http_parse_request+0x280>)
 800d572:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d574:	f007 fbc5 	bl	8014d02 <lwip_strnstr>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d050      	beq.n	800d620 <http_parse_request+0x220>
          char *uri = sp1 + 1;
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	3301      	adds	r3, #1
 800d582:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800d584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d586:	2200      	movs	r2, #0
 800d588:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800d58a:	8bbb      	ldrh	r3, [r7, #28]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	4413      	add	r3, r2
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                      data, uri));
          /* Track request (IP + Cookie) for per-session auth */
          extern void Auth_SetCurrentRemoteIp(const ip_addr_t* ip);
          extern void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len);
          Auth_SetCurrentRemoteIp(&pcb->remote_ip);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3304      	adds	r3, #4
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f3 ffd5 	bl	8001548 <Auth_SetCurrentRemoteIp>
          /* Headers are in 'data' up to CRLFCRLF */
          Auth_BeginRequestWithCookieHeader(data, (u16_t)(lwip_strnstr(data, CRLF CRLF, data_len) - data + 4));
 800d59e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4937      	ldr	r1, [pc, #220]	@ (800d680 <http_parse_request+0x280>)
 800d5a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d5a6:	f007 fbac 	bl	8014d02 <lwip_strnstr>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d5ba:	f7f3 ffe1 	bl	8001580 <Auth_BeginRequestWithCookieHeader>
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800d5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d026      	beq.n	800d612 <http_parse_request+0x212>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800d5ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d5d8:	68b9      	ldr	r1, [r7, #8]
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff fe28 	bl	800d230 <http_post_request>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800d5e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <http_parse_request+0x202>
              /* restore header for next try */
              *sp1 = ' ';
 800d5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	2220      	movs	r2, #32
 800d5f6:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800d5f8:	8bbb      	ldrh	r3, [r7, #28]
 800d5fa:	69ba      	ldr	r2, [r7, #24]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	2220      	movs	r2, #32
 800d600:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800d602:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d606:	f113 0f10 	cmn.w	r3, #16
 800d60a:	d01e      	beq.n	800d64a <http_parse_request+0x24a>
              goto badrequest;
            }
            return err;
 800d60c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d610:	e020      	b.n	800d654 <http_parse_request+0x254>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800d612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d614:	69b9      	ldr	r1, [r7, #24]
 800d616:	68b8      	ldr	r0, [r7, #8]
 800d618:	f000 f834 	bl	800d684 <http_find_file>
 800d61c:	4603      	mov	r3, r0
 800d61e:	e019      	b.n	800d654 <http_parse_request+0x254>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6a1b      	ldr	r3, [r3, #32]
 800d624:	4618      	mov	r0, r3
 800d626:	f008 fe81 	bl	801632c <pbuf_clen>
 800d62a:	4603      	mov	r3, r0
 800d62c:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	891b      	ldrh	r3, [r3, #8]
 800d634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d638:	d209      	bcs.n	800d64e <http_parse_request+0x24e>
 800d63a:	8a3b      	ldrh	r3, [r7, #16]
 800d63c:	2b05      	cmp	r3, #5
 800d63e:	d806      	bhi.n	800d64e <http_parse_request+0x24e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800d640:	f06f 0304 	mvn.w	r3, #4
 800d644:	e006      	b.n	800d654 <http_parse_request+0x254>
          goto badrequest;
 800d646:	bf00      	nop
 800d648:	e002      	b.n	800d650 <http_parse_request+0x250>
              goto badrequest;
 800d64a:	bf00      	nop
 800d64c:	e000      	b.n	800d650 <http_parse_request+0x250>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800d64e:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800d650:	f06f 030f 	mvn.w	r3, #15
  }
}
 800d654:	4618      	mov	r0, r3
 800d656:	3740      	adds	r7, #64	@ 0x40
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	08025604 	.word	0x08025604
 800d660:	0802574c 	.word	0x0802574c
 800d664:	0802564c 	.word	0x0802564c
 800d668:	08025674 	.word	0x08025674
 800d66c:	200080ec 	.word	0x200080ec
 800d670:	08025748 	.word	0x08025748
 800d674:	08025758 	.word	0x08025758
 800d678:	08025760 	.word	0x08025760
 800d67c:	08025768 	.word	0x08025768
 800d680:	0802572c 	.word	0x0802572c

0800d684 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b097      	sub	sp, #92	@ 0x5c
 800d688:	af02      	add	r7, sp, #8
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800d690:	2300      	movs	r3, #0
 800d692:	64bb      	str	r3, [r7, #72]	@ 0x48
  char *params = NULL;
 800d694:	2300      	movs	r3, #0
 800d696:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7f2 fd9b 	bl	80001dc <strlen>
 800d6a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d06c      	beq.n	800d788 <http_find_file+0x104>
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	4413      	add	r3, r2
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6ba:	d165      	bne.n	800d788 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d6bc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d6be:	4a97      	ldr	r2, [pc, #604]	@ (800d91c <http_find_file+0x298>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d102      	bne.n	800d6ca <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d15e      	bne.n	800d788 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800d6d0:	bf28      	it	cs
 800d6d2:	233f      	movcs	r3, #63	@ 0x3f
 800d6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (copy_len > 0) {
 800d6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00a      	beq.n	800d6f2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	488e      	ldr	r0, [pc, #568]	@ (800d91c <http_find_file+0x298>)
 800d6e4:	f015 f8a7 	bl	8022836 <memcpy>
      http_uri_buf[copy_len] = 0;
 800d6e8:	4a8c      	ldr	r2, [pc, #560]	@ (800d91c <http_find_file+0x298>)
 800d6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ec:	4413      	add	r3, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6f6:	e044      	b.n	800d782 <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800d6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d022      	beq.n	800d744 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800d6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d700:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800d704:	627b      	str	r3, [r7, #36]	@ 0x24
        if (len_left > 0) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d018      	beq.n	800d73e <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800d70c:	4a84      	ldr	r2, [pc, #528]	@ (800d920 <http_find_file+0x29c>)
 800d70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d710:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d714:	4618      	mov	r0, r3
 800d716:	f7f2 fd61 	bl	80001dc <strlen>
 800d71a:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800d71c:	6a3a      	ldr	r2, [r7, #32]
 800d71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d720:	4293      	cmp	r3, r2
 800d722:	bf28      	it	cs
 800d724:	4613      	movcs	r3, r2
 800d726:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800d728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72a:	4a7c      	ldr	r2, [pc, #496]	@ (800d91c <http_find_file+0x298>)
 800d72c:	1898      	adds	r0, r3, r2
 800d72e:	4a7c      	ldr	r2, [pc, #496]	@ (800d920 <http_find_file+0x29c>)
 800d730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d732:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	4619      	mov	r1, r3
 800d73a:	f015 f87c 	bl	8022836 <memcpy>
        }
        file_name = http_uri_buf;
 800d73e:	4b77      	ldr	r3, [pc, #476]	@ (800d91c <http_find_file+0x298>)
 800d740:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d742:	e004      	b.n	800d74e <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800d744:	4a76      	ldr	r2, [pc, #472]	@ (800d920 <http_find_file+0x29c>)
 800d746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d74c:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d752:	4618      	mov	r0, r3
 800d754:	f7fe fce4 	bl	800c120 <fs_open>
 800d758:	4603      	mov	r3, r0
 800d75a:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800d75c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10b      	bne.n	800d77c <http_find_file+0xf8>
        uri = file_name;
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	64bb      	str	r3, [r7, #72]	@ 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800d76c:	4a6c      	ldr	r2, [pc, #432]	@ (800d920 <http_find_file+0x29c>)
 800d76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	4413      	add	r3, r2
 800d774:	791b      	ldrb	r3, [r3, #4]
 800d776:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800d77a:	e005      	b.n	800d788 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77e:	3301      	adds	r3, #1
 800d780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d784:	2b04      	cmp	r3, #4
 800d786:	d9b7      	bls.n	800d6f8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800d788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f040 80ab 	bne.w	800d8e6 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	213f      	movs	r1, #63	@ 0x3f
 800d794:	4618      	mov	r0, r3
 800d796:	f014 ff31 	bl	80225fc <strchr>
 800d79a:	6478      	str	r0, [r7, #68]	@ 0x44
    if (params != NULL) {
 800d79c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d005      	beq.n	800d7ae <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800d7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	701a      	strb	r2, [r3, #0]
      params++;
 800d7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	647b      	str	r3, [r7, #68]	@ 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800d7ae:	4b5d      	ldr	r3, [pc, #372]	@ (800d924 <http_find_file+0x2a0>)
 800d7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b4:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800d7b6:	4b5c      	ldr	r3, [pc, #368]	@ (800d928 <http_find_file+0x2a4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d034      	beq.n	800d828 <http_find_file+0x1a4>
 800d7be:	4b5b      	ldr	r3, [pc, #364]	@ (800d92c <http_find_file+0x2a8>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d030      	beq.n	800d828 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7ca:	e028      	b.n	800d81e <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800d7cc:	68b8      	ldr	r0, [r7, #8]
 800d7ce:	4b57      	ldr	r3, [pc, #348]	@ (800d92c <http_find_file+0x2a8>)
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	4413      	add	r3, r2
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	f7f2 fcf4 	bl	80001c8 <strcmp>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d118      	bne.n	800d818 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800d7e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7ff f801 	bl	800c7f0 <extract_uri_parameters>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	4a4c      	ldr	r2, [pc, #304]	@ (800d924 <http_find_file+0x2a0>)
 800d7f2:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d7f4:	4b4d      	ldr	r3, [pc, #308]	@ (800d92c <http_find_file+0x2a8>)
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	4413      	add	r3, r2
 800d7fe:	685c      	ldr	r4, [r3, #4]
 800d800:	4b48      	ldr	r3, [pc, #288]	@ (800d924 <http_find_file+0x2a0>)
 800d802:	6819      	ldr	r1, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                          hs->param_vals);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	3370      	adds	r3, #112	@ 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d80e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d810:	47a0      	blx	r4
 800d812:	4603      	mov	r3, r0
 800d814:	60bb      	str	r3, [r7, #8]
           break;
 800d816:	e007      	b.n	800d828 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d81a:	3301      	adds	r3, #1
 800d81c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d81e:	4b42      	ldr	r3, [pc, #264]	@ (800d928 <http_find_file+0x2a4>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d824:	429a      	cmp	r2, r3
 800d826:	dbd1      	blt.n	800d7cc <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fc76 	bl	800c120 <fs_open>
 800d834:	4603      	mov	r3, r0
 800d836:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800d838:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d844:	e006      	b.n	800d854 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800d846:	f107 0308 	add.w	r3, r7, #8
 800d84a:	4619      	mov	r1, r3
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7ff fc57 	bl	800d100 <http_get_404_file>
 800d852:	64b8      	str	r0, [r7, #72]	@ 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800d854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d856:	2b00      	cmp	r3, #0
 800d858:	d045      	beq.n	800d8e6 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800d85a:	2300      	movs	r3, #0
 800d85c:	637b      	str	r3, [r7, #52]	@ 0x34
      char* param = (char*)strstr(uri, "?");
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	213f      	movs	r1, #63	@ 0x3f
 800d862:	4618      	mov	r0, r3
 800d864:	f014 feca 	bl	80225fc <strchr>
 800d868:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	633b      	str	r3, [r7, #48]	@ 0x30
      ext = uri;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d87e:	212e      	movs	r1, #46	@ 0x2e
 800d880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d882:	f014 febb 	bl	80225fc <strchr>
 800d886:	6338      	str	r0, [r7, #48]	@ 0x30
 800d888:	e009      	b.n	800d89e <http_find_file+0x21a>
      {
         ext = sub;
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	637b      	str	r3, [r7, #52]	@ 0x34
         sub++;
 800d88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d890:	3301      	adds	r3, #1
 800d892:	633b      	str	r3, [r7, #48]	@ 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d894:	212e      	movs	r1, #46	@ 0x2e
 800d896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d898:	f014 feb0 	bl	80225fc <strchr>
 800d89c:	6338      	str	r0, [r7, #48]	@ 0x30
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1f2      	bne.n	800d88a <http_find_file+0x206>
      }
      tag_check = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8ae:	e011      	b.n	800d8d4 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800d8b0:	4a1f      	ldr	r2, [pc, #124]	@ (800d930 <http_find_file+0x2ac>)
 800d8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d8bc:	f007 fa57 	bl	8014d6e <lwip_stricmp>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d103      	bne.n	800d8ce <http_find_file+0x24a>
          tag_check = 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          break;
 800d8cc:	e005      	b.n	800d8da <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d9ea      	bls.n	800d8b0 <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <http_find_file+0x262>
         *param = '?';
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	223f      	movs	r2, #63	@ 0x3f
 800d8e4:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800d8e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800d8ec:	f107 0308 	add.w	r3, r7, #8
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7ff fc04 	bl	800d100 <http_get_404_file>
 800d8f8:	64b8      	str	r0, [r7, #72]	@ 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	4613      	mov	r3, r2
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 f811 	bl	800d934 <http_init_file>
 800d912:	4603      	mov	r3, r0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3754      	adds	r7, #84	@ 0x54
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd90      	pop	{r4, r7, pc}
 800d91c:	200084ec 	.word	0x200084ec
 800d920:	08030628 	.word	0x08030628
 800d924:	20008540 	.word	0x20008540
 800d928:	2000853c 	.word	0x2000853c
 800d92c:	20008538 	.word	0x20008538
 800d930:	08030618 	.word	0x08030618

0800d934 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d07e      	beq.n	800da46 <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800d948:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d01c      	beq.n	800d98a <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800d950:	f7fe fdf8 	bl	800c544 <http_ssi_state_alloc>
 800d954:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d016      	beq.n	800d98a <http_init_file+0x56>
        ssi->tag_index = 0;
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	2200      	movs	r2, #0
 800d960:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        ssi->parsed = file->data;
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	461a      	mov	r2, r3
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	69fa      	ldr	r2, [r7, #28]
 800d988:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da06      	bge.n	800d9ae <http_init_file+0x7a>
 800d9a0:	4b32      	ldr	r3, [pc, #200]	@ (800da6c <http_init_file+0x138>)
 800d9a2:	f640 1217 	movw	r2, #2327	@ 0x917
 800d9a6:	4932      	ldr	r1, [pc, #200]	@ (800da70 <http_init_file+0x13c>)
 800d9a8:	4832      	ldr	r0, [pc, #200]	@ (800da74 <http_init_file+0x140>)
 800d9aa:	f014 fc49 	bl	8022240 <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	7c5b      	ldrb	r3, [r3, #17]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d007      	beq.n	800d9c6 <http_init_file+0x92>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d103      	bne.n	800d9c6 <http_init_file+0x92>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9c4:	e004      	b.n	800d9d0 <http_init_file+0x9c>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	7c1b      	ldrb	r3, [r3, #16]
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d106      	bne.n	800d9f4 <http_init_file+0xc0>
 800d9e6:	4b21      	ldr	r3, [pc, #132]	@ (800da6c <http_init_file+0x138>)
 800d9e8:	f640 1226 	movw	r2, #2342	@ 0x926
 800d9ec:	4922      	ldr	r1, [pc, #136]	@ (800da78 <http_init_file+0x144>)
 800d9ee:	4821      	ldr	r0, [pc, #132]	@ (800da74 <http_init_file+0x140>)
 800d9f0:	f014 fc26 	bl	8022240 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d032      	beq.n	800da60 <http_init_file+0x12c>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	7c1b      	ldrb	r3, [r3, #16]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	d02b      	beq.n	800da60 <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6998      	ldr	r0, [r3, #24]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da10:	461a      	mov	r2, r3
 800da12:	491a      	ldr	r1, [pc, #104]	@ (800da7c <http_init_file+0x148>)
 800da14:	f007 f975 	bl	8014d02 <lwip_strnstr>
 800da18:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d01f      	beq.n	800da60 <http_init_file+0x12c>
        size_t diff = file_start + 4 - hs->file;
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	1d1a      	adds	r2, r3, #4
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	441a      	add	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	1ad2      	subs	r2, r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	625a      	str	r2, [r3, #36]	@ 0x24
 800da44:	e00c      	b.n	800da60 <http_init_file+0x12c>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2200      	movs	r2, #0
 800da4a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	08025604 	.word	0x08025604
 800da70:	0802576c 	.word	0x0802576c
 800da74:	0802564c 	.word	0x0802564c
 800da78:	0802578c 	.word	0x0802578c
 800da7c:	0802572c 	.word	0x0802572c

0800da80 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d002      	beq.n	800da9c <http_err+0x1c>
    http_state_free(hs);
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7fe fdc1 	bl	800c61e <http_state_free>
  }
}
 800da9c:	bf00      	nop
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <http_sent+0x1c>
    return ERR_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e008      	b.n	800dad2 <http_sent+0x2e>
  }

  hs->retries = 0;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800dac8:	6979      	ldr	r1, [r7, #20]
 800daca:	68b8      	ldr	r0, [r7, #8]
 800dacc:	f7ff fad6 	bl	800d07c <http_send>

  return ERR_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d107      	bne.n	800dafe <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800daee:	2100      	movs	r1, #0
 800daf0:	6838      	ldr	r0, [r7, #0]
 800daf2:	f7fe fe61 	bl	800c7b8 <http_close_conn>
 800daf6:	4603      	mov	r3, r0
 800daf8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	e024      	b.n	800db48 <http_poll+0x6e>
  } else {
    hs->retries++;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db04:	3301      	adds	r3, #1
 800db06:	b2da      	uxtb	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db14:	2b04      	cmp	r3, #4
 800db16:	d105      	bne.n	800db24 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800db18:	68f9      	ldr	r1, [r7, #12]
 800db1a:	6838      	ldr	r0, [r7, #0]
 800db1c:	f7fe fe4c 	bl	800c7b8 <http_close_conn>
      return ERR_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	e011      	b.n	800db48 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00d      	beq.n	800db46 <http_poll+0x6c>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d009      	beq.n	800db46 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800db32:	68f9      	ldr	r1, [r7, #12]
 800db34:	6838      	ldr	r0, [r7, #0]
 800db36:	f7ff faa1 	bl	800d07c <http_send>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f00d fd09 	bl	801b558 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800db62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d105      	bne.n	800db76 <http_recv+0x26>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <http_recv+0x26>
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d111      	bne.n	800db9a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d008      	beq.n	800db8e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	891b      	ldrh	r3, [r3, #8]
 800db80:	4619      	mov	r1, r3
 800db82:	68b8      	ldr	r0, [r7, #8]
 800db84:	f009 fb2e 	bl	80171e4 <tcp_recved>
      pbuf_free(p);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f008 fb3b 	bl	8016204 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800db8e:	6979      	ldr	r1, [r7, #20]
 800db90:	68b8      	ldr	r0, [r7, #8]
 800db92:	f7fe fe11 	bl	800c7b8 <http_close_conn>
    return ERR_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	e072      	b.n	800dc80 <http_recv+0x130>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	891b      	ldrh	r3, [r3, #8]
 800db9e:	4619      	mov	r1, r3
 800dba0:	68b8      	ldr	r0, [r7, #8]
 800dba2:	f009 fb1f 	bl	80171e4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d012      	beq.n	800dbd6 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800dbb8:	6879      	ldr	r1, [r7, #4]
 800dbba:	6978      	ldr	r0, [r7, #20]
 800dbbc:	f7ff fafe 	bl	800d1bc <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d103      	bne.n	800dbd2 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800dbca:	6979      	ldr	r1, [r7, #20]
 800dbcc:	68b8      	ldr	r0, [r7, #8]
 800dbce:	f7ff fa55 	bl	800d07c <http_send>
    }
    return ERR_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e054      	b.n	800dc80 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d14c      	bne.n	800dc78 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	6979      	ldr	r1, [r7, #20]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fc0c 	bl	800d400 <http_parse_request>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800dbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d015      	beq.n	800dc20 <http_recv+0xd0>
 800dbf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbf8:	f113 0f05 	cmn.w	r3, #5
 800dbfc:	d010      	beq.n	800dc20 <http_recv+0xd0>
 800dbfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc02:	f113 0f10 	cmn.w	r3, #16
 800dc06:	d00b      	beq.n	800dc20 <http_recv+0xd0>
 800dc08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc0c:	f113 0f08 	cmn.w	r3, #8
 800dc10:	d006      	beq.n	800dc20 <http_recv+0xd0>
 800dc12:	4b1d      	ldr	r3, [pc, #116]	@ (800dc88 <http_recv+0x138>)
 800dc14:	f640 12fc 	movw	r2, #2556	@ 0x9fc
 800dc18:	491c      	ldr	r1, [pc, #112]	@ (800dc8c <http_recv+0x13c>)
 800dc1a:	481d      	ldr	r0, [pc, #116]	@ (800dc90 <http_recv+0x140>)
 800dc1c:	f014 fb10 	bl	8022240 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800dc20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc24:	f113 0f05 	cmn.w	r3, #5
 800dc28:	d00b      	beq.n	800dc42 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d007      	beq.n	800dc42 <http_recv+0xf2>
          pbuf_free(hs->req);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f008 fae4 	bl	8016204 <pbuf_free>
          hs->req = NULL;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f008 fade 	bl	8016204 <pbuf_free>
      if (parsed == ERR_OK) {
 800dc48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d109      	bne.n	800dc64 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d111      	bne.n	800dc7e <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800dc5a:	6979      	ldr	r1, [r7, #20]
 800dc5c:	68b8      	ldr	r0, [r7, #8]
 800dc5e:	f7ff fa0d 	bl	800d07c <http_send>
 800dc62:	e00c      	b.n	800dc7e <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800dc64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc68:	f113 0f10 	cmn.w	r3, #16
 800dc6c:	d107      	bne.n	800dc7e <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800dc6e:	6979      	ldr	r1, [r7, #20]
 800dc70:	68b8      	ldr	r0, [r7, #8]
 800dc72:	f7fe fda1 	bl	800c7b8 <http_close_conn>
 800dc76:	e002      	b.n	800dc7e <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f008 fac3 	bl	8016204 <pbuf_free>
    }
  }
  return ERR_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	08025604 	.word	0x08025604
 800dc8c:	080257b8 	.word	0x080257b8
 800dc90:	0802564c 	.word	0x0802564c

0800dc94 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800dca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <http_accept+0x1c>
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <http_accept+0x22>
    return ERR_VAL;
 800dcb0:	f06f 0305 	mvn.w	r3, #5
 800dcb4:	e025      	b.n	800dd02 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	68b8      	ldr	r0, [r7, #8]
 800dcba:	f009 feef 	bl	8017a9c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800dcbe:	f7fe fc70 	bl	800c5a2 <http_state_alloc>
 800dcc2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d102      	bne.n	800dcd0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800dcca:	f04f 33ff 	mov.w	r3, #4294967295
 800dcce:	e018      	b.n	800dd02 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800dcd6:	6979      	ldr	r1, [r7, #20]
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f00a f8a1 	bl	8017e20 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800dcde:	490b      	ldr	r1, [pc, #44]	@ (800dd0c <http_accept+0x78>)
 800dce0:	68b8      	ldr	r0, [r7, #8]
 800dce2:	f00a f8ad 	bl	8017e40 <tcp_recv>
  tcp_err(pcb, http_err);
 800dce6:	490a      	ldr	r1, [pc, #40]	@ (800dd10 <http_accept+0x7c>)
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f00a f8eb 	bl	8017ec4 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800dcee:	2204      	movs	r2, #4
 800dcf0:	4908      	ldr	r1, [pc, #32]	@ (800dd14 <http_accept+0x80>)
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f00a f91e 	bl	8017f34 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800dcf8:	4907      	ldr	r1, [pc, #28]	@ (800dd18 <http_accept+0x84>)
 800dcfa:	68b8      	ldr	r0, [r7, #8]
 800dcfc:	f00a f8c2 	bl	8017e84 <tcp_sent>

  return ERR_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3718      	adds	r7, #24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	0800db51 	.word	0x0800db51
 800dd10:	0800da81 	.word	0x0800da81
 800dd14:	0800dadb 	.word	0x0800dadb
 800dd18:	0800daa5 	.word	0x0800daa5

0800dd1c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800dd22:	202e      	movs	r0, #46	@ 0x2e
 800dd24:	f00a f86e 	bl	8017e04 <tcp_new_ip_type>
 800dd28:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <httpd_init+0x22>
 800dd30:	4b19      	ldr	r3, [pc, #100]	@ (800dd98 <httpd_init+0x7c>)
 800dd32:	f640 2258 	movw	r2, #2648	@ 0xa58
 800dd36:	4919      	ldr	r1, [pc, #100]	@ (800dd9c <httpd_init+0x80>)
 800dd38:	4819      	ldr	r0, [pc, #100]	@ (800dda0 <httpd_init+0x84>)
 800dd3a:	f014 fa81 	bl	8022240 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800dd3e:	2101      	movs	r1, #1
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f009 feab 	bl	8017a9c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800dd46:	2250      	movs	r2, #80	@ 0x50
 800dd48:	4916      	ldr	r1, [pc, #88]	@ (800dda4 <httpd_init+0x88>)
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f009 f8b0 	bl	8016eb0 <tcp_bind>
 800dd50:	4603      	mov	r3, r0
 800dd52:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800dd54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d006      	beq.n	800dd6a <httpd_init+0x4e>
 800dd5c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd98 <httpd_init+0x7c>)
 800dd5e:	f640 225d 	movw	r2, #2653	@ 0xa5d
 800dd62:	4911      	ldr	r1, [pc, #68]	@ (800dda8 <httpd_init+0x8c>)
 800dd64:	480e      	ldr	r0, [pc, #56]	@ (800dda0 <httpd_init+0x84>)
 800dd66:	f014 fa6b 	bl	8022240 <iprintf>
  pcb = tcp_listen(pcb);
 800dd6a:	21ff      	movs	r1, #255	@ 0xff
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f009 f941 	bl	8016ff4 <tcp_listen_with_backlog>
 800dd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <httpd_init+0x6c>
 800dd7a:	4b07      	ldr	r3, [pc, #28]	@ (800dd98 <httpd_init+0x7c>)
 800dd7c:	f640 225f 	movw	r2, #2655	@ 0xa5f
 800dd80:	490a      	ldr	r1, [pc, #40]	@ (800ddac <httpd_init+0x90>)
 800dd82:	4807      	ldr	r0, [pc, #28]	@ (800dda0 <httpd_init+0x84>)
 800dd84:	f014 fa5c 	bl	8022240 <iprintf>
  tcp_accept(pcb, http_accept);
 800dd88:	4909      	ldr	r1, [pc, #36]	@ (800ddb0 <httpd_init+0x94>)
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f00a f8bc 	bl	8017f08 <tcp_accept>
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	08025604 	.word	0x08025604
 800dd9c:	080257e4 	.word	0x080257e4
 800dda0:	0802564c 	.word	0x0802564c
 800dda4:	0803165c 	.word	0x0803165c
 800dda8:	08025800 	.word	0x08025800
 800ddac:	0802581c 	.word	0x0802581c
 800ddb0:	0800dc95 	.word	0x0800dc95

0800ddb4 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <http_set_ssi_handler+0x20>
 800ddc6:	4b14      	ldr	r3, [pc, #80]	@ (800de18 <http_set_ssi_handler+0x64>)
 800ddc8:	f44f 6227 	mov.w	r2, #2672	@ 0xa70
 800ddcc:	4913      	ldr	r1, [pc, #76]	@ (800de1c <http_set_ssi_handler+0x68>)
 800ddce:	4814      	ldr	r0, [pc, #80]	@ (800de20 <http_set_ssi_handler+0x6c>)
 800ddd0:	f014 fa36 	bl	8022240 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800ddd4:	4a13      	ldr	r2, [pc, #76]	@ (800de24 <http_set_ssi_handler+0x70>)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <http_set_ssi_handler+0x3a>
 800dde0:	4b0d      	ldr	r3, [pc, #52]	@ (800de18 <http_set_ssi_handler+0x64>)
 800dde2:	f640 2277 	movw	r2, #2679	@ 0xa77
 800dde6:	4910      	ldr	r1, [pc, #64]	@ (800de28 <http_set_ssi_handler+0x74>)
 800dde8:	480d      	ldr	r0, [pc, #52]	@ (800de20 <http_set_ssi_handler+0x6c>)
 800ddea:	f014 fa29 	bl	8022240 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	dc06      	bgt.n	800de02 <http_set_ssi_handler+0x4e>
 800ddf4:	4b08      	ldr	r3, [pc, #32]	@ (800de18 <http_set_ssi_handler+0x64>)
 800ddf6:	f640 2278 	movw	r2, #2680	@ 0xa78
 800ddfa:	490c      	ldr	r1, [pc, #48]	@ (800de2c <http_set_ssi_handler+0x78>)
 800ddfc:	4808      	ldr	r0, [pc, #32]	@ (800de20 <http_set_ssi_handler+0x6c>)
 800ddfe:	f014 fa1f 	bl	8022240 <iprintf>

  g_ppcTags = tags;
 800de02:	4a0b      	ldr	r2, [pc, #44]	@ (800de30 <http_set_ssi_handler+0x7c>)
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800de08:	4a0a      	ldr	r2, [pc, #40]	@ (800de34 <http_set_ssi_handler+0x80>)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800de0e:	bf00      	nop
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	08025604 	.word	0x08025604
 800de1c:	0802583c 	.word	0x0802583c
 800de20:	0802564c 	.word	0x0802564c
 800de24:	2000852c 	.word	0x2000852c
 800de28:	08025854 	.word	0x08025854
 800de2c:	08025864 	.word	0x08025864
 800de30:	20008534 	.word	0x20008534
 800de34:	20008530 	.word	0x20008530

0800de38 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d106      	bne.n	800de56 <http_set_cgi_handlers+0x1e>
 800de48:	4b0d      	ldr	r3, [pc, #52]	@ (800de80 <http_set_cgi_handlers+0x48>)
 800de4a:	f640 228a 	movw	r2, #2698	@ 0xa8a
 800de4e:	490d      	ldr	r1, [pc, #52]	@ (800de84 <http_set_cgi_handlers+0x4c>)
 800de50:	480d      	ldr	r0, [pc, #52]	@ (800de88 <http_set_cgi_handlers+0x50>)
 800de52:	f014 f9f5 	bl	8022240 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	dc06      	bgt.n	800de6a <http_set_cgi_handlers+0x32>
 800de5c:	4b08      	ldr	r3, [pc, #32]	@ (800de80 <http_set_cgi_handlers+0x48>)
 800de5e:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800de62:	490a      	ldr	r1, [pc, #40]	@ (800de8c <http_set_cgi_handlers+0x54>)
 800de64:	4808      	ldr	r0, [pc, #32]	@ (800de88 <http_set_cgi_handlers+0x50>)
 800de66:	f014 f9eb 	bl	8022240 <iprintf>

  g_pCGIs = cgis;
 800de6a:	4a09      	ldr	r2, [pc, #36]	@ (800de90 <http_set_cgi_handlers+0x58>)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800de70:	4a08      	ldr	r2, [pc, #32]	@ (800de94 <http_set_cgi_handlers+0x5c>)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	6013      	str	r3, [r2, #0]
}
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	08025604 	.word	0x08025604
 800de84:	0802587c 	.word	0x0802587c
 800de88:	0802564c 	.word	0x0802564c
 800de8c:	0802588c 	.word	0x0802588c
 800de90:	20008538 	.word	0x20008538
 800de94:	2000853c 	.word	0x2000853c

0800de98 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	f003 031f 	and.w	r3, r3, #31
 800deaa:	2b1f      	cmp	r3, #31
 800deac:	d102      	bne.n	800deb4 <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 800deae:	f06f 030f 	mvn.w	r3, #15
 800deb2:	e078      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	785b      	ldrb	r3, [r3, #1]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 800debc:	f06f 030f 	mvn.w	r3, #15
 800dec0:	e071      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f005 fdca 	bl	8013a62 <snmp_pbuf_stream_write>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <snmp_ans1_enc_tlv+0x42>
 800ded4:	f06f 0301 	mvn.w	r3, #1
 800ded8:	e065      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2201      	movs	r2, #1
 800dede:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	889b      	ldrh	r3, [r3, #4]
 800dee4:	2b7f      	cmp	r3, #127	@ 0x7f
 800dee6:	d802      	bhi.n	800deee <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 800dee8:	2301      	movs	r3, #1
 800deea:	73bb      	strb	r3, [r7, #14]
 800deec:	e008      	b.n	800df00 <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	889b      	ldrh	r3, [r3, #4]
 800def2:	2bff      	cmp	r3, #255	@ 0xff
 800def4:	d802      	bhi.n	800defc <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 800def6:	2302      	movs	r3, #2
 800def8:	73bb      	strb	r3, [r7, #14]
 800defa:	e001      	b.n	800df00 <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 800defc:	2303      	movs	r3, #3
 800defe:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	789b      	ldrb	r3, [r3, #2]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00b      	beq.n	800df20 <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	789b      	ldrb	r3, [r3, #2]
 800df0c:	7bba      	ldrb	r2, [r7, #14]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d902      	bls.n	800df18 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 800df12:	f06f 030f 	mvn.w	r3, #15
 800df16:	e046      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	789b      	ldrb	r3, [r3, #2]
 800df1c:	73bb      	strb	r3, [r7, #14]
 800df1e:	e002      	b.n	800df26 <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	7bba      	ldrb	r2, [r7, #14]
 800df24:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d92d      	bls.n	800df88 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	3b01      	subs	r3, #1
 800df30:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800df32:	7bbb      	ldrb	r3, [r7, #14]
 800df34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800df38:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f005 fd8f 	bl	8013a62 <snmp_pbuf_stream_write>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d01b      	beq.n	800df82 <snmp_ans1_enc_tlv+0xea>
 800df4a:	f06f 0301 	mvn.w	r3, #1
 800df4e:	e02a      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	2b02      	cmp	r3, #2
 800df54:	d105      	bne.n	800df62 <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	889b      	ldrh	r3, [r3, #4]
 800df5a:	0a1b      	lsrs	r3, r3, #8
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	73fb      	strb	r3, [r7, #15]
 800df60:	e001      	b.n	800df66 <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f005 fd79 	bl	8013a62 <snmp_pbuf_stream_write>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <snmp_ans1_enc_tlv+0xe4>
 800df76:	f06f 0301 	mvn.w	r3, #1
 800df7a:	e014      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 800df7c:	7bbb      	ldrb	r3, [r7, #14]
 800df7e:	3b01      	subs	r3, #1
 800df80:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800df82:	7bbb      	ldrb	r3, [r7, #14]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d8e3      	bhi.n	800df50 <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	889b      	ldrh	r3, [r3, #4]
 800df8c:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f005 fd65 	bl	8013a62 <snmp_pbuf_stream_write>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <snmp_ans1_enc_tlv+0x10c>
 800df9e:	f06f 0301 	mvn.w	r3, #1
 800dfa2:	e000      	b.n	800dfa6 <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream* pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	4613      	mov	r3, r2
 800dfba:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 800dfbc:	88fb      	ldrh	r3, [r7, #6]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f005 fd5e 	bl	8013a84 <snmp_pbuf_stream_writebuf>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <snmp_asn1_enc_raw+0x26>
 800dfce:	f06f 0301 	mvn.w	r3, #1
 800dfd2:	e000      	b.n	800dfd6 <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, u32_t value)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	607a      	str	r2, [r7, #4]
 800dfea:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 800dfec:	897b      	ldrh	r3, [r7, #10]
 800dfee:	2b05      	cmp	r3, #5
 800dff0:	d902      	bls.n	800dff8 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 800dff2:	f06f 030f 	mvn.w	r3, #15
 800dff6:	e033      	b.n	800e060 <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 800dff8:	897b      	ldrh	r3, [r7, #10]
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	d120      	bne.n	800e040 <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800dffe:	2100      	movs	r1, #0
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f005 fd2e 	bl	8013a62 <snmp_pbuf_stream_write>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <snmp_asn1_enc_u32t+0x34>
 800e00c:	f06f 0301 	mvn.w	r3, #1
 800e010:	e026      	b.n	800e060 <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 800e012:	897b      	ldrh	r3, [r7, #10]
 800e014:	3b01      	subs	r3, #1
 800e016:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 800e018:	e012      	b.n	800e040 <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 800e01a:	897b      	ldrh	r3, [r7, #10]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800e020:	897b      	ldrh	r3, [r7, #10]
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	fa22 f303 	lsr.w	r3, r2, r3
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	4619      	mov	r1, r3
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f005 fd17 	bl	8013a62 <snmp_pbuf_stream_write>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <snmp_asn1_enc_u32t+0x62>
 800e03a:	f06f 0301 	mvn.w	r3, #1
 800e03e:	e00f      	b.n	800e060 <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 800e040:	897b      	ldrh	r3, [r7, #10]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d8e9      	bhi.n	800e01a <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	4619      	mov	r1, r3
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f005 fd08 	bl	8013a62 <snmp_pbuf_stream_write>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <snmp_asn1_enc_u32t+0x80>
 800e058:	f06f 0301 	mvn.w	r3, #1
 800e05c:	e000      	b.n	800e060 <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, const u32_t* value)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	460b      	mov	r3, r1
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 800e076:	897b      	ldrh	r3, [r7, #10]
 800e078:	2b09      	cmp	r3, #9
 800e07a:	d902      	bls.n	800e082 <snmp_asn1_enc_u64t+0x1a>
    return ERR_ARG;
 800e07c:	f06f 030f 	mvn.w	r3, #15
 800e080:	e051      	b.n	800e126 <snmp_asn1_enc_u64t+0xbe>
  }
  if (octets_needed == 9) {
 800e082:	897b      	ldrh	r3, [r7, #10]
 800e084:	2b09      	cmp	r3, #9
 800e086:	d122      	bne.n	800e0ce <snmp_asn1_enc_u64t+0x66>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800e088:	2100      	movs	r1, #0
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f005 fce9 	bl	8013a62 <snmp_pbuf_stream_write>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <snmp_asn1_enc_u64t+0x34>
 800e096:	f06f 0301 	mvn.w	r3, #1
 800e09a:	e044      	b.n	800e126 <snmp_asn1_enc_u64t+0xbe>
    octets_needed--;
 800e09c:	897b      	ldrh	r3, [r7, #10]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 4) {
 800e0a2:	e014      	b.n	800e0ce <snmp_asn1_enc_u64t+0x66>
    octets_needed--;
 800e0a4:	897b      	ldrh	r3, [r7, #10]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> ((octets_needed-4) << 3))));
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	897b      	ldrh	r3, [r7, #10]
 800e0b0:	3b04      	subs	r3, #4
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f005 fcd0 	bl	8013a62 <snmp_pbuf_stream_write>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <snmp_asn1_enc_u64t+0x66>
 800e0c8:	f06f 0301 	mvn.w	r3, #1
 800e0cc:	e02b      	b.n	800e126 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 4) {
 800e0ce:	897b      	ldrh	r3, [r7, #10]
 800e0d0:	2b04      	cmp	r3, #4
 800e0d2:	d8e7      	bhi.n	800e0a4 <snmp_asn1_enc_u64t+0x3c>
  }

  /* skip to low u32 */
  value++;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	607b      	str	r3, [r7, #4]

  while (octets_needed > 1) {
 800e0da:	e013      	b.n	800e104 <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 800e0dc:	897b      	ldrh	r3, [r7, #10]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> (octets_needed << 3))));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	897b      	ldrh	r3, [r7, #10]
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f005 fcb5 	bl	8013a62 <snmp_pbuf_stream_write>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <snmp_asn1_enc_u64t+0x9c>
 800e0fe:	f06f 0301 	mvn.w	r3, #1
 800e102:	e010      	b.n	800e126 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 1) {
 800e104:	897b      	ldrh	r3, [r7, #10]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d8e8      	bhi.n	800e0dc <snmp_asn1_enc_u64t+0x74>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value)));
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	4619      	mov	r1, r3
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f005 fca5 	bl	8013a62 <snmp_pbuf_stream_write>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <snmp_asn1_enc_u64t+0xbc>
 800e11e:	f06f 0301 	mvn.w	r3, #1
 800e122:	e000      	b.n	800e126 <snmp_asn1_enc_u64t+0xbe>

  return ERR_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, s32_t value)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	460b      	mov	r3, r1
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800e13c:	e012      	b.n	800e164 <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 800e13e:	897b      	ldrh	r3, [r7, #10]
 800e140:	3b01      	subs	r3, #1
 800e142:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800e144:	897b      	ldrh	r3, [r7, #10]
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	fa42 f303 	asr.w	r3, r2, r3
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	4619      	mov	r1, r3
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f005 fc85 	bl	8013a62 <snmp_pbuf_stream_write>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <snmp_asn1_enc_s32t+0x36>
 800e15e:	f06f 0301 	mvn.w	r3, #1
 800e162:	e00f      	b.n	800e184 <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 800e164:	897b      	ldrh	r3, [r7, #10]
 800e166:	2b01      	cmp	r3, #1
 800e168:	d8e9      	bhi.n	800e13e <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	4619      	mov	r1, r3
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f005 fc76 	bl	8013a62 <snmp_pbuf_stream_write>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <snmp_asn1_enc_s32t+0x54>
 800e17c:	f06f 0301 	mvn.w	r3, #1
 800e180:	e000      	b.n	800e184 <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream* pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	4613      	mov	r3, r2
 800e198:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d91e      	bls.n	800e1de <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	4619      	mov	r1, r3
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f005 fc4f 	bl	8013a62 <snmp_pbuf_stream_write>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d002      	beq.n	800e1d0 <snmp_asn1_enc_oid+0x44>
 800e1ca:	f06f 0301 	mvn.w	r3, #1
 800e1ce:	e04b      	b.n	800e268 <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 800e1d0:	88fb      	ldrh	r3, [r7, #6]
 800e1d2:	3b02      	subs	r3, #2
 800e1d4:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 800e1dc:	e040      	b.n	800e260 <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 800e1de:	f06f 030f 	mvn.w	r3, #15
 800e1e2:	e041      	b.n	800e268 <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	617b      	str	r3, [r7, #20]
    tail = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 800e1f4:	231c      	movs	r3, #28
 800e1f6:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800e1f8:	e01d      	b.n	800e236 <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800e1fa:	7ffb      	ldrb	r3, [r7, #31]
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e202:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 800e204:	7cfb      	ldrb	r3, [r7, #19]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <snmp_asn1_enc_oid+0x84>
 800e20a:	7fbb      	ldrb	r3, [r7, #30]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00f      	beq.n	800e230 <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 800e210:	2301      	movs	r3, #1
 800e212:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 800e214:	7cfb      	ldrb	r3, [r7, #19]
 800e216:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	4619      	mov	r1, r3
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f005 fc1f 	bl	8013a62 <snmp_pbuf_stream_write>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <snmp_asn1_enc_oid+0xa4>
 800e22a:	f06f 0301 	mvn.w	r3, #1
 800e22e:	e01b      	b.n	800e268 <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 800e230:	7ffb      	ldrb	r3, [r7, #31]
 800e232:	3b07      	subs	r3, #7
 800e234:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800e236:	7ffb      	ldrb	r3, [r7, #31]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1de      	bne.n	800e1fa <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e244:	b2db      	uxtb	r3, r3
 800e246:	4619      	mov	r1, r3
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f005 fc0a 	bl	8013a62 <snmp_pbuf_stream_write>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <snmp_asn1_enc_oid+0xce>
 800e254:	f06f 0301 	mvn.w	r3, #1
 800e258:	e006      	b.n	800e268 <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	3304      	adds	r3, #4
 800e25e:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 800e260:	88fb      	ldrh	r3, [r7, #6]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1be      	bne.n	800e1e4 <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3720      	adds	r7, #32
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	6039      	str	r1, [r7, #0]
 800e27a:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800e27c:	88fb      	ldrh	r3, [r7, #6]
 800e27e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e280:	d803      	bhi.n	800e28a <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2201      	movs	r2, #1
 800e286:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800e288:	e009      	b.n	800e29e <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800e28a:	88fb      	ldrh	r3, [r7, #6]
 800e28c:	2bff      	cmp	r3, #255	@ 0xff
 800e28e:	d803      	bhi.n	800e298 <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2202      	movs	r2, #2
 800e294:	701a      	strb	r2, [r3, #0]
}
 800e296:	e002      	b.n	800e29e <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	2203      	movs	r2, #3
 800e29c:	701a      	strb	r2, [r3, #0]
}
 800e29e:	bf00      	nop
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bc80      	pop	{r7}
 800e2a6:	4770      	bx	lr

0800e2a8 <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2b6:	d803      	bhi.n	800e2c0 <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 800e2be:	e019      	b.n	800e2f4 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e2c6:	d203      	bcs.n	800e2d0 <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	801a      	strh	r2, [r3, #0]
}
 800e2ce:	e011      	b.n	800e2f4 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2d6:	d203      	bcs.n	800e2e0 <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	2203      	movs	r2, #3
 800e2dc:	801a      	strh	r2, [r3, #0]
}
 800e2de:	e009      	b.n	800e2f4 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	db03      	blt.n	800e2ee <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	801a      	strh	r2, [r3, #0]
}
 800e2ec:	e002      	b.n	800e2f4 <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2205      	movs	r2, #5
 800e2f2:	801a      	strh	r2, [r3, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bc80      	pop	{r7}
 800e2fc:	4770      	bx	lr

0800e2fe <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(const u32_t *value, u16_t *octets_needed)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
  /* check if high u32 is 0 */
  if (*value == 0x00) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d109      	bne.n	800e324 <snmp_asn1_enc_u64t_cnt+0x26>
    /* only low u32 is important */
    value++;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3304      	adds	r3, #4
 800e314:	607b      	str	r3, [r7, #4]
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff ffc3 	bl	800e2a8 <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 800e322:	e00b      	b.n	800e33c <snmp_asn1_enc_u64t_cnt+0x3e>
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff ffbc 	bl	800e2a8 <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	3304      	adds	r3, #4
 800e336:	b29a      	uxth	r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	801a      	strh	r2, [r3, #0]
}
 800e33c:	bf00      	nop
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	da02      	bge.n	800e35a <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	43db      	mvns	r3, r3
 800e358:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e35e:	dc03      	bgt.n	800e368 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2201      	movs	r2, #1
 800e364:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 800e366:	e012      	b.n	800e38e <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e36e:	da03      	bge.n	800e378 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2202      	movs	r2, #2
 800e374:	801a      	strh	r2, [r3, #0]
}
 800e376:	e00a      	b.n	800e38e <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e37e:	da03      	bge.n	800e388 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	2203      	movs	r2, #3
 800e384:	801a      	strh	r2, [r3, #0]
}
 800e386:	e002      	b.n	800e38e <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2204      	movs	r2, #4
 800e38c:	801a      	strh	r2, [r3, #0]
}
 800e38e:	bf00      	nop
 800e390:	370c      	adds	r7, #12
 800e392:	46bd      	mov	sp, r7
 800e394:	bc80      	pop	{r7}
 800e396:	4770      	bx	lr

0800e398 <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800e398:	b480      	push	{r7}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800e3ac:	897b      	ldrh	r3, [r7, #10]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d92b      	bls.n	800e40a <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	881b      	ldrh	r3, [r3, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 800e3be:	897b      	ldrh	r3, [r7, #10]
 800e3c0:	3b02      	subs	r3, #2
 800e3c2:	817b      	strh	r3, [r7, #10]
    oid += 2;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800e3ca:	e01e      	b.n	800e40a <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800e3cc:	897b      	ldrh	r3, [r7, #10]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	09db      	lsrs	r3, r3, #7
 800e3dc:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	881b      	ldrh	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800e3ea:	e008      	b.n	800e3fe <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	09db      	lsrs	r3, r3, #7
 800e3f0:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1f3      	bne.n	800e3ec <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3304      	adds	r3, #4
 800e408:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 800e40a:	897b      	ldrh	r3, [r7, #10]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1dd      	bne.n	800e3cc <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 800e410:	bf00      	nop
 800e412:	bf00      	nop
 800e414:	371c      	adds	r7, #28
 800e416:	46bd      	mov	sp, r7
 800e418:	bc80      	pop	{r7}
 800e41a:	4770      	bx	lr

0800e41c <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e426:	f107 030e 	add.w	r3, r7, #14
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f005 faed 	bl	8013a0c <snmp_pbuf_stream_read>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <snmp_asn1_dec_tlv+0x22>
 800e438:	f06f 0301 	mvn.w	r3, #1
 800e43c:	e069      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
  tlv->type = data;
 800e43e:	7bba      	ldrb	r2, [r7, #14]
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f003 031f 	and.w	r3, r3, #31
 800e44c:	2b1f      	cmp	r3, #31
 800e44e:	d102      	bne.n	800e456 <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 800e450:	f06f 0305 	mvn.w	r3, #5
 800e454:	e05d      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
  }
  tlv->type_len = 1;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2201      	movs	r2, #1
 800e45a:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e45c:	f107 030e 	add.w	r3, r7, #14
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f005 fad2 	bl	8013a0c <snmp_pbuf_stream_read>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d002      	beq.n	800e474 <snmp_asn1_dec_tlv+0x58>
 800e46e:	f06f 0301 	mvn.w	r3, #1
 800e472:	e04e      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>

  if (data < 0x80) { /* short form */
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	b25b      	sxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	db07      	blt.n	800e48c <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2201      	movs	r2, #1
 800e480:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 800e482:	7bbb      	ldrb	r3, [r7, #14]
 800e484:	461a      	mov	r2, r3
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	809a      	strh	r2, [r3, #4]
 800e48a:	e041      	b.n	800e510 <snmp_asn1_dec_tlv+0xf4>
  } else if (data > 0x80) { /* long form */
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
 800e48e:	2b80      	cmp	r3, #128	@ 0x80
 800e490:	d93b      	bls.n	800e50a <snmp_asn1_dec_tlv+0xee>
    u8_t length_bytes = data - 0x80;
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	3b80      	subs	r3, #128	@ 0x80
 800e496:	73fb      	strb	r3, [r7, #15]
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	3301      	adds	r3, #1
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800e4a8:	e02b      	b.n	800e502 <snmp_asn1_dec_tlv+0xe6>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	889b      	ldrh	r3, [r3, #4]
 800e4ae:	2bff      	cmp	r3, #255	@ 0xff
 800e4b0:	d902      	bls.n	800e4b8 <snmp_asn1_dec_tlv+0x9c>
        return ERR_VAL;
 800e4b2:	f06f 0305 	mvn.w	r3, #5
 800e4b6:	e02c      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e4b8:	f107 030e 	add.w	r3, r7, #14
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f005 faa4 	bl	8013a0c <snmp_pbuf_stream_read>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <snmp_asn1_dec_tlv+0xb4>
 800e4ca:	f06f 0301 	mvn.w	r3, #1
 800e4ce:	e020      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
      tlv->value_len <<= 8;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	889b      	ldrh	r3, [r3, #4]
 800e4d4:	021b      	lsls	r3, r3, #8
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	889b      	ldrh	r3, [r3, #4]
 800e4e0:	7bba      	ldrb	r2, [r7, #14]
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	889b      	ldrh	r3, [r3, #4]
 800e4ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d102      	bne.n	800e4fc <snmp_asn1_dec_tlv+0xe0>
        return ERR_VAL;
 800e4f6:	f06f 0305 	mvn.w	r3, #5
 800e4fa:	e00a      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
      }

      length_bytes--;
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1d0      	bne.n	800e4aa <snmp_asn1_dec_tlv+0x8e>
 800e508:	e002      	b.n	800e510 <snmp_asn1_dec_tlv+0xf4>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 800e50a:	f06f 0305 	mvn.w	r3, #5
 800e50e:	e000      	b.n	800e512 <snmp_asn1_dec_tlv+0xf6>
  }

  return ERR_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b086      	sub	sp, #24
 800e51e:	af00      	add	r7, sp, #0
 800e520:	60f8      	str	r0, [r7, #12]
 800e522:	460b      	mov	r3, r1
 800e524:	607a      	str	r2, [r7, #4]
 800e526:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 800e528:	897b      	ldrh	r3, [r7, #10]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d042      	beq.n	800e5b4 <snmp_asn1_dec_u32t+0x9a>
 800e52e:	897b      	ldrh	r3, [r7, #10]
 800e530:	2b05      	cmp	r3, #5
 800e532:	d83f      	bhi.n	800e5b4 <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e534:	f107 0317 	add.w	r3, r7, #23
 800e538:	4619      	mov	r1, r3
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f005 fa66 	bl	8013a0c <snmp_pbuf_stream_read>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <snmp_asn1_dec_u32t+0x32>
 800e546:	f06f 0301 	mvn.w	r3, #1
 800e54a:	e035      	b.n	800e5b8 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 800e54c:	897b      	ldrh	r3, [r7, #10]
 800e54e:	2b05      	cmp	r3, #5
 800e550:	d102      	bne.n	800e558 <snmp_asn1_dec_u32t+0x3e>
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d006      	beq.n	800e566 <snmp_asn1_dec_u32t+0x4c>
 800e558:	897b      	ldrh	r3, [r7, #10]
 800e55a:	2b04      	cmp	r3, #4
 800e55c:	d82a      	bhi.n	800e5b4 <snmp_asn1_dec_u32t+0x9a>
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
 800e560:	b25b      	sxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	db26      	blt.n	800e5b4 <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	461a      	mov	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
      len--;
 800e56e:	897b      	ldrh	r3, [r7, #10]
 800e570:	3b01      	subs	r3, #1
 800e572:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e574:	e019      	b.n	800e5aa <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e576:	f107 0317 	add.w	r3, r7, #23
 800e57a:	4619      	mov	r1, r3
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f005 fa45 	bl	8013a0c <snmp_pbuf_stream_read>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d002      	beq.n	800e58e <snmp_asn1_dec_u32t+0x74>
 800e588:	f06f 0301 	mvn.w	r3, #1
 800e58c:	e014      	b.n	800e5b8 <snmp_asn1_dec_u32t+0x9e>
        len--;
 800e58e:	897b      	ldrh	r3, [r7, #10]
 800e590:	3b01      	subs	r3, #1
 800e592:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	021a      	lsls	r2, r3, #8
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	601a      	str	r2, [r3, #0]
        *value |= data;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	7dfa      	ldrb	r2, [r7, #23]
 800e5a4:	431a      	orrs	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 800e5aa:	897b      	ldrh	r3, [r7, #10]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e2      	bne.n	800e576 <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	e001      	b.n	800e5b8 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800e5b4:	f06f 0305 	mvn.w	r3, #5
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if (len <= 4) {
 800e5ce:	897b      	ldrh	r3, [r7, #10]
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d805      	bhi.n	800e5e0 <snmp_asn1_dec_u64t+0x20>
    /* high u32 is 0 */
    *value = 0;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
    /* directly skip to low u32 */
    value++;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	607b      	str	r3, [r7, #4]
  }

  if ((len > 0) && (len <= 9)) {
 800e5e0:	897b      	ldrh	r3, [r7, #10]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d04c      	beq.n	800e680 <snmp_asn1_dec_u64t+0xc0>
 800e5e6:	897b      	ldrh	r3, [r7, #10]
 800e5e8:	2b09      	cmp	r3, #9
 800e5ea:	d849      	bhi.n	800e680 <snmp_asn1_dec_u64t+0xc0>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e5ec:	f107 0317 	add.w	r3, r7, #23
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f005 fa0a 	bl	8013a0c <snmp_pbuf_stream_read>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d002      	beq.n	800e604 <snmp_asn1_dec_u64t+0x44>
 800e5fe:	f06f 0301 	mvn.w	r3, #1
 800e602:	e03f      	b.n	800e684 <snmp_asn1_dec_u64t+0xc4>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 800e604:	897b      	ldrh	r3, [r7, #10]
 800e606:	2b09      	cmp	r3, #9
 800e608:	d102      	bne.n	800e610 <snmp_asn1_dec_u64t+0x50>
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d006      	beq.n	800e61e <snmp_asn1_dec_u64t+0x5e>
 800e610:	897b      	ldrh	r3, [r7, #10]
 800e612:	2b08      	cmp	r3, #8
 800e614:	d834      	bhi.n	800e680 <snmp_asn1_dec_u64t+0xc0>
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	b25b      	sxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	db30      	blt.n	800e680 <snmp_asn1_dec_u64t+0xc0>
      *value = data;
 800e61e:	7dfb      	ldrb	r3, [r7, #23]
 800e620:	461a      	mov	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
      len--;
 800e626:	897b      	ldrh	r3, [r7, #10]
 800e628:	3b01      	subs	r3, #1
 800e62a:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e62c:	e023      	b.n	800e676 <snmp_asn1_dec_u64t+0xb6>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e62e:	f107 0317 	add.w	r3, r7, #23
 800e632:	4619      	mov	r1, r3
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f005 f9e9 	bl	8013a0c <snmp_pbuf_stream_read>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <snmp_asn1_dec_u64t+0x86>
 800e640:	f06f 0301 	mvn.w	r3, #1
 800e644:	e01e      	b.n	800e684 <snmp_asn1_dec_u64t+0xc4>

        if (len == 4) {
 800e646:	897b      	ldrh	r3, [r7, #10]
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d106      	bne.n	800e65a <snmp_asn1_dec_u64t+0x9a>
          /* skip to low u32 */
          value++;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3304      	adds	r3, #4
 800e650:	607b      	str	r3, [r7, #4]
          *value = 0;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	e004      	b.n	800e664 <snmp_asn1_dec_u64t+0xa4>
        } else {
          *value <<= 8;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	021a      	lsls	r2, r3, #8
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	601a      	str	r2, [r3, #0]
        }

        *value |= data;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	7dfa      	ldrb	r2, [r7, #23]
 800e66a:	431a      	orrs	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	601a      	str	r2, [r3, #0]
        len--;
 800e670:	897b      	ldrh	r3, [r7, #10]
 800e672:	3b01      	subs	r3, #1
 800e674:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 800e676:	897b      	ldrh	r3, [r7, #10]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1d8      	bne.n	800e62e <snmp_asn1_dec_u64t+0x6e>
      }

      return ERR_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	e001      	b.n	800e684 <snmp_asn1_dec_u64t+0xc4>
    }
  }

  return ERR_VAL;
 800e680:	f06f 0305 	mvn.w	r3, #5
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	460b      	mov	r3, r1
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	817b      	strh	r3, [r7, #10]
#if BYTE_ORDER == LITTLE_ENDIAN
  u8_t *lsb_ptr = (u8_t*)value;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	61bb      	str	r3, [r7, #24]
  u8_t *lsb_ptr = (u8_t*)value + sizeof(s32_t) - 1;
#endif
  u8_t sign;
  u8_t data;

  if ((len > 0) && (len < 5)) {
 800e69e:	897b      	ldrh	r3, [r7, #10]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d05e      	beq.n	800e762 <snmp_asn1_dec_s32t+0xd6>
 800e6a4:	897b      	ldrh	r3, [r7, #10]
 800e6a6:	2b04      	cmp	r3, #4
 800e6a8:	d85b      	bhi.n	800e762 <snmp_asn1_dec_s32t+0xd6>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e6aa:	f107 0317 	add.w	r3, r7, #23
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f005 f9ab 	bl	8013a0c <snmp_pbuf_stream_read>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <snmp_asn1_dec_s32t+0x36>
 800e6bc:	f06f 0301 	mvn.w	r3, #1
 800e6c0:	e051      	b.n	800e766 <snmp_asn1_dec_s32t+0xda>
    len--;
 800e6c2:	897b      	ldrh	r3, [r7, #10]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	817b      	strh	r3, [r7, #10]

    if (data & 0x80) {
 800e6c8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ca:	b25b      	sxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	da0d      	bge.n	800e6ec <snmp_asn1_dec_s32t+0x60>
      /* negative, start from -1 */
      *value = -1;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d6:	601a      	str	r2, [r3, #0]
      sign = 1;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr &= data;
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	781a      	ldrb	r2, [r3, #0]
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	e035      	b.n	800e758 <snmp_asn1_dec_s32t+0xcc>
    } else {
      /* positive, start from 0 */
      *value = 0;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	601a      	str	r2, [r3, #0]
      sign = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr |= data;
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	781a      	ldrb	r2, [r3, #0]
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	701a      	strb	r2, [r3, #0]
    }

    /* OR/AND octets with value */
    while (len > 0) {
 800e704:	e028      	b.n	800e758 <snmp_asn1_dec_s32t+0xcc>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e706:	f107 0317 	add.w	r3, r7, #23
 800e70a:	4619      	mov	r1, r3
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f005 f97d 	bl	8013a0c <snmp_pbuf_stream_read>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <snmp_asn1_dec_s32t+0x92>
 800e718:	f06f 0301 	mvn.w	r3, #1
 800e71c:	e023      	b.n	800e766 <snmp_asn1_dec_s32t+0xda>
      len--;
 800e71e:	897b      	ldrh	r3, [r7, #10]
 800e720:	3b01      	subs	r3, #1
 800e722:	817b      	strh	r3, [r7, #10]

#if BYTE_ORDER == LITTLE_ENDIAN
      *value <<= 8;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	021a      	lsls	r2, r3, #8
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	601a      	str	r2, [r3, #0]
#endif
#if BYTE_ORDER == BIG_ENDIAN
      *value >>= 8;
#endif

      if (sign) {
 800e72e:	7ffb      	ldrb	r3, [r7, #31]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00a      	beq.n	800e74a <snmp_asn1_dec_s32t+0xbe>
        *lsb_ptr |= 255;
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	22ff      	movs	r2, #255	@ 0xff
 800e738:	701a      	strb	r2, [r3, #0]
        *lsb_ptr &= data;
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	781a      	ldrb	r2, [r3, #0]
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	4013      	ands	r3, r2
 800e742:	b2da      	uxtb	r2, r3
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	701a      	strb	r2, [r3, #0]
 800e748:	e006      	b.n	800e758 <snmp_asn1_dec_s32t+0xcc>
      } else {
        *lsb_ptr |= data;
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	781a      	ldrb	r2, [r3, #0]
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	4313      	orrs	r3, r2
 800e752:	b2da      	uxtb	r2, r3
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	701a      	strb	r2, [r3, #0]
    while (len > 0) {
 800e758:	897b      	ldrh	r3, [r7, #10]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1d3      	bne.n	800e706 <snmp_asn1_dec_s32t+0x7a>
      }
    }

    return ERR_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	e001      	b.n	800e766 <snmp_asn1_dec_s32t+0xda>
  }

  return ERR_VAL;
 800e762:	f06f 0305 	mvn.w	r3, #5
}
 800e766:	4618      	mov	r0, r3
 800e768:	3720      	adds	r7, #32
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t* oid, u8_t* oid_len, u8_t oid_max_len)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b088      	sub	sp, #32
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
 800e77a:	460b      	mov	r3, r1
 800e77c:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2200      	movs	r2, #0
 800e782:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 800e788:	897b      	ldrh	r3, [r7, #10]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d05a      	beq.n	800e844 <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 800e78e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e792:	2b01      	cmp	r3, #1
 800e794:	d802      	bhi.n	800e79c <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 800e796:	f04f 33ff 	mov.w	r3, #4294967295
 800e79a:	e0b2      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e79c:	f107 0317 	add.w	r3, r7, #23
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f005 f932 	bl	8013a0c <snmp_pbuf_stream_read>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d002      	beq.n	800e7b4 <snmp_asn1_dec_oid+0x46>
 800e7ae:	f06f 0301 	mvn.w	r3, #1
 800e7b2:	e0a6      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
    len--;
 800e7b4:	897b      	ldrh	r3, [r7, #10]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 800e7ba:	7dfb      	ldrb	r3, [r7, #23]
 800e7bc:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7be:	d10c      	bne.n	800e7da <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2203      	movs	r2, #3
 800e7d0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	61fb      	str	r3, [r7, #28]
 800e7d8:	e030      	b.n	800e83c <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 800e7da:	7dfb      	ldrb	r3, [r7, #23]
 800e7dc:	2b27      	cmp	r3, #39	@ 0x27
 800e7de:	d80d      	bhi.n	800e7fc <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 800e7ec:	7dfb      	ldrb	r3, [r7, #23]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	61fb      	str	r3, [r7, #28]
 800e7fa:	e01f      	b.n	800e83c <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b4f      	cmp	r3, #79	@ 0x4f
 800e800:	d80e      	bhi.n	800e820 <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	2201      	movs	r2, #1
 800e806:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	3304      	adds	r3, #4
 800e80c:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	3b28      	subs	r3, #40	@ 0x28
 800e812:	461a      	mov	r2, r3
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	3304      	adds	r3, #4
 800e81c:	61fb      	str	r3, [r7, #28]
 800e81e:	e00d      	b.n	800e83c <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2202      	movs	r2, #2
 800e824:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	3304      	adds	r3, #4
 800e82a:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	3b50      	subs	r3, #80	@ 0x50
 800e830:	461a      	mov	r2, r3
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	3304      	adds	r3, #4
 800e83a:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2202      	movs	r2, #2
 800e840:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e842:	e04e      	b.n	800e8e2 <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	e05c      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e848:	f107 0317 	add.w	r3, r7, #23
 800e84c:	4619      	mov	r1, r3
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f005 f8dc 	bl	8013a0c <snmp_pbuf_stream_read>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <snmp_asn1_dec_oid+0xf2>
 800e85a:	f06f 0301 	mvn.w	r3, #1
 800e85e:	e050      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
    len--;
 800e860:	897b      	ldrh	r3, [r7, #10]
 800e862:	3b01      	subs	r3, #1
 800e864:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	db04      	blt.n	800e878 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
 800e870:	461a      	mov	r2, r3
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	e02b      	b.n	800e8d0 <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 800e878:	7dfb      	ldrb	r3, [r7, #23]
 800e87a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e87e:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e880:	e015      	b.n	800e8ae <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e882:	f107 0317 	add.w	r3, r7, #23
 800e886:	4619      	mov	r1, r3
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f005 f8bf 	bl	8013a0c <snmp_pbuf_stream_read>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <snmp_asn1_dec_oid+0x12c>
 800e894:	f06f 0301 	mvn.w	r3, #1
 800e898:	e033      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
        len--;
 800e89a:	897b      	ldrh	r3, [r7, #10]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	01da      	lsls	r2, r3, #7
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
 800e8a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8aa:	4413      	add	r3, r2
 800e8ac:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e8ae:	897b      	ldrh	r3, [r7, #10]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <snmp_asn1_dec_oid+0x14e>
 800e8b4:	7dfb      	ldrb	r3, [r7, #23]
 800e8b6:	b25b      	sxtb	r3, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dbe2      	blt.n	800e882 <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	b25b      	sxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	da02      	bge.n	800e8ca <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 800e8c4:	f06f 0305 	mvn.w	r3, #5
 800e8c8:	e01b      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b2da      	uxtb	r2, r3
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e8e2:	897b      	ldrh	r3, [r7, #10]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <snmp_asn1_dec_oid+0x186>
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d8a9      	bhi.n	800e848 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 800e8f4:	897b      	ldrh	r3, [r7, #10]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d002      	beq.n	800e900 <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 800e8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fe:	e000      	b.n	800e902 <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3720      	adds	r7, #32
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t* buf_len, u16_t buf_max_len)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	607a      	str	r2, [r7, #4]
 800e914:	603b      	str	r3, [r7, #0]
 800e916:	460b      	mov	r3, r1
 800e918:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 800e91a:	897a      	ldrh	r2, [r7, #10]
 800e91c:	8b3b      	ldrh	r3, [r7, #24]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d902      	bls.n	800e928 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 800e922:	f04f 33ff 	mov.w	r3, #4294967295
 800e926:	e017      	b.n	800e958 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	897a      	ldrh	r2, [r7, #10]
 800e92c:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 800e92e:	e00f      	b.n	800e950 <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f005 f86a 	bl	8013a0c <snmp_pbuf_stream_read>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <snmp_asn1_dec_raw+0x3a>
 800e93e:	f06f 0301 	mvn.w	r3, #1
 800e942:	e009      	b.n	800e958 <snmp_asn1_dec_raw+0x4e>
    buf++;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	3301      	adds	r3, #1
 800e948:	607b      	str	r3, [r7, #4]
    len--;
 800e94a:	897b      	ldrh	r3, [r7, #10]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 800e950:	897b      	ldrh	r3, [r7, #10]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ec      	bne.n	800e930 <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d105      	bne.n	800e97e <snmp_set_mibs+0x1e>
 800e972:	4b0c      	ldr	r3, [pc, #48]	@ (800e9a4 <snmp_set_mibs+0x44>)
 800e974:	22de      	movs	r2, #222	@ 0xde
 800e976:	490c      	ldr	r1, [pc, #48]	@ (800e9a8 <snmp_set_mibs+0x48>)
 800e978:	480c      	ldr	r0, [pc, #48]	@ (800e9ac <snmp_set_mibs+0x4c>)
 800e97a:	f013 fc61 	bl	8022240 <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 800e97e:	78fb      	ldrb	r3, [r7, #3]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d105      	bne.n	800e990 <snmp_set_mibs+0x30>
 800e984:	4b07      	ldr	r3, [pc, #28]	@ (800e9a4 <snmp_set_mibs+0x44>)
 800e986:	22df      	movs	r2, #223	@ 0xdf
 800e988:	4909      	ldr	r1, [pc, #36]	@ (800e9b0 <snmp_set_mibs+0x50>)
 800e98a:	4808      	ldr	r0, [pc, #32]	@ (800e9ac <snmp_set_mibs+0x4c>)
 800e98c:	f013 fc58 	bl	8022240 <iprintf>
  snmp_mibs     = mibs;
 800e990:	4a08      	ldr	r2, [pc, #32]	@ (800e9b4 <snmp_set_mibs+0x54>)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 800e996:	4a08      	ldr	r2, [pc, #32]	@ (800e9b8 <snmp_set_mibs+0x58>)
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	7013      	strb	r3, [r2, #0]
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	080258a8 	.word	0x080258a8
 800e9a8:	080258e4 	.word	0x080258e4
 800e9ac:	08025904 	.word	0x08025904
 800e9b0:	0802592c 	.word	0x0802592c
 800e9b4:	200000f8 	.word	0x200000f8
 800e9b8:	200000f4 	.word	0x200000f4

0800e9bc <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid' 
 */
const struct snmp_obj_id* snmp_get_device_enterprise_oid(void)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
  return snmp_device_enterprise_oid;
 800e9c0:	4b02      	ldr	r3, [pc, #8]	@ (800e9cc <snmp_get_device_enterprise_oid+0x10>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bc80      	pop	{r7}
 800e9ca:	4770      	bx	lr
 800e9cc:	200000f0 	.word	0x200000f0

0800e9d0 <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2bff      	cmp	r3, #255	@ 0xff
 800e9e0:	d80e      	bhi.n	800ea00 <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 800e9e8:	2bff      	cmp	r3, #255	@ 0xff
 800e9ea:	d809      	bhi.n	800ea00 <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 800e9f2:	2bff      	cmp	r3, #255	@ 0xff
 800e9f4:	d804      	bhi.n	800ea00 <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	330c      	adds	r3, #12
 800e9fa:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 800e9fc:	2bff      	cmp	r3, #255	@ 0xff
 800e9fe:	d905      	bls.n	800ea0c <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 800ea00:	4b36      	ldr	r3, [pc, #216]	@ (800eadc <snmp_oid_to_ip4+0x10c>)
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	601a      	str	r2, [r3, #0]
    return 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e061      	b.n	800ead0 <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	061a      	lsls	r2, r3, #24
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3304      	adds	r3, #4
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	041b      	lsls	r3, r3, #16
 800ea1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3308      	adds	r3, #8
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	021b      	lsls	r3, r3, #8
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	330c      	adds	r3, #12
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	4313      	orrs	r3, r2
 800ea36:	061a      	lsls	r2, r3, #24
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	0619      	lsls	r1, r3, #24
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3304      	adds	r3, #4
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	041b      	lsls	r3, r3, #16
 800ea46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea4a:	4319      	orrs	r1, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3308      	adds	r3, #8
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	021b      	lsls	r3, r3, #8
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	4319      	orrs	r1, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	430b      	orrs	r3, r1
 800ea62:	021b      	lsls	r3, r3, #8
 800ea64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	0619      	lsls	r1, r3, #24
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3304      	adds	r3, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	041b      	lsls	r3, r3, #16
 800ea78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea7c:	4319      	orrs	r1, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	3308      	adds	r3, #8
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	021b      	lsls	r3, r3, #8
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	4319      	orrs	r1, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	330c      	adds	r3, #12
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	430b      	orrs	r3, r1
 800ea94:	0a1b      	lsrs	r3, r3, #8
 800ea96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ea9a:	431a      	orrs	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	0619      	lsls	r1, r3, #24
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	041b      	lsls	r3, r3, #16
 800eaaa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eaae:	4319      	orrs	r1, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3308      	adds	r3, #8
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	021b      	lsls	r3, r3, #8
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4319      	orrs	r1, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	330c      	adds	r3, #12
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	430b      	orrs	r3, r1
 800eac6:	0e1b      	lsrs	r3, r3, #24
 800eac8:	431a      	orrs	r2, r3
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	601a      	str	r2, [r3, #0]
  return 1;
 800eace:	2301      	movs	r3, #1
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bc80      	pop	{r7}
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	0803165c 	.word	0x0803165c

0800eae0 <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	781a      	ldrb	r2, [r3, #0]
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	3304      	adds	r3, #4
 800eafe:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3302      	adds	r3, #2
 800eb04:	781a      	ldrb	r2, [r3, #0]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	3308      	adds	r3, #8
 800eb0a:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3303      	adds	r3, #3
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	330c      	adds	r3, #12
 800eb16:	601a      	str	r2, [r3, #0]
}
 800eb18:	bf00      	nop
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bc80      	pop	{r7}
 800eb20:	4770      	bx	lr

0800eb22 <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b086      	sub	sp, #24
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	607a      	str	r2, [r7, #4]
 800eb2e:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 800eb30:	6879      	ldr	r1, [r7, #4]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f000 f810 	bl	800eb58 <snmp_ip_to_oid>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	4413      	add	r3, r2
 800eb44:	897a      	ldrh	r2, [r7, #10]
 800eb46:	601a      	str	r2, [r3, #0]
  idx++;
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	75fb      	strb	r3, [r7, #23]

  return idx;
 800eb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3718      	adds	r7, #24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2201      	movs	r2, #1
 800eb66:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	2204      	movs	r2, #4
 800eb6e:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	3308      	adds	r3, #8
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff ffb2 	bl	800eae0 <snmp_ip4_to_oid>
    return 6;
 800eb7c:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	607a      	str	r2, [r7, #4]
 800eb92:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800eb94:	7afb      	ldrb	r3, [r7, #11]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <snmp_oid_to_ip+0x18>
    return 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e03a      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d112      	bne.n	800ebcc <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 800eba6:	7afb      	ldrb	r3, [r7, #11]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d801      	bhi.n	800ebb0 <snmp_oid_to_ip+0x2a>
      return 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	e031      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <snmp_oid_to_ip+0x38>
      return 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e02a      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 800ebbe:	2204      	movs	r2, #4
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f013 fd12 	bl	80225ec <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	e023      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d118      	bne.n	800ec06 <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800ebd4:	7afb      	ldrb	r3, [r7, #11]
 800ebd6:	2b05      	cmp	r3, #5
 800ebd8:	d801      	bhi.n	800ebde <snmp_oid_to_ip+0x58>
      return 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e01a      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b04      	cmp	r3, #4
 800ebe6:	d001      	beq.n	800ebec <snmp_oid_to_ip+0x66>
      return 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e013      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	6879      	ldr	r1, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff feec 	bl	800e9d0 <snmp_oid_to_ip4>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d101      	bne.n	800ec02 <snmp_oid_to_ip+0x7c>
      return 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	e008      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
    }

    return 6;
 800ec02:	2306      	movs	r3, #6
 800ec04:	e006      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d101      	bne.n	800ec12 <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	e000      	b.n	800ec14 <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 800ec12:	2300      	movs	r3, #0
  }
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	607a      	str	r2, [r7, #4]
 800ec26:	603b      	str	r3, [r7, #0]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	72fb      	strb	r3, [r7, #11]
  u8_t idx = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	75fb      	strb	r3, [r7, #23]

  /* InetAddressType + InetAddress */
  idx += snmp_oid_to_ip(&oid[idx], oid_len-idx, ip);
 800ec30:	7dfb      	ldrb	r3, [r7, #23]
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	18d0      	adds	r0, r2, r3
 800ec38:	7afa      	ldrb	r2, [r7, #11]
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	4619      	mov	r1, r3
 800ec44:	f7ff ff9f 	bl	800eb86 <snmp_oid_to_ip>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	4413      	add	r3, r2
 800ec50:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <snmp_oid_to_ip_port+0x40>
    return 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e01b      	b.n	800ec94 <snmp_oid_to_ip_port+0x78>
  }

  /* InetPortNumber */
  if (oid_len < (idx+1)) {
 800ec5c:	7dfa      	ldrb	r2, [r7, #23]
 800ec5e:	7afb      	ldrb	r3, [r7, #11]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d301      	bcc.n	800ec68 <snmp_oid_to_ip_port+0x4c>
    return 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	e015      	b.n	800ec94 <snmp_oid_to_ip_port+0x78>
  }
  if (oid[idx] > 0xffff) {
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec76:	d301      	bcc.n	800ec7c <snmp_oid_to_ip_port+0x60>
    return 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	e00b      	b.n	800ec94 <snmp_oid_to_ip_port+0x78>
  }
  *port = (u16_t)oid[idx];
 800ec7c:	7dfb      	ldrb	r3, [r7, #23]
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	4413      	add	r3, r2
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	801a      	strh	r2, [r3, #0]
  idx++;
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	75fb      	strb	r3, [r7, #23]

  return idx;
 800ec92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= LWIP_SNMP_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	2b32      	cmp	r3, #50	@ 0x32
 800ecae:	d906      	bls.n	800ecbe <snmp_oid_assign+0x22>
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ece4 <snmp_oid_assign+0x48>)
 800ecb2:	f240 2213 	movw	r2, #531	@ 0x213
 800ecb6:	490c      	ldr	r1, [pc, #48]	@ (800ece8 <snmp_oid_assign+0x4c>)
 800ecb8:	480c      	ldr	r0, [pc, #48]	@ (800ecec <snmp_oid_assign+0x50>)
 800ecba:	f013 fac1 	bl	8022240 <iprintf>

  target->len = oid_len;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	79fa      	ldrb	r2, [r7, #7]
 800ecc2:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d007      	beq.n	800ecda <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	1d18      	adds	r0, r3, #4
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	68b9      	ldr	r1, [r7, #8]
 800ecd6:	f013 fdae 	bl	8022836 <memcpy>
  }
}
 800ecda:	bf00      	nop
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	080258a8 	.word	0x080258a8
 800ece8:	0802594c 	.word	0x0802594c
 800ecec:	08025904 	.word	0x08025904

0800ecf0 <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= LWIP_SNMP_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	4413      	add	r3, r2
 800ed08:	2b32      	cmp	r3, #50	@ 0x32
 800ed0a:	dd06      	ble.n	800ed1a <snmp_oid_append+0x2a>
 800ed0c:	4b10      	ldr	r3, [pc, #64]	@ (800ed50 <snmp_oid_append+0x60>)
 800ed0e:	f240 224b 	movw	r2, #587	@ 0x24b
 800ed12:	4910      	ldr	r1, [pc, #64]	@ (800ed54 <snmp_oid_append+0x64>)
 800ed14:	4810      	ldr	r0, [pc, #64]	@ (800ed58 <snmp_oid_append+0x68>)
 800ed16:	f013 fa93 	bl	8022240 <iprintf>

  if (oid_len > 0) {
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d012      	beq.n	800ed46 <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	4413      	add	r3, r2
 800ed2a:	1d18      	adds	r0, r3, #4
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	461a      	mov	r2, r3
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	f013 fd7f 	bl	8022836 <memcpy>
    target->len += oid_len;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	781a      	ldrb	r2, [r3, #0]
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	4413      	add	r3, r2
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	701a      	strb	r2, [r3, #0]
  }
}
 800ed46:	bf00      	nop
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	080258a8 	.word	0x080258a8
 800ed54:	0802599c 	.word	0x0802599c
 800ed58:	08025904 	.word	0x08025904

0800ed5c <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	607a      	str	r2, [r7, #4]
 800ed66:	461a      	mov	r2, r3
 800ed68:	460b      	mov	r3, r1
 800ed6a:	72fb      	strb	r3, [r7, #11]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d109      	bne.n	800ed8e <snmp_oid_compare+0x32>
 800ed7a:	7afb      	ldrb	r3, [r7, #11]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d006      	beq.n	800ed8e <snmp_oid_compare+0x32>
 800ed80:	4b24      	ldr	r3, [pc, #144]	@ (800ee14 <snmp_oid_compare+0xb8>)
 800ed82:	f240 225f 	movw	r2, #607	@ 0x25f
 800ed86:	4924      	ldr	r1, [pc, #144]	@ (800ee18 <snmp_oid_compare+0xbc>)
 800ed88:	4824      	ldr	r0, [pc, #144]	@ (800ee1c <snmp_oid_compare+0xc0>)
 800ed8a:	f013 fa59 	bl	8022240 <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d124      	bne.n	800edde <snmp_oid_compare+0x82>
 800ed94:	7abb      	ldrb	r3, [r7, #10]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d021      	beq.n	800edde <snmp_oid_compare+0x82>
 800ed9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ee14 <snmp_oid_compare+0xb8>)
 800ed9c:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800eda0:	491f      	ldr	r1, [pc, #124]	@ (800ee20 <snmp_oid_compare+0xc4>)
 800eda2:	481e      	ldr	r0, [pc, #120]	@ (800ee1c <snmp_oid_compare+0xc0>)
 800eda4:	f013 fa4c 	bl	8022240 <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800eda8:	e019      	b.n	800edde <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d202      	bcs.n	800edbc <snmp_oid_compare+0x60>
      return -1;
 800edb6:	f04f 33ff 	mov.w	r3, #4294967295
 800edba:	e026      	b.n	800ee0a <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d901      	bls.n	800edcc <snmp_oid_compare+0x70>
      return 1;
 800edc8:	2301      	movs	r3, #1
 800edca:	e01e      	b.n	800ee0a <snmp_oid_compare+0xae>
    }

    level++;
 800edcc:	7dfb      	ldrb	r3, [r7, #23]
 800edce:	3301      	adds	r3, #1
 800edd0:	75fb      	strb	r3, [r7, #23]
    oid1++;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	3304      	adds	r3, #4
 800edd6:	60fb      	str	r3, [r7, #12]
    oid2++;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	3304      	adds	r3, #4
 800eddc:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 800edde:	7dfa      	ldrb	r2, [r7, #23]
 800ede0:	7afb      	ldrb	r3, [r7, #11]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d203      	bcs.n	800edee <snmp_oid_compare+0x92>
 800ede6:	7dfa      	ldrb	r2, [r7, #23]
 800ede8:	7abb      	ldrb	r3, [r7, #10]
 800edea:	429a      	cmp	r2, r3
 800edec:	d3dd      	bcc.n	800edaa <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 800edee:	7afa      	ldrb	r2, [r7, #11]
 800edf0:	7abb      	ldrb	r3, [r7, #10]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d202      	bcs.n	800edfc <snmp_oid_compare+0xa0>
    return -1;
 800edf6:	f04f 33ff 	mov.w	r3, #4294967295
 800edfa:	e006      	b.n	800ee0a <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 800edfc:	7afa      	ldrb	r2, [r7, #11]
 800edfe:	7abb      	ldrb	r3, [r7, #10]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d901      	bls.n	800ee08 <snmp_oid_compare+0xac>
    return 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e000      	b.n	800ee0a <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	080258a8 	.word	0x080258a8
 800ee18:	080259c8 	.word	0x080259c8
 800ee1c:	08025904 	.word	0x08025904
 800ee20:	08025a00 	.word	0x08025a00

0800ee24 <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  u8_t result = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	73fb      	strb	r3, [r7, #15]
  struct netif *netif_iterator = netif_list;
 800ee30:	4b0f      	ldr	r3, [pc, #60]	@ (800ee70 <netif_to_num+0x4c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60bb      	str	r3, [r7, #8]

  while (netif_iterator != NULL) {
 800ee36:	e00b      	b.n	800ee50 <netif_to_num+0x2c>
    result++;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	73fb      	strb	r3, [r7, #15]

    if (netif_iterator == netif) {
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d101      	bne.n	800ee4a <netif_to_num+0x26>
      return result;
 800ee46:	7bfb      	ldrb	r3, [r7, #15]
 800ee48:	e00d      	b.n	800ee66 <netif_to_num+0x42>
    }

    netif_iterator = netif_iterator->next;
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60bb      	str	r3, [r7, #8]
  while (netif_iterator != NULL) {
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1f0      	bne.n	800ee38 <netif_to_num+0x14>
  }

  LWIP_ASSERT("netif not found in netif_list", 0);
 800ee56:	4b07      	ldr	r3, [pc, #28]	@ (800ee74 <netif_to_num+0x50>)
 800ee58:	f240 229f 	movw	r2, #671	@ 0x29f
 800ee5c:	4906      	ldr	r1, [pc, #24]	@ (800ee78 <netif_to_num+0x54>)
 800ee5e:	4807      	ldr	r0, [pc, #28]	@ (800ee7c <netif_to_num+0x58>)
 800ee60:	f013 f9ee 	bl	8022240 <iprintf>
  return 0;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	2000bbd8 	.word	0x2000bbd8
 800ee74:	080258a8 	.word	0x080258a8
 800ee78:	08025a38 	.word	0x08025a38
 800ee7c:	08025904 	.word	0x08025904

0800ee80 <snmp_get_mib_from_oid>:

static const struct snmp_mib*
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	70fb      	strb	r3, [r7, #3]
  const u32_t* list_oid;
  const u32_t* searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib* matched_mib = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <snmp_get_mib_from_oid+0x28>
 800ee9a:	4b44      	ldr	r3, [pc, #272]	@ (800efac <snmp_get_mib_from_oid+0x12c>)
 800ee9c:	f240 22ad 	movw	r2, #685	@ 0x2ad
 800eea0:	4943      	ldr	r1, [pc, #268]	@ (800efb0 <snmp_get_mib_from_oid+0x130>)
 800eea2:	4844      	ldr	r0, [pc, #272]	@ (800efb4 <snmp_get_mib_from_oid+0x134>)
 800eea4:	f013 f9cc 	bl	8022240 <iprintf>

  if (oid_len == 0) {
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <snmp_get_mib_from_oid+0x32>
    return NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e077      	b.n	800efa2 <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	73fb      	strb	r3, [r7, #15]
 800eeb6:	e06e      	b.n	800ef96 <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 800eeb8:	4b3f      	ldr	r3, [pc, #252]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d106      	bne.n	800eed6 <snmp_get_mib_from_oid+0x56>
 800eec8:	4b38      	ldr	r3, [pc, #224]	@ (800efac <snmp_get_mib_from_oid+0x12c>)
 800eeca:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 800eece:	493b      	ldr	r1, [pc, #236]	@ (800efbc <snmp_get_mib_from_oid+0x13c>)
 800eed0:	4838      	ldr	r0, [pc, #224]	@ (800efb4 <snmp_get_mib_from_oid+0x134>)
 800eed2:	f013 f9b5 	bl	8022240 <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800eed6:	4b38      	ldr	r3, [pc, #224]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4413      	add	r3, r2
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d106      	bne.n	800eef6 <snmp_get_mib_from_oid+0x76>
 800eee8:	4b30      	ldr	r3, [pc, #192]	@ (800efac <snmp_get_mib_from_oid+0x12c>)
 800eeea:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800eeee:	4934      	ldr	r1, [pc, #208]	@ (800efc0 <snmp_get_mib_from_oid+0x140>)
 800eef0:	4830      	ldr	r0, [pc, #192]	@ (800efb4 <snmp_get_mib_from_oid+0x134>)
 800eef2:	f013 f9a5 	bl	8022240 <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800eef6:	4b30      	ldr	r3, [pc, #192]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	791b      	ldrb	r3, [r3, #4]
 800ef04:	78fa      	ldrb	r2, [r7, #3]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d342      	bcc.n	800ef90 <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 800ef0a:	4b2b      	ldr	r3, [pc, #172]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	4413      	add	r3, r2
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	791b      	ldrb	r3, [r3, #4]
 800ef18:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 800ef1a:	4b27      	ldr	r3, [pc, #156]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	4413      	add	r3, r2
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 800ef2e:	e00e      	b.n	800ef4e <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d10c      	bne.n	800ef56 <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 800ef3c:	7bbb      	ldrb	r3, [r7, #14]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	3304      	adds	r3, #4
 800ef46:	617b      	str	r3, [r7, #20]
        searched_oid++;
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1ed      	bne.n	800ef30 <snmp_get_mib_from_oid+0xb0>
 800ef54:	e000      	b.n	800ef58 <snmp_get_mib_from_oid+0xd8>
          break;
 800ef56:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 800ef58:	7bbb      	ldrb	r3, [r7, #14]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d118      	bne.n	800ef90 <snmp_get_mib_from_oid+0x110>
 800ef5e:	4b16      	ldr	r3, [pc, #88]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	7bfb      	ldrb	r3, [r7, #15]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	791b      	ldrb	r3, [r3, #4]
 800ef6c:	7b7a      	ldrb	r2, [r7, #13]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d20e      	bcs.n	800ef90 <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 800ef72:	4b11      	ldr	r3, [pc, #68]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	791b      	ldrb	r3, [r3, #4]
 800ef80:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 800ef82:	4b0d      	ldr	r3, [pc, #52]	@ (800efb8 <snmp_get_mib_from_oid+0x138>)
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	7bfb      	ldrb	r3, [r7, #15]
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4413      	add	r3, r2
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	3301      	adds	r3, #1
 800ef94:	73fb      	strb	r3, [r7, #15]
 800ef96:	4b0b      	ldr	r3, [pc, #44]	@ (800efc4 <snmp_get_mib_from_oid+0x144>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	7bfa      	ldrb	r2, [r7, #15]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d38b      	bcc.n	800eeb8 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 800efa0:	68bb      	ldr	r3, [r7, #8]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	080258a8 	.word	0x080258a8
 800efb0:	08025a58 	.word	0x08025a58
 800efb4:	08025904 	.word	0x08025904
 800efb8:	200000f8 	.word	0x200000f8
 800efbc:	08025a78 	.word	0x08025a78
 800efc0:	08025a9c 	.word	0x08025a9c
 800efc4:	200000f4 	.word	0x200000f4

0800efc8 <snmp_get_next_mib>:

static const struct snmp_mib*
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib* next_mib = NULL;
 800efd4:	2300      	movs	r3, #0
 800efd6:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <snmp_get_next_mib+0x24>
 800efde:	4b2d      	ldr	r3, [pc, #180]	@ (800f094 <snmp_get_next_mib+0xcc>)
 800efe0:	f240 22d6 	movw	r2, #726	@ 0x2d6
 800efe4:	492c      	ldr	r1, [pc, #176]	@ (800f098 <snmp_get_next_mib+0xd0>)
 800efe6:	482d      	ldr	r0, [pc, #180]	@ (800f09c <snmp_get_next_mib+0xd4>)
 800efe8:	f013 f92a 	bl	8022240 <iprintf>

  if (oid_len == 0) {
 800efec:	78fb      	ldrb	r3, [r7, #3]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <snmp_get_next_mib+0x2e>
    return NULL;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e04a      	b.n	800f08c <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800eff6:	2300      	movs	r3, #0
 800eff8:	73fb      	strb	r3, [r7, #15]
 800effa:	e041      	b.n	800f080 <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 800effc:	4b28      	ldr	r3, [pc, #160]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	7bfb      	ldrb	r3, [r7, #15]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d035      	beq.n	800f07a <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 800f00e:	4b24      	ldr	r3, [pc, #144]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	7bfb      	ldrb	r3, [r7, #15]
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4413      	add	r3, r2
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6818      	ldr	r0, [r3, #0]
 800f01c:	4b20      	ldr	r3, [pc, #128]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	4413      	add	r3, r2
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	7919      	ldrb	r1, [r3, #4]
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	f7ff fe95 	bl	800ed5c <snmp_oid_compare>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	dd20      	ble.n	800f07a <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d016      	beq.n	800f06c <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800f03e:	4b18      	ldr	r3, [pc, #96]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6818      	ldr	r0, [r3, #0]
 800f04c:	4b14      	ldr	r3, [pc, #80]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	7bfb      	ldrb	r3, [r7, #15]
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	4413      	add	r3, r2
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	7919      	ldrb	r1, [r3, #4]
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	791b      	ldrb	r3, [r3, #4]
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800f062:	f7ff fe7b 	bl	800ed5c <snmp_oid_compare>
 800f066:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 800f068:	2b00      	cmp	r3, #0
 800f06a:	da06      	bge.n	800f07a <snmp_get_next_mib+0xb2>
          next_mib = snmp_mibs[i];
 800f06c:	4b0c      	ldr	r3, [pc, #48]	@ (800f0a0 <snmp_get_next_mib+0xd8>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
 800f07c:	3301      	adds	r3, #1
 800f07e:	73fb      	strb	r3, [r7, #15]
 800f080:	4b08      	ldr	r3, [pc, #32]	@ (800f0a4 <snmp_get_next_mib+0xdc>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	7bfa      	ldrb	r2, [r7, #15]
 800f086:	429a      	cmp	r2, r3
 800f088:	d3b8      	bcc.n	800effc <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 800f08a:	68bb      	ldr	r3, [r7, #8]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	080258a8 	.word	0x080258a8
 800f098:	08025a58 	.word	0x08025a58
 800f09c:	08025904 	.word	0x08025904
 800f0a0:	200000f8 	.word	0x200000f8
 800f0a4:	200000f4 	.word	0x200000f4

0800f0a8 <snmp_get_mib_between>:

static const struct snmp_mib*
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	607a      	str	r2, [r7, #4]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	72fb      	strb	r3, [r7, #11]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib* next_mib = snmp_get_next_mib(oid1, oid1_len);
 800f0bc:	7afb      	ldrb	r3, [r7, #11]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f7ff ff81 	bl	800efc8 <snmp_get_next_mib>
 800f0c6:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d106      	bne.n	800f0dc <snmp_get_mib_between+0x34>
 800f0ce:	4b13      	ldr	r3, [pc, #76]	@ (800f11c <snmp_get_mib_between+0x74>)
 800f0d0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f0d4:	4912      	ldr	r1, [pc, #72]	@ (800f120 <snmp_get_mib_between+0x78>)
 800f0d6:	4813      	ldr	r0, [pc, #76]	@ (800f124 <snmp_get_mib_between+0x7c>)
 800f0d8:	f013 f8b2 	bl	8022240 <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 800f0dc:	7abb      	ldrb	r3, [r7, #10]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d106      	bne.n	800f0f0 <snmp_get_mib_between+0x48>
 800f0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <snmp_get_mib_between+0x74>)
 800f0e4:	f240 22f2 	movw	r2, #754	@ 0x2f2
 800f0e8:	490f      	ldr	r1, [pc, #60]	@ (800f128 <snmp_get_mib_between+0x80>)
 800f0ea:	480e      	ldr	r0, [pc, #56]	@ (800f124 <snmp_get_mib_between+0x7c>)
 800f0ec:	f013 f8a8 	bl	8022240 <iprintf>

  if (next_mib != NULL) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00c      	beq.n	800f110 <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	6818      	ldr	r0, [r3, #0]
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	7919      	ldrb	r1, [r3, #4]
 800f0fe:	7abb      	ldrb	r3, [r7, #10]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	f7ff fe2b 	bl	800ed5c <snmp_oid_compare>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	da01      	bge.n	800f110 <snmp_get_mib_between+0x68>
      return next_mib;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	e000      	b.n	800f112 <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	080258a8 	.word	0x080258a8
 800f120:	08025ad4 	.word	0x08025ad4
 800f124:	08025904 	.word	0x08025904
 800f128:	08025af4 	.word	0x08025af4

0800f12c <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance* node_instance)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08a      	sub	sp, #40	@ 0x28
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	460b      	mov	r3, r1
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 800f13a:	23f0      	movs	r3, #240	@ 0xf0
 800f13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 800f144:	7afb      	ldrb	r3, [r7, #11]
 800f146:	4619      	mov	r1, r3
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7ff fe99 	bl	800ee80 <snmp_get_mib_from_oid>
 800f14e:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d02b      	beq.n	800f1ae <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 800f156:	f107 0317 	add.w	r3, r7, #23
 800f15a:	7afa      	ldrb	r2, [r7, #11]
 800f15c:	68f9      	ldr	r1, [r7, #12]
 800f15e:	69f8      	ldr	r0, [r7, #28]
 800f160:	f000 f981 	bl	800f466 <snmp_mib_tree_resolve_exact>
 800f164:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d020      	beq.n	800f1ae <snmp_get_node_instance_from_oid+0x82>
 800f16c:	6a3b      	ldr	r3, [r7, #32]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d01c      	beq.n	800f1ae <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node* leaf_node = (const struct snmp_leaf_node*)(const void*)mn;
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a3a      	ldr	r2, [r7, #32]
 800f17c:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	1d18      	adds	r0, r3, #4
 800f182:	7afb      	ldrb	r3, [r7, #11]
 800f184:	7dfa      	ldrb	r2, [r7, #23]
 800f186:	1a9b      	subs	r3, r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4413      	add	r3, r2
 800f18e:	7dfa      	ldrb	r2, [r7, #23]
 800f190:	4619      	mov	r1, r3
 800f192:	f7ff fd83 	bl	800ec9c <snmp_oid_assign>

      result = leaf_node->get_instance(
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	7dfa      	ldrb	r2, [r7, #23]
 800f19c:	7af9      	ldrb	r1, [r7, #11]
 800f19e:	1a8a      	subs	r2, r1, r2
 800f1a0:	b2d1      	uxtb	r1, r2
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	4798      	blx	r3
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
#endif
    }
  }

  return result;
 800f1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3728      	adds	r7, #40	@ 0x28
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void* validate_node_instance_arg, struct snmp_obj_id* node_oid, struct snmp_node_instance* node_instance)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b08c      	sub	sp, #48	@ 0x30
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	60f8      	str	r0, [r7, #12]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	603b      	str	r3, [r7, #0]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  const u32_t* start_oid     = NULL;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  u8_t         start_oid_len = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 800f1d8:	7afb      	ldrb	r3, [r7, #11]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f7ff fe4f 	bl	800ee80 <snmp_get_mib_from_oid>
 800f1e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (mib == NULL) {
 800f1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d111      	bne.n	800f20e <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 800f1ea:	7afb      	ldrb	r3, [r7, #11]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f7ff feea 	bl	800efc8 <snmp_get_next_mib>
 800f1f4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (mib != NULL) {
 800f1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 8123 	beq.w	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 800f1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	627b      	str	r3, [r7, #36]	@ 0x24
      start_oid_len = mib->base_oid_len;
 800f204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f206:	791b      	ldrb	r3, [r3, #4]
 800f208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f20c:	e11a      	b.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	627b      	str	r3, [r7, #36]	@ 0x24
    start_oid_len = oid_len;
 800f212:	7afb      	ldrb	r3, [r7, #11]
 800f214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 800f218:	e114      	b.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 800f21a:	f107 0317 	add.w	r3, r7, #23
 800f21e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f222:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f224:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f226:	f000 f91e 	bl	800f466 <snmp_mib_tree_resolve_exact>
 800f22a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (mn != NULL) {
 800f22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d017      	beq.n	800f262 <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800f232:	7dfb      	ldrb	r3, [r7, #23]
 800f234:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	461a      	mov	r2, r3
 800f23e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f240:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f242:	f7ff fd2b 	bl	800ec9c <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 800f246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f248:	1d18      	adds	r0, r3, #4
 800f24a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f24e:	7dfa      	ldrb	r2, [r7, #23]
 800f250:	1a9b      	subs	r3, r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f256:	4413      	add	r3, r2
 800f258:	7dfa      	ldrb	r2, [r7, #23]
 800f25a:	4619      	mov	r1, r3
 800f25c:	f7ff fd1e 	bl	800ec9c <snmp_oid_assign>
 800f260:	e00a      	b.n	800f278 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 800f262:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f26a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f26c:	f000 f94d 	bl	800f50a <snmp_mib_tree_resolve_next>
 800f270:	62b8      	str	r0, [r7, #40]	@ 0x28
      node_instance->instance_oid.len = 0;
 800f272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f274:	2200      	movs	r2, #0
 800f276:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 800f278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f27a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f27c:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800f27e:	e073      	b.n	800f368 <snmp_get_next_node_instance_from_oid+0x1ae>
       u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 800f280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f282:	2200      	movs	r2, #0
 800f284:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 800f288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      node_instance->get_value        = NULL;
 800f290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f292:	2200      	movs	r2, #0
 800f294:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      node_instance->set_test         = NULL;
 800f298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f29a:	2200      	movs	r2, #0
 800f29c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      node_instance->set_value        = NULL;
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      node_instance->release_instance = NULL;
 800f2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
      node_instance->reference.ptr    = NULL;
 800f2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      node_instance->reference_len    = 0;
 800f2b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c2:	68db      	ldr	r3, [r3, #12]
        node_oid->id,
 800f2c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2c6:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800f2c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2ca:	7811      	ldrb	r1, [r2, #0]
 800f2cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2ce:	4798      	blx	r3
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        node_oid->len,
        node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800f2d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d11e      	bne.n	800f31c <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d006      	beq.n	800f2f2 <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f2ea:	4798      	blx	r3
 800f2ec:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d109      	bne.n	800f306 <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800f2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2f4:	f103 0108 	add.w	r1, r3, #8
 800f2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2fa:	791b      	ldrb	r3, [r3, #4]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f300:	f7ff fcf6 	bl	800ecf0 <snmp_oid_append>
          break;
 800f304:	e033      	b.n	800f36e <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800f306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d02b      	beq.n	800f368 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 800f310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f316:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f318:	4798      	blx	r3
 800f31a:	e025      	b.n	800f368 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 800f31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f31e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800f326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f32c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f32e:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 800f330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f332:	1d19      	adds	r1, r3, #4
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	781a      	ldrb	r2, [r3, #0]
 800f338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f33a:	3304      	adds	r3, #4
 800f33c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f33e:	f000 f8e4 	bl	800f50a <snmp_mib_tree_resolve_next>
 800f342:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (mn != NULL) {
 800f344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00e      	beq.n	800f368 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800f34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f34c:	f103 0108 	add.w	r1, r3, #8
 800f350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f352:	791b      	ldrb	r3, [r3, #4]
 800f354:	461a      	mov	r2, r3
 800f356:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f358:	f7ff fca0 	bl	800ec9c <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 800f35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f35e:	2200      	movs	r2, #0
 800f360:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 800f362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f366:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800f368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d188      	bne.n	800f280 <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 800f36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f370:	2b00      	cmp	r3, #0
 800f372:	d022      	beq.n	800f3ba <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in 
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 800f374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f376:	1d1a      	adds	r2, r3, #4
 800f378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800f380:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f382:	f7ff fe91 	bl	800f0a8 <snmp_get_mib_between>
 800f386:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d05a      	beq.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 800f38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d004      	beq.n	800f3a2 <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 800f398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f39a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f39e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f3a0:	4798      	blx	r3
        }

        mn            = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        mib           = intermediate_mib;
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800f3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b2:	791b      	ldrb	r3, [r3, #4]
 800f3b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f3b8:	e044      	b.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 800f3ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3c2:	f7ff fe01 	bl	800efc8 <snmp_get_next_mib>
 800f3c6:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d01c      	beq.n	800f408 <snmp_get_next_node_instance_from_oid+0x24e>
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	791a      	ldrb	r2, [r3, #4]
 800f3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d4:	791b      	ldrb	r3, [r3, #4]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d916      	bls.n	800f408 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	6818      	ldr	r0, [r3, #0]
 800f3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e0:	7919      	ldrb	r1, [r3, #4]
 800f3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e8:	791b      	ldrb	r3, [r3, #4]
 800f3ea:	f7ff fcb7 	bl	800ed5c <snmp_oid_compare>
 800f3ee:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d109      	bne.n	800f408 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800f3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800f3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f400:	791b      	ldrb	r3, [r3, #4]
 800f402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f406:	e01d      	b.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 800f408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40a:	791b      	ldrb	r3, [r3, #4]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d919      	bls.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 800f410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f416:	791b      	ldrb	r3, [r3, #4]
 800f418:	3b01      	subs	r3, #1
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	4619      	mov	r1, r3
 800f41e:	4610      	mov	r0, r2
 800f420:	f7ff fd2e 	bl	800ee80 <snmp_get_mib_from_oid>
 800f424:	62f8      	str	r0, [r7, #44]	@ 0x2c

          if (mib == NULL) {
 800f426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10b      	bne.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (mib != NULL) {
 800f430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f432:	2b00      	cmp	r3, #0
 800f434:	d006      	beq.n	800f444 <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800f436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	627b      	str	r3, [r7, #36]	@ 0x24
              start_oid_len = mib->base_oid_len;
 800f43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43e:	791b      	ldrb	r3, [r3, #4]
 800f440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while ((mib != NULL) && (mn == NULL)) {
 800f444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <snmp_get_next_node_instance_from_oid+0x298>
 800f44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f43f aee4 	beq.w	800f21a <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 800f452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 800f458:	23f2      	movs	r3, #242	@ 0xf2
 800f45a:	e000      	b.n	800f45e <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3730      	adds	r7, #48	@ 0x30
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t* oid_instance_len)
{
 800f466:	b480      	push	{r7}
 800f468:	b089      	sub	sp, #36	@ 0x24
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	60f8      	str	r0, [r7, #12]
 800f46e:	60b9      	str	r1, [r7, #8]
 800f470:	603b      	str	r3, [r7, #0]
 800f472:	4613      	mov	r3, r2
 800f474:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node* const* node = &mib->root_node;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	3308      	adds	r3, #8
 800f47a:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	791b      	ldrb	r3, [r3, #4]
 800f480:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800f482:	e025      	b.n	800f4d0 <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 800f484:	7efb      	ldrb	r3, [r7, #27]
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	4413      	add	r3, r2
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node* const*)node)->subnode_count;
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	891b      	ldrh	r3, [r3, #8]
 800f496:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node* const*)node)->subnodes;
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f4a0:	e005      	b.n	800f4ae <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	61fb      	str	r3, [r7, #28]
      i--;
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <snmp_mib_tree_resolve_exact+0x5a>
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	693a      	ldr	r2, [r7, #16]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d1f0      	bne.n	800f4a2 <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e01a      	b.n	800f500 <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 800f4ca:	7efb      	ldrb	r3, [r7, #27]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800f4d0:	7efa      	ldrb	r2, [r7, #27]
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d204      	bcs.n	800f4e2 <snmp_mib_tree_resolve_exact+0x7c>
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0d0      	beq.n	800f484 <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d008      	beq.n	800f4fe <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 800f4ec:	79fa      	ldrb	r2, [r7, #7]
 800f4ee:	7efb      	ldrb	r3, [r7, #27]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	701a      	strb	r2, [r3, #0]
    return (*node);
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	e000      	b.n	800f500 <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3724      	adds	r7, #36	@ 0x24
 800f504:	46bd      	mov	sp, r7
 800f506:	bc80      	pop	{r7}
 800f508:	4770      	bx	lr

0800f50a <snmp_mib_tree_resolve_next>:

const struct snmp_node*
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id* oidret)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b0be      	sub	sp, #248	@ 0xf8
 800f50e:	af00      	add	r7, sp, #0
 800f510:	60f8      	str	r0, [r7, #12]
 800f512:	60b9      	str	r1, [r7, #8]
 800f514:	603b      	str	r3, [r7, #0]
 800f516:	4613      	mov	r3, r2
 800f518:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	791b      	ldrb	r3, [r3, #4]
 800f51e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  const struct snmp_node* const* node;
  const struct snmp_tree_node* node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800f522:	2300      	movs	r3, #0
 800f524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800f532:	2300      	movs	r3, #0
 800f534:	e131      	b.n	800f79a <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node*)(const void*)mib->root_node;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	33f8      	adds	r3, #248	@ 0xf8
 800f542:	443b      	add	r3, r7
 800f544:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 800f548:	e050      	b.n	800f5ec <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 800f54a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	33f8      	adds	r3, #248	@ 0xf8
 800f552:	443b      	add	r3, r7
 800f554:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f558:	891b      	ldrh	r3, [r3, #8]
 800f55a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    node    = node_stack[nsi]->subnodes;
 800f55e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	33f8      	adds	r3, #248	@ 0xf8
 800f566:	443b      	add	r3, r7
 800f568:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    subnode_oid = *(oid + oid_offset);
 800f572:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	4413      	add	r3, r2
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f582:	e009      	b.n	800f598 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 800f584:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f588:	3304      	adds	r3, #4
 800f58a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f592:	3b01      	subs	r3, #1
 800f594:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d007      	beq.n	800f5b0 <snmp_mib_tree_resolve_next+0xa6>
 800f5a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d1e9      	bne.n	800f584 <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 800f5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d01e      	beq.n	800f5f6 <snmp_mib_tree_resolve_next+0xec>
 800f5b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d118      	bne.n	800f5f6 <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 800f5c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    node_stack[nsi] = (const struct snmp_tree_node*)(const void*)(*node);
 800f5ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	33f8      	adds	r3, #248	@ 0xf8
 800f5dc:	443b      	add	r3, r7
 800f5de:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 800f5e2:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  while (oid_offset < oid_len) {
 800f5ec:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f5f0:	79fb      	ldrb	r3, [r7, #7]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d3a9      	bcc.n	800f54a <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 800f5f6:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f5fa:	79fb      	ldrb	r3, [r7, #7]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d303      	bcc.n	800f608 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f606:	e0c2      	b.n	800f78e <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 800f608:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	4413      	add	r3, r2
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3301      	adds	r3, #1
 800f616:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  }

  while (nsi >= 0) {
 800f61a:	e0b8      	b.n	800f78e <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node* subnode = NULL;
 800f61c:	2300      	movs	r3, #0
 800f61e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 800f622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	33f8      	adds	r3, #248	@ 0xf8
 800f62a:	443b      	add	r3, r7
 800f62c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f630:	891b      	ldrh	r3, [r3, #8]
 800f632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    node           = node_stack[nsi]->subnodes;
 800f636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f63a:	009b      	lsls	r3, r3, #2
 800f63c:	33f8      	adds	r3, #248	@ 0xf8
 800f63e:	443b      	add	r3, r7
 800f640:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    while (i > 0) {
 800f64a:	e031      	b.n	800f6b0 <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 800f64c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f658:	429a      	cmp	r2, r3
 800f65a:	d105      	bne.n	800f668 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 800f65c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        break;
 800f666:	e027      	b.n	800f6b8 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 800f668:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f674:	429a      	cmp	r2, r3
 800f676:	d211      	bcs.n	800f69c <snmp_mib_tree_resolve_next+0x192>
 800f678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d008      	beq.n	800f692 <snmp_mib_tree_resolve_next+0x188>
 800f680:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	685a      	ldr	r2, [r3, #4]
 800f688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d204      	bcs.n	800f69c <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 800f692:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      }

      node++;
 800f69c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (i > 0) {
 800f6b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dcc9      	bgt.n	800f64c <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 800f6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d110      	bne.n	800f6e2 <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 800f6c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	33f8      	adds	r3, #248	@ 0xf8
 800f6c8:	443b      	add	r3, r7
 800f6ca:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      nsi--;
 800f6d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f6e0:	e055      	b.n	800f78e <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 800f6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d111      	bne.n	800f710 <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 800f6ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        node_stack[nsi] = (const struct snmp_tree_node*)(const void*)subnode;
 800f6f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	33f8      	adds	r3, #248	@ 0xf8
 800f6fe:	443b      	add	r3, r7
 800f700:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f704:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f70e:	e03e      	b.n	800f78e <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6819      	ldr	r1, [r3, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	791b      	ldrb	r3, [r3, #4]
 800f718:	461a      	mov	r2, r3
 800f71a:	6838      	ldr	r0, [r7, #0]
 800f71c:	f7ff fabe 	bl	800ec9c <snmp_oid_assign>
        i = 1;
 800f720:	2301      	movs	r3, #1
 800f722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f726:	e019      	b.n	800f75c <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 800f728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	33f8      	adds	r3, #248	@ 0xf8
 800f730:	443b      	add	r3, r7
 800f732:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	7812      	ldrb	r2, [r2, #0]
 800f73a:	4610      	mov	r0, r2
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	0083      	lsls	r3, r0, #2
 800f742:	440b      	add	r3, r1
 800f744:	605a      	str	r2, [r3, #4]
          oidret->len++;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	3301      	adds	r3, #1
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	701a      	strb	r2, [r3, #0]
          i++;
 800f752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f756:	3301      	adds	r3, #1
 800f758:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f75c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f760:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f764:	429a      	cmp	r2, r3
 800f766:	dddf      	ble.n	800f728 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	0083      	lsls	r3, r0, #2
 800f778:	440b      	add	r3, r1
 800f77a:	605a      	str	r2, [r3, #4]
        oidret->len++;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	b2da      	uxtb	r2, r3
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	701a      	strb	r2, [r3, #0]

        return subnode;
 800f788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f78c:	e005      	b.n	800f79a <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 800f78e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f792:	2b00      	cmp	r3, #0
 800f794:	f6bf af42 	bge.w	800f61c <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	37f8      	adds	r7, #248	@ 0xf8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
  const u32_t *start_oid, u8_t start_oid_len,
  u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 800f7a2:	b480      	push	{r7}
 800f7a4:	b085      	sub	sp, #20
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	60b9      	str	r1, [r7, #8]
 800f7ac:	603b      	str	r3, [r7, #0]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	79fa      	ldrb	r2, [r7, #7]
 800f7bc:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	683a      	ldr	r2, [r7, #0]
 800f7c2:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	7e3a      	ldrb	r2, [r7, #24]
 800f7ce:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	739a      	strb	r2, [r3, #14]
}
 800f7d6:	bf00      	nop
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bc80      	pop	{r7}
 800f7de:	4770      	bx	lr

0800f7e0 <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, const u8_t oid_len, void* reference)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	7b9b      	ldrb	r3, [r3, #14]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d034      	beq.n	800f862 <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	791b      	ldrb	r3, [r3, #4]
 800f800:	79f9      	ldrb	r1, [r7, #7]
 800f802:	68b8      	ldr	r0, [r7, #8]
 800f804:	f7ff faaa 	bl	800ed5c <snmp_oid_compare>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	dd29      	ble.n	800f862 <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	7b9b      	ldrb	r3, [r3, #14]
 800f812:	2b01      	cmp	r3, #1
 800f814:	d00a      	beq.n	800f82c <snmp_next_oid_check+0x4c>
        (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	689a      	ldr	r2, [r3, #8]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	7b1b      	ldrb	r3, [r3, #12]
 800f81e:	79f9      	ldrb	r1, [r7, #7]
 800f820:	68b8      	ldr	r0, [r7, #8]
 800f822:	f7ff fa9b 	bl	800ed5c <snmp_oid_compare>
 800f826:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f828:	2b00      	cmp	r3, #0
 800f82a:	da1a      	bge.n	800f862 <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	7b5b      	ldrb	r3, [r3, #13]
 800f830:	79fa      	ldrb	r2, [r7, #7]
 800f832:	429a      	cmp	r2, r3
 800f834:	d812      	bhi.n	800f85c <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6898      	ldr	r0, [r3, #8]
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	461a      	mov	r2, r3
 800f840:	68b9      	ldr	r1, [r7, #8]
 800f842:	f012 fff8 	bl	8022836 <memcpy>
          state->next_oid_len = oid_len;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	79fa      	ldrb	r2, [r7, #7]
 800f84a:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2200      	movs	r2, #0
 800f850:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	611a      	str	r2, [r3, #16]
          return 1;
 800f858:	2301      	movs	r3, #1
 800f85a:	e003      	b.n	800f864 <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2202      	movs	r2, #2
 800f860:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	607a      	str	r2, [r7, #4]
 800f876:	461a      	mov	r2, r3
 800f878:	460b      	mov	r3, r1
 800f87a:	72fb      	strb	r3, [r7, #11]
 800f87c:	4613      	mov	r3, r2
 800f87e:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 800f880:	7afa      	ldrb	r2, [r7, #11]
 800f882:	7abb      	ldrb	r3, [r7, #10]
 800f884:	429a      	cmp	r2, r3
 800f886:	d001      	beq.n	800f88c <snmp_oid_in_range+0x20>
    return 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	e024      	b.n	800f8d6 <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 800f88c:	2300      	movs	r3, #0
 800f88e:	75fb      	strb	r3, [r7, #23]
 800f890:	e01c      	b.n	800f8cc <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
 800f89e:	00db      	lsls	r3, r3, #3
 800f8a0:	6879      	ldr	r1, [r7, #4]
 800f8a2:	440b      	add	r3, r1
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d30b      	bcc.n	800f8c2 <snmp_oid_in_range+0x56>
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	00db      	lsls	r3, r3, #3
 800f8b8:	6879      	ldr	r1, [r7, #4]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d901      	bls.n	800f8c6 <snmp_oid_in_range+0x5a>
      return 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	e007      	b.n	800f8d6 <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 800f8c6:	7dfb      	ldrb	r3, [r7, #23]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	75fb      	strb	r3, [r7, #23]
 800f8cc:	7dfa      	ldrb	r2, [r7, #23]
 800f8ce:	7abb      	ldrb	r3, [r7, #10]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d3de      	bcc.n	800f892 <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 800f8d4:	2301      	movs	r3, #1
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	371c      	adds	r7, #28
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bc80      	pop	{r7}
 800f8de:	4770      	bx	lr

0800f8e0 <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	2b19      	cmp	r3, #25
 800f8f6:	f200 80df 	bhi.w	800fab8 <icmp_get_value+0x1d8>
 800f8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f900 <icmp_get_value+0x20>)
 800f8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f900:	0800f969 	.word	0x0800f969
 800f904:	0800f977 	.word	0x0800f977
 800f908:	0800f985 	.word	0x0800f985
 800f90c:	0800f993 	.word	0x0800f993
 800f910:	0800f9a1 	.word	0x0800f9a1
 800f914:	0800f9af 	.word	0x0800f9af
 800f918:	0800f9bd 	.word	0x0800f9bd
 800f91c:	0800f9cb 	.word	0x0800f9cb
 800f920:	0800f9d9 	.word	0x0800f9d9
 800f924:	0800f9e7 	.word	0x0800f9e7
 800f928:	0800f9f5 	.word	0x0800f9f5
 800f92c:	0800fa03 	.word	0x0800fa03
 800f930:	0800fa11 	.word	0x0800fa11
 800f934:	0800fa1f 	.word	0x0800fa1f
 800f938:	0800fa2d 	.word	0x0800fa2d
 800f93c:	0800fa3b 	.word	0x0800fa3b
 800f940:	0800fa49 	.word	0x0800fa49
 800f944:	0800fa57 	.word	0x0800fa57
 800f948:	0800fa61 	.word	0x0800fa61
 800f94c:	0800fa6b 	.word	0x0800fa6b
 800f950:	0800fa75 	.word	0x0800fa75
 800f954:	0800fa83 	.word	0x0800fa83
 800f958:	0800fa91 	.word	0x0800fa91
 800f95c:	0800fa9b 	.word	0x0800fa9b
 800f960:	0800faa5 	.word	0x0800faa5
 800f964:	0800faaf 	.word	0x0800faaf
  case 1: /* icmpInMsgs */
    *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 800f968:	4b57      	ldr	r3, [pc, #348]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f96a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f972:	2304      	movs	r3, #4
 800f974:	e0a2      	b.n	800fabc <icmp_get_value+0x1dc>
  case 2: /* icmpInErrors */
    *uint_ptr = STATS_GET(mib2.icmpinerrors);
 800f976:	4b54      	ldr	r3, [pc, #336]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f978:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f980:	2304      	movs	r3, #4
 800f982:	e09b      	b.n	800fabc <icmp_get_value+0x1dc>
  case 3: /* icmpInDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 800f984:	4b50      	ldr	r3, [pc, #320]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f986:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f98e:	2304      	movs	r3, #4
 800f990:	e094      	b.n	800fabc <icmp_get_value+0x1dc>
  case 4: /* icmpInTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 800f992:	4b4d      	ldr	r3, [pc, #308]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f994:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f99c:	2304      	movs	r3, #4
 800f99e:	e08d      	b.n	800fabc <icmp_get_value+0x1dc>
  case 5: /* icmpInParmProbs */
    *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 800f9a0:	4b49      	ldr	r3, [pc, #292]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9a2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9aa:	2304      	movs	r3, #4
 800f9ac:	e086      	b.n	800fabc <icmp_get_value+0x1dc>
  case 6: /* icmpInSrcQuenchs */
    *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 800f9ae:	4b46      	ldr	r3, [pc, #280]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9b0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9b8:	2304      	movs	r3, #4
 800f9ba:	e07f      	b.n	800fabc <icmp_get_value+0x1dc>
  case 7: /* icmpInRedirects */
    *uint_ptr = STATS_GET(mib2.icmpinredirects);
 800f9bc:	4b42      	ldr	r3, [pc, #264]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9be:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9c6:	2304      	movs	r3, #4
 800f9c8:	e078      	b.n	800fabc <icmp_get_value+0x1dc>
  case 8: /* icmpInEchos */
    *uint_ptr = STATS_GET(mib2.icmpinechos);
 800f9ca:	4b3f      	ldr	r3, [pc, #252]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9cc:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9d4:	2304      	movs	r3, #4
 800f9d6:	e071      	b.n	800fabc <icmp_get_value+0x1dc>
  case 9: /* icmpInEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 800f9d8:	4b3b      	ldr	r3, [pc, #236]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9da:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9e2:	2304      	movs	r3, #4
 800f9e4:	e06a      	b.n	800fabc <icmp_get_value+0x1dc>
  case 10: /* icmpInTimestamps */
    *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 800f9e6:	4b38      	ldr	r3, [pc, #224]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9e8:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9f0:	2304      	movs	r3, #4
 800f9f2:	e063      	b.n	800fabc <icmp_get_value+0x1dc>
  case 11: /* icmpInTimestampReps */
    *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 800f9f4:	4b34      	ldr	r3, [pc, #208]	@ (800fac8 <icmp_get_value+0x1e8>)
 800f9f6:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9fe:	2304      	movs	r3, #4
 800fa00:	e05c      	b.n	800fabc <icmp_get_value+0x1dc>
  case 12: /* icmpInAddrMasks */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 800fa02:	4b31      	ldr	r3, [pc, #196]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa04:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa0c:	2304      	movs	r3, #4
 800fa0e:	e055      	b.n	800fabc <icmp_get_value+0x1dc>
  case 13: /* icmpInAddrMaskReps */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 800fa10:	4b2d      	ldr	r3, [pc, #180]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa12:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa1a:	2304      	movs	r3, #4
 800fa1c:	e04e      	b.n	800fabc <icmp_get_value+0x1dc>
  case 14: /* icmpOutMsgs */
    *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 800fa1e:	4b2a      	ldr	r3, [pc, #168]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa20:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa28:	2304      	movs	r3, #4
 800fa2a:	e047      	b.n	800fabc <icmp_get_value+0x1dc>
  case 15: /* icmpOutErrors */
    *uint_ptr = STATS_GET(mib2.icmpouterrors);
 800fa2c:	4b26      	ldr	r3, [pc, #152]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa2e:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa36:	2304      	movs	r3, #4
 800fa38:	e040      	b.n	800fabc <icmp_get_value+0x1dc>
  case 16: /* icmpOutDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 800fa3a:	4b23      	ldr	r3, [pc, #140]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa3c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa44:	2304      	movs	r3, #4
 800fa46:	e039      	b.n	800fabc <icmp_get_value+0x1dc>
  case 17: /* icmpOutTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 800fa48:	4b1f      	ldr	r3, [pc, #124]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa4a:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa52:	2304      	movs	r3, #4
 800fa54:	e032      	b.n	800fabc <icmp_get_value+0x1dc>
  case 18: /* icmpOutParmProbs: not supported -> always 0 */
    *uint_ptr = 0;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa5c:	2304      	movs	r3, #4
 800fa5e:	e02d      	b.n	800fabc <icmp_get_value+0x1dc>
  case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
    *uint_ptr = 0;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa66:	2304      	movs	r3, #4
 800fa68:	e028      	b.n	800fabc <icmp_get_value+0x1dc>
  case 20: /* icmpOutRedirects: not supported -> always 0 */
    *uint_ptr = 0;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa70:	2304      	movs	r3, #4
 800fa72:	e023      	b.n	800fabc <icmp_get_value+0x1dc>
  case 21: /* icmpOutEchos */
    *uint_ptr = STATS_GET(mib2.icmpoutechos);
 800fa74:	4b14      	ldr	r3, [pc, #80]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa76:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa7e:	2304      	movs	r3, #4
 800fa80:	e01c      	b.n	800fabc <icmp_get_value+0x1dc>
  case 22: /* icmpOutEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 800fa82:	4b11      	ldr	r3, [pc, #68]	@ (800fac8 <icmp_get_value+0x1e8>)
 800fa84:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa8c:	2304      	movs	r3, #4
 800fa8e:	e015      	b.n	800fabc <icmp_get_value+0x1dc>
  case 23: /* icmpOutTimestamps: not supported -> always 0 */
    *uint_ptr = 0;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa96:	2304      	movs	r3, #4
 800fa98:	e010      	b.n	800fabc <icmp_get_value+0x1dc>
  case 24: /* icmpOutTimestampReps: not supported -> always 0 */
    *uint_ptr = 0;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faa0:	2304      	movs	r3, #4
 800faa2:	e00b      	b.n	800fabc <icmp_get_value+0x1dc>
  case 25: /* icmpOutAddrMasks: not supported -> always 0 */
    *uint_ptr = 0;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2200      	movs	r2, #0
 800faa8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faaa:	2304      	movs	r3, #4
 800faac:	e006      	b.n	800fabc <icmp_get_value+0x1dc>
  case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
    *uint_ptr = 0;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fab4:	2304      	movs	r3, #4
 800fab6:	e001      	b.n	800fabc <icmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    break;
 800fab8:	bf00      	nop
  }

  return 0;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bc80      	pop	{r7}
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	2000bbe4 	.word	0x2000bbe4

0800facc <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance* instance, void* value)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d115      	bne.n	800fb0c <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t*)value;
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	617b      	str	r3, [r7, #20]

    struct netif *netif = netif_list;
 800fae8:	4b0b      	ldr	r3, [pc, #44]	@ (800fb18 <interfaces_get_value+0x4c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800faee:	e005      	b.n	800fafc <interfaces_get_value+0x30>
      num_netifs++;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	3301      	adds	r3, #1
 800faf4:	617b      	str	r3, [r7, #20]
      netif = netif->next;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1f6      	bne.n	800faf0 <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800fb08:	2304      	movs	r3, #4
 800fb0a:	e000      	b.n	800fb0e <interfaces_get_value+0x42>
  }

  return 0;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	371c      	adds	r7, #28
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bc80      	pop	{r7}
 800fb16:	4770      	bx	lr
 800fb18:	2000bbd8 	.word	0x2000bbd8

0800fb1c <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, struct snmp_node_instance* cell_instance)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 800fb2c:	79f9      	ldrb	r1, [r7, #7]
 800fb2e:	2301      	movs	r3, #1
 800fb30:	4a14      	ldr	r2, [pc, #80]	@ (800fb84 <interfaces_Table_get_cell_instance+0x68>)
 800fb32:	68b8      	ldr	r0, [r7, #8]
 800fb34:	f7ff fe9a 	bl	800f86c <snmp_oid_in_range>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fb3e:	23f1      	movs	r3, #241	@ 0xf1
 800fb40:	e01b      	b.n	800fb7a <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  netif = netif_list;
 800fb48:	4b0f      	ldr	r3, [pc, #60]	@ (800fb88 <interfaces_Table_get_cell_instance+0x6c>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fb4e:	e010      	b.n	800fb72 <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 800fb50:	6978      	ldr	r0, [r7, #20]
 800fb52:	f7ff f967 	bl	800ee24 <netif_to_num>
 800fb56:	4603      	mov	r3, r0
 800fb58:	461a      	mov	r2, r3
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d105      	bne.n	800fb6c <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      return SNMP_ERR_NOERROR;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	e006      	b.n	800fb7a <interfaces_Table_get_cell_instance+0x5e>
    }
    netif = netif->next;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1eb      	bne.n	800fb50 <interfaces_Table_get_cell_instance+0x34>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fb78:	23f1      	movs	r3, #241	@ 0xf1
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3718      	adds	r7, #24
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	08030878 	.word	0x08030878
 800fb88:	2000bbd8 	.word	0x2000bbd8

0800fb8c <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t* column, struct snmp_obj_id* row_oid, struct snmp_node_instance* cell_instance)
{
 800fb8c:	b590      	push	{r4, r7, lr}
 800fb8e:	b08f      	sub	sp, #60	@ 0x3c
 800fb90:	af02      	add	r7, sp, #8
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	1d19      	adds	r1, r3, #4
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	781a      	ldrb	r2, [r3, #0]
 800fba0:	f107 0314 	add.w	r3, r7, #20
 800fba4:	f107 0018 	add.w	r0, r7, #24
 800fba8:	2401      	movs	r4, #1
 800fbaa:	9400      	str	r4, [sp, #0]
 800fbac:	f7ff fdf9 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800fbb0:	4b16      	ldr	r3, [pc, #88]	@ (800fc0c <interfaces_Table_get_next_cell_instance+0x80>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800fbb6:	e00f      	b.n	800fbd8 <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800fbb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbba:	f7ff f933 	bl	800ee24 <netif_to_num>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 800fbc2:	f107 0110 	add.w	r1, r7, #16
 800fbc6:	f107 0018 	add.w	r0, r7, #24
 800fbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f7ff fe07 	bl	800f7e0 <snmp_next_oid_check>

    netif = netif->next;
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800fbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1ec      	bne.n	800fbb8 <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fbde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10c      	bne.n	800fc00 <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800fbec:	4619      	mov	r1, r3
 800fbee:	68b8      	ldr	r0, [r7, #8]
 800fbf0:	f7ff f854 	bl	800ec9c <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 800fbf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    return SNMP_ERR_NOERROR;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e000      	b.n	800fc02 <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fc00:	23f1      	movs	r3, #241	@ 0xf1
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3734      	adds	r7, #52	@ 0x34
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd90      	pop	{r4, r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	2000bbd8 	.word	0x2000bbd8

0800fc10 <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance* instance, void* value)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif*)instance->reference.ptr;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc20:	613b      	str	r3, [r7, #16]
  u32_t* value_u32 = (u32_t*)value;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	60fb      	str	r3, [r7, #12]
  s32_t* value_s32 = (s32_t*)value;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	2b15      	cmp	r3, #21
 800fc32:	f200 8102 	bhi.w	800fe3a <interfaces_Table_get_value+0x22a>
 800fc36:	a201      	add	r2, pc, #4	@ (adr r2, 800fc3c <interfaces_Table_get_value+0x2c>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fc95 	.word	0x0800fc95
 800fc40:	0800fca9 	.word	0x0800fca9
 800fc44:	0800fcbd 	.word	0x0800fcbd
 800fc48:	0800fccf 	.word	0x0800fccf
 800fc4c:	0800fcdf 	.word	0x0800fcdf
 800fc50:	0800fced 	.word	0x0800fced
 800fc54:	0800fd01 	.word	0x0800fd01
 800fc58:	0800fd29 	.word	0x0800fd29
 800fc5c:	0800fd6d 	.word	0x0800fd6d
 800fc60:	0800fd7b 	.word	0x0800fd7b
 800fc64:	0800fd89 	.word	0x0800fd89
 800fc68:	0800fd97 	.word	0x0800fd97
 800fc6c:	0800fda5 	.word	0x0800fda5
 800fc70:	0800fdb3 	.word	0x0800fdb3
 800fc74:	0800fdc1 	.word	0x0800fdc1
 800fc78:	0800fdcf 	.word	0x0800fdcf
 800fc7c:	0800fddd 	.word	0x0800fddd
 800fc80:	0800fdeb 	.word	0x0800fdeb
 800fc84:	0800fdf9 	.word	0x0800fdf9
 800fc88:	0800fe07 	.word	0x0800fe07
 800fc8c:	0800fe15 	.word	0x0800fe15
 800fc90:	0800fe23 	.word	0x0800fe23
  {
  case 1: /* ifIndex */
    *value_s32 = netif_to_num(netif);
 800fc94:	6938      	ldr	r0, [r7, #16]
 800fc96:	f7ff f8c5 	bl	800ee24 <netif_to_num>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fca2:	2304      	movs	r3, #4
 800fca4:	82fb      	strh	r3, [r7, #22]
    break;
 800fca6:	e0ca      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 2: /* ifDescr */
    value_len = sizeof(netif->name);
 800fca8:	2302      	movs	r3, #2
 800fcaa:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, netif->name, value_len);
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	3334      	adds	r3, #52	@ 0x34
 800fcb0:	8afa      	ldrh	r2, [r7, #22]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	6838      	ldr	r0, [r7, #0]
 800fcb6:	f012 fdbe 	bl	8022836 <memcpy>
    break;
 800fcba:	e0c0      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 3: /* ifType */
    *value_s32 = netif->link_type;
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fcc8:	2304      	movs	r3, #4
 800fcca:	82fb      	strh	r3, [r7, #22]
    break;
 800fccc:	e0b7      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 4: /* ifMtu */
    *value_s32 = netif->mtu;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fcd8:	2304      	movs	r3, #4
 800fcda:	82fb      	strh	r3, [r7, #22]
    break;
 800fcdc:	e0af      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 5: /* ifSpeed */
    *value_u32 = netif->link_speed;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fce6:	2304      	movs	r3, #4
 800fce8:	82fb      	strh	r3, [r7, #22]
    break;
 800fcea:	e0a8      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 6: /* ifPhysAddress */
    value_len = sizeof(netif->hwaddr);
 800fcec:	2306      	movs	r3, #6
 800fcee:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, &netif->hwaddr, value_len);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	332d      	adds	r3, #45	@ 0x2d
 800fcf4:	8afa      	ldrh	r2, [r7, #22]
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	6838      	ldr	r0, [r7, #0]
 800fcfa:	f012 fd9c 	bl	8022836 <memcpy>
    break;
 800fcfe:	e09e      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 7: /* ifAdminStatus */
    if (netif_is_up(netif)) {
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd06:	f003 0301 	and.w	r3, r3, #1
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <interfaces_Table_get_value+0x10a>
      *value_s32 = iftable_ifOperStatus_up;
 800fd10:	2301      	movs	r3, #1
 800fd12:	461a      	mov	r2, r3
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	601a      	str	r2, [r3, #0]
 800fd18:	e003      	b.n	800fd22 <interfaces_Table_get_value+0x112>
    } else {
      *value_s32 = iftable_ifOperStatus_down;
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800fd22:	2304      	movs	r3, #4
 800fd24:	82fb      	strh	r3, [r7, #22]
    break;
 800fd26:	e08a      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 8: /* ifOperStatus */
    if (netif_is_up(netif)) {
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d012      	beq.n	800fd5e <interfaces_Table_get_value+0x14e>
      if (netif_is_link_up(netif)) {
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd3e:	089b      	lsrs	r3, r3, #2
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d004      	beq.n	800fd54 <interfaces_Table_get_value+0x144>
        *value_s32 = iftable_ifAdminStatus_up;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	e008      	b.n	800fd66 <interfaces_Table_get_value+0x156>
      } else {
        *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 800fd54:	2307      	movs	r3, #7
 800fd56:	461a      	mov	r2, r3
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	e003      	b.n	800fd66 <interfaces_Table_get_value+0x156>
      }
    } else {
      *value_s32 = iftable_ifAdminStatus_down;
 800fd5e:	2302      	movs	r3, #2
 800fd60:	461a      	mov	r2, r3
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800fd66:	2304      	movs	r3, #4
 800fd68:	82fb      	strh	r3, [r7, #22]
    break;
 800fd6a:	e068      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 9: /* ifLastChange */
    *value_u32 = netif->ts;
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd74:	2304      	movs	r3, #4
 800fd76:	82fb      	strh	r3, [r7, #22]
    break;
 800fd78:	e061      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 10: /* ifInOctets */
    *value_u32 = netif->mib2_counters.ifinoctets;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd82:	2304      	movs	r3, #4
 800fd84:	82fb      	strh	r3, [r7, #22]
    break;
 800fd86:	e05a      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 11: /* ifInUcastPkts */
    *value_u32 = netif->mib2_counters.ifinucastpkts;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd90:	2304      	movs	r3, #4
 800fd92:	82fb      	strh	r3, [r7, #22]
    break;
 800fd94:	e053      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 12: /* ifInNUcastPkts */
    *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd9e:	2304      	movs	r3, #4
 800fda0:	82fb      	strh	r3, [r7, #22]
    break;
 800fda2:	e04c      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 13: /* ifInDiscards */
    *value_u32 = netif->mib2_counters.ifindiscards;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdac:	2304      	movs	r3, #4
 800fdae:	82fb      	strh	r3, [r7, #22]
    break;
 800fdb0:	e045      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 14: /* ifInErrors */
    *value_u32 = netif->mib2_counters.ifinerrors;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdba:	2304      	movs	r3, #4
 800fdbc:	82fb      	strh	r3, [r7, #22]
    break;
 800fdbe:	e03e      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 15: /* ifInUnkownProtos */
    *value_u32 = netif->mib2_counters.ifinunknownprotos;
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdc8:	2304      	movs	r3, #4
 800fdca:	82fb      	strh	r3, [r7, #22]
    break;
 800fdcc:	e037      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 16: /* ifOutOctets */
    *value_u32 = netif->mib2_counters.ifoutoctets;
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdd6:	2304      	movs	r3, #4
 800fdd8:	82fb      	strh	r3, [r7, #22]
    break;
 800fdda:	e030      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 17: /* ifOutUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutucastpkts;
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fde4:	2304      	movs	r3, #4
 800fde6:	82fb      	strh	r3, [r7, #22]
    break;
 800fde8:	e029      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 18: /* ifOutNUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdf2:	2304      	movs	r3, #4
 800fdf4:	82fb      	strh	r3, [r7, #22]
    break;
 800fdf6:	e022      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 19: /* ifOutDiscarts */
    *value_u32 = netif->mib2_counters.ifoutdiscards;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe00:	2304      	movs	r3, #4
 800fe02:	82fb      	strh	r3, [r7, #22]
    break;
 800fe04:	e01b      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 20: /* ifOutErrors */
    *value_u32 = netif->mib2_counters.ifouterrors;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe0e:	2304      	movs	r3, #4
 800fe10:	82fb      	strh	r3, [r7, #22]
    break;
 800fe12:	e014      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  case 21: /* ifOutQLen */
    *value_u32 = iftable_ifOutQLen;
 800fe14:	2300      	movs	r3, #0
 800fe16:	461a      	mov	r2, r3
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe1c:	2304      	movs	r3, #4
 800fe1e:	82fb      	strh	r3, [r7, #22]
    break;
 800fe20:	e00d      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  /** @note returning zeroDotZero (0.0) no media specific MIB support */
  case 22: /* ifSpecific */
    value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800fe22:	4b0a      	ldr	r3, [pc, #40]	@ (800fe4c <interfaces_Table_get_value+0x23c>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 800fe2a:	4b08      	ldr	r3, [pc, #32]	@ (800fe4c <interfaces_Table_get_value+0x23c>)
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	8afa      	ldrh	r2, [r7, #22]
 800fe30:	4619      	mov	r1, r3
 800fe32:	6838      	ldr	r0, [r7, #0]
 800fe34:	f012 fcff 	bl	8022836 <memcpy>
    break;
 800fe38:	e001      	b.n	800fe3e <interfaces_Table_get_value+0x22e>
  default:
    return 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e001      	b.n	800fe42 <interfaces_Table_get_value+0x232>
  }

  return value_len;
 800fe3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	08030724 	.word	0x08030724

0800fe50 <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance* instance, void* value)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  s32_t* sint_ptr = (s32_t*)value;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	60fb      	str	r3, [r7, #12]
  u32_t* uint_ptr = (u32_t*)value;
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	2b16      	cmp	r3, #22
 800fe6c:	f200 80b6 	bhi.w	800ffdc <ip_get_value+0x18c>
 800fe70:	a201      	add	r2, pc, #4	@ (adr r2, 800fe78 <ip_get_value+0x28>)
 800fe72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe76:	bf00      	nop
 800fe78:	0800fed5 	.word	0x0800fed5
 800fe7c:	0800fedf 	.word	0x0800fedf
 800fe80:	0800fee9 	.word	0x0800fee9
 800fe84:	0800fef7 	.word	0x0800fef7
 800fe88:	0800ff05 	.word	0x0800ff05
 800fe8c:	0800ff13 	.word	0x0800ff13
 800fe90:	0800ff21 	.word	0x0800ff21
 800fe94:	0800ff2f 	.word	0x0800ff2f
 800fe98:	0800ff3d 	.word	0x0800ff3d
 800fe9c:	0800ff4b 	.word	0x0800ff4b
 800fea0:	0800ff59 	.word	0x0800ff59
 800fea4:	0800ff67 	.word	0x0800ff67
 800fea8:	0800ff75 	.word	0x0800ff75
 800feac:	0800ff7f 	.word	0x0800ff7f
 800feb0:	0800ff8d 	.word	0x0800ff8d
 800feb4:	0800ff9b 	.word	0x0800ff9b
 800feb8:	0800ffa9 	.word	0x0800ffa9
 800febc:	0800ffb7 	.word	0x0800ffb7
 800fec0:	0800ffc5 	.word	0x0800ffc5
 800fec4:	0800ffdd 	.word	0x0800ffdd
 800fec8:	0800ffdd 	.word	0x0800ffdd
 800fecc:	0800ffdd 	.word	0x0800ffdd
 800fed0:	0800ffd3 	.word	0x0800ffd3
#if IP_FORWARD
    /* forwarding */
    *sint_ptr = 1;
#else
    /* not-forwarding */
    *sint_ptr = 2;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2202      	movs	r2, #2
 800fed8:	601a      	str	r2, [r3, #0]
#endif
    return sizeof(*sint_ptr);
 800feda:	2304      	movs	r3, #4
 800fedc:	e080      	b.n	800ffe0 <ip_get_value+0x190>
  case 2: /* ipDefaultTTL */
    *sint_ptr = IP_DEFAULT_TTL;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	22ff      	movs	r2, #255	@ 0xff
 800fee2:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800fee4:	2304      	movs	r3, #4
 800fee6:	e07b      	b.n	800ffe0 <ip_get_value+0x190>
  case 3: /* ipInReceives */
    *uint_ptr = STATS_GET(mib2.ipinreceives);
 800fee8:	4b40      	ldr	r3, [pc, #256]	@ (800ffec <ip_get_value+0x19c>)
 800feea:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fef2:	2304      	movs	r3, #4
 800fef4:	e074      	b.n	800ffe0 <ip_get_value+0x190>
  case 4: /* ipInHdrErrors */
    *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800fef6:	4b3d      	ldr	r3, [pc, #244]	@ (800ffec <ip_get_value+0x19c>)
 800fef8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff00:	2304      	movs	r3, #4
 800ff02:	e06d      	b.n	800ffe0 <ip_get_value+0x190>
  case 5: /* ipInAddrErrors */
    *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 800ff04:	4b39      	ldr	r3, [pc, #228]	@ (800ffec <ip_get_value+0x19c>)
 800ff06:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff0e:	2304      	movs	r3, #4
 800ff10:	e066      	b.n	800ffe0 <ip_get_value+0x190>
  case 6: /* ipForwDatagrams */
    *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 800ff12:	4b36      	ldr	r3, [pc, #216]	@ (800ffec <ip_get_value+0x19c>)
 800ff14:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff1c:	2304      	movs	r3, #4
 800ff1e:	e05f      	b.n	800ffe0 <ip_get_value+0x190>
  case 7: /* ipInUnknownProtos */
    *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 800ff20:	4b32      	ldr	r3, [pc, #200]	@ (800ffec <ip_get_value+0x19c>)
 800ff22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff2a:	2304      	movs	r3, #4
 800ff2c:	e058      	b.n	800ffe0 <ip_get_value+0x190>
  case 8: /* ipInDiscards */
    *uint_ptr = STATS_GET(mib2.ipindiscards);
 800ff2e:	4b2f      	ldr	r3, [pc, #188]	@ (800ffec <ip_get_value+0x19c>)
 800ff30:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff38:	2304      	movs	r3, #4
 800ff3a:	e051      	b.n	800ffe0 <ip_get_value+0x190>
  case 9: /* ipInDelivers */
    *uint_ptr = STATS_GET(mib2.ipindelivers);
 800ff3c:	4b2b      	ldr	r3, [pc, #172]	@ (800ffec <ip_get_value+0x19c>)
 800ff3e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff46:	2304      	movs	r3, #4
 800ff48:	e04a      	b.n	800ffe0 <ip_get_value+0x190>
  case 10: /* ipOutRequests */
    *uint_ptr = STATS_GET(mib2.ipoutrequests);
 800ff4a:	4b28      	ldr	r3, [pc, #160]	@ (800ffec <ip_get_value+0x19c>)
 800ff4c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff54:	2304      	movs	r3, #4
 800ff56:	e043      	b.n	800ffe0 <ip_get_value+0x190>
  case 11: /* ipOutDiscards */
    *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 800ff58:	4b24      	ldr	r3, [pc, #144]	@ (800ffec <ip_get_value+0x19c>)
 800ff5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff62:	2304      	movs	r3, #4
 800ff64:	e03c      	b.n	800ffe0 <ip_get_value+0x190>
  case 12: /* ipOutNoRoutes */
    *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 800ff66:	4b21      	ldr	r3, [pc, #132]	@ (800ffec <ip_get_value+0x19c>)
 800ff68:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff70:	2304      	movs	r3, #4
 800ff72:	e035      	b.n	800ffe0 <ip_get_value+0x190>
  case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
    *sint_ptr = IP_REASS_MAXAGE;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2203      	movs	r2, #3
 800ff78:	601a      	str	r2, [r3, #0]
#else
    *sint_ptr = 0;
#endif
    return sizeof(*sint_ptr);
 800ff7a:	2304      	movs	r3, #4
 800ff7c:	e030      	b.n	800ffe0 <ip_get_value+0x190>
  case 14: /* ipReasmReqds */
    *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 800ff7e:	4b1b      	ldr	r3, [pc, #108]	@ (800ffec <ip_get_value+0x19c>)
 800ff80:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff88:	2304      	movs	r3, #4
 800ff8a:	e029      	b.n	800ffe0 <ip_get_value+0x190>
  case 15: /* ipReasmOKs */
    *uint_ptr = STATS_GET(mib2.ipreasmoks);
 800ff8c:	4b17      	ldr	r3, [pc, #92]	@ (800ffec <ip_get_value+0x19c>)
 800ff8e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff96:	2304      	movs	r3, #4
 800ff98:	e022      	b.n	800ffe0 <ip_get_value+0x190>
  case 16: /* ipReasmFails */
    *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800ff9a:	4b14      	ldr	r3, [pc, #80]	@ (800ffec <ip_get_value+0x19c>)
 800ff9c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffa4:	2304      	movs	r3, #4
 800ffa6:	e01b      	b.n	800ffe0 <ip_get_value+0x190>
  case 17: /* ipFragOKs */
    *uint_ptr = STATS_GET(mib2.ipfragoks);
 800ffa8:	4b10      	ldr	r3, [pc, #64]	@ (800ffec <ip_get_value+0x19c>)
 800ffaa:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffb2:	2304      	movs	r3, #4
 800ffb4:	e014      	b.n	800ffe0 <ip_get_value+0x190>
  case 18: /* ipFragFails */
    *uint_ptr = STATS_GET(mib2.ipfragfails);
 800ffb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ffec <ip_get_value+0x19c>)
 800ffb8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffc0:	2304      	movs	r3, #4
 800ffc2:	e00d      	b.n	800ffe0 <ip_get_value+0x190>
  case 19: /* ipFragCreates */
    *uint_ptr = STATS_GET(mib2.ipfragcreates);
 800ffc4:	4b09      	ldr	r3, [pc, #36]	@ (800ffec <ip_get_value+0x19c>)
 800ffc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffce:	2304      	movs	r3, #4
 800ffd0:	e006      	b.n	800ffe0 <ip_get_value+0x190>
  case 23: /* ipRoutingDiscards: not supported -> always 0 */
    *uint_ptr = 0;
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffd8:	2304      	movs	r3, #4
 800ffda:	e001      	b.n	800ffe0 <ip_get_value+0x190>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800ffdc:	bf00      	nop
  }

  return 0;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bc80      	pop	{r7}
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	2000bbe4 	.word	0x2000bbe4

0800fff0 <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	460b      	mov	r3, r1
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800fffe:	230a      	movs	r3, #10
 8010000:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t*)value;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d002      	beq.n	8010016 <ip_set_test+0x26>
 8010010:	2b02      	cmp	r3, #2
 8010012:	d007      	beq.n	8010024 <ip_set_test+0x34>
      ret = SNMP_ERR_NOERROR;
    }
    break;
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010014:	e010      	b.n	8010038 <ip_set_test+0x48>
    if (*sint_ptr == 2)
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b02      	cmp	r3, #2
 801001c:	d109      	bne.n	8010032 <ip_set_test+0x42>
      ret = SNMP_ERR_NOERROR;
 801001e:	2300      	movs	r3, #0
 8010020:	75fb      	strb	r3, [r7, #23]
    break;
 8010022:	e006      	b.n	8010032 <ip_set_test+0x42>
    if (*sint_ptr == IP_DEFAULT_TTL) {
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2bff      	cmp	r3, #255	@ 0xff
 801002a:	d104      	bne.n	8010036 <ip_set_test+0x46>
      ret = SNMP_ERR_NOERROR;
 801002c:	2300      	movs	r3, #0
 801002e:	75fb      	strb	r3, [r7, #23]
    break;
 8010030:	e001      	b.n	8010036 <ip_set_test+0x46>
    break;
 8010032:	bf00      	nop
 8010034:	e000      	b.n	8010038 <ip_set_test+0x48>
    break;
 8010036:	bf00      	nop
  }

  return ret;
 8010038:	7dfb      	ldrb	r3, [r7, #23]
}
 801003a:	4618      	mov	r0, r3
 801003c:	371c      	adds	r7, #28
 801003e:	46bd      	mov	sp, r7
 8010040:	bc80      	pop	{r7}
 8010042:	4770      	bx	lr

08010044 <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance* instance, u16_t len, void *value)
{
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	460b      	mov	r3, r1
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 8010052:	2300      	movs	r3, #0
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	bc80      	pop	{r7}
 801005c:	4770      	bx	lr
	...

08010060 <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
 801006c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3b01      	subs	r3, #1
 8010074:	2b04      	cmp	r3, #4
 8010076:	d82a      	bhi.n	80100ce <ip_AddrTable_get_cell_value_core+0x6e>
 8010078:	a201      	add	r2, pc, #4	@ (adr r2, 8010080 <ip_AddrTable_get_cell_value_core+0x20>)
 801007a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007e:	bf00      	nop
 8010080:	08010095 	.word	0x08010095
 8010084:	080100a1 	.word	0x080100a1
 8010088:	080100b1 	.word	0x080100b1
 801008c:	080100bd 	.word	0x080100bd
 8010090:	080100c5 	.word	0x080100c5
  case 1: /* ipAdEntAddr */
    value->u32 = netif_ip4_addr(netif)->addr;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	3304      	adds	r3, #4
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	601a      	str	r2, [r3, #0]
    break;
 801009e:	e018      	b.n	80100d2 <ip_AddrTable_get_cell_value_core+0x72>
  case 2: /* ipAdEntIfIndex */
    value->u32 = netif_to_num(netif);
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f7fe febf 	bl	800ee24 <netif_to_num>
 80100a6:	4603      	mov	r3, r0
 80100a8:	461a      	mov	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
    break;
 80100ae:	e010      	b.n	80100d2 <ip_AddrTable_get_cell_value_core+0x72>
  case 3: /* ipAdEntNetMask */
    value->u32 = netif_ip4_netmask(netif)->addr;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	3308      	adds	r3, #8
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
    break;
 80100ba:	e00a      	b.n	80100d2 <ip_AddrTable_get_cell_value_core+0x72>
  case 4: /* ipAdEntBcastAddr */
    /* lwIP oddity, there's no broadcast
       address in the netif we can rely on */
    value->u32 = IPADDR_BROADCAST & 1;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	601a      	str	r2, [r3, #0]
    break;
 80100c2:	e006      	b.n	80100d2 <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
    /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
     * but only if receiving one fragmented packet at a time.
     * The current solution is to calculate for 2 simultaneous packets...
     */
    value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS/2) *
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f640 22fa 	movw	r2, #2810	@ 0xafa
 80100ca:	601a      	str	r2, [r3, #0]
#else
    /** @todo returning MTU would be a bad thing and
        returning a wild guess like '576' isn't good either */
    value->u32 = 0;
#endif
    break;
 80100cc:	e001      	b.n	80100d2 <ip_AddrTable_get_cell_value_core+0x72>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 80100ce:	23f1      	movs	r3, #241	@ 0xf1
 80100d0:	e000      	b.n	80100d4 <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b086      	sub	sp, #24
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	603b      	str	r3, [r7, #0]
 80100e8:	4613      	mov	r3, r2
 80100ea:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 80100ec:	79f9      	ldrb	r1, [r7, #7]
 80100ee:	2304      	movs	r3, #4
 80100f0:	4a15      	ldr	r2, [pc, #84]	@ (8010148 <ip_AddrTable_get_cell_value+0x6c>)
 80100f2:	68b8      	ldr	r0, [r7, #8]
 80100f4:	f7ff fbba 	bl	800f86c <snmp_oid_in_range>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80100fe:	23f1      	movs	r3, #241	@ 0xf1
 8010100:	e01e      	b.n	8010140 <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 8010102:	f107 0310 	add.w	r3, r7, #16
 8010106:	4619      	mov	r1, r3
 8010108:	68b8      	ldr	r0, [r7, #8]
 801010a:	f7fe fc61 	bl	800e9d0 <snmp_oid_to_ip4>

  /* find netif with requested ip */
  netif = netif_list;
 801010e:	4b0f      	ldr	r3, [pc, #60]	@ (801014c <ip_AddrTable_get_cell_value+0x70>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 8010114:	e010      	b.n	8010138 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	3304      	adds	r3, #4
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d107      	bne.n	8010132 <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	683a      	ldr	r2, [r7, #0]
 8010126:	68f9      	ldr	r1, [r7, #12]
 8010128:	6978      	ldr	r0, [r7, #20]
 801012a:	f7ff ff99 	bl	8010060 <ip_AddrTable_get_cell_value_core>
 801012e:	4603      	mov	r3, r0
 8010130:	e006      	b.n	8010140 <ip_AddrTable_get_cell_value+0x64>
    }

    netif = netif->next;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1eb      	bne.n	8010116 <ip_AddrTable_get_cell_value+0x3a>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 801013e:	23f1      	movs	r3, #241	@ 0xf1
}
 8010140:	4618      	mov	r0, r3
 8010142:	3718      	adds	r7, #24
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	08030994 	.word	0x08030994
 801014c:	2000bbd8 	.word	0x2000bbd8

08010150 <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010150:	b590      	push	{r4, r7, lr}
 8010152:	b095      	sub	sp, #84	@ 0x54
 8010154:	af02      	add	r7, sp, #8
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
 801015c:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	1d19      	adds	r1, r3, #4
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	781a      	ldrb	r2, [r3, #0]
 8010166:	f107 0320 	add.w	r3, r7, #32
 801016a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801016e:	2404      	movs	r4, #4
 8010170:	9400      	str	r4, [sp, #0]
 8010172:	f7ff fb16 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 8010176:	4b19      	ldr	r3, [pc, #100]	@ (80101dc <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 801017c:	e012      	b.n	80101a4 <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 801017e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010180:	3304      	adds	r3, #4
 8010182:	f107 0210 	add.w	r2, r7, #16
 8010186:	4611      	mov	r1, r2
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe fca9 	bl	800eae0 <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 801018e:	f107 0110 	add.w	r1, r7, #16
 8010192:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010198:	2204      	movs	r2, #4
 801019a:	f7ff fb21 	bl	800f7e0 <snmp_next_oid_check>

    netif = netif->next;
 801019e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 80101a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1e9      	bne.n	801017e <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80101aa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10e      	bne.n	80101d0 <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80101b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80101b8:	4619      	mov	r1, r3
 80101ba:	68b8      	ldr	r0, [r7, #8]
 80101bc:	f7fe fd6e 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif*)state.reference, column, value, value_len);
 80101c0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	68f9      	ldr	r1, [r7, #12]
 80101c8:	f7ff ff4a 	bl	8010060 <ip_AddrTable_get_cell_value_core>
 80101cc:	4603      	mov	r3, r0
 80101ce:	e000      	b.n	80101d2 <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80101d0:	23f1      	movs	r3, #241	@ 0xf1
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	374c      	adds	r7, #76	@ 0x4c
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd90      	pop	{r4, r7, pc}
 80101da:	bf00      	nop
 80101dc:	2000bbd8 	.word	0x2000bbd8

080101e0 <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	607a      	str	r2, [r7, #4]
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	460b      	mov	r3, r1
 80101ee:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	2b0c      	cmp	r3, #12
 80101f8:	f200 8089 	bhi.w	801030e <ip_RouteTable_get_cell_value_core+0x12e>
 80101fc:	a201      	add	r2, pc, #4	@ (adr r2, 8010204 <ip_RouteTable_get_cell_value_core+0x24>)
 80101fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010202:	bf00      	nop
 8010204:	08010239 	.word	0x08010239
 8010208:	08010261 	.word	0x08010261
 801020c:	08010271 	.word	0x08010271
 8010210:	08010287 	.word	0x08010287
 8010214:	08010287 	.word	0x08010287
 8010218:	08010287 	.word	0x08010287
 801021c:	08010291 	.word	0x08010291
 8010220:	080102af 	.word	0x080102af
 8010224:	080102c5 	.word	0x080102c5
 8010228:	080102cd 	.word	0x080102cd
 801022c:	080102d5 	.word	0x080102d5
 8010230:	080102f1 	.word	0x080102f1
 8010234:	080102fb 	.word	0x080102fb
  case 1: /* ipRouteDest */
    if (default_route) {
 8010238:	7afb      	ldrb	r3, [r7, #11]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d004      	beq.n	8010248 <ip_RouteTable_get_cell_value_core+0x68>
       /* default rte has 0.0.0.0 dest */
      value->u32 = IP4_ADDR_ANY4->addr;
 801023e:	4b37      	ldr	r3, [pc, #220]	@ (801031c <ip_RouteTable_get_cell_value_core+0x13c>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	601a      	str	r2, [r3, #0]
      /* netifs have netaddress dest */
      ip4_addr_t tmp;
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
      value->u32 = tmp.addr;
    }
    break;
 8010246:	e064      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3304      	adds	r3, #4
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	3308      	adds	r3, #8
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4013      	ands	r3, r2
 8010256:	617b      	str	r3, [r7, #20]
      value->u32 = tmp.addr;
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	601a      	str	r2, [r3, #0]
    break;
 801025e:	e058      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 2: /* ipRouteIfIndex */
    value->u32 = netif_to_num(netif);
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f7fe fddf 	bl	800ee24 <netif_to_num>
 8010266:	4603      	mov	r3, r0
 8010268:	461a      	mov	r2, r3
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	601a      	str	r2, [r3, #0]
    break;
 801026e:	e050      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 3: /* ipRouteMetric1 */
    if (default_route) {
 8010270:	7afb      	ldrb	r3, [r7, #11]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <ip_RouteTable_get_cell_value_core+0x9e>
      value->s32 = 1; /* default */
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	2201      	movs	r2, #1
 801027a:	601a      	str	r2, [r3, #0]
    } else {
      value->s32 = 0; /* normal */
    }
    break;
 801027c:	e049      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
      value->s32 = 0; /* normal */
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	2200      	movs	r2, #0
 8010282:	601a      	str	r2, [r3, #0]
    break;
 8010284:	e045      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 4: /* ipRouteMetric2 */
  case 5: /* ipRouteMetric3 */
  case 6: /* ipRouteMetric4 */
    value->s32 = -1; /* none */
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	f04f 32ff 	mov.w	r2, #4294967295
 801028c:	601a      	str	r2, [r3, #0]
    break;
 801028e:	e040      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 7: /* ipRouteNextHop */
    if (default_route) {
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <ip_RouteTable_get_cell_value_core+0xc2>
      /* default rte: gateway */
      value->u32 = netif_ip4_gw(netif)->addr;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	330c      	adds	r3, #12
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes: netif ip_addr  */
      value->u32 = netif_ip4_addr(netif)->addr;
    }
    break;
 80102a0:	e037      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_addr(netif)->addr;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	3304      	adds	r3, #4
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	601a      	str	r2, [r3, #0]
    break;
 80102ac:	e031      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 8: /* ipRouteType */
    if (default_route) {
 80102ae:	7afb      	ldrb	r3, [r7, #11]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d003      	beq.n	80102bc <ip_RouteTable_get_cell_value_core+0xdc>
      /* default rte is indirect */
      value->u32 = 4; /* indirect */
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	2204      	movs	r2, #4
 80102b8:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes are direct */
      value->u32 = 3; /* direct */
    }
    break;
 80102ba:	e02a      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = 3; /* direct */
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	2203      	movs	r2, #3
 80102c0:	601a      	str	r2, [r3, #0]
    break;
 80102c2:	e026      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 9: /* ipRouteProto */
    /* locally defined routes */
    value->u32 = 2; /* local */
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	2202      	movs	r2, #2
 80102c8:	601a      	str	r2, [r3, #0]
    break;
 80102ca:	e022      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 10: /* ipRouteAge */
    /* @todo (sysuptime - timestamp last change) / 100 */
    value->u32 = 0;
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
    break;
 80102d2:	e01e      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 11: /* ipRouteMask */
    if (default_route) {
 80102d4:	7afb      	ldrb	r3, [r7, #11]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d004      	beq.n	80102e4 <ip_RouteTable_get_cell_value_core+0x104>
      /* default rte use 0.0.0.0 mask */
      value->u32 = IP4_ADDR_ANY4->addr;
 80102da:	4b10      	ldr	r3, [pc, #64]	@ (801031c <ip_RouteTable_get_cell_value_core+0x13c>)
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes use netmask */
      value->u32 = netif_ip4_netmask(netif)->addr;
    }
    break;
 80102e2:	e016      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_netmask(netif)->addr;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	3308      	adds	r3, #8
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	601a      	str	r2, [r3, #0]
    break;
 80102ee:	e010      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 12: /* ipRouteMetric5 */
    value->s32 = -1; /* none */
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	f04f 32ff 	mov.w	r2, #4294967295
 80102f6:	601a      	str	r2, [r3, #0]
    break;
 80102f8:	e00b      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  case 13: /* ipRouteInfo */
    value->const_ptr = snmp_zero_dot_zero.id;
 80102fa:	4b09      	ldr	r3, [pc, #36]	@ (8010320 <ip_RouteTable_get_cell_value_core+0x140>)
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	601a      	str	r2, [r3, #0]
    *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 8010302:	4b07      	ldr	r3, [pc, #28]	@ (8010320 <ip_RouteTable_get_cell_value_core+0x140>)
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	009a      	lsls	r2, r3, #2
 8010308:	6a3b      	ldr	r3, [r7, #32]
 801030a:	601a      	str	r2, [r3, #0]
    break;
 801030c:	e001      	b.n	8010312 <ip_RouteTable_get_cell_value_core+0x132>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 801030e:	23f1      	movs	r3, #241	@ 0xf1
 8010310:	e000      	b.n	8010314 <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 8010312:	2300      	movs	r3, #0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3718      	adds	r7, #24
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	0803165c 	.word	0x0803165c
 8010320:	08030724 	.word	0x08030724

08010324 <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08a      	sub	sp, #40	@ 0x28
 8010328:	af02      	add	r7, sp, #8
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	603b      	str	r3, [r7, #0]
 8010330:	4613      	mov	r3, r2
 8010332:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 8010334:	79f9      	ldrb	r1, [r7, #7]
 8010336:	2304      	movs	r3, #4
 8010338:	4a22      	ldr	r2, [pc, #136]	@ (80103c4 <ip_RouteTable_get_cell_value+0xa0>)
 801033a:	68b8      	ldr	r0, [r7, #8]
 801033c:	f7ff fa96 	bl	800f86c <snmp_oid_in_range>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010346:	23f1      	movs	r3, #241	@ 0xf1
 8010348:	e038      	b.n	80103bc <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 801034a:	f107 0318 	add.w	r3, r7, #24
 801034e:	4619      	mov	r1, r3
 8010350:	68b8      	ldr	r0, [r7, #8]
 8010352:	f7fe fb3d 	bl	800e9d0 <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10e      	bne.n	801037a <ip_RouteTable_get_cell_value+0x56>
 801035c:	4b1a      	ldr	r3, [pc, #104]	@ (80103c8 <ip_RouteTable_get_cell_value+0xa4>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00a      	beq.n	801037a <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 8010364:	4b18      	ldr	r3, [pc, #96]	@ (80103c8 <ip_RouteTable_get_cell_value+0xa4>)
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	2101      	movs	r1, #1
 8010372:	f7ff ff35 	bl	80101e0 <ip_RouteTable_get_cell_value_core>
 8010376:	4603      	mov	r3, r0
 8010378:	e020      	b.n	80103bc <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  netif = netif_list;
 801037a:	4b14      	ldr	r3, [pc, #80]	@ (80103cc <ip_RouteTable_get_cell_value+0xa8>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 8010380:	e018      	b.n	80103b4 <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	3304      	adds	r3, #4
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	3308      	adds	r3, #8
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4013      	ands	r3, r2
 8010390:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	429a      	cmp	r2, r3
 8010398:	d109      	bne.n	80103ae <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 801039a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	2100      	movs	r1, #0
 80103a4:	69f8      	ldr	r0, [r7, #28]
 80103a6:	f7ff ff1b 	bl	80101e0 <ip_RouteTable_get_cell_value_core>
 80103aa:	4603      	mov	r3, r0
 80103ac:	e006      	b.n	80103bc <ip_RouteTable_get_cell_value+0x98>
    }

    netif = netif->next;
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1e3      	bne.n	8010382 <ip_RouteTable_get_cell_value+0x5e>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80103ba:	23f1      	movs	r3, #241	@ 0xf1
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	080309b4 	.word	0x080309b4
 80103c8:	2000bbdc 	.word	0x2000bbdc
 80103cc:	2000bbd8 	.word	0x2000bbd8

080103d0 <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80103d0:	b590      	push	{r4, r7, lr}
 80103d2:	b097      	sub	sp, #92	@ 0x5c
 80103d4:	af02      	add	r7, sp, #8
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
 80103dc:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	1d19      	adds	r1, r3, #4
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	781a      	ldrb	r2, [r3, #0]
 80103e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80103ea:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80103ee:	2404      	movs	r4, #4
 80103f0:	9400      	str	r4, [sp, #0]
 80103f2:	f7ff f9d6 	bl	800f7a2 <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 80103f6:	4b30      	ldr	r3, [pc, #192]	@ (80104b8 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00e      	beq.n	801041c <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 80103fe:	f107 0318 	add.w	r3, r7, #24
 8010402:	4619      	mov	r1, r3
 8010404:	482d      	ldr	r0, [pc, #180]	@ (80104bc <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 8010406:	f7fe fb6b 	bl	800eae0 <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 801040a:	4b2b      	ldr	r3, [pc, #172]	@ (80104b8 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f107 0118 	add.w	r1, r7, #24
 8010412:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8010416:	2204      	movs	r2, #4
 8010418:	f7ff f9e2 	bl	800f7e0 <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 801041c:	4b28      	ldr	r3, [pc, #160]	@ (80104c0 <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 8010422:	e01d      	b.n	8010460 <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 8010424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010426:	3304      	adds	r3, #4
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801042c:	3308      	adds	r3, #8
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4013      	ands	r3, r2
 8010432:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00f      	beq.n	801045a <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 801043a:	f107 0218 	add.w	r2, r7, #24
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	4611      	mov	r1, r2
 8010444:	4618      	mov	r0, r3
 8010446:	f7fe fb4b 	bl	800eae0 <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 801044a:	f107 0118 	add.w	r1, r7, #24
 801044e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8010452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010454:	2204      	movs	r2, #4
 8010456:	f7ff f9c3 	bl	800f7e0 <snmp_next_oid_check>
    }

    netif = netif->next;
 801045a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 8010460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1de      	bne.n	8010424 <ip_RouteTable_get_next_cell_instance_and_value+0x54>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010466:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801046a:	2b00      	cmp	r3, #0
 801046c:	d11e      	bne.n	80104ac <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 801046e:	f107 0210 	add.w	r2, r7, #16
 8010472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010476:	4611      	mov	r1, r2
 8010478:	4618      	mov	r0, r3
 801047a:	f7fe faa9 	bl	800e9d0 <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801047e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010480:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8010484:	4619      	mov	r1, r3
 8010486:	68b8      	ldr	r0, [r7, #8]
 8010488:	f7fe fc08 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif*)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 801048c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bf0c      	ite	eq
 8010494:	2301      	moveq	r3, #1
 8010496:	2300      	movne	r3, #0
 8010498:	b2db      	uxtb	r3, r3
 801049a:	4619      	mov	r1, r3
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	f7ff fe9c 	bl	80101e0 <ip_RouteTable_get_cell_value_core>
 80104a8:	4603      	mov	r3, r0
 80104aa:	e000      	b.n	80104ae <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 80104ac:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3754      	adds	r7, #84	@ 0x54
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd90      	pop	{r4, r7, pc}
 80104b6:	bf00      	nop
 80104b8:	2000bbdc 	.word	0x2000bbdc
 80104bc:	0803165c 	.word	0x0803165c
 80104c0:	2000bbd8 	.word	0x2000bbd8

080104c4 <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(u8_t arp_table_index, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b088      	sub	sp, #32
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60b9      	str	r1, [r7, #8]
 80104cc:	607a      	str	r2, [r7, #4]
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	4603      	mov	r3, r0
 80104d2:	73fb      	strb	r3, [r7, #15]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 80104d4:	f107 0314 	add.w	r3, r7, #20
 80104d8:	f107 0218 	add.w	r2, r7, #24
 80104dc:	f107 011c 	add.w	r1, r7, #28
 80104e0:	7bf8      	ldrb	r0, [r7, #15]
 80104e2:	f00e fca9 	bl	801ee38 <etharp_get_entry>

  /* value */
  switch (*column) {
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	d824      	bhi.n	801053a <ip_NetToMediaTable_get_cell_value_core+0x76>
 80104f0:	a201      	add	r2, pc, #4	@ (adr r2, 80104f8 <ip_NetToMediaTable_get_cell_value_core+0x34>)
 80104f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f6:	bf00      	nop
 80104f8:	08010509 	.word	0x08010509
 80104fc:	0801051b 	.word	0x0801051b
 8010500:	08010529 	.word	0x08010529
 8010504:	08010533 	.word	0x08010533
  case 1: /* atIfIndex / ipNetToMediaIfIndex */
    value->u32 = netif_to_num(netif);
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe fc8a 	bl	800ee24 <netif_to_num>
 8010510:	4603      	mov	r3, r0
 8010512:	461a      	mov	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	601a      	str	r2, [r3, #0]
    break;
 8010518:	e011      	b.n	801053e <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
    value->ptr = ethaddr;
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	601a      	str	r2, [r3, #0]
    *value_len = sizeof(*ethaddr);
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2206      	movs	r2, #6
 8010524:	601a      	str	r2, [r3, #0]
    break;
 8010526:	e00a      	b.n	801053e <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 3: /* atNetAddress / ipNetToMediaNetAddress */
    value->u32 = ip->addr;
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	601a      	str	r2, [r3, #0]
    break;
 8010530:	e005      	b.n	801053e <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 4: /* ipNetToMediaType */
    value->u32 = 3; /* dynamic*/
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2203      	movs	r2, #3
 8010536:	601a      	str	r2, [r3, #0]
    break;
 8010538:	e001      	b.n	801053e <ip_NetToMediaTable_get_cell_value_core+0x7a>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 801053a:	23f1      	movs	r3, #241	@ 0xf1
 801053c:	e000      	b.n	8010540 <ip_NetToMediaTable_get_cell_value_core+0x7c>
  }

  return SNMP_ERR_NOERROR;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3720      	adds	r7, #32
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08a      	sub	sp, #40	@ 0x28
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	4613      	mov	r3, r2
 8010556:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  u8_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 8010558:	79f9      	ldrb	r1, [r7, #7]
 801055a:	2305      	movs	r3, #5
 801055c:	4a25      	ldr	r2, [pc, #148]	@ (80105f4 <ip_NetToMediaTable_get_cell_value+0xac>)
 801055e:	68b8      	ldr	r0, [r7, #8]
 8010560:	f7ff f984 	bl	800f86c <snmp_oid_in_range>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d101      	bne.n	801056e <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 801056a:	23f1      	movs	r3, #241	@ 0xf1
 801056c:	e03e      	b.n	80105ec <ip_NetToMediaTable_get_cell_value+0xa4>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	3304      	adds	r3, #4
 801057a:	f107 0220 	add.w	r2, r7, #32
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7fe fa25 	bl	800e9d0 <snmp_oid_to_ip4>

  /* find requested entry */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 8010586:	2300      	movs	r3, #0
 8010588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801058c:	e029      	b.n	80105e2 <ip_NetToMediaTable_get_cell_value+0x9a>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 801058e:	f107 0314 	add.w	r3, r7, #20
 8010592:	f107 0218 	add.w	r2, r7, #24
 8010596:	f107 011c 	add.w	r1, r7, #28
 801059a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 801059e:	f00e fc4b 	bl	801ee38 <etharp_get_entry>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d017      	beq.n	80105d8 <ip_NetToMediaTable_get_cell_value+0x90>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe fc3a 	bl	800ee24 <netif_to_num>
 80105b0:	4603      	mov	r3, r0
 80105b2:	461a      	mov	r2, r3
 80105b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d10d      	bne.n	80105d8 <ip_NetToMediaTable_get_cell_value+0x90>
 80105bc:	6a3a      	ldr	r2, [r7, #32]
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d108      	bne.n	80105d8 <ip_NetToMediaTable_get_cell_value+0x90>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 80105c6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80105ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105cc:	683a      	ldr	r2, [r7, #0]
 80105ce:	68f9      	ldr	r1, [r7, #12]
 80105d0:	f7ff ff78 	bl	80104c4 <ip_NetToMediaTable_get_cell_value_core>
 80105d4:	4603      	mov	r3, r0
 80105d6:	e009      	b.n	80105ec <ip_NetToMediaTable_get_cell_value+0xa4>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 80105d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105dc:	3301      	adds	r3, #1
 80105de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80105e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105e6:	2b09      	cmp	r3, #9
 80105e8:	d9d1      	bls.n	801058e <ip_NetToMediaTable_get_cell_value+0x46>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80105ea:	23f1      	movs	r3, #241	@ 0xf1
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3728      	adds	r7, #40	@ 0x28
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	080309d4 	.word	0x080309d4

080105f8 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b09b      	sub	sp, #108	@ 0x6c
 80105fc:	af02      	add	r7, sp, #8
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
 8010604:	603b      	str	r3, [r7, #0]
  u8_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	1d19      	adds	r1, r3, #4
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	781a      	ldrb	r2, [r3, #0]
 801060e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010612:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8010616:	2405      	movs	r4, #5
 8010618:	9400      	str	r4, [sp, #0]
 801061a:	f7ff f8c2 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 801061e:	2300      	movs	r3, #0
 8010620:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010624:	e028      	b.n	8010678 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x80>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 8010626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801062a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801062e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010632:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 8010636:	f00e fbff 	bl	801ee38 <etharp_get_entry>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d016      	beq.n	801066e <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 8010640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fbee 	bl	800ee24 <netif_to_num>
 8010648:	4603      	mov	r3, r0
 801064a:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 801064c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801064e:	f107 0314 	add.w	r3, r7, #20
 8010652:	3304      	adds	r3, #4
 8010654:	4619      	mov	r1, r3
 8010656:	4610      	mov	r0, r2
 8010658:	f7fe fa42 	bl	800eae0 <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void*, i));
 801065c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010660:	f107 0114 	add.w	r1, r7, #20
 8010664:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8010668:	2205      	movs	r2, #5
 801066a:	f7ff f8b9 	bl	800f7e0 <snmp_next_oid_check>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 801066e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010672:	3301      	adds	r3, #1
 8010674:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801067c:	2b09      	cmp	r3, #9
 801067e:	d9d2      	bls.n	8010626 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010680:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8010684:	2b00      	cmp	r3, #0
 8010686:	d10f      	bne.n	80106a8 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb0>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801068a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801068e:	4619      	mov	r1, r3
 8010690:	68b8      	ldr	r0, [r7, #8]
 8010692:	f7fe fb03 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(u8_t, state.reference), column, value, value_len);
 8010696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010698:	b2d8      	uxtb	r0, r3
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	68f9      	ldr	r1, [r7, #12]
 80106a0:	f7ff ff10 	bl	80104c4 <ip_NetToMediaTable_get_cell_value_core>
 80106a4:	4603      	mov	r3, r0
 80106a6:	e000      	b.n	80106aa <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb2>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80106a8:	23f1      	movs	r3, #241	@ 0xf1
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3764      	adds	r7, #100	@ 0x64
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd90      	pop	{r4, r7, pc}
	...

080106b4 <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	2b1f      	cmp	r3, #31
 80106ca:	f200 80df 	bhi.w	801088c <snmp_get_value+0x1d8>
 80106ce:	a201      	add	r2, pc, #4	@ (adr r2, 80106d4 <snmp_get_value+0x20>)
 80106d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d4:	08010755 	.word	0x08010755
 80106d8:	0801075f 	.word	0x0801075f
 80106dc:	08010769 	.word	0x08010769
 80106e0:	08010773 	.word	0x08010773
 80106e4:	0801077d 	.word	0x0801077d
 80106e8:	08010787 	.word	0x08010787
 80106ec:	0801088d 	.word	0x0801088d
 80106f0:	08010791 	.word	0x08010791
 80106f4:	0801079b 	.word	0x0801079b
 80106f8:	080107a5 	.word	0x080107a5
 80106fc:	080107af 	.word	0x080107af
 8010700:	080107b9 	.word	0x080107b9
 8010704:	080107c3 	.word	0x080107c3
 8010708:	080107cd 	.word	0x080107cd
 801070c:	080107d7 	.word	0x080107d7
 8010710:	080107e1 	.word	0x080107e1
 8010714:	080107eb 	.word	0x080107eb
 8010718:	080107f5 	.word	0x080107f5
 801071c:	080107ff 	.word	0x080107ff
 8010720:	08010809 	.word	0x08010809
 8010724:	08010813 	.word	0x08010813
 8010728:	0801081d 	.word	0x0801081d
 801072c:	0801088d 	.word	0x0801088d
 8010730:	08010827 	.word	0x08010827
 8010734:	08010831 	.word	0x08010831
 8010738:	0801083b 	.word	0x0801083b
 801073c:	08010845 	.word	0x08010845
 8010740:	0801084f 	.word	0x0801084f
 8010744:	08010859 	.word	0x08010859
 8010748:	08010863 	.word	0x08010863
 801074c:	0801087d 	.word	0x0801087d
 8010750:	08010885 	.word	0x08010885
  case 1: /* snmpInPkts */
    *uint_ptr = snmp_stats.inpkts;
 8010754:	4b51      	ldr	r3, [pc, #324]	@ (801089c <snmp_get_value+0x1e8>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	601a      	str	r2, [r3, #0]
    break;
 801075c:	e098      	b.n	8010890 <snmp_get_value+0x1dc>
  case 2: /* snmpOutPkts */
    *uint_ptr = snmp_stats.outpkts;
 801075e:	4b4f      	ldr	r3, [pc, #316]	@ (801089c <snmp_get_value+0x1e8>)
 8010760:	685a      	ldr	r2, [r3, #4]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	601a      	str	r2, [r3, #0]
    break;
 8010766:	e093      	b.n	8010890 <snmp_get_value+0x1dc>
  case 3: /* snmpInBadVersions */
    *uint_ptr = snmp_stats.inbadversions;
 8010768:	4b4c      	ldr	r3, [pc, #304]	@ (801089c <snmp_get_value+0x1e8>)
 801076a:	689a      	ldr	r2, [r3, #8]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	601a      	str	r2, [r3, #0]
    break;
 8010770:	e08e      	b.n	8010890 <snmp_get_value+0x1dc>
  case 4: /* snmpInBadCommunityNames */
    *uint_ptr = snmp_stats.inbadcommunitynames;
 8010772:	4b4a      	ldr	r3, [pc, #296]	@ (801089c <snmp_get_value+0x1e8>)
 8010774:	68da      	ldr	r2, [r3, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	601a      	str	r2, [r3, #0]
    break;
 801077a:	e089      	b.n	8010890 <snmp_get_value+0x1dc>
  case 5: /* snmpInBadCommunityUses */
    *uint_ptr = snmp_stats.inbadcommunityuses;
 801077c:	4b47      	ldr	r3, [pc, #284]	@ (801089c <snmp_get_value+0x1e8>)
 801077e:	691a      	ldr	r2, [r3, #16]
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	601a      	str	r2, [r3, #0]
    break;
 8010784:	e084      	b.n	8010890 <snmp_get_value+0x1dc>
  case 6: /* snmpInASNParseErrs */
    *uint_ptr = snmp_stats.inasnparseerrs;
 8010786:	4b45      	ldr	r3, [pc, #276]	@ (801089c <snmp_get_value+0x1e8>)
 8010788:	695a      	ldr	r2, [r3, #20]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	601a      	str	r2, [r3, #0]
    break;
 801078e:	e07f      	b.n	8010890 <snmp_get_value+0x1dc>
  case 8: /* snmpInTooBigs */
    *uint_ptr = snmp_stats.intoobigs;
 8010790:	4b42      	ldr	r3, [pc, #264]	@ (801089c <snmp_get_value+0x1e8>)
 8010792:	699a      	ldr	r2, [r3, #24]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	601a      	str	r2, [r3, #0]
    break;
 8010798:	e07a      	b.n	8010890 <snmp_get_value+0x1dc>
  case 9: /* snmpInNoSuchNames */
    *uint_ptr = snmp_stats.innosuchnames;
 801079a:	4b40      	ldr	r3, [pc, #256]	@ (801089c <snmp_get_value+0x1e8>)
 801079c:	69da      	ldr	r2, [r3, #28]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	601a      	str	r2, [r3, #0]
    break;
 80107a2:	e075      	b.n	8010890 <snmp_get_value+0x1dc>
  case 10: /* snmpInBadValues */
    *uint_ptr = snmp_stats.inbadvalues;
 80107a4:	4b3d      	ldr	r3, [pc, #244]	@ (801089c <snmp_get_value+0x1e8>)
 80107a6:	6a1a      	ldr	r2, [r3, #32]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	601a      	str	r2, [r3, #0]
    break;
 80107ac:	e070      	b.n	8010890 <snmp_get_value+0x1dc>
  case 11: /* snmpInReadOnlys */
    *uint_ptr = snmp_stats.inreadonlys;
 80107ae:	4b3b      	ldr	r3, [pc, #236]	@ (801089c <snmp_get_value+0x1e8>)
 80107b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	601a      	str	r2, [r3, #0]
    break;
 80107b6:	e06b      	b.n	8010890 <snmp_get_value+0x1dc>
  case 12: /* snmpInGenErrs */
    *uint_ptr = snmp_stats.ingenerrs;
 80107b8:	4b38      	ldr	r3, [pc, #224]	@ (801089c <snmp_get_value+0x1e8>)
 80107ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	601a      	str	r2, [r3, #0]
    break;
 80107c0:	e066      	b.n	8010890 <snmp_get_value+0x1dc>
  case 13: /* snmpInTotalReqVars */
    *uint_ptr = snmp_stats.intotalreqvars;
 80107c2:	4b36      	ldr	r3, [pc, #216]	@ (801089c <snmp_get_value+0x1e8>)
 80107c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	601a      	str	r2, [r3, #0]
    break;
 80107ca:	e061      	b.n	8010890 <snmp_get_value+0x1dc>
  case 14: /* snmpInTotalSetVars */
    *uint_ptr = snmp_stats.intotalsetvars;
 80107cc:	4b33      	ldr	r3, [pc, #204]	@ (801089c <snmp_get_value+0x1e8>)
 80107ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	601a      	str	r2, [r3, #0]
    break;
 80107d4:	e05c      	b.n	8010890 <snmp_get_value+0x1dc>
  case 15: /* snmpInGetRequests */
    *uint_ptr = snmp_stats.ingetrequests;
 80107d6:	4b31      	ldr	r3, [pc, #196]	@ (801089c <snmp_get_value+0x1e8>)
 80107d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	601a      	str	r2, [r3, #0]
    break;
 80107de:	e057      	b.n	8010890 <snmp_get_value+0x1dc>
  case 16: /* snmpInGetNexts */
    *uint_ptr = snmp_stats.ingetnexts;
 80107e0:	4b2e      	ldr	r3, [pc, #184]	@ (801089c <snmp_get_value+0x1e8>)
 80107e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	601a      	str	r2, [r3, #0]
    break;
 80107e8:	e052      	b.n	8010890 <snmp_get_value+0x1dc>
  case 17: /* snmpInSetRequests */
    *uint_ptr = snmp_stats.insetrequests;
 80107ea:	4b2c      	ldr	r3, [pc, #176]	@ (801089c <snmp_get_value+0x1e8>)
 80107ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	601a      	str	r2, [r3, #0]
    break;
 80107f2:	e04d      	b.n	8010890 <snmp_get_value+0x1dc>
  case 18: /* snmpInGetResponses */
    *uint_ptr = snmp_stats.ingetresponses;
 80107f4:	4b29      	ldr	r3, [pc, #164]	@ (801089c <snmp_get_value+0x1e8>)
 80107f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	601a      	str	r2, [r3, #0]
    break;
 80107fc:	e048      	b.n	8010890 <snmp_get_value+0x1dc>
  case 19: /* snmpInTraps */
    *uint_ptr = snmp_stats.intraps;
 80107fe:	4b27      	ldr	r3, [pc, #156]	@ (801089c <snmp_get_value+0x1e8>)
 8010800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	601a      	str	r2, [r3, #0]
    break;
 8010806:	e043      	b.n	8010890 <snmp_get_value+0x1dc>
  case 20: /* snmpOutTooBigs */
    *uint_ptr = snmp_stats.outtoobigs;
 8010808:	4b24      	ldr	r3, [pc, #144]	@ (801089c <snmp_get_value+0x1e8>)
 801080a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	601a      	str	r2, [r3, #0]
    break;
 8010810:	e03e      	b.n	8010890 <snmp_get_value+0x1dc>
  case 21: /* snmpOutNoSuchNames */
    *uint_ptr = snmp_stats.outnosuchnames;
 8010812:	4b22      	ldr	r3, [pc, #136]	@ (801089c <snmp_get_value+0x1e8>)
 8010814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	601a      	str	r2, [r3, #0]
    break;
 801081a:	e039      	b.n	8010890 <snmp_get_value+0x1dc>
  case 22: /* snmpOutBadValues */
    *uint_ptr = snmp_stats.outbadvalues;
 801081c:	4b1f      	ldr	r3, [pc, #124]	@ (801089c <snmp_get_value+0x1e8>)
 801081e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	601a      	str	r2, [r3, #0]
    break;
 8010824:	e034      	b.n	8010890 <snmp_get_value+0x1dc>
  case 24: /* snmpOutGenErrs */
    *uint_ptr = snmp_stats.outgenerrs;
 8010826:	4b1d      	ldr	r3, [pc, #116]	@ (801089c <snmp_get_value+0x1e8>)
 8010828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	601a      	str	r2, [r3, #0]
    break;
 801082e:	e02f      	b.n	8010890 <snmp_get_value+0x1dc>
  case 25: /* snmpOutGetRequests */
    *uint_ptr = snmp_stats.outgetrequests;
 8010830:	4b1a      	ldr	r3, [pc, #104]	@ (801089c <snmp_get_value+0x1e8>)
 8010832:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	601a      	str	r2, [r3, #0]
    break;
 8010838:	e02a      	b.n	8010890 <snmp_get_value+0x1dc>
  case 26: /* snmpOutGetNexts */
    *uint_ptr = snmp_stats.outgetnexts;
 801083a:	4b18      	ldr	r3, [pc, #96]	@ (801089c <snmp_get_value+0x1e8>)
 801083c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	601a      	str	r2, [r3, #0]
    break;
 8010842:	e025      	b.n	8010890 <snmp_get_value+0x1dc>
  case 27: /* snmpOutSetRequests */
    *uint_ptr = snmp_stats.outsetrequests;
 8010844:	4b15      	ldr	r3, [pc, #84]	@ (801089c <snmp_get_value+0x1e8>)
 8010846:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	601a      	str	r2, [r3, #0]
    break;
 801084c:	e020      	b.n	8010890 <snmp_get_value+0x1dc>
  case 28: /* snmpOutGetResponses */
    *uint_ptr = snmp_stats.outgetresponses;
 801084e:	4b13      	ldr	r3, [pc, #76]	@ (801089c <snmp_get_value+0x1e8>)
 8010850:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	601a      	str	r2, [r3, #0]
    break;
 8010856:	e01b      	b.n	8010890 <snmp_get_value+0x1dc>
  case 29: /* snmpOutTraps */
    *uint_ptr = snmp_stats.outtraps;
 8010858:	4b10      	ldr	r3, [pc, #64]	@ (801089c <snmp_get_value+0x1e8>)
 801085a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	601a      	str	r2, [r3, #0]
    break;
 8010860:	e016      	b.n	8010890 <snmp_get_value+0x1dc>
  case 30: /* snmpEnableAuthenTraps */
    if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 8010862:	f003 ff05 	bl	8014670 <snmp_get_auth_traps_enabled>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d103      	bne.n	8010874 <snmp_get_value+0x1c0>
      *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2202      	movs	r2, #2
 8010870:	601a      	str	r2, [r3, #0]
    } else {
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
    }
    break;
 8010872:	e00d      	b.n	8010890 <snmp_get_value+0x1dc>
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2201      	movs	r2, #1
 8010878:	601a      	str	r2, [r3, #0]
    break;
 801087a:	e009      	b.n	8010890 <snmp_get_value+0x1dc>
  case 31: /* snmpSilentDrops */
    *uint_ptr = 0; /* not supported */
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2200      	movs	r2, #0
 8010880:	601a      	str	r2, [r3, #0]
    break;
 8010882:	e005      	b.n	8010890 <snmp_get_value+0x1dc>
  case 32: /* snmpProxyDrops */
    *uint_ptr = 0; /* not supported */
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	601a      	str	r2, [r3, #0]
    break;
 801088a:	e001      	b.n	8010890 <snmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 801088c:	2300      	movs	r3, #0
 801088e:	e000      	b.n	8010892 <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 8010890:	2304      	movs	r3, #4
}
 8010892:	4618      	mov	r0, r3
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	20008544 	.word	0x20008544

080108a0 <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	460b      	mov	r3, r1
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 80108ae:	230a      	movs	r3, #10
 80108b0:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b1e      	cmp	r3, #30
 80108b8:	d10b      	bne.n	80108d2 <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d003      	beq.n	80108ce <snmp_set_test+0x2e>
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 80108ce:	2300      	movs	r3, #0
 80108d0:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80108d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	371c      	adds	r7, #28
 80108d8:	46bd      	mov	sp, r7
 80108da:	bc80      	pop	{r7}
 80108dc:	4770      	bx	lr

080108de <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b086      	sub	sp, #24
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	60f8      	str	r0, [r7, #12]
 80108e6:	460b      	mov	r3, r1
 80108e8:	607a      	str	r2, [r7, #4]
 80108ea:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b1e      	cmp	r3, #30
 80108f2:	d10c      	bne.n	801090e <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d103      	bne.n	8010908 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 8010900:	2000      	movs	r0, #0
 8010902:	f003 fea5 	bl	8014650 <snmp_set_auth_traps_enabled>
 8010906:	e002      	b.n	801090e <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 8010908:	2001      	movs	r0, #1
 801090a:	f003 fea1 	bl	8014650 <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3718      	adds	r7, #24
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
  const u8_t*  var = NULL;
 8010922:	2300      	movs	r3, #0
 8010924:	617b      	str	r3, [r7, #20]
  const s16_t* var_len;
  u16_t result;

  switch (node->oid) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3b01      	subs	r3, #1
 801092c:	2b06      	cmp	r3, #6
 801092e:	d84f      	bhi.n	80109d0 <system_get_value+0xb8>
 8010930:	a201      	add	r2, pc, #4	@ (adr r2, 8010938 <system_get_value+0x20>)
 8010932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010936:	bf00      	nop
 8010938:	08010955 	.word	0x08010955
 801093c:	08010963 	.word	0x08010963
 8010940:	08010987 	.word	0x08010987
 8010944:	0801099d 	.word	0x0801099d
 8010948:	080109ab 	.word	0x080109ab
 801094c:	080109b9 	.word	0x080109b9
 8010950:	080109c7 	.word	0x080109c7
  case 1: /* sysDescr */
    var     = sysdescr;
 8010954:	4b31      	ldr	r3, [pc, #196]	@ (8010a1c <system_get_value+0x104>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysdescr_len;
 801095a:	4b31      	ldr	r3, [pc, #196]	@ (8010a20 <system_get_value+0x108>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	613b      	str	r3, [r7, #16]
    break;
 8010960:	e038      	b.n	80109d4 <system_get_value+0xbc>
  case 2: /* sysObjectID */
    {
      const struct snmp_obj_id* dev_enterprise_oid = snmp_get_device_enterprise_oid();
 8010962:	f7fe f82b 	bl	800e9bc <snmp_get_device_enterprise_oid>
 8010966:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	1d19      	adds	r1, r3, #4
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	461a      	mov	r2, r3
 8010974:	6838      	ldr	r0, [r7, #0]
 8010976:	f011 ff5e 	bl	8022836 <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	b29b      	uxth	r3, r3
 8010982:	b21b      	sxth	r3, r3
 8010984:	e045      	b.n	8010a12 <system_get_value+0xfa>
    }
  case 3: /* sysUpTime */
    MIB2_COPY_SYSUPTIME_TO((u32_t*)value);
 8010986:	f7fb faf1 	bl	800bf6c <sys_now>
 801098a:	4603      	mov	r3, r0
 801098c:	4a25      	ldr	r2, [pc, #148]	@ (8010a24 <system_get_value+0x10c>)
 801098e:	fba2 2303 	umull	r2, r3, r2, r3
 8010992:	08da      	lsrs	r2, r3, #3
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	601a      	str	r2, [r3, #0]
    return sizeof(u32_t);
 8010998:	2304      	movs	r3, #4
 801099a:	e03a      	b.n	8010a12 <system_get_value+0xfa>
  case 4: /* sysContact */
    var     = syscontact;
 801099c:	4b22      	ldr	r3, [pc, #136]	@ (8010a28 <system_get_value+0x110>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syscontact_len;
 80109a2:	4b22      	ldr	r3, [pc, #136]	@ (8010a2c <system_get_value+0x114>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	613b      	str	r3, [r7, #16]
    break;
 80109a8:	e014      	b.n	80109d4 <system_get_value+0xbc>
  case 5: /* sysName */
    var     = sysname;
 80109aa:	4b21      	ldr	r3, [pc, #132]	@ (8010a30 <system_get_value+0x118>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysname_len;
 80109b0:	4b20      	ldr	r3, [pc, #128]	@ (8010a34 <system_get_value+0x11c>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	613b      	str	r3, [r7, #16]
    break;
 80109b6:	e00d      	b.n	80109d4 <system_get_value+0xbc>
  case 6: /* sysLocation */
    var     = syslocation;
 80109b8:	4b1f      	ldr	r3, [pc, #124]	@ (8010a38 <system_get_value+0x120>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syslocation_len;
 80109be:	4b1f      	ldr	r3, [pc, #124]	@ (8010a3c <system_get_value+0x124>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	613b      	str	r3, [r7, #16]
    break;
 80109c4:	e006      	b.n	80109d4 <system_get_value+0xbc>
  case 7: /* sysServices */
    *(s32_t*)value = SNMP_SYSSERVICES;
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	2248      	movs	r2, #72	@ 0x48
 80109ca:	601a      	str	r2, [r3, #0]
    return sizeof(s32_t);
 80109cc:	2304      	movs	r3, #4
 80109ce:	e020      	b.n	8010a12 <system_get_value+0xfa>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	e01e      	b.n	8010a12 <system_get_value+0xfa>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d106      	bne.n	80109e8 <system_get_value+0xd0>
 80109da:	4b19      	ldr	r3, [pc, #100]	@ (8010a40 <system_get_value+0x128>)
 80109dc:	f240 120f 	movw	r2, #271	@ 0x10f
 80109e0:	4918      	ldr	r1, [pc, #96]	@ (8010a44 <system_get_value+0x12c>)
 80109e2:	4819      	ldr	r0, [pc, #100]	@ (8010a48 <system_get_value+0x130>)
 80109e4:	f011 fc2c 	bl	8022240 <iprintf>
  if (var_len == NULL) {
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d105      	bne.n	80109fa <system_get_value+0xe2>
    result = (s16_t)strlen((const char*)var);
 80109ee:	6978      	ldr	r0, [r7, #20]
 80109f0:	f7ef fbf4 	bl	80001dc <strlen>
 80109f4:	4603      	mov	r3, r0
 80109f6:	81fb      	strh	r3, [r7, #14]
 80109f8:	e003      	b.n	8010a02 <system_get_value+0xea>
  } else {
    result = *var_len;
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a00:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 8010a02:	89fb      	ldrh	r3, [r7, #14]
 8010a04:	461a      	mov	r2, r3
 8010a06:	6979      	ldr	r1, [r7, #20]
 8010a08:	6838      	ldr	r0, [r7, #0]
 8010a0a:	f011 ff14 	bl	8022836 <memcpy>
  return result;
 8010a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3718      	adds	r7, #24
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	200000fc 	.word	0x200000fc
 8010a20:	200085b0 	.word	0x200085b0
 8010a24:	cccccccd 	.word	0xcccccccd
 8010a28:	20000100 	.word	0x20000100
 8010a2c:	200085b4 	.word	0x200085b4
 8010a30:	20000104 	.word	0x20000104
 8010a34:	200085c4 	.word	0x200085c4
 8010a38:	20000108 	.word	0x20000108
 8010a3c:	200085d4 	.word	0x200085d4
 8010a40:	08025b20 	.word	0x08025b20
 8010a44:	08025b64 	.word	0x08025b64
 8010a48:	08025b68 	.word	0x08025b68

08010a4c <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b089      	sub	sp, #36	@ 0x24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	460b      	mov	r3, r1
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8010a5a:	230a      	movs	r3, #10
 8010a5c:	77fb      	strb	r3, [r7, #31]
  const u16_t* var_bufsize  = NULL;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	61bb      	str	r3, [r7, #24]
  const u16_t* var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b06      	cmp	r3, #6
 8010a68:	d012      	beq.n	8010a90 <system_set_test+0x44>
 8010a6a:	2b06      	cmp	r3, #6
 8010a6c:	d816      	bhi.n	8010a9c <system_set_test+0x50>
 8010a6e:	2b04      	cmp	r3, #4
 8010a70:	d002      	beq.n	8010a78 <system_set_test+0x2c>
 8010a72:	2b05      	cmp	r3, #5
 8010a74:	d006      	beq.n	8010a84 <system_set_test+0x38>
 8010a76:	e011      	b.n	8010a9c <system_set_test+0x50>
  case 4: /* sysContact */
    var_bufsize  = &syscontact_bufsize;
 8010a78:	4b19      	ldr	r3, [pc, #100]	@ (8010ae0 <system_set_test+0x94>)
 8010a7a:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syscontact_wr_len;
 8010a7c:	4b19      	ldr	r3, [pc, #100]	@ (8010ae4 <system_set_test+0x98>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	617b      	str	r3, [r7, #20]
    break;
 8010a82:	e00d      	b.n	8010aa0 <system_set_test+0x54>
  case 5: /* sysName */
    var_bufsize  = &sysname_bufsize;
 8010a84:	4b18      	ldr	r3, [pc, #96]	@ (8010ae8 <system_set_test+0x9c>)
 8010a86:	61bb      	str	r3, [r7, #24]
    var_wr_len   = sysname_wr_len;
 8010a88:	4b18      	ldr	r3, [pc, #96]	@ (8010aec <system_set_test+0xa0>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	617b      	str	r3, [r7, #20]
    break;
 8010a8e:	e007      	b.n	8010aa0 <system_set_test+0x54>
  case 6: /* sysLocation */
    var_bufsize  = &syslocation_bufsize;
 8010a90:	4b17      	ldr	r3, [pc, #92]	@ (8010af0 <system_set_test+0xa4>)
 8010a92:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syslocation_wr_len;
 8010a94:	4b17      	ldr	r3, [pc, #92]	@ (8010af4 <system_set_test+0xa8>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	617b      	str	r3, [r7, #20]
    break;
 8010a9a:	e001      	b.n	8010aa0 <system_set_test+0x54>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_test(): unknown id: %"S32_F"\n", node->oid));
    return ret;
 8010a9c:	7ffb      	ldrb	r3, [r7, #31]
 8010a9e:	e019      	b.n	8010ad4 <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d012      	beq.n	8010ace <system_set_test+0x82>
    if (var_wr_len == NULL) {
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d107      	bne.n	8010abe <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	897a      	ldrh	r2, [r7, #10]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d20c      	bcs.n	8010ad2 <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	77fb      	strb	r3, [r7, #31]
 8010abc:	e009      	b.n	8010ad2 <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	897a      	ldrh	r2, [r7, #10]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d804      	bhi.n	8010ad2 <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	77fb      	strb	r3, [r7, #31]
 8010acc:	e001      	b.n	8010ad2 <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 8010ace:	2311      	movs	r3, #17
 8010ad0:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8010ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3724      	adds	r7, #36	@ 0x24
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bc80      	pop	{r7}
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	200085c0 	.word	0x200085c0
 8010ae4:	200085bc 	.word	0x200085bc
 8010ae8:	200085d0 	.word	0x200085d0
 8010aec:	200085cc 	.word	0x200085cc
 8010af0:	200085e0 	.word	0x200085e0
 8010af4:	200085dc 	.word	0x200085dc

08010af8 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	460b      	mov	r3, r1
 8010b02:	607a      	str	r2, [r7, #4]
 8010b04:	817b      	strh	r3, [r7, #10]
  u8_t*  var_wr = NULL;
 8010b06:	2300      	movs	r3, #0
 8010b08:	617b      	str	r3, [r7, #20]
  u16_t* var_wr_len;

  switch (node->oid) {
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b06      	cmp	r3, #6
 8010b10:	d014      	beq.n	8010b3c <system_set_value+0x44>
 8010b12:	2b06      	cmp	r3, #6
 8010b14:	d819      	bhi.n	8010b4a <system_set_value+0x52>
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	d002      	beq.n	8010b20 <system_set_value+0x28>
 8010b1a:	2b05      	cmp	r3, #5
 8010b1c:	d007      	beq.n	8010b2e <system_set_value+0x36>
 8010b1e:	e014      	b.n	8010b4a <system_set_value+0x52>
  case 4: /* sysContact */
    var_wr     = syscontact_wr;
 8010b20:	4b1b      	ldr	r3, [pc, #108]	@ (8010b90 <system_set_value+0x98>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	617b      	str	r3, [r7, #20]
    var_wr_len = syscontact_wr_len;
 8010b26:	4b1b      	ldr	r3, [pc, #108]	@ (8010b94 <system_set_value+0x9c>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	613b      	str	r3, [r7, #16]
    break;
 8010b2c:	e00f      	b.n	8010b4e <system_set_value+0x56>
  case 5: /* sysName */
    var_wr     = sysname_wr;
 8010b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010b98 <system_set_value+0xa0>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	617b      	str	r3, [r7, #20]
    var_wr_len = sysname_wr_len;
 8010b34:	4b19      	ldr	r3, [pc, #100]	@ (8010b9c <system_set_value+0xa4>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	613b      	str	r3, [r7, #16]
    break;
 8010b3a:	e008      	b.n	8010b4e <system_set_value+0x56>
  case 6: /* sysLocation */
    var_wr     = syslocation_wr;
 8010b3c:	4b18      	ldr	r3, [pc, #96]	@ (8010ba0 <system_set_value+0xa8>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	617b      	str	r3, [r7, #20]
    var_wr_len = syslocation_wr_len;
 8010b42:	4b18      	ldr	r3, [pc, #96]	@ (8010ba4 <system_set_value+0xac>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	613b      	str	r3, [r7, #16]
    break;
 8010b48:	e001      	b.n	8010b4e <system_set_value+0x56>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_value(): unknown id: %"S32_F"\n", node->oid));
    return SNMP_ERR_GENERROR;
 8010b4a:	2305      	movs	r3, #5
 8010b4c:	e01c      	b.n	8010b88 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <system_set_value+0x6a>
 8010b54:	4b14      	ldr	r3, [pc, #80]	@ (8010ba8 <system_set_value+0xb0>)
 8010b56:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8010b5a:	4914      	ldr	r1, [pc, #80]	@ (8010bac <system_set_value+0xb4>)
 8010b5c:	4814      	ldr	r0, [pc, #80]	@ (8010bb0 <system_set_value+0xb8>)
 8010b5e:	f011 fb6f 	bl	8022240 <iprintf>
  MEMCPY(var_wr, value, len);
 8010b62:	897b      	ldrh	r3, [r7, #10]
 8010b64:	461a      	mov	r2, r3
 8010b66:	6879      	ldr	r1, [r7, #4]
 8010b68:	6978      	ldr	r0, [r7, #20]
 8010b6a:	f011 fe64 	bl	8022836 <memcpy>
  
  if (var_wr_len == NULL) {
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d105      	bne.n	8010b80 <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 8010b74:	897b      	ldrh	r3, [r7, #10]
 8010b76:	697a      	ldr	r2, [r7, #20]
 8010b78:	4413      	add	r3, r2
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	e002      	b.n	8010b86 <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	897a      	ldrh	r2, [r7, #10]
 8010b84:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	200085b8 	.word	0x200085b8
 8010b94:	200085bc 	.word	0x200085bc
 8010b98:	200085c8 	.word	0x200085c8
 8010b9c:	200085cc 	.word	0x200085cc
 8010ba0:	200085d8 	.word	0x200085d8
 8010ba4:	200085dc 	.word	0x200085dc
 8010ba8:	08025b20 	.word	0x08025b20
 8010bac:	08025b64 	.word	0x08025b64
 8010bb0:	08025b68 	.word	0x08025b68

08010bb4 <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance* instance, void* value)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b086      	sub	sp, #24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	60fb      	str	r3, [r7, #12]
  s32_t *sint_ptr = (s32_t*)value;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	2b11      	cmp	r3, #17
 8010bd0:	f200 80a7 	bhi.w	8010d22 <tcp_get_value+0x16e>
 8010bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8010bdc <tcp_get_value+0x28>)
 8010bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bda:	bf00      	nop
 8010bdc:	08010c25 	.word	0x08010c25
 8010be0:	08010c2f 	.word	0x08010c2f
 8010be4:	08010c3b 	.word	0x08010c3b
 8010be8:	08010c47 	.word	0x08010c47
 8010bec:	08010c51 	.word	0x08010c51
 8010bf0:	08010c5f 	.word	0x08010c5f
 8010bf4:	08010c6d 	.word	0x08010c6d
 8010bf8:	08010c7b 	.word	0x08010c7b
 8010bfc:	08010c89 	.word	0x08010c89
 8010c00:	08010cc1 	.word	0x08010cc1
 8010c04:	08010ccf 	.word	0x08010ccf
 8010c08:	08010cdd 	.word	0x08010cdd
 8010c0c:	08010d23 	.word	0x08010d23
 8010c10:	08010ceb 	.word	0x08010ceb
 8010c14:	08010cf9 	.word	0x08010cf9
 8010c18:	08010d23 	.word	0x08010d23
 8010c1c:	08010d07 	.word	0x08010d07
 8010c20:	08010d15 	.word	0x08010d15
  case 1: /* tcpRtoAlgorithm, vanj(4) */
    *sint_ptr = 4;
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	2204      	movs	r2, #4
 8010c28:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c2a:	2304      	movs	r3, #4
 8010c2c:	e07b      	b.n	8010d26 <tcp_get_value+0x172>
  case 2: /* tcpRtoMin */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 1000;
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c34:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c36:	2304      	movs	r3, #4
 8010c38:	e075      	b.n	8010d26 <tcp_get_value+0x172>
  case 3: /* tcpRtoMax */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 60000;
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8010c40:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c42:	2304      	movs	r3, #4
 8010c44:	e06f      	b.n	8010d26 <tcp_get_value+0x172>
  case 4: /* tcpMaxConn */
    *sint_ptr = MEMP_NUM_TCP_PCB;
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	2205      	movs	r2, #5
 8010c4a:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c4c:	2304      	movs	r3, #4
 8010c4e:	e06a      	b.n	8010d26 <tcp_get_value+0x172>
  case 5: /* tcpActiveOpens */
    *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 8010c50:	4b37      	ldr	r3, [pc, #220]	@ (8010d30 <tcp_get_value+0x17c>)
 8010c52:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c5a:	2304      	movs	r3, #4
 8010c5c:	e063      	b.n	8010d26 <tcp_get_value+0x172>
  case 6: /* tcpPassiveOpens */
    *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 8010c5e:	4b34      	ldr	r3, [pc, #208]	@ (8010d30 <tcp_get_value+0x17c>)
 8010c60:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c68:	2304      	movs	r3, #4
 8010c6a:	e05c      	b.n	8010d26 <tcp_get_value+0x172>
  case 7: /* tcpAttemptFails */
    *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 8010c6c:	4b30      	ldr	r3, [pc, #192]	@ (8010d30 <tcp_get_value+0x17c>)
 8010c6e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c76:	2304      	movs	r3, #4
 8010c78:	e055      	b.n	8010d26 <tcp_get_value+0x172>
  case 8: /* tcpEstabResets */
    *uint_ptr = STATS_GET(mib2.tcpestabresets);
 8010c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8010d30 <tcp_get_value+0x17c>)
 8010c7c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c84:	2304      	movs	r3, #4
 8010c86:	e04e      	b.n	8010d26 <tcp_get_value+0x172>
  case 9: /* tcpCurrEstab */
    {
      u16_t tcpcurrestab = 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	82fb      	strh	r3, [r7, #22]
      struct tcp_pcb *pcb = tcp_active_pcbs;
 8010c8c:	4b29      	ldr	r3, [pc, #164]	@ (8010d34 <tcp_get_value+0x180>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 8010c92:	e00d      	b.n	8010cb0 <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	7d1b      	ldrb	r3, [r3, #20]
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d003      	beq.n	8010ca4 <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 8010ca0:	2b07      	cmp	r3, #7
 8010ca2:	d102      	bne.n	8010caa <tcp_get_value+0xf6>
          tcpcurrestab++;
 8010ca4:	8afb      	ldrh	r3, [r7, #22]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	82fb      	strh	r3, [r7, #22]
        }
        pcb = pcb->next;
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d1ee      	bne.n	8010c94 <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 8010cb6:	8afa      	ldrh	r2, [r7, #22]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 8010cbc:	2304      	movs	r3, #4
 8010cbe:	e032      	b.n	8010d26 <tcp_get_value+0x172>
  case 10: /* tcpInSegs */
    *uint_ptr = STATS_GET(mib2.tcpinsegs);
 8010cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8010d30 <tcp_get_value+0x17c>)
 8010cc2:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010cca:	2304      	movs	r3, #4
 8010ccc:	e02b      	b.n	8010d26 <tcp_get_value+0x172>
  case 11: /* tcpOutSegs */
    *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 8010cce:	4b18      	ldr	r3, [pc, #96]	@ (8010d30 <tcp_get_value+0x17c>)
 8010cd0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010cd8:	2304      	movs	r3, #4
 8010cda:	e024      	b.n	8010d26 <tcp_get_value+0x172>
  case 12: /* tcpRetransSegs */
    *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 8010cdc:	4b14      	ldr	r3, [pc, #80]	@ (8010d30 <tcp_get_value+0x17c>)
 8010cde:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010ce6:	2304      	movs	r3, #4
 8010ce8:	e01d      	b.n	8010d26 <tcp_get_value+0x172>
  case 14: /* tcpInErrs */
    *uint_ptr = STATS_GET(mib2.tcpinerrs);
 8010cea:	4b11      	ldr	r3, [pc, #68]	@ (8010d30 <tcp_get_value+0x17c>)
 8010cec:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010cf4:	2304      	movs	r3, #4
 8010cf6:	e016      	b.n	8010d26 <tcp_get_value+0x172>
  case 15: /* tcpOutRsts */
    *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 8010cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8010d30 <tcp_get_value+0x17c>)
 8010cfa:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010d02:	2304      	movs	r3, #4
 8010d04:	e00f      	b.n	8010d26 <tcp_get_value+0x172>
  case 17: /* tcpHCInSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010d06:	2208      	movs	r2, #8
 8010d08:	2100      	movs	r1, #0
 8010d0a:	6838      	ldr	r0, [r7, #0]
 8010d0c:	f011 fc6e 	bl	80225ec <memset>
    return 2*sizeof(u32_t);
 8010d10:	2308      	movs	r3, #8
 8010d12:	e008      	b.n	8010d26 <tcp_get_value+0x172>
  case 18: /* tcpHCOutSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010d14:	2208      	movs	r2, #8
 8010d16:	2100      	movs	r1, #0
 8010d18:	6838      	ldr	r0, [r7, #0]
 8010d1a:	f011 fc67 	bl	80225ec <memset>
    return 2*sizeof(u32_t);
 8010d1e:	2308      	movs	r3, #8
 8010d20:	e001      	b.n	8010d26 <tcp_get_value+0x172>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010d22:	bf00      	nop
  }

  return 0;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3718      	adds	r7, #24
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	2000bbe4 	.word	0x2000bbe4
 8010d34:	2000bd88 	.word	0x2000bd88

08010d38 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	2b04      	cmp	r3, #4
 8010d4e:	d83b      	bhi.n	8010dc8 <tcp_ConnTable_get_cell_value_core+0x90>
 8010d50:	a201      	add	r2, pc, #4	@ (adr r2, 8010d58 <tcp_ConnTable_get_cell_value_core+0x20>)
 8010d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d56:	bf00      	nop
 8010d58:	08010d6d 	.word	0x08010d6d
 8010d5c:	08010d7b 	.word	0x08010d7b
 8010d60:	08010d85 	.word	0x08010d85
 8010d64:	08010d91 	.word	0x08010d91
 8010d68:	08010dad 	.word	0x08010dad
  case 1: /* tcpConnState */
    value->u32 = pcb->state + 1;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	7d1b      	ldrb	r3, [r3, #20]
 8010d70:	3301      	adds	r3, #1
 8010d72:	461a      	mov	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	601a      	str	r2, [r3, #0]
    break;
 8010d78:	e02e      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 2: /* tcpConnLocalAddress */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	601a      	str	r2, [r3, #0]
    break;
 8010d82:	e029      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 3: /* tcpConnLocalPort */
    value->u32 = pcb->local_port;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	8adb      	ldrh	r3, [r3, #22]
 8010d88:	461a      	mov	r2, r3
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	601a      	str	r2, [r3, #0]
    break;
 8010d8e:	e023      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 4: /* tcpConnRemAddress */
    if (pcb->state == LISTEN) {
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	7d1b      	ldrb	r3, [r3, #20]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d104      	bne.n	8010da2 <tcp_ConnTable_get_cell_value_core+0x6a>
      value->u32 = IP4_ADDR_ANY4->addr;
 8010d98:	4b12      	ldr	r3, [pc, #72]	@ (8010de4 <tcp_ConnTable_get_cell_value_core+0xac>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
    }
    break;
 8010da0:	e01a      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	601a      	str	r2, [r3, #0]
    break;
 8010daa:	e015      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 5: /* tcpConnRemPort */
    if (pcb->state == LISTEN) {
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	7d1b      	ldrb	r3, [r3, #20]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d103      	bne.n	8010dbc <tcp_ConnTable_get_cell_value_core+0x84>
      value->u32 = 0;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = pcb->remote_port;
    }
    break;
 8010dba:	e00d      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = pcb->remote_port;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	8b1b      	ldrh	r3, [r3, #24]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	601a      	str	r2, [r3, #0]
    break;
 8010dc6:	e007      	b.n	8010dd8 <tcp_ConnTable_get_cell_value_core+0xa0>
  default:
    LWIP_ASSERT("invalid id", 0);
 8010dc8:	4b07      	ldr	r3, [pc, #28]	@ (8010de8 <tcp_ConnTable_get_cell_value_core+0xb0>)
 8010dca:	22bc      	movs	r2, #188	@ 0xbc
 8010dcc:	4907      	ldr	r1, [pc, #28]	@ (8010dec <tcp_ConnTable_get_cell_value_core+0xb4>)
 8010dce:	4808      	ldr	r0, [pc, #32]	@ (8010df0 <tcp_ConnTable_get_cell_value_core+0xb8>)
 8010dd0:	f011 fa36 	bl	8022240 <iprintf>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010dd4:	23f1      	movs	r3, #241	@ 0xf1
 8010dd6:	e000      	b.n	8010dda <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	0803165c 	.word	0x0803165c
 8010de8:	08025b90 	.word	0x08025b90
 8010dec:	08025bd0 	.word	0x08025bd0
 8010df0:	08025bdc 	.word	0x08025bdc

08010df4 <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b08a      	sub	sp, #40	@ 0x28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	603b      	str	r3, [r7, #0]
 8010e00:	4613      	mov	r3, r2
 8010e02:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 8010e04:	79f9      	ldrb	r1, [r7, #7]
 8010e06:	230a      	movs	r3, #10
 8010e08:	4a37      	ldr	r2, [pc, #220]	@ (8010ee8 <tcp_ConnTable_get_cell_value+0xf4>)
 8010e0a:	68b8      	ldr	r0, [r7, #8]
 8010e0c:	f7fe fd2e 	bl	800f86c <snmp_oid_in_range>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d101      	bne.n	8010e1a <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010e16:	23f1      	movs	r3, #241	@ 0xf1
 8010e18:	e061      	b.n	8010ede <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 8010e1a:	f107 0318 	add.w	r3, r7, #24
 8010e1e:	4619      	mov	r1, r3
 8010e20:	68b8      	ldr	r0, [r7, #8]
 8010e22:	f7fd fdd5 	bl	800e9d0 <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	3310      	adds	r3, #16
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	3314      	adds	r3, #20
 8010e32:	f107 0214 	add.w	r2, r7, #20
 8010e36:	4611      	mov	r1, r2
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fd fdc9 	bl	800e9d0 <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	3324      	adds	r3, #36	@ 0x24
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e46:	2300      	movs	r3, #0
 8010e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010e4c:	e042      	b.n	8010ed4 <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 8010e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e52:	4a26      	ldr	r2, [pc, #152]	@ (8010eec <tcp_ConnTable_get_cell_value+0xf8>)
 8010e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 8010e5c:	e032      	b.n	8010ec4 <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 8010e5e:	69ba      	ldr	r2, [r7, #24]
 8010e60:	6a3b      	ldr	r3, [r7, #32]
 8010e62:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d12a      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 8010e68:	6a3b      	ldr	r3, [r7, #32]
 8010e6a:	8adb      	ldrh	r3, [r3, #22]
 8010e6c:	8bfa      	ldrh	r2, [r7, #30]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d125      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010e72:	6a3b      	ldr	r3, [r7, #32]
 8010e74:	7d1b      	ldrb	r3, [r3, #20]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d10f      	bne.n	8010e9a <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 8010e7a:	697a      	ldr	r2, [r7, #20]
 8010e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ef0 <tcp_ConnTable_get_cell_value+0xfc>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d11c      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>
 8010e84:	8bbb      	ldrh	r3, [r7, #28]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d119      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e8c:	683a      	ldr	r2, [r7, #0]
 8010e8e:	68f9      	ldr	r1, [r7, #12]
 8010e90:	6a38      	ldr	r0, [r7, #32]
 8010e92:	f7ff ff51 	bl	8010d38 <tcp_ConnTable_get_cell_value_core>
 8010e96:	4603      	mov	r3, r0
 8010e98:	e021      	b.n	8010ede <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010e9a:	697a      	ldr	r2, [r7, #20]
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d10c      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010ea4:	6a3b      	ldr	r3, [r7, #32]
 8010ea6:	8b1b      	ldrh	r3, [r3, #24]
 8010ea8:	8bba      	ldrh	r2, [r7, #28]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d107      	bne.n	8010ebe <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 8010eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	68f9      	ldr	r1, [r7, #12]
 8010eb4:	6a38      	ldr	r0, [r7, #32]
 8010eb6:	f7ff ff3f 	bl	8010d38 <tcp_ConnTable_get_cell_value_core>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	e00f      	b.n	8010ede <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 8010ebe:	6a3b      	ldr	r3, [r7, #32]
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1c9      	bne.n	8010e5e <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ece:	3301      	adds	r3, #1
 8010ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	d9b8      	bls.n	8010e4e <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010edc:	23f1      	movs	r3, #241	@ 0xf1
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3728      	adds	r7, #40	@ 0x28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	08030fd0 	.word	0x08030fd0
 8010eec:	08031624 	.word	0x08031624
 8010ef0:	0803165c 	.word	0x0803165c

08010ef4 <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b0a3      	sub	sp, #140	@ 0x8c
 8010ef8:	af02      	add	r7, sp, #8
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	1d19      	adds	r1, r3, #4
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	781a      	ldrb	r2, [r3, #0]
 8010f0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010f0e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010f12:	240a      	movs	r4, #10
 8010f14:	9400      	str	r4, [sp, #0]
 8010f16:	f7fe fc44 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010f20:	e03e      	b.n	8010fa0 <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 8010f22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010f26:	4a2c      	ldr	r2, [pc, #176]	@ (8010fd8 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 8010f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010f30:	e02e      	b.n	8010f90 <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8010f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f34:	f107 0214 	add.w	r2, r7, #20
 8010f38:	4611      	mov	r1, r2
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fd fdd0 	bl	800eae0 <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 8010f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f42:	8adb      	ldrh	r3, [r3, #22]
 8010f44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f48:	7d1b      	ldrb	r3, [r3, #20]
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d109      	bne.n	8010f62 <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 8010f4e:	f107 0314 	add.w	r3, r7, #20
 8010f52:	3314      	adds	r3, #20
 8010f54:	4619      	mov	r1, r3
 8010f56:	4821      	ldr	r0, [pc, #132]	@ (8010fdc <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 8010f58:	f7fd fdc2 	bl	800eae0 <snmp_ip4_to_oid>
          test_oid[9] = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f60:	e00b      	b.n	8010f7a <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 8010f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f64:	1d1a      	adds	r2, r3, #4
 8010f66:	f107 0314 	add.w	r3, r7, #20
 8010f6a:	3314      	adds	r3, #20
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f7fd fdb6 	bl	800eae0 <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 8010f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f76:	8b1b      	ldrh	r3, [r3, #24]
 8010f78:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 8010f7a:	f107 0114 	add.w	r1, r7, #20
 8010f7e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f84:	220a      	movs	r2, #10
 8010f86:	f7fe fc2b 	bl	800f7e0 <snmp_next_oid_check>
      }

      pcb = pcb->next;
 8010f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1cd      	bne.n	8010f32 <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010f96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010fa0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d9bc      	bls.n	8010f22 <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010fa8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d10e      	bne.n	8010fce <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fb2:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	68b8      	ldr	r0, [r7, #8]
 8010fba:	f7fd fe6f 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb*)state.reference, column, value, value_len);
 8010fbe:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	68f9      	ldr	r1, [r7, #12]
 8010fc6:	f7ff feb7 	bl	8010d38 <tcp_ConnTable_get_cell_value_core>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	e000      	b.n	8010fd0 <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010fce:	23f1      	movs	r3, #241	@ 0xf1
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3784      	adds	r7, #132	@ 0x84
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd90      	pop	{r4, r7, pc}
 8010fd8:	08031624 	.word	0x08031624
 8010fdc:	0803165c 	.word	0x0803165c

08010fe0 <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t* column, struct tcp_pcb *pcb, union snmp_variant_value* value)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b07      	cmp	r3, #7
 8010ff2:	d002      	beq.n	8010ffa <tcp_ConnectionTable_get_cell_value_core+0x1a>
 8010ff4:	2b08      	cmp	r3, #8
 8010ff6:	d007      	beq.n	8011008 <tcp_ConnectionTable_get_cell_value_core+0x28>
 8010ff8:	e00a      	b.n	8011010 <tcp_ConnectionTable_get_cell_value_core+0x30>
  case 7: /* tcpConnectionState */
    value->u32 = pcb->state + 1;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	7d1b      	ldrb	r3, [r3, #20]
 8010ffe:	3301      	adds	r3, #1
 8011000:	461a      	mov	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
    break;
 8011006:	e005      	b.n	8011014 <tcp_ConnectionTable_get_cell_value_core+0x34>
  case 8: /* tcpConnectionProcess */
    value->u32 = 0; /* not supported */
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	601a      	str	r2, [r3, #0]
    break;
 801100e:	e001      	b.n	8011014 <tcp_ConnectionTable_get_cell_value_core+0x34>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8011010:	23f1      	movs	r3, #241	@ 0xf1
 8011012:	e000      	b.n	8011016 <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3714      	adds	r7, #20
 801101a:	46bd      	mov	sp, r7
 801101c:	bc80      	pop	{r7}
 801101e:	4770      	bx	lr

08011020 <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08c      	sub	sp, #48	@ 0x30
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	603b      	str	r3, [r7, #0]
 801102c:	4613      	mov	r3, r2
 801102e:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 8011030:	2300      	movs	r3, #0
 8011032:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8011036:	4a3e      	ldr	r2, [pc, #248]	@ (8011130 <tcp_ConnectionTable_get_cell_value+0x110>)
 8011038:	f107 0310 	add.w	r3, r7, #16
 801103c:	ca07      	ldmia	r2, {r0, r1, r2}
 801103e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 8011042:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	68ba      	ldr	r2, [r7, #8]
 801104a:	18d0      	adds	r0, r2, r3
 801104c:	79fa      	ldrb	r2, [r7, #7]
 801104e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	b2d9      	uxtb	r1, r3
 8011056:	f107 031e 	add.w	r3, r7, #30
 801105a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801105e:	f7fd fddd 	bl	800ec1c <snmp_oid_to_ip_port>
 8011062:	4603      	mov	r3, r0
 8011064:	461a      	mov	r2, r3
 8011066:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801106a:	4413      	add	r3, r2
 801106c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 8011070:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011078:	23f1      	movs	r3, #241	@ 0xf1
 801107a:	e055      	b.n	8011128 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 801107c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	18d0      	adds	r0, r2, r3
 8011086:	79fa      	ldrb	r2, [r7, #7]
 8011088:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801108c:	1ad3      	subs	r3, r2, r3
 801108e:	b2d9      	uxtb	r1, r3
 8011090:	f107 031c 	add.w	r3, r7, #28
 8011094:	f107 0220 	add.w	r2, r7, #32
 8011098:	f7fd fdc0 	bl	800ec1c <snmp_oid_to_ip_port>
 801109c:	4603      	mov	r3, r0
 801109e:	461a      	mov	r2, r3
 80110a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110a4:	4413      	add	r3, r2
 80110a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 80110aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 80110b2:	23f1      	movs	r3, #241	@ 0xf1
 80110b4:	e038      	b.n	8011128 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 80110b6:	2300      	movs	r3, #0
 80110b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110bc:	e02f      	b.n	801111e <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 80110be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	3330      	adds	r3, #48	@ 0x30
 80110c6:	443b      	add	r3, r7
 80110c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (pcb != NULL) {
 80110d0:	e01d      	b.n	801110e <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d115      	bne.n	8011108 <tcp_ConnectionTable_get_cell_value+0xe8>
         (local_port == pcb->local_port) &&
 80110dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110de:	8ada      	ldrh	r2, [r3, #22]
 80110e0:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d110      	bne.n	8011108 <tcp_ConnectionTable_get_cell_value+0xe8>
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80110e6:	6a3a      	ldr	r2, [r7, #32]
 80110e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ea:	685b      	ldr	r3, [r3, #4]
         (local_port == pcb->local_port) &&
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d10b      	bne.n	8011108 <tcp_ConnectionTable_get_cell_value+0xe8>
         (remote_port == pcb->remote_port)) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f2:	8b1a      	ldrh	r2, [r3, #24]
 80110f4:	8bbb      	ldrh	r3, [r7, #28]
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d106      	bne.n	8011108 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f7ff ff6e 	bl	8010fe0 <tcp_ConnectionTable_get_cell_value_core>
 8011104:	4603      	mov	r3, r0
 8011106:	e00f      	b.n	8011128 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 8011108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (pcb != NULL) {
 801110e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1de      	bne.n	80110d2 <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8011114:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011118:	3301      	adds	r3, #1
 801111a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801111e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011122:	2b02      	cmp	r3, #2
 8011124:	d9cb      	bls.n	80110be <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8011126:	23f1      	movs	r3, #241	@ 0xf1
}
 8011128:	4618      	mov	r0, r3
 801112a:	3730      	adds	r7, #48	@ 0x30
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	08025c04 	.word	0x08025c04

08011134 <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8011134:	b590      	push	{r4, r7, lr}
 8011136:	b0dd      	sub	sp, #372	@ 0x174
 8011138:	af02      	add	r7, sp, #8
 801113a:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 801113e:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 8011142:	6020      	str	r0, [r4, #0]
 8011144:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8011148:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 801114c:	6001      	str	r1, [r0, #0]
 801114e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8011152:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8011156:	600a      	str	r2, [r1, #0]
 8011158:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 801115c:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8011160:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8011162:	4a4c      	ldr	r2, [pc, #304]	@ (8011294 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 8011164:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011168:	ca07      	ldmia	r2, {r0, r1, r2}
 801116a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 801116e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011172:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	1d19      	adds	r1, r3, #4
 801117a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801117e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	781a      	ldrb	r2, [r3, #0]
 8011186:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801118a:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801118e:	2426      	movs	r4, #38	@ 0x26
 8011190:	9400      	str	r4, [sp, #0]
 8011192:	f7fe fb06 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8011196:	2300      	movs	r3, #0
 8011198:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 801119c:	e051      	b.n	8011242 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 801119e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80111a8:	443b      	add	r3, r7
 80111aa:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    while (pcb != NULL) {
 80111b4:	e03c      	b.n	8011230 <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 80111bc:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 80111c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111c4:	8ad9      	ldrh	r1, [r3, #22]
 80111c6:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80111ca:	f107 0210 	add.w	r2, r7, #16
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4413      	add	r3, r2
 80111d2:	461a      	mov	r2, r3
 80111d4:	f7fd fca5 	bl	800eb22 <snmp_ip_port_to_oid>
 80111d8:	4603      	mov	r3, r0
 80111da:	461a      	mov	r2, r3
 80111dc:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80111e0:	4413      	add	r3, r2
 80111e2:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 80111e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111ea:	1d18      	adds	r0, r3, #4
 80111ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111f0:	8b19      	ldrh	r1, [r3, #24]
 80111f2:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80111f6:	f107 0210 	add.w	r2, r7, #16
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4413      	add	r3, r2
 80111fe:	461a      	mov	r2, r3
 8011200:	f7fd fc8f 	bl	800eb22 <snmp_ip_port_to_oid>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 801120c:	4413      	add	r3, r2
 801120e:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 8011212:	f897 2162 	ldrb.w	r2, [r7, #354]	@ 0x162
 8011216:	f107 0110 	add.w	r1, r7, #16
 801121a:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801121e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011222:	f7fe fadd 	bl	800f7e0 <snmp_next_oid_check>

      pcb = pcb->next;
 8011226:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    while (pcb != NULL) {
 8011230:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1be      	bne.n	80111b6 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8011238:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801123c:	3301      	adds	r3, #1
 801123e:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 8011242:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011246:	2b02      	cmp	r3, #2
 8011248:	d9a9      	bls.n	801119e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 801124a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 801124e:	2b00      	cmp	r3, #0
 8011250:	d11a      	bne.n	8011288 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8011252:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8011256:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801125a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801125e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	f7fd fd1a 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb*)state.reference, value);
 8011268:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 801126c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011270:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8011274:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011278:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801127c:	6812      	ldr	r2, [r2, #0]
 801127e:	6818      	ldr	r0, [r3, #0]
 8011280:	f7ff feae 	bl	8010fe0 <tcp_ConnectionTable_get_cell_value_core>
 8011284:	4603      	mov	r3, r0
 8011286:	e000      	b.n	801128a <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011288:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 801128a:	4618      	mov	r0, r3
 801128c:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}
 8011294:	08025c04 	.word	0x08025c04

08011298 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b04      	cmp	r3, #4
 80112a8:	d105      	bne.n	80112b6 <tcp_ListenerTable_get_cell_value_core+0x1e>
  case 4: /* tcpListenerProcess */
    value->u32 = 0; /* not supported */
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2200      	movs	r2, #0
 80112ae:	601a      	str	r2, [r3, #0]
    break;
 80112b0:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 80112b2:	2300      	movs	r3, #0
 80112b4:	e000      	b.n	80112b8 <tcp_ListenerTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 80112b6:	23f1      	movs	r3, #241	@ 0xf1
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	bc80      	pop	{r7}
 80112c0:	4770      	bx	lr
	...

080112c4 <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b088      	sub	sp, #32
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	603b      	str	r3, [r7, #0]
 80112d0:	4613      	mov	r3, r2
 80112d2:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 80112d8:	7efb      	ldrb	r3, [r7, #27]
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	68ba      	ldr	r2, [r7, #8]
 80112de:	18d0      	adds	r0, r2, r3
 80112e0:	79fa      	ldrb	r2, [r7, #7]
 80112e2:	7efb      	ldrb	r3, [r7, #27]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	b2d9      	uxtb	r1, r3
 80112e8:	f107 0312 	add.w	r3, r7, #18
 80112ec:	f107 0214 	add.w	r2, r7, #20
 80112f0:	f7fd fc94 	bl	800ec1c <snmp_oid_to_ip_port>
 80112f4:	4603      	mov	r3, r0
 80112f6:	461a      	mov	r2, r3
 80112f8:	7efb      	ldrb	r3, [r7, #27]
 80112fa:	4413      	add	r3, r2
 80112fc:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 80112fe:	7efb      	ldrb	r3, [r7, #27]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011304:	23f1      	movs	r3, #241	@ 0xf1
 8011306:	e01a      	b.n	801133e <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 8011308:	4b0f      	ldr	r3, [pc, #60]	@ (8011348 <tcp_ListenerTable_get_cell_value+0x84>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 801130e:	e012      	b.n	8011336 <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8011310:	697a      	ldr	r2, [r7, #20]
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	429a      	cmp	r2, r3
 8011318:	d10a      	bne.n	8011330 <tcp_ListenerTable_get_cell_value+0x6c>
       (local_port == pcb->local_port)) {
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	8ada      	ldrh	r2, [r3, #22]
 801131e:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8011320:	429a      	cmp	r2, r3
 8011322:	d105      	bne.n	8011330 <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 8011324:	6839      	ldr	r1, [r7, #0]
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7ff ffb6 	bl	8011298 <tcp_ListenerTable_get_cell_value_core>
 801132c:	4603      	mov	r3, r0
 801132e:	e006      	b.n	801133e <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e9      	bne.n	8011310 <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 801133c:	23f1      	movs	r3, #241	@ 0xf1
}
 801133e:	4618      	mov	r0, r3
 8011340:	3720      	adds	r7, #32
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	2000bd84 	.word	0x2000bd84

0801134c <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b0b5      	sub	sp, #212	@ 0xd4
 8011350:	af02      	add	r7, sp, #8
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
 8011358:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	1d19      	adds	r1, r3, #4
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	781a      	ldrb	r2, [r3, #0]
 8011362:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8011366:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 801136a:	2413      	movs	r4, #19
 801136c:	9400      	str	r4, [sp, #0]
 801136e:	f7fe fa18 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 8011372:	4b23      	ldr	r3, [pc, #140]	@ (8011400 <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 801137a:	e025      	b.n	80113c8 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 801137c:	2300      	movs	r3, #0
 801137e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8011382:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8011386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801138a:	8ad9      	ldrh	r1, [r3, #22]
 801138c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8011390:	f107 0214 	add.w	r2, r7, #20
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4413      	add	r3, r2
 8011398:	461a      	mov	r2, r3
 801139a:	f7fd fbc2 	bl	800eb22 <snmp_ip_port_to_oid>
 801139e:	4603      	mov	r3, r0
 80113a0:	461a      	mov	r2, r3
 80113a2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80113a6:	4413      	add	r3, r2
 80113a8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 80113ac:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 80113b0:	f107 0114 	add.w	r1, r7, #20
 80113b4:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80113b8:	2300      	movs	r3, #0
 80113ba:	f7fe fa11 	bl	800f7e0 <snmp_next_oid_check>

    pcb = pcb->next;
 80113be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 80113c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1d5      	bne.n	801137c <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80113d0:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d10d      	bne.n	80113f4 <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80113d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80113dc:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 80113e0:	4619      	mov	r1, r3
 80113e2:	68b8      	ldr	r0, [r7, #8]
 80113e4:	f7fd fc5a 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff ff54 	bl	8011298 <tcp_ListenerTable_get_cell_value_core>
 80113f0:	4603      	mov	r3, r0
 80113f2:	e000      	b.n	80113f6 <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 80113f4:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	37cc      	adds	r7, #204	@ 0xcc
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd90      	pop	{r4, r7, pc}
 80113fe:	bf00      	nop
 8011400:	2000bd84 	.word	0x2000bd84

08011404 <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance* instance, void* value)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	60fb      	str	r3, [r7, #12]

  switch (instance->node->oid) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	3b01      	subs	r3, #1
 801141a:	2b08      	cmp	r3, #8
 801141c:	d83e      	bhi.n	801149c <udp_get_value+0x98>
 801141e:	a201      	add	r2, pc, #4	@ (adr r2, 8011424 <udp_get_value+0x20>)
 8011420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011424:	08011449 	.word	0x08011449
 8011428:	08011457 	.word	0x08011457
 801142c:	08011465 	.word	0x08011465
 8011430:	08011473 	.word	0x08011473
 8011434:	0801149d 	.word	0x0801149d
 8011438:	0801149d 	.word	0x0801149d
 801143c:	0801149d 	.word	0x0801149d
 8011440:	08011481 	.word	0x08011481
 8011444:	0801148f 	.word	0x0801148f
  case 1: /* udpInDatagrams */
    *uint_ptr = STATS_GET(mib2.udpindatagrams);
 8011448:	4b17      	ldr	r3, [pc, #92]	@ (80114a8 <udp_get_value+0xa4>)
 801144a:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8011452:	2304      	movs	r3, #4
 8011454:	e024      	b.n	80114a0 <udp_get_value+0x9c>
  case 2: /* udpNoPorts */
    *uint_ptr = STATS_GET(mib2.udpnoports);
 8011456:	4b14      	ldr	r3, [pc, #80]	@ (80114a8 <udp_get_value+0xa4>)
 8011458:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8011460:	2304      	movs	r3, #4
 8011462:	e01d      	b.n	80114a0 <udp_get_value+0x9c>
  case 3: /* udpInErrors */
    *uint_ptr = STATS_GET(mib2.udpinerrors);
 8011464:	4b10      	ldr	r3, [pc, #64]	@ (80114a8 <udp_get_value+0xa4>)
 8011466:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801146e:	2304      	movs	r3, #4
 8011470:	e016      	b.n	80114a0 <udp_get_value+0x9c>
  case 4: /* udpOutDatagrams */
    *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 8011472:	4b0d      	ldr	r3, [pc, #52]	@ (80114a8 <udp_get_value+0xa4>)
 8011474:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801147c:	2304      	movs	r3, #4
 801147e:	e00f      	b.n	80114a0 <udp_get_value+0x9c>
  case 8: /* udpHCInDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8011480:	2208      	movs	r2, #8
 8011482:	2100      	movs	r1, #0
 8011484:	6838      	ldr	r0, [r7, #0]
 8011486:	f011 f8b1 	bl	80225ec <memset>
    return 2*sizeof(u32_t);
 801148a:	2308      	movs	r3, #8
 801148c:	e008      	b.n	80114a0 <udp_get_value+0x9c>
  case 9: /* udpHCOutDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 801148e:	2208      	movs	r2, #8
 8011490:	2100      	movs	r1, #0
 8011492:	6838      	ldr	r0, [r7, #0]
 8011494:	f011 f8aa 	bl	80225ec <memset>
    return 2*sizeof(u32_t);
 8011498:	2308      	movs	r3, #8
 801149a:	e001      	b.n	80114a0 <udp_get_value+0x9c>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 801149c:	bf00      	nop
  }

  return 0;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	2000bbe4 	.word	0x2000bbe4

080114ac <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b08      	cmp	r3, #8
 80114bc:	d105      	bne.n	80114ca <udp_endpointTable_get_cell_value_core+0x1e>
  case 8: /* udpEndpointProcess */
    value->u32 = 0; /* not supported */
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	2200      	movs	r2, #0
 80114c2:	601a      	str	r2, [r3, #0]
    break;
 80114c4:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 80114c6:	2300      	movs	r3, #0
 80114c8:	e000      	b.n	80114cc <udp_endpointTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 80114ca:	23f1      	movs	r3, #241	@ 0xf1
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bc80      	pop	{r7}
 80114d4:	4770      	bx	lr
	...

080114d8 <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	@ 0x28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	4613      	mov	r3, r2
 80114e6:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 80114ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	18d0      	adds	r0, r2, r3
 80114f8:	79fa      	ldrb	r2, [r7, #7]
 80114fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	b2d9      	uxtb	r1, r3
 8011502:	f107 0316 	add.w	r3, r7, #22
 8011506:	f107 021c 	add.w	r2, r7, #28
 801150a:	f7fd fb87 	bl	800ec1c <snmp_oid_to_ip_port>
 801150e:	4603      	mov	r3, r0
 8011510:	461a      	mov	r2, r3
 8011512:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011516:	4413      	add	r3, r2
 8011518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 801151c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011524:	23f1      	movs	r3, #241	@ 0xf1
 8011526:	e052      	b.n	80115ce <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8011528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	18d0      	adds	r0, r2, r3
 8011532:	79fa      	ldrb	r2, [r7, #7]
 8011534:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011538:	1ad3      	subs	r3, r2, r3
 801153a:	b2d9      	uxtb	r1, r3
 801153c:	f107 0314 	add.w	r3, r7, #20
 8011540:	f107 0218 	add.w	r2, r7, #24
 8011544:	f7fd fb6a 	bl	800ec1c <snmp_oid_to_ip_port>
 8011548:	4603      	mov	r3, r0
 801154a:	461a      	mov	r2, r3
 801154c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011550:	4413      	add	r3, r2
 8011552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8011556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801155a:	2b00      	cmp	r3, #0
 801155c:	d101      	bne.n	8011562 <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 801155e:	23f1      	movs	r3, #241	@ 0xf1
 8011560:	e035      	b.n	80115ce <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx+1)) {
 8011562:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011566:	79fb      	ldrb	r3, [r7, #7]
 8011568:	429a      	cmp	r2, r3
 801156a:	d301      	bcc.n	8011570 <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 801156c:	23f1      	movs	r3, #241	@ 0xf1
 801156e:	e02e      	b.n	80115ce <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 8011570:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	4413      	add	r3, r2
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011580:	23f1      	movs	r3, #241	@ 0xf1
 8011582:	e024      	b.n	80115ce <udp_endpointTable_get_cell_value+0xf6>
  }
  
  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 8011584:	4b14      	ldr	r3, [pc, #80]	@ (80115d8 <udp_endpointTable_get_cell_value+0x100>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 801158a:	e01c      	b.n	80115c6 <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 801158c:	69fa      	ldr	r2, [r7, #28]
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d114      	bne.n	80115c0 <udp_endpointTable_get_cell_value+0xe8>
       (local_port == pcb->local_port) &&
 8011596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011598:	8a5a      	ldrh	r2, [r3, #18]
 801159a:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 801159c:	429a      	cmp	r2, r3
 801159e:	d10f      	bne.n	80115c0 <udp_endpointTable_get_cell_value+0xe8>
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80115a0:	69ba      	ldr	r2, [r7, #24]
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	685b      	ldr	r3, [r3, #4]
       (local_port == pcb->local_port) &&
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d10a      	bne.n	80115c0 <udp_endpointTable_get_cell_value+0xe8>
       (remote_port == pcb->remote_port)) {
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	8a9a      	ldrh	r2, [r3, #20]
 80115ae:	8abb      	ldrh	r3, [r7, #20]
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d105      	bne.n	80115c0 <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f7ff ff78 	bl	80114ac <udp_endpointTable_get_cell_value_core>
 80115bc:	4603      	mov	r3, r0
 80115be:	e006      	b.n	80115ce <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 80115c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1df      	bne.n	801158c <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80115cc:	23f1      	movs	r3, #241	@ 0xf1
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3728      	adds	r7, #40	@ 0x28
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	2000bdd8 	.word	0x2000bdd8

080115dc <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_endpointTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80115dc:	b590      	push	{r4, r7, lr}
 80115de:	b0dd      	sub	sp, #372	@ 0x174
 80115e0:	af02      	add	r7, sp, #8
 80115e2:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 80115e6:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 80115ea:	6020      	str	r0, [r4, #0]
 80115ec:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80115f0:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 80115f4:	6001      	str	r1, [r0, #0]
 80115f6:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 80115fa:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 80115fe:	600a      	str	r2, [r1, #0]
 8011600:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8011604:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8011608:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 801160a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801160e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	1d19      	adds	r1, r3, #4
 8011616:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801161a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	781a      	ldrb	r2, [r3, #0]
 8011622:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011626:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801162a:	2427      	movs	r4, #39	@ 0x27
 801162c:	9400      	str	r4, [sp, #0]
 801162e:	f7fe f8b8 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 8011632:	4b3b      	ldr	r3, [pc, #236]	@ (8011720 <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 801163a:	e049      	b.n	80116d0 <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8011642:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8011646:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801164a:	8a59      	ldrh	r1, [r3, #18]
 801164c:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011650:	f107 0214 	add.w	r2, r7, #20
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	461a      	mov	r2, r3
 801165a:	f7fd fa62 	bl	800eb22 <snmp_ip_port_to_oid>
 801165e:	4603      	mov	r3, r0
 8011660:	461a      	mov	r2, r3
 8011662:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011666:	4413      	add	r3, r2
 8011668:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 801166c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011670:	1d18      	adds	r0, r3, #4
 8011672:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011676:	8a99      	ldrh	r1, [r3, #20]
 8011678:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801167c:	f107 0214 	add.w	r2, r7, #20
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	4413      	add	r3, r2
 8011684:	461a      	mov	r2, r3
 8011686:	f7fd fa4c 	bl	800eb22 <snmp_ip_port_to_oid>
 801168a:	4603      	mov	r3, r0
 801168c:	461a      	mov	r2, r3
 801168e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011692:	4413      	add	r3, r2
 8011694:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */    
 8011698:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 801169c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80116a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80116a4:	2100      	movs	r1, #0
 80116a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 80116aa:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80116ae:	3301      	adds	r3, #1
 80116b0:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    
    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 80116b4:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 80116b8:	f107 0114 	add.w	r1, r7, #20
 80116bc:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80116c0:	2300      	movs	r3, #0
 80116c2:	f7fe f88d 	bl	800f7e0 <snmp_next_oid_check>
    
    pcb = pcb->next;
 80116c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 80116d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d1b1      	bne.n	801163c <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80116d8:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d118      	bne.n	8011712 <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80116e0:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 80116e4:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80116e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80116ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	f7fd fad3 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 80116f6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80116fa:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 80116fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011702:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011706:	6811      	ldr	r1, [r2, #0]
 8011708:	6818      	ldr	r0, [r3, #0]
 801170a:	f7ff fecf 	bl	80114ac <udp_endpointTable_get_cell_value_core>
 801170e:	4603      	mov	r3, r0
 8011710:	e000      	b.n	8011714 <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011712:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011714:	4618      	mov	r0, r3
 8011716:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	2000bdd8 	.word	0x2000bdd8

08011724 <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t 
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b01      	cmp	r3, #1
 8011738:	d002      	beq.n	8011740 <udp_Table_get_cell_value_core+0x1c>
 801173a:	2b02      	cmp	r3, #2
 801173c:	d005      	beq.n	801174a <udp_Table_get_cell_value_core+0x26>
 801173e:	e00a      	b.n	8011756 <udp_Table_get_cell_value_core+0x32>
  case 1: /* udpLocalAddress */
    /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	601a      	str	r2, [r3, #0]
    break;
 8011748:	e007      	b.n	801175a <udp_Table_get_cell_value_core+0x36>
  case 2: /* udpLocalPort */
    /* set reference to PCB local port and return a generic node that copies u16_t values */
    value->u32 = pcb->local_port;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	8a5b      	ldrh	r3, [r3, #18]
 801174e:	461a      	mov	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	601a      	str	r2, [r3, #0]
    break;
 8011754:	e001      	b.n	801175a <udp_Table_get_cell_value_core+0x36>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8011756:	23f1      	movs	r3, #241	@ 0xf1
 8011758:	e000      	b.n	801175c <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	bc80      	pop	{r7}
 8011764:	4770      	bx	lr
	...

08011768 <udp_Table_get_cell_value>:

static snmp_err_t 
udp_Table_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b088      	sub	sp, #32
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	603b      	str	r3, [r7, #0]
 8011774:	4613      	mov	r3, r2
 8011776:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 8011778:	79f9      	ldrb	r1, [r7, #7]
 801177a:	2305      	movs	r3, #5
 801177c:	4a19      	ldr	r2, [pc, #100]	@ (80117e4 <udp_Table_get_cell_value+0x7c>)
 801177e:	68b8      	ldr	r0, [r7, #8]
 8011780:	f7fe f874 	bl	800f86c <snmp_oid_in_range>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d101      	bne.n	801178e <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 801178a:	23f1      	movs	r3, #241	@ 0xf1
 801178c:	e026      	b.n	80117dc <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 801178e:	f107 0314 	add.w	r3, r7, #20
 8011792:	4619      	mov	r1, r3
 8011794:	68b8      	ldr	r0, [r7, #8]
 8011796:	f7fd f91b 	bl	800e9d0 <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	3310      	adds	r3, #16
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 80117a2:	4b11      	ldr	r3, [pc, #68]	@ (80117e8 <udp_Table_get_cell_value+0x80>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80117a8:	e014      	b.n	80117d4 <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 80117aa:	697a      	ldr	r2, [r7, #20]
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d10c      	bne.n	80117ce <udp_Table_get_cell_value+0x66>
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	8a5b      	ldrh	r3, [r3, #18]
 80117b8:	8b7a      	ldrh	r2, [r7, #26]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d107      	bne.n	80117ce <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 80117be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c0:	683a      	ldr	r2, [r7, #0]
 80117c2:	68f9      	ldr	r1, [r7, #12]
 80117c4:	69f8      	ldr	r0, [r7, #28]
 80117c6:	f7ff ffad 	bl	8011724 <udp_Table_get_cell_value_core>
 80117ca:	4603      	mov	r3, r0
 80117cc:	e006      	b.n	80117dc <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1e7      	bne.n	80117aa <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80117da:	23f1      	movs	r3, #241	@ 0xf1
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3720      	adds	r7, #32
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	0803131c 	.word	0x0803131c
 80117e8:	2000bdd8 	.word	0x2000bdd8

080117ec <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_Table_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80117ec:	b590      	push	{r4, r7, lr}
 80117ee:	b097      	sub	sp, #92	@ 0x5c
 80117f0:	af02      	add	r7, sp, #8
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
 80117f8:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	1d19      	adds	r1, r3, #4
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	781a      	ldrb	r2, [r3, #0]
 8011802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011806:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 801180a:	2405      	movs	r4, #5
 801180c:	9400      	str	r4, [sp, #0]
 801180e:	f7fd ffc8 	bl	800f7a2 <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 8011812:	4b1a      	ldr	r3, [pc, #104]	@ (801187c <udp_Table_get_next_cell_instance_and_value+0x90>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011818:	e014      	b.n	8011844 <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 801181a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801181c:	f107 0210 	add.w	r2, r7, #16
 8011820:	4611      	mov	r1, r2
 8011822:	4618      	mov	r0, r3
 8011824:	f7fd f95c 	bl	800eae0 <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 8011828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801182a:	8a5b      	ldrh	r3, [r3, #18]
 801182c:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 801182e:	f107 0110 	add.w	r1, r7, #16
 8011832:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011838:	2205      	movs	r2, #5
 801183a:	f7fd ffd1 	bl	800f7e0 <snmp_next_oid_check>
    }
    
    pcb = pcb->next;
 801183e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1e7      	bne.n	801181a <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 801184a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10e      	bne.n	8011870 <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8011852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011854:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8011858:	4619      	mov	r1, r3
 801185a:	68b8      	ldr	r0, [r7, #8]
 801185c:	f7fd fa1e 	bl	800ec9c <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb*)state.reference, column, value, value_len);
 8011860:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	68f9      	ldr	r1, [r7, #12]
 8011868:	f7ff ff5c 	bl	8011724 <udp_Table_get_cell_value_core>
 801186c:	4603      	mov	r3, r0
 801186e:	e000      	b.n	8011872 <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011870:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011872:	4618      	mov	r0, r3
 8011874:	3754      	adds	r7, #84	@ 0x54
 8011876:	46bd      	mov	sp, r7
 8011878:	bd90      	pop	{r4, r7, pc}
 801187a:	bf00      	nop
 801187c:	2000bdd8 	.word	0x2000bdd8

08011880 <snmp_set_community_trap>:
 *
 * @param community is a pointer to new trap community string
 */
void
snmp_set_community_trap(const char * const community)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("community string is too long!", strlen(community) <= SNMP_MAX_COMMUNITY_STR_LEN);
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ee fca7 	bl	80001dc <strlen>
 801188e:	4603      	mov	r3, r0
 8011890:	2b08      	cmp	r3, #8
 8011892:	d905      	bls.n	80118a0 <snmp_set_community_trap+0x20>
 8011894:	4b06      	ldr	r3, [pc, #24]	@ (80118b0 <snmp_set_community_trap+0x30>)
 8011896:	2290      	movs	r2, #144	@ 0x90
 8011898:	4906      	ldr	r1, [pc, #24]	@ (80118b4 <snmp_set_community_trap+0x34>)
 801189a:	4807      	ldr	r0, [pc, #28]	@ (80118b8 <snmp_set_community_trap+0x38>)
 801189c:	f010 fcd0 	bl	8022240 <iprintf>
  snmp_community_trap = community;
 80118a0:	4a06      	ldr	r2, [pc, #24]	@ (80118bc <snmp_set_community_trap+0x3c>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6013      	str	r3, [r2, #0]
}
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	08025c20 	.word	0x08025c20
 80118b4:	08025c5c 	.word	0x08025c5c
 80118b8:	08025c7c 	.word	0x08025c7c
 80118bc:	20000114 	.word	0x20000114

080118c0 <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 80118c0:	b590      	push	{r4, r7, lr}
 80118c2:	b0cf      	sub	sp, #316	@ 0x13c
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80118ca:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80118ce:	6020      	str	r0, [r4, #0]
 80118d0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80118d4:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80118d8:	6001      	str	r1, [r0, #0]
 80118da:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80118de:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80118e2:	600a      	str	r2, [r1, #0]
 80118e4:	461a      	mov	r2, r3
 80118e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118ea:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80118ee:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;
   
  memset(&request, 0, sizeof(request));
 80118f0:	f107 0314 	add.w	r3, r7, #20
 80118f4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80118f8:	2100      	movs	r1, #0
 80118fa:	4618      	mov	r0, r3
 80118fc:	f010 fe76 	bl	80225ec <memset>
  request.handle       = handle;
 8011900:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011904:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011908:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801190c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8011910:	6812      	ldr	r2, [r2, #0]
 8011912:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 8011914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011918:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801191c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011920:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8011924:	6812      	ldr	r2, [r2, #0]
 8011926:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 8011928:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801192c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011930:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011934:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8011938:	8812      	ldrh	r2, [r2, #0]
 801193a:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 801193c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011940:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011944:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011948:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801194c:	6812      	ldr	r2, [r2, #0]
 801194e:	62da      	str	r2, [r3, #44]	@ 0x2c

  snmp_stats.inpkts++;
 8011950:	4b5c      	ldr	r3, [pc, #368]	@ (8011ac4 <snmp_receive+0x204>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	3301      	adds	r3, #1
 8011956:	4a5b      	ldr	r2, [pc, #364]	@ (8011ac4 <snmp_receive+0x204>)
 8011958:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 801195a:	f107 0314 	add.w	r3, r7, #20
 801195e:	4618      	mov	r0, r3
 8011960:	f000 fd62 	bl	8012428 <snmp_parse_inbound_frame>
 8011964:	4603      	mov	r3, r0
 8011966:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if (err == ERR_OK) {
 801196a:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 801196e:	2b00      	cmp	r3, #0
 8011970:	f040 80a2 	bne.w	8011ab8 <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 8011974:	f107 0314 	add.w	r3, r7, #20
 8011978:	4618      	mov	r0, r3
 801197a:	f001 f863 	bl	8012a44 <snmp_prepare_outbound_frame>
 801197e:	4603      	mov	r3, r0
 8011980:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    if (err == ERR_OK) {
 8011984:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011988:	2b00      	cmp	r3, #0
 801198a:	f040 8086 	bne.w	8011a9a <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 801198e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011992:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011996:	69db      	ldr	r3, [r3, #28]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d13e      	bne.n	8011a1a <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 801199c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119a4:	7d9b      	ldrb	r3, [r3, #22]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d108      	bne.n	80119bc <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 80119aa:	f107 0314 	add.w	r3, r7, #20
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 fa4e 	bl	8011e50 <snmp_process_get_request>
 80119b4:	4603      	mov	r3, r0
 80119b6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80119ba:	e02e      	b.n	8011a1a <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 80119bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119c4:	7d9b      	ldrb	r3, [r3, #22]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d108      	bne.n	80119dc <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 80119ca:	f107 0314 	add.w	r3, r7, #20
 80119ce:	4618      	mov	r0, r3
 80119d0:	f000 fa83 	bl	8011eda <snmp_process_getnext_request>
 80119d4:	4603      	mov	r3, r0
 80119d6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80119da:	e01e      	b.n	8011a1a <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 80119dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119e4:	7d9b      	ldrb	r3, [r3, #22]
 80119e6:	2b05      	cmp	r3, #5
 80119e8:	d108      	bne.n	80119fc <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 80119ea:	f107 0314 	add.w	r3, r7, #20
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 fab8 	bl	8011f64 <snmp_process_getbulk_request>
 80119f4:	4603      	mov	r3, r0
 80119f6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80119fa:	e00e      	b.n	8011a1a <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80119fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a04:	7d9b      	ldrb	r3, [r3, #22]
 8011a06:	2b03      	cmp	r3, #3
 8011a08:	d107      	bne.n	8011a1a <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 8011a0a:	f107 0314 	add.w	r3, r7, #20
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 fb91 	bl	8012136 <snmp_process_set_request>
 8011a14:	4603      	mov	r3, r0
 8011a16:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        }
      }

      if (err == ERR_OK) {
 8011a1a:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d13b      	bne.n	8011a9a <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 8011a22:	f107 0314 	add.w	r3, r7, #20
 8011a26:	4618      	mov	r0, r3
 8011a28:	f001 fb9c 	bl	8013164 <snmp_complete_outbound_frame>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
      
        if (err == ERR_OK) {
 8011a32:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d12f      	bne.n	8011a9a <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 8011a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a42:	6818      	ldr	r0, [r3, #0]
 8011a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a4c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8011a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a60:	891b      	ldrh	r3, [r3, #8]
 8011a62:	f002 f8fe 	bl	8013c62 <snmp_sendto>
 8011a66:	4603      	mov	r3, r0
 8011a68:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) 
 8011a6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a74:	7d9b      	ldrb	r3, [r3, #22]
 8011a76:	2b03      	cmp	r3, #3
 8011a78:	d10f      	bne.n	8011a9a <snmp_receive+0x1da>
            && (request.error_status == SNMP_ERR_NOERROR) 
 8011a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a7e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a82:	69db      	ldr	r3, [r3, #28]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d108      	bne.n	8011a9a <snmp_receive+0x1da>
            && (snmp_write_callback != NULL)) {
 8011a88:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac8 <snmp_receive+0x208>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d004      	beq.n	8011a9a <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 8011a90:	f107 0314 	add.w	r3, r7, #20
 8011a94:	4618      	mov	r0, r3
 8011a96:	f001 fd47 	bl	8013528 <snmp_execute_write_callbacks>
          }
        }
      }
    }
  
    if (request.outbound_pbuf != NULL) {
 8011a9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a9e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d007      	beq.n	8011ab8 <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 8011aa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011aac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f004 fba6 	bl	8016204 <pbuf_free>
    }
  }
}
 8011ab8:	bf00      	nop
 8011aba:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd90      	pop	{r4, r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	20008544 	.word	0x20008544
 8011ac8:	200085e4 	.word	0x200085e4

08011acc <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance* node_instance, void* validate_arg)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d004      	beq.n	8011aee <snmp_msg_getnext_validate_node_inst+0x22>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d101      	bne.n	8011af2 <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011aee:	23f1      	movs	r3, #241	@ 0xf1
 8011af0:	e00b      	b.n	8011b0a <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request*)validate_arg)->version == SNMP_VERSION_1)) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8011af8:	2b46      	cmp	r3, #70	@ 0x46
 8011afa:	d105      	bne.n	8011b08 <snmp_msg_getnext_validate_node_inst+0x3c>
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	7a9b      	ldrb	r3, [r3, #10]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011b04:	23f1      	movs	r3, #241	@ 0xf1
 8011b06:	e000      	b.n	8011b0a <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  return SNMP_ERR_NOERROR;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bc80      	pop	{r7}
 8011b12:	4770      	bx	lr

08011b14 <snmp_process_varbind>:

static void 
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b0f6      	sub	sp, #472	@ 0x1d8
 8011b18:	af02      	add	r7, sp, #8
 8011b1a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011b22:	6018      	str	r0, [r3, #0]
 8011b24:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b28:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b2c:	6019      	str	r1, [r3, #0]
 8011b2e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b32:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011b36:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 8011b38:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011b3c:	22ec      	movs	r2, #236	@ 0xec
 8011b3e:	2100      	movs	r1, #0
 8011b40:	4618      	mov	r0, r3
 8011b42:	f010 fd53 	bl	80225ec <memset>

  if (get_next) {
 8011b46:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b4a:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d03d      	beq.n	8011bd0 <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 8011b54:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b58:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f103 000c 	add.w	r0, r3, #12
 8011b62:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b66:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	7a19      	ldrb	r1, [r3, #8]
 8011b6e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011b76:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011b7a:	9201      	str	r2, [sp, #4]
 8011b7c:	f107 0214 	add.w	r2, r7, #20
 8011b80:	9200      	str	r2, [sp, #0]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4aae      	ldr	r2, [pc, #696]	@ (8011e40 <snmp_process_varbind+0x32c>)
 8011b86:	f7fd fb18 	bl	800f1ba <snmp_get_next_node_instance_from_oid>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011b9a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	69db      	ldr	r3, [r3, #28]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d158      	bne.n	8011c5c <snmp_process_varbind+0x148>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 8011baa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bae:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f103 0008 	add.w	r0, r3, #8
 8011bb8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bbc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8011bc0:	781a      	ldrb	r2, [r3, #0]
 8011bc2:	f107 0314 	add.w	r3, r7, #20
 8011bc6:	3304      	adds	r3, #4
 8011bc8:	4619      	mov	r1, r3
 8011bca:	f7fd f867 	bl	800ec9c <snmp_oid_assign>
 8011bce:	e045      	b.n	8011c5c <snmp_process_varbind+0x148>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 8011bd0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bd4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f103 000c 	add.w	r0, r3, #12
 8011bde:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011be2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	7a1b      	ldrb	r3, [r3, #8]
 8011bea:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011bee:	4619      	mov	r1, r3
 8011bf0:	f7fd fa9c 	bl	800f12c <snmp_get_node_instance_from_oid>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bfc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011c04:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c08:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	69db      	ldr	r3, [r3, #28]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d123      	bne.n	8011c5c <snmp_process_varbind+0x148>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 8011c14:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c18:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c1c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011c20:	6819      	ldr	r1, [r3, #0]
 8011c22:	4610      	mov	r0, r2
 8011c24:	f7ff ff52 	bl	8011acc <snmp_msg_getnext_validate_node_inst>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c30:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 8011c38:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d009      	beq.n	8011c5c <snmp_process_varbind+0x148>
        if (node_instance.release_instance != NULL) {
 8011c48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d005      	beq.n	8011c5c <snmp_process_varbind+0x148>
          node_instance.release_instance(&node_instance);
 8011c50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011c54:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011c58:	4610      	mov	r0, r2
 8011c5a:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 8011c5c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c60:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	69db      	ldr	r3, [r3, #28]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d070      	beq.n	8011d4e <snmp_process_varbind+0x23a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8011c6c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c70:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	69db      	ldr	r3, [r3, #28]
 8011c78:	2bef      	cmp	r3, #239	@ 0xef
 8011c7a:	dd60      	ble.n	8011d3e <snmp_process_varbind+0x22a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 8011c7c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c80:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	7a9b      	ldrb	r3, [r3, #10]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d008      	beq.n	8011c9e <snmp_process_varbind+0x18a>
 8011c8c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c90:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	7a9b      	ldrb	r3, [r3, #10]
 8011c98:	2b03      	cmp	r3, #3
 8011c9a:	f040 80cc 	bne.w	8011e36 <snmp_process_varbind+0x322>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 8011c9e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011ca2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	69db      	ldr	r3, [r3, #28]
 8011caa:	b25b      	sxtb	r3, r3
 8011cac:	f003 030f 	and.w	r3, r3, #15
 8011cb0:	b25b      	sxtb	r3, r3
 8011cb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011cb6:	b25b      	sxtb	r3, r3
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cbe:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        vb->value_len = 0;
 8011cc8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011ccc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 8011cd8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cdc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011ce6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cea:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cee:	6819      	ldr	r1, [r3, #0]
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	f001 f921 	bl	8012f38 <snmp_append_outbound_varbind>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
        if (err == ERR_OK) {
 8011cfc:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d107      	bne.n	8011d14 <snmp_process_varbind+0x200>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 8011d04:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d08:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 8011d12:	e090      	b.n	8011e36 <snmp_process_varbind+0x322>
        } else if (err == ERR_BUF) {
 8011d14:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011d18:	f113 0f02 	cmn.w	r3, #2
 8011d1c:	d107      	bne.n	8011d2e <snmp_process_varbind+0x21a>
          request->error_status = SNMP_ERR_TOOBIG;
 8011d1e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	61da      	str	r2, [r3, #28]
}
 8011d2c:	e083      	b.n	8011e36 <snmp_process_varbind+0x322>
          request->error_status = SNMP_ERR_GENERROR;
 8011d2e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d32:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2205      	movs	r2, #5
 8011d3a:	61da      	str	r2, [r3, #28]
}
 8011d3c:	e07b      	b.n	8011e36 <snmp_process_varbind+0x322>
      request->error_status = SNMP_ERR_GENERROR;
 8011d3e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d42:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2205      	movs	r2, #5
 8011d4a:	61da      	str	r2, [r3, #28]
}
 8011d4c:	e073      	b.n	8011e36 <snmp_process_varbind+0x322>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 8011d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011d52:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8011d56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8011d5a:	6812      	ldr	r2, [r2, #0]
 8011d5c:	f8d2 10d8 	ldr.w	r1, [r2, #216]	@ 0xd8
 8011d60:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011d64:	4610      	mov	r0, r2
 8011d66:	4798      	blx	r3
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
    vb->type = node_instance.asn1_type;
 8011d6e:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 8011d72:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d76:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    if(len >= 0) {
 8011d80:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	@ 0x1ce
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	db45      	blt.n	8011e14 <snmp_process_varbind+0x300>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 8011d88:	f8b7 21ce 	ldrh.w	r2, [r7, #462]	@ 0x1ce
 8011d8c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d90:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 8011d9a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d9e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011da8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011dac:	2bc8      	cmp	r3, #200	@ 0xc8
 8011dae:	d906      	bls.n	8011dbe <snmp_process_varbind+0x2aa>
 8011db0:	4b24      	ldr	r3, [pc, #144]	@ (8011e44 <snmp_process_varbind+0x330>)
 8011db2:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8011db6:	4924      	ldr	r1, [pc, #144]	@ (8011e48 <snmp_process_varbind+0x334>)
 8011db8:	4824      	ldr	r0, [pc, #144]	@ (8011e4c <snmp_process_varbind+0x338>)
 8011dba:	f010 fa41 	bl	8022240 <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 8011dbe:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011dc2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011dcc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011dd0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011dd4:	6819      	ldr	r1, [r3, #0]
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	f001 f8ae 	bl	8012f38 <snmp_append_outbound_varbind>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
      if (err == ERR_BUF) {
 8011de2:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011de6:	f113 0f02 	cmn.w	r3, #2
 8011dea:	d107      	bne.n	8011dfc <snmp_process_varbind+0x2e8>
        request->error_status = SNMP_ERR_TOOBIG;
 8011dec:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011df0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2201      	movs	r2, #1
 8011df8:	61da      	str	r2, [r3, #28]
 8011dfa:	e012      	b.n	8011e22 <snmp_process_varbind+0x30e>
      } else if (err != ERR_OK) {
 8011dfc:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d00e      	beq.n	8011e22 <snmp_process_varbind+0x30e>
        request->error_status = SNMP_ERR_GENERROR;
 8011e04:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011e08:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	2205      	movs	r2, #5
 8011e10:	61da      	str	r2, [r3, #28]
 8011e12:	e006      	b.n	8011e22 <snmp_process_varbind+0x30e>
      request->error_status = SNMP_ERR_GENERROR;
 8011e14:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011e18:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2205      	movs	r2, #5
 8011e20:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 8011e22:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d005      	beq.n	8011e36 <snmp_process_varbind+0x322>
      node_instance.release_instance(&node_instance);
 8011e2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011e2e:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011e32:	4610      	mov	r0, r2
 8011e34:	4798      	blx	r3
}
 8011e36:	bf00      	nop
 8011e38:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	08011acd 	.word	0x08011acd
 8011e44:	08025c20 	.word	0x08025c20
 8011e48:	08025cc8 	.word	0x08025cc8
 8011e4c:	08025c7c 	.word	0x08025c7c

08011e50 <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b0ba      	sub	sp, #232	@ 0xe8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	3358      	adds	r3, #88	@ 0x58
 8011e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8011e60:	e030      	b.n	8011ec4 <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	3330      	adds	r3, #48	@ 0x30
 8011e66:	f107 0208 	add.w	r2, r7, #8
 8011e6a:	4611      	mov	r1, r2
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f001 fba5 	bl	80135bc <snmp_vb_enumerator_get_next>
 8011e72:	4603      	mov	r3, r0
 8011e74:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011e78:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d113      	bne.n	8011ea8 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8011e80:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011e84:	2b05      	cmp	r3, #5
 8011e86:	d10b      	bne.n	8011ea0 <snmp_process_get_request+0x50>
 8011e88:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d107      	bne.n	8011ea0 <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 8011e90:	f107 0308 	add.w	r3, r7, #8
 8011e94:	2200      	movs	r2, #0
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff fe3b 	bl	8011b14 <snmp_process_varbind>
 8011e9e:	e011      	b.n	8011ec4 <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2205      	movs	r2, #5
 8011ea4:	61da      	str	r2, [r3, #28]
 8011ea6:	e00d      	b.n	8011ec4 <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011ea8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d00e      	beq.n	8011ece <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011eb0:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d102      	bne.n	8011ebe <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011eb8:	f06f 030f 	mvn.w	r3, #15
 8011ebc:	e009      	b.n	8011ed2 <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2205      	movs	r2, #5
 8011ec2:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	69db      	ldr	r3, [r3, #28]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d0ca      	beq.n	8011e62 <snmp_process_get_request+0x12>
 8011ecc:	e000      	b.n	8011ed0 <snmp_process_get_request+0x80>
      break;
 8011ece:	bf00      	nop
    }
  }

  return ERR_OK;
 8011ed0:	2300      	movs	r3, #0
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	37e8      	adds	r7, #232	@ 0xe8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 8011eda:	b580      	push	{r7, lr}
 8011edc:	b0ba      	sub	sp, #232	@ 0xe8
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	3358      	adds	r3, #88	@ 0x58
 8011ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8011eea:	e030      	b.n	8011f4e <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3330      	adds	r3, #48	@ 0x30
 8011ef0:	f107 0208 	add.w	r2, r7, #8
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f001 fb60 	bl	80135bc <snmp_vb_enumerator_get_next>
 8011efc:	4603      	mov	r3, r0
 8011efe:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011f02:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d113      	bne.n	8011f32 <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8011f0a:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011f0e:	2b05      	cmp	r3, #5
 8011f10:	d10b      	bne.n	8011f2a <snmp_process_getnext_request+0x50>
 8011f12:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d107      	bne.n	8011f2a <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 8011f1a:	f107 0308 	add.w	r3, r7, #8
 8011f1e:	2201      	movs	r2, #1
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7ff fdf6 	bl	8011b14 <snmp_process_varbind>
 8011f28:	e011      	b.n	8011f4e <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2205      	movs	r2, #5
 8011f2e:	61da      	str	r2, [r3, #28]
 8011f30:	e00d      	b.n	8011f4e <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011f32:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d00e      	beq.n	8011f58 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011f3a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d102      	bne.n	8011f48 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011f42:	f06f 030f 	mvn.w	r3, #15
 8011f46:	e009      	b.n	8011f5c <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2205      	movs	r2, #5
 8011f4c:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	69db      	ldr	r3, [r3, #28]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d0ca      	beq.n	8011eec <snmp_process_getnext_request+0x12>
 8011f56:	e000      	b.n	8011f5a <snmp_process_getnext_request+0x80>
      break;
 8011f58:	bf00      	nop
    }
  }
  
  return ERR_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	37e8      	adds	r7, #232	@ 0xe8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b0c0      	sub	sp, #256	@ 0x100
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 8011f74:	2300      	movs	r3, #0
 8011f76:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	3358      	adds	r3, #88	@ 0x58
 8011f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011f8a:	e043      	b.n	8012014 <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 8011f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10d      	bne.n	8011fb0 <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011f9a:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

      if (repetitions == 0) {
 8011f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d03b      	beq.n	801201e <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 8011fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011faa:	3b01      	subs	r3, #1
 8011fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	3330      	adds	r3, #48	@ 0x30
 8011fb4:	f107 020c 	add.w	r2, r7, #12
 8011fb8:	4611      	mov	r1, r2
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f001 fafe 	bl	80135bc <snmp_vb_enumerator_get_next>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011fc6:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d029      	beq.n	8012022 <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011fce:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fd2:	2b02      	cmp	r3, #2
 8011fd4:	d102      	bne.n	8011fdc <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011fd6:	f06f 030f 	mvn.w	r3, #15
 8011fda:	e0a7      	b.n	801212c <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 8011fdc:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d107      	bne.n	8011ff4 <snmp_process_getbulk_request+0x90>
 8011fe4:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8011fe8:	2b05      	cmp	r3, #5
 8011fea:	d103      	bne.n	8011ff4 <snmp_process_getbulk_request+0x90>
 8011fec:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d003      	beq.n	8011ffc <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2205      	movs	r2, #5
 8011ff8:	61da      	str	r2, [r3, #28]
 8011ffa:	e00b      	b.n	8012014 <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 8011ffc:	f107 030c 	add.w	r3, r7, #12
 8012000:	2201      	movs	r2, #1
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff fd85 	bl	8011b14 <snmp_process_varbind>
      non_repeaters--;
 801200a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801200e:	3b01      	subs	r3, #1
 8012010:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	69db      	ldr	r3, [r3, #28]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d0b7      	beq.n	8011f8c <snmp_process_getbulk_request+0x28>
 801201c:	e06d      	b.n	80120fa <snmp_process_getbulk_request+0x196>
        break;
 801201e:	bf00      	nop
 8012020:	e06b      	b.n	80120fa <snmp_process_getbulk_request+0x196>
      break;
 8012022:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8012024:	e069      	b.n	80120fa <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 8012026:	2301      	movs	r3, #1
 8012028:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
    
    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8012036:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	b29b      	uxth	r3, r3
 801203e:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8012042:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8012046:	f001 faa1 	bl	801358c <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8012050:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 8012054:	e03e      	b.n	80120d4 <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 8012056:	2300      	movs	r3, #0
 8012058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 801205c:	f107 020c 	add.w	r2, r7, #12
 8012060:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8012064:	4611      	mov	r1, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f001 faa8 	bl	80135bc <snmp_vb_enumerator_get_next>
 801206c:	4603      	mov	r3, r0
 801206e:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012072:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8012076:	2b00      	cmp	r3, #0
 8012078:	d11e      	bne.n	80120b8 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	3358      	adds	r3, #88	@ 0x58
 801207e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        snmp_process_varbind(request, &vb, 1);
 8012082:	f107 030c 	add.w	r3, r7, #12
 8012086:	2201      	movs	r2, #1
 8012088:	4619      	mov	r1, r3
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff fd42 	bl	8011b14 <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	69db      	ldr	r3, [r3, #28]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d007      	beq.n	80120a8 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801209c:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 80120a0:	441a      	add	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	621a      	str	r2, [r3, #32]
 80120a6:	e015      	b.n	80120d4 <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 80120a8:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80120ac:	2b82      	cmp	r3, #130	@ 0x82
 80120ae:	d011      	beq.n	80120d4 <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 80120b6:	e00d      	b.n	80120d4 <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80120b8:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d00e      	beq.n	80120de <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2205      	movs	r2, #5
 80120c4:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ca:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 80120ce:	441a      	add	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	69db      	ldr	r3, [r3, #28]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d0bc      	beq.n	8012056 <snmp_process_getbulk_request+0xf2>
 80120dc:	e000      	b.n	80120e0 <snmp_process_getbulk_request+0x17c>
        break;
 80120de:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	69db      	ldr	r3, [r3, #28]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d103      	bne.n	80120f0 <snmp_process_getbulk_request+0x18c>
 80120e8:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d114      	bne.n	801211a <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }
    
    repetitions--;
 80120f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80120f4:	3b01      	subs	r3, #1
 80120f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10c      	bne.n	801211c <snmp_process_getbulk_request+0x1b8>
 8012102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012106:	2b00      	cmp	r3, #0
 8012108:	dd08      	ble.n	801211c <snmp_process_getbulk_request+0x1b8>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8012110:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8012114:	429a      	cmp	r2, r3
 8012116:	d186      	bne.n	8012026 <snmp_process_getbulk_request+0xc2>
 8012118:	e000      	b.n	801211c <snmp_process_getbulk_request+0x1b8>
      break;
 801211a:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	69db      	ldr	r3, [r3, #28]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d102      	bne.n	801212a <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b0f6      	sub	sp, #472	@ 0x1d8
 801213a:	af00      	add	r7, sp, #0
 801213c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012140:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012144:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8012146:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801214a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3358      	adds	r3, #88	@ 0x58
 8012152:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8012156:	e0ad      	b.n	80122b4 <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8012158:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801215c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	3330      	adds	r3, #48	@ 0x30
 8012164:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8012168:	4611      	mov	r1, r2
 801216a:	4618      	mov	r0, r3
 801216c:	f001 fa26 	bl	80135bc <snmp_vb_enumerator_get_next>
 8012170:	4603      	mov	r3, r0
 8012172:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012176:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 801217a:	2b00      	cmp	r3, #0
 801217c:	d17c      	bne.n	8012278 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 801217e:	f107 030c 	add.w	r3, r7, #12
 8012182:	22ec      	movs	r2, #236	@ 0xec
 8012184:	2100      	movs	r1, #0
 8012186:	4618      	mov	r0, r3
 8012188:	f010 fa30 	bl	80225ec <memset>
      
      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 801218c:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 8012190:	f107 020c 	add.w	r2, r7, #12
 8012194:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8012198:	330c      	adds	r3, #12
 801219a:	4618      	mov	r0, r3
 801219c:	f7fc ffc6 	bl	800f12c <snmp_get_node_instance_from_oid>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461a      	mov	r2, r3
 80121a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 80121b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	69db      	ldr	r3, [r3, #28]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d179      	bne.n	80122b4 <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 80121c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121c4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80121c8:	f893 20d0 	ldrb.w	r2, [r3, #208]	@ 0xd0
 80121cc:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d007      	beq.n	80121e4 <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 80121d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2207      	movs	r2, #7
 80121e0:	61da      	str	r2, [r3, #28]
 80121e2:	e036      	b.n	8012252 <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 80121e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121e8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80121ec:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80121f0:	f003 0302 	and.w	r3, r3, #2
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <snmp_process_set_request+0xd2>
 80121f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121fc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012204:	2b00      	cmp	r3, #0
 8012206:	d107      	bne.n	8012218 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 8012208:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801220c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2211      	movs	r2, #17
 8012214:	61da      	str	r2, [r3, #28]
 8012216:	e01c      	b.n	8012252 <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 8012218:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801221c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012224:	2b00      	cmp	r3, #0
 8012226:	d014      	beq.n	8012252 <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 8012228:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801222c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012234:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8012238:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801223c:	f107 000c 	add.w	r0, r7, #12
 8012240:	4798      	blx	r3
 8012242:	4603      	mov	r3, r0
 8012244:	461a      	mov	r2, r3
 8012246:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801224a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 8012252:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012256:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d028      	beq.n	80122b4 <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 8012262:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012266:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801226e:	f107 020c 	add.w	r2, r7, #12
 8012272:	4610      	mov	r0, r2
 8012274:	4798      	blx	r3
 8012276:	e01d      	b.n	80122b4 <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8012278:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 801227c:	2b01      	cmp	r3, #1
 801227e:	d023      	beq.n	80122c8 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 8012280:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012284:	2b03      	cmp	r3, #3
 8012286:	d107      	bne.n	8012298 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 8012288:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801228c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2208      	movs	r2, #8
 8012294:	61da      	str	r2, [r3, #28]
 8012296:	e00d      	b.n	80122b4 <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8012298:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 801229c:	2b02      	cmp	r3, #2
 801229e:	d102      	bne.n	80122a6 <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 80122a0:	f06f 030f 	mvn.w	r3, #15
 80122a4:	e0bb      	b.n	801241e <snmp_process_set_request+0x2e8>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 80122a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2205      	movs	r2, #5
 80122b2:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 80122b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122b8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	69db      	ldr	r3, [r3, #28]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f43f af49 	beq.w	8012158 <snmp_process_set_request+0x22>
 80122c6:	e000      	b.n	80122ca <snmp_process_set_request+0x194>
      break;
 80122c8:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 80122ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	69db      	ldr	r3, [r3, #28]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f040 80a0 	bne.w	801241c <snmp_process_set_request+0x2e6>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 80122dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80122ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80122f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8012302:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012306:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801230e:	f001 f93d 	bl	801358c <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 8012312:	e078      	b.n	8012406 <snmp_process_set_request+0x2d0>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8012314:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012318:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3330      	adds	r3, #48	@ 0x30
 8012320:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8012324:	4611      	mov	r1, r2
 8012326:	4618      	mov	r0, r3
 8012328:	f001 f948 	bl	80135bc <snmp_vb_enumerator_get_next>
 801232c:	4603      	mov	r3, r0
 801232e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012332:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012336:	2b00      	cmp	r3, #0
 8012338:	d15a      	bne.n	80123f0 <snmp_process_set_request+0x2ba>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 801233a:	f107 030c 	add.w	r3, r7, #12
 801233e:	22ec      	movs	r2, #236	@ 0xec
 8012340:	2100      	movs	r1, #0
 8012342:	4618      	mov	r0, r3
 8012344:	f010 f952 	bl	80225ec <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8012348:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 801234c:	f107 020c 	add.w	r2, r7, #12
 8012350:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8012354:	330c      	adds	r3, #12
 8012356:	4618      	mov	r0, r3
 8012358:	f7fc fee8 	bl	800f12c <snmp_get_node_instance_from_oid>
 801235c:	4603      	mov	r3, r0
 801235e:	461a      	mov	r2, r3
 8012360:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012364:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 801236c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012370:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	69db      	ldr	r3, [r3, #28]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d144      	bne.n	8012406 <snmp_process_set_request+0x2d0>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 801237c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012380:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012388:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 801238c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012390:	f107 000c 	add.w	r0, r7, #12
 8012394:	4798      	blx	r3
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d016      	beq.n	80123ca <snmp_process_set_request+0x294>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 801239c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123a0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d107      	bne.n	80123bc <snmp_process_set_request+0x286>
              request->error_status = SNMP_ERR_COMMITFAILED;
 80123ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	220e      	movs	r2, #14
 80123b8:	61da      	str	r2, [r3, #28]
 80123ba:	e006      	b.n	80123ca <snmp_process_set_request+0x294>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 80123bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	220f      	movs	r2, #15
 80123c8:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 80123ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123ce:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80123d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d015      	beq.n	8012406 <snmp_process_set_request+0x2d0>
            node_instance.release_instance(&node_instance);
 80123da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123de:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80123e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80123e6:	f107 020c 	add.w	r2, r7, #12
 80123ea:	4610      	mov	r0, r2
 80123ec:	4798      	blx	r3
 80123ee:	e00a      	b.n	8012406 <snmp_process_set_request+0x2d0>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80123f0:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d010      	beq.n	801241a <snmp_process_set_request+0x2e4>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 80123f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123fc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2205      	movs	r2, #5
 8012404:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 8012406:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801240a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	69db      	ldr	r3, [r3, #28]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f43f af7e 	beq.w	8012314 <snmp_process_set_request+0x1de>
 8012418:	e000      	b.n	801241c <snmp_process_set_request+0x2e6>
        break;
 801241a:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	4618      	mov	r0, r3
 8012420:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 8012428:	b590      	push	{r4, r7, lr}
 801242a:	b08d      	sub	sp, #52	@ 0x34
 801242c:	af02      	add	r7, sp, #8
 801242e:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  s32_t parent_tlv_value_len;
  s32_t s32_value;
  err_t err;

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012438:	891b      	ldrh	r3, [r3, #8]
 801243a:	f107 0018 	add.w	r0, r7, #24
 801243e:	2200      	movs	r2, #0
 8012440:	f001 faca 	bl	80139d8 <snmp_pbuf_stream_init>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d007      	beq.n	801245a <snmp_parse_inbound_frame+0x32>
 801244a:	4b9f      	ldr	r3, [pc, #636]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801244c:	695b      	ldr	r3, [r3, #20]
 801244e:	3301      	adds	r3, #1
 8012450:	4a9d      	ldr	r2, [pc, #628]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012452:	6153      	str	r3, [r2, #20]
 8012454:	f06f 030f 	mvn.w	r3, #15
 8012458:	e2ee      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  
  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801245a:	f107 0210 	add.w	r2, r7, #16
 801245e:	f107 0318 	add.w	r3, r7, #24
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f7fb ffd9 	bl	800e41c <snmp_asn1_dec_tlv>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d007      	beq.n	8012480 <snmp_parse_inbound_frame+0x58>
 8012470:	4b95      	ldr	r3, [pc, #596]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012472:	695b      	ldr	r3, [r3, #20]
 8012474:	3301      	adds	r3, #1
 8012476:	4a94      	ldr	r2, [pc, #592]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012478:	6153      	str	r3, [r2, #20]
 801247a:	f06f 030f 	mvn.w	r3, #15
 801247e:	e2db      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 8012480:	7c3b      	ldrb	r3, [r7, #16]
 8012482:	2b30      	cmp	r3, #48	@ 0x30
 8012484:	d103      	bne.n	801248e <snmp_parse_inbound_frame+0x66>
 8012486:	8aba      	ldrh	r2, [r7, #20]
 8012488:	8bfb      	ldrh	r3, [r7, #30]
 801248a:	429a      	cmp	r2, r3
 801248c:	d007      	beq.n	801249e <snmp_parse_inbound_frame+0x76>
 801248e:	4b8e      	ldr	r3, [pc, #568]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012490:	695b      	ldr	r3, [r3, #20]
 8012492:	3301      	adds	r3, #1
 8012494:	4a8c      	ldr	r2, [pc, #560]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012496:	6153      	str	r3, [r2, #20]
 8012498:	f06f 030f 	mvn.w	r3, #15
 801249c:	e2cc      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len = tlv.value_len;
 801249e:	8abb      	ldrh	r3, [r7, #20]
 80124a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80124a2:	f107 0210 	add.w	r2, r7, #16
 80124a6:	f107 0318 	add.w	r3, r7, #24
 80124aa:	4611      	mov	r1, r2
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fb ffb5 	bl	800e41c <snmp_asn1_dec_tlv>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d007      	beq.n	80124c8 <snmp_parse_inbound_frame+0xa0>
 80124b8:	4b83      	ldr	r3, [pc, #524]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124ba:	695b      	ldr	r3, [r3, #20]
 80124bc:	3301      	adds	r3, #1
 80124be:	4a82      	ldr	r2, [pc, #520]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124c0:	6153      	str	r3, [r2, #20]
 80124c2:	f06f 030f 	mvn.w	r3, #15
 80124c6:	e2b7      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 80124c8:	7c3b      	ldrb	r3, [r7, #16]
 80124ca:	2b02      	cmp	r3, #2
 80124cc:	d007      	beq.n	80124de <snmp_parse_inbound_frame+0xb6>
 80124ce:	4b7e      	ldr	r3, [pc, #504]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124d0:	695b      	ldr	r3, [r3, #20]
 80124d2:	3301      	adds	r3, #1
 80124d4:	4a7c      	ldr	r2, [pc, #496]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124d6:	6153      	str	r3, [r2, #20]
 80124d8:	f06f 030f 	mvn.w	r3, #15
 80124dc:	e2ac      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80124de:	7c7b      	ldrb	r3, [r7, #17]
 80124e0:	461a      	mov	r2, r3
 80124e2:	7cbb      	ldrb	r3, [r7, #18]
 80124e4:	4413      	add	r3, r2
 80124e6:	8aba      	ldrh	r2, [r7, #20]
 80124e8:	4413      	add	r3, r2
 80124ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80124f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	dc07      	bgt.n	8012506 <snmp_parse_inbound_frame+0xde>
 80124f6:	4b74      	ldr	r3, [pc, #464]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124f8:	695b      	ldr	r3, [r3, #20]
 80124fa:	3301      	adds	r3, #1
 80124fc:	4a72      	ldr	r2, [pc, #456]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80124fe:	6153      	str	r3, [r2, #20]
 8012500:	f06f 030f 	mvn.w	r3, #15
 8012504:	e298      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8012506:	8ab9      	ldrh	r1, [r7, #20]
 8012508:	f107 020c 	add.w	r2, r7, #12
 801250c:	f107 0318 	add.w	r3, r7, #24
 8012510:	4618      	mov	r0, r3
 8012512:	f7fc f8bb 	bl	800e68c <snmp_asn1_dec_s32t>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d007      	beq.n	801252c <snmp_parse_inbound_frame+0x104>
 801251c:	4b6a      	ldr	r3, [pc, #424]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801251e:	695b      	ldr	r3, [r3, #20]
 8012520:	3301      	adds	r3, #1
 8012522:	4a69      	ldr	r2, [pc, #420]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012524:	6153      	str	r3, [r2, #20]
 8012526:	f06f 030f 	mvn.w	r3, #15
 801252a:	e285      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  if ((s32_value != SNMP_VERSION_1) &&
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d00a      	beq.n	8012548 <snmp_parse_inbound_frame+0x120>
      (s32_value != SNMP_VERSION_2c)
 8012532:	68fb      	ldr	r3, [r7, #12]
  if ((s32_value != SNMP_VERSION_1) &&
 8012534:	2b01      	cmp	r3, #1
 8012536:	d007      	beq.n	8012548 <snmp_parse_inbound_frame+0x120>
      && (s32_value != SNMP_VERSION_3)
#endif
     )
  {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 8012538:	4b63      	ldr	r3, [pc, #396]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	3301      	adds	r3, #1
 801253e:	4a62      	ldr	r2, [pc, #392]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012540:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 8012542:	f06f 030f 	mvn.w	r3, #15
 8012546:	e277      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  }
  request->version = (u8_t)s32_value;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	b2da      	uxtb	r2, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	729a      	strb	r2, [r3, #10]
    request->context_name_len = (u8_t)u16_value;
  } else
#endif
  {
  /* decode community */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012550:	f107 0210 	add.w	r2, r7, #16
 8012554:	f107 0318 	add.w	r3, r7, #24
 8012558:	4611      	mov	r1, r2
 801255a:	4618      	mov	r0, r3
 801255c:	f7fb ff5e 	bl	800e41c <snmp_asn1_dec_tlv>
 8012560:	4603      	mov	r3, r0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d007      	beq.n	8012576 <snmp_parse_inbound_frame+0x14e>
 8012566:	4b58      	ldr	r3, [pc, #352]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012568:	695b      	ldr	r3, [r3, #20]
 801256a:	3301      	adds	r3, #1
 801256c:	4a56      	ldr	r2, [pc, #344]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801256e:	6153      	str	r3, [r2, #20]
 8012570:	f06f 030f 	mvn.w	r3, #15
 8012574:	e260      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 8012576:	7c3b      	ldrb	r3, [r7, #16]
 8012578:	2b04      	cmp	r3, #4
 801257a:	d007      	beq.n	801258c <snmp_parse_inbound_frame+0x164>
 801257c:	4b52      	ldr	r3, [pc, #328]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801257e:	695b      	ldr	r3, [r3, #20]
 8012580:	3301      	adds	r3, #1
 8012582:	4a51      	ldr	r2, [pc, #324]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012584:	6153      	str	r3, [r2, #20]
 8012586:	f06f 030f 	mvn.w	r3, #15
 801258a:	e255      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801258c:	7c7b      	ldrb	r3, [r7, #17]
 801258e:	461a      	mov	r2, r3
 8012590:	7cbb      	ldrb	r3, [r7, #18]
 8012592:	4413      	add	r3, r2
 8012594:	8aba      	ldrh	r2, [r7, #20]
 8012596:	4413      	add	r3, r2
 8012598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 801259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	dc07      	bgt.n	80125b4 <snmp_parse_inbound_frame+0x18c>
 80125a4:	4b48      	ldr	r3, [pc, #288]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80125a6:	695b      	ldr	r3, [r3, #20]
 80125a8:	3301      	adds	r3, #1
 80125aa:	4a47      	ldr	r2, [pc, #284]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80125ac:	6153      	str	r3, [r2, #20]
 80125ae:	f06f 030f 	mvn.w	r3, #15
 80125b2:	e241      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>

  err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 80125b4:	8ab9      	ldrh	r1, [r7, #20]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f103 020b 	add.w	r2, r3, #11
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	3314      	adds	r3, #20
 80125c0:	f107 0018 	add.w	r0, r7, #24
 80125c4:	2408      	movs	r4, #8
 80125c6:	9400      	str	r4, [sp, #0]
 80125c8:	f7fc f99f 	bl	800e90a <snmp_asn1_dec_raw>
 80125cc:	4603      	mov	r3, r0
 80125ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err == ERR_MEM) {
 80125d2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80125d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125da:	d10b      	bne.n	80125f4 <snmp_parse_inbound_frame+0x1cc>
    /* community string does not fit in our buffer -> its too long -> its invalid */
    request->community_strlen = 0;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2200      	movs	r2, #0
 80125e0:	829a      	strh	r2, [r3, #20]
    snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 80125e2:	8abb      	ldrh	r3, [r7, #20]
 80125e4:	461a      	mov	r2, r3
 80125e6:	f107 0318 	add.w	r3, r7, #24
 80125ea:	4611      	mov	r1, r2
 80125ec:	4618      	mov	r0, r3
 80125ee:	f001 fae9 	bl	8013bc4 <snmp_pbuf_stream_seek>
 80125f2:	e00b      	b.n	801260c <snmp_parse_inbound_frame+0x1e4>
  } else {
    IF_PARSE_ASSERT(err == ERR_OK);
 80125f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d007      	beq.n	801260c <snmp_parse_inbound_frame+0x1e4>
 80125fc:	4b32      	ldr	r3, [pc, #200]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	3301      	adds	r3, #1
 8012602:	4a31      	ldr	r2, [pc, #196]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012604:	6153      	str	r3, [r2, #20]
 8012606:	f06f 030f 	mvn.w	r3, #15
 801260a:	e215      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  }
  /* add zero terminator */
  request->community[request->community_strlen] = 0;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	8a9b      	ldrh	r3, [r3, #20]
 8012610:	461a      	mov	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4413      	add	r3, r2
 8012616:	2200      	movs	r2, #0
 8012618:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801261a:	f107 0210 	add.w	r2, r7, #16
 801261e:	f107 0318 	add.w	r3, r7, #24
 8012622:	4611      	mov	r1, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f7fb fef9 	bl	800e41c <snmp_asn1_dec_tlv>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d007      	beq.n	8012640 <snmp_parse_inbound_frame+0x218>
 8012630:	4b25      	ldr	r3, [pc, #148]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	3301      	adds	r3, #1
 8012636:	4a24      	ldr	r2, [pc, #144]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012638:	6153      	str	r3, [r2, #20]
 801263a:	f06f 030f 	mvn.w	r3, #15
 801263e:	e1fb      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 8012640:	8aba      	ldrh	r2, [r7, #20]
 8012642:	8bfb      	ldrh	r3, [r7, #30]
 8012644:	429a      	cmp	r2, r3
 8012646:	d907      	bls.n	8012658 <snmp_parse_inbound_frame+0x230>
 8012648:	4b1f      	ldr	r3, [pc, #124]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801264a:	695b      	ldr	r3, [r3, #20]
 801264c:	3301      	adds	r3, #1
 801264e:	4a1e      	ldr	r2, [pc, #120]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012650:	6153      	str	r3, [r2, #20]
 8012652:	f06f 030f 	mvn.w	r3, #15
 8012656:	e1ef      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 8012658:	8bfa      	ldrh	r2, [r7, #30]
 801265a:	8abb      	ldrh	r3, [r7, #20]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	b29a      	uxth	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  parent_tlv_value_len = tlv.value_len;
 8012666:	8abb      	ldrh	r3, [r7, #20]
 8012668:	627b      	str	r3, [r7, #36]	@ 0x24

  /* validate PDU type */
  switch(tlv.type) {
 801266a:	7c3b      	ldrb	r3, [r7, #16]
 801266c:	3ba0      	subs	r3, #160	@ 0xa0
 801266e:	2b05      	cmp	r3, #5
 8012670:	d827      	bhi.n	80126c2 <snmp_parse_inbound_frame+0x29a>
 8012672:	a201      	add	r2, pc, #4	@ (adr r2, 8012678 <snmp_parse_inbound_frame+0x250>)
 8012674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012678:	08012691 	.word	0x08012691
 801267c:	0801269d 	.word	0x0801269d
 8012680:	080126c3 	.word	0x080126c3
 8012684:	080126b7 	.word	0x080126b7
 8012688:	080126c3 	.word	0x080126c3
 801268c:	080126a9 	.word	0x080126a9
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 8012690:	4b0d      	ldr	r3, [pc, #52]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012694:	3301      	adds	r3, #1
 8012696:	4a0c      	ldr	r2, [pc, #48]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 8012698:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
 801269a:	e018      	b.n	80126ce <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 801269c:	4b0a      	ldr	r3, [pc, #40]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 801269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126a0:	3301      	adds	r3, #1
 80126a2:	4a09      	ldr	r2, [pc, #36]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80126a4:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 80126a6:	e012      	b.n	80126ce <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	7a9b      	ldrb	r3, [r3, #10]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d10d      	bne.n	80126cc <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 80126b0:	f06f 030f 	mvn.w	r3, #15
 80126b4:	e1c0      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 80126b6:	4b04      	ldr	r3, [pc, #16]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80126b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126ba:	3301      	adds	r3, #1
 80126bc:	4a02      	ldr	r2, [pc, #8]	@ (80126c8 <snmp_parse_inbound_frame+0x2a0>)
 80126be:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80126c0:	e005      	b.n	80126ce <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 80126c2:	f06f 030f 	mvn.w	r3, #15
 80126c6:	e1b7      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
 80126c8:	20008544 	.word	0x20008544
      break;
 80126cc:	bf00      	nop
      break;
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 80126ce:	7c3b      	ldrb	r3, [r7, #16]
 80126d0:	f003 031f 	and.w	r3, r3, #31
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	759a      	strb	r2, [r3, #22]

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	8a9b      	ldrh	r3, [r3, #20]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d109      	bne.n	80126f6 <snmp_parse_inbound_frame+0x2ce>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 80126e2:	4ba2      	ldr	r3, [pc, #648]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	3301      	adds	r3, #1
 80126e8:	4aa0      	ldr	r2, [pc, #640]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80126ea:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 80126ec:	f002 f88a 	bl	8014804 <snmp_authfail_trap>
    return ERR_ARG;
 80126f0:	f06f 030f 	mvn.w	r3, #15
 80126f4:	e1a0      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	7d9b      	ldrb	r3, [r3, #22]
 80126fa:	2b03      	cmp	r3, #3
 80126fc:	d120      	bne.n	8012740 <snmp_parse_inbound_frame+0x318>
    if (snmp_community_write[0] == 0) {
 80126fe:	4b9c      	ldr	r3, [pc, #624]	@ (8012970 <snmp_parse_inbound_frame+0x548>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d106      	bne.n	8012716 <snmp_parse_inbound_frame+0x2ee>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2211      	movs	r2, #17
 801270c:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2201      	movs	r2, #1
 8012712:	621a      	str	r2, [r3, #32]
 8012714:	e029      	b.n	801276a <snmp_parse_inbound_frame+0x342>
    } else if (strncmp(snmp_community_write, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8012716:	4b96      	ldr	r3, [pc, #600]	@ (8012970 <snmp_parse_inbound_frame+0x548>)
 8012718:	6818      	ldr	r0, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	330b      	adds	r3, #11
 801271e:	2208      	movs	r2, #8
 8012720:	4619      	mov	r1, r3
 8012722:	f00f ff99 	bl	8022658 <strncmp>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d01e      	beq.n	801276a <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 801272c:	4b8f      	ldr	r3, [pc, #572]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	3301      	adds	r3, #1
 8012732:	4a8e      	ldr	r2, [pc, #568]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012734:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8012736:	f002 f865 	bl	8014804 <snmp_authfail_trap>
      return ERR_ARG;
 801273a:	f06f 030f 	mvn.w	r3, #15
 801273e:	e17b      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
    }
  } else { 
    if (strncmp(snmp_community, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8012740:	4b8c      	ldr	r3, [pc, #560]	@ (8012974 <snmp_parse_inbound_frame+0x54c>)
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	330b      	adds	r3, #11
 8012748:	2208      	movs	r2, #8
 801274a:	4619      	mov	r1, r3
 801274c:	f00f ff84 	bl	8022658 <strncmp>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d009      	beq.n	801276a <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8012756:	4b85      	ldr	r3, [pc, #532]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	3301      	adds	r3, #1
 801275c:	4a83      	ldr	r2, [pc, #524]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801275e:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8012760:	f002 f850 	bl	8014804 <snmp_authfail_trap>
      return ERR_ARG;
 8012764:	f06f 030f 	mvn.w	r3, #15
 8012768:	e166      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
    }
  }
  
  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801276a:	f107 0210 	add.w	r2, r7, #16
 801276e:	f107 0318 	add.w	r3, r7, #24
 8012772:	4611      	mov	r1, r2
 8012774:	4618      	mov	r0, r3
 8012776:	f7fb fe51 	bl	800e41c <snmp_asn1_dec_tlv>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d007      	beq.n	8012790 <snmp_parse_inbound_frame+0x368>
 8012780:	4b7a      	ldr	r3, [pc, #488]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012782:	695b      	ldr	r3, [r3, #20]
 8012784:	3301      	adds	r3, #1
 8012786:	4a79      	ldr	r2, [pc, #484]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012788:	6153      	str	r3, [r2, #20]
 801278a:	f06f 030f 	mvn.w	r3, #15
 801278e:	e153      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012790:	7c3b      	ldrb	r3, [r7, #16]
 8012792:	2b02      	cmp	r3, #2
 8012794:	d007      	beq.n	80127a6 <snmp_parse_inbound_frame+0x37e>
 8012796:	4b75      	ldr	r3, [pc, #468]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012798:	695b      	ldr	r3, [r3, #20]
 801279a:	3301      	adds	r3, #1
 801279c:	4a73      	ldr	r2, [pc, #460]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801279e:	6153      	str	r3, [r2, #20]
 80127a0:	f06f 030f 	mvn.w	r3, #15
 80127a4:	e148      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80127a6:	7c7b      	ldrb	r3, [r7, #17]
 80127a8:	461a      	mov	r2, r3
 80127aa:	7cbb      	ldrb	r3, [r7, #18]
 80127ac:	4413      	add	r3, r2
 80127ae:	8aba      	ldrh	r2, [r7, #20]
 80127b0:	4413      	add	r3, r2
 80127b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80127b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	dc07      	bgt.n	80127ce <snmp_parse_inbound_frame+0x3a6>
 80127be:	4b6b      	ldr	r3, [pc, #428]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80127c0:	695b      	ldr	r3, [r3, #20]
 80127c2:	3301      	adds	r3, #1
 80127c4:	4a69      	ldr	r2, [pc, #420]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80127c6:	6153      	str	r3, [r2, #20]
 80127c8:	f06f 030f 	mvn.w	r3, #15
 80127cc:	e134      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 80127ce:	8ab9      	ldrh	r1, [r7, #20]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f103 0218 	add.w	r2, r3, #24
 80127d6:	f107 0318 	add.w	r3, r7, #24
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fb ff56 	bl	800e68c <snmp_asn1_dec_s32t>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d007      	beq.n	80127f6 <snmp_parse_inbound_frame+0x3ce>
 80127e6:	4b61      	ldr	r3, [pc, #388]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80127e8:	695b      	ldr	r3, [r3, #20]
 80127ea:	3301      	adds	r3, #1
 80127ec:	4a5f      	ldr	r2, [pc, #380]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80127ee:	6153      	str	r3, [r2, #20]
 80127f0:	f06f 030f 	mvn.w	r3, #15
 80127f4:	e120      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80127f6:	f107 0210 	add.w	r2, r7, #16
 80127fa:	f107 0318 	add.w	r3, r7, #24
 80127fe:	4611      	mov	r1, r2
 8012800:	4618      	mov	r0, r3
 8012802:	f7fb fe0b 	bl	800e41c <snmp_asn1_dec_tlv>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d007      	beq.n	801281c <snmp_parse_inbound_frame+0x3f4>
 801280c:	4b57      	ldr	r3, [pc, #348]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	3301      	adds	r3, #1
 8012812:	4a56      	ldr	r2, [pc, #344]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012814:	6153      	str	r3, [r2, #20]
 8012816:	f06f 030f 	mvn.w	r3, #15
 801281a:	e10d      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 801281c:	7c3b      	ldrb	r3, [r7, #16]
 801281e:	2b02      	cmp	r3, #2
 8012820:	d007      	beq.n	8012832 <snmp_parse_inbound_frame+0x40a>
 8012822:	4b52      	ldr	r3, [pc, #328]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012824:	695b      	ldr	r3, [r3, #20]
 8012826:	3301      	adds	r3, #1
 8012828:	4a50      	ldr	r2, [pc, #320]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801282a:	6153      	str	r3, [r2, #20]
 801282c:	f06f 030f 	mvn.w	r3, #15
 8012830:	e102      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8012832:	7c7b      	ldrb	r3, [r7, #17]
 8012834:	461a      	mov	r2, r3
 8012836:	7cbb      	ldrb	r3, [r7, #18]
 8012838:	4413      	add	r3, r2
 801283a:	8aba      	ldrh	r2, [r7, #20]
 801283c:	4413      	add	r3, r2
 801283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012846:	2b00      	cmp	r3, #0
 8012848:	dc07      	bgt.n	801285a <snmp_parse_inbound_frame+0x432>
 801284a:	4b48      	ldr	r3, [pc, #288]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801284c:	695b      	ldr	r3, [r3, #20]
 801284e:	3301      	adds	r3, #1
 8012850:	4a46      	ldr	r2, [pc, #280]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012852:	6153      	str	r3, [r2, #20]
 8012854:	f06f 030f 	mvn.w	r3, #15
 8012858:	e0ee      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	7d9b      	ldrb	r3, [r3, #22]
 801285e:	2b05      	cmp	r3, #5
 8012860:	d11b      	bne.n	801289a <snmp_parse_inbound_frame+0x472>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 8012862:	8ab9      	ldrh	r1, [r7, #20]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801286a:	f107 0318 	add.w	r3, r7, #24
 801286e:	4618      	mov	r0, r3
 8012870:	f7fb ff0c 	bl	800e68c <snmp_asn1_dec_s32t>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d007      	beq.n	801288a <snmp_parse_inbound_frame+0x462>
 801287a:	4b3c      	ldr	r3, [pc, #240]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801287c:	695b      	ldr	r3, [r3, #20]
 801287e:	3301      	adds	r3, #1
 8012880:	4a3a      	ldr	r2, [pc, #232]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012882:	6153      	str	r3, [r2, #20]
 8012884:	f06f 030f 	mvn.w	r3, #15
 8012888:	e0d6      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
    if (request->non_repeaters < 0) {
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801288e:	2b00      	cmp	r3, #0
 8012890:	da21      	bge.n	80128d6 <snmp_parse_inbound_frame+0x4ae>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	625a      	str	r2, [r3, #36]	@ 0x24
 8012898:	e01d      	b.n	80128d6 <snmp_parse_inbound_frame+0x4ae>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 801289a:	8ab9      	ldrh	r1, [r7, #20]
 801289c:	f107 020c 	add.w	r2, r7, #12
 80128a0:	f107 0318 	add.w	r3, r7, #24
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fb fef1 	bl	800e68c <snmp_asn1_dec_s32t>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d007      	beq.n	80128c0 <snmp_parse_inbound_frame+0x498>
 80128b0:	4b2e      	ldr	r3, [pc, #184]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	3301      	adds	r3, #1
 80128b6:	4a2d      	ldr	r2, [pc, #180]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128b8:	6153      	str	r3, [r2, #20]
 80128ba:	f06f 030f 	mvn.w	r3, #15
 80128be:	e0bb      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d007      	beq.n	80128d6 <snmp_parse_inbound_frame+0x4ae>
 80128c6:	4b29      	ldr	r3, [pc, #164]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	3301      	adds	r3, #1
 80128cc:	4a27      	ldr	r2, [pc, #156]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128ce:	6153      	str	r3, [r2, #20]
 80128d0:	f06f 030f 	mvn.w	r3, #15
 80128d4:	e0b0      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80128d6:	f107 0210 	add.w	r2, r7, #16
 80128da:	f107 0318 	add.w	r3, r7, #24
 80128de:	4611      	mov	r1, r2
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fb fd9b 	bl	800e41c <snmp_asn1_dec_tlv>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d007      	beq.n	80128fc <snmp_parse_inbound_frame+0x4d4>
 80128ec:	4b1f      	ldr	r3, [pc, #124]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128ee:	695b      	ldr	r3, [r3, #20]
 80128f0:	3301      	adds	r3, #1
 80128f2:	4a1e      	ldr	r2, [pc, #120]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 80128f4:	6153      	str	r3, [r2, #20]
 80128f6:	f06f 030f 	mvn.w	r3, #15
 80128fa:	e09d      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 80128fc:	7c3b      	ldrb	r3, [r7, #16]
 80128fe:	2b02      	cmp	r3, #2
 8012900:	d007      	beq.n	8012912 <snmp_parse_inbound_frame+0x4ea>
 8012902:	4b1a      	ldr	r3, [pc, #104]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012904:	695b      	ldr	r3, [r3, #20]
 8012906:	3301      	adds	r3, #1
 8012908:	4a18      	ldr	r2, [pc, #96]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801290a:	6153      	str	r3, [r2, #20]
 801290c:	f06f 030f 	mvn.w	r3, #15
 8012910:	e092      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8012912:	7c7b      	ldrb	r3, [r7, #17]
 8012914:	461a      	mov	r2, r3
 8012916:	7cbb      	ldrb	r3, [r7, #18]
 8012918:	4413      	add	r3, r2
 801291a:	8aba      	ldrh	r2, [r7, #20]
 801291c:	4413      	add	r3, r2
 801291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012926:	2b00      	cmp	r3, #0
 8012928:	dc07      	bgt.n	801293a <snmp_parse_inbound_frame+0x512>
 801292a:	4b10      	ldr	r3, [pc, #64]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801292c:	695b      	ldr	r3, [r3, #20]
 801292e:	3301      	adds	r3, #1
 8012930:	4a0e      	ldr	r2, [pc, #56]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012932:	6153      	str	r3, [r2, #20]
 8012934:	f06f 030f 	mvn.w	r3, #15
 8012938:	e07e      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	7d9b      	ldrb	r3, [r3, #22]
 801293e:	2b05      	cmp	r3, #5
 8012940:	d122      	bne.n	8012988 <snmp_parse_inbound_frame+0x560>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 8012942:	8ab9      	ldrh	r1, [r7, #20]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801294a:	f107 0318 	add.w	r3, r7, #24
 801294e:	4618      	mov	r0, r3
 8012950:	f7fb fe9c 	bl	800e68c <snmp_asn1_dec_s32t>
 8012954:	4603      	mov	r3, r0
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00e      	beq.n	8012978 <snmp_parse_inbound_frame+0x550>
 801295a:	4b04      	ldr	r3, [pc, #16]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 801295c:	695b      	ldr	r3, [r3, #20]
 801295e:	3301      	adds	r3, #1
 8012960:	4a02      	ldr	r2, [pc, #8]	@ (801296c <snmp_parse_inbound_frame+0x544>)
 8012962:	6153      	str	r3, [r2, #20]
 8012964:	f06f 030f 	mvn.w	r3, #15
 8012968:	e066      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
 801296a:	bf00      	nop
 801296c:	20008544 	.word	0x20008544
 8012970:	20000110 	.word	0x20000110
 8012974:	2000010c 	.word	0x2000010c
    if (request->max_repetitions < 0) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801297c:	2b00      	cmp	r3, #0
 801297e:	da22      	bge.n	80129c6 <snmp_parse_inbound_frame+0x59e>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	629a      	str	r2, [r3, #40]	@ 0x28
 8012986:	e01e      	b.n	80129c6 <snmp_parse_inbound_frame+0x59e>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 8012988:	8ab9      	ldrh	r1, [r7, #20]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f103 0220 	add.w	r2, r3, #32
 8012990:	f107 0318 	add.w	r3, r7, #24
 8012994:	4618      	mov	r0, r3
 8012996:	f7fb fe79 	bl	800e68c <snmp_asn1_dec_s32t>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d007      	beq.n	80129b0 <snmp_parse_inbound_frame+0x588>
 80129a0:	4b27      	ldr	r3, [pc, #156]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129a2:	695b      	ldr	r3, [r3, #20]
 80129a4:	3301      	adds	r3, #1
 80129a6:	4a26      	ldr	r2, [pc, #152]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129a8:	6153      	str	r3, [r2, #20]
 80129aa:	f06f 030f 	mvn.w	r3, #15
 80129ae:	e043      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == 0);
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d007      	beq.n	80129c6 <snmp_parse_inbound_frame+0x59e>
 80129b6:	4b22      	ldr	r3, [pc, #136]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129b8:	695b      	ldr	r3, [r3, #20]
 80129ba:	3301      	adds	r3, #1
 80129bc:	4a20      	ldr	r2, [pc, #128]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129be:	6153      	str	r3, [r2, #20]
 80129c0:	f06f 030f 	mvn.w	r3, #15
 80129c4:	e038      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80129c6:	f107 0210 	add.w	r2, r7, #16
 80129ca:	f107 0318 	add.w	r3, r7, #24
 80129ce:	4611      	mov	r1, r2
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fb fd23 	bl	800e41c <snmp_asn1_dec_tlv>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d007      	beq.n	80129ec <snmp_parse_inbound_frame+0x5c4>
 80129dc:	4b18      	ldr	r3, [pc, #96]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129de:	695b      	ldr	r3, [r3, #20]
 80129e0:	3301      	adds	r3, #1
 80129e2:	4a17      	ldr	r2, [pc, #92]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129e4:	6153      	str	r3, [r2, #20]
 80129e6:	f06f 030f 	mvn.w	r3, #15
 80129ea:	e025      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 80129ec:	7c3b      	ldrb	r3, [r7, #16]
 80129ee:	2b30      	cmp	r3, #48	@ 0x30
 80129f0:	d103      	bne.n	80129fa <snmp_parse_inbound_frame+0x5d2>
 80129f2:	8aba      	ldrh	r2, [r7, #20]
 80129f4:	8bfb      	ldrh	r3, [r7, #30]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d907      	bls.n	8012a0a <snmp_parse_inbound_frame+0x5e2>
 80129fa:	4b11      	ldr	r3, [pc, #68]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 80129fc:	695b      	ldr	r3, [r3, #20]
 80129fe:	3301      	adds	r3, #1
 8012a00:	4a0f      	ldr	r2, [pc, #60]	@ (8012a40 <snmp_parse_inbound_frame+0x618>)
 8012a02:	6153      	str	r3, [r2, #20]
 8012a04:	f06f 030f 	mvn.w	r3, #15
 8012a08:	e016      	b.n	8012a38 <snmp_parse_inbound_frame+0x610>
  
  request->inbound_varbind_offset = pbuf_stream.offset;
 8012a0a:	8bba      	ldrh	r2, [r7, #28]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 8012a10:	8bfa      	ldrh	r2, [r7, #30]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012a32:	f000 fdab 	bl	801358c <snmp_vb_enumerator_init>

  return ERR_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	372c      	adds	r7, #44	@ 0x2c
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd90      	pop	{r4, r7, pc}
 8012a40:	20008544 	.word	0x20008544

08012a44 <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b086      	sub	sp, #24
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream* pbuf_stream = &(request->outbound_pbuf_stream);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3348      	adds	r3, #72	@ 0x48
 8012a50:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 8012a52:	2200      	movs	r2, #0
 8012a54:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8012a58:	2000      	movs	r0, #0
 8012a5a:	f003 f85b 	bl	8015b14 <pbuf_alloc>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	645a      	str	r2, [r3, #68]	@ 0x44
  if (request->outbound_pbuf == NULL) {
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d102      	bne.n	8012a72 <snmp_prepare_outbound_frame+0x2e>
    return ERR_MEM;
 8012a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a70:	e10e      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a7a:	891b      	ldrh	r3, [r3, #8]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	6978      	ldr	r0, [r7, #20]
 8012a80:	f000 ffaa 	bl	80139d8 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012a84:	2330      	movs	r3, #48	@ 0x30
 8012a86:	733b      	strb	r3, [r7, #12]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	737b      	strb	r3, [r7, #13]
 8012a8c:	2303      	movs	r3, #3
 8012a8e:	73bb      	strb	r3, [r7, #14]
 8012a90:	2300      	movs	r3, #0
 8012a92:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012a94:	f107 030c 	add.w	r3, r7, #12
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6978      	ldr	r0, [r7, #20]
 8012a9c:	f7fb f9fc 	bl	800de98 <snmp_ans1_enc_tlv>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d002      	beq.n	8012aac <snmp_prepare_outbound_frame+0x68>
 8012aa6:	f06f 030f 	mvn.w	r3, #15
 8012aaa:	e0f1      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012aac:	2302      	movs	r3, #2
 8012aae:	733b      	strb	r3, [r7, #12]
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	737b      	strb	r3, [r7, #13]
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	73bb      	strb	r3, [r7, #14]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	7a9b      	ldrb	r3, [r3, #10]
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	f107 030c 	add.w	r3, r7, #12
 8012ac6:	3304      	adds	r3, #4
 8012ac8:	4619      	mov	r1, r3
 8012aca:	4610      	mov	r0, r2
 8012acc:	f7fb fc3a 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012ad0:	f107 030c 	add.w	r3, r7, #12
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6978      	ldr	r0, [r7, #20]
 8012ad8:	f7fb f9de 	bl	800de98 <snmp_ans1_enc_tlv>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d002      	beq.n	8012ae8 <snmp_prepare_outbound_frame+0xa4>
 8012ae2:	f06f 030f 	mvn.w	r3, #15
 8012ae6:	e0d3      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 8012ae8:	8a39      	ldrh	r1, [r7, #16]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	7a9b      	ldrb	r3, [r3, #10]
 8012aee:	461a      	mov	r2, r3
 8012af0:	6978      	ldr	r0, [r7, #20]
 8012af2:	f7fb fb1c 	bl	800e12e <snmp_asn1_enc_s32t>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <snmp_prepare_outbound_frame+0xbe>
 8012afc:	f06f 030f 	mvn.w	r3, #15
 8012b00:	e0c6      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 8012b02:	2304      	movs	r3, #4
 8012b04:	733b      	strb	r3, [r7, #12]
 8012b06:	2300      	movs	r3, #0
 8012b08:	737b      	strb	r3, [r7, #13]
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	73bb      	strb	r3, [r7, #14]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	8a9b      	ldrh	r3, [r3, #20]
 8012b12:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012b14:	f107 030c 	add.w	r3, r7, #12
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6978      	ldr	r0, [r7, #20]
 8012b1c:	f7fb f9bc 	bl	800de98 <snmp_ans1_enc_tlv>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d002      	beq.n	8012b2c <snmp_prepare_outbound_frame+0xe8>
 8012b26:	f06f 030f 	mvn.w	r3, #15
 8012b2a:	e0b1      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f103 010b 	add.w	r1, r3, #11
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8a9b      	ldrh	r3, [r3, #20]
 8012b36:	461a      	mov	r2, r3
 8012b38:	6978      	ldr	r0, [r7, #20]
 8012b3a:	f7fb fa38 	bl	800dfae <snmp_asn1_enc_raw>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <snmp_prepare_outbound_frame+0x106>
 8012b44:	f06f 030f 	mvn.w	r3, #15
 8012b48:	e0a2      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	889a      	ldrh	r2, [r3, #4]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3, 0);
 8012b54:	23a2      	movs	r3, #162	@ 0xa2
 8012b56:	733b      	strb	r3, [r7, #12]
 8012b58:	2300      	movs	r3, #0
 8012b5a:	737b      	strb	r3, [r7, #13]
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	73bb      	strb	r3, [r7, #14]
 8012b60:	2300      	movs	r3, #0
 8012b62:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012b64:	f107 030c 	add.w	r3, r7, #12
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6978      	ldr	r0, [r7, #20]
 8012b6c:	f7fb f994 	bl	800de98 <snmp_ans1_enc_tlv>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d002      	beq.n	8012b7c <snmp_prepare_outbound_frame+0x138>
 8012b76:	f06f 030f 	mvn.w	r3, #15
 8012b7a:	e089      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	733b      	strb	r3, [r7, #12]
 8012b80:	2300      	movs	r3, #0
 8012b82:	737b      	strb	r3, [r7, #13]
 8012b84:	2300      	movs	r3, #0
 8012b86:	73bb      	strb	r3, [r7, #14]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	699a      	ldr	r2, [r3, #24]
 8012b90:	f107 030c 	add.w	r3, r7, #12
 8012b94:	3304      	adds	r3, #4
 8012b96:	4619      	mov	r1, r3
 8012b98:	4610      	mov	r0, r2
 8012b9a:	f7fb fbd3 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012b9e:	f107 030c 	add.w	r3, r7, #12
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	6978      	ldr	r0, [r7, #20]
 8012ba6:	f7fb f977 	bl	800de98 <snmp_ans1_enc_tlv>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <snmp_prepare_outbound_frame+0x172>
 8012bb0:	f06f 030f 	mvn.w	r3, #15
 8012bb4:	e06c      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 8012bb6:	8a39      	ldrh	r1, [r7, #16]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	699b      	ldr	r3, [r3, #24]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	6978      	ldr	r0, [r7, #20]
 8012bc0:	f7fb fab5 	bl	800e12e <snmp_asn1_enc_s32t>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d002      	beq.n	8012bd0 <snmp_prepare_outbound_frame+0x18c>
 8012bca:	f06f 030f 	mvn.w	r3, #15
 8012bce:	e05f      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	733b      	strb	r3, [r7, #12]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	737b      	strb	r3, [r7, #13]
 8012bd8:	2300      	movs	r3, #0
 8012bda:	73bb      	strb	r3, [r7, #14]
 8012bdc:	2301      	movs	r3, #1
 8012bde:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012be0:	f107 030c 	add.w	r3, r7, #12
 8012be4:	4619      	mov	r1, r3
 8012be6:	6978      	ldr	r0, [r7, #20]
 8012be8:	f7fb f956 	bl	800de98 <snmp_ans1_enc_tlv>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <snmp_prepare_outbound_frame+0x1b4>
 8012bf2:	f06f 030f 	mvn.w	r3, #15
 8012bf6:	e04b      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_status_offset = pbuf_stream->offset;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	889a      	ldrh	r2, [r3, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012c02:	2100      	movs	r1, #0
 8012c04:	6978      	ldr	r0, [r7, #20]
 8012c06:	f000 ff2c 	bl	8013a62 <snmp_pbuf_stream_write>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <snmp_prepare_outbound_frame+0x1d2>
 8012c10:	f06f 030f 	mvn.w	r3, #15
 8012c14:	e03c      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8012c16:	2302      	movs	r3, #2
 8012c18:	733b      	strb	r3, [r7, #12]
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	737b      	strb	r3, [r7, #13]
 8012c1e:	2300      	movs	r3, #0
 8012c20:	73bb      	strb	r3, [r7, #14]
 8012c22:	2301      	movs	r3, #1
 8012c24:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012c26:	f107 030c 	add.w	r3, r7, #12
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	6978      	ldr	r0, [r7, #20]
 8012c2e:	f7fb f933 	bl	800de98 <snmp_ans1_enc_tlv>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d002      	beq.n	8012c3e <snmp_prepare_outbound_frame+0x1fa>
 8012c38:	f06f 030f 	mvn.w	r3, #15
 8012c3c:	e028      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_index_offset = pbuf_stream->offset;
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	889a      	ldrh	r2, [r3, #4]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012c48:	2100      	movs	r1, #0
 8012c4a:	6978      	ldr	r0, [r7, #20]
 8012c4c:	f000 ff09 	bl	8013a62 <snmp_pbuf_stream_write>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d002      	beq.n	8012c5c <snmp_prepare_outbound_frame+0x218>
 8012c56:	f06f 030f 	mvn.w	r3, #15
 8012c5a:	e019      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012c5c:	2330      	movs	r3, #48	@ 0x30
 8012c5e:	733b      	strb	r3, [r7, #12]
 8012c60:	2300      	movs	r3, #0
 8012c62:	737b      	strb	r3, [r7, #13]
 8012c64:	2303      	movs	r3, #3
 8012c66:	73bb      	strb	r3, [r7, #14]
 8012c68:	2300      	movs	r3, #0
 8012c6a:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012c6c:	f107 030c 	add.w	r3, r7, #12
 8012c70:	4619      	mov	r1, r3
 8012c72:	6978      	ldr	r0, [r7, #20]
 8012c74:	f7fb f910 	bl	800de98 <snmp_ans1_enc_tlv>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d002      	beq.n	8012c84 <snmp_prepare_outbound_frame+0x240>
 8012c7e:	f06f 030f 	mvn.w	r3, #15
 8012c82:	e005      	b.n	8012c90 <snmp_prepare_outbound_frame+0x24c>

  request->outbound_varbind_offset = pbuf_stream->offset;
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	889a      	ldrh	r2, [r3, #4]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

  return ERR_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3718      	adds	r7, #24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f103 000c 	add.w	r0, r3, #12
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	7a1b      	ldrb	r3, [r3, #8]
 8012cac:	4619      	mov	r1, r3
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	3306      	adds	r3, #6
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	f7fb fb70 	bl	800e398 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	88da      	ldrh	r2, [r3, #6]
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	4610      	mov	r0, r2
 8012cc4:	f7fb fad4 	bl	800e270 <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d103      	bne.n	8012cda <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	815a      	strh	r2, [r3, #10]
 8012cd8:	e107      	b.n	8012eea <snmp_varbind_length+0x252>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012ce0:	b21b      	sxth	r3, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	da08      	bge.n	8012cf8 <snmp_varbind_length+0x60>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012cec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	815a      	strh	r2, [r3, #10]
 8012cf6:	e0f8      	b.n	8012eea <snmp_varbind_length+0x252>
  } else {
    switch (varbind->type) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012cfe:	3b02      	subs	r3, #2
 8012d00:	2b44      	cmp	r3, #68	@ 0x44
 8012d02:	f200 80ef 	bhi.w	8012ee4 <snmp_varbind_length+0x24c>
 8012d06:	a201      	add	r2, pc, #4	@ (adr r2, 8012d0c <snmp_varbind_length+0x74>)
 8012d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d0c:	08012e21 	.word	0x08012e21
 8012d10:	08012ee5 	.word	0x08012ee5
 8012d14:	08012e6d 	.word	0x08012e6d
 8012d18:	08012e79 	.word	0x08012e79
 8012d1c:	08012e91 	.word	0x08012e91
 8012d20:	08012ee5 	.word	0x08012ee5
 8012d24:	08012ee5 	.word	0x08012ee5
 8012d28:	08012ee5 	.word	0x08012ee5
 8012d2c:	08012ee5 	.word	0x08012ee5
 8012d30:	08012ee5 	.word	0x08012ee5
 8012d34:	08012ee5 	.word	0x08012ee5
 8012d38:	08012ee5 	.word	0x08012ee5
 8012d3c:	08012ee5 	.word	0x08012ee5
 8012d40:	08012ee5 	.word	0x08012ee5
 8012d44:	08012ee5 	.word	0x08012ee5
 8012d48:	08012ee5 	.word	0x08012ee5
 8012d4c:	08012ee5 	.word	0x08012ee5
 8012d50:	08012ee5 	.word	0x08012ee5
 8012d54:	08012ee5 	.word	0x08012ee5
 8012d58:	08012ee5 	.word	0x08012ee5
 8012d5c:	08012ee5 	.word	0x08012ee5
 8012d60:	08012ee5 	.word	0x08012ee5
 8012d64:	08012ee5 	.word	0x08012ee5
 8012d68:	08012ee5 	.word	0x08012ee5
 8012d6c:	08012ee5 	.word	0x08012ee5
 8012d70:	08012ee5 	.word	0x08012ee5
 8012d74:	08012ee5 	.word	0x08012ee5
 8012d78:	08012ee5 	.word	0x08012ee5
 8012d7c:	08012ee5 	.word	0x08012ee5
 8012d80:	08012ee5 	.word	0x08012ee5
 8012d84:	08012ee5 	.word	0x08012ee5
 8012d88:	08012ee5 	.word	0x08012ee5
 8012d8c:	08012ee5 	.word	0x08012ee5
 8012d90:	08012ee5 	.word	0x08012ee5
 8012d94:	08012ee5 	.word	0x08012ee5
 8012d98:	08012ee5 	.word	0x08012ee5
 8012d9c:	08012ee5 	.word	0x08012ee5
 8012da0:	08012ee5 	.word	0x08012ee5
 8012da4:	08012ee5 	.word	0x08012ee5
 8012da8:	08012ee5 	.word	0x08012ee5
 8012dac:	08012ee5 	.word	0x08012ee5
 8012db0:	08012ee5 	.word	0x08012ee5
 8012db4:	08012ee5 	.word	0x08012ee5
 8012db8:	08012ee5 	.word	0x08012ee5
 8012dbc:	08012ee5 	.word	0x08012ee5
 8012dc0:	08012ee5 	.word	0x08012ee5
 8012dc4:	08012ee5 	.word	0x08012ee5
 8012dc8:	08012ee5 	.word	0x08012ee5
 8012dcc:	08012ee5 	.word	0x08012ee5
 8012dd0:	08012ee5 	.word	0x08012ee5
 8012dd4:	08012ee5 	.word	0x08012ee5
 8012dd8:	08012ee5 	.word	0x08012ee5
 8012ddc:	08012ee5 	.word	0x08012ee5
 8012de0:	08012ee5 	.word	0x08012ee5
 8012de4:	08012ee5 	.word	0x08012ee5
 8012de8:	08012ee5 	.word	0x08012ee5
 8012dec:	08012ee5 	.word	0x08012ee5
 8012df0:	08012ee5 	.word	0x08012ee5
 8012df4:	08012ee5 	.word	0x08012ee5
 8012df8:	08012ee5 	.word	0x08012ee5
 8012dfc:	08012ee5 	.word	0x08012ee5
 8012e00:	08012ee5 	.word	0x08012ee5
 8012e04:	08012e6d 	.word	0x08012e6d
 8012e08:	08012e47 	.word	0x08012e47
 8012e0c:	08012e47 	.word	0x08012e47
 8012e10:	08012e47 	.word	0x08012e47
 8012e14:	08012e6d 	.word	0x08012e6d
 8012e18:	08012ee5 	.word	0x08012ee5
 8012e1c:	08012ec1 	.word	0x08012ec1
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e26:	2b04      	cmp	r3, #4
 8012e28:	d002      	beq.n	8012e30 <snmp_varbind_length+0x198>
          return ERR_VAL;
 8012e2a:	f06f 0305 	mvn.w	r3, #5
 8012e2e:	e07f      	b.n	8012f30 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t*) varbind->value), &len->value_value_len);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	330a      	adds	r3, #10
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	4610      	mov	r0, r2
 8012e40:	f7fb fa80 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
        break;
 8012e44:	e051      	b.n	8012eea <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e4c:	2b04      	cmp	r3, #4
 8012e4e:	d002      	beq.n	8012e56 <snmp_varbind_length+0x1be>
          return ERR_VAL;
 8012e50:	f06f 0305 	mvn.w	r3, #5
 8012e54:	e06c      	b.n	8012f30 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t*) varbind->value), &len->value_value_len);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	330a      	adds	r3, #10
 8012e62:	4619      	mov	r1, r3
 8012e64:	4610      	mov	r0, r2
 8012e66:	f7fb fa1f 	bl	800e2a8 <snmp_asn1_enc_u32t_cnt>
        break;
 8012e6a:	e03e      	b.n	8012eea <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	815a      	strh	r2, [r3, #10]
        break;
 8012e76:	e038      	b.n	8012eea <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d002      	beq.n	8012e88 <snmp_varbind_length+0x1f0>
          return ERR_VAL;
 8012e82:	f06f 0305 	mvn.w	r3, #5
 8012e86:	e053      	b.n	8012f30 <snmp_varbind_length+0x298>
        }
        len->value_value_len = 0;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	815a      	strh	r2, [r3, #10]
        break;
 8012e8e:	e02c      	b.n	8012eea <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e96:	f003 0303 	and.w	r3, r3, #3
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <snmp_varbind_length+0x20c>
          return ERR_VAL;
 8012e9e:	f06f 0305 	mvn.w	r3, #5
 8012ea2:	e045      	b.n	8012f30 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_oid_cnt((u32_t*) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012eb0:	089b      	lsrs	r3, r3, #2
 8012eb2:	b299      	uxth	r1, r3
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	330a      	adds	r3, #10
 8012eb8:	461a      	mov	r2, r3
 8012eba:	f7fb fa6d 	bl	800e398 <snmp_asn1_enc_oid_cnt>
        break;
 8012ebe:	e014      	b.n	8012eea <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != (2 * sizeof (u32_t))) {
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012ec6:	2b08      	cmp	r3, #8
 8012ec8:	d002      	beq.n	8012ed0 <snmp_varbind_length+0x238>
          return ERR_VAL;
 8012eca:	f06f 0305 	mvn.w	r3, #5
 8012ece:	e02f      	b.n	8012f30 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u64t_cnt((u32_t*) varbind->value, &len->value_value_len);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	330a      	adds	r3, #10
 8012eda:	4619      	mov	r1, r3
 8012edc:	4610      	mov	r0, r2
 8012ede:	f7fb fa0e 	bl	800e2fe <snmp_asn1_enc_u64t_cnt>
        break;
 8012ee2:	e002      	b.n	8012eea <snmp_varbind_length+0x252>
      default:
        /* unsupported type */
        return ERR_VAL;
 8012ee4:	f06f 0305 	mvn.w	r3, #5
 8012ee8:	e022      	b.n	8012f30 <snmp_varbind_length+0x298>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	895a      	ldrh	r2, [r3, #10]
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	f7fb f9bb 	bl	800e270 <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	791b      	ldrb	r3, [r3, #4]
 8012efe:	461a      	mov	r2, r3
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	88db      	ldrh	r3, [r3, #6]
 8012f04:	4413      	add	r3, r2
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	7a12      	ldrb	r2, [r2, #8]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	895b      	ldrh	r3, [r3, #10]
 8012f14:	4413      	add	r3, r2
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	3302      	adds	r3, #2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	885b      	ldrh	r3, [r3, #2]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	4611      	mov	r1, r2
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7fb f9a1 	bl	800e270 <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind* varbind)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 8012f42:	f107 030c 	add.w	r3, r7, #12
 8012f46:	4619      	mov	r1, r3
 8012f48:	6838      	ldr	r0, [r7, #0]
 8012f4a:	f7ff fea5 	bl	8012c98 <snmp_varbind_length>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 8012f52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d002      	beq.n	8012f60 <snmp_append_outbound_varbind+0x28>
    return err;
 8012f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f5e:	e0f6      	b.n	801314e <snmp_append_outbound_varbind+0x216>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 8012f60:	7b3b      	ldrb	r3, [r7, #12]
 8012f62:	3301      	adds	r3, #1
 8012f64:	89fa      	ldrh	r2, [r7, #14]
 8012f66:	4413      	add	r3, r2
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	88d2      	ldrh	r2, [r2, #6]
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	dd02      	ble.n	8012f76 <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 8012f70:	f06f 0301 	mvn.w	r3, #1
 8012f74:	e0eb      	b.n	801314e <snmp_append_outbound_varbind+0x216>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 8012f76:	2330      	movs	r3, #48	@ 0x30
 8012f78:	763b      	strb	r3, [r7, #24]
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	767b      	strb	r3, [r7, #25]
 8012f7e:	7b3b      	ldrb	r3, [r7, #12]
 8012f80:	76bb      	strb	r3, [r7, #26]
 8012f82:	89fb      	ldrh	r3, [r7, #14]
 8012f84:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012f86:	f107 0318 	add.w	r3, r7, #24
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7fa ff83 	bl	800de98 <snmp_ans1_enc_tlv>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d002      	beq.n	8012f9e <snmp_append_outbound_varbind+0x66>
 8012f98:	f06f 030f 	mvn.w	r3, #15
 8012f9c:	e0d7      	b.n	801314e <snmp_append_outbound_varbind+0x216>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 8012f9e:	2306      	movs	r3, #6
 8012fa0:	763b      	strb	r3, [r7, #24]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	767b      	strb	r3, [r7, #25]
 8012fa6:	7c3b      	ldrb	r3, [r7, #16]
 8012fa8:	76bb      	strb	r3, [r7, #26]
 8012faa:	8a7b      	ldrh	r3, [r7, #18]
 8012fac:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012fae:	f107 0318 	add.w	r3, r7, #24
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f7fa ff6f 	bl	800de98 <snmp_ans1_enc_tlv>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d002      	beq.n	8012fc6 <snmp_append_outbound_varbind+0x8e>
 8012fc0:	f06f 030f 	mvn.w	r3, #15
 8012fc4:	e0c3      	b.n	801314e <snmp_append_outbound_varbind+0x216>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	f103 010c 	add.w	r1, r3, #12
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	7a1b      	ldrb	r3, [r3, #8]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fb f8da 	bl	800e18c <snmp_asn1_enc_oid>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d002      	beq.n	8012fe4 <snmp_append_outbound_varbind+0xac>
 8012fde:	f06f 030f 	mvn.w	r3, #15
 8012fe2:	e0b4      	b.n	801314e <snmp_append_outbound_varbind+0x216>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012fea:	763b      	strb	r3, [r7, #24]
 8012fec:	2300      	movs	r3, #0
 8012fee:	767b      	strb	r3, [r7, #25]
 8012ff0:	7d3b      	ldrb	r3, [r7, #20]
 8012ff2:	76bb      	strb	r3, [r7, #26]
 8012ff4:	8afb      	ldrh	r3, [r7, #22]
 8012ff6:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012ff8:	f107 0318 	add.w	r3, r7, #24
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7fa ff4a 	bl	800de98 <snmp_ans1_enc_tlv>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <snmp_append_outbound_varbind+0xd8>
 801300a:	f06f 030f 	mvn.w	r3, #15
 801300e:	e09e      	b.n	801314e <snmp_append_outbound_varbind+0x216>

  if (len.value_value_len > 0) {
 8013010:	8afb      	ldrh	r3, [r7, #22]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f000 809a 	beq.w	801314c <snmp_append_outbound_varbind+0x214>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801301e:	b21b      	sxth	r3, r3
 8013020:	2b00      	cmp	r3, #0
 8013022:	da0e      	bge.n	8013042 <snmp_append_outbound_varbind+0x10a>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801302a:	8afa      	ldrh	r2, [r7, #22]
 801302c:	4619      	mov	r1, r3
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7fa ffbd 	bl	800dfae <snmp_asn1_enc_raw>
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 8088 	beq.w	801314c <snmp_append_outbound_varbind+0x214>
 801303c:	f06f 030f 	mvn.w	r3, #15
 8013040:	e085      	b.n	801314e <snmp_append_outbound_varbind+0x216>
    } else {
      switch (varbind->type) {
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8013048:	2b46      	cmp	r3, #70	@ 0x46
 801304a:	dc70      	bgt.n	801312e <snmp_append_outbound_varbind+0x1f6>
 801304c:	2b40      	cmp	r3, #64	@ 0x40
 801304e:	da08      	bge.n	8013062 <snmp_append_outbound_varbind+0x12a>
 8013050:	2b06      	cmp	r3, #6
 8013052:	d04c      	beq.n	80130ee <snmp_append_outbound_varbind+0x1b6>
 8013054:	2b06      	cmp	r3, #6
 8013056:	dc6a      	bgt.n	801312e <snmp_append_outbound_varbind+0x1f6>
 8013058:	2b02      	cmp	r3, #2
 801305a:	d017      	beq.n	801308c <snmp_append_outbound_varbind+0x154>
 801305c:	2b04      	cmp	r3, #4
 801305e:	d033      	beq.n	80130c8 <snmp_append_outbound_varbind+0x190>
 8013060:	e065      	b.n	801312e <snmp_append_outbound_varbind+0x1f6>
 8013062:	3b40      	subs	r3, #64	@ 0x40
 8013064:	2b06      	cmp	r3, #6
 8013066:	d862      	bhi.n	801312e <snmp_append_outbound_varbind+0x1f6>
 8013068:	a201      	add	r2, pc, #4	@ (adr r2, 8013070 <snmp_append_outbound_varbind+0x138>)
 801306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801306e:	bf00      	nop
 8013070:	080130c9 	.word	0x080130c9
 8013074:	080130ab 	.word	0x080130ab
 8013078:	080130ab 	.word	0x080130ab
 801307c:	080130ab 	.word	0x080130ab
 8013080:	080130c9 	.word	0x080130c9
 8013084:	0801312f 	.word	0x0801312f
 8013088:	08013113 	.word	0x08013113
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t*) varbind->value)));
 801308c:	8af9      	ldrh	r1, [r7, #22]
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	461a      	mov	r2, r3
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7fb f848 	bl	800e12e <snmp_asn1_enc_s32t>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d04c      	beq.n	801313e <snmp_append_outbound_varbind+0x206>
 80130a4:	f06f 030f 	mvn.w	r3, #15
 80130a8:	e051      	b.n	801314e <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t*) varbind->value)));
 80130aa:	8af9      	ldrh	r1, [r7, #22]
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	461a      	mov	r2, r3
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f7fa ff91 	bl	800dfde <snmp_asn1_enc_u32t>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d03f      	beq.n	8013142 <snmp_append_outbound_varbind+0x20a>
 80130c2:	f06f 030f 	mvn.w	r3, #15
 80130c6:	e042      	b.n	801314e <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80130ce:	8afa      	ldrh	r2, [r7, #22]
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7fa ff6b 	bl	800dfae <snmp_asn1_enc_raw>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <snmp_append_outbound_varbind+0x1ac>
 80130de:	f06f 030f 	mvn.w	r3, #15
 80130e2:	e034      	b.n	801314e <snmp_append_outbound_varbind+0x216>
          len.value_value_len = varbind->value_len;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80130ea:	82fb      	strh	r3, [r7, #22]
          break;
 80130ec:	e02e      	b.n	801314c <snmp_append_outbound_varbind+0x214>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t*) varbind->value, varbind->value_len / sizeof (u32_t)));
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80130fa:	089b      	lsrs	r3, r3, #2
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	461a      	mov	r2, r3
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7fb f843 	bl	800e18c <snmp_asn1_enc_oid>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d01c      	beq.n	8013146 <snmp_append_outbound_varbind+0x20e>
 801310c:	f06f 030f 	mvn.w	r3, #15
 8013110:	e01d      	b.n	801314e <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, (u32_t*) varbind->value));
 8013112:	8af9      	ldrh	r1, [r7, #22]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801311a:	461a      	mov	r2, r3
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7fa ffa3 	bl	800e068 <snmp_asn1_enc_u64t>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d010      	beq.n	801314a <snmp_append_outbound_varbind+0x212>
 8013128:	f06f 030f 	mvn.w	r3, #15
 801312c:	e00f      	b.n	801314e <snmp_append_outbound_varbind+0x216>
          break;
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 801312e:	4b0a      	ldr	r3, [pc, #40]	@ (8013158 <snmp_append_outbound_varbind+0x220>)
 8013130:	f240 521e 	movw	r2, #1310	@ 0x51e
 8013134:	4909      	ldr	r1, [pc, #36]	@ (801315c <snmp_append_outbound_varbind+0x224>)
 8013136:	480a      	ldr	r0, [pc, #40]	@ (8013160 <snmp_append_outbound_varbind+0x228>)
 8013138:	f00f f882 	bl	8022240 <iprintf>
          break;
 801313c:	e006      	b.n	801314c <snmp_append_outbound_varbind+0x214>
          break;
 801313e:	bf00      	nop
 8013140:	e004      	b.n	801314c <snmp_append_outbound_varbind+0x214>
          break;
 8013142:	bf00      	nop
 8013144:	e002      	b.n	801314c <snmp_append_outbound_varbind+0x214>
          break;
 8013146:	bf00      	nop
 8013148:	e000      	b.n	801314c <snmp_append_outbound_varbind+0x214>
          break;
 801314a:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3720      	adds	r7, #32
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	08025c20 	.word	0x08025c20
 801315c:	08025cf4 	.word	0x08025cf4
 8013160:	08025c7c 	.word	0x08025c7c

08013164 <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 8013164:	b590      	push	{r4, r7, lr}
 8013166:	b089      	sub	sp, #36	@ 0x24
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 801316c:	2300      	movs	r3, #0
 801316e:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	7a9b      	ldrb	r3, [r3, #10]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d133      	bne.n	80131e0 <snmp_complete_outbound_frame+0x7c>
    if (request->error_status != SNMP_ERR_NOERROR) {
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	69db      	ldr	r3, [r3, #28]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d044      	beq.n	801320a <snmp_complete_outbound_frame+0xa6>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	69db      	ldr	r3, [r3, #28]
 8013184:	2b12      	cmp	r3, #18
 8013186:	dc18      	bgt.n	80131ba <snmp_complete_outbound_frame+0x56>
 8013188:	2b06      	cmp	r3, #6
 801318a:	db25      	blt.n	80131d8 <snmp_complete_outbound_frame+0x74>
 801318c:	461a      	mov	r2, r3
 801318e:	2301      	movs	r3, #1
 8013190:	fa03 f202 	lsl.w	r2, r3, r2
 8013194:	4b9c      	ldr	r3, [pc, #624]	@ (8013408 <snmp_complete_outbound_frame+0x2a4>)
 8013196:	4013      	ands	r3, r2
 8013198:	2b00      	cmp	r3, #0
 801319a:	bf14      	ite	ne
 801319c:	2301      	movne	r3, #1
 801319e:	2300      	moveq	r3, #0
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d114      	bne.n	80131d0 <snmp_complete_outbound_frame+0x6c>
 80131a6:	f402 53bc 	and.w	r3, r2, #6016	@ 0x1780
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	bf14      	ite	ne
 80131ae:	2301      	movne	r3, #1
 80131b0:	2300      	moveq	r3, #0
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d107      	bne.n	80131c8 <snmp_complete_outbound_frame+0x64>
 80131b8:	e00e      	b.n	80131d8 <snmp_complete_outbound_frame+0x74>
 80131ba:	3bf0      	subs	r3, #240	@ 0xf0
 80131bc:	2b02      	cmp	r3, #2
 80131be:	d80b      	bhi.n	80131d8 <snmp_complete_outbound_frame+0x74>
         * (during processing of frame we already stored them in error_status field, 
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2202      	movs	r2, #2
 80131c4:	61da      	str	r2, [r3, #28]
          break;
 80131c6:	e020      	b.n	801320a <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2203      	movs	r2, #3
 80131cc:	61da      	str	r2, [r3, #28]
          break;
 80131ce:	e01c      	b.n	801320a <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2202      	movs	r2, #2
 80131d4:	61da      	str	r2, [r3, #28]
          break;
 80131d6:	e018      	b.n	801320a <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2205      	movs	r2, #5
 80131dc:	61da      	str	r2, [r3, #28]
          break;
 80131de:	e014      	b.n	801320a <snmp_complete_outbound_frame+0xa6>
       }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	7d9b      	ldrb	r3, [r3, #22]
 80131e4:	2b03      	cmp	r3, #3
 80131e6:	d109      	bne.n	80131fc <snmp_complete_outbound_frame+0x98>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	3bf0      	subs	r3, #240	@ 0xf0
 80131ee:	2b02      	cmp	r3, #2
 80131f0:	d803      	bhi.n	80131fa <snmp_complete_outbound_frame+0x96>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2211      	movs	r2, #17
 80131f6:	61da      	str	r2, [r3, #28]
          break;
 80131f8:	e000      	b.n	80131fc <snmp_complete_outbound_frame+0x98>
        default:
          break;
 80131fa:	bf00      	nop
      }
    }

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	69db      	ldr	r3, [r3, #28]
 8013200:	2bef      	cmp	r3, #239	@ 0xef
 8013202:	dd02      	ble.n	801320a <snmp_complete_outbound_frame+0xa6>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 8013204:	f06f 030f 	mvn.w	r3, #15
 8013208:	e187      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	69db      	ldr	r3, [r3, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d103      	bne.n	801321a <snmp_complete_outbound_frame+0xb6>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	7d9b      	ldrb	r3, [r3, #22]
 8013216:	2b03      	cmp	r3, #3
 8013218:	d131      	bne.n	801327e <snmp_complete_outbound_frame+0x11a>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013226:	f107 000c 	add.w	r0, r7, #12
 801322a:	f000 fbd5 	bl	80139d8 <snmp_pbuf_stream_init>
 801322e:	4603      	mov	r3, r0
 8013230:	2b00      	cmp	r3, #0
 8013232:	d002      	beq.n	801323a <snmp_complete_outbound_frame+0xd6>
 8013234:	f06f 030f 	mvn.w	r3, #15
 8013238:	e16f      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801324e:	891a      	ldrh	r2, [r3, #8]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013256:	1ad3      	subs	r3, r2, r3
 8013258:	b29b      	uxth	r3, r3
 801325a:	4622      	mov	r2, r4
 801325c:	f000 fbbc 	bl	80139d8 <snmp_pbuf_stream_init>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d002      	beq.n	801326c <snmp_complete_outbound_frame+0x108>
 8013266:	f06f 030f 	mvn.w	r3, #15
 801326a:	e156      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8013272:	f107 030c 	add.w	r3, r7, #12
 8013276:	2200      	movs	r2, #0
 8013278:	4618      	mov	r0, r3
 801327a:	f000 fc33 	bl	8013ae4 <snmp_pbuf_stream_writeto>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8013284:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8013286:	2330      	movs	r3, #48	@ 0x30
 8013288:	753b      	strb	r3, [r7, #20]
 801328a:	2300      	movs	r3, #0
 801328c:	757b      	strb	r3, [r7, #21]
 801328e:	2303      	movs	r3, #3
 8013290:	75bb      	strb	r3, [r7, #22]
 8013292:	7ffb      	ldrb	r3, [r7, #31]
 8013294:	b29a      	uxth	r2, r3
 8013296:	8bbb      	ldrh	r3, [r7, #28]
 8013298:	4413      	add	r3, r2
 801329a:	b29b      	uxth	r3, r3
 801329c:	3b04      	subs	r3, #4
 801329e:	b29b      	uxth	r3, r3
 80132a0:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132b0:	891b      	ldrh	r3, [r3, #8]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f000 fb90 	bl	80139d8 <snmp_pbuf_stream_init>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d002      	beq.n	80132c4 <snmp_complete_outbound_frame+0x160>
 80132be:	f06f 030f 	mvn.w	r3, #15
 80132c2:	e12a      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	3348      	adds	r3, #72	@ 0x48
 80132c8:	f107 0214 	add.w	r2, r7, #20
 80132cc:	4611      	mov	r1, r2
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fa fde2 	bl	800de98 <snmp_ans1_enc_tlv>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d002      	beq.n	80132e0 <snmp_complete_outbound_frame+0x17c>
 80132da:	f06f 030f 	mvn.w	r3, #15
 80132de:	e11c      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3,
 80132e0:	23a2      	movs	r3, #162	@ 0xa2
 80132e2:	753b      	strb	r3, [r7, #20]
 80132e4:	2300      	movs	r3, #0
 80132e6:	757b      	strb	r3, [r7, #21]
 80132e8:	2303      	movs	r3, #3
 80132ea:	75bb      	strb	r3, [r7, #22]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80132f2:	8bba      	ldrh	r2, [r7, #28]
 80132f4:	1ad3      	subs	r3, r2, r3
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	3b04      	subs	r3, #4
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	833b      	strh	r3, [r7, #24]
      frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801330a:	4619      	mov	r1, r3
 801330c:	4610      	mov	r0, r2
 801330e:	f000 fc80 	bl	8013c12 <snmp_pbuf_stream_seek_abs>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <snmp_complete_outbound_frame+0x1ba>
 8013318:	f06f 030f 	mvn.w	r3, #15
 801331c:	e0fd      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	3348      	adds	r3, #72	@ 0x48
 8013322:	f107 0214 	add.w	r2, r7, #20
 8013326:	4611      	mov	r1, r2
 8013328:	4618      	mov	r0, r3
 801332a:	f7fa fdb5 	bl	800de98 <snmp_ans1_enc_tlv>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d002      	beq.n	801333a <snmp_complete_outbound_frame+0x1d6>
 8013334:	f06f 030f 	mvn.w	r3, #15
 8013338:	e0ef      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>

  /* process and encode final error status */
  if (request->error_status != 0) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	69db      	ldr	r3, [r3, #28]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d066      	beq.n	8013410 <snmp_complete_outbound_frame+0x2ac>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	69db      	ldr	r3, [r3, #28]
 8013346:	f107 020a 	add.w	r2, r7, #10
 801334a:	4611      	mov	r1, r2
 801334c:	4618      	mov	r0, r3
 801334e:	f7fa fff9 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 8013352:	897b      	ldrh	r3, [r7, #10]
 8013354:	2b01      	cmp	r3, #1
 8013356:	d002      	beq.n	801335e <snmp_complete_outbound_frame+0x1fa>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 8013358:	f06f 030f 	mvn.w	r3, #15
 801335c:	e0dd      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801336a:	4619      	mov	r1, r3
 801336c:	4610      	mov	r0, r2
 801336e:	f000 fc50 	bl	8013c12 <snmp_pbuf_stream_seek_abs>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <snmp_complete_outbound_frame+0x21a>
 8013378:	f06f 030f 	mvn.w	r3, #15
 801337c:	e0cd      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8013384:	8979      	ldrh	r1, [r7, #10]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	69db      	ldr	r3, [r3, #28]
 801338a:	461a      	mov	r2, r3
 801338c:	f7fa fecf 	bl	800e12e <snmp_asn1_enc_s32t>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d002      	beq.n	801339c <snmp_complete_outbound_frame+0x238>
 8013396:	f06f 030f 	mvn.w	r3, #15
 801339a:	e0be      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	2b03      	cmp	r3, #3
 80133a2:	d012      	beq.n	80133ca <snmp_complete_outbound_frame+0x266>
 80133a4:	2b03      	cmp	r3, #3
 80133a6:	dc16      	bgt.n	80133d6 <snmp_complete_outbound_frame+0x272>
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d002      	beq.n	80133b2 <snmp_complete_outbound_frame+0x24e>
 80133ac:	2b02      	cmp	r3, #2
 80133ae:	d006      	beq.n	80133be <snmp_complete_outbound_frame+0x25a>
 80133b0:	e011      	b.n	80133d6 <snmp_complete_outbound_frame+0x272>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 80133b2:	4b16      	ldr	r3, [pc, #88]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133b6:	3301      	adds	r3, #1
 80133b8:	4a14      	ldr	r2, [pc, #80]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133ba:	6493      	str	r3, [r2, #72]	@ 0x48
        break;
 80133bc:	e011      	b.n	80133e2 <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 80133be:	4b13      	ldr	r3, [pc, #76]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133c2:	3301      	adds	r3, #1
 80133c4:	4a11      	ldr	r2, [pc, #68]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
 80133c8:	e00b      	b.n	80133e2 <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 80133ca:	4b10      	ldr	r3, [pc, #64]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133ce:	3301      	adds	r3, #1
 80133d0:	4a0e      	ldr	r2, [pc, #56]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133d2:	6513      	str	r3, [r2, #80]	@ 0x50
        break;
 80133d4:	e005      	b.n	80133e2 <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 80133d6:	4b0d      	ldr	r3, [pc, #52]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80133da:	3301      	adds	r3, #1
 80133dc:	4a0b      	ldr	r2, [pc, #44]	@ (801340c <snmp_complete_outbound_frame+0x2a8>)
 80133de:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80133e0:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	69db      	ldr	r3, [r3, #28]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d103      	bne.n	80133f2 <snmp_complete_outbound_frame+0x28e>
      request->error_index = 0; /* defined by RFC 1157 */
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2200      	movs	r2, #0
 80133ee:	621a      	str	r2, [r3, #32]
 80133f0:	e021      	b.n	8013436 <snmp_complete_outbound_frame+0x2d2>
    } else if (request->error_index == 0) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6a1b      	ldr	r3, [r3, #32]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d11d      	bne.n	8013436 <snmp_complete_outbound_frame+0x2d2>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80133fe:	461a      	mov	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	621a      	str	r2, [r3, #32]
 8013404:	e017      	b.n	8013436 <snmp_complete_outbound_frame+0x2d2>
 8013406:	bf00      	nop
 8013408:	00070840 	.word	0x00070840
 801340c:	20008544 	.word	0x20008544
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	7d9b      	ldrb	r3, [r3, #22]
 8013414:	2b03      	cmp	r3, #3
 8013416:	d107      	bne.n	8013428 <snmp_complete_outbound_frame+0x2c4>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 8013418:	4b42      	ldr	r3, [pc, #264]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 801341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8013420:	4413      	add	r3, r2
 8013422:	4a40      	ldr	r2, [pc, #256]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 8013424:	6313      	str	r3, [r2, #48]	@ 0x30
 8013426:	e006      	b.n	8013436 <snmp_complete_outbound_frame+0x2d2>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 8013428:	4b3e      	ldr	r3, [pc, #248]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 801342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8013430:	4413      	add	r3, r2
 8013432:	4a3c      	ldr	r2, [pc, #240]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 8013434:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a1b      	ldr	r3, [r3, #32]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d02c      	beq.n	8013498 <snmp_complete_outbound_frame+0x334>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6a1b      	ldr	r3, [r3, #32]
 8013442:	f107 0208 	add.w	r2, r7, #8
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f7fa ff7b 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 801344e:	893b      	ldrh	r3, [r7, #8]
 8013450:	2b01      	cmp	r3, #1
 8013452:	d002      	beq.n	801345a <snmp_complete_outbound_frame+0x2f6>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 8013454:	f06f 0305 	mvn.w	r3, #5
 8013458:	e05f      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013466:	4619      	mov	r1, r3
 8013468:	4610      	mov	r0, r2
 801346a:	f000 fbd2 	bl	8013c12 <snmp_pbuf_stream_seek_abs>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <snmp_complete_outbound_frame+0x316>
 8013474:	f06f 030f 	mvn.w	r3, #15
 8013478:	e04f      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8013480:	8939      	ldrh	r1, [r7, #8]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6a1b      	ldr	r3, [r3, #32]
 8013486:	461a      	mov	r2, r3
 8013488:	f7fa fe51 	bl	800e12e <snmp_asn1_enc_s32t>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d002      	beq.n	8013498 <snmp_complete_outbound_frame+0x334>
 8013492:	f06f 030f 	mvn.w	r3, #15
 8013496:	e040      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 8013498:	2330      	movs	r3, #48	@ 0x30
 801349a:	753b      	strb	r3, [r7, #20]
 801349c:	2300      	movs	r3, #0
 801349e:	757b      	strb	r3, [r7, #21]
 80134a0:	2303      	movs	r3, #3
 80134a2:	75bb      	strb	r3, [r7, #22]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80134aa:	8bba      	ldrh	r2, [r7, #28]
 80134ac:	1ad3      	subs	r3, r2, r3
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80134be:	3b04      	subs	r3, #4
 80134c0:	4619      	mov	r1, r3
 80134c2:	4610      	mov	r0, r2
 80134c4:	f000 fba5 	bl	8013c12 <snmp_pbuf_stream_seek_abs>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <snmp_complete_outbound_frame+0x370>
 80134ce:	f06f 030f 	mvn.w	r3, #15
 80134d2:	e022      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	3348      	adds	r3, #72	@ 0x48
 80134d8:	f107 0214 	add.w	r2, r7, #20
 80134dc:	4611      	mov	r1, r2
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fa fcda 	bl	800de98 <snmp_ans1_enc_tlv>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <snmp_complete_outbound_frame+0x38c>
 80134ea:	f06f 030f 	mvn.w	r3, #15
 80134ee:	e014      	b.n	801351a <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                  request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80134f4:	7ffb      	ldrb	r3, [r7, #31]
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	8bbb      	ldrh	r3, [r7, #28]
 80134fa:	4413      	add	r3, r2
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	4619      	mov	r1, r3
 8013500:	f002 fd0c 	bl	8015f1c <pbuf_realloc>

  snmp_stats.outgetresponses++;
 8013504:	4b07      	ldr	r3, [pc, #28]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 8013506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013508:	3301      	adds	r3, #1
 801350a:	4a06      	ldr	r2, [pc, #24]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 801350c:	6653      	str	r3, [r2, #100]	@ 0x64
  snmp_stats.outpkts++;
 801350e:	4b05      	ldr	r3, [pc, #20]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	3301      	adds	r3, #1
 8013514:	4a03      	ldr	r2, [pc, #12]	@ (8013524 <snmp_complete_outbound_frame+0x3c0>)
 8013516:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 8013518:	2300      	movs	r3, #0
}
 801351a:	4618      	mov	r0, r3
 801351c:	3724      	adds	r7, #36	@ 0x24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd90      	pop	{r4, r7, pc}
 8013522:	bf00      	nop
 8013524:	20008544 	.word	0x20008544

08013528 <snmp_execute_write_callbacks>:

static void 
snmp_execute_write_callbacks(struct snmp_request *request)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b0bd      	sub	sp, #244	@ 0xf4
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801353c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8013540:	f000 f824 	bl	801358c <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 8013544:	2300      	movs	r3, #0
 8013546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 801354a:	e00a      	b.n	8013562 <snmp_execute_write_callbacks+0x3a>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 801354c:	4b0d      	ldr	r3, [pc, #52]	@ (8013584 <snmp_execute_write_callbacks+0x5c>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	7c39      	ldrb	r1, [r7, #16]
 8013552:	4a0d      	ldr	r2, [pc, #52]	@ (8013588 <snmp_execute_write_callbacks+0x60>)
 8013554:	6814      	ldr	r4, [r2, #0]
 8013556:	f107 0208 	add.w	r2, r7, #8
 801355a:	f102 000c 	add.w	r0, r2, #12
 801355e:	4622      	mov	r2, r4
 8013560:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 8013562:	f107 0208 	add.w	r2, r7, #8
 8013566:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801356a:	4611      	mov	r1, r2
 801356c:	4618      	mov	r0, r3
 801356e:	f000 f825 	bl	80135bc <snmp_vb_enumerator_get_next>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d0e9      	beq.n	801354c <snmp_execute_write_callbacks+0x24>
  }
}
 8013578:	bf00      	nop
 801357a:	bf00      	nop
 801357c:	37f4      	adds	r7, #244	@ 0xf4
 801357e:	46bd      	mov	sp, r7
 8013580:	bd90      	pop	{r4, r7, pc}
 8013582:	bf00      	nop
 8013584:	200085e4 	.word	0x200085e4
 8013588:	200085e8 	.word	0x200085e8

0801358c <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator* enumerator, struct pbuf* p, u16_t offset, u16_t length)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	4611      	mov	r1, r2
 8013598:	461a      	mov	r2, r3
 801359a:	460b      	mov	r3, r1
 801359c:	80fb      	strh	r3, [r7, #6]
 801359e:	4613      	mov	r3, r2
 80135a0:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	88bb      	ldrh	r3, [r7, #4]
 80135a6:	88fa      	ldrh	r2, [r7, #6]
 80135a8:	68b9      	ldr	r1, [r7, #8]
 80135aa:	f000 fa15 	bl	80139d8 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2200      	movs	r2, #0
 80135b2:	811a      	strh	r2, [r3, #8]
}
 80135b4:	bf00      	nop
 80135b6:	3710      	adds	r7, #16
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator* enumerator, struct snmp_varbind* varbind)
{
 80135bc:	b590      	push	{r4, r7, lr}
 80135be:	b089      	sub	sp, #36	@ 0x24
 80135c0:	af02      	add	r7, sp, #8
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;
  
  if (enumerator->pbuf_stream.length == 0)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	88db      	ldrh	r3, [r3, #6]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <snmp_vb_enumerator_get_next+0x16>
  {
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e1fc      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  }
  enumerator->varbind_count++;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	891b      	ldrh	r3, [r3, #8]
 80135d6:	3301      	adds	r3, #1
 80135d8:	b29a      	uxth	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f107 020c 	add.w	r2, r7, #12
 80135e4:	4611      	mov	r1, r2
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fa ff18 	bl	800e41c <snmp_asn1_dec_tlv>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d006      	beq.n	8013600 <snmp_vb_enumerator_get_next+0x44>
 80135f2:	4bb9      	ldr	r3, [pc, #740]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80135f4:	695b      	ldr	r3, [r3, #20]
 80135f6:	3301      	adds	r3, #1
 80135f8:	4ab7      	ldr	r2, [pc, #732]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80135fa:	6153      	str	r3, [r2, #20]
 80135fc:	2302      	movs	r3, #2
 80135fe:	e1e5      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8013600:	7b3b      	ldrb	r3, [r7, #12]
 8013602:	2b30      	cmp	r3, #48	@ 0x30
 8013604:	d104      	bne.n	8013610 <snmp_vb_enumerator_get_next+0x54>
 8013606:	8a3a      	ldrh	r2, [r7, #16]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	88db      	ldrh	r3, [r3, #6]
 801360c:	429a      	cmp	r2, r3
 801360e:	d906      	bls.n	801361e <snmp_vb_enumerator_get_next+0x62>
 8013610:	4bb1      	ldr	r3, [pc, #708]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013612:	695b      	ldr	r3, [r3, #20]
 8013614:	3301      	adds	r3, #1
 8013616:	4ab0      	ldr	r2, [pc, #704]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013618:	6153      	str	r3, [r2, #20]
 801361a:	2302      	movs	r3, #2
 801361c:	e1d6      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  varbind_len = tlv.value_len;
 801361e:	8a3b      	ldrh	r3, [r7, #16]
 8013620:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f107 020c 	add.w	r2, r7, #12
 8013628:	4611      	mov	r1, r2
 801362a:	4618      	mov	r0, r3
 801362c:	f7fa fef6 	bl	800e41c <snmp_asn1_dec_tlv>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d006      	beq.n	8013644 <snmp_vb_enumerator_get_next+0x88>
 8013636:	4ba8      	ldr	r3, [pc, #672]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013638:	695b      	ldr	r3, [r3, #20]
 801363a:	3301      	adds	r3, #1
 801363c:	4aa6      	ldr	r2, [pc, #664]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 801363e:	6153      	str	r3, [r2, #20]
 8013640:	2302      	movs	r3, #2
 8013642:	e1c3      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 8013644:	7b3b      	ldrb	r3, [r7, #12]
 8013646:	2b06      	cmp	r3, #6
 8013648:	d10d      	bne.n	8013666 <snmp_vb_enumerator_get_next+0xaa>
 801364a:	7b7b      	ldrb	r3, [r7, #13]
 801364c:	461a      	mov	r2, r3
 801364e:	7bbb      	ldrb	r3, [r7, #14]
 8013650:	4413      	add	r3, r2
 8013652:	8a3a      	ldrh	r2, [r7, #16]
 8013654:	441a      	add	r2, r3
 8013656:	8afb      	ldrh	r3, [r7, #22]
 8013658:	429a      	cmp	r2, r3
 801365a:	da04      	bge.n	8013666 <snmp_vb_enumerator_get_next+0xaa>
 801365c:	8a3a      	ldrh	r2, [r7, #16]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	88db      	ldrh	r3, [r3, #6]
 8013662:	429a      	cmp	r2, r3
 8013664:	d306      	bcc.n	8013674 <snmp_vb_enumerator_get_next+0xb8>
 8013666:	4b9c      	ldr	r3, [pc, #624]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013668:	695b      	ldr	r3, [r3, #20]
 801366a:	3301      	adds	r3, #1
 801366c:	4a9a      	ldr	r2, [pc, #616]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 801366e:	6153      	str	r3, [r2, #20]
 8013670:	2302      	movs	r3, #2
 8013672:	e1ab      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
   
  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	8a39      	ldrh	r1, [r7, #16]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	f103 020c 	add.w	r2, r3, #12
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	3308      	adds	r3, #8
 8013682:	2432      	movs	r4, #50	@ 0x32
 8013684:	9400      	str	r4, [sp, #0]
 8013686:	f7fb f872 	bl	800e76e <snmp_asn1_dec_oid>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d006      	beq.n	801369e <snmp_vb_enumerator_get_next+0xe2>
 8013690:	4b91      	ldr	r3, [pc, #580]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013692:	695b      	ldr	r3, [r3, #20]
 8013694:	3301      	adds	r3, #1
 8013696:	4a90      	ldr	r2, [pc, #576]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013698:	6153      	str	r3, [r2, #20]
 801369a:	2302      	movs	r3, #2
 801369c:	e196      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801369e:	7b7b      	ldrb	r3, [r7, #13]
 80136a0:	461a      	mov	r2, r3
 80136a2:	7bbb      	ldrb	r3, [r7, #14]
 80136a4:	4413      	add	r3, r2
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	8a3b      	ldrh	r3, [r7, #16]
 80136aa:	4413      	add	r3, r2
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	8afa      	ldrh	r2, [r7, #22]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f107 020c 	add.w	r2, r7, #12
 80136ba:	4611      	mov	r1, r2
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fa fead 	bl	800e41c <snmp_asn1_dec_tlv>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <snmp_vb_enumerator_get_next+0x11a>
 80136c8:	4b83      	ldr	r3, [pc, #524]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80136ca:	695b      	ldr	r3, [r3, #20]
 80136cc:	3301      	adds	r3, #1
 80136ce:	4a82      	ldr	r2, [pc, #520]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80136d0:	6153      	str	r3, [r2, #20]
 80136d2:	2302      	movs	r3, #2
 80136d4:	e17a      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 80136d6:	7b7b      	ldrb	r3, [r7, #13]
 80136d8:	461a      	mov	r2, r3
 80136da:	7bbb      	ldrb	r3, [r7, #14]
 80136dc:	4413      	add	r3, r2
 80136de:	8a3a      	ldrh	r2, [r7, #16]
 80136e0:	441a      	add	r2, r3
 80136e2:	8afb      	ldrh	r3, [r7, #22]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d104      	bne.n	80136f2 <snmp_vb_enumerator_get_next+0x136>
 80136e8:	8a3a      	ldrh	r2, [r7, #16]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	88db      	ldrh	r3, [r3, #6]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d906      	bls.n	8013700 <snmp_vb_enumerator_get_next+0x144>
 80136f2:	4b79      	ldr	r3, [pc, #484]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80136f4:	695b      	ldr	r3, [r3, #20]
 80136f6:	3301      	adds	r3, #1
 80136f8:	4a77      	ldr	r2, [pc, #476]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80136fa:	6153      	str	r3, [r2, #20]
 80136fc:	2302      	movs	r3, #2
 80136fe:	e165      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
  varbind->type = tlv.type;
 8013700:	7b3a      	ldrb	r2, [r7, #12]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801370e:	2b00      	cmp	r3, #0
 8013710:	f000 814d 	beq.w	80139ae <snmp_vb_enumerator_get_next+0x3f2>
    switch (varbind->type) {
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 801371a:	3b02      	subs	r3, #2
 801371c:	2b44      	cmp	r3, #68	@ 0x44
 801371e:	f200 813f 	bhi.w	80139a0 <snmp_vb_enumerator_get_next+0x3e4>
 8013722:	a201      	add	r2, pc, #4	@ (adr r2, 8013728 <snmp_vb_enumerator_get_next+0x16c>)
 8013724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013728:	0801383d 	.word	0x0801383d
 801372c:	080139a1 	.word	0x080139a1
 8013730:	08013899 	.word	0x08013899
 8013734:	080138dd 	.word	0x080138dd
 8013738:	080138e7 	.word	0x080138e7
 801373c:	080139a1 	.word	0x080139a1
 8013740:	080139a1 	.word	0x080139a1
 8013744:	080139a1 	.word	0x080139a1
 8013748:	080139a1 	.word	0x080139a1
 801374c:	080139a1 	.word	0x080139a1
 8013750:	080139a1 	.word	0x080139a1
 8013754:	080139a1 	.word	0x080139a1
 8013758:	080139a1 	.word	0x080139a1
 801375c:	080139a1 	.word	0x080139a1
 8013760:	080139a1 	.word	0x080139a1
 8013764:	080139a1 	.word	0x080139a1
 8013768:	080139a1 	.word	0x080139a1
 801376c:	080139a1 	.word	0x080139a1
 8013770:	080139a1 	.word	0x080139a1
 8013774:	080139a1 	.word	0x080139a1
 8013778:	080139a1 	.word	0x080139a1
 801377c:	080139a1 	.word	0x080139a1
 8013780:	080139a1 	.word	0x080139a1
 8013784:	080139a1 	.word	0x080139a1
 8013788:	080139a1 	.word	0x080139a1
 801378c:	080139a1 	.word	0x080139a1
 8013790:	080139a1 	.word	0x080139a1
 8013794:	080139a1 	.word	0x080139a1
 8013798:	080139a1 	.word	0x080139a1
 801379c:	080139a1 	.word	0x080139a1
 80137a0:	080139a1 	.word	0x080139a1
 80137a4:	080139a1 	.word	0x080139a1
 80137a8:	080139a1 	.word	0x080139a1
 80137ac:	080139a1 	.word	0x080139a1
 80137b0:	080139a1 	.word	0x080139a1
 80137b4:	080139a1 	.word	0x080139a1
 80137b8:	080139a1 	.word	0x080139a1
 80137bc:	080139a1 	.word	0x080139a1
 80137c0:	080139a1 	.word	0x080139a1
 80137c4:	080139a1 	.word	0x080139a1
 80137c8:	080139a1 	.word	0x080139a1
 80137cc:	080139a1 	.word	0x080139a1
 80137d0:	080139a1 	.word	0x080139a1
 80137d4:	080139a1 	.word	0x080139a1
 80137d8:	080139a1 	.word	0x080139a1
 80137dc:	080139a1 	.word	0x080139a1
 80137e0:	080139a1 	.word	0x080139a1
 80137e4:	080139a1 	.word	0x080139a1
 80137e8:	080139a1 	.word	0x080139a1
 80137ec:	080139a1 	.word	0x080139a1
 80137f0:	080139a1 	.word	0x080139a1
 80137f4:	080139a1 	.word	0x080139a1
 80137f8:	080139a1 	.word	0x080139a1
 80137fc:	080139a1 	.word	0x080139a1
 8013800:	080139a1 	.word	0x080139a1
 8013804:	080139a1 	.word	0x080139a1
 8013808:	080139a1 	.word	0x080139a1
 801380c:	080139a1 	.word	0x080139a1
 8013810:	080139a1 	.word	0x080139a1
 8013814:	080139a1 	.word	0x080139a1
 8013818:	080139a1 	.word	0x080139a1
 801381c:	080139a1 	.word	0x080139a1
 8013820:	08013935 	.word	0x08013935
 8013824:	0801386b 	.word	0x0801386b
 8013828:	0801386b 	.word	0x0801386b
 801382c:	0801386b 	.word	0x0801386b
 8013830:	08013899 	.word	0x08013899
 8013834:	080139a1 	.word	0x080139a1
 8013838:	08013973 	.word	0x08013973
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t*)varbind->value));
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	8a39      	ldrh	r1, [r7, #16]
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013846:	461a      	mov	r2, r3
 8013848:	f7fa ff20 	bl	800e68c <snmp_asn1_dec_s32t>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d006      	beq.n	8013860 <snmp_vb_enumerator_get_next+0x2a4>
 8013852:	4b21      	ldr	r3, [pc, #132]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013854:	695b      	ldr	r3, [r3, #20]
 8013856:	3301      	adds	r3, #1
 8013858:	4a1f      	ldr	r2, [pc, #124]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 801385a:	6153      	str	r3, [r2, #20]
 801385c:	2302      	movs	r3, #2
 801385e:	e0b5      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(s32_t*);
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	2204      	movs	r2, #4
 8013864:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8013868:	e0af      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	8a39      	ldrh	r1, [r7, #16]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013874:	461a      	mov	r2, r3
 8013876:	f7fa fe50 	bl	800e51a <snmp_asn1_dec_u32t>
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d006      	beq.n	801388e <snmp_vb_enumerator_get_next+0x2d2>
 8013880:	4b15      	ldr	r3, [pc, #84]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	3301      	adds	r3, #1
 8013886:	4a14      	ldr	r2, [pc, #80]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 8013888:	6153      	str	r3, [r2, #20]
 801388a:	2302      	movs	r3, #2
 801388c:	e09e      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(u32_t*);
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	2204      	movs	r2, #4
 8013892:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8013896:	e098      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	8a39      	ldrh	r1, [r7, #16]
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	33d6      	adds	r3, #214	@ 0xd6
 80138a6:	24c8      	movs	r4, #200	@ 0xc8
 80138a8:	9400      	str	r4, [sp, #0]
 80138aa:	f7fb f82e 	bl	800e90a <snmp_asn1_dec_raw>
 80138ae:	4603      	mov	r3, r0
 80138b0:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 80138b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80138b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ba:	d101      	bne.n	80138c0 <snmp_vb_enumerator_get_next+0x304>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 80138bc:	2303      	movs	r3, #3
 80138be:	e085      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 80138c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d07d      	beq.n	80139c4 <snmp_vb_enumerator_get_next+0x408>
 80138c8:	4b03      	ldr	r3, [pc, #12]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80138ca:	695b      	ldr	r3, [r3, #20]
 80138cc:	3301      	adds	r3, #1
 80138ce:	4a02      	ldr	r2, [pc, #8]	@ (80138d8 <snmp_vb_enumerator_get_next+0x31c>)
 80138d0:	6153      	str	r3, [r2, #20]
 80138d2:	2302      	movs	r3, #2
 80138d4:	e07a      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
 80138d6:	bf00      	nop
 80138d8:	20008544 	.word	0x20008544
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	2200      	movs	r2, #0
 80138e0:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80138e4:	e071      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	8a39      	ldrh	r1, [r7, #16]
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80138f0:	f107 030c 	add.w	r3, r7, #12
 80138f4:	3302      	adds	r3, #2
 80138f6:	2432      	movs	r4, #50	@ 0x32
 80138f8:	9400      	str	r4, [sp, #0]
 80138fa:	f7fa ff38 	bl	800e76e <snmp_asn1_dec_oid>
 80138fe:	4603      	mov	r3, r0
 8013900:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 8013902:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390a:	d101      	bne.n	8013910 <snmp_vb_enumerator_get_next+0x354>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 801390c:	2303      	movs	r3, #3
 801390e:	e05d      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 8013910:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d006      	beq.n	8013926 <snmp_vb_enumerator_get_next+0x36a>
 8013918:	4b2e      	ldr	r3, [pc, #184]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 801391a:	695b      	ldr	r3, [r3, #20]
 801391c:	3301      	adds	r3, #1
 801391e:	4a2d      	ldr	r2, [pc, #180]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 8013920:	6153      	str	r3, [r2, #20]
 8013922:	2302      	movs	r3, #2
 8013924:	e052      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 8013926:	7bbb      	ldrb	r3, [r7, #14]
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	b29a      	uxth	r2, r3
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8013932:	e04a      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 8013934:	8a3b      	ldrh	r3, [r7, #16]
 8013936:	2b04      	cmp	r3, #4
 8013938:	d114      	bne.n	8013964 <snmp_vb_enumerator_get_next+0x3a8>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	8a39      	ldrh	r1, [r7, #16]
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	33d6      	adds	r3, #214	@ 0xd6
 8013948:	24c8      	movs	r4, #200	@ 0xc8
 801394a:	9400      	str	r4, [sp, #0]
 801394c:	f7fa ffdd 	bl	800e90a <snmp_asn1_dec_raw>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d038      	beq.n	80139c8 <snmp_vb_enumerator_get_next+0x40c>
 8013956:	4b1f      	ldr	r3, [pc, #124]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	3301      	adds	r3, #1
 801395c:	4a1d      	ldr	r2, [pc, #116]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 801395e:	6153      	str	r3, [r2, #20]
 8013960:	2302      	movs	r3, #2
 8013962:	e033      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        } else {
          VB_PARSE_ASSERT(0);
 8013964:	4b1b      	ldr	r3, [pc, #108]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 8013966:	695b      	ldr	r3, [r3, #20]
 8013968:	3301      	adds	r3, #1
 801396a:	4a1a      	ldr	r2, [pc, #104]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 801396c:	6153      	str	r3, [r2, #20]
 801396e:	2302      	movs	r3, #2
 8013970:	e02c      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        }
        break;
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	8a39      	ldrh	r1, [r7, #16]
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801397c:	461a      	mov	r2, r3
 801397e:	f7fa fe1f 	bl	800e5c0 <snmp_asn1_dec_u64t>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d006      	beq.n	8013996 <snmp_vb_enumerator_get_next+0x3da>
 8013988:	4b12      	ldr	r3, [pc, #72]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 801398a:	695b      	ldr	r3, [r3, #20]
 801398c:	3301      	adds	r3, #1
 801398e:	4a11      	ldr	r2, [pc, #68]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 8013990:	6153      	str	r3, [r2, #20]
 8013992:	2302      	movs	r3, #2
 8013994:	e01a      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = 2 * sizeof(u32_t*);
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	2208      	movs	r2, #8
 801399a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 801399e:	e014      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
      default:
        VB_PARSE_ASSERT(0);
 80139a0:	4b0c      	ldr	r3, [pc, #48]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 80139a2:	695b      	ldr	r3, [r3, #20]
 80139a4:	3301      	adds	r3, #1
 80139a6:	4a0b      	ldr	r2, [pc, #44]	@ (80139d4 <snmp_vb_enumerator_get_next+0x418>)
 80139a8:	6153      	str	r3, [r2, #20]
 80139aa:	2302      	movs	r3, #2
 80139ac:	e00e      	b.n	80139cc <snmp_vb_enumerator_get_next+0x410>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8a3a      	ldrh	r2, [r7, #16]
 80139b2:	4611      	mov	r1, r2
 80139b4:	4618      	mov	r0, r3
 80139b6:	f000 f905 	bl	8013bc4 <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 80139ba:	8a3a      	ldrh	r2, [r7, #16]
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 80139c2:	e002      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
        break;
 80139c4:	bf00      	nop
 80139c6:	e000      	b.n	80139ca <snmp_vb_enumerator_get_next+0x40e>
        break;
 80139c8:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 80139ca:	2300      	movs	r3, #0
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	371c      	adds	r7, #28
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	20008544 	.word	0x20008544

080139d8 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream* pbuf_stream, struct pbuf* p, u16_t offset, u16_t length)
{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	4611      	mov	r1, r2
 80139e4:	461a      	mov	r2, r3
 80139e6:	460b      	mov	r3, r1
 80139e8:	80fb      	strh	r3, [r7, #6]
 80139ea:	4613      	mov	r3, r2
 80139ec:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	88fa      	ldrh	r2, [r7, #6]
 80139f2:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	88ba      	ldrh	r2, [r7, #4]
 80139f8:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	68ba      	ldr	r2, [r7, #8]
 80139fe:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bc80      	pop	{r7}
 8013a0a:	4770      	bx	lr

08013a0c <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream* pbuf_stream, u8_t* data)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	88db      	ldrh	r3, [r3, #6]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d102      	bne.n	8013a24 <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 8013a1e:	f06f 0301 	mvn.w	r3, #1
 8013a22:	e01a      	b.n	8013a5a <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6818      	ldr	r0, [r3, #0]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	889b      	ldrh	r3, [r3, #4]
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	f002 fde6 	bl	8016600 <pbuf_copy_partial>
 8013a34:	4603      	mov	r3, r0
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d102      	bne.n	8013a40 <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 8013a3a:	f06f 0301 	mvn.w	r3, #1
 8013a3e:	e00c      	b.n	8013a5a <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	889b      	ldrh	r3, [r3, #4]
 8013a44:	3301      	adds	r3, #1
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	88db      	ldrh	r3, [r3, #6]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3708      	adds	r7, #8
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}

08013a62 <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream* pbuf_stream, u8_t data)
{
 8013a62:	b580      	push	{r7, lr}
 8013a64:	b082      	sub	sp, #8
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 8013a6e:	1cfb      	adds	r3, r7, #3
 8013a70:	2201      	movs	r2, #1
 8013a72:	4619      	mov	r1, r3
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 f805 	bl	8013a84 <snmp_pbuf_stream_writebuf>
 8013a7a:	4603      	mov	r3, r0
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3708      	adds	r7, #8
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}

08013a84 <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream* pbuf_stream, const void* buf, u16_t buf_len)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	4613      	mov	r3, r2
 8013a90:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	88db      	ldrh	r3, [r3, #6]
 8013a96:	88fa      	ldrh	r2, [r7, #6]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d902      	bls.n	8013aa2 <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 8013a9c:	f06f 0301 	mvn.w	r3, #1
 8013aa0:	e01c      	b.n	8013adc <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	6818      	ldr	r0, [r3, #0]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	889b      	ldrh	r3, [r3, #4]
 8013aaa:	88fa      	ldrh	r2, [r7, #6]
 8013aac:	68b9      	ldr	r1, [r7, #8]
 8013aae:	f002 feef 	bl	8016890 <pbuf_take_at>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d002      	beq.n	8013abe <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 8013ab8:	f06f 0301 	mvn.w	r3, #1
 8013abc:	e00e      	b.n	8013adc <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	889a      	ldrh	r2, [r3, #4]
 8013ac2:	88fb      	ldrh	r3, [r7, #6]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	88da      	ldrh	r2, [r3, #6]
 8013ad0:	88fb      	ldrh	r3, [r7, #6]
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013ada:	2300      	movs	r3, #0
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream* pbuf_stream, struct snmp_pbuf_stream* target_pbuf_stream, u16_t len)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	4613      	mov	r3, r2
 8013af0:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d002      	beq.n	8013afe <snmp_pbuf_stream_writeto+0x1a>
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d102      	bne.n	8013b04 <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 8013afe:	f06f 030f 	mvn.w	r3, #15
 8013b02:	e05b      	b.n	8013bbc <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	88db      	ldrh	r3, [r3, #6]
 8013b08:	88fa      	ldrh	r2, [r7, #6]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d804      	bhi.n	8013b18 <snmp_pbuf_stream_writeto+0x34>
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	88db      	ldrh	r3, [r3, #6]
 8013b12:	88fa      	ldrh	r2, [r7, #6]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d902      	bls.n	8013b1e <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 8013b18:	f06f 030f 	mvn.w	r3, #15
 8013b1c:	e04e      	b.n	8013bbc <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 8013b1e:	88fb      	ldrh	r3, [r7, #6]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d147      	bne.n	8013bb4 <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	88da      	ldrh	r2, [r3, #6]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	88db      	ldrh	r3, [r3, #6]
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	bf28      	it	cs
 8013b30:	4613      	movcs	r3, r2
 8013b32:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 8013b34:	e03e      	b.n	8013bb4 <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf* pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6818      	ldr	r0, [r3, #0]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	889b      	ldrh	r3, [r3, #4]
 8013b3e:	f107 0216 	add.w	r2, r7, #22
 8013b42:	4619      	mov	r1, r3
 8013b44:	f002 fdfe 	bl	8016744 <pbuf_skip>
 8013b48:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d003      	beq.n	8013b58 <snmp_pbuf_stream_writeto+0x74>
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	895b      	ldrh	r3, [r3, #10]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d102      	bne.n	8013b5e <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 8013b58:	f06f 0301 	mvn.w	r3, #1
 8013b5c:	e02e      	b.n	8013bbc <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	895b      	ldrh	r3, [r3, #10]
 8013b62:	88fa      	ldrh	r2, [r7, #6]
 8013b64:	4293      	cmp	r3, r2
 8013b66:	bf28      	it	cs
 8013b68:	4613      	movcs	r3, r2
 8013b6a:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t*)pbuf->payload)[target_offset], chunk_len);
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	8afa      	ldrh	r2, [r7, #22]
 8013b72:	4413      	add	r3, r2
 8013b74:	8b7a      	ldrh	r2, [r7, #26]
 8013b76:	4619      	mov	r1, r3
 8013b78:	68b8      	ldr	r0, [r7, #8]
 8013b7a:	f7ff ff83 	bl	8013a84 <snmp_pbuf_stream_writebuf>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 8013b82:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d002      	beq.n	8013b90 <snmp_pbuf_stream_writeto+0xac>
      return err;
 8013b8a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013b8e:	e015      	b.n	8013bbc <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	889a      	ldrh	r2, [r3, #4]
 8013b94:	8b7b      	ldrh	r3, [r7, #26]
 8013b96:	4413      	add	r3, r2
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	88da      	ldrh	r2, [r3, #6]
 8013ba2:	8b7b      	ldrh	r3, [r7, #26]
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 8013bac:	88fa      	ldrh	r2, [r7, #6]
 8013bae:	8b7b      	ldrh	r3, [r7, #26]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 8013bb4:	88fb      	ldrh	r3, [r7, #6]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1bd      	bne.n	8013b36 <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3720      	adds	r7, #32
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream* pbuf_stream, s32_t offset)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	db05      	blt.n	8013be0 <snmp_pbuf_stream_seek+0x1c>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	88db      	ldrh	r3, [r3, #6]
 8013bd8:	461a      	mov	r2, r3
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	dd02      	ble.n	8013be6 <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 8013be0:	f06f 030f 	mvn.w	r3, #15
 8013be4:	e010      	b.n	8013c08 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	889a      	ldrh	r2, [r3, #4]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	4413      	add	r3, r2
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	88da      	ldrh	r2, [r3, #6]
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	1ad3      	subs	r3, r2, r3
 8013c00:	b29a      	uxth	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013c06:	2300      	movs	r3, #0
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	370c      	adds	r7, #12
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bc80      	pop	{r7}
 8013c10:	4770      	bx	lr

08013c12 <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream* pbuf_stream, u32_t offset)
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b084      	sub	sp, #16
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
 8013c1a:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	889b      	ldrh	r3, [r3, #4]
 8013c20:	461a      	mov	r2, r3
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	1a9b      	subs	r3, r3, r2
 8013c26:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 8013c28:	68f9      	ldr	r1, [r7, #12]
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f7ff ffca 	bl	8013bc4 <snmp_pbuf_stream_seek>
 8013c30:	4603      	mov	r3, r0
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}

08013c3a <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b084      	sub	sp, #16
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	60f8      	str	r0, [r7, #12]
 8013c42:	60b9      	str	r1, [r7, #8]
 8013c44:	607a      	str	r2, [r7, #4]
 8013c46:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 8013c48:	8b3b      	ldrh	r3, [r7, #24]
 8013c4a:	683a      	ldr	r2, [r7, #0]
 8013c4c:	6879      	ldr	r1, [r7, #4]
 8013c4e:	68b8      	ldr	r0, [r7, #8]
 8013c50:	f7fd fe36 	bl	80118c0 <snmp_receive>

  pbuf_free(p);
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f002 fad5 	bl	8016204 <pbuf_free>
}
 8013c5a:	bf00      	nop
 8013c5c:	3710      	adds	r7, #16
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <snmp_sendto>:

err_t 
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b084      	sub	sp, #16
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	60f8      	str	r0, [r7, #12]
 8013c6a:	60b9      	str	r1, [r7, #8]
 8013c6c:	607a      	str	r2, [r7, #4]
 8013c6e:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb*)handle, p, dst, port);
 8013c70:	887b      	ldrh	r3, [r7, #2]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	68b9      	ldr	r1, [r7, #8]
 8013c76:	68f8      	ldr	r0, [r7, #12]
 8013c78:	f008 fc86 	bl	801c588 <udp_sendto>
 8013c7c:	4603      	mov	r3, r0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void* handle, const ip_addr_t *dst, ip_addr_t *result)
{
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b088      	sub	sp, #32
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	60f8      	str	r0, [r7, #12]
 8013c8e:	60b9      	str	r1, [r7, #8]
 8013c90:	607a      	str	r2, [r7, #4]
  struct udp_pcb* udp_pcb = (struct udp_pcb*)handle;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t* dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 8013c96:	68b8      	ldr	r0, [r7, #8]
 8013c98:	f00c f822 	bl	801fce0 <ip4_route>
 8013c9c:	61b8      	str	r0, [r7, #24]
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d002      	beq.n	8013caa <snmp_get_local_ip_for_dst+0x24>
 8013ca4:	69bb      	ldr	r3, [r7, #24]
 8013ca6:	3304      	adds	r3, #4
 8013ca8:	e000      	b.n	8013cac <snmp_get_local_ip_for_dst+0x26>
 8013caa:	2300      	movs	r3, #0
 8013cac:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d008      	beq.n	8013cc6 <snmp_get_local_ip_for_dst+0x40>
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d005      	beq.n	8013cc6 <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	601a      	str	r2, [r3, #0]
    return 1;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e000      	b.n	8013cc8 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 8013cc6:	2300      	movs	r3, #0
  }
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3720      	adds	r7, #32
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
  err_t err;
  
  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8013cd6:	202e      	movs	r0, #46	@ 0x2e
 8013cd8:	f008 fe93 	bl	801ca02 <udp_new_ip_type>
 8013cdc:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d106      	bne.n	8013cf2 <snmp_init+0x22>
 8013ce4:	4b11      	ldr	r3, [pc, #68]	@ (8013d2c <snmp_init+0x5c>)
 8013ce6:	225b      	movs	r2, #91	@ 0x5b
 8013ce8:	4911      	ldr	r1, [pc, #68]	@ (8013d30 <snmp_init+0x60>)
 8013cea:	4812      	ldr	r0, [pc, #72]	@ (8013d34 <snmp_init+0x64>)
 8013cec:	f00e faa8 	bl	8022240 <iprintf>
 8013cf0:	e018      	b.n	8013d24 <snmp_init+0x54>

  snmp_traps_handle = snmp_pcb;
 8013cf2:	4a11      	ldr	r2, [pc, #68]	@ (8013d38 <snmp_init+0x68>)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, (void *)SNMP_IN_PORT);
 8013cf8:	22a1      	movs	r2, #161	@ 0xa1
 8013cfa:	4910      	ldr	r1, [pc, #64]	@ (8013d3c <snmp_init+0x6c>)
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f008 fe25 	bl	801c94c <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, SNMP_IN_PORT);
 8013d02:	22a1      	movs	r2, #161	@ 0xa1
 8013d04:	490e      	ldr	r1, [pc, #56]	@ (8013d40 <snmp_init+0x70>)
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f008 fd5a 	bl	801c7c0 <udp_bind>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 8013d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d005      	beq.n	8013d24 <snmp_init+0x54>
 8013d18:	4b04      	ldr	r3, [pc, #16]	@ (8013d2c <snmp_init+0x5c>)
 8013d1a:	2261      	movs	r2, #97	@ 0x61
 8013d1c:	4909      	ldr	r1, [pc, #36]	@ (8013d44 <snmp_init+0x74>)
 8013d1e:	4805      	ldr	r0, [pc, #20]	@ (8013d34 <snmp_init+0x64>)
 8013d20:	f00e fa8e 	bl	8022240 <iprintf>
}
 8013d24:	3708      	adds	r7, #8
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	08025d0c 	.word	0x08025d0c
 8013d30:	08025d48 	.word	0x08025d48
 8013d34:	08025d5c 	.word	0x08025d5c
 8013d38:	200085ec 	.word	0x200085ec
 8013d3c:	08013c3b 	.word	0x08013c3b
 8013d40:	0803165c 	.word	0x0803165c
 8013d44:	08025d84 	.word	0x08025d84

08013d48 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value);

snmp_err_t 
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b087      	sub	sp, #28
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	460b      	mov	r3, r1
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node* scalar_node = (const struct snmp_scalar_node*)(const void*)instance->node;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	791b      	ldrb	r3, [r3, #4]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d103      	bne.n	8013d6c <snmp_scalar_get_instance+0x24>
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d001      	beq.n	8013d70 <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013d6c:	23f1      	movs	r3, #241	@ 0xf1
 8013d6e:	e019      	b.n	8013da4 <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	7c5a      	ldrb	r2, [r3, #17]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	7c1a      	ldrb	r2, [r3, #16]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value = scalar_node->get_value;
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	695a      	ldr	r2, [r3, #20]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test  = scalar_node->set_test;
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	699a      	ldr	r2, [r3, #24]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = scalar_node->set_value;
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	69da      	ldr	r2, [r3, #28]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  return SNMP_ERR_NOERROR;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	371c      	adds	r7, #28
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bc80      	pop	{r7}
 8013dac:	4770      	bx	lr

08013dae <snmp_scalar_get_next_instance>:

snmp_err_t 
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b084      	sub	sp, #16
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	60f8      	str	r0, [r7, #12]
 8013db6:	460b      	mov	r3, r1
 8013db8:	607a      	str	r2, [r7, #4]
 8013dba:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	791b      	ldrb	r3, [r3, #4]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d10d      	bne.n	8013de0 <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 8013dd0:	7afb      	ldrb	r3, [r7, #11]
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f7ff ffb6 	bl	8013d48 <snmp_scalar_get_instance>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	e000      	b.n	8013de2 <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8013de0:	23f1      	movs	r3, #241	@ 0xf1
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
	...

08013dec <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013dec:	b480      	push	{r7}
 8013dee:	b089      	sub	sp, #36	@ 0x24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	460b      	mov	r3, r1
 8013df6:	607a      	str	r2, [r7, #4]
 8013df8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	791b      	ldrb	r3, [r3, #4]
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d142      	bne.n	8013e88 <snmp_scalar_array_get_instance+0x9c>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	68db      	ldr	r3, [r3, #12]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d13e      	bne.n	8013e88 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	695b      	ldr	r3, [r3, #20]
 8013e14:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 8013e16:	2300      	movs	r3, #0
 8013e18:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 8013e1a:	e00b      	b.n	8013e34 <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d00c      	beq.n	8013e42 <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	3308      	adds	r3, #8
 8013e2c:	61fb      	str	r3, [r7, #28]
      i++;
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	3301      	adds	r3, #1
 8013e32:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	8a1b      	ldrh	r3, [r3, #16]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d3ed      	bcc.n	8013e1c <snmp_scalar_array_get_instance+0x30>
 8013e40:	e000      	b.n	8013e44 <snmp_scalar_array_get_instance+0x58>
        break;
 8013e42:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	8a1b      	ldrh	r3, [r3, #16]
 8013e48:	461a      	mov	r2, r3
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d21b      	bcs.n	8013e88 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 8013e50:	69fb      	ldr	r3, [r7, #28]
 8013e52:	795a      	ldrb	r2, [r3, #5]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	791a      	ldrb	r2, [r3, #4]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	4a0b      	ldr	r2, [pc, #44]	@ (8013e94 <snmp_scalar_array_get_instance+0xa8>)
 8013e68:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8013e98 <snmp_scalar_array_get_instance+0xac>)
 8013e70:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4a09      	ldr	r2, [pc, #36]	@ (8013e9c <snmp_scalar_array_get_instance+0xb0>)
 8013e78:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      instance->reference.const_ptr = array_node_def;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	69fa      	ldr	r2, [r7, #28]
 8013e80:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

      return SNMP_ERR_NOERROR;
 8013e84:	2300      	movs	r3, #0
 8013e86:	e000      	b.n	8013e8a <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8013e88:	23f1      	movs	r3, #241	@ 0xf1
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3724      	adds	r7, #36	@ 0x24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bc80      	pop	{r7}
 8013e92:	4770      	bx	lr
 8013e94:	0801400d 	.word	0x0801400d
 8013e98:	08014039 	.word	0x08014039
 8013e9c:	0801406b 	.word	0x0801406b

08013ea0 <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b08b      	sub	sp, #44	@ 0x2c
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	695b      	ldr	r3, [r3, #20]
 8013eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  const struct snmp_scalar_array_node_def* result = NULL;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	791b      	ldrb	r3, [r3, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d121      	bne.n	8013f0a <snmp_scalar_array_get_next_instance+0x6a>
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	8a1b      	ldrh	r3, [r3, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01d      	beq.n	8013f0a <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	83fb      	strh	r3, [r7, #30]
    
    result = array_node_def;
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed4:	623b      	str	r3, [r7, #32]
    array_node_def++;
 8013ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed8:	3308      	adds	r3, #8
 8013eda:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 8013edc:	2301      	movs	r3, #1
 8013ede:	83fb      	strh	r3, [r7, #30]
 8013ee0:	e00d      	b.n	8013efe <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	6a3b      	ldr	r3, [r7, #32]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d201      	bcs.n	8013ef2 <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 8013eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef0:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 8013ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef4:	3308      	adds	r3, #8
 8013ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 8013ef8:	8bfb      	ldrh	r3, [r7, #30]
 8013efa:	3301      	adds	r3, #1
 8013efc:	83fb      	strh	r3, [r7, #30]
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	8a1b      	ldrh	r3, [r3, #16]
 8013f02:	8bfa      	ldrh	r2, [r7, #30]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d3ec      	bcc.n	8013ee2 <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8013f08:	e04b      	b.n	8013fa2 <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	791b      	ldrb	r3, [r3, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d047      	beq.n	8013fa2 <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	791b      	ldrb	r3, [r3, #4]
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d116      	bne.n	8013f48 <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */    
      u16_t i = 0;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013f1e:	e00e      	b.n	8013f3e <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	689b      	ldr	r3, [r3, #8]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d102      	bne.n	8013f32 <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2e:	623b      	str	r3, [r7, #32]
          break;
 8013f30:	e00a      	b.n	8013f48 <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 8013f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f34:	3308      	adds	r3, #8
 8013f36:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013f38:	8bbb      	ldrh	r3, [r7, #28]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	8a1b      	ldrh	r3, [r3, #16]
 8013f42:	8bba      	ldrh	r2, [r7, #28]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d3eb      	bcc.n	8013f20 <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 8013f48:	6a3b      	ldr	r3, [r7, #32]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d129      	bne.n	8013fa2 <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 8013f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f52:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 8013f54:	2300      	movs	r3, #0
 8013f56:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	695b      	ldr	r3, [r3, #20]
 8013f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      while (i < array_node->array_node_count) {
 8013f5e:	e01b      	b.n	8013f98 <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d90f      	bls.n	8013f8c <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013f76:	69ba      	ldr	r2, [r7, #24]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d907      	bls.n	8013f8c <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f7e:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 8013f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8e:	3308      	adds	r3, #8
 8013f90:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013f92:	8afb      	ldrh	r3, [r7, #22]
 8013f94:	3301      	adds	r3, #1
 8013f96:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	8a1b      	ldrh	r3, [r3, #16]
 8013f9c:	8afa      	ldrh	r2, [r7, #22]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d3de      	bcc.n	8013f60 <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 8013fa2:	6a3b      	ldr	r3, [r7, #32]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d101      	bne.n	8013fac <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 8013fa8:	23f1      	movs	r3, #241	@ 0xf1
 8013faa:	e024      	b.n	8013ff6 <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2202      	movs	r2, #2
 8013fb0:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 8013fb2:	6a3b      	ldr	r3, [r7, #32]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	60da      	str	r2, [r3, #12]
  
  instance->access              = result->access;
 8013fc0:	6a3b      	ldr	r3, [r7, #32]
 8013fc2:	795a      	ldrb	r2, [r3, #5]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type           = result->asn1_type;
 8013fca:	6a3b      	ldr	r3, [r7, #32]
 8013fcc:	791a      	ldrb	r2, [r3, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8014000 <snmp_scalar_array_get_next_instance+0x160>)
 8013fd8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	4a09      	ldr	r2, [pc, #36]	@ (8014004 <snmp_scalar_array_get_next_instance+0x164>)
 8013fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	4a08      	ldr	r2, [pc, #32]	@ (8014008 <snmp_scalar_array_get_next_instance+0x168>)
 8013fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  instance->reference.const_ptr = result;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6a3a      	ldr	r2, [r7, #32]
 8013ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  return SNMP_ERR_NOERROR;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	372c      	adds	r7, #44	@ 0x2c
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bc80      	pop	{r7}
 8013ffe:	4770      	bx	lr
 8014000:	0801400d 	.word	0x0801400d
 8014004:	08014039 	.word	0x08014039
 8014008:	0801406b 	.word	0x0801406b

0801400c <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance* instance, void* value)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	60fb      	str	r3, [r7, #12]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014022:	60bb      	str	r3, [r7, #8]

  return array_node->get_value(array_node_def, value);
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	699b      	ldr	r3, [r3, #24]
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	68b8      	ldr	r0, [r7, #8]
 801402c:	4798      	blx	r3
 801402e:	4603      	mov	r3, r0
}
 8014030:	4618      	mov	r0, r3
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b086      	sub	sp, #24
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	460b      	mov	r3, r1
 8014042:	607a      	str	r2, [r7, #4]
 8014044:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014052:	613b      	str	r3, [r7, #16]

  return array_node->set_test(array_node_def, value_len, value);
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	69db      	ldr	r3, [r3, #28]
 8014058:	8979      	ldrh	r1, [r7, #10]
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	6938      	ldr	r0, [r7, #16]
 801405e:	4798      	blx	r3
 8014060:	4603      	mov	r3, r0
}
 8014062:	4618      	mov	r0, r3
 8014064:	3718      	adds	r7, #24
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}

0801406a <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 801406a:	b580      	push	{r7, lr}
 801406c:	b086      	sub	sp, #24
 801406e:	af00      	add	r7, sp, #0
 8014070:	60f8      	str	r0, [r7, #12]
 8014072:	460b      	mov	r3, r1
 8014074:	607a      	str	r2, [r7, #4]
 8014076:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014084:	613b      	str	r3, [r7, #16]

  return array_node->set_value(array_node_def, value_len, value);
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	6a1b      	ldr	r3, [r3, #32]
 801408a:	8979      	ldrh	r1, [r7, #10]
 801408c:	687a      	ldr	r2, [r7, #4]
 801408e:	6938      	ldr	r0, [r7, #16]
 8014090:	4798      	blx	r3
 8014092:	4603      	mov	r3, r0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3718      	adds	r7, #24
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 801409c:	b590      	push	{r4, r7, lr}
 801409e:	b089      	sub	sp, #36	@ 0x24
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	460b      	mov	r3, r1
 80140a6:	607a      	str	r2, [r7, #4]
 80140a8:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 80140aa:	23f1      	movs	r3, #241	@ 0xf1
 80140ac:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	791b      	ldrb	r3, [r3, #4]
 80140b8:	2b02      	cmp	r3, #2
 80140ba:	d947      	bls.n	801414c <snmp_table_get_instance+0xb0>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	689b      	ldr	r3, [r3, #8]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d143      	bne.n	801414c <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def* col_def = table_node->columns;
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	695b      	ldr	r3, [r3, #20]
 80140c8:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	8a1b      	ldrh	r3, [r3, #16]
 80140ce:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80140d0:	e00b      	b.n	80140ea <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d009      	beq.n	80140f2 <snmp_table_get_instance+0x56>
        break;
      }
      
      col_def++;
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	3308      	adds	r3, #8
 80140e2:	61bb      	str	r3, [r7, #24]
      i--;
 80140e4:	8afb      	ldrh	r3, [r7, #22]
 80140e6:	3b01      	subs	r3, #1
 80140e8:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80140ea:	8afb      	ldrh	r3, [r7, #22]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1f0      	bne.n	80140d2 <snmp_table_get_instance+0x36>
 80140f0:	e000      	b.n	80140f4 <snmp_table_get_instance+0x58>
        break;
 80140f2:	bf00      	nop
    }

    if (i > 0) {
 80140f4:	8afb      	ldrh	r3, [r7, #22]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d028      	beq.n	801414c <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	791a      	ldrb	r2, [r3, #4]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->access    = col_def->access;
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	795a      	ldrb	r2, [r3, #5]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->get_value = table_node->get_value;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	6a1a      	ldr	r2, [r3, #32]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test  = table_node->set_test;
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value = table_node->set_value;
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

      ret = table_node->get_cell_instance(
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	699c      	ldr	r4, [r3, #24]
        &(instance->instance_oid.id[1]),
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f103 000c 	add.w	r0, r3, #12
        &(instance->instance_oid.id[2]),
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f103 0110 	add.w	r1, r3, #16
        instance->instance_oid.len-2,
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 8014140:	3b02      	subs	r3, #2
 8014142:	b2da      	uxtb	r2, r3
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	47a0      	blx	r4
 8014148:	4603      	mov	r3, r0
 801414a:	77fb      	strb	r3, [r7, #31]
        instance);
    }
  }

  return ret;
 801414c:	7ffb      	ldrb	r3, [r7, #31]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3724      	adds	r7, #36	@ 0x24
 8014152:	46bd      	mov	sp, r7
 8014154:	bd90      	pop	{r4, r7, pc}

08014156 <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8014156:	b580      	push	{r7, lr}
 8014158:	b0be      	sub	sp, #248	@ 0xf8
 801415a:	af00      	add	r7, sp, #0
 801415c:	60f8      	str	r0, [r7, #12]
 801415e:	460b      	mov	r3, r1
 8014160:	607a      	str	r2, [r7, #4]
 8014162:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 801416c:	2300      	movs	r3, #0
 801416e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	791b      	ldrb	r3, [r3, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d005      	beq.n	8014186 <snmp_table_get_next_instance+0x30>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	689b      	ldr	r3, [r3, #8]
 801417e:	2b01      	cmp	r3, #1
 8014180:	d901      	bls.n	8014186 <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8014182:	23f1      	movs	r3, #241	@ 0xf1
 8014184:	e0b2      	b.n	80142ec <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	791b      	ldrb	r3, [r3, #4]
 801418a:	2b01      	cmp	r3, #1
 801418c:	d903      	bls.n	8014196 <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	791b      	ldrb	r3, [r3, #4]
 801419a:	2b02      	cmp	r3, #2
 801419c:	d90c      	bls.n	80141b8 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f103 0110 	add.w	r1, r3, #16
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	791b      	ldrb	r3, [r3, #4]
 80141a8:	3b02      	subs	r3, #2
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	f107 0314 	add.w	r3, r7, #20
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7fa fd73 	bl	800ec9c <snmp_oid_assign>
 80141b6:	e001      	b.n	80141bc <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 80141b8:	2300      	movs	r3, #0
 80141ba:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 80141bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141c0:	6a1a      	ldr	r2, [r3, #32]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test     = table_node->set_test;
 80141c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value    = table_node->set_value;
 80141d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def* next_col_def = NULL;
 80141e0:	2300      	movs	r3, #0
 80141e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 80141e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141ea:	695b      	ldr	r3, [r3, #20]
 80141ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 80141f0:	2300      	movs	r3, #0
 80141f2:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 80141f6:	e02c      	b.n	8014252 <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 80141f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8014202:	429a      	cmp	r2, r3
 8014204:	d104      	bne.n	8014210 <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 8014206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801420a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 801420e:	e027      	b.n	8014260 <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 8014210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801421a:	429a      	cmp	r2, r3
 801421c:	d20f      	bcs.n	801423e <snmp_table_get_next_instance+0xe8>
 801421e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014222:	2b00      	cmp	r3, #0
 8014224:	d007      	beq.n	8014236 <snmp_table_get_next_instance+0xe0>
 8014226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	429a      	cmp	r2, r3
 8014234:	d203      	bcs.n	801423e <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 8014236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801423a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 801423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014242:	3308      	adds	r3, #8
 8014244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8014248:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 801424c:	3301      	adds	r3, #1
 801424e:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 8014252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014256:	8a1b      	ldrh	r3, [r3, #16]
 8014258:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 801425c:	429a      	cmp	r2, r3
 801425e:	d3cb      	bcc.n	80141f8 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 8014260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014264:	2b00      	cmp	r3, #0
 8014266:	d101      	bne.n	801426c <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8014268:	23f1      	movs	r3, #241	@ 0xf1
 801426a:	e03f      	b.n	80142ec <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 801426c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014270:	791a      	ldrb	r2, [r3, #4]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    instance->access             = next_col_def->access;
 8014278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801427c:	795a      	ldrb	r2, [r3, #5]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

    result = table_node->get_next_cell_instance(
 8014284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014288:	69db      	ldr	r3, [r3, #28]
 801428a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 801428e:	f107 0114 	add.w	r1, r7, #20
 8014292:	687a      	ldr	r2, [r7, #4]
 8014294:	4798      	blx	r3
 8014296:	4603      	mov	r3, r0
 8014298:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      instance);

    if (result == SNMP_ERR_NOERROR) {
 801429c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d11a      	bne.n	80142da <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 80142a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80142a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 80142ac:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2202      	movs	r2, #2
 80142b2:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 80142ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	1d18      	adds	r0, r3, #4
 80142c8:	7d3a      	ldrb	r2, [r7, #20]
 80142ca:	f107 0314 	add.w	r3, r7, #20
 80142ce:	3304      	adds	r3, #4
 80142d0:	4619      	mov	r1, r3
 80142d2:	f7fa fd0d 	bl	800ecf0 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e008      	b.n	80142ec <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 80142da:	2300      	movs	r3, #0
 80142dc:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 80142de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	3301      	adds	r3, #1
 80142e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 80142ea:	e779      	b.n	80141e0 <snmp_table_get_next_instance+0x8a>
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	37f8      	adds	r7, #248	@ 0xf8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80142f4:	b5b0      	push	{r4, r5, r7, lr}
 80142f6:	b08a      	sub	sp, #40	@ 0x28
 80142f8:	af02      	add	r7, sp, #8
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	460b      	mov	r3, r1
 80142fe:	607a      	str	r2, [r7, #4]
 8014300:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 8014302:	23f1      	movs	r3, #241	@ 0xf1
 8014304:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	791b      	ldrb	r3, [r3, #4]
 8014310:	2b02      	cmp	r3, #2
 8014312:	d969      	bls.n	80143e8 <snmp_table_simple_get_instance+0xf4>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	2b01      	cmp	r3, #1
 801431a:	d165      	bne.n	80143e8 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	699c      	ldr	r4, [r3, #24]
      &(instance->instance_oid.id[1]),
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f103 000c 	add.w	r0, r3, #12
      &(instance->instance_oid.id[2]),
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f103 0110 	add.w	r1, r3, #16
      instance->instance_oid.len-2,
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 8014330:	3b02      	subs	r3, #2
 8014332:	b2da      	uxtb	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f103 05e4 	add.w	r5, r3, #228	@ 0xe4
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	33e8      	adds	r3, #232	@ 0xe8
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	462b      	mov	r3, r5
 8014342:	47a0      	blx	r4
 8014344:	4603      	mov	r3, r0
 8014346:	77fb      	strb	r3, [r7, #31]
      &instance->reference,
      &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 8014348:	7ffb      	ldrb	r3, [r7, #31]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d14c      	bne.n	80143e8 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def* col_def = table_node->columns;
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	695b      	ldr	r3, [r3, #20]
 8014352:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	8a1b      	ldrh	r3, [r3, #16]
 8014358:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 801435a:	e00b      	b.n	8014374 <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	429a      	cmp	r2, r3
 8014366:	d009      	beq.n	801437c <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	3308      	adds	r3, #8
 801436c:	61bb      	str	r3, [r7, #24]
        i--;
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	3b01      	subs	r3, #1
 8014372:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1f0      	bne.n	801435c <snmp_table_simple_get_instance+0x68>
 801437a:	e000      	b.n	801437e <snmp_table_simple_get_instance+0x8a>
          break;
 801437c:	bf00      	nop
      }

      if (i > 0) {
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d02f      	beq.n	80143e4 <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	791a      	ldrb	r2, [r3, #4]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
        instance->set_test  = NULL;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2200      	movs	r2, #0
 801439a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->set_value = NULL;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        switch (col_def->data_type) {
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	795b      	ldrb	r3, [r3, #5]
 80143aa:	2b03      	cmp	r3, #3
 80143ac:	dc15      	bgt.n	80143da <snmp_table_simple_get_instance+0xe6>
 80143ae:	2b02      	cmp	r3, #2
 80143b0:	da0e      	bge.n	80143d0 <snmp_table_simple_get_instance+0xdc>
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d002      	beq.n	80143bc <snmp_table_simple_get_instance+0xc8>
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d005      	beq.n	80143c6 <snmp_table_simple_get_instance+0xd2>
 80143ba:	e00e      	b.n	80143da <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	4a0d      	ldr	r2, [pc, #52]	@ (80143f4 <snmp_table_simple_get_instance+0x100>)
 80143c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143c4:	e00b      	b.n	80143de <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	4a0b      	ldr	r2, [pc, #44]	@ (80143f8 <snmp_table_simple_get_instance+0x104>)
 80143ca:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143ce:	e006      	b.n	80143de <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	4a0a      	ldr	r2, [pc, #40]	@ (80143fc <snmp_table_simple_get_instance+0x108>)
 80143d4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143d8:	e001      	b.n	80143de <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 80143da:	2305      	movs	r3, #5
 80143dc:	e005      	b.n	80143ea <snmp_table_simple_get_instance+0xf6>
        }        

        ret = SNMP_ERR_NOERROR;
 80143de:	2300      	movs	r3, #0
 80143e0:	77fb      	strb	r3, [r7, #31]
 80143e2:	e001      	b.n	80143e8 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 80143e4:	23f1      	movs	r3, #241	@ 0xf1
 80143e6:	77fb      	strb	r3, [r7, #31]
      }
    } 
  }

  return ret;
 80143e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bdb0      	pop	{r4, r5, r7, pc}
 80143f2:	bf00      	nop
 80143f4:	080145fd 	.word	0x080145fd
 80143f8:	080145d9 	.word	0x080145d9
 80143fc:	08014621 	.word	0x08014621

08014400 <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8014400:	b590      	push	{r4, r7, lr}
 8014402:	b0bf      	sub	sp, #252	@ 0xfc
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	460b      	mov	r3, r1
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_simple_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8014416:	2300      	movs	r3, #0
 8014418:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	791b      	ldrb	r3, [r3, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d005      	beq.n	8014430 <snmp_table_simple_get_next_instance+0x30>
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	689b      	ldr	r3, [r3, #8]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d901      	bls.n	8014430 <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 801442c:	23f1      	movs	r3, #241	@ 0xf1
 801442e:	e0c8      	b.n	80145c2 <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	791b      	ldrb	r3, [r3, #4]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d903      	bls.n	8014440 <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	791b      	ldrb	r3, [r3, #4]
 8014444:	2b02      	cmp	r3, #2
 8014446:	d90c      	bls.n	8014462 <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f103 0110 	add.w	r1, r3, #16
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	791b      	ldrb	r3, [r3, #4]
 8014452:	3b02      	subs	r3, #2
 8014454:	b2da      	uxtb	r2, r3
 8014456:	f107 0314 	add.w	r3, r7, #20
 801445a:	4618      	mov	r0, r3
 801445c:	f7fa fc1e 	bl	800ec9c <snmp_oid_assign>
 8014460:	e001      	b.n	8014466 <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8014462:	2300      	movs	r3, #0
 8014464:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def* next_col_def = NULL;
 8014466:	2300      	movs	r3, #0
 8014468:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 801446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014470:	695b      	ldr	r3, [r3, #20]
 8014472:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8014476:	2300      	movs	r3, #0
 8014478:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801447c:	e02c      	b.n	80144d8 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 801447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8014488:	429a      	cmp	r2, r3
 801448a:	d104      	bne.n	8014496 <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 801448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014490:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 8014494:	e028      	b.n	80144e8 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8014496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d20f      	bcs.n	80144c4 <snmp_table_simple_get_next_instance+0xc4>
 80144a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d007      	beq.n	80144bc <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 80144ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144b6:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d203      	bcs.n	80144c4 <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 80144bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 80144c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144c8:	3308      	adds	r3, #8
 80144ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 80144ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80144d2:	3301      	adds	r3, #1
 80144d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80144d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80144dc:	8a1b      	ldrh	r3, [r3, #16]
 80144de:	461a      	mov	r2, r3
 80144e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80144e4:	4293      	cmp	r3, r2
 80144e6:	d3ca      	bcc.n	801447e <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 80144e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d101      	bne.n	80144f4 <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 80144f0:	23f1      	movs	r3, #241	@ 0xf1
 80144f2:	e066      	b.n	80145c2 <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 80144f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80144f8:	69dc      	ldr	r4, [r3, #28]
 80144fa:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	33e8      	adds	r3, #232	@ 0xe8
 8014508:	f107 0114 	add.w	r1, r7, #20
 801450c:	47a0      	blx	r4
 801450e:	4603      	mov	r3, r0
 8014510:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      &instance->reference,
      &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 8014514:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8014518:	2b00      	cmp	r3, #0
 801451a:	d11c      	bne.n	8014556 <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 801451c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8014524:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  }
  while (1);

  instance->asn1_type = col_def->asn1_type;
 8014526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801452a:	791a      	ldrb	r2, [r3, #4]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2201      	movs	r2, #1
 8014536:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->set_test  = NULL;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2200      	movs	r2, #0
 801453e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = NULL;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2200      	movs	r2, #0
 8014546:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  switch (col_def->data_type) {
 801454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801454e:	795b      	ldrb	r3, [r3, #5]
 8014550:	2b03      	cmp	r3, #3
 8014552:	dc1f      	bgt.n	8014594 <snmp_table_simple_get_next_instance+0x194>
 8014554:	e008      	b.n	8014568 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8014556:	2300      	movs	r3, #0
 8014558:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 801455a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	3301      	adds	r3, #1
 8014562:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 8014566:	e77e      	b.n	8014466 <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 8014568:	2b02      	cmp	r3, #2
 801456a:	da0e      	bge.n	801458a <snmp_table_simple_get_next_instance+0x18a>
 801456c:	2b00      	cmp	r3, #0
 801456e:	d002      	beq.n	8014576 <snmp_table_simple_get_next_instance+0x176>
 8014570:	2b01      	cmp	r3, #1
 8014572:	d005      	beq.n	8014580 <snmp_table_simple_get_next_instance+0x180>
 8014574:	e00e      	b.n	8014594 <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4a14      	ldr	r2, [pc, #80]	@ (80145cc <snmp_table_simple_get_next_instance+0x1cc>)
 801457a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 801457e:	e00b      	b.n	8014598 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4a13      	ldr	r2, [pc, #76]	@ (80145d0 <snmp_table_simple_get_next_instance+0x1d0>)
 8014584:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8014588:	e006      	b.n	8014598 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	4a11      	ldr	r2, [pc, #68]	@ (80145d4 <snmp_table_simple_get_next_instance+0x1d4>)
 801458e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8014592:	e001      	b.n	8014598 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 8014594:	2305      	movs	r3, #5
 8014596:	e014      	b.n	80145c2 <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2202      	movs	r2, #2
 801459c:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2201      	movs	r2, #1
 80145a2:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 80145a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	1d18      	adds	r0, r3, #4
 80145b2:	7d3a      	ldrb	r2, [r7, #20]
 80145b4:	f107 0314 	add.w	r3, r7, #20
 80145b8:	3304      	adds	r3, #4
 80145ba:	4619      	mov	r1, r3
 80145bc:	f7fa fb98 	bl	800ecf0 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80145c0:	2300      	movs	r3, #0
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	37fc      	adds	r7, #252	@ 0xfc
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd90      	pop	{r4, r7, pc}
 80145ca:	bf00      	nop
 80145cc:	080145fd 	.word	0x080145fd
 80145d0:	080145d9 	.word	0x080145d9
 80145d4:	08014621 	.word	0x08014621

080145d8 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance* instance, void* value)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t*)value;
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 80145f0:	2304      	movs	r3, #4
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3714      	adds	r7, #20
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bc80      	pop	{r7}
 80145fa:	4770      	bx	lr

080145fc <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance* instance, void* value)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b085      	sub	sp, #20
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t*)value;
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8014614:	2304      	movs	r3, #4
}
 8014616:	4618      	mov	r0, r3
 8014618:	3714      	adds	r7, #20
 801461a:	46bd      	mov	sp, r7
 801461c:	bc80      	pop	{r7}
 801461e:	4770      	bx	lr

08014620 <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance* instance, void* value)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014636:	461a      	mov	r2, r3
 8014638:	6838      	ldr	r0, [r7, #0]
 801463a:	f00e f8fc 	bl	8022836 <memcpy>
  return (u16_t)instance->reference_len;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014644:	b21b      	sxth	r3, r3
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 8014650:	b480      	push	{r7}
 8014652:	b083      	sub	sp, #12
 8014654:	af00      	add	r7, sp, #0
 8014656:	4603      	mov	r3, r0
 8014658:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 801465a:	4a04      	ldr	r2, [pc, #16]	@ (801466c <snmp_set_auth_traps_enabled+0x1c>)
 801465c:	79fb      	ldrb	r3, [r7, #7]
 801465e:	7013      	strb	r3, [r2, #0]
}
 8014660:	bf00      	nop
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	bc80      	pop	{r7}
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	200085f8 	.word	0x200085f8

08014670 <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 8014670:	b480      	push	{r7}
 8014672:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 8014674:	4b02      	ldr	r3, [pc, #8]	@ (8014680 <snmp_get_auth_traps_enabled+0x10>)
 8014676:	781b      	ldrb	r3, [r3, #0]
}
 8014678:	4618      	mov	r0, r3
 801467a:	46bd      	mov	sp, r7
 801467c:	bc80      	pop	{r7}
 801467e:	4770      	bx	lr
 8014680:	200085f8 	.word	0x200085f8

08014684 <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id* eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b092      	sub	sp, #72	@ 0x48
 8014688:	af00      	add	r7, sp, #0
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 8014692:	2300      	movs	r3, #0
 8014694:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  trap_msg.snmp_version = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 801469c:	2300      	movs	r3, #0
 801469e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80146a2:	4b4b      	ldr	r3, [pc, #300]	@ (80147d0 <snmp_send_trap+0x14c>)
 80146a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80146a6:	e088      	b.n	80147ba <snmp_send_trap+0x136>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 80146a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146aa:	791b      	ldrb	r3, [r3, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d07c      	beq.n	80147aa <snmp_send_trap+0x126>
 80146b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d079      	beq.n	80147aa <snmp_send_trap+0x126>
 80146b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d075      	beq.n	80147aa <snmp_send_trap+0x126>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 80146be:	4b45      	ldr	r3, [pc, #276]	@ (80147d4 <snmp_send_trap+0x150>)
 80146c0:	6818      	ldr	r0, [r3, #0]
 80146c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80146c4:	f107 0318 	add.w	r3, r7, #24
 80146c8:	3304      	adds	r3, #4
 80146ca:	461a      	mov	r2, r3
 80146cc:	f7ff fadb 	bl	8013c86 <snmp_get_local_ip_for_dst>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d066      	beq.n	80147a4 <snmp_send_trap+0x120>
        if (eoid == NULL) {
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d104      	bne.n	80146e6 <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 80146dc:	f7fa f96e 	bl	800e9bc <snmp_get_device_enterprise_oid>
 80146e0:	4603      	mov	r3, r0
 80146e2:	61bb      	str	r3, [r7, #24]
 80146e4:	e001      	b.n	80146ea <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	2b06      	cmp	r3, #6
 80146f2:	d102      	bne.n	80146fa <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80146f8:	e001      	b.n	80146fe <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 80146fe:	f7f7 fc35 	bl	800bf6c <sys_now>
 8014702:	4603      	mov	r3, r0
 8014704:	4a34      	ldr	r2, [pc, #208]	@ (80147d8 <snmp_send_trap+0x154>)
 8014706:	fba2 2303 	umull	r2, r3, r2, r3
 801470a:	08db      	lsrs	r3, r3, #3
 801470c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 801470e:	f107 0318 	add.w	r3, r7, #24
 8014712:	6839      	ldr	r1, [r7, #0]
 8014714:	4618      	mov	r0, r3
 8014716:	f000 f883 	bl	8014820 <snmp_trap_varbind_sum>
 801471a:	4603      	mov	r3, r0
 801471c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 801471e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014720:	f107 0318 	add.w	r3, r7, #24
 8014724:	4611      	mov	r1, r2
 8014726:	4618      	mov	r0, r3
 8014728:	f000 f8b4 	bl	8014894 <snmp_trap_header_sum>
 801472c:	4603      	mov	r3, r0
 801472e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 8014730:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014732:	2200      	movs	r2, #0
 8014734:	4619      	mov	r1, r3
 8014736:	2000      	movs	r0, #0
 8014738:	f001 f9ec 	bl	8015b14 <pbuf_alloc>
 801473c:	63b8      	str	r0, [r7, #56]	@ 0x38
        if (p != NULL) {
 801473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014740:	2b00      	cmp	r3, #0
 8014742:	d02b      	beq.n	801479c <snmp_send_trap+0x118>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 8014744:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014746:	f107 0010 	add.w	r0, r7, #16
 801474a:	2200      	movs	r2, #0
 801474c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801474e:	f7ff f943 	bl	80139d8 <snmp_pbuf_stream_init>

          /* pass 1, encode packet ino the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 8014752:	f107 0210 	add.w	r2, r7, #16
 8014756:	f107 0318 	add.w	r3, r7, #24
 801475a:	4611      	mov	r1, r2
 801475c:	4618      	mov	r0, r3
 801475e:	f000 f9b5 	bl	8014acc <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 8014762:	f107 0110 	add.w	r1, r7, #16
 8014766:	f107 0318 	add.w	r3, r7, #24
 801476a:	683a      	ldr	r2, [r7, #0]
 801476c:	4618      	mov	r0, r3
 801476e:	f000 f985 	bl	8014a7c <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 8014772:	4b1a      	ldr	r3, [pc, #104]	@ (80147dc <snmp_send_trap+0x158>)
 8014774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014776:	3301      	adds	r3, #1
 8014778:	4a18      	ldr	r2, [pc, #96]	@ (80147dc <snmp_send_trap+0x158>)
 801477a:	6693      	str	r3, [r2, #104]	@ 0x68
          snmp_stats.outpkts++;
 801477c:	4b17      	ldr	r3, [pc, #92]	@ (80147dc <snmp_send_trap+0x158>)
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	3301      	adds	r3, #1
 8014782:	4a16      	ldr	r2, [pc, #88]	@ (80147dc <snmp_send_trap+0x158>)
 8014784:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, SNMP_TRAP_PORT);
 8014786:	4b13      	ldr	r3, [pc, #76]	@ (80147d4 <snmp_send_trap+0x150>)
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801478c:	23a2      	movs	r3, #162	@ 0xa2
 801478e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014790:	f7ff fa67 	bl	8013c62 <snmp_sendto>
          pbuf_free(p);
 8014794:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014796:	f001 fd35 	bl	8016204 <pbuf_free>
 801479a:	e006      	b.n	80147aa <snmp_send_trap+0x126>
        } else {
          err = ERR_MEM;
 801479c:	23ff      	movs	r3, #255	@ 0xff
 801479e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80147a2:	e002      	b.n	80147aa <snmp_send_trap+0x126>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 80147a4:	23fc      	movs	r3, #252	@ 0xfc
 80147a6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 80147aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147ae:	3301      	adds	r3, #1
 80147b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80147b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147b6:	3308      	adds	r3, #8
 80147b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80147ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147be:	2b00      	cmp	r3, #0
 80147c0:	f43f af72 	beq.w	80146a8 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 80147c4:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3748      	adds	r7, #72	@ 0x48
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	200085f0 	.word	0x200085f0
 80147d4:	200085ec 	.word	0x200085ec
 80147d8:	cccccccd 	.word	0xcccccccd
 80147dc:	20008544 	.word	0x20008544

080147e0 <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t 
snmp_send_trap_generic(s32_t generic_trap)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 80147e8:	2300      	movs	r3, #0
 80147ea:	2200      	movs	r2, #0
 80147ec:	6879      	ldr	r1, [r7, #4]
 80147ee:	4804      	ldr	r0, [pc, #16]	@ (8014800 <snmp_send_trap_generic+0x20>)
 80147f0:	f7ff ff48 	bl	8014684 <snmp_send_trap>
 80147f4:	4603      	mov	r3, r0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3708      	adds	r7, #8
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	0803148c 	.word	0x0803148c

08014804 <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent) 
 */
void
snmp_authfail_trap(void)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 8014808:	4b04      	ldr	r3, [pc, #16]	@ (801481c <snmp_authfail_trap+0x18>)
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d002      	beq.n	8014816 <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 8014810:	2004      	movs	r0, #4
 8014812:	f7ff ffe5 	bl	80147e0 <snmp_send_trap_generic>
  }
}
 8014816:	bf00      	nop
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	200085f8 	.word	0x200085f8

08014820 <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 801482a:	2300      	movs	r3, #0
 801482c:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8014832:	e015      	b.n	8014860 <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 8014834:	f107 030c 	add.w	r3, r7, #12
 8014838:	4619      	mov	r1, r3
 801483a:	69f8      	ldr	r0, [r7, #28]
 801483c:	f7fe fa2c 	bl	8012c98 <snmp_varbind_length>
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	d109      	bne.n	801485a <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 8014846:	7b3b      	ldrb	r3, [r7, #12]
 8014848:	461a      	mov	r2, r3
 801484a:	89fb      	ldrh	r3, [r7, #14]
 801484c:	4413      	add	r3, r2
 801484e:	b29a      	uxth	r2, r3
 8014850:	8b7b      	ldrh	r3, [r7, #26]
 8014852:	4413      	add	r3, r2
 8014854:	b29b      	uxth	r3, r3
 8014856:	3301      	adds	r3, #1
 8014858:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d1e6      	bne.n	8014834 <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	8b7a      	ldrh	r2, [r7, #26]
 801486a:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	8bdb      	ldrh	r3, [r3, #30]
 8014870:	f107 0219 	add.w	r2, r7, #25
 8014874:	4611      	mov	r1, r2
 8014876:	4618      	mov	r0, r3
 8014878:	f7f9 fcfa 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 801487c:	7e7b      	ldrb	r3, [r7, #25]
 801487e:	461a      	mov	r2, r3
 8014880:	8b7b      	ldrh	r3, [r7, #26]
 8014882:	4413      	add	r3, r2
 8014884:	b29b      	uxth	r3, r3
 8014886:	3301      	adds	r3, #1
 8014888:	837b      	strh	r3, [r7, #26]

  return tot_len;
 801488a:	8b7b      	ldrh	r3, [r7, #26]
}
 801488c:	4618      	mov	r0, r3
 801488e:	3720      	adds	r7, #32
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	460b      	mov	r3, r1
 801489e:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 80148a0:	887b      	ldrh	r3, [r7, #2]
 80148a2:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	691b      	ldr	r3, [r3, #16]
 80148a8:	f107 020c 	add.w	r2, r7, #12
 80148ac:	4611      	mov	r1, r2
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7f9 fcfa 	bl	800e2a8 <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80148b4:	89bb      	ldrh	r3, [r7, #12]
 80148b6:	f107 020b 	add.w	r2, r7, #11
 80148ba:	4611      	mov	r1, r2
 80148bc:	4618      	mov	r0, r3
 80148be:	f7f9 fcd7 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 80148c2:	7afb      	ldrb	r3, [r7, #11]
 80148c4:	461a      	mov	r2, r3
 80148c6:	89bb      	ldrh	r3, [r7, #12]
 80148c8:	4413      	add	r3, r2
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	89fb      	ldrh	r3, [r7, #14]
 80148ce:	4413      	add	r3, r2
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	3301      	adds	r3, #1
 80148d4:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	68db      	ldr	r3, [r3, #12]
 80148da:	461a      	mov	r2, r3
 80148dc:	f107 030c 	add.w	r3, r7, #12
 80148e0:	4619      	mov	r1, r3
 80148e2:	4610      	mov	r0, r2
 80148e4:	f7f9 fd2e 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80148e8:	89bb      	ldrh	r3, [r7, #12]
 80148ea:	f107 020b 	add.w	r2, r7, #11
 80148ee:	4611      	mov	r1, r2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f9 fcbd 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 80148f6:	7afb      	ldrb	r3, [r7, #11]
 80148f8:	461a      	mov	r2, r3
 80148fa:	89bb      	ldrh	r3, [r7, #12]
 80148fc:	4413      	add	r3, r2
 80148fe:	b29a      	uxth	r2, r3
 8014900:	89fb      	ldrh	r3, [r7, #14]
 8014902:	4413      	add	r3, r2
 8014904:	b29b      	uxth	r3, r3
 8014906:	3301      	adds	r3, #1
 8014908:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	689b      	ldr	r3, [r3, #8]
 801490e:	461a      	mov	r2, r3
 8014910:	f107 030c 	add.w	r3, r7, #12
 8014914:	4619      	mov	r1, r3
 8014916:	4610      	mov	r0, r2
 8014918:	f7f9 fd14 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 801491c:	89bb      	ldrh	r3, [r7, #12]
 801491e:	f107 020b 	add.w	r2, r7, #11
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f7f9 fca3 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 801492a:	7afb      	ldrb	r3, [r7, #11]
 801492c:	461a      	mov	r2, r3
 801492e:	89bb      	ldrh	r3, [r7, #12]
 8014930:	4413      	add	r3, r2
 8014932:	b29a      	uxth	r2, r3
 8014934:	89fb      	ldrh	r3, [r7, #14]
 8014936:	4413      	add	r3, r2
 8014938:	b29b      	uxth	r3, r3
 801493a:	3301      	adds	r3, #1
 801493c:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 801493e:	2304      	movs	r3, #4
 8014940:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014942:	89bb      	ldrh	r3, [r7, #12]
 8014944:	f107 020b 	add.w	r2, r7, #11
 8014948:	4611      	mov	r1, r2
 801494a:	4618      	mov	r0, r3
 801494c:	f7f9 fc90 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014950:	7afb      	ldrb	r3, [r7, #11]
 8014952:	461a      	mov	r2, r3
 8014954:	89bb      	ldrh	r3, [r7, #12]
 8014956:	4413      	add	r3, r2
 8014958:	b29a      	uxth	r2, r3
 801495a:	89fb      	ldrh	r3, [r7, #14]
 801495c:	4413      	add	r3, r2
 801495e:	b29b      	uxth	r3, r3
 8014960:	3301      	adds	r3, #1
 8014962:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	1d18      	adds	r0, r3, #4
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	4619      	mov	r1, r3
 8014972:	f107 030c 	add.w	r3, r7, #12
 8014976:	461a      	mov	r2, r3
 8014978:	f7f9 fd0e 	bl	800e398 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 801497c:	89bb      	ldrh	r3, [r7, #12]
 801497e:	f107 020b 	add.w	r2, r7, #11
 8014982:	4611      	mov	r1, r2
 8014984:	4618      	mov	r0, r3
 8014986:	f7f9 fc73 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 801498a:	7afb      	ldrb	r3, [r7, #11]
 801498c:	461a      	mov	r2, r3
 801498e:	89bb      	ldrh	r3, [r7, #12]
 8014990:	4413      	add	r3, r2
 8014992:	b29a      	uxth	r2, r3
 8014994:	89fb      	ldrh	r3, [r7, #14]
 8014996:	4413      	add	r3, r2
 8014998:	b29b      	uxth	r3, r3
 801499a:	3301      	adds	r3, #1
 801499c:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	89fa      	ldrh	r2, [r7, #14]
 80149a2:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	8b1b      	ldrh	r3, [r3, #24]
 80149a8:	f107 020b 	add.w	r2, r7, #11
 80149ac:	4611      	mov	r1, r2
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7f9 fc5e 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 80149b4:	7afb      	ldrb	r3, [r7, #11]
 80149b6:	461a      	mov	r2, r3
 80149b8:	89fb      	ldrh	r3, [r7, #14]
 80149ba:	4413      	add	r3, r2
 80149bc:	b29b      	uxth	r3, r3
 80149be:	3301      	adds	r3, #1
 80149c0:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 80149c2:	4b2d      	ldr	r3, [pc, #180]	@ (8014a78 <snmp_trap_header_sum+0x1e4>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7eb fc08 	bl	80001dc <strlen>
 80149cc:	4603      	mov	r3, r0
 80149ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80149d2:	4293      	cmp	r3, r2
 80149d4:	d807      	bhi.n	80149e6 <snmp_trap_header_sum+0x152>
 80149d6:	4b28      	ldr	r3, [pc, #160]	@ (8014a78 <snmp_trap_header_sum+0x1e4>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7eb fbfe 	bl	80001dc <strlen>
 80149e0:	4603      	mov	r3, r0
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	e001      	b.n	80149ea <snmp_trap_header_sum+0x156>
 80149e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	8b5b      	ldrh	r3, [r3, #26]
 80149f2:	f107 020b 	add.w	r2, r7, #11
 80149f6:	4611      	mov	r1, r2
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7f9 fc39 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 80149fe:	7afb      	ldrb	r3, [r7, #11]
 8014a00:	461a      	mov	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	8b5b      	ldrh	r3, [r3, #26]
 8014a06:	4413      	add	r3, r2
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	89fb      	ldrh	r3, [r7, #14]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	3301      	adds	r3, #1
 8014a12:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	695b      	ldr	r3, [r3, #20]
 8014a18:	461a      	mov	r2, r3
 8014a1a:	f107 030c 	add.w	r3, r7, #12
 8014a1e:	4619      	mov	r1, r3
 8014a20:	4610      	mov	r0, r2
 8014a22:	f7f9 fc8f 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014a26:	89bb      	ldrh	r3, [r7, #12]
 8014a28:	f107 020b 	add.w	r2, r7, #11
 8014a2c:	4611      	mov	r1, r2
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7f9 fc1e 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014a34:	7afb      	ldrb	r3, [r7, #11]
 8014a36:	461a      	mov	r2, r3
 8014a38:	89bb      	ldrh	r3, [r7, #12]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	b29a      	uxth	r2, r3
 8014a3e:	89fb      	ldrh	r3, [r7, #14]
 8014a40:	4413      	add	r3, r2
 8014a42:	b29b      	uxth	r3, r3
 8014a44:	3301      	adds	r3, #1
 8014a46:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	89fa      	ldrh	r2, [r7, #14]
 8014a4c:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	8b9b      	ldrh	r3, [r3, #28]
 8014a52:	f107 020b 	add.w	r2, r7, #11
 8014a56:	4611      	mov	r1, r2
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7f9 fc09 	bl	800e270 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 8014a5e:	7afb      	ldrb	r3, [r7, #11]
 8014a60:	461a      	mov	r2, r3
 8014a62:	89fb      	ldrh	r3, [r7, #14]
 8014a64:	4413      	add	r3, r2
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	3301      	adds	r3, #1
 8014a6a:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 8014a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	20000114 	.word	0x20000114

08014a7c <snmp_trap_varbind_enc>:

static void
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b088      	sub	sp, #32
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 8014a8c:	2330      	movs	r3, #48	@ 0x30
 8014a8e:	753b      	strb	r3, [r7, #20]
 8014a90:	2300      	movs	r3, #0
 8014a92:	757b      	strb	r3, [r7, #21]
 8014a94:	2300      	movs	r3, #0
 8014a96:	75bb      	strb	r3, [r7, #22]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	8bdb      	ldrh	r3, [r3, #30]
 8014a9c:	833b      	strh	r3, [r7, #24]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014a9e:	f107 0314 	add.w	r3, r7, #20
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	68b8      	ldr	r0, [r7, #8]
 8014aa6:	f7f9 f9f7 	bl	800de98 <snmp_ans1_enc_tlv>

  while (varbind != NULL) {
 8014aaa:	e006      	b.n	8014aba <snmp_trap_varbind_enc+0x3e>
    snmp_append_outbound_varbind(pbuf_stream, varbind);
 8014aac:	69f9      	ldr	r1, [r7, #28]
 8014aae:	68b8      	ldr	r0, [r7, #8]
 8014ab0:	f7fe fa42 	bl	8012f38 <snmp_append_outbound_varbind>

    varbind = varbind->next;
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1f5      	bne.n	8014aac <snmp_trap_varbind_enc+0x30>
  }
}
 8014ac0:	bf00      	nop
 8014ac2:	bf00      	nop
 8014ac4:	3720      	adds	r7, #32
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
	...

08014acc <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static void
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 8014ad6:	2330      	movs	r3, #48	@ 0x30
 8014ad8:	723b      	strb	r3, [r7, #8]
 8014ada:	2300      	movs	r3, #0
 8014adc:	727b      	strb	r3, [r7, #9]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	72bb      	strb	r3, [r7, #10]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	8b9b      	ldrh	r3, [r3, #28]
 8014ae6:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014ae8:	f107 0308 	add.w	r3, r7, #8
 8014aec:	4619      	mov	r1, r3
 8014aee:	6838      	ldr	r0, [r7, #0]
 8014af0:	f7f9 f9d2 	bl	800de98 <snmp_ans1_enc_tlv>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014af4:	2302      	movs	r3, #2
 8014af6:	723b      	strb	r3, [r7, #8]
 8014af8:	2300      	movs	r3, #0
 8014afa:	727b      	strb	r3, [r7, #9]
 8014afc:	2300      	movs	r3, #0
 8014afe:	72bb      	strb	r3, [r7, #10]
 8014b00:	2300      	movs	r3, #0
 8014b02:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	695b      	ldr	r3, [r3, #20]
 8014b08:	461a      	mov	r2, r3
 8014b0a:	f107 0308 	add.w	r3, r7, #8
 8014b0e:	3304      	adds	r3, #4
 8014b10:	4619      	mov	r1, r3
 8014b12:	4610      	mov	r0, r2
 8014b14:	f7f9 fc16 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b18:	f107 0308 	add.w	r3, r7, #8
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	6838      	ldr	r0, [r7, #0]
 8014b20:	f7f9 f9ba 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version);
 8014b24:	89b9      	ldrh	r1, [r7, #12]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	695b      	ldr	r3, [r3, #20]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	6838      	ldr	r0, [r7, #0]
 8014b2e:	f7f9 fafe 	bl	800e12e <snmp_asn1_enc_s32t>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 8014b32:	2304      	movs	r3, #4
 8014b34:	723b      	strb	r3, [r7, #8]
 8014b36:	2300      	movs	r3, #0
 8014b38:	727b      	strb	r3, [r7, #9]
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	72bb      	strb	r3, [r7, #10]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b44:	f107 0308 	add.w	r3, r7, #8
 8014b48:	4619      	mov	r1, r3
 8014b4a:	6838      	ldr	r0, [r7, #0]
 8014b4c:	f7f9 f9a4 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen);
 8014b50:	4b58      	ldr	r3, [pc, #352]	@ (8014cb4 <snmp_trap_header_enc+0x1e8>)
 8014b52:	6819      	ldr	r1, [r3, #0]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	8b5b      	ldrh	r3, [r3, #26]
 8014b58:	461a      	mov	r2, r3
 8014b5a:	6838      	ldr	r0, [r7, #0]
 8014b5c:	f7f9 fa27 	bl	800dfae <snmp_asn1_enc_raw>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 8014b60:	23a4      	movs	r3, #164	@ 0xa4
 8014b62:	723b      	strb	r3, [r7, #8]
 8014b64:	2300      	movs	r3, #0
 8014b66:	727b      	strb	r3, [r7, #9]
 8014b68:	2300      	movs	r3, #0
 8014b6a:	72bb      	strb	r3, [r7, #10]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	8b1b      	ldrh	r3, [r3, #24]
 8014b70:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b72:	f107 0308 	add.w	r3, r7, #8
 8014b76:	4619      	mov	r1, r3
 8014b78:	6838      	ldr	r0, [r7, #0]
 8014b7a:	f7f9 f98d 	bl	800de98 <snmp_ans1_enc_tlv>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 8014b7e:	2306      	movs	r3, #6
 8014b80:	723b      	strb	r3, [r7, #8]
 8014b82:	2300      	movs	r3, #0
 8014b84:	727b      	strb	r3, [r7, #9]
 8014b86:	2300      	movs	r3, #0
 8014b88:	72bb      	strb	r3, [r7, #10]
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	1d18      	adds	r0, r3, #4
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	f107 0308 	add.w	r3, r7, #8
 8014ba0:	3304      	adds	r3, #4
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	f7f9 fbf8 	bl	800e398 <snmp_asn1_enc_oid_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014ba8:	f107 0308 	add.w	r3, r7, #8
 8014bac:	4619      	mov	r1, r3
 8014bae:	6838      	ldr	r0, [r7, #0]
 8014bb0:	f7f9 f972 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	1d19      	adds	r1, r3, #4
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	461a      	mov	r2, r3
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	f7f9 fae2 	bl	800e18c <snmp_asn1_enc_oid>
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr));
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014bc8:	2340      	movs	r3, #64	@ 0x40
 8014bca:	723b      	strb	r3, [r7, #8]
 8014bcc:	2300      	movs	r3, #0
 8014bce:	727b      	strb	r3, [r7, #9]
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	72bb      	strb	r3, [r7, #10]
 8014bd4:	2304      	movs	r3, #4
 8014bd6:	81bb      	strh	r3, [r7, #12]
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014bd8:	f107 0308 	add.w	r3, r7, #8
 8014bdc:	4619      	mov	r1, r3
 8014bde:	6838      	ldr	r0, [r7, #0]
 8014be0:	f7f9 f95a 	bl	800de98 <snmp_ans1_enc_tlv>
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	3304      	adds	r3, #4
 8014be8:	2204      	movs	r2, #4
 8014bea:	4619      	mov	r1, r3
 8014bec:	6838      	ldr	r0, [r7, #0]
 8014bee:	f7f9 f9de 	bl	800dfae <snmp_asn1_enc_raw>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	723b      	strb	r3, [r7, #8]
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	727b      	strb	r3, [r7, #9]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	72bb      	strb	r3, [r7, #10]
 8014bfe:	2300      	movs	r3, #0
 8014c00:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	689b      	ldr	r3, [r3, #8]
 8014c06:	461a      	mov	r2, r3
 8014c08:	f107 0308 	add.w	r3, r7, #8
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	4619      	mov	r1, r3
 8014c10:	4610      	mov	r0, r2
 8014c12:	f7f9 fb97 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c16:	f107 0308 	add.w	r3, r7, #8
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6838      	ldr	r0, [r7, #0]
 8014c1e:	f7f9 f93b 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap);
 8014c22:	89b9      	ldrh	r1, [r7, #12]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	461a      	mov	r2, r3
 8014c2a:	6838      	ldr	r0, [r7, #0]
 8014c2c:	f7f9 fa7f 	bl	800e12e <snmp_asn1_enc_s32t>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014c30:	2302      	movs	r3, #2
 8014c32:	723b      	strb	r3, [r7, #8]
 8014c34:	2300      	movs	r3, #0
 8014c36:	727b      	strb	r3, [r7, #9]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	72bb      	strb	r3, [r7, #10]
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	461a      	mov	r2, r3
 8014c46:	f107 0308 	add.w	r3, r7, #8
 8014c4a:	3304      	adds	r3, #4
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f7f9 fb78 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c54:	f107 0308 	add.w	r3, r7, #8
 8014c58:	4619      	mov	r1, r3
 8014c5a:	6838      	ldr	r0, [r7, #0]
 8014c5c:	f7f9 f91c 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap);
 8014c60:	89b9      	ldrh	r1, [r7, #12]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	461a      	mov	r2, r3
 8014c68:	6838      	ldr	r0, [r7, #0]
 8014c6a:	f7f9 fa60 	bl	800e12e <snmp_asn1_enc_s32t>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 8014c6e:	2343      	movs	r3, #67	@ 0x43
 8014c70:	723b      	strb	r3, [r7, #8]
 8014c72:	2300      	movs	r3, #0
 8014c74:	727b      	strb	r3, [r7, #9]
 8014c76:	2300      	movs	r3, #0
 8014c78:	72bb      	strb	r3, [r7, #10]
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	691b      	ldr	r3, [r3, #16]
 8014c82:	461a      	mov	r2, r3
 8014c84:	f107 0308 	add.w	r3, r7, #8
 8014c88:	3304      	adds	r3, #4
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	4610      	mov	r0, r2
 8014c8e:	f7f9 fb59 	bl	800e344 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c92:	f107 0308 	add.w	r3, r7, #8
 8014c96:	4619      	mov	r1, r3
 8014c98:	6838      	ldr	r0, [r7, #0]
 8014c9a:	f7f9 f8fd 	bl	800de98 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts);
 8014c9e:	89b9      	ldrh	r1, [r7, #12]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	691b      	ldr	r3, [r3, #16]
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	6838      	ldr	r0, [r7, #0]
 8014ca8:	f7f9 fa41 	bl	800e12e <snmp_asn1_enc_s32t>
}
 8014cac:	bf00      	nop
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	20000114 	.word	0x20000114

08014cb8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014cb8:	b480      	push	{r7}
 8014cba:	b083      	sub	sp, #12
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8014cc2:	88fb      	ldrh	r3, [r7, #6]
 8014cc4:	ba5b      	rev16	r3, r3
 8014cc6:	b29b      	uxth	r3, r3
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bc80      	pop	{r7}
 8014cd0:	4770      	bx	lr

08014cd2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8014cd2:	b480      	push	{r7}
 8014cd4:	b083      	sub	sp, #12
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	061a      	lsls	r2, r3, #24
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	021b      	lsls	r3, r3, #8
 8014ce2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014ce6:	431a      	orrs	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	0a1b      	lsrs	r3, r3, #8
 8014cec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014cf0:	431a      	orrs	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	0e1b      	lsrs	r3, r3, #24
 8014cf6:	4313      	orrs	r3, r2
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bc80      	pop	{r7}
 8014d00:	4770      	bx	lr

08014d02 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8014d02:	b580      	push	{r7, lr}
 8014d04:	b086      	sub	sp, #24
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	60f8      	str	r0, [r7, #12]
 8014d0a:	60b9      	str	r1, [r7, #8]
 8014d0c:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8014d0e:	68b8      	ldr	r0, [r7, #8]
 8014d10:	f7eb fa64 	bl	80001dc <strlen>
 8014d14:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d101      	bne.n	8014d20 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	e022      	b.n	8014d66 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	617b      	str	r3, [r7, #20]
 8014d24:	e012      	b.n	8014d4c <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	781a      	ldrb	r2, [r3, #0]
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d109      	bne.n	8014d46 <lwip_strnstr+0x44>
 8014d32:	693a      	ldr	r2, [r7, #16]
 8014d34:	68b9      	ldr	r1, [r7, #8]
 8014d36:	6978      	ldr	r0, [r7, #20]
 8014d38:	f00d fc8e 	bl	8022658 <strncmp>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d101      	bne.n	8014d46 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	e00f      	b.n	8014d66 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	617b      	str	r3, [r7, #20]
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d007      	beq.n	8014d64 <lwip_strnstr+0x62>
 8014d54:	697a      	ldr	r2, [r7, #20]
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	441a      	add	r2, r3
 8014d5a:	68f9      	ldr	r1, [r7, #12]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	440b      	add	r3, r1
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d9e0      	bls.n	8014d26 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8014d64:	2300      	movs	r3, #0
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3718      	adds	r7, #24
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}

08014d6e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8014d6e:	b480      	push	{r7}
 8014d70:	b085      	sub	sp, #20
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
 8014d76:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	1c5a      	adds	r2, r3, #1
 8014d7c:	607a      	str	r2, [r7, #4]
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	1c5a      	adds	r2, r3, #1
 8014d86:	603a      	str	r2, [r7, #0]
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8014d8c:	7bfa      	ldrb	r2, [r7, #15]
 8014d8e:	7bbb      	ldrb	r3, [r7, #14]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d016      	beq.n	8014dc2 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8014d94:	7bfb      	ldrb	r3, [r7, #15]
 8014d96:	f043 0320 	orr.w	r3, r3, #32
 8014d9a:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014d9c:	7b7b      	ldrb	r3, [r7, #13]
 8014d9e:	2b60      	cmp	r3, #96	@ 0x60
 8014da0:	d90c      	bls.n	8014dbc <lwip_stricmp+0x4e>
 8014da2:	7b7b      	ldrb	r3, [r7, #13]
 8014da4:	2b7a      	cmp	r3, #122	@ 0x7a
 8014da6:	d809      	bhi.n	8014dbc <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8014da8:	7bbb      	ldrb	r3, [r7, #14]
 8014daa:	f043 0320 	orr.w	r3, r3, #32
 8014dae:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8014db0:	7b7a      	ldrb	r2, [r7, #13]
 8014db2:	7b3b      	ldrb	r3, [r7, #12]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d003      	beq.n	8014dc0 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8014db8:	2301      	movs	r3, #1
 8014dba:	e006      	b.n	8014dca <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e004      	b.n	8014dca <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014dc0:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8014dc2:	7bfb      	ldrb	r3, [r7, #15]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d1d7      	bne.n	8014d78 <lwip_stricmp+0xa>
  return 0;
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3714      	adds	r7, #20
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bc80      	pop	{r7}
 8014dd2:	4770      	bx	lr

08014dd4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8014dde:	f001 fda9 	bl	8016934 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8014de2:	f000 f8a7 	bl	8014f34 <mem_init>
  memp_init();
 8014de6:	f000 fba5 	bl	8015534 <memp_init>
  pbuf_init();
  netif_init();
 8014dea:	f000 fc8b 	bl	8015704 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014dee:	f007 fa17 	bl	801c220 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014df2:	f001 fda5 	bl	8016940 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8014df6:	f007 f8f5 	bl	801bfe4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014dfa:	bf00      	nop
 8014dfc:	3708      	adds	r7, #8
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
	...

08014e04 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014e0c:	4b40      	ldr	r3, [pc, #256]	@ (8014f10 <plug_holes+0x10c>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d206      	bcs.n	8014e24 <plug_holes+0x20>
 8014e16:	4b3f      	ldr	r3, [pc, #252]	@ (8014f14 <plug_holes+0x110>)
 8014e18:	f240 125d 	movw	r2, #349	@ 0x15d
 8014e1c:	493e      	ldr	r1, [pc, #248]	@ (8014f18 <plug_holes+0x114>)
 8014e1e:	483f      	ldr	r0, [pc, #252]	@ (8014f1c <plug_holes+0x118>)
 8014e20:	f00d fa0e 	bl	8022240 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014e24:	4b3e      	ldr	r3, [pc, #248]	@ (8014f20 <plug_holes+0x11c>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d306      	bcc.n	8014e3c <plug_holes+0x38>
 8014e2e:	4b39      	ldr	r3, [pc, #228]	@ (8014f14 <plug_holes+0x110>)
 8014e30:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014e34:	493b      	ldr	r1, [pc, #236]	@ (8014f24 <plug_holes+0x120>)
 8014e36:	4839      	ldr	r0, [pc, #228]	@ (8014f1c <plug_holes+0x118>)
 8014e38:	f00d fa02 	bl	8022240 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	791b      	ldrb	r3, [r3, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d006      	beq.n	8014e52 <plug_holes+0x4e>
 8014e44:	4b33      	ldr	r3, [pc, #204]	@ (8014f14 <plug_holes+0x110>)
 8014e46:	f240 125f 	movw	r2, #351	@ 0x15f
 8014e4a:	4937      	ldr	r1, [pc, #220]	@ (8014f28 <plug_holes+0x124>)
 8014e4c:	4833      	ldr	r0, [pc, #204]	@ (8014f1c <plug_holes+0x118>)
 8014e4e:	f00d f9f7 	bl	8022240 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	881b      	ldrh	r3, [r3, #0]
 8014e56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014e5a:	d906      	bls.n	8014e6a <plug_holes+0x66>
 8014e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8014f14 <plug_holes+0x110>)
 8014e5e:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8014e62:	4932      	ldr	r1, [pc, #200]	@ (8014f2c <plug_holes+0x128>)
 8014e64:	482d      	ldr	r0, [pc, #180]	@ (8014f1c <plug_holes+0x118>)
 8014e66:	f00d f9eb 	bl	8022240 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8014e6a:	4b29      	ldr	r3, [pc, #164]	@ (8014f10 <plug_holes+0x10c>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	8812      	ldrh	r2, [r2, #0]
 8014e72:	4413      	add	r3, r2
 8014e74:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d01f      	beq.n	8014ebe <plug_holes+0xba>
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	791b      	ldrb	r3, [r3, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d11b      	bne.n	8014ebe <plug_holes+0xba>
 8014e86:	4b26      	ldr	r3, [pc, #152]	@ (8014f20 <plug_holes+0x11c>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	68fa      	ldr	r2, [r7, #12]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d016      	beq.n	8014ebe <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014e90:	4b27      	ldr	r3, [pc, #156]	@ (8014f30 <plug_holes+0x12c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	68fa      	ldr	r2, [r7, #12]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d102      	bne.n	8014ea0 <plug_holes+0x9c>
      lfree = mem;
 8014e9a:	4a25      	ldr	r2, [pc, #148]	@ (8014f30 <plug_holes+0x12c>)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	881a      	ldrh	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8014ea8:	4b19      	ldr	r3, [pc, #100]	@ (8014f10 <plug_holes+0x10c>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	1ad1      	subs	r1, r2, r3
 8014eb0:	4b17      	ldr	r3, [pc, #92]	@ (8014f10 <plug_holes+0x10c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	68fa      	ldr	r2, [r7, #12]
 8014eb6:	8812      	ldrh	r2, [r2, #0]
 8014eb8:	4413      	add	r3, r2
 8014eba:	b28a      	uxth	r2, r1
 8014ebc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8014ebe:	4b14      	ldr	r3, [pc, #80]	@ (8014f10 <plug_holes+0x10c>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	8852      	ldrh	r2, [r2, #2]
 8014ec6:	4413      	add	r3, r2
 8014ec8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014eca:	68ba      	ldr	r2, [r7, #8]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d01a      	beq.n	8014f08 <plug_holes+0x104>
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	791b      	ldrb	r3, [r3, #4]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d116      	bne.n	8014f08 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014eda:	4b15      	ldr	r3, [pc, #84]	@ (8014f30 <plug_holes+0x12c>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d102      	bne.n	8014eea <plug_holes+0xe6>
      lfree = pmem;
 8014ee4:	4a12      	ldr	r2, [pc, #72]	@ (8014f30 <plug_holes+0x12c>)
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	881a      	ldrh	r2, [r3, #0]
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8014ef2:	4b07      	ldr	r3, [pc, #28]	@ (8014f10 <plug_holes+0x10c>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	68ba      	ldr	r2, [r7, #8]
 8014ef8:	1ad1      	subs	r1, r2, r3
 8014efa:	4b05      	ldr	r3, [pc, #20]	@ (8014f10 <plug_holes+0x10c>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	8812      	ldrh	r2, [r2, #0]
 8014f02:	4413      	add	r3, r2
 8014f04:	b28a      	uxth	r2, r1
 8014f06:	805a      	strh	r2, [r3, #2]
  }
}
 8014f08:	bf00      	nop
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	20008c68 	.word	0x20008c68
 8014f14:	08025da4 	.word	0x08025da4
 8014f18:	08025dd4 	.word	0x08025dd4
 8014f1c:	08025dec 	.word	0x08025dec
 8014f20:	20008c6c 	.word	0x20008c6c
 8014f24:	08025e14 	.word	0x08025e14
 8014f28:	08025e30 	.word	0x08025e30
 8014f2c:	08025e4c 	.word	0x08025e4c
 8014f30:	20008c70 	.word	0x20008c70

08014f34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8014fa8 <mem_init+0x74>)
 8014f3c:	3303      	adds	r3, #3
 8014f3e:	f023 0303 	bic.w	r3, r3, #3
 8014f42:	461a      	mov	r2, r3
 8014f44:	4b19      	ldr	r3, [pc, #100]	@ (8014fac <mem_init+0x78>)
 8014f46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014f48:	4b18      	ldr	r3, [pc, #96]	@ (8014fac <mem_init+0x78>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8014f62:	4b12      	ldr	r3, [pc, #72]	@ (8014fac <mem_init+0x78>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8014f6a:	4a11      	ldr	r2, [pc, #68]	@ (8014fb0 <mem_init+0x7c>)
 8014f6c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014f6e:	4b10      	ldr	r3, [pc, #64]	@ (8014fb0 <mem_init+0x7c>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2201      	movs	r2, #1
 8014f74:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014f76:	4b0e      	ldr	r3, [pc, #56]	@ (8014fb0 <mem_init+0x7c>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f7e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014f80:	4b0b      	ldr	r3, [pc, #44]	@ (8014fb0 <mem_init+0x7c>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f88:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014f8a:	4b08      	ldr	r3, [pc, #32]	@ (8014fac <mem_init+0x78>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	4a09      	ldr	r2, [pc, #36]	@ (8014fb4 <mem_init+0x80>)
 8014f90:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8014f92:	4b09      	ldr	r3, [pc, #36]	@ (8014fb8 <mem_init+0x84>)
 8014f94:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f98:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014f9c:	bf00      	nop
 8014f9e:	370c      	adds	r7, #12
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bc80      	pop	{r7}
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop
 8014fa8:	20008614 	.word	0x20008614
 8014fac:	20008c68 	.word	0x20008c68
 8014fb0:	20008c6c 	.word	0x20008c6c
 8014fb4:	20008c70 	.word	0x20008c70
 8014fb8:	2000bbe4 	.word	0x2000bbe4

08014fbc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b084      	sub	sp, #16
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d05d      	beq.n	8015086 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f003 0303 	and.w	r3, r3, #3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d006      	beq.n	8014fe2 <mem_free+0x26>
 8014fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8015090 <mem_free+0xd4>)
 8014fd6:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8014fda:	492e      	ldr	r1, [pc, #184]	@ (8015094 <mem_free+0xd8>)
 8014fdc:	482e      	ldr	r0, [pc, #184]	@ (8015098 <mem_free+0xdc>)
 8014fde:	f00d f92f 	bl	8022240 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014fe2:	4b2e      	ldr	r3, [pc, #184]	@ (801509c <mem_free+0xe0>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	687a      	ldr	r2, [r7, #4]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d304      	bcc.n	8014ff6 <mem_free+0x3a>
 8014fec:	4b2c      	ldr	r3, [pc, #176]	@ (80150a0 <mem_free+0xe4>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d306      	bcc.n	8015004 <mem_free+0x48>
 8014ff6:	4b26      	ldr	r3, [pc, #152]	@ (8015090 <mem_free+0xd4>)
 8014ff8:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8014ffc:	4929      	ldr	r1, [pc, #164]	@ (80150a4 <mem_free+0xe8>)
 8014ffe:	4826      	ldr	r0, [pc, #152]	@ (8015098 <mem_free+0xdc>)
 8015000:	f00d f91e 	bl	8022240 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015004:	4b25      	ldr	r3, [pc, #148]	@ (801509c <mem_free+0xe0>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	429a      	cmp	r2, r3
 801500c:	d304      	bcc.n	8015018 <mem_free+0x5c>
 801500e:	4b24      	ldr	r3, [pc, #144]	@ (80150a0 <mem_free+0xe4>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	429a      	cmp	r2, r3
 8015016:	d308      	bcc.n	801502a <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8015018:	4b23      	ldr	r3, [pc, #140]	@ (80150a8 <mem_free+0xec>)
 801501a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801501e:	3301      	adds	r3, #1
 8015020:	b29a      	uxth	r2, r3
 8015022:	4b21      	ldr	r3, [pc, #132]	@ (80150a8 <mem_free+0xec>)
 8015024:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8015028:	e02e      	b.n	8015088 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	3b08      	subs	r3, #8
 801502e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	791b      	ldrb	r3, [r3, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d106      	bne.n	8015046 <mem_free+0x8a>
 8015038:	4b15      	ldr	r3, [pc, #84]	@ (8015090 <mem_free+0xd4>)
 801503a:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 801503e:	491b      	ldr	r1, [pc, #108]	@ (80150ac <mem_free+0xf0>)
 8015040:	4815      	ldr	r0, [pc, #84]	@ (8015098 <mem_free+0xdc>)
 8015042:	f00d f8fd 	bl	8022240 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2200      	movs	r2, #0
 801504a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801504c:	4b18      	ldr	r3, [pc, #96]	@ (80150b0 <mem_free+0xf4>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	68fa      	ldr	r2, [r7, #12]
 8015052:	429a      	cmp	r2, r3
 8015054:	d202      	bcs.n	801505c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015056:	4a16      	ldr	r2, [pc, #88]	@ (80150b0 <mem_free+0xf4>)
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801505c:	4b12      	ldr	r3, [pc, #72]	@ (80150a8 <mem_free+0xec>)
 801505e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8015062:	4b0e      	ldr	r3, [pc, #56]	@ (801509c <mem_free+0xe0>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	68f9      	ldr	r1, [r7, #12]
 8015068:	1acb      	subs	r3, r1, r3
 801506a:	b299      	uxth	r1, r3
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	881b      	ldrh	r3, [r3, #0]
 8015070:	1acb      	subs	r3, r1, r3
 8015072:	b29b      	uxth	r3, r3
 8015074:	4413      	add	r3, r2
 8015076:	b29a      	uxth	r2, r3
 8015078:	4b0b      	ldr	r3, [pc, #44]	@ (80150a8 <mem_free+0xec>)
 801507a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801507e:	68f8      	ldr	r0, [r7, #12]
 8015080:	f7ff fec0 	bl	8014e04 <plug_holes>
 8015084:	e000      	b.n	8015088 <mem_free+0xcc>
    return;
 8015086:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015088:	3710      	adds	r7, #16
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	08025da4 	.word	0x08025da4
 8015094:	08025e78 	.word	0x08025e78
 8015098:	08025dec 	.word	0x08025dec
 801509c:	20008c68 	.word	0x20008c68
 80150a0:	20008c6c 	.word	0x20008c6c
 80150a4:	08025e9c 	.word	0x08025e9c
 80150a8:	2000bbe4 	.word	0x2000bbe4
 80150ac:	08025eb4 	.word	0x08025eb4
 80150b0:	20008c70 	.word	0x20008c70

080150b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	460b      	mov	r3, r1
 80150be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80150c0:	887b      	ldrh	r3, [r7, #2]
 80150c2:	3303      	adds	r3, #3
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	f023 0303 	bic.w	r3, r3, #3
 80150ca:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80150cc:	887b      	ldrh	r3, [r7, #2]
 80150ce:	2b0b      	cmp	r3, #11
 80150d0:	d801      	bhi.n	80150d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80150d2:	230c      	movs	r3, #12
 80150d4:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80150d6:	887b      	ldrh	r3, [r7, #2]
 80150d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80150dc:	d901      	bls.n	80150e2 <mem_trim+0x2e>
    return NULL;
 80150de:	2300      	movs	r3, #0
 80150e0:	e0d1      	b.n	8015286 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80150e2:	4b6b      	ldr	r3, [pc, #428]	@ (8015290 <mem_trim+0x1dc>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d304      	bcc.n	80150f6 <mem_trim+0x42>
 80150ec:	4b69      	ldr	r3, [pc, #420]	@ (8015294 <mem_trim+0x1e0>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d306      	bcc.n	8015104 <mem_trim+0x50>
 80150f6:	4b68      	ldr	r3, [pc, #416]	@ (8015298 <mem_trim+0x1e4>)
 80150f8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80150fc:	4967      	ldr	r1, [pc, #412]	@ (801529c <mem_trim+0x1e8>)
 80150fe:	4868      	ldr	r0, [pc, #416]	@ (80152a0 <mem_trim+0x1ec>)
 8015100:	f00d f89e 	bl	8022240 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015104:	4b62      	ldr	r3, [pc, #392]	@ (8015290 <mem_trim+0x1dc>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	687a      	ldr	r2, [r7, #4]
 801510a:	429a      	cmp	r2, r3
 801510c:	d304      	bcc.n	8015118 <mem_trim+0x64>
 801510e:	4b61      	ldr	r3, [pc, #388]	@ (8015294 <mem_trim+0x1e0>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	429a      	cmp	r2, r3
 8015116:	d309      	bcc.n	801512c <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8015118:	4b62      	ldr	r3, [pc, #392]	@ (80152a4 <mem_trim+0x1f0>)
 801511a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801511e:	3301      	adds	r3, #1
 8015120:	b29a      	uxth	r2, r3
 8015122:	4b60      	ldr	r3, [pc, #384]	@ (80152a4 <mem_trim+0x1f0>)
 8015124:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	e0ac      	b.n	8015286 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	3b08      	subs	r3, #8
 8015130:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8015132:	4b57      	ldr	r3, [pc, #348]	@ (8015290 <mem_trim+0x1dc>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	1ad3      	subs	r3, r2, r3
 801513a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	881a      	ldrh	r2, [r3, #0]
 8015140:	8a7b      	ldrh	r3, [r7, #18]
 8015142:	1ad3      	subs	r3, r2, r3
 8015144:	b29b      	uxth	r3, r3
 8015146:	3b08      	subs	r3, #8
 8015148:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801514a:	887a      	ldrh	r2, [r7, #2]
 801514c:	8a3b      	ldrh	r3, [r7, #16]
 801514e:	429a      	cmp	r2, r3
 8015150:	d906      	bls.n	8015160 <mem_trim+0xac>
 8015152:	4b51      	ldr	r3, [pc, #324]	@ (8015298 <mem_trim+0x1e4>)
 8015154:	f240 2206 	movw	r2, #518	@ 0x206
 8015158:	4953      	ldr	r1, [pc, #332]	@ (80152a8 <mem_trim+0x1f4>)
 801515a:	4851      	ldr	r0, [pc, #324]	@ (80152a0 <mem_trim+0x1ec>)
 801515c:	f00d f870 	bl	8022240 <iprintf>
  if (newsize > size) {
 8015160:	887a      	ldrh	r2, [r7, #2]
 8015162:	8a3b      	ldrh	r3, [r7, #16]
 8015164:	429a      	cmp	r2, r3
 8015166:	d901      	bls.n	801516c <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8015168:	2300      	movs	r3, #0
 801516a:	e08c      	b.n	8015286 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 801516c:	887a      	ldrh	r2, [r7, #2]
 801516e:	8a3b      	ldrh	r3, [r7, #16]
 8015170:	429a      	cmp	r2, r3
 8015172:	d101      	bne.n	8015178 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	e086      	b.n	8015286 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8015178:	4b45      	ldr	r3, [pc, #276]	@ (8015290 <mem_trim+0x1dc>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	697a      	ldr	r2, [r7, #20]
 801517e:	8812      	ldrh	r2, [r2, #0]
 8015180:	4413      	add	r3, r2
 8015182:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	791b      	ldrb	r3, [r3, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d13d      	bne.n	8015208 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	881b      	ldrh	r3, [r3, #0]
 8015190:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8015192:	8a7a      	ldrh	r2, [r7, #18]
 8015194:	887b      	ldrh	r3, [r7, #2]
 8015196:	4413      	add	r3, r2
 8015198:	b29b      	uxth	r3, r3
 801519a:	3308      	adds	r3, #8
 801519c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 801519e:	4b43      	ldr	r3, [pc, #268]	@ (80152ac <mem_trim+0x1f8>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d105      	bne.n	80151b4 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80151a8:	4b39      	ldr	r3, [pc, #228]	@ (8015290 <mem_trim+0x1dc>)
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	897b      	ldrh	r3, [r7, #10]
 80151ae:	4413      	add	r3, r2
 80151b0:	4a3e      	ldr	r2, [pc, #248]	@ (80152ac <mem_trim+0x1f8>)
 80151b2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80151b4:	4b36      	ldr	r3, [pc, #216]	@ (8015290 <mem_trim+0x1dc>)
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	897b      	ldrh	r3, [r7, #10]
 80151ba:	4413      	add	r3, r2
 80151bc:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	2200      	movs	r2, #0
 80151c2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	893a      	ldrh	r2, [r7, #8]
 80151c8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	8a7a      	ldrh	r2, [r7, #18]
 80151ce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	897a      	ldrh	r2, [r7, #10]
 80151d4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80151de:	d006      	beq.n	80151ee <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80151e0:	4b2b      	ldr	r3, [pc, #172]	@ (8015290 <mem_trim+0x1dc>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	8812      	ldrh	r2, [r2, #0]
 80151e8:	4413      	add	r3, r2
 80151ea:	897a      	ldrh	r2, [r7, #10]
 80151ec:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80151ee:	4b2d      	ldr	r3, [pc, #180]	@ (80152a4 <mem_trim+0x1f0>)
 80151f0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80151f4:	8879      	ldrh	r1, [r7, #2]
 80151f6:	8a3b      	ldrh	r3, [r7, #16]
 80151f8:	1acb      	subs	r3, r1, r3
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	4413      	add	r3, r2
 80151fe:	b29a      	uxth	r2, r3
 8015200:	4b28      	ldr	r3, [pc, #160]	@ (80152a4 <mem_trim+0x1f0>)
 8015202:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8015206:	e03d      	b.n	8015284 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015208:	887b      	ldrh	r3, [r7, #2]
 801520a:	f103 0214 	add.w	r2, r3, #20
 801520e:	8a3b      	ldrh	r3, [r7, #16]
 8015210:	429a      	cmp	r2, r3
 8015212:	d837      	bhi.n	8015284 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8015214:	8a7a      	ldrh	r2, [r7, #18]
 8015216:	887b      	ldrh	r3, [r7, #2]
 8015218:	4413      	add	r3, r2
 801521a:	b29b      	uxth	r3, r3
 801521c:	3308      	adds	r3, #8
 801521e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8015220:	4b1b      	ldr	r3, [pc, #108]	@ (8015290 <mem_trim+0x1dc>)
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	897b      	ldrh	r3, [r7, #10]
 8015226:	4413      	add	r3, r2
 8015228:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 801522a:	4b20      	ldr	r3, [pc, #128]	@ (80152ac <mem_trim+0x1f8>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	68fa      	ldr	r2, [r7, #12]
 8015230:	429a      	cmp	r2, r3
 8015232:	d202      	bcs.n	801523a <mem_trim+0x186>
      lfree = mem2;
 8015234:	4a1d      	ldr	r2, [pc, #116]	@ (80152ac <mem_trim+0x1f8>)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	2200      	movs	r2, #0
 801523e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	881a      	ldrh	r2, [r3, #0]
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	8a7a      	ldrh	r2, [r7, #18]
 801524c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	897a      	ldrh	r2, [r7, #10]
 8015252:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	881b      	ldrh	r3, [r3, #0]
 8015258:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801525c:	d006      	beq.n	801526c <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801525e:	4b0c      	ldr	r3, [pc, #48]	@ (8015290 <mem_trim+0x1dc>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	8812      	ldrh	r2, [r2, #0]
 8015266:	4413      	add	r3, r2
 8015268:	897a      	ldrh	r2, [r7, #10]
 801526a:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 801526c:	4b0d      	ldr	r3, [pc, #52]	@ (80152a4 <mem_trim+0x1f0>)
 801526e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8015272:	8879      	ldrh	r1, [r7, #2]
 8015274:	8a3b      	ldrh	r3, [r7, #16]
 8015276:	1acb      	subs	r3, r1, r3
 8015278:	b29b      	uxth	r3, r3
 801527a:	4413      	add	r3, r2
 801527c:	b29a      	uxth	r2, r3
 801527e:	4b09      	ldr	r3, [pc, #36]	@ (80152a4 <mem_trim+0x1f0>)
 8015280:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015284:	687b      	ldr	r3, [r7, #4]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20008c68 	.word	0x20008c68
 8015294:	20008c6c 	.word	0x20008c6c
 8015298:	08025da4 	.word	0x08025da4
 801529c:	08025ec8 	.word	0x08025ec8
 80152a0:	08025dec 	.word	0x08025dec
 80152a4:	2000bbe4 	.word	0x2000bbe4
 80152a8:	08025ee0 	.word	0x08025ee0
 80152ac:	20008c70 	.word	0x20008c70

080152b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b088      	sub	sp, #32
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80152ba:	88fb      	ldrh	r3, [r7, #6]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d101      	bne.n	80152c4 <mem_malloc+0x14>
    return NULL;
 80152c0:	2300      	movs	r3, #0
 80152c2:	e0eb      	b.n	801549c <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80152c4:	88fb      	ldrh	r3, [r7, #6]
 80152c6:	3303      	adds	r3, #3
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	f023 0303 	bic.w	r3, r3, #3
 80152ce:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80152d0:	88fb      	ldrh	r3, [r7, #6]
 80152d2:	2b0b      	cmp	r3, #11
 80152d4:	d801      	bhi.n	80152da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80152d6:	230c      	movs	r3, #12
 80152d8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80152da:	88fb      	ldrh	r3, [r7, #6]
 80152dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80152e0:	d901      	bls.n	80152e6 <mem_malloc+0x36>
    return NULL;
 80152e2:	2300      	movs	r3, #0
 80152e4:	e0da      	b.n	801549c <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80152e6:	4b6f      	ldr	r3, [pc, #444]	@ (80154a4 <mem_malloc+0x1f4>)
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	4b6f      	ldr	r3, [pc, #444]	@ (80154a8 <mem_malloc+0x1f8>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	83fb      	strh	r3, [r7, #30]
 80152f2:	e0c3      	b.n	801547c <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80152f4:	4b6c      	ldr	r3, [pc, #432]	@ (80154a8 <mem_malloc+0x1f8>)
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	8bfb      	ldrh	r3, [r7, #30]
 80152fa:	4413      	add	r3, r2
 80152fc:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	791b      	ldrb	r3, [r3, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	f040 80b4 	bne.w	8015470 <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	461a      	mov	r2, r3
 801530e:	8bfb      	ldrh	r3, [r7, #30]
 8015310:	1ad3      	subs	r3, r2, r3
 8015312:	f1a3 0208 	sub.w	r2, r3, #8
 8015316:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8015318:	429a      	cmp	r2, r3
 801531a:	f0c0 80a9 	bcc.w	8015470 <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	881b      	ldrh	r3, [r3, #0]
 8015322:	461a      	mov	r2, r3
 8015324:	8bfb      	ldrh	r3, [r7, #30]
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	f1a3 0208 	sub.w	r2, r3, #8
 801532c:	88fb      	ldrh	r3, [r7, #6]
 801532e:	3314      	adds	r3, #20
 8015330:	429a      	cmp	r2, r3
 8015332:	d332      	bcc.n	801539a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8015334:	8bfa      	ldrh	r2, [r7, #30]
 8015336:	88fb      	ldrh	r3, [r7, #6]
 8015338:	4413      	add	r3, r2
 801533a:	b29b      	uxth	r3, r3
 801533c:	3308      	adds	r3, #8
 801533e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8015340:	4b59      	ldr	r3, [pc, #356]	@ (80154a8 <mem_malloc+0x1f8>)
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	8a7b      	ldrh	r3, [r7, #18]
 8015346:	4413      	add	r3, r2
 8015348:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2200      	movs	r2, #0
 801534e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	881a      	ldrh	r2, [r3, #0]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	8bfa      	ldrh	r2, [r7, #30]
 801535c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	8a7a      	ldrh	r2, [r7, #18]
 8015362:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	2201      	movs	r2, #1
 8015368:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	881b      	ldrh	r3, [r3, #0]
 801536e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015372:	d006      	beq.n	8015382 <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8015374:	4b4c      	ldr	r3, [pc, #304]	@ (80154a8 <mem_malloc+0x1f8>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	68fa      	ldr	r2, [r7, #12]
 801537a:	8812      	ldrh	r2, [r2, #0]
 801537c:	4413      	add	r3, r2
 801537e:	8a7a      	ldrh	r2, [r7, #18]
 8015380:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8015382:	4b4a      	ldr	r3, [pc, #296]	@ (80154ac <mem_malloc+0x1fc>)
 8015384:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8015388:	88fb      	ldrh	r3, [r7, #6]
 801538a:	4413      	add	r3, r2
 801538c:	b29b      	uxth	r3, r3
 801538e:	3308      	adds	r3, #8
 8015390:	b29a      	uxth	r2, r3
 8015392:	4b46      	ldr	r3, [pc, #280]	@ (80154ac <mem_malloc+0x1fc>)
 8015394:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8015398:	e013      	b.n	80153c2 <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	2201      	movs	r2, #1
 801539e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 80153a0:	4b42      	ldr	r3, [pc, #264]	@ (80154ac <mem_malloc+0x1fc>)
 80153a2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	8819      	ldrh	r1, [r3, #0]
 80153aa:	4b3f      	ldr	r3, [pc, #252]	@ (80154a8 <mem_malloc+0x1f8>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	6978      	ldr	r0, [r7, #20]
 80153b0:	1ac3      	subs	r3, r0, r3
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	1acb      	subs	r3, r1, r3
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	4413      	add	r3, r2
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	4b3b      	ldr	r3, [pc, #236]	@ (80154ac <mem_malloc+0x1fc>)
 80153be:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80153c2:	4b38      	ldr	r3, [pc, #224]	@ (80154a4 <mem_malloc+0x1f4>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d127      	bne.n	801541c <mem_malloc+0x16c>
          struct mem *cur = lfree;
 80153cc:	4b35      	ldr	r3, [pc, #212]	@ (80154a4 <mem_malloc+0x1f4>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80153d2:	e005      	b.n	80153e0 <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80153d4:	4b34      	ldr	r3, [pc, #208]	@ (80154a8 <mem_malloc+0x1f8>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	69ba      	ldr	r2, [r7, #24]
 80153da:	8812      	ldrh	r2, [r2, #0]
 80153dc:	4413      	add	r3, r2
 80153de:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	791b      	ldrb	r3, [r3, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d004      	beq.n	80153f2 <mem_malloc+0x142>
 80153e8:	4b31      	ldr	r3, [pc, #196]	@ (80154b0 <mem_malloc+0x200>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	69ba      	ldr	r2, [r7, #24]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d1f0      	bne.n	80153d4 <mem_malloc+0x124>
          }
          lfree = cur;
 80153f2:	4a2c      	ldr	r2, [pc, #176]	@ (80154a4 <mem_malloc+0x1f4>)
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80153f8:	4b2a      	ldr	r3, [pc, #168]	@ (80154a4 <mem_malloc+0x1f4>)
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	4b2c      	ldr	r3, [pc, #176]	@ (80154b0 <mem_malloc+0x200>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	429a      	cmp	r2, r3
 8015402:	d00b      	beq.n	801541c <mem_malloc+0x16c>
 8015404:	4b27      	ldr	r3, [pc, #156]	@ (80154a4 <mem_malloc+0x1f4>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	791b      	ldrb	r3, [r3, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d006      	beq.n	801541c <mem_malloc+0x16c>
 801540e:	4b29      	ldr	r3, [pc, #164]	@ (80154b4 <mem_malloc+0x204>)
 8015410:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015414:	4928      	ldr	r1, [pc, #160]	@ (80154b8 <mem_malloc+0x208>)
 8015416:	4829      	ldr	r0, [pc, #164]	@ (80154bc <mem_malloc+0x20c>)
 8015418:	f00c ff12 	bl	8022240 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801541c:	88fa      	ldrh	r2, [r7, #6]
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	4413      	add	r3, r2
 8015422:	3308      	adds	r3, #8
 8015424:	4a22      	ldr	r2, [pc, #136]	@ (80154b0 <mem_malloc+0x200>)
 8015426:	6812      	ldr	r2, [r2, #0]
 8015428:	4293      	cmp	r3, r2
 801542a:	d906      	bls.n	801543a <mem_malloc+0x18a>
 801542c:	4b21      	ldr	r3, [pc, #132]	@ (80154b4 <mem_malloc+0x204>)
 801542e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8015432:	4923      	ldr	r1, [pc, #140]	@ (80154c0 <mem_malloc+0x210>)
 8015434:	4821      	ldr	r0, [pc, #132]	@ (80154bc <mem_malloc+0x20c>)
 8015436:	f00c ff03 	bl	8022240 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	f003 0303 	and.w	r3, r3, #3
 8015440:	2b00      	cmp	r3, #0
 8015442:	d006      	beq.n	8015452 <mem_malloc+0x1a2>
 8015444:	4b1b      	ldr	r3, [pc, #108]	@ (80154b4 <mem_malloc+0x204>)
 8015446:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801544a:	491e      	ldr	r1, [pc, #120]	@ (80154c4 <mem_malloc+0x214>)
 801544c:	481b      	ldr	r0, [pc, #108]	@ (80154bc <mem_malloc+0x20c>)
 801544e:	f00c fef7 	bl	8022240 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	f003 0303 	and.w	r3, r3, #3
 8015458:	2b00      	cmp	r3, #0
 801545a:	d006      	beq.n	801546a <mem_malloc+0x1ba>
 801545c:	4b15      	ldr	r3, [pc, #84]	@ (80154b4 <mem_malloc+0x204>)
 801545e:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8015462:	4919      	ldr	r1, [pc, #100]	@ (80154c8 <mem_malloc+0x218>)
 8015464:	4815      	ldr	r0, [pc, #84]	@ (80154bc <mem_malloc+0x20c>)
 8015466:	f00c feeb 	bl	8022240 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	3308      	adds	r3, #8
 801546e:	e015      	b.n	801549c <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8015470:	4b0d      	ldr	r3, [pc, #52]	@ (80154a8 <mem_malloc+0x1f8>)
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	8bfb      	ldrh	r3, [r7, #30]
 8015476:	4413      	add	r3, r2
 8015478:	881b      	ldrh	r3, [r3, #0]
 801547a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801547c:	8bfa      	ldrh	r2, [r7, #30]
 801547e:	88fb      	ldrh	r3, [r7, #6]
 8015480:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8015484:	429a      	cmp	r2, r3
 8015486:	f4ff af35 	bcc.w	80152f4 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 801548a:	4b08      	ldr	r3, [pc, #32]	@ (80154ac <mem_malloc+0x1fc>)
 801548c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8015490:	3301      	adds	r3, #1
 8015492:	b29a      	uxth	r2, r3
 8015494:	4b05      	ldr	r3, [pc, #20]	@ (80154ac <mem_malloc+0x1fc>)
 8015496:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 801549a:	2300      	movs	r3, #0
}
 801549c:	4618      	mov	r0, r3
 801549e:	3720      	adds	r7, #32
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	20008c70 	.word	0x20008c70
 80154a8:	20008c68 	.word	0x20008c68
 80154ac:	2000bbe4 	.word	0x2000bbe4
 80154b0:	20008c6c 	.word	0x20008c6c
 80154b4:	08025da4 	.word	0x08025da4
 80154b8:	08025f00 	.word	0x08025f00
 80154bc:	08025dec 	.word	0x08025dec
 80154c0:	08025f1c 	.word	0x08025f1c
 80154c4:	08025f4c 	.word	0x08025f4c
 80154c8:	08025f7c 	.word	0x08025f7c

080154cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b085      	sub	sp, #20
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	2200      	movs	r2, #0
 80154da:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	3303      	adds	r3, #3
 80154e2:	f023 0303 	bic.w	r3, r3, #3
 80154e6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80154e8:	2300      	movs	r3, #0
 80154ea:	60fb      	str	r3, [r7, #12]
 80154ec:	e011      	b.n	8015512 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	68ba      	ldr	r2, [r7, #8]
 80154fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	889b      	ldrh	r3, [r3, #4]
 8015504:	461a      	mov	r2, r3
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	4413      	add	r3, r2
 801550a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	3301      	adds	r3, #1
 8015510:	60fb      	str	r3, [r7, #12]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	88db      	ldrh	r3, [r3, #6]
 8015516:	461a      	mov	r2, r3
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	4293      	cmp	r3, r2
 801551c:	dbe7      	blt.n	80154ee <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	687a      	ldr	r2, [r7, #4]
 8015524:	88d2      	ldrh	r2, [r2, #6]
 8015526:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015528:	bf00      	nop
 801552a:	3714      	adds	r7, #20
 801552c:	46bd      	mov	sp, r7
 801552e:	bc80      	pop	{r7}
 8015530:	4770      	bx	lr
	...

08015534 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801553a:	2300      	movs	r3, #0
 801553c:	80fb      	strh	r3, [r7, #6]
 801553e:	e014      	b.n	801556a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8015540:	88fb      	ldrh	r3, [r7, #6]
 8015542:	4a0e      	ldr	r2, [pc, #56]	@ (801557c <memp_init+0x48>)
 8015544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015548:	4618      	mov	r0, r3
 801554a:	f7ff ffbf 	bl	80154cc <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 801554e:	88fb      	ldrh	r3, [r7, #6]
 8015550:	4a0a      	ldr	r2, [pc, #40]	@ (801557c <memp_init+0x48>)
 8015552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015556:	88fb      	ldrh	r3, [r7, #6]
 8015558:	6812      	ldr	r2, [r2, #0]
 801555a:	4909      	ldr	r1, [pc, #36]	@ (8015580 <memp_init+0x4c>)
 801555c:	332c      	adds	r3, #44	@ 0x2c
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	440b      	add	r3, r1
 8015562:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015564:	88fb      	ldrh	r3, [r7, #6]
 8015566:	3301      	adds	r3, #1
 8015568:	80fb      	strh	r3, [r7, #6]
 801556a:	88fb      	ldrh	r3, [r7, #6]
 801556c:	2b08      	cmp	r3, #8
 801556e:	d9e7      	bls.n	8015540 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8015570:	bf00      	nop
 8015572:	bf00      	nop
 8015574:	3708      	adds	r7, #8
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	080315e8 	.word	0x080315e8
 8015580:	2000bbe4 	.word	0x2000bbe4

08015584 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d026      	beq.n	80155e8 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	6812      	ldr	r2, [r2, #0]
 80155a2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f003 0303 	and.w	r3, r3, #3
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d006      	beq.n	80155bc <do_memp_malloc_pool+0x38>
 80155ae:	4b14      	ldr	r3, [pc, #80]	@ (8015600 <do_memp_malloc_pool+0x7c>)
 80155b0:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80155b4:	4913      	ldr	r1, [pc, #76]	@ (8015604 <do_memp_malloc_pool+0x80>)
 80155b6:	4814      	ldr	r0, [pc, #80]	@ (8015608 <do_memp_malloc_pool+0x84>)
 80155b8:	f00c fe42 	bl	8022240 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	889a      	ldrh	r2, [r3, #4]
 80155c2:	3201      	adds	r2, #1
 80155c4:	b292      	uxth	r2, r2
 80155c6:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	889a      	ldrh	r2, [r3, #4]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	88db      	ldrh	r3, [r3, #6]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d905      	bls.n	80155e4 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	8892      	ldrh	r2, [r2, #4]
 80155e2:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	e006      	b.n	80155f6 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	881a      	ldrh	r2, [r3, #0]
 80155ee:	3201      	adds	r2, #1
 80155f0:	b292      	uxth	r2, r2
 80155f2:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	08025fa0 	.word	0x08025fa0
 8015604:	08025fd0 	.word	0x08025fd0
 8015608:	08025ff4 	.word	0x08025ff4

0801560c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	4603      	mov	r3, r0
 8015614:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	2b08      	cmp	r3, #8
 801561a:	d908      	bls.n	801562e <memp_malloc+0x22>
 801561c:	4b0a      	ldr	r3, [pc, #40]	@ (8015648 <memp_malloc+0x3c>)
 801561e:	f240 1287 	movw	r2, #391	@ 0x187
 8015622:	490a      	ldr	r1, [pc, #40]	@ (801564c <memp_malloc+0x40>)
 8015624:	480a      	ldr	r0, [pc, #40]	@ (8015650 <memp_malloc+0x44>)
 8015626:	f00c fe0b 	bl	8022240 <iprintf>
 801562a:	2300      	movs	r3, #0
 801562c:	e008      	b.n	8015640 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801562e:	79fb      	ldrb	r3, [r7, #7]
 8015630:	4a08      	ldr	r2, [pc, #32]	@ (8015654 <memp_malloc+0x48>)
 8015632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff ffa4 	bl	8015584 <do_memp_malloc_pool>
 801563c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801563e:	68fb      	ldr	r3, [r7, #12]
}
 8015640:	4618      	mov	r0, r3
 8015642:	3710      	adds	r7, #16
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	08025fa0 	.word	0x08025fa0
 801564c:	08026030 	.word	0x08026030
 8015650:	08025ff4 	.word	0x08025ff4
 8015654:	080315e8 	.word	0x080315e8

08015658 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
 8015660:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	f003 0303 	and.w	r3, r3, #3
 8015668:	2b00      	cmp	r3, #0
 801566a:	d006      	beq.n	801567a <do_memp_free_pool+0x22>
 801566c:	4b0d      	ldr	r3, [pc, #52]	@ (80156a4 <do_memp_free_pool+0x4c>)
 801566e:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015672:	490d      	ldr	r1, [pc, #52]	@ (80156a8 <do_memp_free_pool+0x50>)
 8015674:	480d      	ldr	r0, [pc, #52]	@ (80156ac <do_memp_free_pool+0x54>)
 8015676:	f00c fde3 	bl	8022240 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	889a      	ldrh	r2, [r3, #4]
 8015684:	3a01      	subs	r2, #1
 8015686:	b292      	uxth	r2, r2
 8015688:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	68fa      	ldr	r2, [r7, #12]
 801569a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801569c:	bf00      	nop
 801569e:	3710      	adds	r7, #16
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	08025fa0 	.word	0x08025fa0
 80156a8:	08026050 	.word	0x08026050
 80156ac:	08025ff4 	.word	0x08025ff4

080156b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	4603      	mov	r3, r0
 80156b8:	6039      	str	r1, [r7, #0]
 80156ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80156bc:	79fb      	ldrb	r3, [r7, #7]
 80156be:	2b08      	cmp	r3, #8
 80156c0:	d907      	bls.n	80156d2 <memp_free+0x22>
 80156c2:	4b0c      	ldr	r3, [pc, #48]	@ (80156f4 <memp_free+0x44>)
 80156c4:	f240 12db 	movw	r2, #475	@ 0x1db
 80156c8:	490b      	ldr	r1, [pc, #44]	@ (80156f8 <memp_free+0x48>)
 80156ca:	480c      	ldr	r0, [pc, #48]	@ (80156fc <memp_free+0x4c>)
 80156cc:	f00c fdb8 	bl	8022240 <iprintf>
 80156d0:	e00c      	b.n	80156ec <memp_free+0x3c>

  if (mem == NULL) {
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d008      	beq.n	80156ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80156d8:	79fb      	ldrb	r3, [r7, #7]
 80156da:	4a09      	ldr	r2, [pc, #36]	@ (8015700 <memp_free+0x50>)
 80156dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156e0:	6839      	ldr	r1, [r7, #0]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7ff ffb8 	bl	8015658 <do_memp_free_pool>
 80156e8:	e000      	b.n	80156ec <memp_free+0x3c>
    return;
 80156ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	08025fa0 	.word	0x08025fa0
 80156f8:	08026070 	.word	0x08026070
 80156fc:	08025ff4 	.word	0x08025ff4
 8015700:	080315e8 	.word	0x080315e8

08015704 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015704:	b480      	push	{r7}
 8015706:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015708:	bf00      	nop
 801570a:	46bd      	mov	sp, r7
 801570c:	bc80      	pop	{r7}
 801570e:	4770      	bx	lr

08015710 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d105      	bne.n	8015730 <netif_add+0x20>
 8015724:	4b24      	ldr	r3, [pc, #144]	@ (80157b8 <netif_add+0xa8>)
 8015726:	22fb      	movs	r2, #251	@ 0xfb
 8015728:	4924      	ldr	r1, [pc, #144]	@ (80157bc <netif_add+0xac>)
 801572a:	4825      	ldr	r0, [pc, #148]	@ (80157c0 <netif_add+0xb0>)
 801572c:	f00c fd88 	bl	8022240 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2200      	movs	r2, #0
 8015734:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2200      	movs	r2, #0
 801573a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2200      	movs	r2, #0
 8015740:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2200      	movs	r2, #0
 8015746:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	3324      	adds	r3, #36	@ 0x24
 801574e:	2204      	movs	r2, #4
 8015750:	2100      	movs	r1, #0
 8015752:	4618      	mov	r0, r3
 8015754:	f00c ff4a 	bl	80225ec <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2203      	movs	r2, #3
 801575c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	69ba      	ldr	r2, [r7, #24]
 801576a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 801576c:	4b15      	ldr	r3, [pc, #84]	@ (80157c4 <netif_add+0xb4>)
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	1c5a      	adds	r2, r3, #1
 8015772:	b2d1      	uxtb	r1, r2
 8015774:	4a13      	ldr	r2, [pc, #76]	@ (80157c4 <netif_add+0xb4>)
 8015776:	7011      	strb	r1, [r2, #0]
 8015778:	68fa      	ldr	r2, [r7, #12]
 801577a:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
  netif->input = input;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	6a3a      	ldr	r2, [r7, #32]
 8015782:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	68b9      	ldr	r1, [r7, #8]
 801578a:	68f8      	ldr	r0, [r7, #12]
 801578c:	f000 f81e 	bl	80157cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	4798      	blx	r3
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d001      	beq.n	80157a0 <netif_add+0x90>
    return NULL;
 801579c:	2300      	movs	r3, #0
 801579e:	e007      	b.n	80157b0 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80157a0:	4b09      	ldr	r3, [pc, #36]	@ (80157c8 <netif_add+0xb8>)
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80157a8:	4a07      	ldr	r2, [pc, #28]	@ (80157c8 <netif_add+0xb8>)
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80157ae:	68fb      	ldr	r3, [r7, #12]
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3710      	adds	r7, #16
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	0802608c 	.word	0x0802608c
 80157bc:	080260c0 	.word	0x080260c0
 80157c0:	080260d8 	.word	0x080260d8
 80157c4:	2000bbe0 	.word	0x2000bbe0
 80157c8:	2000bbd8 	.word	0x2000bbd8

080157cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d003      	beq.n	80157e8 <netif_set_addr+0x1c>
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10c      	bne.n	8015802 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80157e8:	68b9      	ldr	r1, [r7, #8]
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f000 f81a 	bl	8015824 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80157f0:	6879      	ldr	r1, [r7, #4]
 80157f2:	68f8      	ldr	r0, [r7, #12]
 80157f4:	f000 f861 	bl	80158ba <netif_set_netmask>
    netif_set_gw(netif, gw);
 80157f8:	6839      	ldr	r1, [r7, #0]
 80157fa:	68f8      	ldr	r0, [r7, #12]
 80157fc:	f000 f84a 	bl	8015894 <netif_set_gw>
 8015800:	e00c      	b.n	801581c <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8015802:	6879      	ldr	r1, [r7, #4]
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f000 f858 	bl	80158ba <netif_set_netmask>
    netif_set_gw(netif, gw);
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 f841 	bl	8015894 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8015812:	68b9      	ldr	r1, [r7, #8]
 8015814:	68f8      	ldr	r0, [r7, #12]
 8015816:	f000 f805 	bl	8015824 <netif_set_ipaddr>
  }
}
 801581a:	bf00      	nop
 801581c:	bf00      	nop
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d003      	beq.n	801583c <netif_set_ipaddr+0x18>
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	60fb      	str	r3, [r7, #12]
 801583a:	e002      	b.n	8015842 <netif_set_ipaddr+0x1e>
 801583c:	4b14      	ldr	r3, [pc, #80]	@ (8015890 <netif_set_ipaddr+0x6c>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3304      	adds	r3, #4
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	429a      	cmp	r2, r3
 801584c:	d01c      	beq.n	8015888 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	3304      	adds	r3, #4
 8015852:	f107 020c 	add.w	r2, r7, #12
 8015856:	4611      	mov	r1, r2
 8015858:	4618      	mov	r0, r3
 801585a:	f002 fca9 	bl	80181b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	3304      	adds	r3, #4
 8015862:	f107 020c 	add.w	r2, r7, #12
 8015866:	4611      	mov	r1, r2
 8015868:	4618      	mov	r0, r3
 801586a:	f007 f8d7 	bl	801ca1c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <netif_set_ipaddr+0x56>
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	e000      	b.n	801587c <netif_set_ipaddr+0x58>
 801587a:	2300      	movs	r3, #0
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015880:	2101      	movs	r1, #1
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 f868 	bl	8015958 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8015888:	bf00      	nop
 801588a:	3710      	adds	r7, #16
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	0803165c 	.word	0x0803165c

08015894 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8015894:	b480      	push	{r7}
 8015896:	b083      	sub	sp, #12
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d002      	beq.n	80158aa <netif_set_gw+0x16>
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	e000      	b.n	80158ac <netif_set_gw+0x18>
 80158aa:	2300      	movs	r3, #0
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80158b0:	bf00      	nop
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bc80      	pop	{r7}
 80158b8:	4770      	bx	lr

080158ba <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80158ba:	b480      	push	{r7}
 80158bc:	b083      	sub	sp, #12
 80158be:	af00      	add	r7, sp, #0
 80158c0:	6078      	str	r0, [r7, #4]
 80158c2:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d002      	beq.n	80158d0 <netif_set_netmask+0x16>
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	e000      	b.n	80158d2 <netif_set_netmask+0x18>
 80158d0:	2300      	movs	r3, #0
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80158d6:	bf00      	nop
 80158d8:	370c      	adds	r7, #12
 80158da:	46bd      	mov	sp, r7
 80158dc:	bc80      	pop	{r7}
 80158de:	4770      	bx	lr

080158e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80158e8:	4a03      	ldr	r2, [pc, #12]	@ (80158f8 <netif_set_default+0x18>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80158ee:	bf00      	nop
 80158f0:	370c      	adds	r7, #12
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bc80      	pop	{r7}
 80158f6:	4770      	bx	lr
 80158f8:	2000bbdc 	.word	0x2000bbdc

080158fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801590a:	f003 0301 	and.w	r3, r3, #1
 801590e:	2b00      	cmp	r3, #0
 8015910:	d11c      	bne.n	801594c <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015918:	f043 0301 	orr.w	r3, r3, #1
 801591c:	b2da      	uxtb	r2, r3
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8015924:	f7f6 fb22 	bl	800bf6c <sys_now>
 8015928:	4603      	mov	r3, r0
 801592a:	4a0a      	ldr	r2, [pc, #40]	@ (8015954 <netif_set_up+0x58>)
 801592c:	fba2 2303 	umull	r2, r3, r2, r3
 8015930:	08da      	lsrs	r2, r3, #3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	63da      	str	r2, [r3, #60]	@ 0x3c

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801593c:	f003 0304 	and.w	r3, r3, #4
 8015940:	2b00      	cmp	r3, #0
 8015942:	d003      	beq.n	801594c <netif_set_up+0x50>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8015944:	2103      	movs	r1, #3
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f000 f806 	bl	8015958 <netif_issue_reports>
    }
  }
}
 801594c:	bf00      	nop
 801594e:	3708      	adds	r7, #8
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	cccccccd 	.word	0xcccccccd

08015958 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	460b      	mov	r3, r1
 8015962:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015964:	78fb      	ldrb	r3, [r7, #3]
 8015966:	f003 0301 	and.w	r3, r3, #1
 801596a:	2b00      	cmp	r3, #0
 801596c:	d011      	beq.n	8015992 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	3304      	adds	r3, #4
 8015972:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015974:	2b00      	cmp	r3, #0
 8015976:	d00c      	beq.n	8015992 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801597e:	f003 0308 	and.w	r3, r3, #8
 8015982:	2b00      	cmp	r3, #0
 8015984:	d005      	beq.n	8015992 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	3304      	adds	r3, #4
 801598a:	4619      	mov	r1, r3
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f009 ff0b 	bl	801f7a8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8015992:	bf00      	nop
 8015994:	3708      	adds	r7, #8
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}
	...

0801599c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159aa:	f003 0301 	and.w	r3, r3, #1
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d01b      	beq.n	80159ea <netif_set_down+0x4e>
    netif->flags &= ~NETIF_FLAG_UP;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159b8:	f023 0301 	bic.w	r3, r3, #1
 80159bc:	b2da      	uxtb	r2, r3
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 80159c4:	f7f6 fad2 	bl	800bf6c <sys_now>
 80159c8:	4603      	mov	r3, r0
 80159ca:	4a0a      	ldr	r2, [pc, #40]	@ (80159f4 <netif_set_down+0x58>)
 80159cc:	fba2 2303 	umull	r2, r3, r2, r3
 80159d0:	08da      	lsrs	r2, r3, #3
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	63da      	str	r2, [r3, #60]	@ 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159dc:	f003 0308 	and.w	r3, r3, #8
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d002      	beq.n	80159ea <netif_set_down+0x4e>
      etharp_cleanup_netif(netif);
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f009 f9f5 	bl	801edd4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80159ea:	bf00      	nop
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	cccccccd 	.word	0xcccccccd

080159f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a06:	f003 0304 	and.w	r3, r3, #4
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d11e      	bne.n	8015a4c <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a14:	f043 0304 	orr.w	r3, r3, #4
 8015a18:	b2da      	uxtb	r2, r3
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f007 fbd9 	bl	801d1d8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a2c:	f003 0301 	and.w	r3, r3, #1
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d003      	beq.n	8015a3c <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8015a34:	2103      	movs	r1, #3
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7ff ff8e 	bl	8015958 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	69db      	ldr	r3, [r3, #28]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d003      	beq.n	8015a4c <netif_set_link_up+0x54>
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	69db      	ldr	r3, [r3, #28]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	4798      	blx	r3
  }
}
 8015a4c:	bf00      	nop
 8015a4e:	3708      	adds	r7, #8
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a62:	f003 0304 	and.w	r3, r3, #4
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d010      	beq.n	8015a8c <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a70:	f023 0304 	bic.w	r3, r3, #4
 8015a74:	b2da      	uxtb	r2, r3
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    NETIF_LINK_CALLBACK(netif);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	69db      	ldr	r3, [r3, #28]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d003      	beq.n	8015a8c <netif_set_link_down+0x38>
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	69db      	ldr	r3, [r3, #28]
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	4798      	blx	r3
  }
}
 8015a8c:	bf00      	nop
 8015a8e:	3708      	adds	r7, #8
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}

08015a94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b083      	sub	sp, #12
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
  if (netif) {
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d002      	beq.n	8015aaa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	61da      	str	r2, [r3, #28]
  }
}
 8015aaa:	bf00      	nop
 8015aac:	370c      	adds	r7, #12
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bc80      	pop	{r7}
 8015ab2:	4770      	bx	lr

08015ab4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015aba:	4b0e      	ldr	r3, [pc, #56]	@ (8015af4 <pbuf_free_ooseq+0x40>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8015af8 <pbuf_free_ooseq+0x44>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	607b      	str	r3, [r7, #4]
 8015ac6:	e00f      	b.n	8015ae8 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d008      	beq.n	8015ae2 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f001 ffb4 	bl	8017a42 <tcp_segs_free>
      pcb->ooseq = NULL;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8015ae0:	e005      	b.n	8015aee <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	68db      	ldr	r3, [r3, #12]
 8015ae6:	607b      	str	r3, [r7, #4]
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d1ec      	bne.n	8015ac8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	2000bbe1 	.word	0x2000bbe1
 8015af8:	2000bd88 	.word	0x2000bd88

08015afc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015afc:	b480      	push	{r7}
 8015afe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015b00:	4b03      	ldr	r3, [pc, #12]	@ (8015b10 <pbuf_pool_is_empty+0x14>)
 8015b02:	2201      	movs	r2, #1
 8015b04:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015b06:	bf00      	nop
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bc80      	pop	{r7}
 8015b0c:	4770      	bx	lr
 8015b0e:	bf00      	nop
 8015b10:	2000bbe1 	.word	0x2000bbe1

08015b14 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b088      	sub	sp, #32
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	71fb      	strb	r3, [r7, #7]
 8015b1e:	460b      	mov	r3, r1
 8015b20:	80bb      	strh	r3, [r7, #4]
 8015b22:	4613      	mov	r3, r2
 8015b24:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8015b26:	79fb      	ldrb	r3, [r7, #7]
 8015b28:	2b04      	cmp	r3, #4
 8015b2a:	d81c      	bhi.n	8015b66 <pbuf_alloc+0x52>
 8015b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8015b34 <pbuf_alloc+0x20>)
 8015b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b32:	bf00      	nop
 8015b34:	08015b49 	.word	0x08015b49
 8015b38:	08015b4f 	.word	0x08015b4f
 8015b3c:	08015b55 	.word	0x08015b55
 8015b40:	08015b5b 	.word	0x08015b5b
 8015b44:	08015b61 	.word	0x08015b61
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8015b48:	2336      	movs	r3, #54	@ 0x36
 8015b4a:	82fb      	strh	r3, [r7, #22]
    break;
 8015b4c:	e014      	b.n	8015b78 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8015b4e:	2322      	movs	r3, #34	@ 0x22
 8015b50:	82fb      	strh	r3, [r7, #22]
    break;
 8015b52:	e011      	b.n	8015b78 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015b54:	230e      	movs	r3, #14
 8015b56:	82fb      	strh	r3, [r7, #22]
    break;
 8015b58:	e00e      	b.n	8015b78 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	82fb      	strh	r3, [r7, #22]
    break;
 8015b5e:	e00b      	b.n	8015b78 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8015b60:	2300      	movs	r3, #0
 8015b62:	82fb      	strh	r3, [r7, #22]
    break;
 8015b64:	e008      	b.n	8015b78 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8015b66:	4ba1      	ldr	r3, [pc, #644]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015b68:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8015b6c:	49a0      	ldr	r1, [pc, #640]	@ (8015df0 <pbuf_alloc+0x2dc>)
 8015b6e:	48a1      	ldr	r0, [pc, #644]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015b70:	f00c fb66 	bl	8022240 <iprintf>
    return NULL;
 8015b74:	2300      	movs	r3, #0
 8015b76:	e15c      	b.n	8015e32 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8015b78:	79bb      	ldrb	r3, [r7, #6]
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d00d      	beq.n	8015b9a <pbuf_alloc+0x86>
 8015b7e:	2b03      	cmp	r3, #3
 8015b80:	f300 8146 	bgt.w	8015e10 <pbuf_alloc+0x2fc>
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f000 80d0 	beq.w	8015d2a <pbuf_alloc+0x216>
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f2c0 8140 	blt.w	8015e10 <pbuf_alloc+0x2fc>
 8015b90:	3b01      	subs	r3, #1
 8015b92:	2b01      	cmp	r3, #1
 8015b94:	f200 813c 	bhi.w	8015e10 <pbuf_alloc+0x2fc>
 8015b98:	e10d      	b.n	8015db6 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015b9a:	2008      	movs	r0, #8
 8015b9c:	f7ff fd36 	bl	801560c <memp_malloc>
 8015ba0:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d103      	bne.n	8015bb0 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8015ba8:	f7ff ffa8 	bl	8015afc <pbuf_pool_is_empty>
      return NULL;
 8015bac:	2300      	movs	r3, #0
 8015bae:	e140      	b.n	8015e32 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	79ba      	ldrb	r2, [r7, #6]
 8015bb4:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8015bbc:	8afb      	ldrh	r3, [r7, #22]
 8015bbe:	3310      	adds	r3, #16
 8015bc0:	69fa      	ldr	r2, [r7, #28]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	3303      	adds	r3, #3
 8015bc6:	f023 0303 	bic.w	r3, r3, #3
 8015bca:	461a      	mov	r2, r3
 8015bcc:	69fb      	ldr	r3, [r7, #28]
 8015bce:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8015bd0:	69fb      	ldr	r3, [r7, #28]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	f003 0303 	and.w	r3, r3, #3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d006      	beq.n	8015bea <pbuf_alloc+0xd6>
 8015bdc:	4b83      	ldr	r3, [pc, #524]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015bde:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015be2:	4985      	ldr	r1, [pc, #532]	@ (8015df8 <pbuf_alloc+0x2e4>)
 8015be4:	4883      	ldr	r0, [pc, #524]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015be6:	f00c fb2b 	bl	8022240 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8015bea:	69fb      	ldr	r3, [r7, #28]
 8015bec:	88ba      	ldrh	r2, [r7, #4]
 8015bee:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8015bf0:	8afb      	ldrh	r3, [r7, #22]
 8015bf2:	3303      	adds	r3, #3
 8015bf4:	f023 0303 	bic.w	r3, r3, #3
 8015bf8:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8015bfc:	88bb      	ldrh	r3, [r7, #4]
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	bf28      	it	cs
 8015c02:	4613      	movcs	r3, r2
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	69fa      	ldr	r2, [r7, #28]
 8015c10:	8952      	ldrh	r2, [r2, #10]
 8015c12:	441a      	add	r2, r3
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d906      	bls.n	8015c2c <pbuf_alloc+0x118>
 8015c1e:	4b73      	ldr	r3, [pc, #460]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015c20:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8015c24:	4975      	ldr	r1, [pc, #468]	@ (8015dfc <pbuf_alloc+0x2e8>)
 8015c26:	4873      	ldr	r0, [pc, #460]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015c28:	f00c fb0a 	bl	8022240 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015c2c:	8afb      	ldrh	r3, [r7, #22]
 8015c2e:	3303      	adds	r3, #3
 8015c30:	f023 0303 	bic.w	r3, r3, #3
 8015c34:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8015c38:	d106      	bne.n	8015c48 <pbuf_alloc+0x134>
 8015c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015c3c:	f240 1231 	movw	r2, #305	@ 0x131
 8015c40:	496f      	ldr	r1, [pc, #444]	@ (8015e00 <pbuf_alloc+0x2ec>)
 8015c42:	486c      	ldr	r0, [pc, #432]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015c44:	f00c fafc 	bl	8022240 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8015c48:	69fb      	ldr	r3, [r7, #28]
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8015c52:	88bb      	ldrh	r3, [r7, #4]
 8015c54:	69fa      	ldr	r2, [r7, #28]
 8015c56:	8952      	ldrh	r2, [r2, #10]
 8015c58:	1a9b      	subs	r3, r3, r2
 8015c5a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8015c5c:	e061      	b.n	8015d22 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015c5e:	2008      	movs	r0, #8
 8015c60:	f7ff fcd4 	bl	801560c <memp_malloc>
 8015c64:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d106      	bne.n	8015c7a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8015c6c:	f7ff ff46 	bl	8015afc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8015c70:	69f8      	ldr	r0, [r7, #28]
 8015c72:	f000 fac7 	bl	8016204 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8015c76:	2300      	movs	r3, #0
 8015c78:	e0db      	b.n	8015e32 <pbuf_alloc+0x31e>
      }
      q->type = type;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	79ba      	ldrb	r2, [r7, #6]
 8015c7e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2200      	movs	r2, #0
 8015c84:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	68fa      	ldr	r2, [r7, #12]
 8015c90:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	dd06      	ble.n	8015caa <pbuf_alloc+0x196>
 8015c9c:	4b53      	ldr	r3, [pc, #332]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015c9e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8015ca2:	4958      	ldr	r1, [pc, #352]	@ (8015e04 <pbuf_alloc+0x2f0>)
 8015ca4:	4853      	ldr	r0, [pc, #332]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015ca6:	f00c facb 	bl	8022240 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	b29b      	uxth	r3, r3
 8015cb6:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8015cba:	bf28      	it	cs
 8015cbc:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8015cc0:	b29a      	uxth	r2, r3
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f103 0210 	add.w	r2, r3, #16
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	f003 0303 	and.w	r3, r3, #3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d006      	beq.n	8015cea <pbuf_alloc+0x1d6>
 8015cdc:	4b43      	ldr	r3, [pc, #268]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015cde:	f240 1251 	movw	r2, #337	@ 0x151
 8015ce2:	4949      	ldr	r1, [pc, #292]	@ (8015e08 <pbuf_alloc+0x2f4>)
 8015ce4:	4843      	ldr	r0, [pc, #268]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015ce6:	f00c faab 	bl	8022240 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	69fa      	ldr	r2, [r7, #28]
 8015cf0:	8952      	ldrh	r2, [r2, #10]
 8015cf2:	441a      	add	r2, r3
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d906      	bls.n	8015d0c <pbuf_alloc+0x1f8>
 8015cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015d00:	f240 1253 	movw	r2, #339	@ 0x153
 8015d04:	493d      	ldr	r1, [pc, #244]	@ (8015dfc <pbuf_alloc+0x2e8>)
 8015d06:	483b      	ldr	r0, [pc, #236]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015d08:	f00c fa9a 	bl	8022240 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	895b      	ldrh	r3, [r3, #10]
 8015d16:	461a      	mov	r2, r3
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	1a9b      	subs	r3, r3, r2
 8015d1c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	dc9a      	bgt.n	8015c5e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8015d28:	e07c      	b.n	8015e24 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8015d2a:	8afb      	ldrh	r3, [r7, #22]
 8015d2c:	3313      	adds	r3, #19
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	f023 0303 	bic.w	r3, r3, #3
 8015d34:	b29a      	uxth	r2, r3
 8015d36:	88bb      	ldrh	r3, [r7, #4]
 8015d38:	3303      	adds	r3, #3
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	f023 0303 	bic.w	r3, r3, #3
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	4413      	add	r3, r2
 8015d44:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8015d46:	897a      	ldrh	r2, [r7, #10]
 8015d48:	88bb      	ldrh	r3, [r7, #4]
 8015d4a:	3303      	adds	r3, #3
 8015d4c:	f023 0303 	bic.w	r3, r3, #3
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d201      	bcs.n	8015d58 <pbuf_alloc+0x244>
        return NULL;
 8015d54:	2300      	movs	r3, #0
 8015d56:	e06c      	b.n	8015e32 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8015d58:	897b      	ldrh	r3, [r7, #10]
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7ff faa8 	bl	80152b0 <mem_malloc>
 8015d60:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d101      	bne.n	8015d6c <pbuf_alloc+0x258>
      return NULL;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	e062      	b.n	8015e32 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8015d6c:	8afb      	ldrh	r3, [r7, #22]
 8015d6e:	3310      	adds	r3, #16
 8015d70:	69fa      	ldr	r2, [r7, #28]
 8015d72:	4413      	add	r3, r2
 8015d74:	3303      	adds	r3, #3
 8015d76:	f023 0303 	bic.w	r3, r3, #3
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	69fb      	ldr	r3, [r7, #28]
 8015d7e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	88ba      	ldrh	r2, [r7, #4]
 8015d84:	811a      	strh	r2, [r3, #8]
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	891a      	ldrh	r2, [r3, #8]
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8015d8e:	69fb      	ldr	r3, [r7, #28]
 8015d90:	2200      	movs	r2, #0
 8015d92:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015d94:	69fb      	ldr	r3, [r7, #28]
 8015d96:	79ba      	ldrb	r2, [r7, #6]
 8015d98:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	f003 0303 	and.w	r3, r3, #3
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d03d      	beq.n	8015e22 <pbuf_alloc+0x30e>
 8015da6:	4b11      	ldr	r3, [pc, #68]	@ (8015dec <pbuf_alloc+0x2d8>)
 8015da8:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8015dac:	4917      	ldr	r1, [pc, #92]	@ (8015e0c <pbuf_alloc+0x2f8>)
 8015dae:	4811      	ldr	r0, [pc, #68]	@ (8015df4 <pbuf_alloc+0x2e0>)
 8015db0:	f00c fa46 	bl	8022240 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8015db4:	e035      	b.n	8015e22 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015db6:	2007      	movs	r0, #7
 8015db8:	f7ff fc28 	bl	801560c <memp_malloc>
 8015dbc:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d101      	bne.n	8015dc8 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	e034      	b.n	8015e32 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	88ba      	ldrh	r2, [r7, #4]
 8015dd2:	811a      	strh	r2, [r3, #8]
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	891a      	ldrh	r2, [r3, #8]
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	2200      	movs	r2, #0
 8015de0:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015de2:	69fb      	ldr	r3, [r7, #28]
 8015de4:	79ba      	ldrb	r2, [r7, #6]
 8015de6:	731a      	strb	r2, [r3, #12]
    break;
 8015de8:	e01c      	b.n	8015e24 <pbuf_alloc+0x310>
 8015dea:	bf00      	nop
 8015dec:	08026100 	.word	0x08026100
 8015df0:	08026130 	.word	0x08026130
 8015df4:	0802614c 	.word	0x0802614c
 8015df8:	08026174 	.word	0x08026174
 8015dfc:	080261a4 	.word	0x080261a4
 8015e00:	080261d8 	.word	0x080261d8
 8015e04:	0802620c 	.word	0x0802620c
 8015e08:	08026220 	.word	0x08026220
 8015e0c:	08026250 	.word	0x08026250
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015e10:	4b0a      	ldr	r3, [pc, #40]	@ (8015e3c <pbuf_alloc+0x328>)
 8015e12:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8015e16:	490a      	ldr	r1, [pc, #40]	@ (8015e40 <pbuf_alloc+0x32c>)
 8015e18:	480a      	ldr	r0, [pc, #40]	@ (8015e44 <pbuf_alloc+0x330>)
 8015e1a:	f00c fa11 	bl	8022240 <iprintf>
    return NULL;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e007      	b.n	8015e32 <pbuf_alloc+0x31e>
    break;
 8015e22:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	2201      	movs	r2, #1
 8015e28:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015e30:	69fb      	ldr	r3, [r7, #28]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3720      	adds	r7, #32
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	08026100 	.word	0x08026100
 8015e40:	0802627c 	.word	0x0802627c
 8015e44:	0802614c 	.word	0x0802614c

08015e48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	603b      	str	r3, [r7, #0]
 8015e50:	4603      	mov	r3, r0
 8015e52:	71fb      	strb	r3, [r7, #7]
 8015e54:	460b      	mov	r3, r1
 8015e56:	80bb      	strh	r3, [r7, #4]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8015e5c:	79fb      	ldrb	r3, [r7, #7]
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	d81b      	bhi.n	8015e9a <pbuf_alloced_custom+0x52>
 8015e62:	a201      	add	r2, pc, #4	@ (adr r2, 8015e68 <pbuf_alloced_custom+0x20>)
 8015e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e68:	08015e7d 	.word	0x08015e7d
 8015e6c:	08015e83 	.word	0x08015e83
 8015e70:	08015e89 	.word	0x08015e89
 8015e74:	08015e8f 	.word	0x08015e8f
 8015e78:	08015e95 	.word	0x08015e95
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8015e7c:	2336      	movs	r3, #54	@ 0x36
 8015e7e:	81fb      	strh	r3, [r7, #14]
    break;
 8015e80:	e014      	b.n	8015eac <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8015e82:	2322      	movs	r3, #34	@ 0x22
 8015e84:	81fb      	strh	r3, [r7, #14]
    break;
 8015e86:	e011      	b.n	8015eac <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015e88:	230e      	movs	r3, #14
 8015e8a:	81fb      	strh	r3, [r7, #14]
    break;
 8015e8c:	e00e      	b.n	8015eac <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	81fb      	strh	r3, [r7, #14]
    break;
 8015e92:	e00b      	b.n	8015eac <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8015e94:	2300      	movs	r3, #0
 8015e96:	81fb      	strh	r3, [r7, #14]
    break;
 8015e98:	e008      	b.n	8015eac <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8015e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8015f10 <pbuf_alloced_custom+0xc8>)
 8015e9c:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8015ea0:	491c      	ldr	r1, [pc, #112]	@ (8015f14 <pbuf_alloced_custom+0xcc>)
 8015ea2:	481d      	ldr	r0, [pc, #116]	@ (8015f18 <pbuf_alloced_custom+0xd0>)
 8015ea4:	f00c f9cc 	bl	8022240 <iprintf>
    return NULL;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	e02d      	b.n	8015f08 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015eac:	89fb      	ldrh	r3, [r7, #14]
 8015eae:	3303      	adds	r3, #3
 8015eb0:	f023 0203 	bic.w	r2, r3, #3
 8015eb4:	88bb      	ldrh	r3, [r7, #4]
 8015eb6:	441a      	add	r2, r3
 8015eb8:	8bbb      	ldrh	r3, [r7, #28]
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d901      	bls.n	8015ec2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	e022      	b.n	8015f08 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d008      	beq.n	8015ee0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015ece:	89fb      	ldrh	r3, [r7, #14]
 8015ed0:	3303      	adds	r3, #3
 8015ed2:	f023 0303 	bic.w	r3, r3, #3
 8015ed6:	69ba      	ldr	r2, [r7, #24]
 8015ed8:	441a      	add	r2, r3
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	605a      	str	r2, [r3, #4]
 8015ede:	e002      	b.n	8015ee6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	2202      	movs	r2, #2
 8015eea:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	88ba      	ldrh	r2, [r7, #4]
 8015ef0:	811a      	strh	r2, [r3, #8]
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	891a      	ldrh	r2, [r3, #8]
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	79ba      	ldrb	r2, [r7, #6]
 8015efe:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	2201      	movs	r2, #1
 8015f04:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8015f06:	683b      	ldr	r3, [r7, #0]
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3710      	adds	r7, #16
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	08026100 	.word	0x08026100
 8015f14:	08026298 	.word	0x08026298
 8015f18:	0802614c 	.word	0x0802614c

08015f1c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b086      	sub	sp, #24
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	460b      	mov	r3, r1
 8015f26:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d106      	bne.n	8015f3c <pbuf_realloc+0x20>
 8015f2e:	4b4b      	ldr	r3, [pc, #300]	@ (801605c <pbuf_realloc+0x140>)
 8015f30:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8015f34:	494a      	ldr	r1, [pc, #296]	@ (8016060 <pbuf_realloc+0x144>)
 8015f36:	484b      	ldr	r0, [pc, #300]	@ (8016064 <pbuf_realloc+0x148>)
 8015f38:	f00c f982 	bl	8022240 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	7b1b      	ldrb	r3, [r3, #12]
 8015f40:	2b03      	cmp	r3, #3
 8015f42:	d012      	beq.n	8015f6a <pbuf_realloc+0x4e>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	7b1b      	ldrb	r3, [r3, #12]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d00e      	beq.n	8015f6a <pbuf_realloc+0x4e>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	7b1b      	ldrb	r3, [r3, #12]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d00a      	beq.n	8015f6a <pbuf_realloc+0x4e>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	7b1b      	ldrb	r3, [r3, #12]
 8015f58:	2b02      	cmp	r3, #2
 8015f5a:	d006      	beq.n	8015f6a <pbuf_realloc+0x4e>
 8015f5c:	4b3f      	ldr	r3, [pc, #252]	@ (801605c <pbuf_realloc+0x140>)
 8015f5e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8015f62:	4941      	ldr	r1, [pc, #260]	@ (8016068 <pbuf_realloc+0x14c>)
 8015f64:	483f      	ldr	r0, [pc, #252]	@ (8016064 <pbuf_realloc+0x148>)
 8015f66:	f00c f96b 	bl	8022240 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	891b      	ldrh	r3, [r3, #8]
 8015f6e:	887a      	ldrh	r2, [r7, #2]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d26e      	bcs.n	8016052 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8015f74:	887b      	ldrh	r3, [r7, #2]
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	8912      	ldrh	r2, [r2, #8]
 8015f7a:	1a9b      	subs	r3, r3, r2
 8015f7c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015f7e:	887b      	ldrh	r3, [r7, #2]
 8015f80:	827b      	strh	r3, [r7, #18]
  q = p;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015f86:	e025      	b.n	8015fd4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	895b      	ldrh	r3, [r3, #10]
 8015f8c:	8a7a      	ldrh	r2, [r7, #18]
 8015f8e:	1ad3      	subs	r3, r2, r3
 8015f90:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015f98:	4293      	cmp	r3, r2
 8015f9a:	dd06      	ble.n	8015faa <pbuf_realloc+0x8e>
 8015f9c:	4b2f      	ldr	r3, [pc, #188]	@ (801605c <pbuf_realloc+0x140>)
 8015f9e:	f240 220b 	movw	r2, #523	@ 0x20b
 8015fa2:	4932      	ldr	r1, [pc, #200]	@ (801606c <pbuf_realloc+0x150>)
 8015fa4:	482f      	ldr	r0, [pc, #188]	@ (8016064 <pbuf_realloc+0x148>)
 8015fa6:	f00c f94b 	bl	8022240 <iprintf>
    q->tot_len += (u16_t)grow;
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	891a      	ldrh	r2, [r3, #8]
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	4413      	add	r3, r2
 8015fb4:	b29a      	uxth	r2, r3
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d106      	bne.n	8015fd4 <pbuf_realloc+0xb8>
 8015fc6:	4b25      	ldr	r3, [pc, #148]	@ (801605c <pbuf_realloc+0x140>)
 8015fc8:	f240 220f 	movw	r2, #527	@ 0x20f
 8015fcc:	4928      	ldr	r1, [pc, #160]	@ (8016070 <pbuf_realloc+0x154>)
 8015fce:	4825      	ldr	r0, [pc, #148]	@ (8016064 <pbuf_realloc+0x148>)
 8015fd0:	f00c f936 	bl	8022240 <iprintf>
  while (rem_len > q->len) {
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	895b      	ldrh	r3, [r3, #10]
 8015fd8:	8a7a      	ldrh	r2, [r7, #18]
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d8d4      	bhi.n	8015f88 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	7b1b      	ldrb	r3, [r3, #12]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d121      	bne.n	801602a <pbuf_realloc+0x10e>
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	895b      	ldrh	r3, [r3, #10]
 8015fea:	8a7a      	ldrh	r2, [r7, #18]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d01c      	beq.n	801602a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	7b5b      	ldrb	r3, [r3, #13]
 8015ff4:	f003 0302 	and.w	r3, r3, #2
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d116      	bne.n	801602a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	685a      	ldr	r2, [r3, #4]
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	1ad3      	subs	r3, r2, r3
 8016004:	b29a      	uxth	r2, r3
 8016006:	8a7b      	ldrh	r3, [r7, #18]
 8016008:	4413      	add	r3, r2
 801600a:	b29b      	uxth	r3, r3
 801600c:	4619      	mov	r1, r3
 801600e:	6978      	ldr	r0, [r7, #20]
 8016010:	f7ff f850 	bl	80150b4 <mem_trim>
 8016014:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d106      	bne.n	801602a <pbuf_realloc+0x10e>
 801601c:	4b0f      	ldr	r3, [pc, #60]	@ (801605c <pbuf_realloc+0x140>)
 801601e:	f240 221d 	movw	r2, #541	@ 0x21d
 8016022:	4914      	ldr	r1, [pc, #80]	@ (8016074 <pbuf_realloc+0x158>)
 8016024:	480f      	ldr	r0, [pc, #60]	@ (8016064 <pbuf_realloc+0x148>)
 8016026:	f00c f90b 	bl	8022240 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	8a7a      	ldrh	r2, [r7, #18]
 801602e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	895a      	ldrh	r2, [r3, #10]
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d004      	beq.n	801604a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4618      	mov	r0, r3
 8016046:	f000 f8dd 	bl	8016204 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	2200      	movs	r2, #0
 801604e:	601a      	str	r2, [r3, #0]
 8016050:	e000      	b.n	8016054 <pbuf_realloc+0x138>
    return;
 8016052:	bf00      	nop

}
 8016054:	3718      	adds	r7, #24
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	08026100 	.word	0x08026100
 8016060:	080262bc 	.word	0x080262bc
 8016064:	0802614c 	.word	0x0802614c
 8016068:	080262d4 	.word	0x080262d4
 801606c:	080262f0 	.word	0x080262f0
 8016070:	08026304 	.word	0x08026304
 8016074:	0802631c 	.word	0x0802631c

08016078 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	460b      	mov	r3, r1
 8016082:	807b      	strh	r3, [r7, #2]
 8016084:	4613      	mov	r3, r2
 8016086:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d106      	bne.n	801609c <pbuf_header_impl+0x24>
 801608e:	4b46      	ldr	r3, [pc, #280]	@ (80161a8 <pbuf_header_impl+0x130>)
 8016090:	f240 223f 	movw	r2, #575	@ 0x23f
 8016094:	4945      	ldr	r1, [pc, #276]	@ (80161ac <pbuf_header_impl+0x134>)
 8016096:	4846      	ldr	r0, [pc, #280]	@ (80161b0 <pbuf_header_impl+0x138>)
 8016098:	f00c f8d2 	bl	8022240 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 801609c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d002      	beq.n	80160aa <pbuf_header_impl+0x32>
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d101      	bne.n	80160ae <pbuf_header_impl+0x36>
    return 0;
 80160aa:	2300      	movs	r3, #0
 80160ac:	e078      	b.n	80161a0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80160ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	da10      	bge.n	80160d8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80160b6:	887b      	ldrh	r3, [r7, #2]
 80160b8:	425b      	negs	r3, r3
 80160ba:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	895b      	ldrh	r3, [r3, #10]
 80160c0:	89fa      	ldrh	r2, [r7, #14]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d90a      	bls.n	80160dc <pbuf_header_impl+0x64>
 80160c6:	4b38      	ldr	r3, [pc, #224]	@ (80161a8 <pbuf_header_impl+0x130>)
 80160c8:	f240 2247 	movw	r2, #583	@ 0x247
 80160cc:	4939      	ldr	r1, [pc, #228]	@ (80161b4 <pbuf_header_impl+0x13c>)
 80160ce:	4838      	ldr	r0, [pc, #224]	@ (80161b0 <pbuf_header_impl+0x138>)
 80160d0:	f00c f8b6 	bl	8022240 <iprintf>
 80160d4:	2301      	movs	r3, #1
 80160d6:	e063      	b.n	80161a0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80160d8:	887b      	ldrh	r3, [r7, #2]
 80160da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	7b1b      	ldrb	r3, [r3, #12]
 80160e0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80160e8:	89bb      	ldrh	r3, [r7, #12]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d002      	beq.n	80160f4 <pbuf_header_impl+0x7c>
 80160ee:	89bb      	ldrh	r3, [r7, #12]
 80160f0:	2b03      	cmp	r3, #3
 80160f2:	d112      	bne.n	801611a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	685a      	ldr	r2, [r3, #4]
 80160f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160fc:	425b      	negs	r3, r3
 80160fe:	441a      	add	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	685a      	ldr	r2, [r3, #4]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	3310      	adds	r3, #16
 801610c:	429a      	cmp	r2, r3
 801610e:	d238      	bcs.n	8016182 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8016116:	2301      	movs	r3, #1
 8016118:	e042      	b.n	80161a0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801611a:	89bb      	ldrh	r3, [r7, #12]
 801611c:	2b02      	cmp	r3, #2
 801611e:	d002      	beq.n	8016126 <pbuf_header_impl+0xae>
 8016120:	89bb      	ldrh	r3, [r7, #12]
 8016122:	2b01      	cmp	r3, #1
 8016124:	d124      	bne.n	8016170 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8016126:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801612a:	2b00      	cmp	r3, #0
 801612c:	da0d      	bge.n	801614a <pbuf_header_impl+0xd2>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	895b      	ldrh	r3, [r3, #10]
 8016132:	89fa      	ldrh	r2, [r7, #14]
 8016134:	429a      	cmp	r2, r3
 8016136:	d808      	bhi.n	801614a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	685a      	ldr	r2, [r3, #4]
 801613c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016140:	425b      	negs	r3, r3
 8016142:	441a      	add	r2, r3
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	605a      	str	r2, [r3, #4]
 8016148:	e011      	b.n	801616e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801614a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801614e:	2b00      	cmp	r3, #0
 8016150:	dd0b      	ble.n	801616a <pbuf_header_impl+0xf2>
 8016152:	787b      	ldrb	r3, [r7, #1]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d008      	beq.n	801616a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	685a      	ldr	r2, [r3, #4]
 801615c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016160:	425b      	negs	r3, r3
 8016162:	441a      	add	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	605a      	str	r2, [r3, #4]
 8016168:	e001      	b.n	801616e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801616a:	2301      	movs	r3, #1
 801616c:	e018      	b.n	80161a0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801616e:	e008      	b.n	8016182 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8016170:	4b0d      	ldr	r3, [pc, #52]	@ (80161a8 <pbuf_header_impl+0x130>)
 8016172:	f240 2277 	movw	r2, #631	@ 0x277
 8016176:	4910      	ldr	r1, [pc, #64]	@ (80161b8 <pbuf_header_impl+0x140>)
 8016178:	480d      	ldr	r0, [pc, #52]	@ (80161b0 <pbuf_header_impl+0x138>)
 801617a:	f00c f861 	bl	8022240 <iprintf>
    return 1;
 801617e:	2301      	movs	r3, #1
 8016180:	e00e      	b.n	80161a0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	895a      	ldrh	r2, [r3, #10]
 8016186:	887b      	ldrh	r3, [r7, #2]
 8016188:	4413      	add	r3, r2
 801618a:	b29a      	uxth	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	891a      	ldrh	r2, [r3, #8]
 8016194:	887b      	ldrh	r3, [r7, #2]
 8016196:	4413      	add	r3, r2
 8016198:	b29a      	uxth	r2, r3
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801619e:	2300      	movs	r3, #0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3710      	adds	r7, #16
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	08026100 	.word	0x08026100
 80161ac:	08026338 	.word	0x08026338
 80161b0:	0802614c 	.word	0x0802614c
 80161b4:	08026344 	.word	0x08026344
 80161b8:	08026364 	.word	0x08026364

080161bc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	460b      	mov	r3, r1
 80161c6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80161c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80161cc:	2200      	movs	r2, #0
 80161ce:	4619      	mov	r1, r3
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff ff51 	bl	8016078 <pbuf_header_impl>
 80161d6:	4603      	mov	r3, r0
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3708      	adds	r7, #8
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}

080161e0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	460b      	mov	r3, r1
 80161ea:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80161ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80161f0:	2201      	movs	r2, #1
 80161f2:	4619      	mov	r1, r3
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f7ff ff3f 	bl	8016078 <pbuf_header_impl>
 80161fa:	4603      	mov	r3, r0
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	3708      	adds	r7, #8
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b086      	sub	sp, #24
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d10b      	bne.n	801622a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d106      	bne.n	8016226 <pbuf_free+0x22>
 8016218:	4b3e      	ldr	r3, [pc, #248]	@ (8016314 <pbuf_free+0x110>)
 801621a:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801621e:	493e      	ldr	r1, [pc, #248]	@ (8016318 <pbuf_free+0x114>)
 8016220:	483e      	ldr	r0, [pc, #248]	@ (801631c <pbuf_free+0x118>)
 8016222:	f00c f80d 	bl	8022240 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016226:	2300      	movs	r3, #0
 8016228:	e070      	b.n	801630c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	7b1b      	ldrb	r3, [r3, #12]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d012      	beq.n	8016258 <pbuf_free+0x54>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	7b1b      	ldrb	r3, [r3, #12]
 8016236:	2b01      	cmp	r3, #1
 8016238:	d00e      	beq.n	8016258 <pbuf_free+0x54>
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	7b1b      	ldrb	r3, [r3, #12]
 801623e:	2b02      	cmp	r3, #2
 8016240:	d00a      	beq.n	8016258 <pbuf_free+0x54>
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	7b1b      	ldrb	r3, [r3, #12]
 8016246:	2b03      	cmp	r3, #3
 8016248:	d006      	beq.n	8016258 <pbuf_free+0x54>
 801624a:	4b32      	ldr	r3, [pc, #200]	@ (8016314 <pbuf_free+0x110>)
 801624c:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8016250:	4933      	ldr	r1, [pc, #204]	@ (8016320 <pbuf_free+0x11c>)
 8016252:	4832      	ldr	r0, [pc, #200]	@ (801631c <pbuf_free+0x118>)
 8016254:	f00b fff4 	bl	8022240 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8016258:	2300      	movs	r3, #0
 801625a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801625c:	e052      	b.n	8016304 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	89db      	ldrh	r3, [r3, #14]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d106      	bne.n	8016274 <pbuf_free+0x70>
 8016266:	4b2b      	ldr	r3, [pc, #172]	@ (8016314 <pbuf_free+0x110>)
 8016268:	f240 22eb 	movw	r2, #747	@ 0x2eb
 801626c:	492d      	ldr	r1, [pc, #180]	@ (8016324 <pbuf_free+0x120>)
 801626e:	482b      	ldr	r0, [pc, #172]	@ (801631c <pbuf_free+0x118>)
 8016270:	f00b ffe6 	bl	8022240 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	89db      	ldrh	r3, [r3, #14]
 8016278:	3b01      	subs	r3, #1
 801627a:	b29a      	uxth	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	81da      	strh	r2, [r3, #14]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	89db      	ldrh	r3, [r3, #14]
 8016284:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016286:	8abb      	ldrh	r3, [r7, #20]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d139      	bne.n	8016300 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	7b1b      	ldrb	r3, [r3, #12]
 8016296:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	7b5b      	ldrb	r3, [r3, #13]
 801629c:	f003 0302 	and.w	r3, r3, #2
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d011      	beq.n	80162c8 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	691b      	ldr	r3, [r3, #16]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d106      	bne.n	80162be <pbuf_free+0xba>
 80162b0:	4b18      	ldr	r3, [pc, #96]	@ (8016314 <pbuf_free+0x110>)
 80162b2:	f240 22f9 	movw	r2, #761	@ 0x2f9
 80162b6:	491c      	ldr	r1, [pc, #112]	@ (8016328 <pbuf_free+0x124>)
 80162b8:	4818      	ldr	r0, [pc, #96]	@ (801631c <pbuf_free+0x118>)
 80162ba:	f00b ffc1 	bl	8022240 <iprintf>
        pc->custom_free_function(p);
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	691b      	ldr	r3, [r3, #16]
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	4798      	blx	r3
 80162c6:	e015      	b.n	80162f4 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80162c8:	89fb      	ldrh	r3, [r7, #14]
 80162ca:	2b03      	cmp	r3, #3
 80162cc:	d104      	bne.n	80162d8 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80162ce:	6879      	ldr	r1, [r7, #4]
 80162d0:	2008      	movs	r0, #8
 80162d2:	f7ff f9ed 	bl	80156b0 <memp_free>
 80162d6:	e00d      	b.n	80162f4 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80162d8:	89fb      	ldrh	r3, [r7, #14]
 80162da:	2b01      	cmp	r3, #1
 80162dc:	d002      	beq.n	80162e4 <pbuf_free+0xe0>
 80162de:	89fb      	ldrh	r3, [r7, #14]
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d104      	bne.n	80162ee <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80162e4:	6879      	ldr	r1, [r7, #4]
 80162e6:	2007      	movs	r0, #7
 80162e8:	f7ff f9e2 	bl	80156b0 <memp_free>
 80162ec:	e002      	b.n	80162f4 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f7fe fe64 	bl	8014fbc <mem_free>
        }
      }
      count++;
 80162f4:	7dfb      	ldrb	r3, [r7, #23]
 80162f6:	3301      	adds	r3, #1
 80162f8:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80162fa:	693b      	ldr	r3, [r7, #16]
 80162fc:	607b      	str	r3, [r7, #4]
 80162fe:	e001      	b.n	8016304 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8016300:	2300      	movs	r3, #0
 8016302:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d1a9      	bne.n	801625e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801630a:	7dfb      	ldrb	r3, [r7, #23]
}
 801630c:	4618      	mov	r0, r3
 801630e:	3718      	adds	r7, #24
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}
 8016314:	08026100 	.word	0x08026100
 8016318:	08026338 	.word	0x08026338
 801631c:	0802614c 	.word	0x0802614c
 8016320:	08026374 	.word	0x08026374
 8016324:	0802638c 	.word	0x0802638c
 8016328:	080263a4 	.word	0x080263a4

0801632c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801632c:	b480      	push	{r7}
 801632e:	b085      	sub	sp, #20
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016334:	2300      	movs	r3, #0
 8016336:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016338:	e005      	b.n	8016346 <pbuf_clen+0x1a>
    ++len;
 801633a:	89fb      	ldrh	r3, [r7, #14]
 801633c:	3301      	adds	r3, #1
 801633e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1f6      	bne.n	801633a <pbuf_clen+0xe>
  }
  return len;
 801634c:	89fb      	ldrh	r3, [r7, #14]
}
 801634e:	4618      	mov	r0, r3
 8016350:	3714      	adds	r7, #20
 8016352:	46bd      	mov	sp, r7
 8016354:	bc80      	pop	{r7}
 8016356:	4770      	bx	lr

08016358 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d010      	beq.n	8016388 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	89db      	ldrh	r3, [r3, #14]
 801636a:	3301      	adds	r3, #1
 801636c:	b29a      	uxth	r2, r3
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	89db      	ldrh	r3, [r3, #14]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d106      	bne.n	8016388 <pbuf_ref+0x30>
 801637a:	4b05      	ldr	r3, [pc, #20]	@ (8016390 <pbuf_ref+0x38>)
 801637c:	f240 3239 	movw	r2, #825	@ 0x339
 8016380:	4904      	ldr	r1, [pc, #16]	@ (8016394 <pbuf_ref+0x3c>)
 8016382:	4805      	ldr	r0, [pc, #20]	@ (8016398 <pbuf_ref+0x40>)
 8016384:	f00b ff5c 	bl	8022240 <iprintf>
  }
}
 8016388:	bf00      	nop
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	08026100 	.word	0x08026100
 8016394:	080263c8 	.word	0x080263c8
 8016398:	0802614c 	.word	0x0802614c

0801639c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d002      	beq.n	80163b2 <pbuf_cat+0x16>
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d107      	bne.n	80163c2 <pbuf_cat+0x26>
 80163b2:	4b20      	ldr	r3, [pc, #128]	@ (8016434 <pbuf_cat+0x98>)
 80163b4:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80163b8:	491f      	ldr	r1, [pc, #124]	@ (8016438 <pbuf_cat+0x9c>)
 80163ba:	4820      	ldr	r0, [pc, #128]	@ (801643c <pbuf_cat+0xa0>)
 80163bc:	f00b ff40 	bl	8022240 <iprintf>
 80163c0:	e034      	b.n	801642c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	60fb      	str	r3, [r7, #12]
 80163c6:	e00a      	b.n	80163de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	891a      	ldrh	r2, [r3, #8]
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	891b      	ldrh	r3, [r3, #8]
 80163d0:	4413      	add	r3, r2
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	60fb      	str	r3, [r7, #12]
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d1f0      	bne.n	80163c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	891a      	ldrh	r2, [r3, #8]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	895b      	ldrh	r3, [r3, #10]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d006      	beq.n	8016400 <pbuf_cat+0x64>
 80163f2:	4b10      	ldr	r3, [pc, #64]	@ (8016434 <pbuf_cat+0x98>)
 80163f4:	f240 3255 	movw	r2, #853	@ 0x355
 80163f8:	4911      	ldr	r1, [pc, #68]	@ (8016440 <pbuf_cat+0xa4>)
 80163fa:	4810      	ldr	r0, [pc, #64]	@ (801643c <pbuf_cat+0xa0>)
 80163fc:	f00b ff20 	bl	8022240 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d006      	beq.n	8016416 <pbuf_cat+0x7a>
 8016408:	4b0a      	ldr	r3, [pc, #40]	@ (8016434 <pbuf_cat+0x98>)
 801640a:	f240 3256 	movw	r2, #854	@ 0x356
 801640e:	490d      	ldr	r1, [pc, #52]	@ (8016444 <pbuf_cat+0xa8>)
 8016410:	480a      	ldr	r0, [pc, #40]	@ (801643c <pbuf_cat+0xa0>)
 8016412:	f00b ff15 	bl	8022240 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	891a      	ldrh	r2, [r3, #8]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	891b      	ldrh	r3, [r3, #8]
 801641e:	4413      	add	r3, r2
 8016420:	b29a      	uxth	r2, r3
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	683a      	ldr	r2, [r7, #0]
 801642a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	08026100 	.word	0x08026100
 8016438:	080263dc 	.word	0x080263dc
 801643c:	0802614c 	.word	0x0802614c
 8016440:	08026414 	.word	0x08026414
 8016444:	08026444 	.word	0x08026444

08016448 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8016452:	6839      	ldr	r1, [r7, #0]
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7ff ffa1 	bl	801639c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801645a:	6838      	ldr	r0, [r7, #0]
 801645c:	f7ff ff7c 	bl	8016358 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016460:	bf00      	nop
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8016472:	2300      	movs	r3, #0
 8016474:	81fb      	strh	r3, [r7, #14]
 8016476:	2300      	movs	r3, #0
 8016478:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d008      	beq.n	8016492 <pbuf_copy+0x2a>
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d005      	beq.n	8016492 <pbuf_copy+0x2a>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	891a      	ldrh	r2, [r3, #8]
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	891b      	ldrh	r3, [r3, #8]
 801648e:	429a      	cmp	r2, r3
 8016490:	d209      	bcs.n	80164a6 <pbuf_copy+0x3e>
 8016492:	4b54      	ldr	r3, [pc, #336]	@ (80165e4 <pbuf_copy+0x17c>)
 8016494:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8016498:	4953      	ldr	r1, [pc, #332]	@ (80165e8 <pbuf_copy+0x180>)
 801649a:	4854      	ldr	r0, [pc, #336]	@ (80165ec <pbuf_copy+0x184>)
 801649c:	f00b fed0 	bl	8022240 <iprintf>
 80164a0:	f06f 030f 	mvn.w	r3, #15
 80164a4:	e099      	b.n	80165da <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	895b      	ldrh	r3, [r3, #10]
 80164aa:	461a      	mov	r2, r3
 80164ac:	89fb      	ldrh	r3, [r7, #14]
 80164ae:	1ad2      	subs	r2, r2, r3
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	895b      	ldrh	r3, [r3, #10]
 80164b4:	4619      	mov	r1, r3
 80164b6:	89bb      	ldrh	r3, [r7, #12]
 80164b8:	1acb      	subs	r3, r1, r3
 80164ba:	429a      	cmp	r2, r3
 80164bc:	db05      	blt.n	80164ca <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	895a      	ldrh	r2, [r3, #10]
 80164c2:	89bb      	ldrh	r3, [r7, #12]
 80164c4:	1ad3      	subs	r3, r2, r3
 80164c6:	817b      	strh	r3, [r7, #10]
 80164c8:	e004      	b.n	80164d4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	895a      	ldrh	r2, [r3, #10]
 80164ce:	89fb      	ldrh	r3, [r7, #14]
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	685a      	ldr	r2, [r3, #4]
 80164d8:	89fb      	ldrh	r3, [r7, #14]
 80164da:	18d0      	adds	r0, r2, r3
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	685a      	ldr	r2, [r3, #4]
 80164e0:	89bb      	ldrh	r3, [r7, #12]
 80164e2:	4413      	add	r3, r2
 80164e4:	897a      	ldrh	r2, [r7, #10]
 80164e6:	4619      	mov	r1, r3
 80164e8:	f00c f9a5 	bl	8022836 <memcpy>
    offset_to += len;
 80164ec:	89fa      	ldrh	r2, [r7, #14]
 80164ee:	897b      	ldrh	r3, [r7, #10]
 80164f0:	4413      	add	r3, r2
 80164f2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80164f4:	89ba      	ldrh	r2, [r7, #12]
 80164f6:	897b      	ldrh	r3, [r7, #10]
 80164f8:	4413      	add	r3, r2
 80164fa:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	895b      	ldrh	r3, [r3, #10]
 8016500:	89fa      	ldrh	r2, [r7, #14]
 8016502:	429a      	cmp	r2, r3
 8016504:	d906      	bls.n	8016514 <pbuf_copy+0xac>
 8016506:	4b37      	ldr	r3, [pc, #220]	@ (80165e4 <pbuf_copy+0x17c>)
 8016508:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801650c:	4938      	ldr	r1, [pc, #224]	@ (80165f0 <pbuf_copy+0x188>)
 801650e:	4837      	ldr	r0, [pc, #220]	@ (80165ec <pbuf_copy+0x184>)
 8016510:	f00b fe96 	bl	8022240 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	895b      	ldrh	r3, [r3, #10]
 8016518:	89ba      	ldrh	r2, [r7, #12]
 801651a:	429a      	cmp	r2, r3
 801651c:	d906      	bls.n	801652c <pbuf_copy+0xc4>
 801651e:	4b31      	ldr	r3, [pc, #196]	@ (80165e4 <pbuf_copy+0x17c>)
 8016520:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8016524:	4933      	ldr	r1, [pc, #204]	@ (80165f4 <pbuf_copy+0x18c>)
 8016526:	4831      	ldr	r0, [pc, #196]	@ (80165ec <pbuf_copy+0x184>)
 8016528:	f00b fe8a 	bl	8022240 <iprintf>
    if (offset_from >= p_from->len) {
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	895b      	ldrh	r3, [r3, #10]
 8016530:	89ba      	ldrh	r2, [r7, #12]
 8016532:	429a      	cmp	r2, r3
 8016534:	d304      	bcc.n	8016540 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	895b      	ldrh	r3, [r3, #10]
 8016544:	89fa      	ldrh	r2, [r7, #14]
 8016546:	429a      	cmp	r2, r3
 8016548:	d114      	bne.n	8016574 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801654a:	2300      	movs	r3, #0
 801654c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d10c      	bne.n	8016574 <pbuf_copy+0x10c>
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d009      	beq.n	8016574 <pbuf_copy+0x10c>
 8016560:	4b20      	ldr	r3, [pc, #128]	@ (80165e4 <pbuf_copy+0x17c>)
 8016562:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016566:	4924      	ldr	r1, [pc, #144]	@ (80165f8 <pbuf_copy+0x190>)
 8016568:	4820      	ldr	r0, [pc, #128]	@ (80165ec <pbuf_copy+0x184>)
 801656a:	f00b fe69 	bl	8022240 <iprintf>
 801656e:	f06f 030f 	mvn.w	r3, #15
 8016572:	e032      	b.n	80165da <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d013      	beq.n	80165a2 <pbuf_copy+0x13a>
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	895a      	ldrh	r2, [r3, #10]
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	891b      	ldrh	r3, [r3, #8]
 8016582:	429a      	cmp	r2, r3
 8016584:	d10d      	bne.n	80165a2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d009      	beq.n	80165a2 <pbuf_copy+0x13a>
 801658e:	4b15      	ldr	r3, [pc, #84]	@ (80165e4 <pbuf_copy+0x17c>)
 8016590:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8016594:	4919      	ldr	r1, [pc, #100]	@ (80165fc <pbuf_copy+0x194>)
 8016596:	4815      	ldr	r0, [pc, #84]	@ (80165ec <pbuf_copy+0x184>)
 8016598:	f00b fe52 	bl	8022240 <iprintf>
 801659c:	f06f 0305 	mvn.w	r3, #5
 80165a0:	e01b      	b.n	80165da <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d013      	beq.n	80165d0 <pbuf_copy+0x168>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	895a      	ldrh	r2, [r3, #10]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	891b      	ldrh	r3, [r3, #8]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d10d      	bne.n	80165d0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d009      	beq.n	80165d0 <pbuf_copy+0x168>
 80165bc:	4b09      	ldr	r3, [pc, #36]	@ (80165e4 <pbuf_copy+0x17c>)
 80165be:	f240 32e2 	movw	r2, #994	@ 0x3e2
 80165c2:	490e      	ldr	r1, [pc, #56]	@ (80165fc <pbuf_copy+0x194>)
 80165c4:	4809      	ldr	r0, [pc, #36]	@ (80165ec <pbuf_copy+0x184>)
 80165c6:	f00b fe3b 	bl	8022240 <iprintf>
 80165ca:	f06f 0305 	mvn.w	r3, #5
 80165ce:	e004      	b.n	80165da <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f47f af67 	bne.w	80164a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80165d8:	2300      	movs	r3, #0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	08026100 	.word	0x08026100
 80165e8:	08026490 	.word	0x08026490
 80165ec:	0802614c 	.word	0x0802614c
 80165f0:	080264c0 	.word	0x080264c0
 80165f4:	080264d8 	.word	0x080264d8
 80165f8:	080264f4 	.word	0x080264f4
 80165fc:	08026504 	.word	0x08026504

08016600 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b088      	sub	sp, #32
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	4611      	mov	r1, r2
 801660c:	461a      	mov	r2, r3
 801660e:	460b      	mov	r3, r1
 8016610:	80fb      	strh	r3, [r7, #6]
 8016612:	4613      	mov	r3, r2
 8016614:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d108      	bne.n	8016632 <pbuf_copy_partial+0x32>
 8016620:	4b30      	ldr	r3, [pc, #192]	@ (80166e4 <pbuf_copy_partial+0xe4>)
 8016622:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8016626:	4930      	ldr	r1, [pc, #192]	@ (80166e8 <pbuf_copy_partial+0xe8>)
 8016628:	4830      	ldr	r0, [pc, #192]	@ (80166ec <pbuf_copy_partial+0xec>)
 801662a:	f00b fe09 	bl	8022240 <iprintf>
 801662e:	2300      	movs	r3, #0
 8016630:	e054      	b.n	80166dc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d108      	bne.n	801664a <pbuf_copy_partial+0x4a>
 8016638:	4b2a      	ldr	r3, [pc, #168]	@ (80166e4 <pbuf_copy_partial+0xe4>)
 801663a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801663e:	492c      	ldr	r1, [pc, #176]	@ (80166f0 <pbuf_copy_partial+0xf0>)
 8016640:	482a      	ldr	r0, [pc, #168]	@ (80166ec <pbuf_copy_partial+0xec>)
 8016642:	f00b fdfd 	bl	8022240 <iprintf>
 8016646:	2300      	movs	r3, #0
 8016648:	e048      	b.n	80166dc <pbuf_copy_partial+0xdc>

  left = 0;
 801664a:	2300      	movs	r3, #0
 801664c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d002      	beq.n	801665a <pbuf_copy_partial+0x5a>
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <pbuf_copy_partial+0x5e>
    return 0;
 801665a:	2300      	movs	r3, #0
 801665c:	e03e      	b.n	80166dc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	61fb      	str	r3, [r7, #28]
 8016662:	e034      	b.n	80166ce <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8016664:	88bb      	ldrh	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00a      	beq.n	8016680 <pbuf_copy_partial+0x80>
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	895b      	ldrh	r3, [r3, #10]
 801666e:	88ba      	ldrh	r2, [r7, #4]
 8016670:	429a      	cmp	r2, r3
 8016672:	d305      	bcc.n	8016680 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8016674:	69fb      	ldr	r3, [r7, #28]
 8016676:	895b      	ldrh	r3, [r3, #10]
 8016678:	88ba      	ldrh	r2, [r7, #4]
 801667a:	1ad3      	subs	r3, r2, r3
 801667c:	80bb      	strh	r3, [r7, #4]
 801667e:	e023      	b.n	80166c8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	895a      	ldrh	r2, [r3, #10]
 8016684:	88bb      	ldrh	r3, [r7, #4]
 8016686:	1ad3      	subs	r3, r2, r3
 8016688:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801668a:	8b3a      	ldrh	r2, [r7, #24]
 801668c:	88fb      	ldrh	r3, [r7, #6]
 801668e:	429a      	cmp	r2, r3
 8016690:	d901      	bls.n	8016696 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8016692:	88fb      	ldrh	r3, [r7, #6]
 8016694:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8016696:	8b7b      	ldrh	r3, [r7, #26]
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	18d0      	adds	r0, r2, r3
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	685a      	ldr	r2, [r3, #4]
 80166a0:	88bb      	ldrh	r3, [r7, #4]
 80166a2:	4413      	add	r3, r2
 80166a4:	8b3a      	ldrh	r2, [r7, #24]
 80166a6:	4619      	mov	r1, r3
 80166a8:	f00c f8c5 	bl	8022836 <memcpy>
      copied_total += buf_copy_len;
 80166ac:	8afa      	ldrh	r2, [r7, #22]
 80166ae:	8b3b      	ldrh	r3, [r7, #24]
 80166b0:	4413      	add	r3, r2
 80166b2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80166b4:	8b7a      	ldrh	r2, [r7, #26]
 80166b6:	8b3b      	ldrh	r3, [r7, #24]
 80166b8:	4413      	add	r3, r2
 80166ba:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80166bc:	88fa      	ldrh	r2, [r7, #6]
 80166be:	8b3b      	ldrh	r3, [r7, #24]
 80166c0:	1ad3      	subs	r3, r2, r3
 80166c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80166c4:	2300      	movs	r3, #0
 80166c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	61fb      	str	r3, [r7, #28]
 80166ce:	88fb      	ldrh	r3, [r7, #6]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d002      	beq.n	80166da <pbuf_copy_partial+0xda>
 80166d4:	69fb      	ldr	r3, [r7, #28]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d1c4      	bne.n	8016664 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80166da:	8afb      	ldrh	r3, [r7, #22]
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3720      	adds	r7, #32
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}
 80166e4:	08026100 	.word	0x08026100
 80166e8:	08026530 	.word	0x08026530
 80166ec:	0802614c 	.word	0x0802614c
 80166f0:	08026550 	.word	0x08026550

080166f4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 80166f4:	b480      	push	{r7}
 80166f6:	b087      	sub	sp, #28
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	460b      	mov	r3, r1
 80166fe:	607a      	str	r2, [r7, #4]
 8016700:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8016702:	897b      	ldrh	r3, [r7, #10]
 8016704:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801670a:	e007      	b.n	801671c <pbuf_skip_const+0x28>
    offset_left -= q->len;
 801670c:	693b      	ldr	r3, [r7, #16]
 801670e:	895b      	ldrh	r3, [r3, #10]
 8016710:	8afa      	ldrh	r2, [r7, #22]
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d004      	beq.n	801672c <pbuf_skip_const+0x38>
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	895b      	ldrh	r3, [r3, #10]
 8016726:	8afa      	ldrh	r2, [r7, #22]
 8016728:	429a      	cmp	r2, r3
 801672a:	d2ef      	bcs.n	801670c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d002      	beq.n	8016738 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	8afa      	ldrh	r2, [r7, #22]
 8016736:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8016738:	693b      	ldr	r3, [r7, #16]
}
 801673a:	4618      	mov	r0, r3
 801673c:	371c      	adds	r7, #28
 801673e:	46bd      	mov	sp, r7
 8016740:	bc80      	pop	{r7}
 8016742:	4770      	bx	lr

08016744 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b086      	sub	sp, #24
 8016748:	af00      	add	r7, sp, #0
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	460b      	mov	r3, r1
 801674e:	607a      	str	r2, [r7, #4]
 8016750:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 8016752:	897b      	ldrh	r3, [r7, #10]
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	4619      	mov	r1, r3
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f7ff ffcb 	bl	80166f4 <pbuf_skip_const>
 801675e:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8016760:	697b      	ldr	r3, [r7, #20]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
	...

0801676c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b088      	sub	sp, #32
 8016770:	af00      	add	r7, sp, #0
 8016772:	60f8      	str	r0, [r7, #12]
 8016774:	60b9      	str	r1, [r7, #8]
 8016776:	4613      	mov	r3, r2
 8016778:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 801677a:	88fb      	ldrh	r3, [r7, #6]
 801677c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 801677e:	2300      	movs	r3, #0
 8016780:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d109      	bne.n	801679c <pbuf_take+0x30>
 8016788:	4b3a      	ldr	r3, [pc, #232]	@ (8016874 <pbuf_take+0x108>)
 801678a:	f240 4284 	movw	r2, #1156	@ 0x484
 801678e:	493a      	ldr	r1, [pc, #232]	@ (8016878 <pbuf_take+0x10c>)
 8016790:	483a      	ldr	r0, [pc, #232]	@ (801687c <pbuf_take+0x110>)
 8016792:	f00b fd55 	bl	8022240 <iprintf>
 8016796:	f06f 030f 	mvn.w	r3, #15
 801679a:	e066      	b.n	801686a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d109      	bne.n	80167b6 <pbuf_take+0x4a>
 80167a2:	4b34      	ldr	r3, [pc, #208]	@ (8016874 <pbuf_take+0x108>)
 80167a4:	f240 4285 	movw	r2, #1157	@ 0x485
 80167a8:	4935      	ldr	r1, [pc, #212]	@ (8016880 <pbuf_take+0x114>)
 80167aa:	4834      	ldr	r0, [pc, #208]	@ (801687c <pbuf_take+0x110>)
 80167ac:	f00b fd48 	bl	8022240 <iprintf>
 80167b0:	f06f 030f 	mvn.w	r3, #15
 80167b4:	e059      	b.n	801686a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	891b      	ldrh	r3, [r3, #8]
 80167ba:	88fa      	ldrh	r2, [r7, #6]
 80167bc:	429a      	cmp	r2, r3
 80167be:	d909      	bls.n	80167d4 <pbuf_take+0x68>
 80167c0:	4b2c      	ldr	r3, [pc, #176]	@ (8016874 <pbuf_take+0x108>)
 80167c2:	f240 4286 	movw	r2, #1158	@ 0x486
 80167c6:	492f      	ldr	r1, [pc, #188]	@ (8016884 <pbuf_take+0x118>)
 80167c8:	482c      	ldr	r0, [pc, #176]	@ (801687c <pbuf_take+0x110>)
 80167ca:	f00b fd39 	bl	8022240 <iprintf>
 80167ce:	f04f 33ff 	mov.w	r3, #4294967295
 80167d2:	e04a      	b.n	801686a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d007      	beq.n	80167ea <pbuf_take+0x7e>
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d004      	beq.n	80167ea <pbuf_take+0x7e>
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	891b      	ldrh	r3, [r3, #8]
 80167e4:	88fa      	ldrh	r2, [r7, #6]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d902      	bls.n	80167f0 <pbuf_take+0x84>
    return ERR_ARG;
 80167ea:	f06f 030f 	mvn.w	r3, #15
 80167ee:	e03c      	b.n	801686a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	61fb      	str	r3, [r7, #28]
 80167f4:	e027      	b.n	8016846 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d106      	bne.n	801680a <pbuf_take+0x9e>
 80167fc:	4b1d      	ldr	r3, [pc, #116]	@ (8016874 <pbuf_take+0x108>)
 80167fe:	f240 428e 	movw	r2, #1166	@ 0x48e
 8016802:	4921      	ldr	r1, [pc, #132]	@ (8016888 <pbuf_take+0x11c>)
 8016804:	481d      	ldr	r0, [pc, #116]	@ (801687c <pbuf_take+0x110>)
 8016806:	f00b fd1b 	bl	8022240 <iprintf>
    buf_copy_len = total_copy_len;
 801680a:	8b3b      	ldrh	r3, [r7, #24]
 801680c:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	895b      	ldrh	r3, [r3, #10]
 8016812:	8b7a      	ldrh	r2, [r7, #26]
 8016814:	429a      	cmp	r2, r3
 8016816:	d902      	bls.n	801681e <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	895b      	ldrh	r3, [r3, #10]
 801681c:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	6858      	ldr	r0, [r3, #4]
 8016822:	8afb      	ldrh	r3, [r7, #22]
 8016824:	68ba      	ldr	r2, [r7, #8]
 8016826:	4413      	add	r3, r2
 8016828:	8b7a      	ldrh	r2, [r7, #26]
 801682a:	4619      	mov	r1, r3
 801682c:	f00c f803 	bl	8022836 <memcpy>
    total_copy_len -= buf_copy_len;
 8016830:	8b3a      	ldrh	r2, [r7, #24]
 8016832:	8b7b      	ldrh	r3, [r7, #26]
 8016834:	1ad3      	subs	r3, r2, r3
 8016836:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8016838:	8afa      	ldrh	r2, [r7, #22]
 801683a:	8b7b      	ldrh	r3, [r7, #26]
 801683c:	4413      	add	r3, r2
 801683e:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	61fb      	str	r3, [r7, #28]
 8016846:	8b3b      	ldrh	r3, [r7, #24]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d1d4      	bne.n	80167f6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801684c:	8b3b      	ldrh	r3, [r7, #24]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d103      	bne.n	801685a <pbuf_take+0xee>
 8016852:	8afa      	ldrh	r2, [r7, #22]
 8016854:	88fb      	ldrh	r3, [r7, #6]
 8016856:	429a      	cmp	r2, r3
 8016858:	d006      	beq.n	8016868 <pbuf_take+0xfc>
 801685a:	4b06      	ldr	r3, [pc, #24]	@ (8016874 <pbuf_take+0x108>)
 801685c:	f240 4299 	movw	r2, #1177	@ 0x499
 8016860:	490a      	ldr	r1, [pc, #40]	@ (801688c <pbuf_take+0x120>)
 8016862:	4806      	ldr	r0, [pc, #24]	@ (801687c <pbuf_take+0x110>)
 8016864:	f00b fcec 	bl	8022240 <iprintf>
  return ERR_OK;
 8016868:	2300      	movs	r3, #0
}
 801686a:	4618      	mov	r0, r3
 801686c:	3720      	adds	r7, #32
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	08026100 	.word	0x08026100
 8016878:	08026574 	.word	0x08026574
 801687c:	0802614c 	.word	0x0802614c
 8016880:	0802658c 	.word	0x0802658c
 8016884:	080265a8 	.word	0x080265a8
 8016888:	080265c8 	.word	0x080265c8
 801688c:	080265e0 	.word	0x080265e0

08016890 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b088      	sub	sp, #32
 8016894:	af00      	add	r7, sp, #0
 8016896:	60f8      	str	r0, [r7, #12]
 8016898:	60b9      	str	r1, [r7, #8]
 801689a:	4611      	mov	r1, r2
 801689c:	461a      	mov	r2, r3
 801689e:	460b      	mov	r3, r1
 80168a0:	80fb      	strh	r3, [r7, #6]
 80168a2:	4613      	mov	r3, r2
 80168a4:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 80168a6:	f107 0210 	add.w	r2, r7, #16
 80168aa:	88bb      	ldrh	r3, [r7, #4]
 80168ac:	4619      	mov	r1, r3
 80168ae:	68f8      	ldr	r0, [r7, #12]
 80168b0:	f7ff ff48 	bl	8016744 <pbuf_skip>
 80168b4:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d035      	beq.n	8016928 <pbuf_take_at+0x98>
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	891b      	ldrh	r3, [r3, #8]
 80168c0:	461a      	mov	r2, r3
 80168c2:	8a3b      	ldrh	r3, [r7, #16]
 80168c4:	4619      	mov	r1, r3
 80168c6:	88fb      	ldrh	r3, [r7, #6]
 80168c8:	440b      	add	r3, r1
 80168ca:	429a      	cmp	r2, r3
 80168cc:	db2c      	blt.n	8016928 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 80168ce:	88fb      	ldrh	r3, [r7, #6]
 80168d0:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 80168d6:	88fa      	ldrh	r2, [r7, #6]
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	895b      	ldrh	r3, [r3, #10]
 80168dc:	4619      	mov	r1, r3
 80168de:	8a3b      	ldrh	r3, [r7, #16]
 80168e0:	1acb      	subs	r3, r1, r3
 80168e2:	4293      	cmp	r3, r2
 80168e4:	bfa8      	it	ge
 80168e6:	4613      	movge	r3, r2
 80168e8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	8a3a      	ldrh	r2, [r7, #16]
 80168f0:	4413      	add	r3, r2
 80168f2:	8a7a      	ldrh	r2, [r7, #18]
 80168f4:	68b9      	ldr	r1, [r7, #8]
 80168f6:	4618      	mov	r0, r3
 80168f8:	f00b ff9d 	bl	8022836 <memcpy>
    remaining_len -= first_copy_len;
 80168fc:	8b7a      	ldrh	r2, [r7, #26]
 80168fe:	8a7b      	ldrh	r3, [r7, #18]
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8016904:	8a7b      	ldrh	r3, [r7, #18]
 8016906:	697a      	ldr	r2, [r7, #20]
 8016908:	4413      	add	r3, r2
 801690a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801690c:	8b7b      	ldrh	r3, [r7, #26]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d008      	beq.n	8016924 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016912:	69fb      	ldr	r3, [r7, #28]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	8b7a      	ldrh	r2, [r7, #26]
 8016918:	6979      	ldr	r1, [r7, #20]
 801691a:	4618      	mov	r0, r3
 801691c:	f7ff ff26 	bl	801676c <pbuf_take>
 8016920:	4603      	mov	r3, r0
 8016922:	e003      	b.n	801692c <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 8016924:	2300      	movs	r3, #0
 8016926:	e001      	b.n	801692c <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 8016928:	f04f 33ff 	mov.w	r3, #4294967295
}
 801692c:	4618      	mov	r0, r3
 801692e:	3720      	adds	r7, #32
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}

08016934 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8016934:	b480      	push	{r7}
 8016936:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8016938:	bf00      	nop
 801693a:	46bd      	mov	sp, r7
 801693c:	bc80      	pop	{r7}
 801693e:	4770      	bx	lr

08016940 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016940:	b480      	push	{r7}
 8016942:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016944:	bf00      	nop
 8016946:	46bd      	mov	sp, r7
 8016948:	bc80      	pop	{r7}
 801694a:	4770      	bx	lr

0801694c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016950:	f000 ffaa 	bl	80178a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016954:	4b07      	ldr	r3, [pc, #28]	@ (8016974 <tcp_tmr+0x28>)
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	3301      	adds	r3, #1
 801695a:	b2da      	uxtb	r2, r3
 801695c:	4b05      	ldr	r3, [pc, #20]	@ (8016974 <tcp_tmr+0x28>)
 801695e:	701a      	strb	r2, [r3, #0]
 8016960:	4b04      	ldr	r3, [pc, #16]	@ (8016974 <tcp_tmr+0x28>)
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	f003 0301 	and.w	r3, r3, #1
 8016968:	2b00      	cmp	r3, #0
 801696a:	d001      	beq.n	8016970 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801696c:	f000 fcd8 	bl	8017320 <tcp_slowtmr>
  }
}
 8016970:	bf00      	nop
 8016972:	bd80      	pop	{r7, pc}
 8016974:	2000bd91 	.word	0x2000bd91

08016978 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016978:	b480      	push	{r7}
 801697a:	b085      	sub	sp, #20
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	60fb      	str	r3, [r7, #12]
 8016986:	e00a      	b.n	801699e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801698c:	683a      	ldr	r2, [r7, #0]
 801698e:	429a      	cmp	r2, r3
 8016990:	d102      	bne.n	8016998 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2200      	movs	r2, #0
 8016996:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	60fb      	str	r3, [r7, #12]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d1f1      	bne.n	8016988 <tcp_remove_listener+0x10>
      }
   }
}
 80169a4:	bf00      	nop
 80169a6:	bf00      	nop
 80169a8:	3714      	adds	r7, #20
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bc80      	pop	{r7}
 80169ae:	4770      	bx	lr

080169b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d105      	bne.n	80169ca <tcp_listen_closed+0x1a>
 80169be:	4b13      	ldr	r3, [pc, #76]	@ (8016a0c <tcp_listen_closed+0x5c>)
 80169c0:	22c0      	movs	r2, #192	@ 0xc0
 80169c2:	4913      	ldr	r1, [pc, #76]	@ (8016a10 <tcp_listen_closed+0x60>)
 80169c4:	4813      	ldr	r0, [pc, #76]	@ (8016a14 <tcp_listen_closed+0x64>)
 80169c6:	f00b fc3b 	bl	8022240 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	7d1b      	ldrb	r3, [r3, #20]
 80169ce:	2b01      	cmp	r3, #1
 80169d0:	d005      	beq.n	80169de <tcp_listen_closed+0x2e>
 80169d2:	4b0e      	ldr	r3, [pc, #56]	@ (8016a0c <tcp_listen_closed+0x5c>)
 80169d4:	22c1      	movs	r2, #193	@ 0xc1
 80169d6:	4910      	ldr	r1, [pc, #64]	@ (8016a18 <tcp_listen_closed+0x68>)
 80169d8:	480e      	ldr	r0, [pc, #56]	@ (8016a14 <tcp_listen_closed+0x64>)
 80169da:	f00b fc31 	bl	8022240 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80169de:	2301      	movs	r3, #1
 80169e0:	60fb      	str	r3, [r7, #12]
 80169e2:	e00b      	b.n	80169fc <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80169e4:	4a0d      	ldr	r2, [pc, #52]	@ (8016a1c <tcp_listen_closed+0x6c>)
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	6879      	ldr	r1, [r7, #4]
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7ff ffc1 	bl	8016978 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	3301      	adds	r3, #1
 80169fa:	60fb      	str	r3, [r7, #12]
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	2b03      	cmp	r3, #3
 8016a00:	d9f0      	bls.n	80169e4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016a02:	bf00      	nop
 8016a04:	bf00      	nop
 8016a06:	3710      	adds	r7, #16
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	08026684 	.word	0x08026684
 8016a10:	080266b4 	.word	0x080266b4
 8016a14:	080266c0 	.word	0x080266c0
 8016a18:	080266e8 	.word	0x080266e8
 8016a1c:	08031624 	.word	0x08031624

08016a20 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016a20:	b5b0      	push	{r4, r5, r7, lr}
 8016a22:	b086      	sub	sp, #24
 8016a24:	af02      	add	r7, sp, #8
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	460b      	mov	r3, r1
 8016a2a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016a2c:	78fb      	ldrb	r3, [r7, #3]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d075      	beq.n	8016b1e <tcp_close_shutdown+0xfe>
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	7d1b      	ldrb	r3, [r3, #20]
 8016a36:	2b04      	cmp	r3, #4
 8016a38:	d003      	beq.n	8016a42 <tcp_close_shutdown+0x22>
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	7d1b      	ldrb	r3, [r3, #20]
 8016a3e:	2b07      	cmp	r3, #7
 8016a40:	d16d      	bne.n	8016b1e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d104      	bne.n	8016a54 <tcp_close_shutdown+0x34>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016a52:	d064      	beq.n	8016b1e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	7e9b      	ldrb	r3, [r3, #26]
 8016a58:	f003 0310 	and.w	r3, r3, #16
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d106      	bne.n	8016a6e <tcp_close_shutdown+0x4e>
 8016a60:	4b5e      	ldr	r3, [pc, #376]	@ (8016bdc <tcp_close_shutdown+0x1bc>)
 8016a62:	f240 120f 	movw	r2, #271	@ 0x10f
 8016a66:	495e      	ldr	r1, [pc, #376]	@ (8016be0 <tcp_close_shutdown+0x1c0>)
 8016a68:	485e      	ldr	r0, [pc, #376]	@ (8016be4 <tcp_close_shutdown+0x1c4>)
 8016a6a:	f00b fbe9 	bl	8022240 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016a76:	687c      	ldr	r4, [r7, #4]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	1d1d      	adds	r5, r3, #4
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	8adb      	ldrh	r3, [r3, #22]
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	8b12      	ldrh	r2, [r2, #24]
 8016a84:	9201      	str	r2, [sp, #4]
 8016a86:	9300      	str	r3, [sp, #0]
 8016a88:	462b      	mov	r3, r5
 8016a8a:	4622      	mov	r2, r4
 8016a8c:	f004 fffc 	bl	801ba88 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f001 fa73 	bl	8017f7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016a96:	4b54      	ldr	r3, [pc, #336]	@ (8016be8 <tcp_close_shutdown+0x1c8>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	d105      	bne.n	8016aac <tcp_close_shutdown+0x8c>
 8016aa0:	4b51      	ldr	r3, [pc, #324]	@ (8016be8 <tcp_close_shutdown+0x1c8>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	4a50      	ldr	r2, [pc, #320]	@ (8016be8 <tcp_close_shutdown+0x1c8>)
 8016aa8:	6013      	str	r3, [r2, #0]
 8016aaa:	e013      	b.n	8016ad4 <tcp_close_shutdown+0xb4>
 8016aac:	4b4e      	ldr	r3, [pc, #312]	@ (8016be8 <tcp_close_shutdown+0x1c8>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	60fb      	str	r3, [r7, #12]
 8016ab2:	e00c      	b.n	8016ace <tcp_close_shutdown+0xae>
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d104      	bne.n	8016ac8 <tcp_close_shutdown+0xa8>
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	68da      	ldr	r2, [r3, #12]
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	60da      	str	r2, [r3, #12]
 8016ac6:	e005      	b.n	8016ad4 <tcp_close_shutdown+0xb4>
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	60fb      	str	r3, [r7, #12]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1ef      	bne.n	8016ab4 <tcp_close_shutdown+0x94>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	60da      	str	r2, [r3, #12]
 8016ada:	4b44      	ldr	r3, [pc, #272]	@ (8016bec <tcp_close_shutdown+0x1cc>)
 8016adc:	2201      	movs	r2, #1
 8016ade:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	7d1b      	ldrb	r3, [r3, #20]
 8016ae4:	2b04      	cmp	r3, #4
 8016ae6:	d10c      	bne.n	8016b02 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	220a      	movs	r2, #10
 8016aec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016aee:	4b40      	ldr	r3, [pc, #256]	@ (8016bf0 <tcp_close_shutdown+0x1d0>)
 8016af0:	681a      	ldr	r2, [r3, #0]
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	60da      	str	r2, [r3, #12]
 8016af6:	4a3e      	ldr	r2, [pc, #248]	@ (8016bf0 <tcp_close_shutdown+0x1d0>)
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6013      	str	r3, [r2, #0]
 8016afc:	f005 fa3c 	bl	801bf78 <tcp_timer_needed>
 8016b00:	e00b      	b.n	8016b1a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8016b02:	4b3c      	ldr	r3, [pc, #240]	@ (8016bf4 <tcp_close_shutdown+0x1d4>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d102      	bne.n	8016b12 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8016b0c:	f003 fe12 	bl	801a734 <tcp_trigger_input_pcb_close>
 8016b10:	e003      	b.n	8016b1a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8016b12:	6879      	ldr	r1, [r7, #4]
 8016b14:	2001      	movs	r0, #1
 8016b16:	f7fe fdcb 	bl	80156b0 <memp_free>
        }
      }
      return ERR_OK;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	e05a      	b.n	8016bd4 <tcp_close_shutdown+0x1b4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	7d1b      	ldrb	r3, [r3, #20]
 8016b22:	2b02      	cmp	r3, #2
 8016b24:	d03d      	beq.n	8016ba2 <tcp_close_shutdown+0x182>
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	dc4e      	bgt.n	8016bc8 <tcp_close_shutdown+0x1a8>
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d002      	beq.n	8016b34 <tcp_close_shutdown+0x114>
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d02b      	beq.n	8016b8a <tcp_close_shutdown+0x16a>
 8016b32:	e049      	b.n	8016bc8 <tcp_close_shutdown+0x1a8>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	8adb      	ldrh	r3, [r3, #22]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d021      	beq.n	8016b80 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8016bf8 <tcp_close_shutdown+0x1d8>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d105      	bne.n	8016b52 <tcp_close_shutdown+0x132>
 8016b46:	4b2c      	ldr	r3, [pc, #176]	@ (8016bf8 <tcp_close_shutdown+0x1d8>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	68db      	ldr	r3, [r3, #12]
 8016b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8016bf8 <tcp_close_shutdown+0x1d8>)
 8016b4e:	6013      	str	r3, [r2, #0]
 8016b50:	e013      	b.n	8016b7a <tcp_close_shutdown+0x15a>
 8016b52:	4b29      	ldr	r3, [pc, #164]	@ (8016bf8 <tcp_close_shutdown+0x1d8>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	60bb      	str	r3, [r7, #8]
 8016b58:	e00c      	b.n	8016b74 <tcp_close_shutdown+0x154>
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d104      	bne.n	8016b6e <tcp_close_shutdown+0x14e>
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	68da      	ldr	r2, [r3, #12]
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	60da      	str	r2, [r3, #12]
 8016b6c:	e005      	b.n	8016b7a <tcp_close_shutdown+0x15a>
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	68db      	ldr	r3, [r3, #12]
 8016b72:	60bb      	str	r3, [r7, #8]
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d1ef      	bne.n	8016b5a <tcp_close_shutdown+0x13a>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8016b80:	6879      	ldr	r1, [r7, #4]
 8016b82:	2001      	movs	r0, #1
 8016b84:	f7fe fd94 	bl	80156b0 <memp_free>
    break;
 8016b88:	e023      	b.n	8016bd2 <tcp_close_shutdown+0x1b2>
  case LISTEN:
    tcp_listen_closed(pcb);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f7ff ff10 	bl	80169b0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016b90:	6879      	ldr	r1, [r7, #4]
 8016b92:	481a      	ldr	r0, [pc, #104]	@ (8016bfc <tcp_close_shutdown+0x1dc>)
 8016b94:	f001 fa34 	bl	8018000 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016b98:	6879      	ldr	r1, [r7, #4]
 8016b9a:	2002      	movs	r0, #2
 8016b9c:	f7fe fd88 	bl	80156b0 <memp_free>
    break;
 8016ba0:	e017      	b.n	8016bd2 <tcp_close_shutdown+0x1b2>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8016ba2:	6879      	ldr	r1, [r7, #4]
 8016ba4:	4810      	ldr	r0, [pc, #64]	@ (8016be8 <tcp_close_shutdown+0x1c8>)
 8016ba6:	f001 fa2b 	bl	8018000 <tcp_pcb_remove>
 8016baa:	4b10      	ldr	r3, [pc, #64]	@ (8016bec <tcp_close_shutdown+0x1cc>)
 8016bac:	2201      	movs	r2, #1
 8016bae:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8016bb0:	6879      	ldr	r1, [r7, #4]
 8016bb2:	2001      	movs	r0, #1
 8016bb4:	f7fe fd7c 	bl	80156b0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
 8016bb8:	4b11      	ldr	r3, [pc, #68]	@ (8016c00 <tcp_close_shutdown+0x1e0>)
 8016bba:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8016c00 <tcp_close_shutdown+0x1e0>)
 8016bc2:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
    break;
 8016bc6:	e004      	b.n	8016bd2 <tcp_close_shutdown+0x1b2>
  default:
    return tcp_close_shutdown_fin(pcb);
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f000 f81b 	bl	8016c04 <tcp_close_shutdown_fin>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	e000      	b.n	8016bd4 <tcp_close_shutdown+0x1b4>
  }
  return ERR_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3710      	adds	r7, #16
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bdb0      	pop	{r4, r5, r7, pc}
 8016bdc:	08026684 	.word	0x08026684
 8016be0:	08026700 	.word	0x08026700
 8016be4:	080266c0 	.word	0x080266c0
 8016be8:	2000bd88 	.word	0x2000bd88
 8016bec:	2000bd90 	.word	0x2000bd90
 8016bf0:	2000bd8c 	.word	0x2000bd8c
 8016bf4:	2000bdc8 	.word	0x2000bdc8
 8016bf8:	2000bd80 	.word	0x2000bd80
 8016bfc:	2000bd84 	.word	0x2000bd84
 8016c00:	2000bbe4 	.word	0x2000bbe4

08016c04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b084      	sub	sp, #16
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d106      	bne.n	8016c20 <tcp_close_shutdown_fin+0x1c>
 8016c12:	4b38      	ldr	r3, [pc, #224]	@ (8016cf4 <tcp_close_shutdown_fin+0xf0>)
 8016c14:	f240 124d 	movw	r2, #333	@ 0x14d
 8016c18:	4937      	ldr	r1, [pc, #220]	@ (8016cf8 <tcp_close_shutdown_fin+0xf4>)
 8016c1a:	4838      	ldr	r0, [pc, #224]	@ (8016cfc <tcp_close_shutdown_fin+0xf8>)
 8016c1c:	f00b fb10 	bl	8022240 <iprintf>

  switch (pcb->state) {
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7d1b      	ldrb	r3, [r3, #20]
 8016c24:	2b07      	cmp	r3, #7
 8016c26:	d02e      	beq.n	8016c86 <tcp_close_shutdown_fin+0x82>
 8016c28:	2b07      	cmp	r3, #7
 8016c2a:	dc40      	bgt.n	8016cae <tcp_close_shutdown_fin+0xaa>
 8016c2c:	2b03      	cmp	r3, #3
 8016c2e:	d002      	beq.n	8016c36 <tcp_close_shutdown_fin+0x32>
 8016c30:	2b04      	cmp	r3, #4
 8016c32:	d014      	beq.n	8016c5e <tcp_close_shutdown_fin+0x5a>
 8016c34:	e03b      	b.n	8016cae <tcp_close_shutdown_fin+0xaa>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f003 fe06 	bl	801a848 <tcp_send_fin>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d134      	bne.n	8016cb2 <tcp_close_shutdown_fin+0xae>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
 8016c48:	4b2d      	ldr	r3, [pc, #180]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016c4a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016c4e:	3301      	adds	r3, #1
 8016c50:	4a2b      	ldr	r2, [pc, #172]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016c52:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
      pcb->state = FIN_WAIT_1;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2205      	movs	r2, #5
 8016c5a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016c5c:	e029      	b.n	8016cb2 <tcp_close_shutdown_fin+0xae>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f003 fdf2 	bl	801a848 <tcp_send_fin>
 8016c64:	4603      	mov	r3, r0
 8016c66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d122      	bne.n	8016cb6 <tcp_close_shutdown_fin+0xb2>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016c70:	4b23      	ldr	r3, [pc, #140]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016c72:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016c76:	3301      	adds	r3, #1
 8016c78:	4a21      	ldr	r2, [pc, #132]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016c7a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = FIN_WAIT_1;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2205      	movs	r2, #5
 8016c82:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016c84:	e017      	b.n	8016cb6 <tcp_close_shutdown_fin+0xb2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f003 fdde 	bl	801a848 <tcp_send_fin>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d110      	bne.n	8016cba <tcp_close_shutdown_fin+0xb6>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016c98:	4b19      	ldr	r3, [pc, #100]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016c9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	4a17      	ldr	r2, [pc, #92]	@ (8016d00 <tcp_close_shutdown_fin+0xfc>)
 8016ca2:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = LAST_ACK;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2209      	movs	r2, #9
 8016caa:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016cac:	e005      	b.n	8016cba <tcp_close_shutdown_fin+0xb6>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	e01c      	b.n	8016cec <tcp_close_shutdown_fin+0xe8>
    break;
 8016cb2:	bf00      	nop
 8016cb4:	e002      	b.n	8016cbc <tcp_close_shutdown_fin+0xb8>
    break;
 8016cb6:	bf00      	nop
 8016cb8:	e000      	b.n	8016cbc <tcp_close_shutdown_fin+0xb8>
    break;
 8016cba:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d103      	bne.n	8016ccc <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f004 fc47 	bl	801b558 <tcp_output>
 8016cca:	e00d      	b.n	8016ce8 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 8016ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cd4:	d108      	bne.n	8016ce8 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	7e9b      	ldrb	r3, [r3, #26]
 8016cda:	f043 0308 	orr.w	r3, r3, #8
 8016cde:	b2da      	uxtb	r2, r3
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	e001      	b.n	8016cec <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8016ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	08026684 	.word	0x08026684
 8016cf8:	080266b4 	.word	0x080266b4
 8016cfc:	080266c0 	.word	0x080266c0
 8016d00:	2000bbe4 	.word	0x2000bbe4

08016d04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	7d1b      	ldrb	r3, [r3, #20]
 8016d10:	2b01      	cmp	r3, #1
 8016d12:	d006      	beq.n	8016d22 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	7e9b      	ldrb	r3, [r3, #26]
 8016d18:	f043 0310 	orr.w	r3, r3, #16
 8016d1c:	b2da      	uxtb	r2, r3
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016d22:	2101      	movs	r1, #1
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7ff fe7b 	bl	8016a20 <tcp_close_shutdown>
 8016d2a:	4603      	mov	r3, r0
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3708      	adds	r7, #8
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08c      	sub	sp, #48	@ 0x30
 8016d38:	af02      	add	r7, sp, #8
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	7d1b      	ldrb	r3, [r3, #20]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d106      	bne.n	8016d54 <tcp_abandon+0x20>
 8016d46:	4b4d      	ldr	r3, [pc, #308]	@ (8016e7c <tcp_abandon+0x148>)
 8016d48:	f240 12df 	movw	r2, #479	@ 0x1df
 8016d4c:	494c      	ldr	r1, [pc, #304]	@ (8016e80 <tcp_abandon+0x14c>)
 8016d4e:	484d      	ldr	r0, [pc, #308]	@ (8016e84 <tcp_abandon+0x150>)
 8016d50:	f00b fa76 	bl	8022240 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	7d1b      	ldrb	r3, [r3, #20]
 8016d58:	2b0a      	cmp	r3, #10
 8016d5a:	d108      	bne.n	8016d6e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016d5c:	6879      	ldr	r1, [r7, #4]
 8016d5e:	484a      	ldr	r0, [pc, #296]	@ (8016e88 <tcp_abandon+0x154>)
 8016d60:	f001 f94e 	bl	8018000 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8016d64:	6879      	ldr	r1, [r7, #4]
 8016d66:	2001      	movs	r0, #1
 8016d68:	f7fe fca2 	bl	80156b0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8016d6c:	e081      	b.n	8016e72 <tcp_abandon+0x13e>
    int send_rst = 0;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d80:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016d88:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	691b      	ldr	r3, [r3, #16]
 8016d8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	7d1b      	ldrb	r3, [r3, #20]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d126      	bne.n	8016de6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	8adb      	ldrh	r3, [r3, #22]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d02e      	beq.n	8016dfe <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016da0:	4b3a      	ldr	r3, [pc, #232]	@ (8016e8c <tcp_abandon+0x158>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d105      	bne.n	8016db6 <tcp_abandon+0x82>
 8016daa:	4b38      	ldr	r3, [pc, #224]	@ (8016e8c <tcp_abandon+0x158>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	4a36      	ldr	r2, [pc, #216]	@ (8016e8c <tcp_abandon+0x158>)
 8016db2:	6013      	str	r3, [r2, #0]
 8016db4:	e013      	b.n	8016dde <tcp_abandon+0xaa>
 8016db6:	4b35      	ldr	r3, [pc, #212]	@ (8016e8c <tcp_abandon+0x158>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	61fb      	str	r3, [r7, #28]
 8016dbc:	e00c      	b.n	8016dd8 <tcp_abandon+0xa4>
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d104      	bne.n	8016dd2 <tcp_abandon+0x9e>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	68da      	ldr	r2, [r3, #12]
 8016dcc:	69fb      	ldr	r3, [r7, #28]
 8016dce:	60da      	str	r2, [r3, #12]
 8016dd0:	e005      	b.n	8016dde <tcp_abandon+0xaa>
 8016dd2:	69fb      	ldr	r3, [r7, #28]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	61fb      	str	r3, [r7, #28]
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d1ef      	bne.n	8016dbe <tcp_abandon+0x8a>
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2200      	movs	r2, #0
 8016de2:	60da      	str	r2, [r3, #12]
 8016de4:	e00b      	b.n	8016dfe <tcp_abandon+0xca>
      send_rst = reset;
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	8adb      	ldrh	r3, [r3, #22]
 8016dee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016df0:	6879      	ldr	r1, [r7, #4]
 8016df2:	4827      	ldr	r0, [pc, #156]	@ (8016e90 <tcp_abandon+0x15c>)
 8016df4:	f001 f904 	bl	8018000 <tcp_pcb_remove>
 8016df8:	4b26      	ldr	r3, [pc, #152]	@ (8016e94 <tcp_abandon+0x160>)
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d004      	beq.n	8016e10 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f000 fe19 	bl	8017a42 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d004      	beq.n	8016e22 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f000 fe10 	bl	8017a42 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d004      	beq.n	8016e34 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f000 fe07 	bl	8017a42 <tcp_segs_free>
    if (send_rst) {
 8016e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00c      	beq.n	8016e54 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	1d19      	adds	r1, r3, #4
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	8b1b      	ldrh	r3, [r3, #24]
 8016e44:	9301      	str	r3, [sp, #4]
 8016e46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	6979      	ldr	r1, [r7, #20]
 8016e4e:	69b8      	ldr	r0, [r7, #24]
 8016e50:	f004 fe1a 	bl	801ba88 <tcp_rst>
    last_state = pcb->state;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	7d1b      	ldrb	r3, [r3, #20]
 8016e58:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8016e5a:	6879      	ldr	r1, [r7, #4]
 8016e5c:	2001      	movs	r0, #1
 8016e5e:	f7fe fc27 	bl	80156b0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d004      	beq.n	8016e72 <tcp_abandon+0x13e>
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	f06f 010c 	mvn.w	r1, #12
 8016e6e:	68f8      	ldr	r0, [r7, #12]
 8016e70:	4798      	blx	r3
}
 8016e72:	bf00      	nop
 8016e74:	3728      	adds	r7, #40	@ 0x28
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	08026684 	.word	0x08026684
 8016e80:	0802671c 	.word	0x0802671c
 8016e84:	080266c0 	.word	0x080266c0
 8016e88:	2000bd8c 	.word	0x2000bd8c
 8016e8c:	2000bd80 	.word	0x2000bd80
 8016e90:	2000bd88 	.word	0x2000bd88
 8016e94:	2000bd90 	.word	0x2000bd90

08016e98 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016ea0:	2101      	movs	r1, #1
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f7ff ff46 	bl	8016d34 <tcp_abandon>
}
 8016ea8:	bf00      	nop
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b088      	sub	sp, #32
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	4613      	mov	r3, r2
 8016ebc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016ebe:	2304      	movs	r3, #4
 8016ec0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d101      	bne.n	8016ecc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8016fbc <tcp_bind+0x10c>)
 8016eca:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d002      	beq.n	8016ed8 <tcp_bind+0x28>
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d102      	bne.n	8016ede <tcp_bind+0x2e>
    return ERR_VAL;
 8016ed8:	f06f 0305 	mvn.w	r3, #5
 8016edc:	e06a      	b.n	8016fb4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	7d1b      	ldrb	r3, [r3, #20]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d009      	beq.n	8016efa <tcp_bind+0x4a>
 8016ee6:	4b36      	ldr	r3, [pc, #216]	@ (8016fc0 <tcp_bind+0x110>)
 8016ee8:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8016eec:	4935      	ldr	r1, [pc, #212]	@ (8016fc4 <tcp_bind+0x114>)
 8016eee:	4836      	ldr	r0, [pc, #216]	@ (8016fc8 <tcp_bind+0x118>)
 8016ef0:	f00b f9a6 	bl	8022240 <iprintf>
 8016ef4:	f06f 0305 	mvn.w	r3, #5
 8016ef8:	e05c      	b.n	8016fb4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8016efa:	88fb      	ldrh	r3, [r7, #6]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d109      	bne.n	8016f14 <tcp_bind+0x64>
    port = tcp_new_port();
 8016f00:	f000 f9ca 	bl	8017298 <tcp_new_port>
 8016f04:	4603      	mov	r3, r0
 8016f06:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016f08:	88fb      	ldrh	r3, [r7, #6]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d135      	bne.n	8016f7a <tcp_bind+0xca>
      return ERR_BUF;
 8016f0e:	f06f 0301 	mvn.w	r3, #1
 8016f12:	e04f      	b.n	8016fb4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016f14:	2300      	movs	r3, #0
 8016f16:	61fb      	str	r3, [r7, #28]
 8016f18:	e02b      	b.n	8016f72 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8016fcc <tcp_bind+0x11c>)
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	61bb      	str	r3, [r7, #24]
 8016f26:	e01e      	b.n	8016f66 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	8adb      	ldrh	r3, [r3, #22]
 8016f2c:	88fa      	ldrh	r2, [r7, #6]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d116      	bne.n	8016f60 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016f32:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d010      	beq.n	8016f5a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016f38:	69bb      	ldr	r3, [r7, #24]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00c      	beq.n	8016f5a <tcp_bind+0xaa>
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d009      	beq.n	8016f5a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d005      	beq.n	8016f5a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d102      	bne.n	8016f60 <tcp_bind+0xb0>
              return ERR_USE;
 8016f5a:	f06f 0307 	mvn.w	r3, #7
 8016f5e:	e029      	b.n	8016fb4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016f60:	69bb      	ldr	r3, [r7, #24]
 8016f62:	68db      	ldr	r3, [r3, #12]
 8016f64:	61bb      	str	r3, [r7, #24]
 8016f66:	69bb      	ldr	r3, [r7, #24]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d1dd      	bne.n	8016f28 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	3301      	adds	r3, #1
 8016f70:	61fb      	str	r3, [r7, #28]
 8016f72:	69fa      	ldr	r2, [r7, #28]
 8016f74:	697b      	ldr	r3, [r7, #20]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	dbcf      	blt.n	8016f1a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00c      	beq.n	8016f9a <tcp_bind+0xea>
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d008      	beq.n	8016f9a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d002      	beq.n	8016f94 <tcp_bind+0xe4>
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	e000      	b.n	8016f96 <tcp_bind+0xe6>
 8016f94:	2300      	movs	r3, #0
 8016f96:	68fa      	ldr	r2, [r7, #12]
 8016f98:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	88fa      	ldrh	r2, [r7, #6]
 8016f9e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8016fd0 <tcp_bind+0x120>)
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	60da      	str	r2, [r3, #12]
 8016fa8:	4a09      	ldr	r2, [pc, #36]	@ (8016fd0 <tcp_bind+0x120>)
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	6013      	str	r3, [r2, #0]
 8016fae:	f004 ffe3 	bl	801bf78 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016fb2:	2300      	movs	r3, #0
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3720      	adds	r7, #32
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}
 8016fbc:	0803165c 	.word	0x0803165c
 8016fc0:	08026684 	.word	0x08026684
 8016fc4:	08026750 	.word	0x08026750
 8016fc8:	080266c0 	.word	0x080266c0
 8016fcc:	08031624 	.word	0x08031624
 8016fd0:	2000bd80 	.word	0x2000bd80

08016fd4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b084      	sub	sp, #16
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	4613      	mov	r3, r2
 8016fe0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8016fe2:	68b8      	ldr	r0, [r7, #8]
 8016fe4:	f7ff ff58 	bl	8016e98 <tcp_abort>

  return ERR_ABRT;
 8016fe8:	f06f 030c 	mvn.w	r3, #12
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3710      	adds	r7, #16
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017000:	78fb      	ldrb	r3, [r7, #3]
 8017002:	2200      	movs	r2, #0
 8017004:	4619      	mov	r1, r3
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f806 	bl	8017018 <tcp_listen_with_backlog_and_err>
 801700c:	4603      	mov	r3, r0
}
 801700e:	4618      	mov	r0, r3
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
	...

08017018 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b088      	sub	sp, #32
 801701c:	af00      	add	r7, sp, #0
 801701e:	60f8      	str	r0, [r7, #12]
 8017020:	460b      	mov	r3, r1
 8017022:	607a      	str	r2, [r7, #4]
 8017024:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017026:	2300      	movs	r3, #0
 8017028:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	7d1b      	ldrb	r3, [r3, #20]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d009      	beq.n	8017046 <tcp_listen_with_backlog_and_err+0x2e>
 8017032:	4b3f      	ldr	r3, [pc, #252]	@ (8017130 <tcp_listen_with_backlog_and_err+0x118>)
 8017034:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8017038:	493e      	ldr	r1, [pc, #248]	@ (8017134 <tcp_listen_with_backlog_and_err+0x11c>)
 801703a:	483f      	ldr	r0, [pc, #252]	@ (8017138 <tcp_listen_with_backlog_and_err+0x120>)
 801703c:	f00b f900 	bl	8022240 <iprintf>
 8017040:	23f1      	movs	r3, #241	@ 0xf1
 8017042:	76fb      	strb	r3, [r7, #27]
 8017044:	e069      	b.n	801711a <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	7d1b      	ldrb	r3, [r3, #20]
 801704a:	2b01      	cmp	r3, #1
 801704c:	d104      	bne.n	8017058 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8017052:	23f7      	movs	r3, #247	@ 0xf7
 8017054:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017056:	e060      	b.n	801711a <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8017058:	2002      	movs	r0, #2
 801705a:	f7fe fad7 	bl	801560c <memp_malloc>
 801705e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d102      	bne.n	801706c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8017066:	23ff      	movs	r3, #255	@ 0xff
 8017068:	76fb      	strb	r3, [r7, #27]
    goto done;
 801706a:	e056      	b.n	801711a <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	691a      	ldr	r2, [r3, #16]
 8017070:	69fb      	ldr	r3, [r7, #28]
 8017072:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	8ada      	ldrh	r2, [r3, #22]
 8017078:	69fb      	ldr	r3, [r7, #28]
 801707a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	2201      	movs	r2, #1
 8017080:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	7d5a      	ldrb	r2, [r3, #21]
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	7a1a      	ldrb	r2, [r3, #8]
 801708e:	69fb      	ldr	r3, [r7, #28]
 8017090:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	7a9a      	ldrb	r2, [r3, #10]
 8017096:	69fb      	ldr	r3, [r7, #28]
 8017098:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	7a5a      	ldrb	r2, [r3, #9]
 801709e:	69fb      	ldr	r3, [r7, #28]
 80170a0:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	69fb      	ldr	r3, [r7, #28]
 80170a8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	8adb      	ldrh	r3, [r3, #22]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d021      	beq.n	80170f6 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80170b2:	4b22      	ldr	r3, [pc, #136]	@ (801713c <tcp_listen_with_backlog_and_err+0x124>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	68fa      	ldr	r2, [r7, #12]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d105      	bne.n	80170c8 <tcp_listen_with_backlog_and_err+0xb0>
 80170bc:	4b1f      	ldr	r3, [pc, #124]	@ (801713c <tcp_listen_with_backlog_and_err+0x124>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	68db      	ldr	r3, [r3, #12]
 80170c2:	4a1e      	ldr	r2, [pc, #120]	@ (801713c <tcp_listen_with_backlog_and_err+0x124>)
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	e013      	b.n	80170f0 <tcp_listen_with_backlog_and_err+0xd8>
 80170c8:	4b1c      	ldr	r3, [pc, #112]	@ (801713c <tcp_listen_with_backlog_and_err+0x124>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	617b      	str	r3, [r7, #20]
 80170ce:	e00c      	b.n	80170ea <tcp_listen_with_backlog_and_err+0xd2>
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	68fa      	ldr	r2, [r7, #12]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d104      	bne.n	80170e4 <tcp_listen_with_backlog_and_err+0xcc>
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	68da      	ldr	r2, [r3, #12]
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	60da      	str	r2, [r3, #12]
 80170e2:	e005      	b.n	80170f0 <tcp_listen_with_backlog_and_err+0xd8>
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	68db      	ldr	r3, [r3, #12]
 80170e8:	617b      	str	r3, [r7, #20]
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d1ef      	bne.n	80170d0 <tcp_listen_with_backlog_and_err+0xb8>
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	2200      	movs	r2, #0
 80170f4:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80170f6:	68f9      	ldr	r1, [r7, #12]
 80170f8:	2001      	movs	r0, #1
 80170fa:	f7fe fad9 	bl	80156b0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80170fe:	69fb      	ldr	r3, [r7, #28]
 8017100:	4a0f      	ldr	r2, [pc, #60]	@ (8017140 <tcp_listen_with_backlog_and_err+0x128>)
 8017102:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017104:	4b0f      	ldr	r3, [pc, #60]	@ (8017144 <tcp_listen_with_backlog_and_err+0x12c>)
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	69fb      	ldr	r3, [r7, #28]
 801710a:	60da      	str	r2, [r3, #12]
 801710c:	4a0d      	ldr	r2, [pc, #52]	@ (8017144 <tcp_listen_with_backlog_and_err+0x12c>)
 801710e:	69fb      	ldr	r3, [r7, #28]
 8017110:	6013      	str	r3, [r2, #0]
 8017112:	f004 ff31 	bl	801bf78 <tcp_timer_needed>
  res = ERR_OK;
 8017116:	2300      	movs	r3, #0
 8017118:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d002      	beq.n	8017126 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	7efa      	ldrb	r2, [r7, #27]
 8017124:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017126:	69fb      	ldr	r3, [r7, #28]
}
 8017128:	4618      	mov	r0, r3
 801712a:	3720      	adds	r7, #32
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}
 8017130:	08026684 	.word	0x08026684
 8017134:	08026778 	.word	0x08026778
 8017138:	080266c0 	.word	0x080266c0
 801713c:	2000bd80 	.word	0x2000bd80
 8017140:	08016fd5 	.word	0x08016fd5
 8017144:	2000bd84 	.word	0x2000bd84

08017148 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b084      	sub	sp, #16
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017158:	4413      	add	r3, r2
 801715a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8017164:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8017168:	bf28      	it	cs
 801716a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801716e:	b292      	uxth	r2, r2
 8017170:	4413      	add	r3, r2
 8017172:	68fa      	ldr	r2, [r7, #12]
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	2b00      	cmp	r3, #0
 8017178:	db08      	blt.n	801718c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017186:	68fa      	ldr	r2, [r7, #12]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	e020      	b.n	80171ce <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	dd03      	ble.n	80171a2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2200      	movs	r2, #0
 801719e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80171a0:	e014      	b.n	80171cc <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171aa:	1ad3      	subs	r3, r2, r3
 80171ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171b4:	d306      	bcc.n	80171c4 <tcp_update_rcv_ann_wnd+0x7c>
 80171b6:	4b08      	ldr	r3, [pc, #32]	@ (80171d8 <tcp_update_rcv_ann_wnd+0x90>)
 80171b8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80171bc:	4907      	ldr	r1, [pc, #28]	@ (80171dc <tcp_update_rcv_ann_wnd+0x94>)
 80171be:	4808      	ldr	r0, [pc, #32]	@ (80171e0 <tcp_update_rcv_ann_wnd+0x98>)
 80171c0:	f00b f83e 	bl	8022240 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80171c4:	68bb      	ldr	r3, [r7, #8]
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80171cc:	2300      	movs	r3, #0
  }
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	08026684 	.word	0x08026684
 80171dc:	0802679c 	.word	0x0802679c
 80171e0:	080266c0 	.word	0x080266c0

080171e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	460b      	mov	r3, r1
 80171ee:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	7d1b      	ldrb	r3, [r3, #20]
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d106      	bne.n	8017206 <tcp_recved+0x22>
 80171f8:	4b23      	ldr	r3, [pc, #140]	@ (8017288 <tcp_recved+0xa4>)
 80171fa:	f240 321f 	movw	r2, #799	@ 0x31f
 80171fe:	4923      	ldr	r1, [pc, #140]	@ (801728c <tcp_recved+0xa8>)
 8017200:	4823      	ldr	r0, [pc, #140]	@ (8017290 <tcp_recved+0xac>)
 8017202:	f00b f81d 	bl	8022240 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801720a:	887b      	ldrh	r3, [r7, #2]
 801720c:	4413      	add	r3, r2
 801720e:	b29a      	uxth	r2, r3
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017218:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801721c:	d904      	bls.n	8017228 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017224:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017226:	e017      	b.n	8017258 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801722c:	2b00      	cmp	r3, #0
 801722e:	d113      	bne.n	8017258 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	7d1b      	ldrb	r3, [r3, #20]
 8017234:	2b07      	cmp	r3, #7
 8017236:	d003      	beq.n	8017240 <tcp_recved+0x5c>
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	7d1b      	ldrb	r3, [r3, #20]
 801723c:	2b09      	cmp	r3, #9
 801723e:	d104      	bne.n	801724a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017246:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017248:	e006      	b.n	8017258 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801724a:	4b0f      	ldr	r3, [pc, #60]	@ (8017288 <tcp_recved+0xa4>)
 801724c:	f240 322d 	movw	r2, #813	@ 0x32d
 8017250:	4910      	ldr	r1, [pc, #64]	@ (8017294 <tcp_recved+0xb0>)
 8017252:	480f      	ldr	r0, [pc, #60]	@ (8017290 <tcp_recved+0xac>)
 8017254:	f00a fff4 	bl	8022240 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7ff ff75 	bl	8017148 <tcp_update_rcv_ann_wnd>
 801725e:	4603      	mov	r3, r0
 8017260:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8017268:	db09      	blt.n	801727e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	7e9b      	ldrb	r3, [r3, #26]
 801726e:	f043 0302 	orr.w	r3, r3, #2
 8017272:	b2da      	uxtb	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f004 f96d 	bl	801b558 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801727e:	bf00      	nop
 8017280:	3710      	adds	r7, #16
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}
 8017286:	bf00      	nop
 8017288:	08026684 	.word	0x08026684
 801728c:	080267b8 	.word	0x080267b8
 8017290:	080266c0 	.word	0x080266c0
 8017294:	080267e0 	.word	0x080267e0

08017298 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801729e:	2300      	movs	r3, #0
 80172a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80172a2:	4b1d      	ldr	r3, [pc, #116]	@ (8017318 <tcp_new_port+0x80>)
 80172a4:	881b      	ldrh	r3, [r3, #0]
 80172a6:	1c5a      	adds	r2, r3, #1
 80172a8:	b291      	uxth	r1, r2
 80172aa:	4a1b      	ldr	r2, [pc, #108]	@ (8017318 <tcp_new_port+0x80>)
 80172ac:	8011      	strh	r1, [r2, #0]
 80172ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d103      	bne.n	80172be <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80172b6:	4b18      	ldr	r3, [pc, #96]	@ (8017318 <tcp_new_port+0x80>)
 80172b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80172bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80172be:	2300      	movs	r3, #0
 80172c0:	71fb      	strb	r3, [r7, #7]
 80172c2:	e01e      	b.n	8017302 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80172c4:	79fb      	ldrb	r3, [r7, #7]
 80172c6:	4a15      	ldr	r2, [pc, #84]	@ (801731c <tcp_new_port+0x84>)
 80172c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	e011      	b.n	80172f6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	8ada      	ldrh	r2, [r3, #22]
 80172d6:	4b10      	ldr	r3, [pc, #64]	@ (8017318 <tcp_new_port+0x80>)
 80172d8:	881b      	ldrh	r3, [r3, #0]
 80172da:	429a      	cmp	r2, r3
 80172dc:	d108      	bne.n	80172f0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80172de:	88bb      	ldrh	r3, [r7, #4]
 80172e0:	3301      	adds	r3, #1
 80172e2:	80bb      	strh	r3, [r7, #4]
 80172e4:	88bb      	ldrh	r3, [r7, #4]
 80172e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80172ea:	d3da      	bcc.n	80172a2 <tcp_new_port+0xa>
          return 0;
 80172ec:	2300      	movs	r3, #0
 80172ee:	e00d      	b.n	801730c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	603b      	str	r3, [r7, #0]
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d1ea      	bne.n	80172d2 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80172fc:	79fb      	ldrb	r3, [r7, #7]
 80172fe:	3301      	adds	r3, #1
 8017300:	71fb      	strb	r3, [r7, #7]
 8017302:	79fb      	ldrb	r3, [r7, #7]
 8017304:	2b03      	cmp	r3, #3
 8017306:	d9dd      	bls.n	80172c4 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017308:	4b03      	ldr	r3, [pc, #12]	@ (8017318 <tcp_new_port+0x80>)
 801730a:	881b      	ldrh	r3, [r3, #0]
}
 801730c:	4618      	mov	r0, r3
 801730e:	370c      	adds	r7, #12
 8017310:	46bd      	mov	sp, r7
 8017312:	bc80      	pop	{r7}
 8017314:	4770      	bx	lr
 8017316:	bf00      	nop
 8017318:	20000118 	.word	0x20000118
 801731c:	08031624 	.word	0x08031624

08017320 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017320:	b5b0      	push	{r4, r5, r7, lr}
 8017322:	b08c      	sub	sp, #48	@ 0x30
 8017324:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017326:	2300      	movs	r3, #0
 8017328:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801732a:	4b98      	ldr	r3, [pc, #608]	@ (801758c <tcp_slowtmr+0x26c>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	3301      	adds	r3, #1
 8017330:	4a96      	ldr	r2, [pc, #600]	@ (801758c <tcp_slowtmr+0x26c>)
 8017332:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017334:	4b96      	ldr	r3, [pc, #600]	@ (8017590 <tcp_slowtmr+0x270>)
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	3301      	adds	r3, #1
 801733a:	b2da      	uxtb	r2, r3
 801733c:	4b94      	ldr	r3, [pc, #592]	@ (8017590 <tcp_slowtmr+0x270>)
 801733e:	701a      	strb	r2, [r3, #0]
 8017340:	e000      	b.n	8017344 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8017342:	bf00      	nop
  prev = NULL;
 8017344:	2300      	movs	r3, #0
 8017346:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8017348:	4b92      	ldr	r3, [pc, #584]	@ (8017594 <tcp_slowtmr+0x274>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 801734e:	e227      	b.n	80177a0 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017352:	7d1b      	ldrb	r3, [r3, #20]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d106      	bne.n	8017366 <tcp_slowtmr+0x46>
 8017358:	4b8f      	ldr	r3, [pc, #572]	@ (8017598 <tcp_slowtmr+0x278>)
 801735a:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 801735e:	498f      	ldr	r1, [pc, #572]	@ (801759c <tcp_slowtmr+0x27c>)
 8017360:	488f      	ldr	r0, [pc, #572]	@ (80175a0 <tcp_slowtmr+0x280>)
 8017362:	f00a ff6d 	bl	8022240 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017368:	7d1b      	ldrb	r3, [r3, #20]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d106      	bne.n	801737c <tcp_slowtmr+0x5c>
 801736e:	4b8a      	ldr	r3, [pc, #552]	@ (8017598 <tcp_slowtmr+0x278>)
 8017370:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017374:	498b      	ldr	r1, [pc, #556]	@ (80175a4 <tcp_slowtmr+0x284>)
 8017376:	488a      	ldr	r0, [pc, #552]	@ (80175a0 <tcp_slowtmr+0x280>)
 8017378:	f00a ff62 	bl	8022240 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801737e:	7d1b      	ldrb	r3, [r3, #20]
 8017380:	2b0a      	cmp	r3, #10
 8017382:	d106      	bne.n	8017392 <tcp_slowtmr+0x72>
 8017384:	4b84      	ldr	r3, [pc, #528]	@ (8017598 <tcp_slowtmr+0x278>)
 8017386:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 801738a:	4987      	ldr	r1, [pc, #540]	@ (80175a8 <tcp_slowtmr+0x288>)
 801738c:	4884      	ldr	r0, [pc, #528]	@ (80175a0 <tcp_slowtmr+0x280>)
 801738e:	f00a ff57 	bl	8022240 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017394:	7f5a      	ldrb	r2, [r3, #29]
 8017396:	4b7e      	ldr	r3, [pc, #504]	@ (8017590 <tcp_slowtmr+0x270>)
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	429a      	cmp	r2, r3
 801739c:	d103      	bne.n	80173a6 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 801739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80173a4:	e1fc      	b.n	80177a0 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 80173a6:	4b7a      	ldr	r3, [pc, #488]	@ (8017590 <tcp_slowtmr+0x270>)
 80173a8:	781a      	ldrb	r2, [r3, #0]
 80173aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ac:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80173b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b8:	7d1b      	ldrb	r3, [r3, #20]
 80173ba:	2b02      	cmp	r3, #2
 80173bc:	d108      	bne.n	80173d0 <tcp_slowtmr+0xb0>
 80173be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173c4:	2b05      	cmp	r3, #5
 80173c6:	d903      	bls.n	80173d0 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 80173c8:	7ffb      	ldrb	r3, [r7, #31]
 80173ca:	3301      	adds	r3, #1
 80173cc:	77fb      	strb	r3, [r7, #31]
 80173ce:	e0a2      	b.n	8017516 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80173d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173d6:	2b0b      	cmp	r3, #11
 80173d8:	d903      	bls.n	80173e2 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80173da:	7ffb      	ldrb	r3, [r7, #31]
 80173dc:	3301      	adds	r3, #1
 80173de:	77fb      	strb	r3, [r7, #31]
 80173e0:	e099      	b.n	8017516 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80173e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d032      	beq.n	8017452 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80173ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ee:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80173f2:	3b01      	subs	r3, #1
 80173f4:	4a6d      	ldr	r2, [pc, #436]	@ (80175ac <tcp_slowtmr+0x28c>)
 80173f6:	5cd3      	ldrb	r3, [r2, r3]
 80173f8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80173fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173fc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8017400:	7cfa      	ldrb	r2, [r7, #19]
 8017402:	429a      	cmp	r2, r3
 8017404:	d907      	bls.n	8017416 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8017406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017408:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801740c:	3301      	adds	r3, #1
 801740e:	b2da      	uxtb	r2, r3
 8017410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017412:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8017416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017418:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801741c:	7cfa      	ldrb	r2, [r7, #19]
 801741e:	429a      	cmp	r2, r3
 8017420:	d879      	bhi.n	8017516 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8017422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017424:	f004 fcde 	bl	801bde4 <tcp_zero_window_probe>
 8017428:	4603      	mov	r3, r0
 801742a:	2b00      	cmp	r3, #0
 801742c:	d173      	bne.n	8017516 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 801742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017430:	2200      	movs	r2, #0
 8017432:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017438:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801743c:	2b06      	cmp	r3, #6
 801743e:	d86a      	bhi.n	8017516 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8017440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017442:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8017446:	3301      	adds	r3, #1
 8017448:	b2da      	uxtb	r2, r3
 801744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801744c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8017450:	e061      	b.n	8017516 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8017452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017458:	2b00      	cmp	r3, #0
 801745a:	db08      	blt.n	801746e <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 801745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017462:	b29b      	uxth	r3, r3
 8017464:	3301      	adds	r3, #1
 8017466:	b29b      	uxth	r3, r3
 8017468:	b21a      	sxth	r2, r3
 801746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801746c:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017472:	2b00      	cmp	r3, #0
 8017474:	d04f      	beq.n	8017516 <tcp_slowtmr+0x1f6>
 8017476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017478:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801747e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8017482:	429a      	cmp	r2, r3
 8017484:	db47      	blt.n	8017516 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8017486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017488:	7d1b      	ldrb	r3, [r3, #20]
 801748a:	2b02      	cmp	r3, #2
 801748c:	d018      	beq.n	80174c0 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017490:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017494:	2b0c      	cmp	r3, #12
 8017496:	bf28      	it	cs
 8017498:	230c      	movcs	r3, #12
 801749a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801749e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80174a2:	10db      	asrs	r3, r3, #3
 80174a4:	b21b      	sxth	r3, r3
 80174a6:	461a      	mov	r2, r3
 80174a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80174ae:	4413      	add	r3, r2
 80174b0:	7dfa      	ldrb	r2, [r7, #23]
 80174b2:	493f      	ldr	r1, [pc, #252]	@ (80175b0 <tcp_slowtmr+0x290>)
 80174b4:	5c8a      	ldrb	r2, [r1, r2]
 80174b6:	4093      	lsls	r3, r2
 80174b8:	b21a      	sxth	r2, r3
 80174ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 80174c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c2:	2200      	movs	r2, #0
 80174c4:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80174c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80174cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174d2:	4293      	cmp	r3, r2
 80174d4:	bf28      	it	cs
 80174d6:	4613      	movcs	r3, r2
 80174d8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80174da:	8abb      	ldrh	r3, [r7, #20]
 80174dc:	085b      	lsrs	r3, r3, #1
 80174de:	b29a      	uxth	r2, r3
 80174e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80174e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80174ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174f0:	005b      	lsls	r3, r3, #1
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d206      	bcs.n	8017506 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 80174f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174fc:	005b      	lsls	r3, r3, #1
 80174fe:	b29a      	uxth	r2, r3
 8017500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017502:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8017506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017508:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801750c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8017510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017512:	f004 fb41 	bl	801bb98 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8017516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017518:	7d1b      	ldrb	r3, [r3, #20]
 801751a:	2b06      	cmp	r3, #6
 801751c:	d10f      	bne.n	801753e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 801751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017520:	7e9b      	ldrb	r3, [r3, #26]
 8017522:	f003 0310 	and.w	r3, r3, #16
 8017526:	2b00      	cmp	r3, #0
 8017528:	d009      	beq.n	801753e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801752a:	4b18      	ldr	r3, [pc, #96]	@ (801758c <tcp_slowtmr+0x26c>)
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017530:	6a1b      	ldr	r3, [r3, #32]
 8017532:	1ad3      	subs	r3, r2, r3
 8017534:	2b28      	cmp	r3, #40	@ 0x28
 8017536:	d902      	bls.n	801753e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8017538:	7ffb      	ldrb	r3, [r7, #31]
 801753a:	3301      	adds	r3, #1
 801753c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017540:	7a1b      	ldrb	r3, [r3, #8]
 8017542:	f003 0308 	and.w	r3, r3, #8
 8017546:	2b00      	cmp	r3, #0
 8017548:	d05d      	beq.n	8017606 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 801754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801754c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801754e:	2b04      	cmp	r3, #4
 8017550:	d003      	beq.n	801755a <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8017552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017554:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8017556:	2b07      	cmp	r3, #7
 8017558:	d155      	bne.n	8017606 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801755a:	4b0c      	ldr	r3, [pc, #48]	@ (801758c <tcp_slowtmr+0x26c>)
 801755c:	681a      	ldr	r2, [r3, #0]
 801755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017560:	6a1b      	ldr	r3, [r3, #32]
 8017562:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8017564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801756a:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801756e:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8017572:	4910      	ldr	r1, [pc, #64]	@ (80175b4 <tcp_slowtmr+0x294>)
 8017574:	fba1 1303 	umull	r1, r3, r1, r3
 8017578:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801757a:	429a      	cmp	r2, r3
 801757c:	d91c      	bls.n	80175b8 <tcp_slowtmr+0x298>
        ++pcb_remove;
 801757e:	7ffb      	ldrb	r3, [r7, #31]
 8017580:	3301      	adds	r3, #1
 8017582:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8017584:	7fbb      	ldrb	r3, [r7, #30]
 8017586:	3301      	adds	r3, #1
 8017588:	77bb      	strb	r3, [r7, #30]
 801758a:	e03c      	b.n	8017606 <tcp_slowtmr+0x2e6>
 801758c:	2000bd7c 	.word	0x2000bd7c
 8017590:	2000bd92 	.word	0x2000bd92
 8017594:	2000bd88 	.word	0x2000bd88
 8017598:	08026684 	.word	0x08026684
 801759c:	08026834 	.word	0x08026834
 80175a0:	080266c0 	.word	0x080266c0
 80175a4:	08026860 	.word	0x08026860
 80175a8:	0802688c 	.word	0x0802688c
 80175ac:	0803161c 	.word	0x0803161c
 80175b0:	0803160c 	.word	0x0803160c
 80175b4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175b8:	4b97      	ldr	r3, [pc, #604]	@ (8017818 <tcp_slowtmr+0x4f8>)
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175be:	6a1b      	ldr	r3, [r3, #32]
 80175c0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80175c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175c4:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80175c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ca:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80175ce:	4618      	mov	r0, r3
 80175d0:	4b92      	ldr	r3, [pc, #584]	@ (801781c <tcp_slowtmr+0x4fc>)
 80175d2:	fb00 f303 	mul.w	r3, r0, r3
 80175d6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80175d8:	4991      	ldr	r1, [pc, #580]	@ (8017820 <tcp_slowtmr+0x500>)
 80175da:	fba1 1303 	umull	r1, r3, r1, r3
 80175de:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d910      	bls.n	8017606 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80175e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80175e6:	f004 fbb5 	bl	801bd54 <tcp_keepalive>
 80175ea:	4603      	mov	r3, r0
 80175ec:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80175ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d107      	bne.n	8017606 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 80175f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175f8:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80175fc:	3301      	adds	r3, #1
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017602:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8017606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801760a:	2b00      	cmp	r3, #0
 801760c:	d016      	beq.n	801763c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801760e:	4b82      	ldr	r3, [pc, #520]	@ (8017818 <tcp_slowtmr+0x4f8>)
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017614:	6a1b      	ldr	r3, [r3, #32]
 8017616:	1ad2      	subs	r2, r2, r3
 8017618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801761a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801761e:	4619      	mov	r1, r3
 8017620:	460b      	mov	r3, r1
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	440b      	add	r3, r1
 8017626:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017628:	429a      	cmp	r2, r3
 801762a:	d307      	bcc.n	801763c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 801762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801762e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017630:	4618      	mov	r0, r3
 8017632:	f000 fa06 	bl	8017a42 <tcp_segs_free>
      pcb->ooseq = NULL;
 8017636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017638:	2200      	movs	r2, #0
 801763a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 801763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801763e:	7d1b      	ldrb	r3, [r3, #20]
 8017640:	2b03      	cmp	r3, #3
 8017642:	d109      	bne.n	8017658 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017644:	4b74      	ldr	r3, [pc, #464]	@ (8017818 <tcp_slowtmr+0x4f8>)
 8017646:	681a      	ldr	r2, [r3, #0]
 8017648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801764a:	6a1b      	ldr	r3, [r3, #32]
 801764c:	1ad3      	subs	r3, r2, r3
 801764e:	2b28      	cmp	r3, #40	@ 0x28
 8017650:	d902      	bls.n	8017658 <tcp_slowtmr+0x338>
        ++pcb_remove;
 8017652:	7ffb      	ldrb	r3, [r7, #31]
 8017654:	3301      	adds	r3, #1
 8017656:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8017658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801765a:	7d1b      	ldrb	r3, [r3, #20]
 801765c:	2b09      	cmp	r3, #9
 801765e:	d109      	bne.n	8017674 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017660:	4b6d      	ldr	r3, [pc, #436]	@ (8017818 <tcp_slowtmr+0x4f8>)
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017666:	6a1b      	ldr	r3, [r3, #32]
 8017668:	1ad3      	subs	r3, r2, r3
 801766a:	2bf0      	cmp	r3, #240	@ 0xf0
 801766c:	d902      	bls.n	8017674 <tcp_slowtmr+0x354>
        ++pcb_remove;
 801766e:	7ffb      	ldrb	r3, [r7, #31]
 8017670:	3301      	adds	r3, #1
 8017672:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8017674:	7ffb      	ldrb	r3, [r7, #31]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d05d      	beq.n	8017736 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 801767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801767c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017680:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8017682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017684:	f000 fc7a 	bl	8017f7c <tcp_pcb_purge>
      if (prev != NULL) {
 8017688:	6a3b      	ldr	r3, [r7, #32]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d010      	beq.n	80176b0 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801768e:	4b65      	ldr	r3, [pc, #404]	@ (8017824 <tcp_slowtmr+0x504>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017694:	429a      	cmp	r2, r3
 8017696:	d106      	bne.n	80176a6 <tcp_slowtmr+0x386>
 8017698:	4b63      	ldr	r3, [pc, #396]	@ (8017828 <tcp_slowtmr+0x508>)
 801769a:	f240 4289 	movw	r2, #1161	@ 0x489
 801769e:	4963      	ldr	r1, [pc, #396]	@ (801782c <tcp_slowtmr+0x50c>)
 80176a0:	4863      	ldr	r0, [pc, #396]	@ (8017830 <tcp_slowtmr+0x510>)
 80176a2:	f00a fdcd 	bl	8022240 <iprintf>
        prev->next = pcb->next;
 80176a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176a8:	68da      	ldr	r2, [r3, #12]
 80176aa:	6a3b      	ldr	r3, [r7, #32]
 80176ac:	60da      	str	r2, [r3, #12]
 80176ae:	e00f      	b.n	80176d0 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80176b0:	4b5c      	ldr	r3, [pc, #368]	@ (8017824 <tcp_slowtmr+0x504>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d006      	beq.n	80176c8 <tcp_slowtmr+0x3a8>
 80176ba:	4b5b      	ldr	r3, [pc, #364]	@ (8017828 <tcp_slowtmr+0x508>)
 80176bc:	f240 428d 	movw	r2, #1165	@ 0x48d
 80176c0:	495c      	ldr	r1, [pc, #368]	@ (8017834 <tcp_slowtmr+0x514>)
 80176c2:	485b      	ldr	r0, [pc, #364]	@ (8017830 <tcp_slowtmr+0x510>)
 80176c4:	f00a fdbc 	bl	8022240 <iprintf>
        tcp_active_pcbs = pcb->next;
 80176c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	4a55      	ldr	r2, [pc, #340]	@ (8017824 <tcp_slowtmr+0x504>)
 80176ce:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80176d0:	7fbb      	ldrb	r3, [r7, #30]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d010      	beq.n	80176f8 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80176d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80176da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80176de:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80176e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e2:	1d1d      	adds	r5, r3, #4
 80176e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e6:	8adb      	ldrh	r3, [r3, #22]
 80176e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176ea:	8b12      	ldrh	r2, [r2, #24]
 80176ec:	9201      	str	r2, [sp, #4]
 80176ee:	9300      	str	r3, [sp, #0]
 80176f0:	462b      	mov	r3, r5
 80176f2:	4622      	mov	r2, r4
 80176f4:	f004 f9c8 	bl	801ba88 <tcp_rst>
      err_arg = pcb->callback_arg;
 80176f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176fa:	691b      	ldr	r3, [r3, #16]
 80176fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80176fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017700:	7d1b      	ldrb	r3, [r3, #20]
 8017702:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017706:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801770a:	68db      	ldr	r3, [r3, #12]
 801770c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801770e:	6839      	ldr	r1, [r7, #0]
 8017710:	2001      	movs	r0, #1
 8017712:	f7fd ffcd 	bl	80156b0 <memp_free>
      tcp_active_pcbs_changed = 0;
 8017716:	4b48      	ldr	r3, [pc, #288]	@ (8017838 <tcp_slowtmr+0x518>)
 8017718:	2200      	movs	r2, #0
 801771a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d004      	beq.n	801772c <tcp_slowtmr+0x40c>
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	f06f 010c 	mvn.w	r1, #12
 8017728:	68b8      	ldr	r0, [r7, #8]
 801772a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801772c:	4b42      	ldr	r3, [pc, #264]	@ (8017838 <tcp_slowtmr+0x518>)
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d035      	beq.n	80177a0 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8017734:	e606      	b.n	8017344 <tcp_slowtmr+0x24>
      prev = pcb;
 8017736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017738:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8017740:	6a3b      	ldr	r3, [r7, #32]
 8017742:	7edb      	ldrb	r3, [r3, #27]
 8017744:	3301      	adds	r3, #1
 8017746:	b2da      	uxtb	r2, r3
 8017748:	6a3b      	ldr	r3, [r7, #32]
 801774a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801774c:	6a3b      	ldr	r3, [r7, #32]
 801774e:	7eda      	ldrb	r2, [r3, #27]
 8017750:	6a3b      	ldr	r3, [r7, #32]
 8017752:	7f1b      	ldrb	r3, [r3, #28]
 8017754:	429a      	cmp	r2, r3
 8017756:	d323      	bcc.n	80177a0 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8017758:	6a3b      	ldr	r3, [r7, #32]
 801775a:	2200      	movs	r2, #0
 801775c:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 801775e:	4b36      	ldr	r3, [pc, #216]	@ (8017838 <tcp_slowtmr+0x518>)
 8017760:	2200      	movs	r2, #0
 8017762:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017764:	6a3b      	ldr	r3, [r7, #32]
 8017766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00a      	beq.n	8017784 <tcp_slowtmr+0x464>
 801776e:	6a3b      	ldr	r3, [r7, #32]
 8017770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017774:	6a3a      	ldr	r2, [r7, #32]
 8017776:	6912      	ldr	r2, [r2, #16]
 8017778:	6a39      	ldr	r1, [r7, #32]
 801777a:	4610      	mov	r0, r2
 801777c:	4798      	blx	r3
 801777e:	4603      	mov	r3, r0
 8017780:	777b      	strb	r3, [r7, #29]
 8017782:	e001      	b.n	8017788 <tcp_slowtmr+0x468>
 8017784:	2300      	movs	r3, #0
 8017786:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8017788:	4b2b      	ldr	r3, [pc, #172]	@ (8017838 <tcp_slowtmr+0x518>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	f47f add8 	bne.w	8017342 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017792:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d102      	bne.n	80177a0 <tcp_slowtmr+0x480>
          tcp_output(prev);
 801779a:	6a38      	ldr	r0, [r7, #32]
 801779c:	f003 fedc 	bl	801b558 <tcp_output>
  while (pcb != NULL) {
 80177a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	f47f add4 	bne.w	8017350 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80177a8:	2300      	movs	r3, #0
 80177aa:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80177ac:	4b23      	ldr	r3, [pc, #140]	@ (801783c <tcp_slowtmr+0x51c>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80177b2:	e068      	b.n	8017886 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80177b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b6:	7d1b      	ldrb	r3, [r3, #20]
 80177b8:	2b0a      	cmp	r3, #10
 80177ba:	d006      	beq.n	80177ca <tcp_slowtmr+0x4aa>
 80177bc:	4b1a      	ldr	r3, [pc, #104]	@ (8017828 <tcp_slowtmr+0x508>)
 80177be:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80177c2:	491f      	ldr	r1, [pc, #124]	@ (8017840 <tcp_slowtmr+0x520>)
 80177c4:	481a      	ldr	r0, [pc, #104]	@ (8017830 <tcp_slowtmr+0x510>)
 80177c6:	f00a fd3b 	bl	8022240 <iprintf>
    pcb_remove = 0;
 80177ca:	2300      	movs	r3, #0
 80177cc:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80177ce:	4b12      	ldr	r3, [pc, #72]	@ (8017818 <tcp_slowtmr+0x4f8>)
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d4:	6a1b      	ldr	r3, [r3, #32]
 80177d6:	1ad3      	subs	r3, r2, r3
 80177d8:	2bf0      	cmp	r3, #240	@ 0xf0
 80177da:	d902      	bls.n	80177e2 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 80177dc:	7ffb      	ldrb	r3, [r7, #31]
 80177de:	3301      	adds	r3, #1
 80177e0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80177e2:	7ffb      	ldrb	r3, [r7, #31]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d049      	beq.n	801787c <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80177e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80177ea:	f000 fbc7 	bl	8017f7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80177ee:	6a3b      	ldr	r3, [r7, #32]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d029      	beq.n	8017848 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80177f4:	4b11      	ldr	r3, [pc, #68]	@ (801783c <tcp_slowtmr+0x51c>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d106      	bne.n	801780c <tcp_slowtmr+0x4ec>
 80177fe:	4b0a      	ldr	r3, [pc, #40]	@ (8017828 <tcp_slowtmr+0x508>)
 8017800:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8017804:	490f      	ldr	r1, [pc, #60]	@ (8017844 <tcp_slowtmr+0x524>)
 8017806:	480a      	ldr	r0, [pc, #40]	@ (8017830 <tcp_slowtmr+0x510>)
 8017808:	f00a fd1a 	bl	8022240 <iprintf>
        prev->next = pcb->next;
 801780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801780e:	68da      	ldr	r2, [r3, #12]
 8017810:	6a3b      	ldr	r3, [r7, #32]
 8017812:	60da      	str	r2, [r3, #12]
 8017814:	e028      	b.n	8017868 <tcp_slowtmr+0x548>
 8017816:	bf00      	nop
 8017818:	2000bd7c 	.word	0x2000bd7c
 801781c:	000124f8 	.word	0x000124f8
 8017820:	10624dd3 	.word	0x10624dd3
 8017824:	2000bd88 	.word	0x2000bd88
 8017828:	08026684 	.word	0x08026684
 801782c:	080268bc 	.word	0x080268bc
 8017830:	080266c0 	.word	0x080266c0
 8017834:	080268e8 	.word	0x080268e8
 8017838:	2000bd90 	.word	0x2000bd90
 801783c:	2000bd8c 	.word	0x2000bd8c
 8017840:	08026914 	.word	0x08026914
 8017844:	08026944 	.word	0x08026944
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017848:	4b13      	ldr	r3, [pc, #76]	@ (8017898 <tcp_slowtmr+0x578>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801784e:	429a      	cmp	r2, r3
 8017850:	d006      	beq.n	8017860 <tcp_slowtmr+0x540>
 8017852:	4b12      	ldr	r3, [pc, #72]	@ (801789c <tcp_slowtmr+0x57c>)
 8017854:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8017858:	4911      	ldr	r1, [pc, #68]	@ (80178a0 <tcp_slowtmr+0x580>)
 801785a:	4812      	ldr	r0, [pc, #72]	@ (80178a4 <tcp_slowtmr+0x584>)
 801785c:	f00a fcf0 	bl	8022240 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017862:	68db      	ldr	r3, [r3, #12]
 8017864:	4a0c      	ldr	r2, [pc, #48]	@ (8017898 <tcp_slowtmr+0x578>)
 8017866:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 801786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8017872:	69b9      	ldr	r1, [r7, #24]
 8017874:	2001      	movs	r0, #1
 8017876:	f7fd ff1b 	bl	80156b0 <memp_free>
 801787a:	e004      	b.n	8017886 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 801787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801787e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8017880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8017886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017888:	2b00      	cmp	r3, #0
 801788a:	d193      	bne.n	80177b4 <tcp_slowtmr+0x494>
    }
  }
}
 801788c:	bf00      	nop
 801788e:	bf00      	nop
 8017890:	3728      	adds	r7, #40	@ 0x28
 8017892:	46bd      	mov	sp, r7
 8017894:	bdb0      	pop	{r4, r5, r7, pc}
 8017896:	bf00      	nop
 8017898:	2000bd8c 	.word	0x2000bd8c
 801789c:	08026684 	.word	0x08026684
 80178a0:	0802696c 	.word	0x0802696c
 80178a4:	080266c0 	.word	0x080266c0

080178a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80178ae:	4b2d      	ldr	r3, [pc, #180]	@ (8017964 <tcp_fasttmr+0xbc>)
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	3301      	adds	r3, #1
 80178b4:	b2da      	uxtb	r2, r3
 80178b6:	4b2b      	ldr	r3, [pc, #172]	@ (8017964 <tcp_fasttmr+0xbc>)
 80178b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80178ba:	4b2b      	ldr	r3, [pc, #172]	@ (8017968 <tcp_fasttmr+0xc0>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80178c0:	e048      	b.n	8017954 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	7f5a      	ldrb	r2, [r3, #29]
 80178c6:	4b27      	ldr	r3, [pc, #156]	@ (8017964 <tcp_fasttmr+0xbc>)
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d03f      	beq.n	801794e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80178ce:	4b25      	ldr	r3, [pc, #148]	@ (8017964 <tcp_fasttmr+0xbc>)
 80178d0:	781a      	ldrb	r2, [r3, #0]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7e9b      	ldrb	r3, [r3, #26]
 80178da:	f003 0301 	and.w	r3, r3, #1
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d010      	beq.n	8017904 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	7e9b      	ldrb	r3, [r3, #26]
 80178e6:	f043 0302 	orr.w	r3, r3, #2
 80178ea:	b2da      	uxtb	r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f003 fe31 	bl	801b558 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	7e9b      	ldrb	r3, [r3, #26]
 80178fa:	f023 0303 	bic.w	r3, r3, #3
 80178fe:	b2da      	uxtb	r2, r3
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	7e9b      	ldrb	r3, [r3, #26]
 8017908:	f003 0308 	and.w	r3, r3, #8
 801790c:	2b00      	cmp	r3, #0
 801790e:	d009      	beq.n	8017924 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	7e9b      	ldrb	r3, [r3, #26]
 8017914:	f023 0308 	bic.w	r3, r3, #8
 8017918:	b2da      	uxtb	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7ff f970 	bl	8016c04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	68db      	ldr	r3, [r3, #12]
 8017928:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801792e:	2b00      	cmp	r3, #0
 8017930:	d00a      	beq.n	8017948 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017932:	4b0e      	ldr	r3, [pc, #56]	@ (801796c <tcp_fasttmr+0xc4>)
 8017934:	2200      	movs	r2, #0
 8017936:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 f819 	bl	8017970 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801793e:	4b0b      	ldr	r3, [pc, #44]	@ (801796c <tcp_fasttmr+0xc4>)
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d000      	beq.n	8017948 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017946:	e7b8      	b.n	80178ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	607b      	str	r3, [r7, #4]
 801794c:	e002      	b.n	8017954 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d1b3      	bne.n	80178c2 <tcp_fasttmr+0x1a>
    }
  }
}
 801795a:	bf00      	nop
 801795c:	bf00      	nop
 801795e:	3708      	adds	r7, #8
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	2000bd92 	.word	0x2000bd92
 8017968:	2000bd88 	.word	0x2000bd88
 801796c:	2000bd90 	.word	0x2000bd90

08017970 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017970:	b590      	push	{r4, r7, lr}
 8017972:	b085      	sub	sp, #20
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801797c:	7b5b      	ldrb	r3, [r3, #13]
 801797e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017984:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	2200      	movs	r2, #0
 801798a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017992:	2b00      	cmp	r3, #0
 8017994:	d00b      	beq.n	80179ae <tcp_process_refused_data+0x3e>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	6918      	ldr	r0, [r3, #16]
 80179a0:	2300      	movs	r3, #0
 80179a2:	68ba      	ldr	r2, [r7, #8]
 80179a4:	6879      	ldr	r1, [r7, #4]
 80179a6:	47a0      	blx	r4
 80179a8:	4603      	mov	r3, r0
 80179aa:	73fb      	strb	r3, [r7, #15]
 80179ac:	e007      	b.n	80179be <tcp_process_refused_data+0x4e>
 80179ae:	2300      	movs	r3, #0
 80179b0:	68ba      	ldr	r2, [r7, #8]
 80179b2:	6879      	ldr	r1, [r7, #4]
 80179b4:	2000      	movs	r0, #0
 80179b6:	f000 f89b 	bl	8017af0 <tcp_recv_null>
 80179ba:	4603      	mov	r3, r0
 80179bc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80179be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d12a      	bne.n	8017a1c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80179c6:	7bbb      	ldrb	r3, [r7, #14]
 80179c8:	f003 0320 	and.w	r3, r3, #32
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d033      	beq.n	8017a38 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179d4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80179d8:	d005      	beq.n	80179e6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179de:	3301      	adds	r3, #1
 80179e0:	b29a      	uxth	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00b      	beq.n	8017a08 <tcp_process_refused_data+0x98>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6918      	ldr	r0, [r3, #16]
 80179fa:	2300      	movs	r3, #0
 80179fc:	2200      	movs	r2, #0
 80179fe:	6879      	ldr	r1, [r7, #4]
 8017a00:	47a0      	blx	r4
 8017a02:	4603      	mov	r3, r0
 8017a04:	73fb      	strb	r3, [r7, #15]
 8017a06:	e001      	b.n	8017a0c <tcp_process_refused_data+0x9c>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a10:	f113 0f0d 	cmn.w	r3, #13
 8017a14:	d110      	bne.n	8017a38 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8017a16:	f06f 030c 	mvn.w	r3, #12
 8017a1a:	e00e      	b.n	8017a3a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8017a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a20:	f113 0f0d 	cmn.w	r3, #13
 8017a24:	d102      	bne.n	8017a2c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017a26:	f06f 030c 	mvn.w	r3, #12
 8017a2a:	e006      	b.n	8017a3a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	68ba      	ldr	r2, [r7, #8]
 8017a30:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8017a32:	f06f 0304 	mvn.w	r3, #4
 8017a36:	e000      	b.n	8017a3a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8017a38:	2300      	movs	r3, #0
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3714      	adds	r7, #20
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd90      	pop	{r4, r7, pc}

08017a42 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017a42:	b580      	push	{r7, lr}
 8017a44:	b084      	sub	sp, #16
 8017a46:	af00      	add	r7, sp, #0
 8017a48:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017a4a:	e007      	b.n	8017a5c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f000 f80a 	bl	8017a6c <tcp_seg_free>
    seg = next;
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d1f4      	bne.n	8017a4c <tcp_segs_free+0xa>
  }
}
 8017a62:	bf00      	nop
 8017a64:	bf00      	nop
 8017a66:	3710      	adds	r7, #16
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}

08017a6c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d00c      	beq.n	8017a94 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d004      	beq.n	8017a8c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	685b      	ldr	r3, [r3, #4]
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fe fbbc 	bl	8016204 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017a8c:	6879      	ldr	r1, [r7, #4]
 8017a8e:	2003      	movs	r0, #3
 8017a90:	f7fd fe0e 	bl	80156b0 <memp_free>
  }
}
 8017a94:	bf00      	nop
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8017a9c:	b480      	push	{r7}
 8017a9e:	b083      	sub	sp, #12
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	78fa      	ldrb	r2, [r7, #3]
 8017aac:	755a      	strb	r2, [r3, #21]
}
 8017aae:	bf00      	nop
 8017ab0:	370c      	adds	r7, #12
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bc80      	pop	{r7}
 8017ab6:	4770      	bx	lr

08017ab8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017ac0:	2003      	movs	r0, #3
 8017ac2:	f7fd fda3 	bl	801560c <memp_malloc>
 8017ac6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d101      	bne.n	8017ad2 <tcp_seg_copy+0x1a>
    return NULL;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	e00a      	b.n	8017ae8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017ad2:	2210      	movs	r2, #16
 8017ad4:	6879      	ldr	r1, [r7, #4]
 8017ad6:	68f8      	ldr	r0, [r7, #12]
 8017ad8:	f00a fead 	bl	8022836 <memcpy>
  pbuf_ref(cseg->p);
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	685b      	ldr	r3, [r3, #4]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7fe fc39 	bl	8016358 <pbuf_ref>
  return cseg;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3710      	adds	r7, #16
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
 8017afc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d009      	beq.n	8017b18 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	891b      	ldrh	r3, [r3, #8]
 8017b08:	4619      	mov	r1, r3
 8017b0a:	68b8      	ldr	r0, [r7, #8]
 8017b0c:	f7ff fb6a 	bl	80171e4 <tcp_recved>
    pbuf_free(p);
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f7fe fb77 	bl	8016204 <pbuf_free>
 8017b16:	e008      	b.n	8017b2a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8017b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d104      	bne.n	8017b2a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8017b20:	68b8      	ldr	r0, [r7, #8]
 8017b22:	f7ff f8ef 	bl	8016d04 <tcp_close>
 8017b26:	4603      	mov	r3, r0
 8017b28:	e000      	b.n	8017b2c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8017b2a:	2300      	movs	r3, #0
}
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	3710      	adds	r7, #16
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}

08017b34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b086      	sub	sp, #24
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	db01      	blt.n	8017b4a <tcp_kill_prio+0x16>
 8017b46:	79fb      	ldrb	r3, [r7, #7]
 8017b48:	e000      	b.n	8017b4c <tcp_kill_prio+0x18>
 8017b4a:	237f      	movs	r3, #127	@ 0x7f
 8017b4c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017b52:	2300      	movs	r3, #0
 8017b54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b56:	4b16      	ldr	r3, [pc, #88]	@ (8017bb0 <tcp_kill_prio+0x7c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	617b      	str	r3, [r7, #20]
 8017b5c:	e01a      	b.n	8017b94 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	7d5b      	ldrb	r3, [r3, #21]
 8017b62:	7afa      	ldrb	r2, [r7, #11]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d312      	bcc.n	8017b8e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017b68:	4b12      	ldr	r3, [pc, #72]	@ (8017bb4 <tcp_kill_prio+0x80>)
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	6a1b      	ldr	r3, [r3, #32]
 8017b70:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d80a      	bhi.n	8017b8e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8017b78:	4b0e      	ldr	r3, [pc, #56]	@ (8017bb4 <tcp_kill_prio+0x80>)
 8017b7a:	681a      	ldr	r2, [r3, #0]
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	6a1b      	ldr	r3, [r3, #32]
 8017b80:	1ad3      	subs	r3, r2, r3
 8017b82:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	7d5b      	ldrb	r3, [r3, #21]
 8017b8c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	68db      	ldr	r3, [r3, #12]
 8017b92:	617b      	str	r3, [r7, #20]
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1e1      	bne.n	8017b5e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d002      	beq.n	8017ba6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017ba0:	6938      	ldr	r0, [r7, #16]
 8017ba2:	f7ff f979 	bl	8016e98 <tcp_abort>
  }
}
 8017ba6:	bf00      	nop
 8017ba8:	3718      	adds	r7, #24
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	2000bd88 	.word	0x2000bd88
 8017bb4:	2000bd7c 	.word	0x2000bd7c

08017bb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017bc2:	79fb      	ldrb	r3, [r7, #7]
 8017bc4:	2b08      	cmp	r3, #8
 8017bc6:	d009      	beq.n	8017bdc <tcp_kill_state+0x24>
 8017bc8:	79fb      	ldrb	r3, [r7, #7]
 8017bca:	2b09      	cmp	r3, #9
 8017bcc:	d006      	beq.n	8017bdc <tcp_kill_state+0x24>
 8017bce:	4b1a      	ldr	r3, [pc, #104]	@ (8017c38 <tcp_kill_state+0x80>)
 8017bd0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017bd4:	4919      	ldr	r1, [pc, #100]	@ (8017c3c <tcp_kill_state+0x84>)
 8017bd6:	481a      	ldr	r0, [pc, #104]	@ (8017c40 <tcp_kill_state+0x88>)
 8017bd8:	f00a fb32 	bl	8022240 <iprintf>

  inactivity = 0;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017be0:	2300      	movs	r3, #0
 8017be2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017be4:	4b17      	ldr	r3, [pc, #92]	@ (8017c44 <tcp_kill_state+0x8c>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	617b      	str	r3, [r7, #20]
 8017bea:	e017      	b.n	8017c1c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	7d1b      	ldrb	r3, [r3, #20]
 8017bf0:	79fa      	ldrb	r2, [r7, #7]
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d10f      	bne.n	8017c16 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017bf6:	4b14      	ldr	r3, [pc, #80]	@ (8017c48 <tcp_kill_state+0x90>)
 8017bf8:	681a      	ldr	r2, [r3, #0]
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	6a1b      	ldr	r3, [r3, #32]
 8017bfe:	1ad3      	subs	r3, r2, r3
 8017c00:	68fa      	ldr	r2, [r7, #12]
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d807      	bhi.n	8017c16 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017c06:	4b10      	ldr	r3, [pc, #64]	@ (8017c48 <tcp_kill_state+0x90>)
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	6a1b      	ldr	r3, [r3, #32]
 8017c0e:	1ad3      	subs	r3, r2, r3
 8017c10:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	617b      	str	r3, [r7, #20]
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d1e4      	bne.n	8017bec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d003      	beq.n	8017c30 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017c28:	2100      	movs	r1, #0
 8017c2a:	6938      	ldr	r0, [r7, #16]
 8017c2c:	f7ff f882 	bl	8016d34 <tcp_abandon>
  }
}
 8017c30:	bf00      	nop
 8017c32:	3718      	adds	r7, #24
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	08026684 	.word	0x08026684
 8017c3c:	08026994 	.word	0x08026994
 8017c40:	080266c0 	.word	0x080266c0
 8017c44:	2000bd88 	.word	0x2000bd88
 8017c48:	2000bd7c 	.word	0x2000bd7c

08017c4c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017c52:	2300      	movs	r3, #0
 8017c54:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017c56:	2300      	movs	r3, #0
 8017c58:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c5a:	4b12      	ldr	r3, [pc, #72]	@ (8017ca4 <tcp_kill_timewait+0x58>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	60fb      	str	r3, [r7, #12]
 8017c60:	e012      	b.n	8017c88 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017c62:	4b11      	ldr	r3, [pc, #68]	@ (8017ca8 <tcp_kill_timewait+0x5c>)
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	6a1b      	ldr	r3, [r3, #32]
 8017c6a:	1ad3      	subs	r3, r2, r3
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d807      	bhi.n	8017c82 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017c72:	4b0d      	ldr	r3, [pc, #52]	@ (8017ca8 <tcp_kill_timewait+0x5c>)
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6a1b      	ldr	r3, [r3, #32]
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	68db      	ldr	r3, [r3, #12]
 8017c86:	60fb      	str	r3, [r7, #12]
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d1e9      	bne.n	8017c62 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d002      	beq.n	8017c9a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017c94:	68b8      	ldr	r0, [r7, #8]
 8017c96:	f7ff f8ff 	bl	8016e98 <tcp_abort>
  }
}
 8017c9a:	bf00      	nop
 8017c9c:	3710      	adds	r7, #16
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	2000bd8c 	.word	0x2000bd8c
 8017ca8:	2000bd7c 	.word	0x2000bd7c

08017cac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b084      	sub	sp, #16
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	f7fd fca8 	bl	801560c <memp_malloc>
 8017cbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d14c      	bne.n	8017d5e <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017cc4:	f7ff ffc2 	bl	8017c4c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cc8:	2001      	movs	r0, #1
 8017cca:	f7fd fc9f 	bl	801560c <memp_malloc>
 8017cce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d139      	bne.n	8017d4a <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017cd6:	2009      	movs	r0, #9
 8017cd8:	f7ff ff6e 	bl	8017bb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cdc:	2001      	movs	r0, #1
 8017cde:	f7fd fc95 	bl	801560c <memp_malloc>
 8017ce2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d125      	bne.n	8017d36 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017cea:	2008      	movs	r0, #8
 8017cec:	f7ff ff64 	bl	8017bb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cf0:	2001      	movs	r0, #1
 8017cf2:	f7fd fc8b 	bl	801560c <memp_malloc>
 8017cf6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d111      	bne.n	8017d22 <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017cfe:	79fb      	ldrb	r3, [r7, #7]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7ff ff17 	bl	8017b34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d06:	2001      	movs	r0, #1
 8017d08:	f7fd fc80 	bl	801560c <memp_malloc>
 8017d0c:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d006      	beq.n	8017d22 <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d14:	4b36      	ldr	r3, [pc, #216]	@ (8017df0 <tcp_alloc+0x144>)
 8017d16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d1a:	881a      	ldrh	r2, [r3, #0]
 8017d1c:	3a01      	subs	r2, #1
 8017d1e:	b292      	uxth	r2, r2
 8017d20:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d006      	beq.n	8017d36 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d28:	4b31      	ldr	r3, [pc, #196]	@ (8017df0 <tcp_alloc+0x144>)
 8017d2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d2e:	881a      	ldrh	r2, [r3, #0]
 8017d30:	3a01      	subs	r2, #1
 8017d32:	b292      	uxth	r2, r2
 8017d34:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d006      	beq.n	8017d4a <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8017df0 <tcp_alloc+0x144>)
 8017d3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d42:	881a      	ldrh	r2, [r3, #0]
 8017d44:	3a01      	subs	r2, #1
 8017d46:	b292      	uxth	r2, r2
 8017d48:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d006      	beq.n	8017d5e <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d50:	4b27      	ldr	r3, [pc, #156]	@ (8017df0 <tcp_alloc+0x144>)
 8017d52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d56:	881a      	ldrh	r2, [r3, #0]
 8017d58:	3a01      	subs	r2, #1
 8017d5a:	b292      	uxth	r2, r2
 8017d5c:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d03f      	beq.n	8017de4 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017d64:	2298      	movs	r2, #152	@ 0x98
 8017d66:	2100      	movs	r1, #0
 8017d68:	68f8      	ldr	r0, [r7, #12]
 8017d6a:	f00a fc3f 	bl	80225ec <memset>
    pcb->prio = prio;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	79fa      	ldrb	r2, [r7, #7]
 8017d72:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017d7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	22ff      	movs	r2, #255	@ 0xff
 8017d92:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017d9a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	2206      	movs	r2, #6
 8017da0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2206      	movs	r2, #6
 8017da8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017db0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2201      	movs	r2, #1
 8017db6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8017dba:	4b0e      	ldr	r3, [pc, #56]	@ (8017df4 <tcp_alloc+0x148>)
 8017dbc:	681a      	ldr	r2, [r3, #0]
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8017df8 <tcp_alloc+0x14c>)
 8017dc4:	781a      	ldrb	r2, [r3, #0]
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	4a09      	ldr	r2, [pc, #36]	@ (8017dfc <tcp_alloc+0x150>)
 8017dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	4a08      	ldr	r2, [pc, #32]	@ (8017e00 <tcp_alloc+0x154>)
 8017de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017de4:	68fb      	ldr	r3, [r7, #12]
}
 8017de6:	4618      	mov	r0, r3
 8017de8:	3710      	adds	r7, #16
 8017dea:	46bd      	mov	sp, r7
 8017dec:	bd80      	pop	{r7, pc}
 8017dee:	bf00      	nop
 8017df0:	2000bbe4 	.word	0x2000bbe4
 8017df4:	2000bd7c 	.word	0x2000bd7c
 8017df8:	2000bd92 	.word	0x2000bd92
 8017dfc:	08017af1 	.word	0x08017af1
 8017e00:	006ddd00 	.word	0x006ddd00

08017e04 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017e0e:	2040      	movs	r0, #64	@ 0x40
 8017e10:	f7ff ff4c 	bl	8017cac <tcp_alloc>
 8017e14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017e16:	68fb      	ldr	r3, [r7, #12]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3710      	adds	r7, #16
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017e20:	b480      	push	{r7}
 8017e22:	b083      	sub	sp, #12
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
 8017e28:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d002      	beq.n	8017e36 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	611a      	str	r2, [r3, #16]
  }
}
 8017e36:	bf00      	nop
 8017e38:	370c      	adds	r7, #12
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bc80      	pop	{r7}
 8017e3e:	4770      	bx	lr

08017e40 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00e      	beq.n	8017e6e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	7d1b      	ldrb	r3, [r3, #20]
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	d106      	bne.n	8017e66 <tcp_recv+0x26>
 8017e58:	4b07      	ldr	r3, [pc, #28]	@ (8017e78 <tcp_recv+0x38>)
 8017e5a:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 8017e5e:	4907      	ldr	r1, [pc, #28]	@ (8017e7c <tcp_recv+0x3c>)
 8017e60:	4807      	ldr	r0, [pc, #28]	@ (8017e80 <tcp_recv+0x40>)
 8017e62:	f00a f9ed 	bl	8022240 <iprintf>
    pcb->recv = recv;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	683a      	ldr	r2, [r7, #0]
 8017e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8017e6e:	bf00      	nop
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
 8017e76:	bf00      	nop
 8017e78:	08026684 	.word	0x08026684
 8017e7c:	080269a4 	.word	0x080269a4
 8017e80:	080266c0 	.word	0x080266c0

08017e84 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b082      	sub	sp, #8
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d00d      	beq.n	8017eb0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	7d1b      	ldrb	r3, [r3, #20]
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d106      	bne.n	8017eaa <tcp_sent+0x26>
 8017e9c:	4b06      	ldr	r3, [pc, #24]	@ (8017eb8 <tcp_sent+0x34>)
 8017e9e:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8017ea2:	4906      	ldr	r1, [pc, #24]	@ (8017ebc <tcp_sent+0x38>)
 8017ea4:	4806      	ldr	r0, [pc, #24]	@ (8017ec0 <tcp_sent+0x3c>)
 8017ea6:	f00a f9cb 	bl	8022240 <iprintf>
    pcb->sent = sent;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	683a      	ldr	r2, [r7, #0]
 8017eae:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8017eb0:	bf00      	nop
 8017eb2:	3708      	adds	r7, #8
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	08026684 	.word	0x08026684
 8017ebc:	080269cc 	.word	0x080269cc
 8017ec0:	080266c0 	.word	0x080266c0

08017ec4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b082      	sub	sp, #8
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
 8017ecc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d00e      	beq.n	8017ef2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	7d1b      	ldrb	r3, [r3, #20]
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	d106      	bne.n	8017eea <tcp_err+0x26>
 8017edc:	4b07      	ldr	r3, [pc, #28]	@ (8017efc <tcp_err+0x38>)
 8017ede:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 8017ee2:	4907      	ldr	r1, [pc, #28]	@ (8017f00 <tcp_err+0x3c>)
 8017ee4:	4807      	ldr	r0, [pc, #28]	@ (8017f04 <tcp_err+0x40>)
 8017ee6:	f00a f9ab 	bl	8022240 <iprintf>
    pcb->errf = err;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	683a      	ldr	r2, [r7, #0]
 8017eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8017ef2:	bf00      	nop
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
 8017efa:	bf00      	nop
 8017efc:	08026684 	.word	0x08026684
 8017f00:	080269f4 	.word	0x080269f4
 8017f04:	080266c0 	.word	0x080266c0

08017f08 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b085      	sub	sp, #20
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d008      	beq.n	8017f2a <tcp_accept+0x22>
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	7d1b      	ldrb	r3, [r3, #20]
 8017f1c:	2b01      	cmp	r3, #1
 8017f1e:	d104      	bne.n	8017f2a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	683a      	ldr	r2, [r7, #0]
 8017f28:	619a      	str	r2, [r3, #24]
  }
}
 8017f2a:	bf00      	nop
 8017f2c:	3714      	adds	r7, #20
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bc80      	pop	{r7}
 8017f32:	4770      	bx	lr

08017f34 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b084      	sub	sp, #16
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	7d1b      	ldrb	r3, [r3, #20]
 8017f46:	2b01      	cmp	r3, #1
 8017f48:	d106      	bne.n	8017f58 <tcp_poll+0x24>
 8017f4a:	4b09      	ldr	r3, [pc, #36]	@ (8017f70 <tcp_poll+0x3c>)
 8017f4c:	f240 7203 	movw	r2, #1795	@ 0x703
 8017f50:	4908      	ldr	r1, [pc, #32]	@ (8017f74 <tcp_poll+0x40>)
 8017f52:	4809      	ldr	r0, [pc, #36]	@ (8017f78 <tcp_poll+0x44>)
 8017f54:	f00a f974 	bl	8022240 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	68ba      	ldr	r2, [r7, #8]
 8017f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	79fa      	ldrb	r2, [r7, #7]
 8017f64:	771a      	strb	r2, [r3, #28]
}
 8017f66:	bf00      	nop
 8017f68:	3710      	adds	r7, #16
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	08026684 	.word	0x08026684
 8017f74:	08026a1c 	.word	0x08026a1c
 8017f78:	080266c0 	.word	0x080266c0

08017f7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	7d1b      	ldrb	r3, [r3, #20]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d034      	beq.n	8017ff6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017f90:	2b0a      	cmp	r3, #10
 8017f92:	d030      	beq.n	8017ff6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d02c      	beq.n	8017ff6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d007      	beq.n	8017fb4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f7fe f92b 	bl	8016204 <pbuf_free>
      pcb->refused_data = NULL;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7ff fd42 	bl	8017a42 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7ff fd36 	bl	8017a42 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7ff fd31 	bl	8017a42 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	669a      	str	r2, [r3, #104]	@ 0x68
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8017ff6:	bf00      	nop
 8017ff8:	3708      	adds	r7, #8
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
	...

08018000 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b084      	sub	sp, #16
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	683a      	ldr	r2, [r7, #0]
 8018010:	429a      	cmp	r2, r3
 8018012:	d105      	bne.n	8018020 <tcp_pcb_remove+0x20>
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	68da      	ldr	r2, [r3, #12]
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	601a      	str	r2, [r3, #0]
 801801e:	e013      	b.n	8018048 <tcp_pcb_remove+0x48>
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	60fb      	str	r3, [r7, #12]
 8018026:	e00c      	b.n	8018042 <tcp_pcb_remove+0x42>
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	683a      	ldr	r2, [r7, #0]
 801802e:	429a      	cmp	r2, r3
 8018030:	d104      	bne.n	801803c <tcp_pcb_remove+0x3c>
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	68da      	ldr	r2, [r3, #12]
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	60da      	str	r2, [r3, #12]
 801803a:	e005      	b.n	8018048 <tcp_pcb_remove+0x48>
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	60fb      	str	r3, [r7, #12]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d1ef      	bne.n	8018028 <tcp_pcb_remove+0x28>
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	2200      	movs	r2, #0
 801804c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801804e:	6838      	ldr	r0, [r7, #0]
 8018050:	f7ff ff94 	bl	8017f7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	7d1b      	ldrb	r3, [r3, #20]
 8018058:	2b0a      	cmp	r3, #10
 801805a:	d013      	beq.n	8018084 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8018060:	2b01      	cmp	r3, #1
 8018062:	d00f      	beq.n	8018084 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	7e9b      	ldrb	r3, [r3, #26]
 8018068:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801806c:	2b00      	cmp	r3, #0
 801806e:	d009      	beq.n	8018084 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	7e9b      	ldrb	r3, [r3, #26]
 8018074:	f043 0302 	orr.w	r3, r3, #2
 8018078:	b2da      	uxtb	r2, r3
 801807a:	683b      	ldr	r3, [r7, #0]
 801807c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801807e:	6838      	ldr	r0, [r7, #0]
 8018080:	f003 fa6a 	bl	801b558 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	7d1b      	ldrb	r3, [r3, #20]
 8018088:	2b01      	cmp	r3, #1
 801808a:	d020      	beq.n	80180ce <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018090:	2b00      	cmp	r3, #0
 8018092:	d006      	beq.n	80180a2 <tcp_pcb_remove+0xa2>
 8018094:	4b13      	ldr	r3, [pc, #76]	@ (80180e4 <tcp_pcb_remove+0xe4>)
 8018096:	f240 7253 	movw	r2, #1875	@ 0x753
 801809a:	4913      	ldr	r1, [pc, #76]	@ (80180e8 <tcp_pcb_remove+0xe8>)
 801809c:	4813      	ldr	r0, [pc, #76]	@ (80180ec <tcp_pcb_remove+0xec>)
 801809e:	f00a f8cf 	bl	8022240 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d006      	beq.n	80180b8 <tcp_pcb_remove+0xb8>
 80180aa:	4b0e      	ldr	r3, [pc, #56]	@ (80180e4 <tcp_pcb_remove+0xe4>)
 80180ac:	f240 7254 	movw	r2, #1876	@ 0x754
 80180b0:	490f      	ldr	r1, [pc, #60]	@ (80180f0 <tcp_pcb_remove+0xf0>)
 80180b2:	480e      	ldr	r0, [pc, #56]	@ (80180ec <tcp_pcb_remove+0xec>)
 80180b4:	f00a f8c4 	bl	8022240 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d006      	beq.n	80180ce <tcp_pcb_remove+0xce>
 80180c0:	4b08      	ldr	r3, [pc, #32]	@ (80180e4 <tcp_pcb_remove+0xe4>)
 80180c2:	f240 7256 	movw	r2, #1878	@ 0x756
 80180c6:	490b      	ldr	r1, [pc, #44]	@ (80180f4 <tcp_pcb_remove+0xf4>)
 80180c8:	4808      	ldr	r0, [pc, #32]	@ (80180ec <tcp_pcb_remove+0xec>)
 80180ca:	f00a f8b9 	bl	8022240 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80180ce:	683b      	ldr	r3, [r7, #0]
 80180d0:	2200      	movs	r2, #0
 80180d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	2200      	movs	r2, #0
 80180d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80180da:	bf00      	nop
 80180dc:	3710      	adds	r7, #16
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}
 80180e2:	bf00      	nop
 80180e4:	08026684 	.word	0x08026684
 80180e8:	08026a3c 	.word	0x08026a3c
 80180ec:	080266c0 	.word	0x080266c0
 80180f0:	08026a54 	.word	0x08026a54
 80180f4:	08026a70 	.word	0x08026a70

080180f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80180f8:	b480      	push	{r7}
 80180fa:	b083      	sub	sp, #12
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018100:	4b06      	ldr	r3, [pc, #24]	@ (801811c <tcp_next_iss+0x24>)
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	4b06      	ldr	r3, [pc, #24]	@ (8018120 <tcp_next_iss+0x28>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4413      	add	r3, r2
 801810a:	4a04      	ldr	r2, [pc, #16]	@ (801811c <tcp_next_iss+0x24>)
 801810c:	6013      	str	r3, [r2, #0]
  return iss;
 801810e:	4b03      	ldr	r3, [pc, #12]	@ (801811c <tcp_next_iss+0x24>)
 8018110:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8018112:	4618      	mov	r0, r3
 8018114:	370c      	adds	r7, #12
 8018116:	46bd      	mov	sp, r7
 8018118:	bc80      	pop	{r7}
 801811a:	4770      	bx	lr
 801811c:	2000011c 	.word	0x2000011c
 8018120:	2000bd7c 	.word	0x2000bd7c

08018124 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b084      	sub	sp, #16
 8018128:	af00      	add	r7, sp, #0
 801812a:	4603      	mov	r3, r0
 801812c:	6039      	str	r1, [r7, #0]
 801812e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8018130:	6838      	ldr	r0, [r7, #0]
 8018132:	f007 fdd5 	bl	801fce0 <ip4_route>
 8018136:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d101      	bne.n	8018142 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801813e:	88fb      	ldrh	r3, [r7, #6]
 8018140:	e010      	b.n	8018164 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018146:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8018148:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d008      	beq.n	8018162 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8018150:	897b      	ldrh	r3, [r7, #10]
 8018152:	3b28      	subs	r3, #40	@ 0x28
 8018154:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018156:	893a      	ldrh	r2, [r7, #8]
 8018158:	88fb      	ldrh	r3, [r7, #6]
 801815a:	4293      	cmp	r3, r2
 801815c:	bf28      	it	cs
 801815e:	4613      	movcs	r3, r2
 8018160:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8018162:	88fb      	ldrh	r3, [r7, #6]
}
 8018164:	4618      	mov	r0, r3
 8018166:	3710      	adds	r7, #16
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018176:	683b      	ldr	r3, [r7, #0]
 8018178:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801817a:	e011      	b.n	80181a0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	429a      	cmp	r2, r3
 8018186:	d108      	bne.n	801819a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801818e:	68f8      	ldr	r0, [r7, #12]
 8018190:	f7fe fe82 	bl	8016e98 <tcp_abort>
      pcb = next;
 8018194:	68bb      	ldr	r3, [r7, #8]
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	e002      	b.n	80181a0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d1ea      	bne.n	801817c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80181a6:	bf00      	nop
 80181a8:	bf00      	nop
 80181aa:	3710      	adds	r7, #16
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d02c      	beq.n	801821a <tcp_netif_ip_addr_changed+0x6a>
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d028      	beq.n	801821a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80181c8:	4b16      	ldr	r3, [pc, #88]	@ (8018224 <tcp_netif_ip_addr_changed+0x74>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	4619      	mov	r1, r3
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f7ff ffcc 	bl	801816c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80181d4:	4b14      	ldr	r3, [pc, #80]	@ (8018228 <tcp_netif_ip_addr_changed+0x78>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4619      	mov	r1, r3
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	f7ff ffc6 	bl	801816c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d019      	beq.n	801821a <tcp_netif_ip_addr_changed+0x6a>
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d015      	beq.n	801821a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80181ee:	4b0f      	ldr	r3, [pc, #60]	@ (801822c <tcp_netif_ip_addr_changed+0x7c>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	60fb      	str	r3, [r7, #12]
 80181f4:	e00e      	b.n	8018214 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	68db      	ldr	r3, [r3, #12]
 80181fa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	681a      	ldr	r2, [r3, #0]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	429a      	cmp	r2, r3
 8018206:	d103      	bne.n	8018210 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	60fb      	str	r3, [r7, #12]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d1ed      	bne.n	80181f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801821a:	bf00      	nop
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	2000bd88 	.word	0x2000bd88
 8018228:	2000bd80 	.word	0x2000bd80
 801822c:	2000bd84 	.word	0x2000bd84

08018230 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018230:	b590      	push	{r4, r7, lr}
 8018232:	b08b      	sub	sp, #44	@ 0x2c
 8018234:	af02      	add	r7, sp, #8
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 801823a:	4b99      	ldr	r3, [pc, #612]	@ (80184a0 <tcp_input+0x270>)
 801823c:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8018240:	3301      	adds	r3, #1
 8018242:	b29a      	uxth	r2, r3
 8018244:	4b96      	ldr	r3, [pc, #600]	@ (80184a0 <tcp_input+0x270>)
 8018246:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 801824a:	4b95      	ldr	r3, [pc, #596]	@ (80184a0 <tcp_input+0x270>)
 801824c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8018250:	3301      	adds	r3, #1
 8018252:	4a93      	ldr	r2, [pc, #588]	@ (80184a0 <tcp_input+0x270>)
 8018254:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	685b      	ldr	r3, [r3, #4]
 801825c:	4a91      	ldr	r2, [pc, #580]	@ (80184a4 <tcp_input+0x274>)
 801825e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	895b      	ldrh	r3, [r3, #10]
 8018264:	2b13      	cmp	r3, #19
 8018266:	d808      	bhi.n	801827a <tcp_input+0x4a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8018268:	4b8d      	ldr	r3, [pc, #564]	@ (80184a0 <tcp_input+0x270>)
 801826a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801826e:	3301      	adds	r3, #1
 8018270:	b29a      	uxth	r2, r3
 8018272:	4b8b      	ldr	r3, [pc, #556]	@ (80184a0 <tcp_input+0x270>)
 8018274:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8018278:	e3e0      	b.n	8018a3c <tcp_input+0x80c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801827a:	4b8b      	ldr	r3, [pc, #556]	@ (80184a8 <tcp_input+0x278>)
 801827c:	695b      	ldr	r3, [r3, #20]
 801827e:	4a8a      	ldr	r2, [pc, #552]	@ (80184a8 <tcp_input+0x278>)
 8018280:	6812      	ldr	r2, [r2, #0]
 8018282:	4611      	mov	r1, r2
 8018284:	4618      	mov	r0, r3
 8018286:	f008 f88f 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d105      	bne.n	801829c <tcp_input+0x6c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018290:	4b85      	ldr	r3, [pc, #532]	@ (80184a8 <tcp_input+0x278>)
 8018292:	695b      	ldr	r3, [r3, #20]
 8018294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018298:	2be0      	cmp	r3, #224	@ 0xe0
 801829a:	d108      	bne.n	80182ae <tcp_input+0x7e>
    TCP_STATS_INC(tcp.proterr);
 801829c:	4b80      	ldr	r3, [pc, #512]	@ (80184a0 <tcp_input+0x270>)
 801829e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80182a2:	3301      	adds	r3, #1
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	4b7e      	ldr	r3, [pc, #504]	@ (80184a0 <tcp_input+0x270>)
 80182a8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 80182ac:	e3c6      	b.n	8018a3c <tcp_input+0x80c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80182ae:	4b7d      	ldr	r3, [pc, #500]	@ (80184a4 <tcp_input+0x274>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	899b      	ldrh	r3, [r3, #12]
 80182b4:	b29b      	uxth	r3, r3
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7fc fcfe 	bl	8014cb8 <lwip_htons>
 80182bc:	4603      	mov	r3, r0
 80182be:	0b1b      	lsrs	r3, r3, #12
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	009b      	lsls	r3, r3, #2
 80182c6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80182c8:	7cbb      	ldrb	r3, [r7, #18]
 80182ca:	2b13      	cmp	r3, #19
 80182cc:	d905      	bls.n	80182da <tcp_input+0xaa>
 80182ce:	7cbb      	ldrb	r3, [r7, #18]
 80182d0:	b29a      	uxth	r2, r3
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	891b      	ldrh	r3, [r3, #8]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d908      	bls.n	80182ec <tcp_input+0xbc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80182da:	4b71      	ldr	r3, [pc, #452]	@ (80184a0 <tcp_input+0x270>)
 80182dc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80182e0:	3301      	adds	r3, #1
 80182e2:	b29a      	uxth	r2, r3
 80182e4:	4b6e      	ldr	r3, [pc, #440]	@ (80184a0 <tcp_input+0x270>)
 80182e6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80182ea:	e3a7      	b.n	8018a3c <tcp_input+0x80c>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80182ec:	7cbb      	ldrb	r3, [r7, #18]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	3b14      	subs	r3, #20
 80182f2:	b29a      	uxth	r2, r3
 80182f4:	4b6d      	ldr	r3, [pc, #436]	@ (80184ac <tcp_input+0x27c>)
 80182f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80182f8:	4b6d      	ldr	r3, [pc, #436]	@ (80184b0 <tcp_input+0x280>)
 80182fa:	2200      	movs	r2, #0
 80182fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	895a      	ldrh	r2, [r3, #10]
 8018302:	7cbb      	ldrb	r3, [r7, #18]
 8018304:	b29b      	uxth	r3, r3
 8018306:	429a      	cmp	r2, r3
 8018308:	d30d      	bcc.n	8018326 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801830a:	4b68      	ldr	r3, [pc, #416]	@ (80184ac <tcp_input+0x27c>)
 801830c:	881a      	ldrh	r2, [r3, #0]
 801830e:	4b69      	ldr	r3, [pc, #420]	@ (80184b4 <tcp_input+0x284>)
 8018310:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8018312:	7cbb      	ldrb	r3, [r7, #18]
 8018314:	b29b      	uxth	r3, r3
 8018316:	425b      	negs	r3, r3
 8018318:	b29b      	uxth	r3, r3
 801831a:	b21b      	sxth	r3, r3
 801831c:	4619      	mov	r1, r3
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f7fd ff4c 	bl	80161bc <pbuf_header>
 8018324:	e05d      	b.n	80183e2 <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d105      	bne.n	801833a <tcp_input+0x10a>
 801832e:	4b62      	ldr	r3, [pc, #392]	@ (80184b8 <tcp_input+0x288>)
 8018330:	22b2      	movs	r2, #178	@ 0xb2
 8018332:	4962      	ldr	r1, [pc, #392]	@ (80184bc <tcp_input+0x28c>)
 8018334:	4862      	ldr	r0, [pc, #392]	@ (80184c0 <tcp_input+0x290>)
 8018336:	f009 ff83 	bl	8022240 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801833a:	f06f 0113 	mvn.w	r1, #19
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7fd ff3c 	bl	80161bc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	895a      	ldrh	r2, [r3, #10]
 8018348:	4b5a      	ldr	r3, [pc, #360]	@ (80184b4 <tcp_input+0x284>)
 801834a:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801834c:	4b57      	ldr	r3, [pc, #348]	@ (80184ac <tcp_input+0x27c>)
 801834e:	881a      	ldrh	r2, [r3, #0]
 8018350:	4b58      	ldr	r3, [pc, #352]	@ (80184b4 <tcp_input+0x284>)
 8018352:	881b      	ldrh	r3, [r3, #0]
 8018354:	1ad3      	subs	r3, r2, r3
 8018356:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8018358:	4b56      	ldr	r3, [pc, #344]	@ (80184b4 <tcp_input+0x284>)
 801835a:	881b      	ldrh	r3, [r3, #0]
 801835c:	425b      	negs	r3, r3
 801835e:	b29b      	uxth	r3, r3
 8018360:	b21b      	sxth	r3, r3
 8018362:	4619      	mov	r1, r3
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f7fd ff29 	bl	80161bc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	895b      	ldrh	r3, [r3, #10]
 8018370:	8a3a      	ldrh	r2, [r7, #16]
 8018372:	429a      	cmp	r2, r3
 8018374:	d908      	bls.n	8018388 <tcp_input+0x158>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8018376:	4b4a      	ldr	r3, [pc, #296]	@ (80184a0 <tcp_input+0x270>)
 8018378:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801837c:	3301      	adds	r3, #1
 801837e:	b29a      	uxth	r2, r3
 8018380:	4b47      	ldr	r3, [pc, #284]	@ (80184a0 <tcp_input+0x270>)
 8018382:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8018386:	e359      	b.n	8018a3c <tcp_input+0x80c>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	4a48      	ldr	r2, [pc, #288]	@ (80184b0 <tcp_input+0x280>)
 8018390:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681a      	ldr	r2, [r3, #0]
 8018396:	8a3b      	ldrh	r3, [r7, #16]
 8018398:	425b      	negs	r3, r3
 801839a:	b29b      	uxth	r3, r3
 801839c:	b21b      	sxth	r3, r3
 801839e:	4619      	mov	r1, r3
 80183a0:	4610      	mov	r0, r2
 80183a2:	f7fd ff0b 	bl	80161bc <pbuf_header>
    p->tot_len -= opt2len;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	891a      	ldrh	r2, [r3, #8]
 80183aa:	8a3b      	ldrh	r3, [r7, #16]
 80183ac:	1ad3      	subs	r3, r2, r3
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	895b      	ldrh	r3, [r3, #10]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d005      	beq.n	80183c8 <tcp_input+0x198>
 80183bc:	4b3e      	ldr	r3, [pc, #248]	@ (80184b8 <tcp_input+0x288>)
 80183be:	22cf      	movs	r2, #207	@ 0xcf
 80183c0:	4940      	ldr	r1, [pc, #256]	@ (80184c4 <tcp_input+0x294>)
 80183c2:	483f      	ldr	r0, [pc, #252]	@ (80184c0 <tcp_input+0x290>)
 80183c4:	f009 ff3c 	bl	8022240 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	891a      	ldrh	r2, [r3, #8]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	891b      	ldrh	r3, [r3, #8]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d005      	beq.n	80183e2 <tcp_input+0x1b2>
 80183d6:	4b38      	ldr	r3, [pc, #224]	@ (80184b8 <tcp_input+0x288>)
 80183d8:	22d0      	movs	r2, #208	@ 0xd0
 80183da:	493b      	ldr	r1, [pc, #236]	@ (80184c8 <tcp_input+0x298>)
 80183dc:	4838      	ldr	r0, [pc, #224]	@ (80184c0 <tcp_input+0x290>)
 80183de:	f009 ff2f 	bl	8022240 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80183e2:	4b30      	ldr	r3, [pc, #192]	@ (80184a4 <tcp_input+0x274>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	881b      	ldrh	r3, [r3, #0]
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	4a2e      	ldr	r2, [pc, #184]	@ (80184a4 <tcp_input+0x274>)
 80183ec:	6814      	ldr	r4, [r2, #0]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7fc fc62 	bl	8014cb8 <lwip_htons>
 80183f4:	4603      	mov	r3, r0
 80183f6:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80183f8:	4b2a      	ldr	r3, [pc, #168]	@ (80184a4 <tcp_input+0x274>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	885b      	ldrh	r3, [r3, #2]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	4a28      	ldr	r2, [pc, #160]	@ (80184a4 <tcp_input+0x274>)
 8018402:	6814      	ldr	r4, [r2, #0]
 8018404:	4618      	mov	r0, r3
 8018406:	f7fc fc57 	bl	8014cb8 <lwip_htons>
 801840a:	4603      	mov	r3, r0
 801840c:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801840e:	4b25      	ldr	r3, [pc, #148]	@ (80184a4 <tcp_input+0x274>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	4a23      	ldr	r2, [pc, #140]	@ (80184a4 <tcp_input+0x274>)
 8018416:	6814      	ldr	r4, [r2, #0]
 8018418:	4618      	mov	r0, r3
 801841a:	f7fc fc5a 	bl	8014cd2 <lwip_htonl>
 801841e:	4603      	mov	r3, r0
 8018420:	6063      	str	r3, [r4, #4]
 8018422:	6863      	ldr	r3, [r4, #4]
 8018424:	4a29      	ldr	r2, [pc, #164]	@ (80184cc <tcp_input+0x29c>)
 8018426:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018428:	4b1e      	ldr	r3, [pc, #120]	@ (80184a4 <tcp_input+0x274>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	689b      	ldr	r3, [r3, #8]
 801842e:	4a1d      	ldr	r2, [pc, #116]	@ (80184a4 <tcp_input+0x274>)
 8018430:	6814      	ldr	r4, [r2, #0]
 8018432:	4618      	mov	r0, r3
 8018434:	f7fc fc4d 	bl	8014cd2 <lwip_htonl>
 8018438:	4603      	mov	r3, r0
 801843a:	60a3      	str	r3, [r4, #8]
 801843c:	68a3      	ldr	r3, [r4, #8]
 801843e:	4a24      	ldr	r2, [pc, #144]	@ (80184d0 <tcp_input+0x2a0>)
 8018440:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018442:	4b18      	ldr	r3, [pc, #96]	@ (80184a4 <tcp_input+0x274>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	89db      	ldrh	r3, [r3, #14]
 8018448:	b29b      	uxth	r3, r3
 801844a:	4a16      	ldr	r2, [pc, #88]	@ (80184a4 <tcp_input+0x274>)
 801844c:	6814      	ldr	r4, [r2, #0]
 801844e:	4618      	mov	r0, r3
 8018450:	f7fc fc32 	bl	8014cb8 <lwip_htons>
 8018454:	4603      	mov	r3, r0
 8018456:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018458:	4b12      	ldr	r3, [pc, #72]	@ (80184a4 <tcp_input+0x274>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	899b      	ldrh	r3, [r3, #12]
 801845e:	b29b      	uxth	r3, r3
 8018460:	4618      	mov	r0, r3
 8018462:	f7fc fc29 	bl	8014cb8 <lwip_htons>
 8018466:	4603      	mov	r3, r0
 8018468:	b2db      	uxtb	r3, r3
 801846a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801846e:	b2da      	uxtb	r2, r3
 8018470:	4b18      	ldr	r3, [pc, #96]	@ (80184d4 <tcp_input+0x2a4>)
 8018472:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	891b      	ldrh	r3, [r3, #8]
 8018478:	4a16      	ldr	r2, [pc, #88]	@ (80184d4 <tcp_input+0x2a4>)
 801847a:	7812      	ldrb	r2, [r2, #0]
 801847c:	f002 0203 	and.w	r2, r2, #3
 8018480:	2a00      	cmp	r2, #0
 8018482:	bf14      	ite	ne
 8018484:	2201      	movne	r2, #1
 8018486:	2200      	moveq	r2, #0
 8018488:	b2d2      	uxtb	r2, r2
 801848a:	4413      	add	r3, r2
 801848c:	b29a      	uxth	r2, r3
 801848e:	4b12      	ldr	r3, [pc, #72]	@ (80184d8 <tcp_input+0x2a8>)
 8018490:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018492:	2300      	movs	r3, #0
 8018494:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018496:	4b11      	ldr	r3, [pc, #68]	@ (80184dc <tcp_input+0x2ac>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	61fb      	str	r3, [r7, #28]
 801849c:	e08d      	b.n	80185ba <tcp_input+0x38a>
 801849e:	bf00      	nop
 80184a0:	2000bbe4 	.word	0x2000bbe4
 80184a4:	2000bda4 	.word	0x2000bda4
 80184a8:	200085fc 	.word	0x200085fc
 80184ac:	2000bda8 	.word	0x2000bda8
 80184b0:	2000bdac 	.word	0x2000bdac
 80184b4:	2000bdaa 	.word	0x2000bdaa
 80184b8:	08026a88 	.word	0x08026a88
 80184bc:	08026abc 	.word	0x08026abc
 80184c0:	08026acc 	.word	0x08026acc
 80184c4:	08026af4 	.word	0x08026af4
 80184c8:	08026b00 	.word	0x08026b00
 80184cc:	2000bdb4 	.word	0x2000bdb4
 80184d0:	2000bdb8 	.word	0x2000bdb8
 80184d4:	2000bdc0 	.word	0x2000bdc0
 80184d8:	2000bdbe 	.word	0x2000bdbe
 80184dc:	2000bd88 	.word	0x2000bd88
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	7d1b      	ldrb	r3, [r3, #20]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d105      	bne.n	80184f4 <tcp_input+0x2c4>
 80184e8:	4b77      	ldr	r3, [pc, #476]	@ (80186c8 <tcp_input+0x498>)
 80184ea:	22e2      	movs	r2, #226	@ 0xe2
 80184ec:	4977      	ldr	r1, [pc, #476]	@ (80186cc <tcp_input+0x49c>)
 80184ee:	4878      	ldr	r0, [pc, #480]	@ (80186d0 <tcp_input+0x4a0>)
 80184f0:	f009 fea6 	bl	8022240 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80184f4:	69fb      	ldr	r3, [r7, #28]
 80184f6:	7d1b      	ldrb	r3, [r3, #20]
 80184f8:	2b0a      	cmp	r3, #10
 80184fa:	d105      	bne.n	8018508 <tcp_input+0x2d8>
 80184fc:	4b72      	ldr	r3, [pc, #456]	@ (80186c8 <tcp_input+0x498>)
 80184fe:	22e3      	movs	r2, #227	@ 0xe3
 8018500:	4974      	ldr	r1, [pc, #464]	@ (80186d4 <tcp_input+0x4a4>)
 8018502:	4873      	ldr	r0, [pc, #460]	@ (80186d0 <tcp_input+0x4a0>)
 8018504:	f009 fe9c 	bl	8022240 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	7d1b      	ldrb	r3, [r3, #20]
 801850c:	2b01      	cmp	r3, #1
 801850e:	d105      	bne.n	801851c <tcp_input+0x2ec>
 8018510:	4b6d      	ldr	r3, [pc, #436]	@ (80186c8 <tcp_input+0x498>)
 8018512:	22e4      	movs	r2, #228	@ 0xe4
 8018514:	4970      	ldr	r1, [pc, #448]	@ (80186d8 <tcp_input+0x4a8>)
 8018516:	486e      	ldr	r0, [pc, #440]	@ (80186d0 <tcp_input+0x4a0>)
 8018518:	f009 fe92 	bl	8022240 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	8b1a      	ldrh	r2, [r3, #24]
 8018520:	4b6e      	ldr	r3, [pc, #440]	@ (80186dc <tcp_input+0x4ac>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	881b      	ldrh	r3, [r3, #0]
 8018526:	b29b      	uxth	r3, r3
 8018528:	429a      	cmp	r2, r3
 801852a:	d141      	bne.n	80185b0 <tcp_input+0x380>
        pcb->local_port == tcphdr->dest &&
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	8ada      	ldrh	r2, [r3, #22]
 8018530:	4b6a      	ldr	r3, [pc, #424]	@ (80186dc <tcp_input+0x4ac>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	885b      	ldrh	r3, [r3, #2]
 8018536:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018538:	429a      	cmp	r2, r3
 801853a:	d139      	bne.n	80185b0 <tcp_input+0x380>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801853c:	69fb      	ldr	r3, [r7, #28]
 801853e:	685a      	ldr	r2, [r3, #4]
 8018540:	4b67      	ldr	r3, [pc, #412]	@ (80186e0 <tcp_input+0x4b0>)
 8018542:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018544:	429a      	cmp	r2, r3
 8018546:	d133      	bne.n	80185b0 <tcp_input+0x380>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018548:	69fb      	ldr	r3, [r7, #28]
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	4b64      	ldr	r3, [pc, #400]	@ (80186e0 <tcp_input+0x4b0>)
 801854e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018550:	429a      	cmp	r2, r3
 8018552:	d12d      	bne.n	80185b0 <tcp_input+0x380>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	69fa      	ldr	r2, [r7, #28]
 801855a:	429a      	cmp	r2, r3
 801855c:	d105      	bne.n	801856a <tcp_input+0x33a>
 801855e:	4b5a      	ldr	r3, [pc, #360]	@ (80186c8 <tcp_input+0x498>)
 8018560:	22ec      	movs	r2, #236	@ 0xec
 8018562:	4960      	ldr	r1, [pc, #384]	@ (80186e4 <tcp_input+0x4b4>)
 8018564:	485a      	ldr	r0, [pc, #360]	@ (80186d0 <tcp_input+0x4a0>)
 8018566:	f009 fe6b 	bl	8022240 <iprintf>
      if (prev != NULL) {
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d00b      	beq.n	8018588 <tcp_input+0x358>
        prev->next = pcb->next;
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	68da      	ldr	r2, [r3, #12]
 8018574:	69bb      	ldr	r3, [r7, #24]
 8018576:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018578:	4b5b      	ldr	r3, [pc, #364]	@ (80186e8 <tcp_input+0x4b8>)
 801857a:	681a      	ldr	r2, [r3, #0]
 801857c:	69fb      	ldr	r3, [r7, #28]
 801857e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018580:	4a59      	ldr	r2, [pc, #356]	@ (80186e8 <tcp_input+0x4b8>)
 8018582:	69fb      	ldr	r3, [r7, #28]
 8018584:	6013      	str	r3, [r2, #0]
 8018586:	e007      	b.n	8018598 <tcp_input+0x368>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8018588:	4b58      	ldr	r3, [pc, #352]	@ (80186ec <tcp_input+0x4bc>)
 801858a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801858e:	3301      	adds	r3, #1
 8018590:	b29a      	uxth	r2, r3
 8018592:	4b56      	ldr	r3, [pc, #344]	@ (80186ec <tcp_input+0x4bc>)
 8018594:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018598:	69fb      	ldr	r3, [r7, #28]
 801859a:	68db      	ldr	r3, [r3, #12]
 801859c:	69fa      	ldr	r2, [r7, #28]
 801859e:	429a      	cmp	r2, r3
 80185a0:	d10f      	bne.n	80185c2 <tcp_input+0x392>
 80185a2:	4b49      	ldr	r3, [pc, #292]	@ (80186c8 <tcp_input+0x498>)
 80185a4:	22f4      	movs	r2, #244	@ 0xf4
 80185a6:	4952      	ldr	r1, [pc, #328]	@ (80186f0 <tcp_input+0x4c0>)
 80185a8:	4849      	ldr	r0, [pc, #292]	@ (80186d0 <tcp_input+0x4a0>)
 80185aa:	f009 fe49 	bl	8022240 <iprintf>
      break;
 80185ae:	e008      	b.n	80185c2 <tcp_input+0x392>
    }
    prev = pcb;
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80185b4:	69fb      	ldr	r3, [r7, #28]
 80185b6:	68db      	ldr	r3, [r3, #12]
 80185b8:	61fb      	str	r3, [r7, #28]
 80185ba:	69fb      	ldr	r3, [r7, #28]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d18f      	bne.n	80184e0 <tcp_input+0x2b0>
 80185c0:	e000      	b.n	80185c4 <tcp_input+0x394>
      break;
 80185c2:	bf00      	nop
  }

  if (pcb == NULL) {
 80185c4:	69fb      	ldr	r3, [r7, #28]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	f040 809a 	bne.w	8018700 <tcp_input+0x4d0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185cc:	4b49      	ldr	r3, [pc, #292]	@ (80186f4 <tcp_input+0x4c4>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	61fb      	str	r3, [r7, #28]
 80185d2:	e02f      	b.n	8018634 <tcp_input+0x404>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	7d1b      	ldrb	r3, [r3, #20]
 80185d8:	2b0a      	cmp	r3, #10
 80185da:	d005      	beq.n	80185e8 <tcp_input+0x3b8>
 80185dc:	4b3a      	ldr	r3, [pc, #232]	@ (80186c8 <tcp_input+0x498>)
 80185de:	22fe      	movs	r2, #254	@ 0xfe
 80185e0:	4945      	ldr	r1, [pc, #276]	@ (80186f8 <tcp_input+0x4c8>)
 80185e2:	483b      	ldr	r0, [pc, #236]	@ (80186d0 <tcp_input+0x4a0>)
 80185e4:	f009 fe2c 	bl	8022240 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80185e8:	69fb      	ldr	r3, [r7, #28]
 80185ea:	8b1a      	ldrh	r2, [r3, #24]
 80185ec:	4b3b      	ldr	r3, [pc, #236]	@ (80186dc <tcp_input+0x4ac>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	881b      	ldrh	r3, [r3, #0]
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d11a      	bne.n	801862e <tcp_input+0x3fe>
          pcb->local_port == tcphdr->dest &&
 80185f8:	69fb      	ldr	r3, [r7, #28]
 80185fa:	8ada      	ldrh	r2, [r3, #22]
 80185fc:	4b37      	ldr	r3, [pc, #220]	@ (80186dc <tcp_input+0x4ac>)
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	885b      	ldrh	r3, [r3, #2]
 8018602:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018604:	429a      	cmp	r2, r3
 8018606:	d112      	bne.n	801862e <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018608:	69fb      	ldr	r3, [r7, #28]
 801860a:	685a      	ldr	r2, [r3, #4]
 801860c:	4b34      	ldr	r3, [pc, #208]	@ (80186e0 <tcp_input+0x4b0>)
 801860e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018610:	429a      	cmp	r2, r3
 8018612:	d10c      	bne.n	801862e <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	4b31      	ldr	r3, [pc, #196]	@ (80186e0 <tcp_input+0x4b0>)
 801861a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801861c:	429a      	cmp	r2, r3
 801861e:	d106      	bne.n	801862e <tcp_input+0x3fe>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8018620:	69f8      	ldr	r0, [r7, #28]
 8018622:	f000 fb5b 	bl	8018cdc <tcp_timewait_input>
        pbuf_free(p);
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	f7fd fdec 	bl	8016204 <pbuf_free>
        return;
 801862c:	e21a      	b.n	8018a64 <tcp_input+0x834>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801862e:	69fb      	ldr	r3, [r7, #28]
 8018630:	68db      	ldr	r3, [r3, #12]
 8018632:	61fb      	str	r3, [r7, #28]
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d1cc      	bne.n	80185d4 <tcp_input+0x3a4>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801863a:	2300      	movs	r3, #0
 801863c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801863e:	4b2f      	ldr	r3, [pc, #188]	@ (80186fc <tcp_input+0x4cc>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	617b      	str	r3, [r7, #20]
 8018644:	e019      	b.n	801867a <tcp_input+0x44a>
      if (lpcb->local_port == tcphdr->dest) {
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	8ada      	ldrh	r2, [r3, #22]
 801864a:	4b24      	ldr	r3, [pc, #144]	@ (80186dc <tcp_input+0x4ac>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	885b      	ldrh	r3, [r3, #2]
 8018650:	b29b      	uxth	r3, r3
 8018652:	429a      	cmp	r2, r3
 8018654:	d10c      	bne.n	8018670 <tcp_input+0x440>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	681a      	ldr	r2, [r3, #0]
 801865a:	4b21      	ldr	r3, [pc, #132]	@ (80186e0 <tcp_input+0x4b0>)
 801865c:	695b      	ldr	r3, [r3, #20]
 801865e:	429a      	cmp	r2, r3
 8018660:	d00f      	beq.n	8018682 <tcp_input+0x452>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d00d      	beq.n	8018684 <tcp_input+0x454>
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d009      	beq.n	8018684 <tcp_input+0x454>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	617b      	str	r3, [r7, #20]
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d1e2      	bne.n	8018646 <tcp_input+0x416>
 8018680:	e000      	b.n	8018684 <tcp_input+0x454>
            break;
 8018682:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d03a      	beq.n	8018700 <tcp_input+0x4d0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d00b      	beq.n	80186a8 <tcp_input+0x478>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	68da      	ldr	r2, [r3, #12]
 8018694:	69bb      	ldr	r3, [r7, #24]
 8018696:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018698:	4b18      	ldr	r3, [pc, #96]	@ (80186fc <tcp_input+0x4cc>)
 801869a:	681a      	ldr	r2, [r3, #0]
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80186a0:	4a16      	ldr	r2, [pc, #88]	@ (80186fc <tcp_input+0x4cc>)
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	6013      	str	r3, [r2, #0]
 80186a6:	e007      	b.n	80186b8 <tcp_input+0x488>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80186a8:	4b10      	ldr	r3, [pc, #64]	@ (80186ec <tcp_input+0x4bc>)
 80186aa:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80186ae:	3301      	adds	r3, #1
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	4b0e      	ldr	r3, [pc, #56]	@ (80186ec <tcp_input+0x4bc>)
 80186b4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80186b8:	6978      	ldr	r0, [r7, #20]
 80186ba:	f000 fa1d 	bl	8018af8 <tcp_listen_input>
      pbuf_free(p);
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f7fd fda0 	bl	8016204 <pbuf_free>
      return;
 80186c4:	e1ce      	b.n	8018a64 <tcp_input+0x834>
 80186c6:	bf00      	nop
 80186c8:	08026a88 	.word	0x08026a88
 80186cc:	08026b20 	.word	0x08026b20
 80186d0:	08026acc 	.word	0x08026acc
 80186d4:	08026b48 	.word	0x08026b48
 80186d8:	08026b74 	.word	0x08026b74
 80186dc:	2000bda4 	.word	0x2000bda4
 80186e0:	200085fc 	.word	0x200085fc
 80186e4:	08026b9c 	.word	0x08026b9c
 80186e8:	2000bd88 	.word	0x2000bd88
 80186ec:	2000bbe4 	.word	0x2000bbe4
 80186f0:	08026bc8 	.word	0x08026bc8
 80186f4:	2000bd8c 	.word	0x2000bd8c
 80186f8:	08026bf4 	.word	0x08026bf4
 80186fc:	2000bd84 	.word	0x2000bd84
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8018700:	69fb      	ldr	r3, [r7, #28]
 8018702:	2b00      	cmp	r3, #0
 8018704:	f000 8164 	beq.w	80189d0 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018708:	4b9a      	ldr	r3, [pc, #616]	@ (8018974 <tcp_input+0x744>)
 801870a:	2200      	movs	r2, #0
 801870c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	891a      	ldrh	r2, [r3, #8]
 8018712:	4b98      	ldr	r3, [pc, #608]	@ (8018974 <tcp_input+0x744>)
 8018714:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018716:	4a97      	ldr	r2, [pc, #604]	@ (8018974 <tcp_input+0x744>)
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801871c:	4b96      	ldr	r3, [pc, #600]	@ (8018978 <tcp_input+0x748>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	4a94      	ldr	r2, [pc, #592]	@ (8018974 <tcp_input+0x744>)
 8018722:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018724:	4b95      	ldr	r3, [pc, #596]	@ (801897c <tcp_input+0x74c>)
 8018726:	2200      	movs	r2, #0
 8018728:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801872a:	4b95      	ldr	r3, [pc, #596]	@ (8018980 <tcp_input+0x750>)
 801872c:	2200      	movs	r2, #0
 801872e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018730:	4b94      	ldr	r3, [pc, #592]	@ (8018984 <tcp_input+0x754>)
 8018732:	2200      	movs	r2, #0
 8018734:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018736:	4b94      	ldr	r3, [pc, #592]	@ (8018988 <tcp_input+0x758>)
 8018738:	781b      	ldrb	r3, [r3, #0]
 801873a:	f003 0308 	and.w	r3, r3, #8
 801873e:	2b00      	cmp	r3, #0
 8018740:	d006      	beq.n	8018750 <tcp_input+0x520>
      p->flags |= PBUF_FLAG_PUSH;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	7b5b      	ldrb	r3, [r3, #13]
 8018746:	f043 0301 	orr.w	r3, r3, #1
 801874a:	b2da      	uxtb	r2, r3
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018754:	2b00      	cmp	r3, #0
 8018756:	d025      	beq.n	80187a4 <tcp_input+0x574>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018758:	69f8      	ldr	r0, [r7, #28]
 801875a:	f7ff f909 	bl	8017970 <tcp_process_refused_data>
 801875e:	4603      	mov	r3, r0
 8018760:	f113 0f0d 	cmn.w	r3, #13
 8018764:	d007      	beq.n	8018776 <tcp_input+0x546>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801876a:	2b00      	cmp	r3, #0
 801876c:	d01a      	beq.n	80187a4 <tcp_input+0x574>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801876e:	4b87      	ldr	r3, [pc, #540]	@ (801898c <tcp_input+0x75c>)
 8018770:	881b      	ldrh	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d016      	beq.n	80187a4 <tcp_input+0x574>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <tcp_input+0x554>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801877e:	69f8      	ldr	r0, [r7, #28]
 8018780:	f002 fe8e 	bl	801b4a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8018784:	4b82      	ldr	r3, [pc, #520]	@ (8018990 <tcp_input+0x760>)
 8018786:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801878a:	3301      	adds	r3, #1
 801878c:	b29a      	uxth	r2, r3
 801878e:	4b80      	ldr	r3, [pc, #512]	@ (8018990 <tcp_input+0x760>)
 8018790:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 8018794:	4b7e      	ldr	r3, [pc, #504]	@ (8018990 <tcp_input+0x760>)
 8018796:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801879a:	3301      	adds	r3, #1
 801879c:	4a7c      	ldr	r2, [pc, #496]	@ (8018990 <tcp_input+0x760>)
 801879e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        goto aborted;
 80187a2:	e102      	b.n	80189aa <tcp_input+0x77a>
      }
    }
    tcp_input_pcb = pcb;
 80187a4:	4a7b      	ldr	r2, [pc, #492]	@ (8018994 <tcp_input+0x764>)
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80187aa:	69f8      	ldr	r0, [r7, #28]
 80187ac:	f000 fafe 	bl	8018dac <tcp_process>
 80187b0:	4603      	mov	r3, r0
 80187b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80187b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187b8:	f113 0f0d 	cmn.w	r3, #13
 80187bc:	f000 80d0 	beq.w	8018960 <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 80187c0:	4b6f      	ldr	r3, [pc, #444]	@ (8018980 <tcp_input+0x750>)
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	f003 0308 	and.w	r3, r3, #8
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d016      	beq.n	80187fa <tcp_input+0x5ca>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d008      	beq.n	80187e8 <tcp_input+0x5b8>
 80187d6:	69fb      	ldr	r3, [r7, #28]
 80187d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80187dc:	69fa      	ldr	r2, [r7, #28]
 80187de:	6912      	ldr	r2, [r2, #16]
 80187e0:	f06f 010d 	mvn.w	r1, #13
 80187e4:	4610      	mov	r0, r2
 80187e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80187e8:	69f9      	ldr	r1, [r7, #28]
 80187ea:	486b      	ldr	r0, [pc, #428]	@ (8018998 <tcp_input+0x768>)
 80187ec:	f7ff fc08 	bl	8018000 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80187f0:	69f9      	ldr	r1, [r7, #28]
 80187f2:	2001      	movs	r0, #1
 80187f4:	f7fc ff5c 	bl	80156b0 <memp_free>
 80187f8:	e0d7      	b.n	80189aa <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 80187fa:	2300      	movs	r3, #0
 80187fc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80187fe:	4b61      	ldr	r3, [pc, #388]	@ (8018984 <tcp_input+0x754>)
 8018800:	881b      	ldrh	r3, [r3, #0]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d01b      	beq.n	801883e <tcp_input+0x60e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018806:	4b5f      	ldr	r3, [pc, #380]	@ (8018984 <tcp_input+0x754>)
 8018808:	881b      	ldrh	r3, [r3, #0]
 801880a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018810:	2b00      	cmp	r3, #0
 8018812:	d009      	beq.n	8018828 <tcp_input+0x5f8>
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018818:	69fa      	ldr	r2, [r7, #28]
 801881a:	6910      	ldr	r0, [r2, #16]
 801881c:	89fa      	ldrh	r2, [r7, #14]
 801881e:	69f9      	ldr	r1, [r7, #28]
 8018820:	4798      	blx	r3
 8018822:	4603      	mov	r3, r0
 8018824:	74fb      	strb	r3, [r7, #19]
 8018826:	e001      	b.n	801882c <tcp_input+0x5fc>
 8018828:	2300      	movs	r3, #0
 801882a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801882c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018830:	f113 0f0d 	cmn.w	r3, #13
 8018834:	f000 8096 	beq.w	8018964 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018838:	4b52      	ldr	r3, [pc, #328]	@ (8018984 <tcp_input+0x754>)
 801883a:	2200      	movs	r2, #0
 801883c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801883e:	69f8      	ldr	r0, [r7, #28]
 8018840:	f000 f928 	bl	8018a94 <tcp_input_delayed_close>
 8018844:	4603      	mov	r3, r0
 8018846:	2b00      	cmp	r3, #0
 8018848:	f040 808e 	bne.w	8018968 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801884c:	4b4b      	ldr	r3, [pc, #300]	@ (801897c <tcp_input+0x74c>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d041      	beq.n	80188d8 <tcp_input+0x6a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018854:	69fb      	ldr	r3, [r7, #28]
 8018856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018858:	2b00      	cmp	r3, #0
 801885a:	d006      	beq.n	801886a <tcp_input+0x63a>
 801885c:	4b4f      	ldr	r3, [pc, #316]	@ (801899c <tcp_input+0x76c>)
 801885e:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8018862:	494f      	ldr	r1, [pc, #316]	@ (80189a0 <tcp_input+0x770>)
 8018864:	484f      	ldr	r0, [pc, #316]	@ (80189a4 <tcp_input+0x774>)
 8018866:	f009 fceb 	bl	8022240 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801886a:	69fb      	ldr	r3, [r7, #28]
 801886c:	7e9b      	ldrb	r3, [r3, #26]
 801886e:	f003 0310 	and.w	r3, r3, #16
 8018872:	2b00      	cmp	r3, #0
 8018874:	d008      	beq.n	8018888 <tcp_input+0x658>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018876:	4b41      	ldr	r3, [pc, #260]	@ (801897c <tcp_input+0x74c>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	4618      	mov	r0, r3
 801887c:	f7fd fcc2 	bl	8016204 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018880:	69f8      	ldr	r0, [r7, #28]
 8018882:	f7fe fb09 	bl	8016e98 <tcp_abort>
            goto aborted;
 8018886:	e090      	b.n	80189aa <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018888:	69fb      	ldr	r3, [r7, #28]
 801888a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801888e:	2b00      	cmp	r3, #0
 8018890:	d00c      	beq.n	80188ac <tcp_input+0x67c>
 8018892:	69fb      	ldr	r3, [r7, #28]
 8018894:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	6918      	ldr	r0, [r3, #16]
 801889c:	4b37      	ldr	r3, [pc, #220]	@ (801897c <tcp_input+0x74c>)
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	2300      	movs	r3, #0
 80188a2:	69f9      	ldr	r1, [r7, #28]
 80188a4:	47a0      	blx	r4
 80188a6:	4603      	mov	r3, r0
 80188a8:	74fb      	strb	r3, [r7, #19]
 80188aa:	e008      	b.n	80188be <tcp_input+0x68e>
 80188ac:	4b33      	ldr	r3, [pc, #204]	@ (801897c <tcp_input+0x74c>)
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	2300      	movs	r3, #0
 80188b2:	69f9      	ldr	r1, [r7, #28]
 80188b4:	2000      	movs	r0, #0
 80188b6:	f7ff f91b 	bl	8017af0 <tcp_recv_null>
 80188ba:	4603      	mov	r3, r0
 80188bc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80188be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188c2:	f113 0f0d 	cmn.w	r3, #13
 80188c6:	d051      	beq.n	801896c <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80188c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d003      	beq.n	80188d8 <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80188d0:	4b2a      	ldr	r3, [pc, #168]	@ (801897c <tcp_input+0x74c>)
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	69fb      	ldr	r3, [r7, #28]
 80188d6:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80188d8:	4b29      	ldr	r3, [pc, #164]	@ (8018980 <tcp_input+0x750>)
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	f003 0320 	and.w	r3, r3, #32
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d030      	beq.n	8018946 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d009      	beq.n	8018900 <tcp_input+0x6d0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80188ec:	69fb      	ldr	r3, [r7, #28]
 80188ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188f0:	7b5a      	ldrb	r2, [r3, #13]
 80188f2:	69fb      	ldr	r3, [r7, #28]
 80188f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188f6:	f042 0220 	orr.w	r2, r2, #32
 80188fa:	b2d2      	uxtb	r2, r2
 80188fc:	735a      	strb	r2, [r3, #13]
 80188fe:	e022      	b.n	8018946 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018900:	69fb      	ldr	r3, [r7, #28]
 8018902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018904:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8018908:	d005      	beq.n	8018916 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801890e:	3301      	adds	r3, #1
 8018910:	b29a      	uxth	r2, r3
 8018912:	69fb      	ldr	r3, [r7, #28]
 8018914:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801891c:	2b00      	cmp	r3, #0
 801891e:	d00b      	beq.n	8018938 <tcp_input+0x708>
 8018920:	69fb      	ldr	r3, [r7, #28]
 8018922:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018926:	69fb      	ldr	r3, [r7, #28]
 8018928:	6918      	ldr	r0, [r3, #16]
 801892a:	2300      	movs	r3, #0
 801892c:	2200      	movs	r2, #0
 801892e:	69f9      	ldr	r1, [r7, #28]
 8018930:	47a0      	blx	r4
 8018932:	4603      	mov	r3, r0
 8018934:	74fb      	strb	r3, [r7, #19]
 8018936:	e001      	b.n	801893c <tcp_input+0x70c>
 8018938:	2300      	movs	r3, #0
 801893a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801893c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018940:	f113 0f0d 	cmn.w	r3, #13
 8018944:	d014      	beq.n	8018970 <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018946:	4b13      	ldr	r3, [pc, #76]	@ (8018994 <tcp_input+0x764>)
 8018948:	2200      	movs	r2, #0
 801894a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801894c:	69f8      	ldr	r0, [r7, #28]
 801894e:	f000 f8a1 	bl	8018a94 <tcp_input_delayed_close>
 8018952:	4603      	mov	r3, r0
 8018954:	2b00      	cmp	r3, #0
 8018956:	d127      	bne.n	80189a8 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018958:	69f8      	ldr	r0, [r7, #28]
 801895a:	f002 fdfd 	bl	801b558 <tcp_output>
 801895e:	e024      	b.n	80189aa <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018960:	bf00      	nop
 8018962:	e022      	b.n	80189aa <tcp_input+0x77a>
              goto aborted;
 8018964:	bf00      	nop
 8018966:	e020      	b.n	80189aa <tcp_input+0x77a>
          goto aborted;
 8018968:	bf00      	nop
 801896a:	e01e      	b.n	80189aa <tcp_input+0x77a>
            goto aborted;
 801896c:	bf00      	nop
 801896e:	e01c      	b.n	80189aa <tcp_input+0x77a>
              goto aborted;
 8018970:	bf00      	nop
 8018972:	e01a      	b.n	80189aa <tcp_input+0x77a>
 8018974:	2000bd94 	.word	0x2000bd94
 8018978:	2000bda4 	.word	0x2000bda4
 801897c:	2000bdc4 	.word	0x2000bdc4
 8018980:	2000bdc1 	.word	0x2000bdc1
 8018984:	2000bdbc 	.word	0x2000bdbc
 8018988:	2000bdc0 	.word	0x2000bdc0
 801898c:	2000bdbe 	.word	0x2000bdbe
 8018990:	2000bbe4 	.word	0x2000bbe4
 8018994:	2000bdc8 	.word	0x2000bdc8
 8018998:	2000bd88 	.word	0x2000bd88
 801899c:	08026a88 	.word	0x08026a88
 80189a0:	08026c24 	.word	0x08026c24
 80189a4:	08026acc 	.word	0x08026acc
          goto aborted;
 80189a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80189aa:	4b30      	ldr	r3, [pc, #192]	@ (8018a6c <tcp_input+0x83c>)
 80189ac:	2200      	movs	r2, #0
 80189ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80189b0:	4b2f      	ldr	r3, [pc, #188]	@ (8018a70 <tcp_input+0x840>)
 80189b2:	2200      	movs	r2, #0
 80189b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80189b6:	4b2f      	ldr	r3, [pc, #188]	@ (8018a74 <tcp_input+0x844>)
 80189b8:	685b      	ldr	r3, [r3, #4]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d051      	beq.n	8018a62 <tcp_input+0x832>
    {
      pbuf_free(inseg.p);
 80189be:	4b2d      	ldr	r3, [pc, #180]	@ (8018a74 <tcp_input+0x844>)
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	4618      	mov	r0, r3
 80189c4:	f7fd fc1e 	bl	8016204 <pbuf_free>
      inseg.p = NULL;
 80189c8:	4b2a      	ldr	r3, [pc, #168]	@ (8018a74 <tcp_input+0x844>)
 80189ca:	2200      	movs	r2, #0
 80189cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80189ce:	e048      	b.n	8018a62 <tcp_input+0x832>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80189d0:	4b29      	ldr	r3, [pc, #164]	@ (8018a78 <tcp_input+0x848>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	899b      	ldrh	r3, [r3, #12]
 80189d6:	b29b      	uxth	r3, r3
 80189d8:	4618      	mov	r0, r3
 80189da:	f7fc f96d 	bl	8014cb8 <lwip_htons>
 80189de:	4603      	mov	r3, r0
 80189e0:	f003 0304 	and.w	r3, r3, #4
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d125      	bne.n	8018a34 <tcp_input+0x804>
      TCP_STATS_INC(tcp.proterr);
 80189e8:	4b24      	ldr	r3, [pc, #144]	@ (8018a7c <tcp_input+0x84c>)
 80189ea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80189ee:	3301      	adds	r3, #1
 80189f0:	b29a      	uxth	r2, r3
 80189f2:	4b22      	ldr	r3, [pc, #136]	@ (8018a7c <tcp_input+0x84c>)
 80189f4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 80189f8:	4b20      	ldr	r3, [pc, #128]	@ (8018a7c <tcp_input+0x84c>)
 80189fa:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80189fe:	3301      	adds	r3, #1
 8018a00:	b29a      	uxth	r2, r3
 8018a02:	4b1e      	ldr	r3, [pc, #120]	@ (8018a7c <tcp_input+0x84c>)
 8018a04:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a08:	4b1d      	ldr	r3, [pc, #116]	@ (8018a80 <tcp_input+0x850>)
 8018a0a:	6818      	ldr	r0, [r3, #0]
 8018a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8018a84 <tcp_input+0x854>)
 8018a0e:	881b      	ldrh	r3, [r3, #0]
 8018a10:	461a      	mov	r2, r3
 8018a12:	4b1d      	ldr	r3, [pc, #116]	@ (8018a88 <tcp_input+0x858>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a18:	4b17      	ldr	r3, [pc, #92]	@ (8018a78 <tcp_input+0x848>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a1c:	885b      	ldrh	r3, [r3, #2]
 8018a1e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a20:	4a15      	ldr	r2, [pc, #84]	@ (8018a78 <tcp_input+0x848>)
 8018a22:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a24:	8812      	ldrh	r2, [r2, #0]
 8018a26:	b292      	uxth	r2, r2
 8018a28:	9201      	str	r2, [sp, #4]
 8018a2a:	9300      	str	r3, [sp, #0]
 8018a2c:	4b17      	ldr	r3, [pc, #92]	@ (8018a8c <tcp_input+0x85c>)
 8018a2e:	4a18      	ldr	r2, [pc, #96]	@ (8018a90 <tcp_input+0x860>)
 8018a30:	f003 f82a 	bl	801ba88 <tcp_rst>
    pbuf_free(p);
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f7fd fbe5 	bl	8016204 <pbuf_free>
  return;
 8018a3a:	e012      	b.n	8018a62 <tcp_input+0x832>
dropped:
  TCP_STATS_INC(tcp.drop);
 8018a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8018a7c <tcp_input+0x84c>)
 8018a3e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018a42:	3301      	adds	r3, #1
 8018a44:	b29a      	uxth	r2, r3
 8018a46:	4b0d      	ldr	r3, [pc, #52]	@ (8018a7c <tcp_input+0x84c>)
 8018a48:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 8018a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8018a7c <tcp_input+0x84c>)
 8018a4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018a52:	3301      	adds	r3, #1
 8018a54:	4a09      	ldr	r2, [pc, #36]	@ (8018a7c <tcp_input+0x84c>)
 8018a56:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  pbuf_free(p);
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f7fd fbd2 	bl	8016204 <pbuf_free>
 8018a60:	e000      	b.n	8018a64 <tcp_input+0x834>
  return;
 8018a62:	bf00      	nop
}
 8018a64:	3724      	adds	r7, #36	@ 0x24
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd90      	pop	{r4, r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	2000bdc8 	.word	0x2000bdc8
 8018a70:	2000bdc4 	.word	0x2000bdc4
 8018a74:	2000bd94 	.word	0x2000bd94
 8018a78:	2000bda4 	.word	0x2000bda4
 8018a7c:	2000bbe4 	.word	0x2000bbe4
 8018a80:	2000bdb8 	.word	0x2000bdb8
 8018a84:	2000bdbe 	.word	0x2000bdbe
 8018a88:	2000bdb4 	.word	0x2000bdb4
 8018a8c:	2000860c 	.word	0x2000860c
 8018a90:	20008610 	.word	0x20008610

08018a94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8018a9c:	4b14      	ldr	r3, [pc, #80]	@ (8018af0 <tcp_input_delayed_close+0x5c>)
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	f003 0310 	and.w	r3, r3, #16
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d01d      	beq.n	8018ae4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	7e9b      	ldrb	r3, [r3, #26]
 8018aac:	f003 0310 	and.w	r3, r3, #16
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d10d      	bne.n	8018ad0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d008      	beq.n	8018ad0 <tcp_input_delayed_close+0x3c>
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018ac4:	687a      	ldr	r2, [r7, #4]
 8018ac6:	6912      	ldr	r2, [r2, #16]
 8018ac8:	f06f 010e 	mvn.w	r1, #14
 8018acc:	4610      	mov	r0, r2
 8018ace:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018ad0:	6879      	ldr	r1, [r7, #4]
 8018ad2:	4808      	ldr	r0, [pc, #32]	@ (8018af4 <tcp_input_delayed_close+0x60>)
 8018ad4:	f7ff fa94 	bl	8018000 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8018ad8:	6879      	ldr	r1, [r7, #4]
 8018ada:	2001      	movs	r0, #1
 8018adc:	f7fc fde8 	bl	80156b0 <memp_free>
    return 1;
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	e000      	b.n	8018ae6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8018ae4:	2300      	movs	r3, #0
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	2000bdc1 	.word	0x2000bdc1
 8018af4:	2000bd88 	.word	0x2000bd88

08018af8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b088      	sub	sp, #32
 8018afc:	af02      	add	r7, sp, #8
 8018afe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018b00:	4b6b      	ldr	r3, [pc, #428]	@ (8018cb0 <tcp_listen_input+0x1b8>)
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	f003 0304 	and.w	r3, r3, #4
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	f040 80ca 	bne.w	8018ca2 <tcp_listen_input+0x1aa>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018b0e:	4b68      	ldr	r3, [pc, #416]	@ (8018cb0 <tcp_listen_input+0x1b8>)
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	f003 0310 	and.w	r3, r3, #16
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d016      	beq.n	8018b48 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b1a:	4b66      	ldr	r3, [pc, #408]	@ (8018cb4 <tcp_listen_input+0x1bc>)
 8018b1c:	6818      	ldr	r0, [r3, #0]
 8018b1e:	4b66      	ldr	r3, [pc, #408]	@ (8018cb8 <tcp_listen_input+0x1c0>)
 8018b20:	881b      	ldrh	r3, [r3, #0]
 8018b22:	461a      	mov	r2, r3
 8018b24:	4b65      	ldr	r3, [pc, #404]	@ (8018cbc <tcp_listen_input+0x1c4>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b2a:	4b65      	ldr	r3, [pc, #404]	@ (8018cc0 <tcp_listen_input+0x1c8>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b2e:	885b      	ldrh	r3, [r3, #2]
 8018b30:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b32:	4a63      	ldr	r2, [pc, #396]	@ (8018cc0 <tcp_listen_input+0x1c8>)
 8018b34:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b36:	8812      	ldrh	r2, [r2, #0]
 8018b38:	b292      	uxth	r2, r2
 8018b3a:	9201      	str	r2, [sp, #4]
 8018b3c:	9300      	str	r3, [sp, #0]
 8018b3e:	4b61      	ldr	r3, [pc, #388]	@ (8018cc4 <tcp_listen_input+0x1cc>)
 8018b40:	4a61      	ldr	r2, [pc, #388]	@ (8018cc8 <tcp_listen_input+0x1d0>)
 8018b42:	f002 ffa1 	bl	801ba88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018b46:	e0ae      	b.n	8018ca6 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 8018b48:	4b59      	ldr	r3, [pc, #356]	@ (8018cb0 <tcp_listen_input+0x1b8>)
 8018b4a:	781b      	ldrb	r3, [r3, #0]
 8018b4c:	f003 0302 	and.w	r3, r3, #2
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	f000 80a8 	beq.w	8018ca6 <tcp_listen_input+0x1ae>
    npcb = tcp_alloc(pcb->prio);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	7d5b      	ldrb	r3, [r3, #21]
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7ff f8a6 	bl	8017cac <tcp_alloc>
 8018b60:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d119      	bne.n	8018b9c <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8018b68:	4b58      	ldr	r3, [pc, #352]	@ (8018ccc <tcp_listen_input+0x1d4>)
 8018b6a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8018b6e:	3301      	adds	r3, #1
 8018b70:	b29a      	uxth	r2, r3
 8018b72:	4b56      	ldr	r3, [pc, #344]	@ (8018ccc <tcp_listen_input+0x1d4>)
 8018b74:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	699b      	ldr	r3, [r3, #24]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d00a      	beq.n	8018b96 <tcp_listen_input+0x9e>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	699b      	ldr	r3, [r3, #24]
 8018b84:	687a      	ldr	r2, [r7, #4]
 8018b86:	6910      	ldr	r0, [r2, #16]
 8018b88:	f04f 32ff 	mov.w	r2, #4294967295
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	4798      	blx	r3
 8018b90:	4603      	mov	r3, r0
 8018b92:	73bb      	strb	r3, [r7, #14]
      return;
 8018b94:	e088      	b.n	8018ca8 <tcp_listen_input+0x1b0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b96:	23f0      	movs	r3, #240	@ 0xf0
 8018b98:	73bb      	strb	r3, [r7, #14]
      return;
 8018b9a:	e085      	b.n	8018ca8 <tcp_listen_input+0x1b0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8018cd0 <tcp_listen_input+0x1d8>)
 8018b9e:	695a      	ldr	r2, [r3, #20]
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8018cd0 <tcp_listen_input+0x1d8>)
 8018ba6:	691a      	ldr	r2, [r3, #16]
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	8ada      	ldrh	r2, [r3, #22]
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018bb4:	4b42      	ldr	r3, [pc, #264]	@ (8018cc0 <tcp_listen_input+0x1c8>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	881b      	ldrh	r3, [r3, #0]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018bc0:	697b      	ldr	r3, [r7, #20]
 8018bc2:	2203      	movs	r2, #3
 8018bc4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8018cbc <tcp_listen_input+0x1c4>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	1c5a      	adds	r2, r3, #1
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018bd8:	6978      	ldr	r0, [r7, #20]
 8018bda:	f7ff fa8d 	bl	80180f8 <tcp_next_iss>
 8018bde:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018be0:	697b      	ldr	r3, [r7, #20]
 8018be2:	693a      	ldr	r2, [r7, #16]
 8018be4:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	693a      	ldr	r2, [r7, #16]
 8018bea:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	693a      	ldr	r2, [r7, #16]
 8018bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018bf2:	697b      	ldr	r3, [r7, #20]
 8018bf4:	693a      	ldr	r2, [r7, #16]
 8018bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018bf8:	4b30      	ldr	r3, [pc, #192]	@ (8018cbc <tcp_listen_input+0x1c4>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	1e5a      	subs	r2, r3, #1
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	691a      	ldr	r2, [r3, #16]
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	7a1b      	ldrb	r3, [r3, #8]
 8018c14:	f003 030c 	and.w	r3, r3, #12
 8018c18:	b2da      	uxtb	r2, r3
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8018cd4 <tcp_listen_input+0x1dc>)
 8018c20:	681a      	ldr	r2, [r3, #0]
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	60da      	str	r2, [r3, #12]
 8018c26:	4a2b      	ldr	r2, [pc, #172]	@ (8018cd4 <tcp_listen_input+0x1dc>)
 8018c28:	697b      	ldr	r3, [r7, #20]
 8018c2a:	6013      	str	r3, [r2, #0]
 8018c2c:	f003 f9a4 	bl	801bf78 <tcp_timer_needed>
 8018c30:	4b29      	ldr	r3, [pc, #164]	@ (8018cd8 <tcp_listen_input+0x1e0>)
 8018c32:	2201      	movs	r2, #1
 8018c34:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018c36:	6978      	ldr	r0, [r7, #20]
 8018c38:	f001 fd16 	bl	801a668 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018c3c:	4b20      	ldr	r3, [pc, #128]	@ (8018cc0 <tcp_listen_input+0x1c8>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	89db      	ldrh	r3, [r3, #14]
 8018c42:	b29a      	uxth	r2, r3
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018c50:	697b      	ldr	r3, [r7, #20]
 8018c52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018c56:	697b      	ldr	r3, [r7, #20]
 8018c58:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	3304      	adds	r3, #4
 8018c5e:	4619      	mov	r1, r3
 8018c60:	4610      	mov	r0, r2
 8018c62:	f7ff fa5f 	bl	8018124 <tcp_eff_send_mss_impl>
 8018c66:	4603      	mov	r3, r0
 8018c68:	461a      	mov	r2, r3
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	865a      	strh	r2, [r3, #50]	@ 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 8018c6e:	4b17      	ldr	r3, [pc, #92]	@ (8018ccc <tcp_listen_input+0x1d4>)
 8018c70:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018c74:	3301      	adds	r3, #1
 8018c76:	4a15      	ldr	r2, [pc, #84]	@ (8018ccc <tcp_listen_input+0x1d4>)
 8018c78:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c7c:	2112      	movs	r1, #18
 8018c7e:	6978      	ldr	r0, [r7, #20]
 8018c80:	f002 faf8 	bl	801b274 <tcp_enqueue_flags>
 8018c84:	4603      	mov	r3, r0
 8018c86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d004      	beq.n	8018c9a <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 8018c90:	2100      	movs	r1, #0
 8018c92:	6978      	ldr	r0, [r7, #20]
 8018c94:	f7fe f84e 	bl	8016d34 <tcp_abandon>
      return;
 8018c98:	e006      	b.n	8018ca8 <tcp_listen_input+0x1b0>
    tcp_output(npcb);
 8018c9a:	6978      	ldr	r0, [r7, #20]
 8018c9c:	f002 fc5c 	bl	801b558 <tcp_output>
  return;
 8018ca0:	e001      	b.n	8018ca6 <tcp_listen_input+0x1ae>
    return;
 8018ca2:	bf00      	nop
 8018ca4:	e000      	b.n	8018ca8 <tcp_listen_input+0x1b0>
  return;
 8018ca6:	bf00      	nop
}
 8018ca8:	3718      	adds	r7, #24
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	2000bdc0 	.word	0x2000bdc0
 8018cb4:	2000bdb8 	.word	0x2000bdb8
 8018cb8:	2000bdbe 	.word	0x2000bdbe
 8018cbc:	2000bdb4 	.word	0x2000bdb4
 8018cc0:	2000bda4 	.word	0x2000bda4
 8018cc4:	2000860c 	.word	0x2000860c
 8018cc8:	20008610 	.word	0x20008610
 8018ccc:	2000bbe4 	.word	0x2000bbe4
 8018cd0:	200085fc 	.word	0x200085fc
 8018cd4:	2000bd88 	.word	0x2000bd88
 8018cd8:	2000bd90 	.word	0x2000bd90

08018cdc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af02      	add	r7, sp, #8
 8018ce2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018ce4:	4b29      	ldr	r3, [pc, #164]	@ (8018d8c <tcp_timewait_input+0xb0>)
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	f003 0304 	and.w	r3, r3, #4
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d146      	bne.n	8018d7e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018cf0:	4b26      	ldr	r3, [pc, #152]	@ (8018d8c <tcp_timewait_input+0xb0>)
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	f003 0302 	and.w	r3, r3, #2
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d027      	beq.n	8018d4c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018cfc:	4b24      	ldr	r3, [pc, #144]	@ (8018d90 <tcp_timewait_input+0xb4>)
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d04:	1ad3      	subs	r3, r2, r3
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	db2a      	blt.n	8018d60 <tcp_timewait_input+0x84>
 8018d0a:	4b21      	ldr	r3, [pc, #132]	@ (8018d90 <tcp_timewait_input+0xb4>)
 8018d0c:	681a      	ldr	r2, [r3, #0]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d12:	6879      	ldr	r1, [r7, #4]
 8018d14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018d16:	440b      	add	r3, r1
 8018d18:	1ad3      	subs	r3, r2, r3
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	dc20      	bgt.n	8018d60 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8018d94 <tcp_timewait_input+0xb8>)
 8018d20:	6818      	ldr	r0, [r3, #0]
 8018d22:	4b1d      	ldr	r3, [pc, #116]	@ (8018d98 <tcp_timewait_input+0xbc>)
 8018d24:	881b      	ldrh	r3, [r3, #0]
 8018d26:	461a      	mov	r2, r3
 8018d28:	4b19      	ldr	r3, [pc, #100]	@ (8018d90 <tcp_timewait_input+0xb4>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8018d9c <tcp_timewait_input+0xc0>)
 8018d30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d32:	885b      	ldrh	r3, [r3, #2]
 8018d34:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d36:	4a19      	ldr	r2, [pc, #100]	@ (8018d9c <tcp_timewait_input+0xc0>)
 8018d38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d3a:	8812      	ldrh	r2, [r2, #0]
 8018d3c:	b292      	uxth	r2, r2
 8018d3e:	9201      	str	r2, [sp, #4]
 8018d40:	9300      	str	r3, [sp, #0]
 8018d42:	4b17      	ldr	r3, [pc, #92]	@ (8018da0 <tcp_timewait_input+0xc4>)
 8018d44:	4a17      	ldr	r2, [pc, #92]	@ (8018da4 <tcp_timewait_input+0xc8>)
 8018d46:	f002 fe9f 	bl	801ba88 <tcp_rst>
      return;
 8018d4a:	e01b      	b.n	8018d84 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8018d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8018d8c <tcp_timewait_input+0xb0>)
 8018d4e:	781b      	ldrb	r3, [r3, #0]
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d003      	beq.n	8018d60 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d58:	4b13      	ldr	r3, [pc, #76]	@ (8018da8 <tcp_timewait_input+0xcc>)
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d60:	4b0d      	ldr	r3, [pc, #52]	@ (8018d98 <tcp_timewait_input+0xbc>)
 8018d62:	881b      	ldrh	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d00c      	beq.n	8018d82 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	7e9b      	ldrb	r3, [r3, #26]
 8018d6c:	f043 0302 	orr.w	r3, r3, #2
 8018d70:	b2da      	uxtb	r2, r3
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8018d76:	6878      	ldr	r0, [r7, #4]
 8018d78:	f002 fbee 	bl	801b558 <tcp_output>
  }
  return;
 8018d7c:	e001      	b.n	8018d82 <tcp_timewait_input+0xa6>
    return;
 8018d7e:	bf00      	nop
 8018d80:	e000      	b.n	8018d84 <tcp_timewait_input+0xa8>
  return;
 8018d82:	bf00      	nop
}
 8018d84:	3708      	adds	r7, #8
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}
 8018d8a:	bf00      	nop
 8018d8c:	2000bdc0 	.word	0x2000bdc0
 8018d90:	2000bdb4 	.word	0x2000bdb4
 8018d94:	2000bdb8 	.word	0x2000bdb8
 8018d98:	2000bdbe 	.word	0x2000bdbe
 8018d9c:	2000bda4 	.word	0x2000bda4
 8018da0:	2000860c 	.word	0x2000860c
 8018da4:	20008610 	.word	0x20008610
 8018da8:	2000bd7c 	.word	0x2000bd7c

08018dac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b08a      	sub	sp, #40	@ 0x28
 8018db0:	af02      	add	r7, sp, #8
 8018db2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018db4:	2300      	movs	r3, #0
 8018db6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018db8:	2300      	movs	r3, #0
 8018dba:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018dbc:	4b93      	ldr	r3, [pc, #588]	@ (801900c <tcp_process+0x260>)
 8018dbe:	781b      	ldrb	r3, [r3, #0]
 8018dc0:	f003 0304 	and.w	r3, r3, #4
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d04e      	beq.n	8018e66 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	7d1b      	ldrb	r3, [r3, #20]
 8018dcc:	2b02      	cmp	r3, #2
 8018dce:	d108      	bne.n	8018de2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8019010 <tcp_process+0x264>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d123      	bne.n	8018e24 <tcp_process+0x78>
        acceptable = 1;
 8018ddc:	2301      	movs	r3, #1
 8018dde:	76fb      	strb	r3, [r7, #27]
 8018de0:	e020      	b.n	8018e24 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018de6:	4b8b      	ldr	r3, [pc, #556]	@ (8019014 <tcp_process+0x268>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d102      	bne.n	8018df4 <tcp_process+0x48>
        acceptable = 1;
 8018dee:	2301      	movs	r3, #1
 8018df0:	76fb      	strb	r3, [r7, #27]
 8018df2:	e017      	b.n	8018e24 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018df4:	4b87      	ldr	r3, [pc, #540]	@ (8019014 <tcp_process+0x268>)
 8018df6:	681a      	ldr	r2, [r3, #0]
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dfc:	1ad3      	subs	r3, r2, r3
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	db10      	blt.n	8018e24 <tcp_process+0x78>
 8018e02:	4b84      	ldr	r3, [pc, #528]	@ (8019014 <tcp_process+0x268>)
 8018e04:	681a      	ldr	r2, [r3, #0]
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e0a:	6879      	ldr	r1, [r7, #4]
 8018e0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018e0e:	440b      	add	r3, r1
 8018e10:	1ad3      	subs	r3, r2, r3
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	dc06      	bgt.n	8018e24 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	7e9b      	ldrb	r3, [r3, #26]
 8018e1a:	f043 0302 	orr.w	r3, r3, #2
 8018e1e:	b2da      	uxtb	r2, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018e24:	7efb      	ldrb	r3, [r7, #27]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d01b      	beq.n	8018e62 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	7d1b      	ldrb	r3, [r3, #20]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d106      	bne.n	8018e40 <tcp_process+0x94>
 8018e32:	4b79      	ldr	r3, [pc, #484]	@ (8019018 <tcp_process+0x26c>)
 8018e34:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018e38:	4978      	ldr	r1, [pc, #480]	@ (801901c <tcp_process+0x270>)
 8018e3a:	4879      	ldr	r0, [pc, #484]	@ (8019020 <tcp_process+0x274>)
 8018e3c:	f009 fa00 	bl	8022240 <iprintf>
      recv_flags |= TF_RESET;
 8018e40:	4b78      	ldr	r3, [pc, #480]	@ (8019024 <tcp_process+0x278>)
 8018e42:	781b      	ldrb	r3, [r3, #0]
 8018e44:	f043 0308 	orr.w	r3, r3, #8
 8018e48:	b2da      	uxtb	r2, r3
 8018e4a:	4b76      	ldr	r3, [pc, #472]	@ (8019024 <tcp_process+0x278>)
 8018e4c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	7e9b      	ldrb	r3, [r3, #26]
 8018e52:	f023 0301 	bic.w	r3, r3, #1
 8018e56:	b2da      	uxtb	r2, r3
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8018e5c:	f06f 030d 	mvn.w	r3, #13
 8018e60:	e348      	b.n	80194f4 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	e346      	b.n	80194f4 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e66:	4b69      	ldr	r3, [pc, #420]	@ (801900c <tcp_process+0x260>)
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	f003 0302 	and.w	r3, r3, #2
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d010      	beq.n	8018e94 <tcp_process+0xe8>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	7d1b      	ldrb	r3, [r3, #20]
 8018e76:	2b02      	cmp	r3, #2
 8018e78:	d00c      	beq.n	8018e94 <tcp_process+0xe8>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	7d1b      	ldrb	r3, [r3, #20]
 8018e7e:	2b03      	cmp	r3, #3
 8018e80:	d008      	beq.n	8018e94 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	7e9b      	ldrb	r3, [r3, #26]
 8018e86:	f043 0302 	orr.w	r3, r3, #2
 8018e8a:	b2da      	uxtb	r2, r3
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8018e90:	2300      	movs	r3, #0
 8018e92:	e32f      	b.n	80194f4 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	7e9b      	ldrb	r3, [r3, #26]
 8018e98:	f003 0310 	and.w	r3, r3, #16
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d103      	bne.n	8018ea8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018ea0:	4b61      	ldr	r3, [pc, #388]	@ (8019028 <tcp_process+0x27c>)
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f001 fbd9 	bl	801a668 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	7d1b      	ldrb	r3, [r3, #20]
 8018eba:	3b02      	subs	r3, #2
 8018ebc:	2b07      	cmp	r3, #7
 8018ebe:	f200 8309 	bhi.w	80194d4 <tcp_process+0x728>
 8018ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8018ec8 <tcp_process+0x11c>)
 8018ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec8:	08018ee9 	.word	0x08018ee9
 8018ecc:	080190df 	.word	0x080190df
 8018ed0:	08019237 	.word	0x08019237
 8018ed4:	08019261 	.word	0x08019261
 8018ed8:	08019383 	.word	0x08019383
 8018edc:	08019237 	.word	0x08019237
 8018ee0:	0801940f 	.word	0x0801940f
 8018ee4:	0801949f 	.word	0x0801949f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ee8:	4b48      	ldr	r3, [pc, #288]	@ (801900c <tcp_process+0x260>)
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	f003 0310 	and.w	r3, r3, #16
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f000 80ca 	beq.w	801908a <tcp_process+0x2de>
 8018ef6:	4b45      	ldr	r3, [pc, #276]	@ (801900c <tcp_process+0x260>)
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	f003 0302 	and.w	r3, r3, #2
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f000 80c3 	beq.w	801908a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f08:	1c5a      	adds	r2, r3, #1
 8018f0a:	4b41      	ldr	r3, [pc, #260]	@ (8019010 <tcp_process+0x264>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	f040 80bb 	bne.w	801908a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8018f14:	4b3f      	ldr	r3, [pc, #252]	@ (8019014 <tcp_process+0x268>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	1c5a      	adds	r2, r3, #1
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8018f26:	4b3a      	ldr	r3, [pc, #232]	@ (8019010 <tcp_process+0x264>)
 8018f28:	681a      	ldr	r2, [r3, #0]
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8018f2e:	4b3f      	ldr	r3, [pc, #252]	@ (801902c <tcp_process+0x280>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	89db      	ldrh	r3, [r3, #14]
 8018f34:	b29a      	uxth	r2, r3
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f48:	4b32      	ldr	r3, [pc, #200]	@ (8019014 <tcp_process+0x268>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	1e5a      	subs	r2, r3, #1
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2204      	movs	r2, #4
 8018f56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	3304      	adds	r3, #4
 8018f60:	4619      	mov	r1, r3
 8018f62:	4610      	mov	r0, r2
 8018f64:	f7ff f8de 	bl	8018124 <tcp_eff_send_mss_impl>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f74:	005b      	lsls	r3, r3, #1
 8018f76:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018f7a:	429a      	cmp	r2, r3
 8018f7c:	bf38      	it	cc
 8018f7e:	461a      	movcc	r2, r3
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f84:	009b      	lsls	r3, r3, #2
 8018f86:	4293      	cmp	r3, r2
 8018f88:	bf28      	it	cs
 8018f8a:	4613      	movcs	r3, r2
 8018f8c:	b29a      	uxth	r2, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d106      	bne.n	8018fac <tcp_process+0x200>
 8018f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8019018 <tcp_process+0x26c>)
 8018fa0:	f240 321a 	movw	r2, #794	@ 0x31a
 8018fa4:	4922      	ldr	r1, [pc, #136]	@ (8019030 <tcp_process+0x284>)
 8018fa6:	481e      	ldr	r0, [pc, #120]	@ (8019020 <tcp_process+0x274>)
 8018fa8:	f009 f94a 	bl	8022240 <iprintf>
      --pcb->snd_queuelen;
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018fb2:	3b01      	subs	r3, #1
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fc0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8018fc2:	69fb      	ldr	r3, [r7, #28]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d111      	bne.n	8018fec <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fcc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fce:	69fb      	ldr	r3, [r7, #28]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d106      	bne.n	8018fe2 <tcp_process+0x236>
 8018fd4:	4b10      	ldr	r3, [pc, #64]	@ (8019018 <tcp_process+0x26c>)
 8018fd6:	f240 3222 	movw	r2, #802	@ 0x322
 8018fda:	4916      	ldr	r1, [pc, #88]	@ (8019034 <tcp_process+0x288>)
 8018fdc:	4810      	ldr	r0, [pc, #64]	@ (8019020 <tcp_process+0x274>)
 8018fde:	f009 f92f 	bl	8022240 <iprintf>
        pcb->unsent = rseg->next;
 8018fe2:	69fb      	ldr	r3, [r7, #28]
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	669a      	str	r2, [r3, #104]	@ 0x68
 8018fea:	e003      	b.n	8018ff4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8018fec:	69fb      	ldr	r3, [r7, #28]
 8018fee:	681a      	ldr	r2, [r3, #0]
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8018ff4:	69f8      	ldr	r0, [r7, #28]
 8018ff6:	f7fe fd39 	bl	8017a6c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d11a      	bne.n	8019038 <tcp_process+0x28c>
        pcb->rtime = -1;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019008:	861a      	strh	r2, [r3, #48]	@ 0x30
 801900a:	e01c      	b.n	8019046 <tcp_process+0x29a>
 801900c:	2000bdc0 	.word	0x2000bdc0
 8019010:	2000bdb8 	.word	0x2000bdb8
 8019014:	2000bdb4 	.word	0x2000bdb4
 8019018:	08026a88 	.word	0x08026a88
 801901c:	08026c40 	.word	0x08026c40
 8019020:	08026acc 	.word	0x08026acc
 8019024:	2000bdc1 	.word	0x2000bdc1
 8019028:	2000bd7c 	.word	0x2000bd7c
 801902c:	2000bda4 	.word	0x2000bda4
 8019030:	08026c60 	.word	0x08026c60
 8019034:	08026c78 	.word	0x08026c78
      } else {
        pcb->rtime = 0;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2200      	movs	r2, #0
 801903c:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2200      	movs	r2, #0
 8019042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801904c:	2b00      	cmp	r3, #0
 801904e:	d00a      	beq.n	8019066 <tcp_process+0x2ba>
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	6910      	ldr	r0, [r2, #16]
 801905a:	2200      	movs	r2, #0
 801905c:	6879      	ldr	r1, [r7, #4]
 801905e:	4798      	blx	r3
 8019060:	4603      	mov	r3, r0
 8019062:	76bb      	strb	r3, [r7, #26]
 8019064:	e001      	b.n	801906a <tcp_process+0x2be>
 8019066:	2300      	movs	r3, #0
 8019068:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801906a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801906e:	f113 0f0d 	cmn.w	r3, #13
 8019072:	d102      	bne.n	801907a <tcp_process+0x2ce>
        return ERR_ABRT;
 8019074:	f06f 030c 	mvn.w	r3, #12
 8019078:	e23c      	b.n	80194f4 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	7e9b      	ldrb	r3, [r3, #26]
 801907e:	f043 0302 	orr.w	r3, r3, #2
 8019082:	b2da      	uxtb	r2, r3
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8019088:	e226      	b.n	80194d8 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 801908a:	4b93      	ldr	r3, [pc, #588]	@ (80192d8 <tcp_process+0x52c>)
 801908c:	781b      	ldrb	r3, [r3, #0]
 801908e:	f003 0310 	and.w	r3, r3, #16
 8019092:	2b00      	cmp	r3, #0
 8019094:	f000 8220 	beq.w	80194d8 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019098:	4b90      	ldr	r3, [pc, #576]	@ (80192dc <tcp_process+0x530>)
 801909a:	6818      	ldr	r0, [r3, #0]
 801909c:	4b90      	ldr	r3, [pc, #576]	@ (80192e0 <tcp_process+0x534>)
 801909e:	881b      	ldrh	r3, [r3, #0]
 80190a0:	461a      	mov	r2, r3
 80190a2:	4b90      	ldr	r3, [pc, #576]	@ (80192e4 <tcp_process+0x538>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190a8:	4b8f      	ldr	r3, [pc, #572]	@ (80192e8 <tcp_process+0x53c>)
 80190aa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80190ac:	885b      	ldrh	r3, [r3, #2]
 80190ae:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190b0:	4a8d      	ldr	r2, [pc, #564]	@ (80192e8 <tcp_process+0x53c>)
 80190b2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80190b4:	8812      	ldrh	r2, [r2, #0]
 80190b6:	b292      	uxth	r2, r2
 80190b8:	9201      	str	r2, [sp, #4]
 80190ba:	9300      	str	r3, [sp, #0]
 80190bc:	4b8b      	ldr	r3, [pc, #556]	@ (80192ec <tcp_process+0x540>)
 80190be:	4a8c      	ldr	r2, [pc, #560]	@ (80192f0 <tcp_process+0x544>)
 80190c0:	f002 fce2 	bl	801ba88 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80190ca:	2b05      	cmp	r3, #5
 80190cc:	f200 8204 	bhi.w	80194d8 <tcp_process+0x72c>
        pcb->rtime = 0;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2200      	movs	r2, #0
 80190d4:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f002 fd5e 	bl	801bb98 <tcp_rexmit_rto>
    break;
 80190dc:	e1fc      	b.n	80194d8 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80190de:	4b7e      	ldr	r3, [pc, #504]	@ (80192d8 <tcp_process+0x52c>)
 80190e0:	781b      	ldrb	r3, [r3, #0]
 80190e2:	f003 0310 	and.w	r3, r3, #16
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	f000 8091 	beq.w	801920e <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80190ec:	4b7b      	ldr	r3, [pc, #492]	@ (80192dc <tcp_process+0x530>)
 80190ee:	681a      	ldr	r2, [r3, #0]
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80190f4:	1ad3      	subs	r3, r2, r3
 80190f6:	3b01      	subs	r3, #1
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	db71      	blt.n	80191e0 <tcp_process+0x434>
 80190fc:	4b77      	ldr	r3, [pc, #476]	@ (80192dc <tcp_process+0x530>)
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019104:	1ad3      	subs	r3, r2, r3
 8019106:	2b00      	cmp	r3, #0
 8019108:	dc6a      	bgt.n	80191e0 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2204      	movs	r2, #4
 801910e:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019114:	2b00      	cmp	r3, #0
 8019116:	d00b      	beq.n	8019130 <tcp_process+0x384>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801911c:	699b      	ldr	r3, [r3, #24]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d106      	bne.n	8019130 <tcp_process+0x384>
 8019122:	4b74      	ldr	r3, [pc, #464]	@ (80192f4 <tcp_process+0x548>)
 8019124:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019128:	4973      	ldr	r1, [pc, #460]	@ (80192f8 <tcp_process+0x54c>)
 801912a:	4874      	ldr	r0, [pc, #464]	@ (80192fc <tcp_process+0x550>)
 801912c:	f009 f888 	bl	8022240 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019134:	2b00      	cmp	r3, #0
 8019136:	d102      	bne.n	801913e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8019138:	23fa      	movs	r3, #250	@ 0xfa
 801913a:	76bb      	strb	r3, [r7, #26]
 801913c:	e011      	b.n	8019162 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019142:	699b      	ldr	r3, [r3, #24]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d00a      	beq.n	801915e <tcp_process+0x3b2>
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801914c:	699b      	ldr	r3, [r3, #24]
 801914e:	687a      	ldr	r2, [r7, #4]
 8019150:	6910      	ldr	r0, [r2, #16]
 8019152:	2200      	movs	r2, #0
 8019154:	6879      	ldr	r1, [r7, #4]
 8019156:	4798      	blx	r3
 8019158:	4603      	mov	r3, r0
 801915a:	76bb      	strb	r3, [r7, #26]
 801915c:	e001      	b.n	8019162 <tcp_process+0x3b6>
 801915e:	23f0      	movs	r3, #240	@ 0xf0
 8019160:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8019162:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d00a      	beq.n	8019180 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801916a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801916e:	f113 0f0d 	cmn.w	r3, #13
 8019172:	d002      	beq.n	801917a <tcp_process+0x3ce>
            tcp_abort(pcb);
 8019174:	6878      	ldr	r0, [r7, #4]
 8019176:	f7fd fe8f 	bl	8016e98 <tcp_abort>
          }
          return ERR_ABRT;
 801917a:	f06f 030c 	mvn.w	r3, #12
 801917e:	e1b9      	b.n	80194f4 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f000 fa3d 	bl	8019600 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8019186:	4b5e      	ldr	r3, [pc, #376]	@ (8019300 <tcp_process+0x554>)
 8019188:	881b      	ldrh	r3, [r3, #0]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d005      	beq.n	801919a <tcp_process+0x3ee>
          recv_acked--;
 801918e:	4b5c      	ldr	r3, [pc, #368]	@ (8019300 <tcp_process+0x554>)
 8019190:	881b      	ldrh	r3, [r3, #0]
 8019192:	3b01      	subs	r3, #1
 8019194:	b29a      	uxth	r2, r3
 8019196:	4b5a      	ldr	r3, [pc, #360]	@ (8019300 <tcp_process+0x554>)
 8019198:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801919e:	005b      	lsls	r3, r3, #1
 80191a0:	f241 121c 	movw	r2, #4380	@ 0x111c
 80191a4:	429a      	cmp	r2, r3
 80191a6:	bf38      	it	cc
 80191a8:	461a      	movcc	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191ae:	009b      	lsls	r3, r3, #2
 80191b0:	4293      	cmp	r3, r2
 80191b2:	bf28      	it	cs
 80191b4:	4613      	movcs	r3, r2
 80191b6:	b29a      	uxth	r2, r3
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80191be:	4b51      	ldr	r3, [pc, #324]	@ (8019304 <tcp_process+0x558>)
 80191c0:	781b      	ldrb	r3, [r3, #0]
 80191c2:	f003 0320 	and.w	r3, r3, #32
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d034      	beq.n	8019234 <tcp_process+0x488>
          tcp_ack_now(pcb);
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	7e9b      	ldrb	r3, [r3, #26]
 80191ce:	f043 0302 	orr.w	r3, r3, #2
 80191d2:	b2da      	uxtb	r2, r3
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2207      	movs	r2, #7
 80191dc:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80191de:	e029      	b.n	8019234 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80191e0:	4b3e      	ldr	r3, [pc, #248]	@ (80192dc <tcp_process+0x530>)
 80191e2:	6818      	ldr	r0, [r3, #0]
 80191e4:	4b3e      	ldr	r3, [pc, #248]	@ (80192e0 <tcp_process+0x534>)
 80191e6:	881b      	ldrh	r3, [r3, #0]
 80191e8:	461a      	mov	r2, r3
 80191ea:	4b3e      	ldr	r3, [pc, #248]	@ (80192e4 <tcp_process+0x538>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80191f0:	4b3d      	ldr	r3, [pc, #244]	@ (80192e8 <tcp_process+0x53c>)
 80191f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80191f4:	885b      	ldrh	r3, [r3, #2]
 80191f6:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80191f8:	4a3b      	ldr	r2, [pc, #236]	@ (80192e8 <tcp_process+0x53c>)
 80191fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80191fc:	8812      	ldrh	r2, [r2, #0]
 80191fe:	b292      	uxth	r2, r2
 8019200:	9201      	str	r2, [sp, #4]
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	4b39      	ldr	r3, [pc, #228]	@ (80192ec <tcp_process+0x540>)
 8019206:	4a3a      	ldr	r2, [pc, #232]	@ (80192f0 <tcp_process+0x544>)
 8019208:	f002 fc3e 	bl	801ba88 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801920c:	e166      	b.n	80194dc <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801920e:	4b32      	ldr	r3, [pc, #200]	@ (80192d8 <tcp_process+0x52c>)
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	f003 0302 	and.w	r3, r3, #2
 8019216:	2b00      	cmp	r3, #0
 8019218:	f000 8160 	beq.w	80194dc <tcp_process+0x730>
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019220:	1e5a      	subs	r2, r3, #1
 8019222:	4b30      	ldr	r3, [pc, #192]	@ (80192e4 <tcp_process+0x538>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	429a      	cmp	r2, r3
 8019228:	f040 8158 	bne.w	80194dc <tcp_process+0x730>
      tcp_rexmit(pcb);
 801922c:	6878      	ldr	r0, [r7, #4]
 801922e:	f002 fce9 	bl	801bc04 <tcp_rexmit>
    break;
 8019232:	e153      	b.n	80194dc <tcp_process+0x730>
 8019234:	e152      	b.n	80194dc <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f000 f9e2 	bl	8019600 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801923c:	4b31      	ldr	r3, [pc, #196]	@ (8019304 <tcp_process+0x558>)
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	f003 0320 	and.w	r3, r3, #32
 8019244:	2b00      	cmp	r3, #0
 8019246:	f000 814b 	beq.w	80194e0 <tcp_process+0x734>
      tcp_ack_now(pcb);
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	7e9b      	ldrb	r3, [r3, #26]
 801924e:	f043 0302 	orr.w	r3, r3, #2
 8019252:	b2da      	uxtb	r2, r3
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2207      	movs	r2, #7
 801925c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801925e:	e13f      	b.n	80194e0 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f000 f9cd 	bl	8019600 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8019266:	4b27      	ldr	r3, [pc, #156]	@ (8019304 <tcp_process+0x558>)
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	f003 0320 	and.w	r3, r3, #32
 801926e:	2b00      	cmp	r3, #0
 8019270:	d070      	beq.n	8019354 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019272:	4b19      	ldr	r3, [pc, #100]	@ (80192d8 <tcp_process+0x52c>)
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	f003 0310 	and.w	r3, r3, #16
 801927a:	2b00      	cmp	r3, #0
 801927c:	d05f      	beq.n	801933e <tcp_process+0x592>
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019282:	4b16      	ldr	r3, [pc, #88]	@ (80192dc <tcp_process+0x530>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	429a      	cmp	r2, r3
 8019288:	d159      	bne.n	801933e <tcp_process+0x592>
          pcb->unsent == NULL) {
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801928e:	2b00      	cmp	r3, #0
 8019290:	d155      	bne.n	801933e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	7e9b      	ldrb	r3, [r3, #26]
 8019296:	f043 0302 	orr.w	r3, r3, #2
 801929a:	b2da      	uxtb	r2, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80192a0:	6878      	ldr	r0, [r7, #4]
 80192a2:	f7fe fe6b 	bl	8017f7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80192a6:	4b18      	ldr	r3, [pc, #96]	@ (8019308 <tcp_process+0x55c>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	687a      	ldr	r2, [r7, #4]
 80192ac:	429a      	cmp	r2, r3
 80192ae:	d105      	bne.n	80192bc <tcp_process+0x510>
 80192b0:	4b15      	ldr	r3, [pc, #84]	@ (8019308 <tcp_process+0x55c>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	4a14      	ldr	r2, [pc, #80]	@ (8019308 <tcp_process+0x55c>)
 80192b8:	6013      	str	r3, [r2, #0]
 80192ba:	e02d      	b.n	8019318 <tcp_process+0x56c>
 80192bc:	4b12      	ldr	r3, [pc, #72]	@ (8019308 <tcp_process+0x55c>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	617b      	str	r3, [r7, #20]
 80192c2:	e026      	b.n	8019312 <tcp_process+0x566>
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	68db      	ldr	r3, [r3, #12]
 80192c8:	687a      	ldr	r2, [r7, #4]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d11e      	bne.n	801930c <tcp_process+0x560>
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	68da      	ldr	r2, [r3, #12]
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	60da      	str	r2, [r3, #12]
 80192d6:	e01f      	b.n	8019318 <tcp_process+0x56c>
 80192d8:	2000bdc0 	.word	0x2000bdc0
 80192dc:	2000bdb8 	.word	0x2000bdb8
 80192e0:	2000bdbe 	.word	0x2000bdbe
 80192e4:	2000bdb4 	.word	0x2000bdb4
 80192e8:	2000bda4 	.word	0x2000bda4
 80192ec:	2000860c 	.word	0x2000860c
 80192f0:	20008610 	.word	0x20008610
 80192f4:	08026a88 	.word	0x08026a88
 80192f8:	08026c8c 	.word	0x08026c8c
 80192fc:	08026acc 	.word	0x08026acc
 8019300:	2000bdbc 	.word	0x2000bdbc
 8019304:	2000bdc1 	.word	0x2000bdc1
 8019308:	2000bd88 	.word	0x2000bd88
 801930c:	697b      	ldr	r3, [r7, #20]
 801930e:	68db      	ldr	r3, [r3, #12]
 8019310:	617b      	str	r3, [r7, #20]
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d1d5      	bne.n	80192c4 <tcp_process+0x518>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	2200      	movs	r2, #0
 801931c:	60da      	str	r2, [r3, #12]
 801931e:	4b77      	ldr	r3, [pc, #476]	@ (80194fc <tcp_process+0x750>)
 8019320:	2201      	movs	r2, #1
 8019322:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	220a      	movs	r2, #10
 8019328:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801932a:	4b75      	ldr	r3, [pc, #468]	@ (8019500 <tcp_process+0x754>)
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	60da      	str	r2, [r3, #12]
 8019332:	4a73      	ldr	r2, [pc, #460]	@ (8019500 <tcp_process+0x754>)
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	6013      	str	r3, [r2, #0]
 8019338:	f002 fe1e 	bl	801bf78 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801933c:	e0d2      	b.n	80194e4 <tcp_process+0x738>
        tcp_ack_now(pcb);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	7e9b      	ldrb	r3, [r3, #26]
 8019342:	f043 0302 	orr.w	r3, r3, #2
 8019346:	b2da      	uxtb	r2, r3
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2208      	movs	r2, #8
 8019350:	751a      	strb	r2, [r3, #20]
    break;
 8019352:	e0c7      	b.n	80194e4 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019354:	4b6b      	ldr	r3, [pc, #428]	@ (8019504 <tcp_process+0x758>)
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	f003 0310 	and.w	r3, r3, #16
 801935c:	2b00      	cmp	r3, #0
 801935e:	f000 80c1 	beq.w	80194e4 <tcp_process+0x738>
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019366:	4b68      	ldr	r3, [pc, #416]	@ (8019508 <tcp_process+0x75c>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	429a      	cmp	r2, r3
 801936c:	f040 80ba 	bne.w	80194e4 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019374:	2b00      	cmp	r3, #0
 8019376:	f040 80b5 	bne.w	80194e4 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2206      	movs	r2, #6
 801937e:	751a      	strb	r2, [r3, #20]
    break;
 8019380:	e0b0      	b.n	80194e4 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8019382:	6878      	ldr	r0, [r7, #4]
 8019384:	f000 f93c 	bl	8019600 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8019388:	4b60      	ldr	r3, [pc, #384]	@ (801950c <tcp_process+0x760>)
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	f003 0320 	and.w	r3, r3, #32
 8019390:	2b00      	cmp	r3, #0
 8019392:	f000 80a9 	beq.w	80194e8 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	7e9b      	ldrb	r3, [r3, #26]
 801939a:	f043 0302 	orr.w	r3, r3, #2
 801939e:	b2da      	uxtb	r2, r3
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f7fe fde9 	bl	8017f7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80193aa:	4b59      	ldr	r3, [pc, #356]	@ (8019510 <tcp_process+0x764>)
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d105      	bne.n	80193c0 <tcp_process+0x614>
 80193b4:	4b56      	ldr	r3, [pc, #344]	@ (8019510 <tcp_process+0x764>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	68db      	ldr	r3, [r3, #12]
 80193ba:	4a55      	ldr	r2, [pc, #340]	@ (8019510 <tcp_process+0x764>)
 80193bc:	6013      	str	r3, [r2, #0]
 80193be:	e013      	b.n	80193e8 <tcp_process+0x63c>
 80193c0:	4b53      	ldr	r3, [pc, #332]	@ (8019510 <tcp_process+0x764>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	613b      	str	r3, [r7, #16]
 80193c6:	e00c      	b.n	80193e2 <tcp_process+0x636>
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	687a      	ldr	r2, [r7, #4]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	d104      	bne.n	80193dc <tcp_process+0x630>
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	68da      	ldr	r2, [r3, #12]
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	60da      	str	r2, [r3, #12]
 80193da:	e005      	b.n	80193e8 <tcp_process+0x63c>
 80193dc:	693b      	ldr	r3, [r7, #16]
 80193de:	68db      	ldr	r3, [r3, #12]
 80193e0:	613b      	str	r3, [r7, #16]
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1ef      	bne.n	80193c8 <tcp_process+0x61c>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2200      	movs	r2, #0
 80193ec:	60da      	str	r2, [r3, #12]
 80193ee:	4b43      	ldr	r3, [pc, #268]	@ (80194fc <tcp_process+0x750>)
 80193f0:	2201      	movs	r2, #1
 80193f2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	220a      	movs	r2, #10
 80193f8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80193fa:	4b41      	ldr	r3, [pc, #260]	@ (8019500 <tcp_process+0x754>)
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	60da      	str	r2, [r3, #12]
 8019402:	4a3f      	ldr	r2, [pc, #252]	@ (8019500 <tcp_process+0x754>)
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	6013      	str	r3, [r2, #0]
 8019408:	f002 fdb6 	bl	801bf78 <tcp_timer_needed>
    }
    break;
 801940c:	e06c      	b.n	80194e8 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 801940e:	6878      	ldr	r0, [r7, #4]
 8019410:	f000 f8f6 	bl	8019600 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019414:	4b3b      	ldr	r3, [pc, #236]	@ (8019504 <tcp_process+0x758>)
 8019416:	781b      	ldrb	r3, [r3, #0]
 8019418:	f003 0310 	and.w	r3, r3, #16
 801941c:	2b00      	cmp	r3, #0
 801941e:	d065      	beq.n	80194ec <tcp_process+0x740>
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019424:	4b38      	ldr	r3, [pc, #224]	@ (8019508 <tcp_process+0x75c>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	429a      	cmp	r2, r3
 801942a:	d15f      	bne.n	80194ec <tcp_process+0x740>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019430:	2b00      	cmp	r3, #0
 8019432:	d15b      	bne.n	80194ec <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	f7fe fda1 	bl	8017f7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801943a:	4b35      	ldr	r3, [pc, #212]	@ (8019510 <tcp_process+0x764>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	687a      	ldr	r2, [r7, #4]
 8019440:	429a      	cmp	r2, r3
 8019442:	d105      	bne.n	8019450 <tcp_process+0x6a4>
 8019444:	4b32      	ldr	r3, [pc, #200]	@ (8019510 <tcp_process+0x764>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	68db      	ldr	r3, [r3, #12]
 801944a:	4a31      	ldr	r2, [pc, #196]	@ (8019510 <tcp_process+0x764>)
 801944c:	6013      	str	r3, [r2, #0]
 801944e:	e013      	b.n	8019478 <tcp_process+0x6cc>
 8019450:	4b2f      	ldr	r3, [pc, #188]	@ (8019510 <tcp_process+0x764>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	60fb      	str	r3, [r7, #12]
 8019456:	e00c      	b.n	8019472 <tcp_process+0x6c6>
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	68db      	ldr	r3, [r3, #12]
 801945c:	687a      	ldr	r2, [r7, #4]
 801945e:	429a      	cmp	r2, r3
 8019460:	d104      	bne.n	801946c <tcp_process+0x6c0>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	68da      	ldr	r2, [r3, #12]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	60da      	str	r2, [r3, #12]
 801946a:	e005      	b.n	8019478 <tcp_process+0x6cc>
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	68db      	ldr	r3, [r3, #12]
 8019470:	60fb      	str	r3, [r7, #12]
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d1ef      	bne.n	8019458 <tcp_process+0x6ac>
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	2200      	movs	r2, #0
 801947c:	60da      	str	r2, [r3, #12]
 801947e:	4b1f      	ldr	r3, [pc, #124]	@ (80194fc <tcp_process+0x750>)
 8019480:	2201      	movs	r2, #1
 8019482:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	220a      	movs	r2, #10
 8019488:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801948a:	4b1d      	ldr	r3, [pc, #116]	@ (8019500 <tcp_process+0x754>)
 801948c:	681a      	ldr	r2, [r3, #0]
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	60da      	str	r2, [r3, #12]
 8019492:	4a1b      	ldr	r2, [pc, #108]	@ (8019500 <tcp_process+0x754>)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6013      	str	r3, [r2, #0]
 8019498:	f002 fd6e 	bl	801bf78 <tcp_timer_needed>
    }
    break;
 801949c:	e026      	b.n	80194ec <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 801949e:	6878      	ldr	r0, [r7, #4]
 80194a0:	f000 f8ae 	bl	8019600 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194a4:	4b17      	ldr	r3, [pc, #92]	@ (8019504 <tcp_process+0x758>)
 80194a6:	781b      	ldrb	r3, [r3, #0]
 80194a8:	f003 0310 	and.w	r3, r3, #16
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d01f      	beq.n	80194f0 <tcp_process+0x744>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80194b4:	4b14      	ldr	r3, [pc, #80]	@ (8019508 <tcp_process+0x75c>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	429a      	cmp	r2, r3
 80194ba:	d119      	bne.n	80194f0 <tcp_process+0x744>
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d115      	bne.n	80194f0 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80194c4:	4b11      	ldr	r3, [pc, #68]	@ (801950c <tcp_process+0x760>)
 80194c6:	781b      	ldrb	r3, [r3, #0]
 80194c8:	f043 0310 	orr.w	r3, r3, #16
 80194cc:	b2da      	uxtb	r2, r3
 80194ce:	4b0f      	ldr	r3, [pc, #60]	@ (801950c <tcp_process+0x760>)
 80194d0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80194d2:	e00d      	b.n	80194f0 <tcp_process+0x744>
  default:
    break;
 80194d4:	bf00      	nop
 80194d6:	e00c      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194d8:	bf00      	nop
 80194da:	e00a      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194dc:	bf00      	nop
 80194de:	e008      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194e0:	bf00      	nop
 80194e2:	e006      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194e4:	bf00      	nop
 80194e6:	e004      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194e8:	bf00      	nop
 80194ea:	e002      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194ec:	bf00      	nop
 80194ee:	e000      	b.n	80194f2 <tcp_process+0x746>
    break;
 80194f0:	bf00      	nop
  }
  return ERR_OK;
 80194f2:	2300      	movs	r3, #0
}
 80194f4:	4618      	mov	r0, r3
 80194f6:	3720      	adds	r7, #32
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}
 80194fc:	2000bd90 	.word	0x2000bd90
 8019500:	2000bd8c 	.word	0x2000bd8c
 8019504:	2000bdc0 	.word	0x2000bdc0
 8019508:	2000bdb8 	.word	0x2000bdb8
 801950c:	2000bdc1 	.word	0x2000bdc1
 8019510:	2000bd88 	.word	0x2000bd88

08019514 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019514:	b590      	push	{r4, r7, lr}
 8019516:	b085      	sub	sp, #20
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	68db      	ldr	r3, [r3, #12]
 8019522:	899b      	ldrh	r3, [r3, #12]
 8019524:	b29b      	uxth	r3, r3
 8019526:	4618      	mov	r0, r3
 8019528:	f7fb fbc6 	bl	8014cb8 <lwip_htons>
 801952c:	4603      	mov	r3, r0
 801952e:	f003 0301 	and.w	r3, r3, #1
 8019532:	2b00      	cmp	r3, #0
 8019534:	d027      	beq.n	8019586 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019536:	6838      	ldr	r0, [r7, #0]
 8019538:	f7fe fa83 	bl	8017a42 <tcp_segs_free>
    next = NULL;
 801953c:	2300      	movs	r3, #0
 801953e:	603b      	str	r3, [r7, #0]
 8019540:	e055      	b.n	80195ee <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	68db      	ldr	r3, [r3, #12]
 8019546:	899b      	ldrh	r3, [r3, #12]
 8019548:	b29b      	uxth	r3, r3
 801954a:	4618      	mov	r0, r3
 801954c:	f7fb fbb4 	bl	8014cb8 <lwip_htons>
 8019550:	4603      	mov	r3, r0
 8019552:	f003 0301 	and.w	r3, r3, #1
 8019556:	2b00      	cmp	r3, #0
 8019558:	d00d      	beq.n	8019576 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	68db      	ldr	r3, [r3, #12]
 801955e:	899b      	ldrh	r3, [r3, #12]
 8019560:	b29c      	uxth	r4, r3
 8019562:	2001      	movs	r0, #1
 8019564:	f7fb fba8 	bl	8014cb8 <lwip_htons>
 8019568:	4603      	mov	r3, r0
 801956a:	461a      	mov	r2, r3
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	68db      	ldr	r3, [r3, #12]
 8019570:	4322      	orrs	r2, r4
 8019572:	b292      	uxth	r2, r2
 8019574:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019580:	68f8      	ldr	r0, [r7, #12]
 8019582:	f7fe fa73 	bl	8017a6c <tcp_seg_free>
    while (next &&
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00e      	beq.n	80195aa <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	891b      	ldrh	r3, [r3, #8]
 8019590:	461a      	mov	r2, r3
 8019592:	4b1a      	ldr	r3, [pc, #104]	@ (80195fc <tcp_oos_insert_segment+0xe8>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	441a      	add	r2, r3
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	68db      	ldr	r3, [r3, #12]
 801959c:	685b      	ldr	r3, [r3, #4]
 801959e:	6839      	ldr	r1, [r7, #0]
 80195a0:	8909      	ldrh	r1, [r1, #8]
 80195a2:	440b      	add	r3, r1
 80195a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	dacb      	bge.n	8019542 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d01e      	beq.n	80195ee <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	891b      	ldrh	r3, [r3, #8]
 80195b4:	461a      	mov	r2, r3
 80195b6:	4b11      	ldr	r3, [pc, #68]	@ (80195fc <tcp_oos_insert_segment+0xe8>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	441a      	add	r2, r3
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	dd12      	ble.n	80195ee <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	68db      	ldr	r3, [r3, #12]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	4b0a      	ldr	r3, [pc, #40]	@ (80195fc <tcp_oos_insert_segment+0xe8>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	1ad3      	subs	r3, r2, r3
 80195d8:	b29a      	uxth	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	685a      	ldr	r2, [r3, #4]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	891b      	ldrh	r3, [r3, #8]
 80195e6:	4619      	mov	r1, r3
 80195e8:	4610      	mov	r0, r2
 80195ea:	f7fc fc97 	bl	8015f1c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	683a      	ldr	r2, [r7, #0]
 80195f2:	601a      	str	r2, [r3, #0]
}
 80195f4:	bf00      	nop
 80195f6:	3714      	adds	r7, #20
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd90      	pop	{r4, r7, pc}
 80195fc:	2000bdb4 	.word	0x2000bdb4

08019600 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019602:	b08d      	sub	sp, #52	@ 0x34
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8019608:	2300      	movs	r3, #0
 801960a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	7d1b      	ldrb	r3, [r3, #20]
 8019610:	2b03      	cmp	r3, #3
 8019612:	d806      	bhi.n	8019622 <tcp_receive+0x22>
 8019614:	4b98      	ldr	r3, [pc, #608]	@ (8019878 <tcp_receive+0x278>)
 8019616:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 801961a:	4998      	ldr	r1, [pc, #608]	@ (801987c <tcp_receive+0x27c>)
 801961c:	4898      	ldr	r0, [pc, #608]	@ (8019880 <tcp_receive+0x280>)
 801961e:	f008 fe0f 	bl	8022240 <iprintf>

  if (flags & TCP_ACK) {
 8019622:	4b98      	ldr	r3, [pc, #608]	@ (8019884 <tcp_receive+0x284>)
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	f003 0310 	and.w	r3, r3, #16
 801962a:	2b00      	cmp	r3, #0
 801962c:	f000 82c1 	beq.w	8019bb2 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019636:	461a      	mov	r2, r3
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801963c:	4413      	add	r3, r2
 801963e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019644:	4b90      	ldr	r3, [pc, #576]	@ (8019888 <tcp_receive+0x288>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	1ad3      	subs	r3, r2, r3
 801964a:	2b00      	cmp	r3, #0
 801964c:	db1b      	blt.n	8019686 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019652:	4b8d      	ldr	r3, [pc, #564]	@ (8019888 <tcp_receive+0x288>)
 8019654:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019656:	429a      	cmp	r2, r3
 8019658:	d106      	bne.n	8019668 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801965e:	4b8b      	ldr	r3, [pc, #556]	@ (801988c <tcp_receive+0x28c>)
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	1ad3      	subs	r3, r2, r3
 8019664:	2b00      	cmp	r3, #0
 8019666:	db0e      	blt.n	8019686 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801966c:	4b87      	ldr	r3, [pc, #540]	@ (801988c <tcp_receive+0x28c>)
 801966e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019670:	429a      	cmp	r2, r3
 8019672:	d141      	bne.n	80196f8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019674:	4b86      	ldr	r3, [pc, #536]	@ (8019890 <tcp_receive+0x290>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	89db      	ldrh	r3, [r3, #14]
 801967a:	b29a      	uxth	r2, r3
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019682:	429a      	cmp	r2, r3
 8019684:	d938      	bls.n	80196f8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019686:	4b82      	ldr	r3, [pc, #520]	@ (8019890 <tcp_receive+0x290>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	89db      	ldrh	r3, [r3, #14]
 801968c:	b29a      	uxth	r2, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d205      	bcs.n	80196b0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80196b0:	4b75      	ldr	r3, [pc, #468]	@ (8019888 <tcp_receive+0x288>)
 80196b2:	681a      	ldr	r2, [r3, #0]
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 80196b8:	4b74      	ldr	r3, [pc, #464]	@ (801988c <tcp_receive+0x28c>)
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d10d      	bne.n	80196e6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d111      	bne.n	80196f8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2200      	movs	r2, #0
 80196d8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2201      	movs	r2, #1
 80196e0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80196e4:	e008      	b.n	80196f8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d003      	beq.n	80196f8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2200      	movs	r2, #0
 80196f4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80196f8:	4b64      	ldr	r3, [pc, #400]	@ (801988c <tcp_receive+0x28c>)
 80196fa:	681a      	ldr	r2, [r3, #0]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019700:	1ad3      	subs	r3, r2, r3
 8019702:	2b00      	cmp	r3, #0
 8019704:	dc53      	bgt.n	80197ae <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8019706:	4b63      	ldr	r3, [pc, #396]	@ (8019894 <tcp_receive+0x294>)
 8019708:	881b      	ldrh	r3, [r3, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d146      	bne.n	801979c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019712:	687a      	ldr	r2, [r7, #4]
 8019714:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8019718:	4413      	add	r3, r2
 801971a:	697a      	ldr	r2, [r7, #20]
 801971c:	429a      	cmp	r2, r3
 801971e:	d13d      	bne.n	801979c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019726:	2b00      	cmp	r3, #0
 8019728:	db38      	blt.n	801979c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801972e:	4b57      	ldr	r3, [pc, #348]	@ (801988c <tcp_receive+0x28c>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	429a      	cmp	r2, r3
 8019734:	d132      	bne.n	801979c <tcp_receive+0x19c>
              found_dupack = 1;
 8019736:	2301      	movs	r3, #1
 8019738:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019740:	2bff      	cmp	r3, #255	@ 0xff
 8019742:	d007      	beq.n	8019754 <tcp_receive+0x154>
                ++pcb->dupacks;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801974a:	3301      	adds	r3, #1
 801974c:	b2da      	uxtb	r2, r3
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801975a:	2b03      	cmp	r3, #3
 801975c:	d916      	bls.n	801978c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019768:	4413      	add	r3, r2
 801976a:	b29a      	uxth	r2, r3
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019772:	429a      	cmp	r2, r3
 8019774:	d912      	bls.n	801979c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019780:	4413      	add	r3, r2
 8019782:	b29a      	uxth	r2, r3
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801978a:	e007      	b.n	801979c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019792:	2b03      	cmp	r3, #3
 8019794:	d102      	bne.n	801979c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f002 fa8e 	bl	801bcb8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801979c:	69fb      	ldr	r3, [r7, #28]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	f040 816a 	bne.w	8019a78 <tcp_receive+0x478>
        pcb->dupacks = 0;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2200      	movs	r2, #0
 80197a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80197ac:	e164      	b.n	8019a78 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80197ae:	4b37      	ldr	r3, [pc, #220]	@ (801988c <tcp_receive+0x28c>)
 80197b0:	681a      	ldr	r2, [r3, #0]
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197b6:	1ad3      	subs	r3, r2, r3
 80197b8:	3b01      	subs	r3, #1
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f2c0 8108 	blt.w	80199d0 <tcp_receive+0x3d0>
 80197c0:	4b32      	ldr	r3, [pc, #200]	@ (801988c <tcp_receive+0x28c>)
 80197c2:	681a      	ldr	r2, [r3, #0]
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80197c8:	1ad3      	subs	r3, r2, r3
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	f300 8100 	bgt.w	80199d0 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	7e9b      	ldrb	r3, [r3, #26]
 80197d4:	f003 0304 	and.w	r3, r3, #4
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d00c      	beq.n	80197f6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7e9b      	ldrb	r3, [r3, #26]
 80197e0:	f023 0304 	bic.w	r3, r3, #4
 80197e4:	b2da      	uxtb	r2, r3
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	2200      	movs	r2, #0
 80197fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019804:	10db      	asrs	r3, r3, #3
 8019806:	b21b      	sxth	r3, r3
 8019808:	b29a      	uxth	r2, r3
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019810:	b29b      	uxth	r3, r3
 8019812:	4413      	add	r3, r2
 8019814:	b29b      	uxth	r3, r3
 8019816:	b21a      	sxth	r2, r3
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2200      	movs	r2, #0
 8019822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8019826:	4b19      	ldr	r3, [pc, #100]	@ (801988c <tcp_receive+0x28c>)
 8019828:	681a      	ldr	r2, [r3, #0]
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	7d1b      	ldrb	r3, [r3, #20]
 8019832:	2b03      	cmp	r3, #3
 8019834:	f240 8095 	bls.w	8019962 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019844:	429a      	cmp	r2, r3
 8019846:	d227      	bcs.n	8019898 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019852:	4413      	add	r3, r2
 8019854:	b29a      	uxth	r2, r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801985c:	429a      	cmp	r2, r3
 801985e:	f240 8080 	bls.w	8019962 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801986c:	4413      	add	r3, r2
 801986e:	b29a      	uxth	r2, r3
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019876:	e074      	b.n	8019962 <tcp_receive+0x362>
 8019878:	08026a88 	.word	0x08026a88
 801987c:	08026cac 	.word	0x08026cac
 8019880:	08026acc 	.word	0x08026acc
 8019884:	2000bdc0 	.word	0x2000bdc0
 8019888:	2000bdb4 	.word	0x2000bdb4
 801988c:	2000bdb8 	.word	0x2000bdb8
 8019890:	2000bda4 	.word	0x2000bda4
 8019894:	2000bdbe 	.word	0x2000bdbe
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198a2:	4619      	mov	r1, r3
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198a8:	fb01 f303 	mul.w	r3, r1, r3
 80198ac:	6879      	ldr	r1, [r7, #4]
 80198ae:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 80198b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	4413      	add	r3, r2
 80198ba:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80198c2:	8a7a      	ldrh	r2, [r7, #18]
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d94c      	bls.n	8019962 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	8a7a      	ldrh	r2, [r7, #18]
 80198cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80198d0:	e047      	b.n	8019962 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80198e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7fc fd1d 	bl	801632c <pbuf_clen>
 80198f2:	4603      	mov	r3, r0
 80198f4:	429c      	cmp	r4, r3
 80198f6:	d206      	bcs.n	8019906 <tcp_receive+0x306>
 80198f8:	4b70      	ldr	r3, [pc, #448]	@ (8019abc <tcp_receive+0x4bc>)
 80198fa:	f240 429e 	movw	r2, #1182	@ 0x49e
 80198fe:	4970      	ldr	r1, [pc, #448]	@ (8019ac0 <tcp_receive+0x4c0>)
 8019900:	4870      	ldr	r0, [pc, #448]	@ (8019ac4 <tcp_receive+0x4c4>)
 8019902:	f008 fc9d 	bl	8022240 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8019906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019908:	685b      	ldr	r3, [r3, #4]
 801990a:	4618      	mov	r0, r3
 801990c:	f7fc fd0e 	bl	801632c <pbuf_clen>
 8019910:	4603      	mov	r3, r0
 8019912:	461a      	mov	r2, r3
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801991a:	1a9b      	subs	r3, r3, r2
 801991c:	b29a      	uxth	r2, r3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8019924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019926:	891a      	ldrh	r2, [r3, #8]
 8019928:	4b67      	ldr	r3, [pc, #412]	@ (8019ac8 <tcp_receive+0x4c8>)
 801992a:	881b      	ldrh	r3, [r3, #0]
 801992c:	4413      	add	r3, r2
 801992e:	b29a      	uxth	r2, r3
 8019930:	4b65      	ldr	r3, [pc, #404]	@ (8019ac8 <tcp_receive+0x4c8>)
 8019932:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8019934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019936:	f7fe f899 	bl	8017a6c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019940:	2b00      	cmp	r3, #0
 8019942:	d00e      	beq.n	8019962 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019948:	2b00      	cmp	r3, #0
 801994a:	d10a      	bne.n	8019962 <tcp_receive+0x362>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019950:	2b00      	cmp	r3, #0
 8019952:	d106      	bne.n	8019962 <tcp_receive+0x362>
 8019954:	4b59      	ldr	r3, [pc, #356]	@ (8019abc <tcp_receive+0x4bc>)
 8019956:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 801995a:	495c      	ldr	r1, [pc, #368]	@ (8019acc <tcp_receive+0x4cc>)
 801995c:	4859      	ldr	r0, [pc, #356]	@ (8019ac4 <tcp_receive+0x4c4>)
 801995e:	f008 fc6f 	bl	8022240 <iprintf>
      while (pcb->unacked != NULL &&
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019966:	2b00      	cmp	r3, #0
 8019968:	d022      	beq.n	80199b0 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801996e:	68db      	ldr	r3, [r3, #12]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	4618      	mov	r0, r3
 8019974:	f7fb f9ad 	bl	8014cd2 <lwip_htonl>
 8019978:	4604      	mov	r4, r0
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801997e:	891b      	ldrh	r3, [r3, #8]
 8019980:	461d      	mov	r5, r3
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	899b      	ldrh	r3, [r3, #12]
 801998a:	b29b      	uxth	r3, r3
 801998c:	4618      	mov	r0, r3
 801998e:	f7fb f993 	bl	8014cb8 <lwip_htons>
 8019992:	4603      	mov	r3, r0
 8019994:	f003 0303 	and.w	r3, r3, #3
 8019998:	2b00      	cmp	r3, #0
 801999a:	d001      	beq.n	80199a0 <tcp_receive+0x3a0>
 801999c:	2301      	movs	r3, #1
 801999e:	e000      	b.n	80199a2 <tcp_receive+0x3a2>
 80199a0:	2300      	movs	r3, #0
 80199a2:	442b      	add	r3, r5
 80199a4:	18e2      	adds	r2, r4, r3
 80199a6:	4b4a      	ldr	r3, [pc, #296]	@ (8019ad0 <tcp_receive+0x4d0>)
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	dd90      	ble.n	80198d2 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d104      	bne.n	80199c2 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199be:	861a      	strh	r2, [r3, #48]	@ 0x30
 80199c0:	e002      	b.n	80199c8 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2200      	movs	r2, #0
 80199c6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	2200      	movs	r2, #0
 80199cc:	76da      	strb	r2, [r3, #27]
 80199ce:	e002      	b.n	80199d6 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	f001 fd65 	bl	801b4a0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80199d6:	e04f      	b.n	8019a78 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d103      	bne.n	80199f8 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	2200      	movs	r2, #0
 80199f4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80199fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a00:	685b      	ldr	r3, [r3, #4]
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7fc fc92 	bl	801632c <pbuf_clen>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	429c      	cmp	r4, r3
 8019a0c:	d206      	bcs.n	8019a1c <tcp_receive+0x41c>
 8019a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8019abc <tcp_receive+0x4bc>)
 8019a10:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8019a14:	492a      	ldr	r1, [pc, #168]	@ (8019ac0 <tcp_receive+0x4c0>)
 8019a16:	482b      	ldr	r0, [pc, #172]	@ (8019ac4 <tcp_receive+0x4c4>)
 8019a18:	f008 fc12 	bl	8022240 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a1e:	685b      	ldr	r3, [r3, #4]
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7fc fc83 	bl	801632c <pbuf_clen>
 8019a26:	4603      	mov	r3, r0
 8019a28:	461a      	mov	r2, r3
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019a30:	1a9b      	subs	r3, r3, r2
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8019a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a3c:	891a      	ldrh	r2, [r3, #8]
 8019a3e:	4b22      	ldr	r3, [pc, #136]	@ (8019ac8 <tcp_receive+0x4c8>)
 8019a40:	881b      	ldrh	r3, [r3, #0]
 8019a42:	4413      	add	r3, r2
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	4b20      	ldr	r3, [pc, #128]	@ (8019ac8 <tcp_receive+0x4c8>)
 8019a48:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8019a4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a4c:	f7fe f80e 	bl	8017a6c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d00e      	beq.n	8019a78 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d10a      	bne.n	8019a78 <tcp_receive+0x478>
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d106      	bne.n	8019a78 <tcp_receive+0x478>
 8019a6a:	4b14      	ldr	r3, [pc, #80]	@ (8019abc <tcp_receive+0x4bc>)
 8019a6c:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8019a70:	4916      	ldr	r1, [pc, #88]	@ (8019acc <tcp_receive+0x4cc>)
 8019a72:	4814      	ldr	r0, [pc, #80]	@ (8019ac4 <tcp_receive+0x4c4>)
 8019a74:	f008 fbe4 	bl	8022240 <iprintf>
    while (pcb->unsent != NULL &&
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d037      	beq.n	8019af0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019a80:	4b13      	ldr	r3, [pc, #76]	@ (8019ad0 <tcp_receive+0x4d0>)
 8019a82:	681c      	ldr	r4, [r3, #0]
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a88:	68db      	ldr	r3, [r3, #12]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7fb f920 	bl	8014cd2 <lwip_htonl>
 8019a92:	4605      	mov	r5, r0
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a98:	891b      	ldrh	r3, [r3, #8]
 8019a9a:	461e      	mov	r6, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019aa0:	68db      	ldr	r3, [r3, #12]
 8019aa2:	899b      	ldrh	r3, [r3, #12]
 8019aa4:	b29b      	uxth	r3, r3
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7fb f906 	bl	8014cb8 <lwip_htons>
 8019aac:	4603      	mov	r3, r0
 8019aae:	f003 0303 	and.w	r3, r3, #3
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d00e      	beq.n	8019ad4 <tcp_receive+0x4d4>
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	e00d      	b.n	8019ad6 <tcp_receive+0x4d6>
 8019aba:	bf00      	nop
 8019abc:	08026a88 	.word	0x08026a88
 8019ac0:	08026cc8 	.word	0x08026cc8
 8019ac4:	08026acc 	.word	0x08026acc
 8019ac8:	2000bdbc 	.word	0x2000bdbc
 8019acc:	08026cf0 	.word	0x08026cf0
 8019ad0:	2000bdb8 	.word	0x2000bdb8
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	4433      	add	r3, r6
 8019ad8:	442b      	add	r3, r5
 8019ada:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	db07      	blt.n	8019af0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8019d18 <tcp_receive+0x718>)
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ae8:	1ad3      	subs	r3, r2, r3
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	f77f af74 	ble.w	80199d8 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019af6:	4b89      	ldr	r3, [pc, #548]	@ (8019d1c <tcp_receive+0x71c>)
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	4413      	add	r3, r2
 8019afc:	b29a      	uxth	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d052      	beq.n	8019bb2 <tcp_receive+0x5b2>
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019b10:	4b81      	ldr	r3, [pc, #516]	@ (8019d18 <tcp_receive+0x718>)
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	1ad3      	subs	r3, r2, r3
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	da4b      	bge.n	8019bb2 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019b1a:	4b81      	ldr	r3, [pc, #516]	@ (8019d20 <tcp_receive+0x720>)
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	b29a      	uxth	r2, r3
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	1ad3      	subs	r3, r2, r3
 8019b28:	b29b      	uxth	r3, r3
 8019b2a:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8019b2c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b34:	10db      	asrs	r3, r3, #3
 8019b36:	b21b      	sxth	r3, r3
 8019b38:	b29b      	uxth	r3, r3
 8019b3a:	1ad3      	subs	r3, r2, r3
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b46:	b29a      	uxth	r2, r3
 8019b48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b4a:	4413      	add	r3, r2
 8019b4c:	b29b      	uxth	r3, r3
 8019b4e:	b21a      	sxth	r2, r3
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8019b54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	da03      	bge.n	8019b64 <tcp_receive+0x564>
        m = -m;
 8019b5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b5e:	425b      	negs	r3, r3
 8019b60:	b29b      	uxth	r3, r3
 8019b62:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8019b64:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019b6c:	109b      	asrs	r3, r3, #2
 8019b6e:	b21b      	sxth	r3, r3
 8019b70:	b29b      	uxth	r3, r3
 8019b72:	1ad3      	subs	r3, r2, r3
 8019b74:	b29b      	uxth	r3, r3
 8019b76:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b82:	4413      	add	r3, r2
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	b21a      	sxth	r2, r3
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b92:	10db      	asrs	r3, r3, #3
 8019b94:	b21b      	sxth	r3, r3
 8019b96:	b29a      	uxth	r2, r3
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019b9e:	b29b      	uxth	r3, r3
 8019ba0:	4413      	add	r3, r2
 8019ba2:	b29b      	uxth	r3, r3
 8019ba4:	b21a      	sxth	r2, r3
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8019d24 <tcp_receive+0x724>)
 8019bb4:	881b      	ldrh	r3, [r3, #0]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	f000 84f1 	beq.w	801a59e <tcp_receive+0xf9e>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	7d1b      	ldrb	r3, [r3, #20]
 8019bc0:	2b06      	cmp	r3, #6
 8019bc2:	f200 84ec 	bhi.w	801a59e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bca:	4b57      	ldr	r3, [pc, #348]	@ (8019d28 <tcp_receive+0x728>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	1ad3      	subs	r3, r2, r3
 8019bd0:	3b01      	subs	r3, #1
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	f2c0 80b8 	blt.w	8019d48 <tcp_receive+0x748>
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bdc:	4b51      	ldr	r3, [pc, #324]	@ (8019d24 <tcp_receive+0x724>)
 8019bde:	881b      	ldrh	r3, [r3, #0]
 8019be0:	4619      	mov	r1, r3
 8019be2:	4b51      	ldr	r3, [pc, #324]	@ (8019d28 <tcp_receive+0x728>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	440b      	add	r3, r1
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	3301      	adds	r3, #1
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	f300 80ab 	bgt.w	8019d48 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8019d2c <tcp_receive+0x72c>)
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8019d28 <tcp_receive+0x728>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	1ad3      	subs	r3, r2, r3
 8019c02:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019c04:	4b49      	ldr	r3, [pc, #292]	@ (8019d2c <tcp_receive+0x72c>)
 8019c06:	685b      	ldr	r3, [r3, #4]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d106      	bne.n	8019c1a <tcp_receive+0x61a>
 8019c0c:	4b48      	ldr	r3, [pc, #288]	@ (8019d30 <tcp_receive+0x730>)
 8019c0e:	f240 523c 	movw	r2, #1340	@ 0x53c
 8019c12:	4948      	ldr	r1, [pc, #288]	@ (8019d34 <tcp_receive+0x734>)
 8019c14:	4848      	ldr	r0, [pc, #288]	@ (8019d38 <tcp_receive+0x738>)
 8019c16:	f008 fb13 	bl	8022240 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8019c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c1c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8019c20:	4293      	cmp	r3, r2
 8019c22:	dd06      	ble.n	8019c32 <tcp_receive+0x632>
 8019c24:	4b42      	ldr	r3, [pc, #264]	@ (8019d30 <tcp_receive+0x730>)
 8019c26:	f240 523d 	movw	r2, #1341	@ 0x53d
 8019c2a:	4944      	ldr	r1, [pc, #272]	@ (8019d3c <tcp_receive+0x73c>)
 8019c2c:	4842      	ldr	r0, [pc, #264]	@ (8019d38 <tcp_receive+0x738>)
 8019c2e:	f008 fb07 	bl	8022240 <iprintf>
      if (inseg.p->len < off) {
 8019c32:	4b3e      	ldr	r3, [pc, #248]	@ (8019d2c <tcp_receive+0x72c>)
 8019c34:	685b      	ldr	r3, [r3, #4]
 8019c36:	895b      	ldrh	r3, [r3, #10]
 8019c38:	461a      	mov	r2, r3
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3c:	4293      	cmp	r3, r2
 8019c3e:	dd3e      	ble.n	8019cbe <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019c40:	4b3a      	ldr	r3, [pc, #232]	@ (8019d2c <tcp_receive+0x72c>)
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	891b      	ldrh	r3, [r3, #8]
 8019c46:	461a      	mov	r2, r3
 8019c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c4a:	4293      	cmp	r3, r2
 8019c4c:	dd06      	ble.n	8019c5c <tcp_receive+0x65c>
 8019c4e:	4b38      	ldr	r3, [pc, #224]	@ (8019d30 <tcp_receive+0x730>)
 8019c50:	f240 523f 	movw	r2, #1343	@ 0x53f
 8019c54:	493a      	ldr	r1, [pc, #232]	@ (8019d40 <tcp_receive+0x740>)
 8019c56:	4838      	ldr	r0, [pc, #224]	@ (8019d38 <tcp_receive+0x738>)
 8019c58:	f008 faf2 	bl	8022240 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019c5c:	4b33      	ldr	r3, [pc, #204]	@ (8019d2c <tcp_receive+0x72c>)
 8019c5e:	685b      	ldr	r3, [r3, #4]
 8019c60:	891a      	ldrh	r2, [r3, #8]
 8019c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	1ad3      	subs	r3, r2, r3
 8019c68:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8019c6a:	e00e      	b.n	8019c8a <tcp_receive+0x68a>
          off -= p->len;
 8019c6c:	69bb      	ldr	r3, [r7, #24]
 8019c6e:	895b      	ldrh	r3, [r3, #10]
 8019c70:	461a      	mov	r2, r3
 8019c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c74:	1a9b      	subs	r3, r3, r2
 8019c76:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8019c78:	69bb      	ldr	r3, [r7, #24]
 8019c7a:	8a3a      	ldrh	r2, [r7, #16]
 8019c7c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8019c7e:	69bb      	ldr	r3, [r7, #24]
 8019c80:	2200      	movs	r2, #0
 8019c82:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8019c84:	69bb      	ldr	r3, [r7, #24]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8019c8a:	69bb      	ldr	r3, [r7, #24]
 8019c8c:	895b      	ldrh	r3, [r3, #10]
 8019c8e:	461a      	mov	r2, r3
 8019c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c92:	4293      	cmp	r3, r2
 8019c94:	dcea      	bgt.n	8019c6c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8019c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	425b      	negs	r3, r3
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	b21b      	sxth	r3, r3
 8019ca0:	4619      	mov	r1, r3
 8019ca2:	69b8      	ldr	r0, [r7, #24]
 8019ca4:	f7fc fa8a 	bl	80161bc <pbuf_header>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d01c      	beq.n	8019ce8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8019cae:	4b20      	ldr	r3, [pc, #128]	@ (8019d30 <tcp_receive+0x730>)
 8019cb0:	f240 524c 	movw	r2, #1356	@ 0x54c
 8019cb4:	4923      	ldr	r1, [pc, #140]	@ (8019d44 <tcp_receive+0x744>)
 8019cb6:	4820      	ldr	r0, [pc, #128]	@ (8019d38 <tcp_receive+0x738>)
 8019cb8:	f008 fac2 	bl	8022240 <iprintf>
 8019cbc:	e014      	b.n	8019ce8 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8019cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8019d2c <tcp_receive+0x72c>)
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019cc4:	b292      	uxth	r2, r2
 8019cc6:	4252      	negs	r2, r2
 8019cc8:	b292      	uxth	r2, r2
 8019cca:	b212      	sxth	r2, r2
 8019ccc:	4611      	mov	r1, r2
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7fc fa74 	bl	80161bc <pbuf_header>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d006      	beq.n	8019ce8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8019cda:	4b15      	ldr	r3, [pc, #84]	@ (8019d30 <tcp_receive+0x730>)
 8019cdc:	f240 5251 	movw	r2, #1361	@ 0x551
 8019ce0:	4918      	ldr	r1, [pc, #96]	@ (8019d44 <tcp_receive+0x744>)
 8019ce2:	4815      	ldr	r0, [pc, #84]	@ (8019d38 <tcp_receive+0x738>)
 8019ce4:	f008 faac 	bl	8022240 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8019ce8:	4b10      	ldr	r3, [pc, #64]	@ (8019d2c <tcp_receive+0x72c>)
 8019cea:	891a      	ldrh	r2, [r3, #8]
 8019cec:	4b0e      	ldr	r3, [pc, #56]	@ (8019d28 <tcp_receive+0x728>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	b299      	uxth	r1, r3
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	1acb      	subs	r3, r1, r3
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	4413      	add	r3, r2
 8019cfe:	b29a      	uxth	r2, r3
 8019d00:	4b0a      	ldr	r3, [pc, #40]	@ (8019d2c <tcp_receive+0x72c>)
 8019d02:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d08:	4a07      	ldr	r2, [pc, #28]	@ (8019d28 <tcp_receive+0x728>)
 8019d0a:	6013      	str	r3, [r2, #0]
 8019d0c:	4b07      	ldr	r3, [pc, #28]	@ (8019d2c <tcp_receive+0x72c>)
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	4a05      	ldr	r2, [pc, #20]	@ (8019d28 <tcp_receive+0x728>)
 8019d12:	6812      	ldr	r2, [r2, #0]
 8019d14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019d16:	e025      	b.n	8019d64 <tcp_receive+0x764>
 8019d18:	2000bdb8 	.word	0x2000bdb8
 8019d1c:	2000bdbc 	.word	0x2000bdbc
 8019d20:	2000bd7c 	.word	0x2000bd7c
 8019d24:	2000bdbe 	.word	0x2000bdbe
 8019d28:	2000bdb4 	.word	0x2000bdb4
 8019d2c:	2000bd94 	.word	0x2000bd94
 8019d30:	08026a88 	.word	0x08026a88
 8019d34:	08026d10 	.word	0x08026d10
 8019d38:	08026acc 	.word	0x08026acc
 8019d3c:	08026d20 	.word	0x08026d20
 8019d40:	08026d30 	.word	0x08026d30
 8019d44:	08026d40 	.word	0x08026d40
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019d48:	4b87      	ldr	r3, [pc, #540]	@ (8019f68 <tcp_receive+0x968>)
 8019d4a:	681a      	ldr	r2, [r3, #0]
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	da06      	bge.n	8019d64 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	7e9b      	ldrb	r3, [r3, #26]
 8019d5a:	f043 0302 	orr.w	r3, r3, #2
 8019d5e:	b2da      	uxtb	r2, r3
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019d64:	4b80      	ldr	r3, [pc, #512]	@ (8019f68 <tcp_receive+0x968>)
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d6c:	1ad3      	subs	r3, r2, r3
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	f2c0 8410 	blt.w	801a594 <tcp_receive+0xf94>
 8019d74:	4b7c      	ldr	r3, [pc, #496]	@ (8019f68 <tcp_receive+0x968>)
 8019d76:	681a      	ldr	r2, [r3, #0]
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d7c:	6879      	ldr	r1, [r7, #4]
 8019d7e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019d80:	440b      	add	r3, r1
 8019d82:	1ad3      	subs	r3, r2, r3
 8019d84:	3301      	adds	r3, #1
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	f300 8404 	bgt.w	801a594 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019d90:	4b75      	ldr	r3, [pc, #468]	@ (8019f68 <tcp_receive+0x968>)
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	f040 8287 	bne.w	801a2a8 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019d9a:	4b74      	ldr	r3, [pc, #464]	@ (8019f6c <tcp_receive+0x96c>)
 8019d9c:	891c      	ldrh	r4, [r3, #8]
 8019d9e:	4b73      	ldr	r3, [pc, #460]	@ (8019f6c <tcp_receive+0x96c>)
 8019da0:	68db      	ldr	r3, [r3, #12]
 8019da2:	899b      	ldrh	r3, [r3, #12]
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7fa ff86 	bl	8014cb8 <lwip_htons>
 8019dac:	4603      	mov	r3, r0
 8019dae:	f003 0303 	and.w	r3, r3, #3
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d001      	beq.n	8019dba <tcp_receive+0x7ba>
 8019db6:	2301      	movs	r3, #1
 8019db8:	e000      	b.n	8019dbc <tcp_receive+0x7bc>
 8019dba:	2300      	movs	r3, #0
 8019dbc:	4423      	add	r3, r4
 8019dbe:	b29a      	uxth	r2, r3
 8019dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8019f70 <tcp_receive+0x970>)
 8019dc2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019dc8:	4b69      	ldr	r3, [pc, #420]	@ (8019f70 <tcp_receive+0x970>)
 8019dca:	881b      	ldrh	r3, [r3, #0]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d26e      	bcs.n	8019eae <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019dd0:	4b66      	ldr	r3, [pc, #408]	@ (8019f6c <tcp_receive+0x96c>)
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	899b      	ldrh	r3, [r3, #12]
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f7fa ff6d 	bl	8014cb8 <lwip_htons>
 8019dde:	4603      	mov	r3, r0
 8019de0:	f003 0301 	and.w	r3, r3, #1
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d01b      	beq.n	8019e20 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019de8:	4b60      	ldr	r3, [pc, #384]	@ (8019f6c <tcp_receive+0x96c>)
 8019dea:	68db      	ldr	r3, [r3, #12]
 8019dec:	899b      	ldrh	r3, [r3, #12]
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019df4:	b29c      	uxth	r4, r3
 8019df6:	4b5d      	ldr	r3, [pc, #372]	@ (8019f6c <tcp_receive+0x96c>)
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	899b      	ldrh	r3, [r3, #12]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7fa ff5a 	bl	8014cb8 <lwip_htons>
 8019e04:	4603      	mov	r3, r0
 8019e06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7fa ff53 	bl	8014cb8 <lwip_htons>
 8019e12:	4603      	mov	r3, r0
 8019e14:	461a      	mov	r2, r3
 8019e16:	4b55      	ldr	r3, [pc, #340]	@ (8019f6c <tcp_receive+0x96c>)
 8019e18:	68db      	ldr	r3, [r3, #12]
 8019e1a:	4322      	orrs	r2, r4
 8019e1c:	b292      	uxth	r2, r2
 8019e1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019e24:	4b51      	ldr	r3, [pc, #324]	@ (8019f6c <tcp_receive+0x96c>)
 8019e26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e28:	4b50      	ldr	r3, [pc, #320]	@ (8019f6c <tcp_receive+0x96c>)
 8019e2a:	68db      	ldr	r3, [r3, #12]
 8019e2c:	899b      	ldrh	r3, [r3, #12]
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7fa ff41 	bl	8014cb8 <lwip_htons>
 8019e36:	4603      	mov	r3, r0
 8019e38:	f003 0302 	and.w	r3, r3, #2
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d005      	beq.n	8019e4c <tcp_receive+0x84c>
            inseg.len -= 1;
 8019e40:	4b4a      	ldr	r3, [pc, #296]	@ (8019f6c <tcp_receive+0x96c>)
 8019e42:	891b      	ldrh	r3, [r3, #8]
 8019e44:	3b01      	subs	r3, #1
 8019e46:	b29a      	uxth	r2, r3
 8019e48:	4b48      	ldr	r3, [pc, #288]	@ (8019f6c <tcp_receive+0x96c>)
 8019e4a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019e4c:	4b47      	ldr	r3, [pc, #284]	@ (8019f6c <tcp_receive+0x96c>)
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	4a46      	ldr	r2, [pc, #280]	@ (8019f6c <tcp_receive+0x96c>)
 8019e52:	8912      	ldrh	r2, [r2, #8]
 8019e54:	4611      	mov	r1, r2
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7fc f860 	bl	8015f1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019e5c:	4b43      	ldr	r3, [pc, #268]	@ (8019f6c <tcp_receive+0x96c>)
 8019e5e:	891c      	ldrh	r4, [r3, #8]
 8019e60:	4b42      	ldr	r3, [pc, #264]	@ (8019f6c <tcp_receive+0x96c>)
 8019e62:	68db      	ldr	r3, [r3, #12]
 8019e64:	899b      	ldrh	r3, [r3, #12]
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7fa ff25 	bl	8014cb8 <lwip_htons>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	f003 0303 	and.w	r3, r3, #3
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d001      	beq.n	8019e7c <tcp_receive+0x87c>
 8019e78:	2301      	movs	r3, #1
 8019e7a:	e000      	b.n	8019e7e <tcp_receive+0x87e>
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	4423      	add	r3, r4
 8019e80:	b29a      	uxth	r2, r3
 8019e82:	4b3b      	ldr	r3, [pc, #236]	@ (8019f70 <tcp_receive+0x970>)
 8019e84:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e86:	4b3a      	ldr	r3, [pc, #232]	@ (8019f70 <tcp_receive+0x970>)
 8019e88:	881b      	ldrh	r3, [r3, #0]
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	4b36      	ldr	r3, [pc, #216]	@ (8019f68 <tcp_receive+0x968>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	441a      	add	r2, r3
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e96:	6879      	ldr	r1, [r7, #4]
 8019e98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019e9a:	440b      	add	r3, r1
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d006      	beq.n	8019eae <tcp_receive+0x8ae>
 8019ea0:	4b34      	ldr	r3, [pc, #208]	@ (8019f74 <tcp_receive+0x974>)
 8019ea2:	f240 527e 	movw	r2, #1406	@ 0x57e
 8019ea6:	4934      	ldr	r1, [pc, #208]	@ (8019f78 <tcp_receive+0x978>)
 8019ea8:	4834      	ldr	r0, [pc, #208]	@ (8019f7c <tcp_receive+0x97c>)
 8019eaa:	f008 f9c9 	bl	8022240 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	f000 80e1 	beq.w	801a07a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8019f6c <tcp_receive+0x96c>)
 8019eba:	68db      	ldr	r3, [r3, #12]
 8019ebc:	899b      	ldrh	r3, [r3, #12]
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f7fa fef9 	bl	8014cb8 <lwip_htons>
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	f003 0301 	and.w	r3, r3, #1
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d010      	beq.n	8019ef2 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019ed0:	e00a      	b.n	8019ee8 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ed6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019edc:	681a      	ldr	r2, [r3, #0]
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8019ee2:	68b8      	ldr	r0, [r7, #8]
 8019ee4:	f7fd fdc2 	bl	8017a6c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d1f0      	bne.n	8019ed2 <tcp_receive+0x8d2>
 8019ef0:	e0c3      	b.n	801a07a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019ef8:	e04f      	b.n	8019f9a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019efc:	68db      	ldr	r3, [r3, #12]
 8019efe:	899b      	ldrh	r3, [r3, #12]
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7fa fed8 	bl	8014cb8 <lwip_htons>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	f003 0301 	and.w	r3, r3, #1
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d03b      	beq.n	8019f8a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f12:	4b16      	ldr	r3, [pc, #88]	@ (8019f6c <tcp_receive+0x96c>)
 8019f14:	68db      	ldr	r3, [r3, #12]
 8019f16:	899b      	ldrh	r3, [r3, #12]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7fa fecc 	bl	8014cb8 <lwip_htons>
 8019f20:	4603      	mov	r3, r0
 8019f22:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d12f      	bne.n	8019f8a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019f2a:	4b10      	ldr	r3, [pc, #64]	@ (8019f6c <tcp_receive+0x96c>)
 8019f2c:	68db      	ldr	r3, [r3, #12]
 8019f2e:	899b      	ldrh	r3, [r3, #12]
 8019f30:	b29c      	uxth	r4, r3
 8019f32:	2001      	movs	r0, #1
 8019f34:	f7fa fec0 	bl	8014cb8 <lwip_htons>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8019f6c <tcp_receive+0x96c>)
 8019f3e:	68db      	ldr	r3, [r3, #12]
 8019f40:	4322      	orrs	r2, r4
 8019f42:	b292      	uxth	r2, r2
 8019f44:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019f46:	4b09      	ldr	r3, [pc, #36]	@ (8019f6c <tcp_receive+0x96c>)
 8019f48:	891c      	ldrh	r4, [r3, #8]
 8019f4a:	4b08      	ldr	r3, [pc, #32]	@ (8019f6c <tcp_receive+0x96c>)
 8019f4c:	68db      	ldr	r3, [r3, #12]
 8019f4e:	899b      	ldrh	r3, [r3, #12]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7fa feb0 	bl	8014cb8 <lwip_htons>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	f003 0303 	and.w	r3, r3, #3
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d00e      	beq.n	8019f80 <tcp_receive+0x980>
 8019f62:	2301      	movs	r3, #1
 8019f64:	e00d      	b.n	8019f82 <tcp_receive+0x982>
 8019f66:	bf00      	nop
 8019f68:	2000bdb4 	.word	0x2000bdb4
 8019f6c:	2000bd94 	.word	0x2000bd94
 8019f70:	2000bdbe 	.word	0x2000bdbe
 8019f74:	08026a88 	.word	0x08026a88
 8019f78:	08026d54 	.word	0x08026d54
 8019f7c:	08026acc 	.word	0x08026acc
 8019f80:	2300      	movs	r3, #0
 8019f82:	4423      	add	r3, r4
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	4b95      	ldr	r3, [pc, #596]	@ (801a1dc <tcp_receive+0xbdc>)
 8019f88:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8019f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8019f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8019f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019f96:	f7fd fd69 	bl	8017a6c <tcp_seg_free>
            while (next &&
 8019f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d00e      	beq.n	8019fbe <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019fa0:	4b8e      	ldr	r3, [pc, #568]	@ (801a1dc <tcp_receive+0xbdc>)
 8019fa2:	881b      	ldrh	r3, [r3, #0]
 8019fa4:	461a      	mov	r2, r3
 8019fa6:	4b8e      	ldr	r3, [pc, #568]	@ (801a1e0 <tcp_receive+0xbe0>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	441a      	add	r2, r3
 8019fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fae:	68db      	ldr	r3, [r3, #12]
 8019fb0:	685b      	ldr	r3, [r3, #4]
 8019fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019fb4:	8909      	ldrh	r1, [r1, #8]
 8019fb6:	440b      	add	r3, r1
 8019fb8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	da9d      	bge.n	8019efa <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d057      	beq.n	801a074 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8019fc4:	4b85      	ldr	r3, [pc, #532]	@ (801a1dc <tcp_receive+0xbdc>)
 8019fc6:	881b      	ldrh	r3, [r3, #0]
 8019fc8:	461a      	mov	r2, r3
 8019fca:	4b85      	ldr	r3, [pc, #532]	@ (801a1e0 <tcp_receive+0xbe0>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	441a      	add	r2, r3
 8019fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fd2:	68db      	ldr	r3, [r3, #12]
 8019fd4:	685b      	ldr	r3, [r3, #4]
 8019fd6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	dd4b      	ble.n	801a074 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fde:	68db      	ldr	r3, [r3, #12]
 8019fe0:	685b      	ldr	r3, [r3, #4]
 8019fe2:	b29a      	uxth	r2, r3
 8019fe4:	4b7e      	ldr	r3, [pc, #504]	@ (801a1e0 <tcp_receive+0xbe0>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	1ad3      	subs	r3, r2, r3
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	4b7d      	ldr	r3, [pc, #500]	@ (801a1e4 <tcp_receive+0xbe4>)
 8019ff0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ff2:	4b7c      	ldr	r3, [pc, #496]	@ (801a1e4 <tcp_receive+0xbe4>)
 8019ff4:	68db      	ldr	r3, [r3, #12]
 8019ff6:	899b      	ldrh	r3, [r3, #12]
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7fa fe5c 	bl	8014cb8 <lwip_htons>
 801a000:	4603      	mov	r3, r0
 801a002:	f003 0302 	and.w	r3, r3, #2
 801a006:	2b00      	cmp	r3, #0
 801a008:	d005      	beq.n	801a016 <tcp_receive+0xa16>
                inseg.len -= 1;
 801a00a:	4b76      	ldr	r3, [pc, #472]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a00c:	891b      	ldrh	r3, [r3, #8]
 801a00e:	3b01      	subs	r3, #1
 801a010:	b29a      	uxth	r2, r3
 801a012:	4b74      	ldr	r3, [pc, #464]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a014:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a016:	4b73      	ldr	r3, [pc, #460]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a018:	685b      	ldr	r3, [r3, #4]
 801a01a:	4a72      	ldr	r2, [pc, #456]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a01c:	8912      	ldrh	r2, [r2, #8]
 801a01e:	4611      	mov	r1, r2
 801a020:	4618      	mov	r0, r3
 801a022:	f7fb ff7b 	bl	8015f1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a026:	4b6f      	ldr	r3, [pc, #444]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a028:	891c      	ldrh	r4, [r3, #8]
 801a02a:	4b6e      	ldr	r3, [pc, #440]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a02c:	68db      	ldr	r3, [r3, #12]
 801a02e:	899b      	ldrh	r3, [r3, #12]
 801a030:	b29b      	uxth	r3, r3
 801a032:	4618      	mov	r0, r3
 801a034:	f7fa fe40 	bl	8014cb8 <lwip_htons>
 801a038:	4603      	mov	r3, r0
 801a03a:	f003 0303 	and.w	r3, r3, #3
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d001      	beq.n	801a046 <tcp_receive+0xa46>
 801a042:	2301      	movs	r3, #1
 801a044:	e000      	b.n	801a048 <tcp_receive+0xa48>
 801a046:	2300      	movs	r3, #0
 801a048:	4423      	add	r3, r4
 801a04a:	b29a      	uxth	r2, r3
 801a04c:	4b63      	ldr	r3, [pc, #396]	@ (801a1dc <tcp_receive+0xbdc>)
 801a04e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a050:	4b62      	ldr	r3, [pc, #392]	@ (801a1dc <tcp_receive+0xbdc>)
 801a052:	881b      	ldrh	r3, [r3, #0]
 801a054:	461a      	mov	r2, r3
 801a056:	4b62      	ldr	r3, [pc, #392]	@ (801a1e0 <tcp_receive+0xbe0>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	441a      	add	r2, r3
 801a05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	685b      	ldr	r3, [r3, #4]
 801a062:	429a      	cmp	r2, r3
 801a064:	d006      	beq.n	801a074 <tcp_receive+0xa74>
 801a066:	4b60      	ldr	r3, [pc, #384]	@ (801a1e8 <tcp_receive+0xbe8>)
 801a068:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801a06c:	495f      	ldr	r1, [pc, #380]	@ (801a1ec <tcp_receive+0xbec>)
 801a06e:	4860      	ldr	r0, [pc, #384]	@ (801a1f0 <tcp_receive+0xbf0>)
 801a070:	f008 f8e6 	bl	8022240 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a078:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a07a:	4b58      	ldr	r3, [pc, #352]	@ (801a1dc <tcp_receive+0xbdc>)
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	461a      	mov	r2, r3
 801a080:	4b57      	ldr	r3, [pc, #348]	@ (801a1e0 <tcp_receive+0xbe0>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	441a      	add	r2, r3
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a08e:	4b53      	ldr	r3, [pc, #332]	@ (801a1dc <tcp_receive+0xbdc>)
 801a090:	881b      	ldrh	r3, [r3, #0]
 801a092:	429a      	cmp	r2, r3
 801a094:	d206      	bcs.n	801a0a4 <tcp_receive+0xaa4>
 801a096:	4b54      	ldr	r3, [pc, #336]	@ (801a1e8 <tcp_receive+0xbe8>)
 801a098:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a09c:	4955      	ldr	r1, [pc, #340]	@ (801a1f4 <tcp_receive+0xbf4>)
 801a09e:	4854      	ldr	r0, [pc, #336]	@ (801a1f0 <tcp_receive+0xbf0>)
 801a0a0:	f008 f8ce 	bl	8022240 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a0a8:	4b4c      	ldr	r3, [pc, #304]	@ (801a1dc <tcp_receive+0xbdc>)
 801a0aa:	881b      	ldrh	r3, [r3, #0]
 801a0ac:	1ad3      	subs	r3, r2, r3
 801a0ae:	b29a      	uxth	r2, r3
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f7fd f847 	bl	8017148 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a0ba:	4b4a      	ldr	r3, [pc, #296]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a0bc:	685b      	ldr	r3, [r3, #4]
 801a0be:	891b      	ldrh	r3, [r3, #8]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d006      	beq.n	801a0d2 <tcp_receive+0xad2>
          recv_data = inseg.p;
 801a0c4:	4b47      	ldr	r3, [pc, #284]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a0c6:	685b      	ldr	r3, [r3, #4]
 801a0c8:	4a4b      	ldr	r2, [pc, #300]	@ (801a1f8 <tcp_receive+0xbf8>)
 801a0ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a0cc:	4b45      	ldr	r3, [pc, #276]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a0d2:	4b44      	ldr	r3, [pc, #272]	@ (801a1e4 <tcp_receive+0xbe4>)
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	899b      	ldrh	r3, [r3, #12]
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7fa fdec 	bl	8014cb8 <lwip_htons>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	f003 0301 	and.w	r3, r3, #1
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f000 80b4 	beq.w	801a254 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a0ec:	4b43      	ldr	r3, [pc, #268]	@ (801a1fc <tcp_receive+0xbfc>)
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	f043 0320 	orr.w	r3, r3, #32
 801a0f4:	b2da      	uxtb	r2, r3
 801a0f6:	4b41      	ldr	r3, [pc, #260]	@ (801a1fc <tcp_receive+0xbfc>)
 801a0f8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a0fa:	e0ab      	b.n	801a254 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a100:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a106:	68db      	ldr	r3, [r3, #12]
 801a108:	685b      	ldr	r3, [r3, #4]
 801a10a:	4a35      	ldr	r2, [pc, #212]	@ (801a1e0 <tcp_receive+0xbe0>)
 801a10c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	891b      	ldrh	r3, [r3, #8]
 801a112:	461c      	mov	r4, r3
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	68db      	ldr	r3, [r3, #12]
 801a118:	899b      	ldrh	r3, [r3, #12]
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7fa fdcb 	bl	8014cb8 <lwip_htons>
 801a122:	4603      	mov	r3, r0
 801a124:	f003 0303 	and.w	r3, r3, #3
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d001      	beq.n	801a130 <tcp_receive+0xb30>
 801a12c:	2301      	movs	r3, #1
 801a12e:	e000      	b.n	801a132 <tcp_receive+0xb32>
 801a130:	2300      	movs	r3, #0
 801a132:	191a      	adds	r2, r3, r4
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a138:	441a      	add	r2, r3
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a142:	461c      	mov	r4, r3
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	891b      	ldrh	r3, [r3, #8]
 801a148:	461d      	mov	r5, r3
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	68db      	ldr	r3, [r3, #12]
 801a14e:	899b      	ldrh	r3, [r3, #12]
 801a150:	b29b      	uxth	r3, r3
 801a152:	4618      	mov	r0, r3
 801a154:	f7fa fdb0 	bl	8014cb8 <lwip_htons>
 801a158:	4603      	mov	r3, r0
 801a15a:	f003 0303 	and.w	r3, r3, #3
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d001      	beq.n	801a166 <tcp_receive+0xb66>
 801a162:	2301      	movs	r3, #1
 801a164:	e000      	b.n	801a168 <tcp_receive+0xb68>
 801a166:	2300      	movs	r3, #0
 801a168:	442b      	add	r3, r5
 801a16a:	429c      	cmp	r4, r3
 801a16c:	d206      	bcs.n	801a17c <tcp_receive+0xb7c>
 801a16e:	4b1e      	ldr	r3, [pc, #120]	@ (801a1e8 <tcp_receive+0xbe8>)
 801a170:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 801a174:	4922      	ldr	r1, [pc, #136]	@ (801a200 <tcp_receive+0xc00>)
 801a176:	481e      	ldr	r0, [pc, #120]	@ (801a1f0 <tcp_receive+0xbf0>)
 801a178:	f008 f862 	bl	8022240 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	891b      	ldrh	r3, [r3, #8]
 801a180:	461c      	mov	r4, r3
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	68db      	ldr	r3, [r3, #12]
 801a186:	899b      	ldrh	r3, [r3, #12]
 801a188:	b29b      	uxth	r3, r3
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7fa fd94 	bl	8014cb8 <lwip_htons>
 801a190:	4603      	mov	r3, r0
 801a192:	f003 0303 	and.w	r3, r3, #3
 801a196:	2b00      	cmp	r3, #0
 801a198:	d001      	beq.n	801a19e <tcp_receive+0xb9e>
 801a19a:	2301      	movs	r3, #1
 801a19c:	e000      	b.n	801a1a0 <tcp_receive+0xba0>
 801a19e:	2300      	movs	r3, #0
 801a1a0:	1919      	adds	r1, r3, r4
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a1a6:	b28b      	uxth	r3, r1
 801a1a8:	1ad3      	subs	r3, r2, r3
 801a1aa:	b29a      	uxth	r2, r3
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f7fc ffc9 	bl	8017148 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	685b      	ldr	r3, [r3, #4]
 801a1ba:	891b      	ldrh	r3, [r3, #8]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d028      	beq.n	801a212 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a1c0:	4b0d      	ldr	r3, [pc, #52]	@ (801a1f8 <tcp_receive+0xbf8>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d01d      	beq.n	801a204 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 801a1c8:	4b0b      	ldr	r3, [pc, #44]	@ (801a1f8 <tcp_receive+0xbf8>)
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	685b      	ldr	r3, [r3, #4]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	4610      	mov	r0, r2
 801a1d4:	f7fc f8e2 	bl	801639c <pbuf_cat>
 801a1d8:	e018      	b.n	801a20c <tcp_receive+0xc0c>
 801a1da:	bf00      	nop
 801a1dc:	2000bdbe 	.word	0x2000bdbe
 801a1e0:	2000bdb4 	.word	0x2000bdb4
 801a1e4:	2000bd94 	.word	0x2000bd94
 801a1e8:	08026a88 	.word	0x08026a88
 801a1ec:	08026d8c 	.word	0x08026d8c
 801a1f0:	08026acc 	.word	0x08026acc
 801a1f4:	08026dc8 	.word	0x08026dc8
 801a1f8:	2000bdc4 	.word	0x2000bdc4
 801a1fc:	2000bdc1 	.word	0x2000bdc1
 801a200:	08026de8 	.word	0x08026de8
            } else {
              recv_data = cseg->p;
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	685b      	ldr	r3, [r3, #4]
 801a208:	4a71      	ldr	r2, [pc, #452]	@ (801a3d0 <tcp_receive+0xdd0>)
 801a20a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	2200      	movs	r2, #0
 801a210:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	68db      	ldr	r3, [r3, #12]
 801a216:	899b      	ldrh	r3, [r3, #12]
 801a218:	b29b      	uxth	r3, r3
 801a21a:	4618      	mov	r0, r3
 801a21c:	f7fa fd4c 	bl	8014cb8 <lwip_htons>
 801a220:	4603      	mov	r3, r0
 801a222:	f003 0301 	and.w	r3, r3, #1
 801a226:	2b00      	cmp	r3, #0
 801a228:	d00d      	beq.n	801a246 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a22a:	4b6a      	ldr	r3, [pc, #424]	@ (801a3d4 <tcp_receive+0xdd4>)
 801a22c:	781b      	ldrb	r3, [r3, #0]
 801a22e:	f043 0320 	orr.w	r3, r3, #32
 801a232:	b2da      	uxtb	r2, r3
 801a234:	4b67      	ldr	r3, [pc, #412]	@ (801a3d4 <tcp_receive+0xdd4>)
 801a236:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	7d1b      	ldrb	r3, [r3, #20]
 801a23c:	2b04      	cmp	r3, #4
 801a23e:	d102      	bne.n	801a246 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2207      	movs	r2, #7
 801a244:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	681a      	ldr	r2, [r3, #0]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 801a24e:	68f8      	ldr	r0, [r7, #12]
 801a250:	f7fd fc0c 	bl	8017a6c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d008      	beq.n	801a26e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	685a      	ldr	r2, [r3, #4]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801a268:	429a      	cmp	r2, r3
 801a26a:	f43f af47 	beq.w	801a0fc <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	7e9b      	ldrb	r3, [r3, #26]
 801a272:	f003 0301 	and.w	r3, r3, #1
 801a276:	2b00      	cmp	r3, #0
 801a278:	d00e      	beq.n	801a298 <tcp_receive+0xc98>
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	7e9b      	ldrb	r3, [r3, #26]
 801a27e:	f023 0301 	bic.w	r3, r3, #1
 801a282:	b2da      	uxtb	r2, r3
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	769a      	strb	r2, [r3, #26]
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	7e9b      	ldrb	r3, [r3, #26]
 801a28c:	f043 0302 	orr.w	r3, r3, #2
 801a290:	b2da      	uxtb	r2, r3
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a296:	e181      	b.n	801a59c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	7e9b      	ldrb	r3, [r3, #26]
 801a29c:	f043 0301 	orr.w	r3, r3, #1
 801a2a0:	b2da      	uxtb	r2, r3
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a2a6:	e179      	b.n	801a59c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f001 f8f9 	bl	801b4a0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d106      	bne.n	801a2c4 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a2b6:	4848      	ldr	r0, [pc, #288]	@ (801a3d8 <tcp_receive+0xdd8>)
 801a2b8:	f7fd fbfe 	bl	8017ab8 <tcp_seg_copy>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 801a2c2:	e16b      	b.n	801a59c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a2ce:	e150      	b.n	801a572 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 801a2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2d2:	68db      	ldr	r3, [r3, #12]
 801a2d4:	685a      	ldr	r2, [r3, #4]
 801a2d6:	4b41      	ldr	r3, [pc, #260]	@ (801a3dc <tcp_receive+0xddc>)
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d11d      	bne.n	801a31a <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a2de:	4b3e      	ldr	r3, [pc, #248]	@ (801a3d8 <tcp_receive+0xdd8>)
 801a2e0:	891a      	ldrh	r2, [r3, #8]
 801a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2e4:	891b      	ldrh	r3, [r3, #8]
 801a2e6:	429a      	cmp	r2, r3
 801a2e8:	f240 8148 	bls.w	801a57c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801a2ec:	483a      	ldr	r0, [pc, #232]	@ (801a3d8 <tcp_receive+0xdd8>)
 801a2ee:	f7fd fbe3 	bl	8017ab8 <tcp_seg_copy>
 801a2f2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	f000 8142 	beq.w	801a580 <tcp_receive+0xf80>
                  if (prev != NULL) {
 801a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d003      	beq.n	801a30a <tcp_receive+0xd0a>
                    prev->next = cseg;
 801a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a304:	68fa      	ldr	r2, [r7, #12]
 801a306:	601a      	str	r2, [r3, #0]
 801a308:	e002      	b.n	801a310 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	68fa      	ldr	r2, [r7, #12]
 801a30e:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a312:	68f8      	ldr	r0, [r7, #12]
 801a314:	f7ff f8fe 	bl	8019514 <tcp_oos_insert_segment>
                }
                break;
 801a318:	e132      	b.n	801a580 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d117      	bne.n	801a350 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a320:	4b2e      	ldr	r3, [pc, #184]	@ (801a3dc <tcp_receive+0xddc>)
 801a322:	681a      	ldr	r2, [r3, #0]
 801a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a326:	68db      	ldr	r3, [r3, #12]
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	1ad3      	subs	r3, r2, r3
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	da57      	bge.n	801a3e0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 801a330:	4829      	ldr	r0, [pc, #164]	@ (801a3d8 <tcp_receive+0xdd8>)
 801a332:	f7fd fbc1 	bl	8017ab8 <tcp_seg_copy>
 801a336:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f000 8122 	beq.w	801a584 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	68fa      	ldr	r2, [r7, #12]
 801a344:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a348:	68f8      	ldr	r0, [r7, #12]
 801a34a:	f7ff f8e3 	bl	8019514 <tcp_oos_insert_segment>
                  }
                  break;
 801a34e:	e119      	b.n	801a584 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a350:	4b22      	ldr	r3, [pc, #136]	@ (801a3dc <tcp_receive+0xddc>)
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a356:	68db      	ldr	r3, [r3, #12]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	1ad3      	subs	r3, r2, r3
 801a35c:	3b01      	subs	r3, #1
 801a35e:	2b00      	cmp	r3, #0
 801a360:	db3e      	blt.n	801a3e0 <tcp_receive+0xde0>
 801a362:	4b1e      	ldr	r3, [pc, #120]	@ (801a3dc <tcp_receive+0xddc>)
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a368:	68db      	ldr	r3, [r3, #12]
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	1ad3      	subs	r3, r2, r3
 801a36e:	3301      	adds	r3, #1
 801a370:	2b00      	cmp	r3, #0
 801a372:	dc35      	bgt.n	801a3e0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801a374:	4818      	ldr	r0, [pc, #96]	@ (801a3d8 <tcp_receive+0xdd8>)
 801a376:	f7fd fb9f 	bl	8017ab8 <tcp_seg_copy>
 801a37a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	f000 8102 	beq.w	801a588 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a386:	68db      	ldr	r3, [r3, #12]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a38c:	8912      	ldrh	r2, [r2, #8]
 801a38e:	441a      	add	r2, r3
 801a390:	4b12      	ldr	r3, [pc, #72]	@ (801a3dc <tcp_receive+0xddc>)
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	1ad3      	subs	r3, r2, r3
 801a396:	2b00      	cmp	r3, #0
 801a398:	dd12      	ble.n	801a3c0 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a39a:	4b10      	ldr	r3, [pc, #64]	@ (801a3dc <tcp_receive+0xddc>)
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	b29a      	uxth	r2, r3
 801a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3a2:	68db      	ldr	r3, [r3, #12]
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	1ad3      	subs	r3, r2, r3
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3b2:	685a      	ldr	r2, [r3, #4]
 801a3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3b6:	891b      	ldrh	r3, [r3, #8]
 801a3b8:	4619      	mov	r1, r3
 801a3ba:	4610      	mov	r0, r2
 801a3bc:	f7fb fdae 	bl	8015f1c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3c2:	68fa      	ldr	r2, [r7, #12]
 801a3c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a3c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a3c8:	68f8      	ldr	r0, [r7, #12]
 801a3ca:	f7ff f8a3 	bl	8019514 <tcp_oos_insert_segment>
                  }
                  break;
 801a3ce:	e0db      	b.n	801a588 <tcp_receive+0xf88>
 801a3d0:	2000bdc4 	.word	0x2000bdc4
 801a3d4:	2000bdc1 	.word	0x2000bdc1
 801a3d8:	2000bd94 	.word	0x2000bd94
 801a3dc:	2000bdb4 	.word	0x2000bdb4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	f040 80bf 	bne.w	801a568 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a3ea:	4b7c      	ldr	r3, [pc, #496]	@ (801a5dc <tcp_receive+0xfdc>)
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3f0:	68db      	ldr	r3, [r3, #12]
 801a3f2:	685b      	ldr	r3, [r3, #4]
 801a3f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	f340 80b6 	ble.w	801a568 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3fe:	68db      	ldr	r3, [r3, #12]
 801a400:	899b      	ldrh	r3, [r3, #12]
 801a402:	b29b      	uxth	r3, r3
 801a404:	4618      	mov	r0, r3
 801a406:	f7fa fc57 	bl	8014cb8 <lwip_htons>
 801a40a:	4603      	mov	r3, r0
 801a40c:	f003 0301 	and.w	r3, r3, #1
 801a410:	2b00      	cmp	r3, #0
 801a412:	f040 80bb 	bne.w	801a58c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a416:	4872      	ldr	r0, [pc, #456]	@ (801a5e0 <tcp_receive+0xfe0>)
 801a418:	f7fd fb4e 	bl	8017ab8 <tcp_seg_copy>
 801a41c:	4602      	mov	r2, r0
 801a41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a420:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	2b00      	cmp	r3, #0
 801a428:	f000 80b2 	beq.w	801a590 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a42e:	68db      	ldr	r3, [r3, #12]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a434:	8912      	ldrh	r2, [r2, #8]
 801a436:	441a      	add	r2, r3
 801a438:	4b68      	ldr	r3, [pc, #416]	@ (801a5dc <tcp_receive+0xfdc>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	1ad3      	subs	r3, r2, r3
 801a43e:	2b00      	cmp	r3, #0
 801a440:	dd12      	ble.n	801a468 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a442:	4b66      	ldr	r3, [pc, #408]	@ (801a5dc <tcp_receive+0xfdc>)
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	b29a      	uxth	r2, r3
 801a448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44a:	68db      	ldr	r3, [r3, #12]
 801a44c:	685b      	ldr	r3, [r3, #4]
 801a44e:	b29b      	uxth	r3, r3
 801a450:	1ad3      	subs	r3, r2, r3
 801a452:	b29a      	uxth	r2, r3
 801a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a456:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a45a:	685a      	ldr	r2, [r3, #4]
 801a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a45e:	891b      	ldrh	r3, [r3, #8]
 801a460:	4619      	mov	r1, r3
 801a462:	4610      	mov	r0, r2
 801a464:	f7fb fd5a 	bl	8015f1c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a468:	4b5e      	ldr	r3, [pc, #376]	@ (801a5e4 <tcp_receive+0xfe4>)
 801a46a:	881b      	ldrh	r3, [r3, #0]
 801a46c:	461a      	mov	r2, r3
 801a46e:	4b5b      	ldr	r3, [pc, #364]	@ (801a5dc <tcp_receive+0xfdc>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	441a      	add	r2, r3
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a478:	6879      	ldr	r1, [r7, #4]
 801a47a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a47c:	440b      	add	r3, r1
 801a47e:	1ad3      	subs	r3, r2, r3
 801a480:	2b00      	cmp	r3, #0
 801a482:	f340 8085 	ble.w	801a590 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	899b      	ldrh	r3, [r3, #12]
 801a48e:	b29b      	uxth	r3, r3
 801a490:	4618      	mov	r0, r3
 801a492:	f7fa fc11 	bl	8014cb8 <lwip_htons>
 801a496:	4603      	mov	r3, r0
 801a498:	f003 0301 	and.w	r3, r3, #1
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d01e      	beq.n	801a4de <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	68db      	ldr	r3, [r3, #12]
 801a4a6:	899b      	ldrh	r3, [r3, #12]
 801a4a8:	b29b      	uxth	r3, r3
 801a4aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a4ae:	b29c      	uxth	r4, r3
 801a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	68db      	ldr	r3, [r3, #12]
 801a4b6:	899b      	ldrh	r3, [r3, #12]
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	f7fa fbfc 	bl	8014cb8 <lwip_htons>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f7fa fbf5 	bl	8014cb8 <lwip_htons>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	461a      	mov	r2, r3
 801a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	68db      	ldr	r3, [r3, #12]
 801a4d8:	4322      	orrs	r2, r4
 801a4da:	b292      	uxth	r2, r2
 801a4dc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4e2:	b29a      	uxth	r2, r3
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a4e8:	4413      	add	r3, r2
 801a4ea:	b299      	uxth	r1, r3
 801a4ec:	4b3b      	ldr	r3, [pc, #236]	@ (801a5dc <tcp_receive+0xfdc>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	b29a      	uxth	r2, r3
 801a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	1a8a      	subs	r2, r1, r2
 801a4f8:	b292      	uxth	r2, r2
 801a4fa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	685a      	ldr	r2, [r3, #4]
 801a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	891b      	ldrh	r3, [r3, #8]
 801a508:	4619      	mov	r1, r3
 801a50a:	4610      	mov	r0, r2
 801a50c:	f7fb fd06 	bl	8015f1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	891c      	ldrh	r4, [r3, #8]
 801a516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	68db      	ldr	r3, [r3, #12]
 801a51c:	899b      	ldrh	r3, [r3, #12]
 801a51e:	b29b      	uxth	r3, r3
 801a520:	4618      	mov	r0, r3
 801a522:	f7fa fbc9 	bl	8014cb8 <lwip_htons>
 801a526:	4603      	mov	r3, r0
 801a528:	f003 0303 	and.w	r3, r3, #3
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d001      	beq.n	801a534 <tcp_receive+0xf34>
 801a530:	2301      	movs	r3, #1
 801a532:	e000      	b.n	801a536 <tcp_receive+0xf36>
 801a534:	2300      	movs	r3, #0
 801a536:	4423      	add	r3, r4
 801a538:	b29a      	uxth	r2, r3
 801a53a:	4b2a      	ldr	r3, [pc, #168]	@ (801a5e4 <tcp_receive+0xfe4>)
 801a53c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a53e:	4b29      	ldr	r3, [pc, #164]	@ (801a5e4 <tcp_receive+0xfe4>)
 801a540:	881b      	ldrh	r3, [r3, #0]
 801a542:	461a      	mov	r2, r3
 801a544:	4b25      	ldr	r3, [pc, #148]	@ (801a5dc <tcp_receive+0xfdc>)
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	441a      	add	r2, r3
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a54e:	6879      	ldr	r1, [r7, #4]
 801a550:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a552:	440b      	add	r3, r1
 801a554:	429a      	cmp	r2, r3
 801a556:	d01b      	beq.n	801a590 <tcp_receive+0xf90>
 801a558:	4b23      	ldr	r3, [pc, #140]	@ (801a5e8 <tcp_receive+0xfe8>)
 801a55a:	f240 627a 	movw	r2, #1658	@ 0x67a
 801a55e:	4923      	ldr	r1, [pc, #140]	@ (801a5ec <tcp_receive+0xfec>)
 801a560:	4823      	ldr	r0, [pc, #140]	@ (801a5f0 <tcp_receive+0xff0>)
 801a562:	f007 fe6d 	bl	8022240 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a566:	e013      	b.n	801a590 <tcp_receive+0xf90>
              }
            }
            prev = next;
 801a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a56a:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a574:	2b00      	cmp	r3, #0
 801a576:	f47f aeab 	bne.w	801a2d0 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801a57a:	e00f      	b.n	801a59c <tcp_receive+0xf9c>
                break;
 801a57c:	bf00      	nop
 801a57e:	e00d      	b.n	801a59c <tcp_receive+0xf9c>
                break;
 801a580:	bf00      	nop
 801a582:	e00b      	b.n	801a59c <tcp_receive+0xf9c>
                  break;
 801a584:	bf00      	nop
 801a586:	e009      	b.n	801a59c <tcp_receive+0xf9c>
                  break;
 801a588:	bf00      	nop
 801a58a:	e007      	b.n	801a59c <tcp_receive+0xf9c>
                  break;
 801a58c:	bf00      	nop
 801a58e:	e005      	b.n	801a59c <tcp_receive+0xf9c>
                break;
 801a590:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801a592:	e003      	b.n	801a59c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a594:	6878      	ldr	r0, [r7, #4]
 801a596:	f000 ff83 	bl	801b4a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a59a:	e01a      	b.n	801a5d2 <tcp_receive+0xfd2>
 801a59c:	e019      	b.n	801a5d2 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a59e:	4b0f      	ldr	r3, [pc, #60]	@ (801a5dc <tcp_receive+0xfdc>)
 801a5a0:	681a      	ldr	r2, [r3, #0]
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5a6:	1ad3      	subs	r3, r2, r3
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	db0a      	blt.n	801a5c2 <tcp_receive+0xfc2>
 801a5ac:	4b0b      	ldr	r3, [pc, #44]	@ (801a5dc <tcp_receive+0xfdc>)
 801a5ae:	681a      	ldr	r2, [r3, #0]
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5b4:	6879      	ldr	r1, [r7, #4]
 801a5b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a5b8:	440b      	add	r3, r1
 801a5ba:	1ad3      	subs	r3, r2, r3
 801a5bc:	3301      	adds	r3, #1
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	dd07      	ble.n	801a5d2 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	7e9b      	ldrb	r3, [r3, #26]
 801a5c6:	f043 0302 	orr.w	r3, r3, #2
 801a5ca:	b2da      	uxtb	r2, r3
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801a5d0:	e7ff      	b.n	801a5d2 <tcp_receive+0xfd2>
 801a5d2:	bf00      	nop
 801a5d4:	3734      	adds	r7, #52	@ 0x34
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5da:	bf00      	nop
 801a5dc:	2000bdb4 	.word	0x2000bdb4
 801a5e0:	2000bd94 	.word	0x2000bd94
 801a5e4:	2000bdbe 	.word	0x2000bdbe
 801a5e8:	08026a88 	.word	0x08026a88
 801a5ec:	08026d54 	.word	0x08026d54
 801a5f0:	08026acc 	.word	0x08026acc

0801a5f4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801a5f4:	b480      	push	{r7}
 801a5f6:	b083      	sub	sp, #12
 801a5f8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801a5fa:	4b17      	ldr	r3, [pc, #92]	@ (801a658 <tcp_getoptbyte+0x64>)
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d005      	beq.n	801a60e <tcp_getoptbyte+0x1a>
 801a602:	4b16      	ldr	r3, [pc, #88]	@ (801a65c <tcp_getoptbyte+0x68>)
 801a604:	881a      	ldrh	r2, [r3, #0]
 801a606:	4b16      	ldr	r3, [pc, #88]	@ (801a660 <tcp_getoptbyte+0x6c>)
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	429a      	cmp	r2, r3
 801a60c:	d20e      	bcs.n	801a62c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801a60e:	4b15      	ldr	r3, [pc, #84]	@ (801a664 <tcp_getoptbyte+0x70>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	3314      	adds	r3, #20
 801a614:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801a616:	4b11      	ldr	r3, [pc, #68]	@ (801a65c <tcp_getoptbyte+0x68>)
 801a618:	881b      	ldrh	r3, [r3, #0]
 801a61a:	1c5a      	adds	r2, r3, #1
 801a61c:	b291      	uxth	r1, r2
 801a61e:	4a0f      	ldr	r2, [pc, #60]	@ (801a65c <tcp_getoptbyte+0x68>)
 801a620:	8011      	strh	r1, [r2, #0]
 801a622:	461a      	mov	r2, r3
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	4413      	add	r3, r2
 801a628:	781b      	ldrb	r3, [r3, #0]
 801a62a:	e010      	b.n	801a64e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801a62c:	4b0b      	ldr	r3, [pc, #44]	@ (801a65c <tcp_getoptbyte+0x68>)
 801a62e:	881b      	ldrh	r3, [r3, #0]
 801a630:	1c5a      	adds	r2, r3, #1
 801a632:	b291      	uxth	r1, r2
 801a634:	4a09      	ldr	r2, [pc, #36]	@ (801a65c <tcp_getoptbyte+0x68>)
 801a636:	8011      	strh	r1, [r2, #0]
 801a638:	b2da      	uxtb	r2, r3
 801a63a:	4b09      	ldr	r3, [pc, #36]	@ (801a660 <tcp_getoptbyte+0x6c>)
 801a63c:	881b      	ldrh	r3, [r3, #0]
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	1ad3      	subs	r3, r2, r3
 801a642:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801a644:	4b04      	ldr	r3, [pc, #16]	@ (801a658 <tcp_getoptbyte+0x64>)
 801a646:	681a      	ldr	r2, [r3, #0]
 801a648:	79fb      	ldrb	r3, [r7, #7]
 801a64a:	4413      	add	r3, r2
 801a64c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a64e:	4618      	mov	r0, r3
 801a650:	370c      	adds	r7, #12
 801a652:	46bd      	mov	sp, r7
 801a654:	bc80      	pop	{r7}
 801a656:	4770      	bx	lr
 801a658:	2000bdac 	.word	0x2000bdac
 801a65c:	2000bdb0 	.word	0x2000bdb0
 801a660:	2000bdaa 	.word	0x2000bdaa
 801a664:	2000bda4 	.word	0x2000bda4

0801a668 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b084      	sub	sp, #16
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a670:	4b2e      	ldr	r3, [pc, #184]	@ (801a72c <tcp_parseopt+0xc4>)
 801a672:	881b      	ldrh	r3, [r3, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d056      	beq.n	801a726 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a678:	4b2d      	ldr	r3, [pc, #180]	@ (801a730 <tcp_parseopt+0xc8>)
 801a67a:	2200      	movs	r2, #0
 801a67c:	801a      	strh	r2, [r3, #0]
 801a67e:	e046      	b.n	801a70e <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 801a680:	f7ff ffb8 	bl	801a5f4 <tcp_getoptbyte>
 801a684:	4603      	mov	r3, r0
 801a686:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a688:	7bfb      	ldrb	r3, [r7, #15]
 801a68a:	2b02      	cmp	r3, #2
 801a68c:	d006      	beq.n	801a69c <tcp_parseopt+0x34>
 801a68e:	2b02      	cmp	r3, #2
 801a690:	dc2a      	bgt.n	801a6e8 <tcp_parseopt+0x80>
 801a692:	2b00      	cmp	r3, #0
 801a694:	d042      	beq.n	801a71c <tcp_parseopt+0xb4>
 801a696:	2b01      	cmp	r3, #1
 801a698:	d038      	beq.n	801a70c <tcp_parseopt+0xa4>
 801a69a:	e025      	b.n	801a6e8 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a69c:	f7ff ffaa 	bl	801a5f4 <tcp_getoptbyte>
 801a6a0:	4603      	mov	r3, r0
 801a6a2:	2b04      	cmp	r3, #4
 801a6a4:	d13c      	bne.n	801a720 <tcp_parseopt+0xb8>
 801a6a6:	4b22      	ldr	r3, [pc, #136]	@ (801a730 <tcp_parseopt+0xc8>)
 801a6a8:	881b      	ldrh	r3, [r3, #0]
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	4a1f      	ldr	r2, [pc, #124]	@ (801a72c <tcp_parseopt+0xc4>)
 801a6ae:	8812      	ldrh	r2, [r2, #0]
 801a6b0:	4293      	cmp	r3, r2
 801a6b2:	da35      	bge.n	801a720 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801a6b4:	f7ff ff9e 	bl	801a5f4 <tcp_getoptbyte>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	021b      	lsls	r3, r3, #8
 801a6bc:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801a6be:	f7ff ff99 	bl	801a5f4 <tcp_getoptbyte>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	89bb      	ldrh	r3, [r7, #12]
 801a6c8:	4313      	orrs	r3, r2
 801a6ca:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a6cc:	89bb      	ldrh	r3, [r7, #12]
 801a6ce:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801a6d2:	d804      	bhi.n	801a6de <tcp_parseopt+0x76>
 801a6d4:	89bb      	ldrh	r3, [r7, #12]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d001      	beq.n	801a6de <tcp_parseopt+0x76>
 801a6da:	89ba      	ldrh	r2, [r7, #12]
 801a6dc:	e001      	b.n	801a6e2 <tcp_parseopt+0x7a>
 801a6de:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 801a6e6:	e012      	b.n	801a70e <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801a6e8:	f7ff ff84 	bl	801a5f4 <tcp_getoptbyte>
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801a6f0:	7afb      	ldrb	r3, [r7, #11]
 801a6f2:	2b01      	cmp	r3, #1
 801a6f4:	d916      	bls.n	801a724 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 801a6f6:	7afb      	ldrb	r3, [r7, #11]
 801a6f8:	b29a      	uxth	r2, r3
 801a6fa:	4b0d      	ldr	r3, [pc, #52]	@ (801a730 <tcp_parseopt+0xc8>)
 801a6fc:	881b      	ldrh	r3, [r3, #0]
 801a6fe:	4413      	add	r3, r2
 801a700:	b29b      	uxth	r3, r3
 801a702:	3b02      	subs	r3, #2
 801a704:	b29a      	uxth	r2, r3
 801a706:	4b0a      	ldr	r3, [pc, #40]	@ (801a730 <tcp_parseopt+0xc8>)
 801a708:	801a      	strh	r2, [r3, #0]
 801a70a:	e000      	b.n	801a70e <tcp_parseopt+0xa6>
        break;
 801a70c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a70e:	4b08      	ldr	r3, [pc, #32]	@ (801a730 <tcp_parseopt+0xc8>)
 801a710:	881a      	ldrh	r2, [r3, #0]
 801a712:	4b06      	ldr	r3, [pc, #24]	@ (801a72c <tcp_parseopt+0xc4>)
 801a714:	881b      	ldrh	r3, [r3, #0]
 801a716:	429a      	cmp	r2, r3
 801a718:	d3b2      	bcc.n	801a680 <tcp_parseopt+0x18>
 801a71a:	e004      	b.n	801a726 <tcp_parseopt+0xbe>
        return;
 801a71c:	bf00      	nop
 801a71e:	e002      	b.n	801a726 <tcp_parseopt+0xbe>
          return;
 801a720:	bf00      	nop
 801a722:	e000      	b.n	801a726 <tcp_parseopt+0xbe>
          return;
 801a724:	bf00      	nop
      }
    }
  }
}
 801a726:	3710      	adds	r7, #16
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	2000bda8 	.word	0x2000bda8
 801a730:	2000bdb0 	.word	0x2000bdb0

0801a734 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a734:	b480      	push	{r7}
 801a736:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a738:	4b05      	ldr	r3, [pc, #20]	@ (801a750 <tcp_trigger_input_pcb_close+0x1c>)
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	f043 0310 	orr.w	r3, r3, #16
 801a740:	b2da      	uxtb	r2, r3
 801a742:	4b03      	ldr	r3, [pc, #12]	@ (801a750 <tcp_trigger_input_pcb_close+0x1c>)
 801a744:	701a      	strb	r2, [r3, #0]
}
 801a746:	bf00      	nop
 801a748:	46bd      	mov	sp, r7
 801a74a:	bc80      	pop	{r7}
 801a74c:	4770      	bx	lr
 801a74e:	bf00      	nop
 801a750:	2000bdc1 	.word	0x2000bdc1

0801a754 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b086      	sub	sp, #24
 801a758:	af00      	add	r7, sp, #0
 801a75a:	60f8      	str	r0, [r7, #12]
 801a75c:	607b      	str	r3, [r7, #4]
 801a75e:	460b      	mov	r3, r1
 801a760:	817b      	strh	r3, [r7, #10]
 801a762:	4613      	mov	r3, r2
 801a764:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a766:	897a      	ldrh	r2, [r7, #10]
 801a768:	893b      	ldrh	r3, [r7, #8]
 801a76a:	4413      	add	r3, r2
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	3314      	adds	r3, #20
 801a770:	b29b      	uxth	r3, r3
 801a772:	2200      	movs	r2, #0
 801a774:	4619      	mov	r1, r3
 801a776:	2001      	movs	r0, #1
 801a778:	f7fb f9cc 	bl	8015b14 <pbuf_alloc>
 801a77c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d056      	beq.n	801a832 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a784:	897b      	ldrh	r3, [r7, #10]
 801a786:	3313      	adds	r3, #19
 801a788:	697a      	ldr	r2, [r7, #20]
 801a78a:	8952      	ldrh	r2, [r2, #10]
 801a78c:	4293      	cmp	r3, r2
 801a78e:	db05      	blt.n	801a79c <tcp_output_alloc_header+0x48>
 801a790:	4b2a      	ldr	r3, [pc, #168]	@ (801a83c <tcp_output_alloc_header+0xe8>)
 801a792:	2272      	movs	r2, #114	@ 0x72
 801a794:	492a      	ldr	r1, [pc, #168]	@ (801a840 <tcp_output_alloc_header+0xec>)
 801a796:	482b      	ldr	r0, [pc, #172]	@ (801a844 <tcp_output_alloc_header+0xf0>)
 801a798:	f007 fd52 	bl	8022240 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	8adb      	ldrh	r3, [r3, #22]
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f7fa fa86 	bl	8014cb8 <lwip_htons>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	693b      	ldr	r3, [r7, #16]
 801a7b2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	8b1b      	ldrh	r3, [r3, #24]
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7fa fa7d 	bl	8014cb8 <lwip_htons>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	461a      	mov	r2, r3
 801a7c2:	693b      	ldr	r3, [r7, #16]
 801a7c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a7c6:	693b      	ldr	r3, [r7, #16]
 801a7c8:	687a      	ldr	r2, [r7, #4]
 801a7ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7fa fa7e 	bl	8014cd2 <lwip_htonl>
 801a7d6:	4602      	mov	r2, r0
 801a7d8:	693b      	ldr	r3, [r7, #16]
 801a7da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801a7dc:	897b      	ldrh	r3, [r7, #10]
 801a7de:	089b      	lsrs	r3, r3, #2
 801a7e0:	b29b      	uxth	r3, r3
 801a7e2:	3305      	adds	r3, #5
 801a7e4:	b29b      	uxth	r3, r3
 801a7e6:	031b      	lsls	r3, r3, #12
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	f043 0310 	orr.w	r3, r3, #16
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7fa fa61 	bl	8014cb8 <lwip_htons>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	461a      	mov	r2, r3
 801a7fa:	693b      	ldr	r3, [r7, #16]
 801a7fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a802:	4618      	mov	r0, r3
 801a804:	f7fa fa58 	bl	8014cb8 <lwip_htons>
 801a808:	4603      	mov	r3, r0
 801a80a:	461a      	mov	r2, r3
 801a80c:	693b      	ldr	r3, [r7, #16]
 801a80e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a810:	693b      	ldr	r3, [r7, #16]
 801a812:	2200      	movs	r2, #0
 801a814:	741a      	strb	r2, [r3, #16]
 801a816:	2200      	movs	r2, #0
 801a818:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	2200      	movs	r2, #0
 801a81e:	749a      	strb	r2, [r3, #18]
 801a820:	2200      	movs	r2, #0
 801a822:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a828:	68fa      	ldr	r2, [r7, #12]
 801a82a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a82c:	441a      	add	r2, r3
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a832:	697b      	ldr	r3, [r7, #20]
}
 801a834:	4618      	mov	r0, r3
 801a836:	3718      	adds	r7, #24
 801a838:	46bd      	mov	sp, r7
 801a83a:	bd80      	pop	{r7, pc}
 801a83c:	08026e10 	.word	0x08026e10
 801a840:	08026e44 	.word	0x08026e44
 801a844:	08026e74 	.word	0x08026e74

0801a848 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a848:	b590      	push	{r4, r7, lr}
 801a84a:	b085      	sub	sp, #20
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a854:	2b00      	cmp	r3, #0
 801a856:	d02d      	beq.n	801a8b4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a85c:	60fb      	str	r3, [r7, #12]
 801a85e:	e002      	b.n	801a866 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d1f8      	bne.n	801a860 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	68db      	ldr	r3, [r3, #12]
 801a872:	899b      	ldrh	r3, [r3, #12]
 801a874:	b29b      	uxth	r3, r3
 801a876:	4618      	mov	r0, r3
 801a878:	f7fa fa1e 	bl	8014cb8 <lwip_htons>
 801a87c:	4603      	mov	r3, r0
 801a87e:	f003 0307 	and.w	r3, r3, #7
 801a882:	2b00      	cmp	r3, #0
 801a884:	d116      	bne.n	801a8b4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	899b      	ldrh	r3, [r3, #12]
 801a88c:	b29c      	uxth	r4, r3
 801a88e:	2001      	movs	r0, #1
 801a890:	f7fa fa12 	bl	8014cb8 <lwip_htons>
 801a894:	4603      	mov	r3, r0
 801a896:	461a      	mov	r2, r3
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	68db      	ldr	r3, [r3, #12]
 801a89c:	4322      	orrs	r2, r4
 801a89e:	b292      	uxth	r2, r2
 801a8a0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	7e9b      	ldrb	r3, [r3, #26]
 801a8a6:	f043 0320 	orr.w	r3, r3, #32
 801a8aa:	b2da      	uxtb	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	e004      	b.n	801a8be <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a8b4:	2101      	movs	r1, #1
 801a8b6:	6878      	ldr	r0, [r7, #4]
 801a8b8:	f000 fcdc 	bl	801b274 <tcp_enqueue_flags>
 801a8bc:	4603      	mov	r3, r0
}
 801a8be:	4618      	mov	r0, r3
 801a8c0:	3714      	adds	r7, #20
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	bd90      	pop	{r4, r7, pc}
	...

0801a8c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 801a8c8:	b590      	push	{r4, r7, lr}
 801a8ca:	b087      	sub	sp, #28
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	60f8      	str	r0, [r7, #12]
 801a8d0:	60b9      	str	r1, [r7, #8]
 801a8d2:	603b      	str	r3, [r7, #0]
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a8d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	b2db      	uxtb	r3, r3
 801a8e0:	f003 0304 	and.w	r3, r3, #4
 801a8e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a8e6:	2003      	movs	r0, #3
 801a8e8:	f7fa fe90 	bl	801560c <memp_malloc>
 801a8ec:	6138      	str	r0, [r7, #16]
 801a8ee:	693b      	ldr	r3, [r7, #16]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d104      	bne.n	801a8fe <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a8f4:	68b8      	ldr	r0, [r7, #8]
 801a8f6:	f7fb fc85 	bl	8016204 <pbuf_free>
    return NULL;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	e068      	b.n	801a9d0 <tcp_create_segment+0x108>
  }
  seg->flags = optflags;
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a904:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a906:	693b      	ldr	r3, [r7, #16]
 801a908:	2200      	movs	r2, #0
 801a90a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a90c:	693b      	ldr	r3, [r7, #16]
 801a90e:	68ba      	ldr	r2, [r7, #8]
 801a910:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	891a      	ldrh	r2, [r3, #8]
 801a916:	7dfb      	ldrb	r3, [r7, #23]
 801a918:	b29b      	uxth	r3, r3
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d205      	bcs.n	801a92a <tcp_create_segment+0x62>
 801a91e:	4b2e      	ldr	r3, [pc, #184]	@ (801a9d8 <tcp_create_segment+0x110>)
 801a920:	22ba      	movs	r2, #186	@ 0xba
 801a922:	492e      	ldr	r1, [pc, #184]	@ (801a9dc <tcp_create_segment+0x114>)
 801a924:	482e      	ldr	r0, [pc, #184]	@ (801a9e0 <tcp_create_segment+0x118>)
 801a926:	f007 fc8b 	bl	8022240 <iprintf>
  seg->len = p->tot_len - optlen;
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	891a      	ldrh	r2, [r3, #8]
 801a92e:	7dfb      	ldrb	r3, [r7, #23]
 801a930:	b29b      	uxth	r3, r3
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	b29a      	uxth	r2, r3
 801a936:	693b      	ldr	r3, [r7, #16]
 801a938:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801a93a:	2114      	movs	r1, #20
 801a93c:	68b8      	ldr	r0, [r7, #8]
 801a93e:	f7fb fc3d 	bl	80161bc <pbuf_header>
 801a942:	4603      	mov	r3, r0
 801a944:	2b00      	cmp	r3, #0
 801a946:	d00c      	beq.n	801a962 <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801a948:	4b26      	ldr	r3, [pc, #152]	@ (801a9e4 <tcp_create_segment+0x11c>)
 801a94a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 801a94e:	3301      	adds	r3, #1
 801a950:	b29a      	uxth	r2, r3
 801a952:	4b24      	ldr	r3, [pc, #144]	@ (801a9e4 <tcp_create_segment+0x11c>)
 801a954:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 801a958:	6938      	ldr	r0, [r7, #16]
 801a95a:	f7fd f887 	bl	8017a6c <tcp_seg_free>
    return NULL;
 801a95e:	2300      	movs	r3, #0
 801a960:	e036      	b.n	801a9d0 <tcp_create_segment+0x108>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a962:	693b      	ldr	r3, [r7, #16]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	685a      	ldr	r2, [r3, #4]
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	8ada      	ldrh	r2, [r3, #22]
 801a970:	693b      	ldr	r3, [r7, #16]
 801a972:	68dc      	ldr	r4, [r3, #12]
 801a974:	4610      	mov	r0, r2
 801a976:	f7fa f99f 	bl	8014cb8 <lwip_htons>
 801a97a:	4603      	mov	r3, r0
 801a97c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	8b1a      	ldrh	r2, [r3, #24]
 801a982:	693b      	ldr	r3, [r7, #16]
 801a984:	68dc      	ldr	r4, [r3, #12]
 801a986:	4610      	mov	r0, r2
 801a988:	f7fa f996 	bl	8014cb8 <lwip_htons>
 801a98c:	4603      	mov	r3, r0
 801a98e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a990:	693b      	ldr	r3, [r7, #16]
 801a992:	68dc      	ldr	r4, [r3, #12]
 801a994:	6838      	ldr	r0, [r7, #0]
 801a996:	f7fa f99c 	bl	8014cd2 <lwip_htonl>
 801a99a:	4603      	mov	r3, r0
 801a99c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801a99e:	7dfb      	ldrb	r3, [r7, #23]
 801a9a0:	089b      	lsrs	r3, r3, #2
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	3305      	adds	r3, #5
 801a9a6:	b29b      	uxth	r3, r3
 801a9a8:	031b      	lsls	r3, r3, #12
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	79fb      	ldrb	r3, [r7, #7]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	4313      	orrs	r3, r2
 801a9b2:	b29a      	uxth	r2, r3
 801a9b4:	693b      	ldr	r3, [r7, #16]
 801a9b6:	68dc      	ldr	r4, [r3, #12]
 801a9b8:	4610      	mov	r0, r2
 801a9ba:	f7fa f97d 	bl	8014cb8 <lwip_htons>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a9c2:	693b      	ldr	r3, [r7, #16]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	749a      	strb	r2, [r3, #18]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	74da      	strb	r2, [r3, #19]
  return seg;
 801a9ce:	693b      	ldr	r3, [r7, #16]
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	371c      	adds	r7, #28
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd90      	pop	{r4, r7, pc}
 801a9d8:	08026e10 	.word	0x08026e10
 801a9dc:	08026e9c 	.word	0x08026e9c
 801a9e0:	08026e74 	.word	0x08026e74
 801a9e4:	2000bbe4 	.word	0x2000bbe4

0801a9e8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	607b      	str	r3, [r7, #4]
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	73fb      	strb	r3, [r7, #15]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	81bb      	strh	r3, [r7, #12]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a9fc:	89bb      	ldrh	r3, [r7, #12]
 801a9fe:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801aa00:	89ba      	ldrh	r2, [r7, #12]
 801aa02:	897b      	ldrh	r3, [r7, #10]
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d221      	bcs.n	801aa4c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801aa08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801aa0c:	f003 0302 	and.w	r3, r3, #2
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d111      	bne.n	801aa38 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 801aa14:	6a3b      	ldr	r3, [r7, #32]
 801aa16:	7e9b      	ldrb	r3, [r3, #26]
 801aa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d115      	bne.n	801aa4c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801aa20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d007      	beq.n	801aa38 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 801aa28:	6a3b      	ldr	r3, [r7, #32]
 801aa2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d103      	bne.n	801aa38 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801aa30:	6a3b      	ldr	r3, [r7, #32]
 801aa32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d009      	beq.n	801aa4c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801aa38:	89bb      	ldrh	r3, [r7, #12]
 801aa3a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801aa3e:	f023 0203 	bic.w	r2, r3, #3
 801aa42:	897b      	ldrh	r3, [r7, #10]
 801aa44:	4293      	cmp	r3, r2
 801aa46:	bf28      	it	cs
 801aa48:	4613      	movcs	r3, r2
 801aa4a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801aa4c:	8af9      	ldrh	r1, [r7, #22]
 801aa4e:	7bfb      	ldrb	r3, [r7, #15]
 801aa50:	2200      	movs	r2, #0
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7fb f85e 	bl	8015b14 <pbuf_alloc>
 801aa58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d101      	bne.n	801aa64 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801aa60:	2300      	movs	r3, #0
 801aa62:	e019      	b.n	801aa98 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801aa64:	693b      	ldr	r3, [r7, #16]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d006      	beq.n	801aa7a <tcp_pbuf_prealloc+0x92>
 801aa6c:	4b0c      	ldr	r3, [pc, #48]	@ (801aaa0 <tcp_pbuf_prealloc+0xb8>)
 801aa6e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801aa72:	490c      	ldr	r1, [pc, #48]	@ (801aaa4 <tcp_pbuf_prealloc+0xbc>)
 801aa74:	480c      	ldr	r0, [pc, #48]	@ (801aaa8 <tcp_pbuf_prealloc+0xc0>)
 801aa76:	f007 fbe3 	bl	8022240 <iprintf>
  *oversize = p->len - length;
 801aa7a:	693b      	ldr	r3, [r7, #16]
 801aa7c:	895a      	ldrh	r2, [r3, #10]
 801aa7e:	89bb      	ldrh	r3, [r7, #12]
 801aa80:	1ad3      	subs	r3, r2, r3
 801aa82:	b29a      	uxth	r2, r3
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa88:	693b      	ldr	r3, [r7, #16]
 801aa8a:	89ba      	ldrh	r2, [r7, #12]
 801aa8c:	811a      	strh	r2, [r3, #8]
 801aa8e:	693b      	ldr	r3, [r7, #16]
 801aa90:	891a      	ldrh	r2, [r3, #8]
 801aa92:	693b      	ldr	r3, [r7, #16]
 801aa94:	815a      	strh	r2, [r3, #10]
  return p;
 801aa96:	693b      	ldr	r3, [r7, #16]
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3718      	adds	r7, #24
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}
 801aaa0:	08026e10 	.word	0x08026e10
 801aaa4:	08026eb4 	.word	0x08026eb4
 801aaa8:	08026e74 	.word	0x08026e74

0801aaac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	460b      	mov	r3, r1
 801aab6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	7d1b      	ldrb	r3, [r3, #20]
 801aabc:	2b04      	cmp	r3, #4
 801aabe:	d00e      	beq.n	801aade <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aac4:	2b07      	cmp	r3, #7
 801aac6:	d00a      	beq.n	801aade <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aacc:	2b02      	cmp	r3, #2
 801aace:	d006      	beq.n	801aade <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aad4:	2b03      	cmp	r3, #3
 801aad6:	d002      	beq.n	801aade <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aad8:	f06f 030a 	mvn.w	r3, #10
 801aadc:	e057      	b.n	801ab8e <tcp_write_checks+0xe2>
  } else if (len == 0) {
 801aade:	887b      	ldrh	r3, [r7, #2]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d101      	bne.n	801aae8 <tcp_write_checks+0x3c>
    return ERR_OK;
 801aae4:	2300      	movs	r3, #0
 801aae6:	e052      	b.n	801ab8e <tcp_write_checks+0xe2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801aaee:	887a      	ldrh	r2, [r7, #2]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d909      	bls.n	801ab08 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	7e9b      	ldrb	r3, [r3, #26]
 801aaf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801aafc:	b2da      	uxtb	r2, r3
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801ab02:	f04f 33ff 	mov.w	r3, #4294967295
 801ab06:	e042      	b.n	801ab8e <tcp_write_checks+0xe2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab0e:	2b03      	cmp	r3, #3
 801ab10:	d806      	bhi.n	801ab20 <tcp_write_checks+0x74>
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab18:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d911      	bls.n	801ab44 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801ab20:	4b1d      	ldr	r3, [pc, #116]	@ (801ab98 <tcp_write_checks+0xec>)
 801ab22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ab26:	3301      	adds	r3, #1
 801ab28:	b29a      	uxth	r2, r3
 801ab2a:	4b1b      	ldr	r3, [pc, #108]	@ (801ab98 <tcp_write_checks+0xec>)
 801ab2c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	7e9b      	ldrb	r3, [r3, #26]
 801ab34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ab38:	b2da      	uxtb	r2, r3
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab42:	e024      	b.n	801ab8e <tcp_write_checks+0xe2>
  }
  if (pcb->snd_queuelen != 0) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d00f      	beq.n	801ab6e <tcp_write_checks+0xc2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d11a      	bne.n	801ab8c <tcp_write_checks+0xe0>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d116      	bne.n	801ab8c <tcp_write_checks+0xe0>
 801ab5e:	4b0f      	ldr	r3, [pc, #60]	@ (801ab9c <tcp_write_checks+0xf0>)
 801ab60:	f240 1255 	movw	r2, #341	@ 0x155
 801ab64:	490e      	ldr	r1, [pc, #56]	@ (801aba0 <tcp_write_checks+0xf4>)
 801ab66:	480f      	ldr	r0, [pc, #60]	@ (801aba4 <tcp_write_checks+0xf8>)
 801ab68:	f007 fb6a 	bl	8022240 <iprintf>
 801ab6c:	e00e      	b.n	801ab8c <tcp_write_checks+0xe0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d103      	bne.n	801ab7e <tcp_write_checks+0xd2>
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d006      	beq.n	801ab8c <tcp_write_checks+0xe0>
 801ab7e:	4b07      	ldr	r3, [pc, #28]	@ (801ab9c <tcp_write_checks+0xf0>)
 801ab80:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801ab84:	4908      	ldr	r1, [pc, #32]	@ (801aba8 <tcp_write_checks+0xfc>)
 801ab86:	4807      	ldr	r0, [pc, #28]	@ (801aba4 <tcp_write_checks+0xf8>)
 801ab88:	f007 fb5a 	bl	8022240 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab8c:	2300      	movs	r3, #0
}
 801ab8e:	4618      	mov	r0, r3
 801ab90:	3708      	adds	r7, #8
 801ab92:	46bd      	mov	sp, r7
 801ab94:	bd80      	pop	{r7, pc}
 801ab96:	bf00      	nop
 801ab98:	2000bbe4 	.word	0x2000bbe4
 801ab9c:	08026e10 	.word	0x08026e10
 801aba0:	08026ec8 	.word	0x08026ec8
 801aba4:	08026e74 	.word	0x08026e74
 801aba8:	08026f04 	.word	0x08026f04

0801abac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801abac:	b590      	push	{r4, r7, lr}
 801abae:	b09b      	sub	sp, #108	@ 0x6c
 801abb0:	af04      	add	r7, sp, #16
 801abb2:	60f8      	str	r0, [r7, #12]
 801abb4:	60b9      	str	r1, [r7, #8]
 801abb6:	4611      	mov	r1, r2
 801abb8:	461a      	mov	r2, r3
 801abba:	460b      	mov	r3, r1
 801abbc:	80fb      	strh	r3, [r7, #6]
 801abbe:	4613      	mov	r3, r2
 801abc0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801abc2:	2300      	movs	r3, #0
 801abc4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801abc6:	2300      	movs	r3, #0
 801abc8:	653b      	str	r3, [r7, #80]	@ 0x50
 801abca:	2300      	movs	r3, #0
 801abcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801abce:	2300      	movs	r3, #0
 801abd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abd2:	2300      	movs	r3, #0
 801abd4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801abd6:	2300      	movs	r3, #0
 801abd8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 801abdc:	2300      	movs	r3, #0
 801abde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 801abe2:	2300      	movs	r3, #0
 801abe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801abe8:	2300      	movs	r3, #0
 801abea:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801abec:	2300      	movs	r3, #0
 801abee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801abf0:	2300      	movs	r3, #0
 801abf2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801abfa:	085b      	lsrs	r3, r3, #1
 801abfc:	b29a      	uxth	r2, r3
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac02:	4293      	cmp	r3, r2
 801ac04:	bf28      	it	cs
 801ac06:	4613      	movcs	r3, r2
 801ac08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ac0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d102      	bne.n	801ac16 <tcp_write+0x6a>
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac14:	e000      	b.n	801ac18 <tcp_write+0x6c>
 801ac16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ac1a:	68bb      	ldr	r3, [r7, #8]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d109      	bne.n	801ac34 <tcp_write+0x88>
 801ac20:	4b92      	ldr	r3, [pc, #584]	@ (801ae6c <tcp_write+0x2c0>)
 801ac22:	f240 1291 	movw	r2, #401	@ 0x191
 801ac26:	4992      	ldr	r1, [pc, #584]	@ (801ae70 <tcp_write+0x2c4>)
 801ac28:	4892      	ldr	r0, [pc, #584]	@ (801ae74 <tcp_write+0x2c8>)
 801ac2a:	f007 fb09 	bl	8022240 <iprintf>
 801ac2e:	f06f 030f 	mvn.w	r3, #15
 801ac32:	e312      	b.n	801b25a <tcp_write+0x6ae>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ac34:	88fb      	ldrh	r3, [r7, #6]
 801ac36:	4619      	mov	r1, r3
 801ac38:	68f8      	ldr	r0, [r7, #12]
 801ac3a:	f7ff ff37 	bl	801aaac <tcp_write_checks>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801ac44:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d002      	beq.n	801ac52 <tcp_write+0xa6>
    return err;
 801ac4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac50:	e303      	b.n	801b25a <tcp_write+0x6ae>
  }
  queuelen = pcb->snd_queuelen;
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ac58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f000 80f4 	beq.w	801ae4e <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac6a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ac6c:	e002      	b.n	801ac74 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801ac6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d1f8      	bne.n	801ac6e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801ac7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac7e:	7a9b      	ldrb	r3, [r3, #10]
 801ac80:	009b      	lsls	r3, r3, #2
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	f003 0304 	and.w	r3, r3, #4
 801ac88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ac8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac8e:	891b      	ldrh	r3, [r3, #8]
 801ac90:	4619      	mov	r1, r3
 801ac92:	8c3b      	ldrh	r3, [r7, #32]
 801ac94:	440b      	add	r3, r1
 801ac96:	429a      	cmp	r2, r3
 801ac98:	da06      	bge.n	801aca8 <tcp_write+0xfc>
 801ac9a:	4b74      	ldr	r3, [pc, #464]	@ (801ae6c <tcp_write+0x2c0>)
 801ac9c:	f240 12c7 	movw	r2, #455	@ 0x1c7
 801aca0:	4975      	ldr	r1, [pc, #468]	@ (801ae78 <tcp_write+0x2cc>)
 801aca2:	4874      	ldr	r0, [pc, #464]	@ (801ae74 <tcp_write+0x2c8>)
 801aca4:	f007 facc 	bl	8022240 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801aca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801acaa:	891a      	ldrh	r2, [r3, #8]
 801acac:	8c3b      	ldrh	r3, [r7, #32]
 801acae:	4413      	add	r3, r2
 801acb0:	b29b      	uxth	r3, r3
 801acb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801acb4:	1ad3      	subs	r3, r2, r3
 801acb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801acbe:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801acc0:	8a7b      	ldrh	r3, [r7, #18]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d026      	beq.n	801ad14 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801acc6:	8a7b      	ldrh	r3, [r7, #18]
 801acc8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801acca:	429a      	cmp	r2, r3
 801accc:	d206      	bcs.n	801acdc <tcp_write+0x130>
 801acce:	4b67      	ldr	r3, [pc, #412]	@ (801ae6c <tcp_write+0x2c0>)
 801acd0:	f240 12d9 	movw	r2, #473	@ 0x1d9
 801acd4:	4969      	ldr	r1, [pc, #420]	@ (801ae7c <tcp_write+0x2d0>)
 801acd6:	4867      	ldr	r0, [pc, #412]	@ (801ae74 <tcp_write+0x2c8>)
 801acd8:	f007 fab2 	bl	8022240 <iprintf>
      seg = last_unsent;
 801acdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801acde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ace0:	8a7b      	ldrh	r3, [r7, #18]
 801ace2:	88fa      	ldrh	r2, [r7, #6]
 801ace4:	4293      	cmp	r3, r2
 801ace6:	bf28      	it	cs
 801ace8:	4613      	movcs	r3, r2
 801acea:	b29b      	uxth	r3, r3
 801acec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801acee:	4293      	cmp	r3, r2
 801acf0:	bf28      	it	cs
 801acf2:	4613      	movcs	r3, r2
 801acf4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801acf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801acfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801acfc:	4413      	add	r3, r2
 801acfe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801ad02:	8a7a      	ldrh	r2, [r7, #18]
 801ad04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ad06:	1ad3      	subs	r3, r2, r3
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ad0c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ad0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ad10:	1ad3      	subs	r3, r2, r3
 801ad12:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ad14:	8a7b      	ldrh	r3, [r7, #18]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d00b      	beq.n	801ad32 <tcp_write+0x186>
 801ad1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad1e:	88fb      	ldrh	r3, [r7, #6]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d006      	beq.n	801ad32 <tcp_write+0x186>
 801ad24:	4b51      	ldr	r3, [pc, #324]	@ (801ae6c <tcp_write+0x2c0>)
 801ad26:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801ad2a:	4955      	ldr	r1, [pc, #340]	@ (801ae80 <tcp_write+0x2d4>)
 801ad2c:	4851      	ldr	r0, [pc, #324]	@ (801ae74 <tcp_write+0x2c8>)
 801ad2e:	f007 fa87 	bl	8022240 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ad32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad36:	88fb      	ldrh	r3, [r7, #6]
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	f080 8169 	bcs.w	801b010 <tcp_write+0x464>
 801ad3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	f000 8165 	beq.w	801b010 <tcp_write+0x464>
 801ad46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad48:	891b      	ldrh	r3, [r3, #8]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	f000 8160 	beq.w	801b010 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ad50:	88fa      	ldrh	r2, [r7, #6]
 801ad52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad56:	1ad2      	subs	r2, r2, r3
 801ad58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad5a:	4293      	cmp	r3, r2
 801ad5c:	bfa8      	it	ge
 801ad5e:	4613      	movge	r3, r2
 801ad60:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ad62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad64:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad66:	797b      	ldrb	r3, [r7, #5]
 801ad68:	f003 0301 	and.w	r3, r3, #1
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d027      	beq.n	801adc0 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad70:	f107 0012 	add.w	r0, r7, #18
 801ad74:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ad76:	8bf9      	ldrh	r1, [r7, #30]
 801ad78:	2301      	movs	r3, #1
 801ad7a:	9302      	str	r3, [sp, #8]
 801ad7c:	797b      	ldrb	r3, [r7, #5]
 801ad7e:	9301      	str	r3, [sp, #4]
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	9300      	str	r3, [sp, #0]
 801ad84:	4603      	mov	r3, r0
 801ad86:	2004      	movs	r0, #4
 801ad88:	f7ff fe2e 	bl	801a9e8 <tcp_pbuf_prealloc>
 801ad8c:	6578      	str	r0, [r7, #84]	@ 0x54
 801ad8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	f000 8228 	beq.w	801b1e6 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ad96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad98:	6858      	ldr	r0, [r3, #4]
 801ad9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad9e:	68ba      	ldr	r2, [r7, #8]
 801ada0:	4413      	add	r3, r2
 801ada2:	8bfa      	ldrh	r2, [r7, #30]
 801ada4:	4619      	mov	r1, r3
 801ada6:	f007 fd46 	bl	8022836 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801adaa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801adac:	f7fb fabe 	bl	801632c <pbuf_clen>
 801adb0:	4603      	mov	r3, r0
 801adb2:	461a      	mov	r2, r3
 801adb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801adb8:	4413      	add	r3, r2
 801adba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801adbe:	e03f      	b.n	801ae40 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801adc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801adc2:	685b      	ldr	r3, [r3, #4]
 801adc4:	637b      	str	r3, [r7, #52]	@ 0x34
 801adc6:	e002      	b.n	801adce <tcp_write+0x222>
 801adc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	637b      	str	r3, [r7, #52]	@ 0x34
 801adce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1f8      	bne.n	801adc8 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801add6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801add8:	7b1b      	ldrb	r3, [r3, #12]
 801adda:	2b01      	cmp	r3, #1
 801addc:	d115      	bne.n	801ae0a <tcp_write+0x25e>
 801adde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ade0:	685b      	ldr	r3, [r3, #4]
 801ade2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ade4:	8952      	ldrh	r2, [r2, #10]
 801ade6:	4413      	add	r3, r2
 801ade8:	68ba      	ldr	r2, [r7, #8]
 801adea:	429a      	cmp	r2, r3
 801adec:	d10d      	bne.n	801ae0a <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801adee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d006      	beq.n	801ae04 <tcp_write+0x258>
 801adf6:	4b1d      	ldr	r3, [pc, #116]	@ (801ae6c <tcp_write+0x2c0>)
 801adf8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 801adfc:	4921      	ldr	r1, [pc, #132]	@ (801ae84 <tcp_write+0x2d8>)
 801adfe:	481d      	ldr	r0, [pc, #116]	@ (801ae74 <tcp_write+0x2c8>)
 801ae00:	f007 fa1e 	bl	8022240 <iprintf>
          extendlen = seglen;
 801ae04:	8bfb      	ldrh	r3, [r7, #30]
 801ae06:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801ae08:	e01a      	b.n	801ae40 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ae0a:	8bfb      	ldrh	r3, [r7, #30]
 801ae0c:	2201      	movs	r2, #1
 801ae0e:	4619      	mov	r1, r3
 801ae10:	2004      	movs	r0, #4
 801ae12:	f7fa fe7f 	bl	8015b14 <pbuf_alloc>
 801ae16:	6578      	str	r0, [r7, #84]	@ 0x54
 801ae18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f000 81e5 	beq.w	801b1ea <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801ae20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ae24:	68ba      	ldr	r2, [r7, #8]
 801ae26:	441a      	add	r2, r3
 801ae28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae2a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ae2c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ae2e:	f7fb fa7d 	bl	801632c <pbuf_clen>
 801ae32:	4603      	mov	r3, r0
 801ae34:	461a      	mov	r2, r3
 801ae36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ae3a:	4413      	add	r3, r2
 801ae3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ae40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ae44:	8bfb      	ldrh	r3, [r7, #30]
 801ae46:	4413      	add	r3, r2
 801ae48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801ae4c:	e0e0      	b.n	801b010 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	f000 80db 	beq.w	801b010 <tcp_write+0x464>
 801ae5a:	4b04      	ldr	r3, [pc, #16]	@ (801ae6c <tcp_write+0x2c0>)
 801ae5c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801ae60:	4909      	ldr	r1, [pc, #36]	@ (801ae88 <tcp_write+0x2dc>)
 801ae62:	4804      	ldr	r0, [pc, #16]	@ (801ae74 <tcp_write+0x2c8>)
 801ae64:	f007 f9ec 	bl	8022240 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ae68:	e0d2      	b.n	801b010 <tcp_write+0x464>
 801ae6a:	bf00      	nop
 801ae6c:	08026e10 	.word	0x08026e10
 801ae70:	08026f38 	.word	0x08026f38
 801ae74:	08026e74 	.word	0x08026e74
 801ae78:	08026f6c 	.word	0x08026f6c
 801ae7c:	08026f84 	.word	0x08026f84
 801ae80:	08026fa4 	.word	0x08026fa4
 801ae84:	08026fc4 	.word	0x08026fc4
 801ae88:	08026ff0 	.word	0x08026ff0
    struct pbuf *p;
    u16_t left = len - pos;
 801ae8c:	88fa      	ldrh	r2, [r7, #6]
 801ae8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ae96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae9a:	b29b      	uxth	r3, r3
 801ae9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ae9e:	1ad3      	subs	r3, r2, r3
 801aea0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801aea2:	8b7a      	ldrh	r2, [r7, #26]
 801aea4:	8bbb      	ldrh	r3, [r7, #28]
 801aea6:	4293      	cmp	r3, r2
 801aea8:	bf28      	it	cs
 801aeaa:	4613      	movcs	r3, r2
 801aeac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801aeae:	797b      	ldrb	r3, [r7, #5]
 801aeb0:	f003 0301 	and.w	r3, r3, #1
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d036      	beq.n	801af26 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801aeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aebc:	b29a      	uxth	r2, r3
 801aebe:	8b3b      	ldrh	r3, [r7, #24]
 801aec0:	4413      	add	r3, r2
 801aec2:	b299      	uxth	r1, r3
 801aec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	bf0c      	ite	eq
 801aeca:	2301      	moveq	r3, #1
 801aecc:	2300      	movne	r3, #0
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	f107 0012 	add.w	r0, r7, #18
 801aed4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801aed6:	9302      	str	r3, [sp, #8]
 801aed8:	797b      	ldrb	r3, [r7, #5]
 801aeda:	9301      	str	r3, [sp, #4]
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	9300      	str	r3, [sp, #0]
 801aee0:	4603      	mov	r3, r0
 801aee2:	2000      	movs	r0, #0
 801aee4:	f7ff fd80 	bl	801a9e8 <tcp_pbuf_prealloc>
 801aee8:	6338      	str	r0, [r7, #48]	@ 0x30
 801aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	f000 817e 	beq.w	801b1ee <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef4:	895b      	ldrh	r3, [r3, #10]
 801aef6:	8b3a      	ldrh	r2, [r7, #24]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d906      	bls.n	801af0a <tcp_write+0x35e>
 801aefc:	4b8f      	ldr	r3, [pc, #572]	@ (801b13c <tcp_write+0x590>)
 801aefe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801af02:	498f      	ldr	r1, [pc, #572]	@ (801b140 <tcp_write+0x594>)
 801af04:	488f      	ldr	r0, [pc, #572]	@ (801b144 <tcp_write+0x598>)
 801af06:	f007 f99b 	bl	8022240 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af0c:	685a      	ldr	r2, [r3, #4]
 801af0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af12:	18d0      	adds	r0, r2, r3
 801af14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af18:	68ba      	ldr	r2, [r7, #8]
 801af1a:	4413      	add	r3, r2
 801af1c:	8b3a      	ldrh	r2, [r7, #24]
 801af1e:	4619      	mov	r1, r3
 801af20:	f007 fc89 	bl	8022836 <memcpy>
 801af24:	e02e      	b.n	801af84 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801af26:	8a7b      	ldrh	r3, [r7, #18]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d006      	beq.n	801af3a <tcp_write+0x38e>
 801af2c:	4b83      	ldr	r3, [pc, #524]	@ (801b13c <tcp_write+0x590>)
 801af2e:	f240 224b 	movw	r2, #587	@ 0x24b
 801af32:	4985      	ldr	r1, [pc, #532]	@ (801b148 <tcp_write+0x59c>)
 801af34:	4883      	ldr	r0, [pc, #524]	@ (801b144 <tcp_write+0x598>)
 801af36:	f007 f983 	bl	8022240 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801af3a:	8b3b      	ldrh	r3, [r7, #24]
 801af3c:	2201      	movs	r2, #1
 801af3e:	4619      	mov	r1, r3
 801af40:	2000      	movs	r0, #0
 801af42:	f7fa fde7 	bl	8015b14 <pbuf_alloc>
 801af46:	6178      	str	r0, [r7, #20]
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	f000 8151 	beq.w	801b1f2 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801af50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af54:	68ba      	ldr	r2, [r7, #8]
 801af56:	441a      	add	r2, r3
 801af58:	697b      	ldr	r3, [r7, #20]
 801af5a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801af5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af60:	b29b      	uxth	r3, r3
 801af62:	2200      	movs	r2, #0
 801af64:	4619      	mov	r1, r3
 801af66:	2000      	movs	r0, #0
 801af68:	f7fa fdd4 	bl	8015b14 <pbuf_alloc>
 801af6c:	6338      	str	r0, [r7, #48]	@ 0x30
 801af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af70:	2b00      	cmp	r3, #0
 801af72:	d103      	bne.n	801af7c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af74:	6978      	ldr	r0, [r7, #20]
 801af76:	f7fb f945 	bl	8016204 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af7a:	e13d      	b.n	801b1f8 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af7c:	6979      	ldr	r1, [r7, #20]
 801af7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af80:	f7fb fa0c 	bl	801639c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af86:	f7fb f9d1 	bl	801632c <pbuf_clen>
 801af8a:	4603      	mov	r3, r0
 801af8c:	461a      	mov	r2, r3
 801af8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af92:	4413      	add	r3, r2
 801af94:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801af98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af9c:	2b04      	cmp	r3, #4
 801af9e:	d805      	bhi.n	801afac <tcp_write+0x400>
 801afa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801afa4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d903      	bls.n	801afb4 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801afac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801afae:	f7fb f929 	bl	8016204 <pbuf_free>
      goto memerr;
 801afb2:	e121      	b.n	801b1f8 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801afb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801afbc:	441a      	add	r2, r3
 801afbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801afc2:	9300      	str	r3, [sp, #0]
 801afc4:	4613      	mov	r3, r2
 801afc6:	2200      	movs	r2, #0
 801afc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801afca:	68f8      	ldr	r0, [r7, #12]
 801afcc:	f7ff fc7c 	bl	801a8c8 <tcp_create_segment>
 801afd0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801afd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	f000 810e 	beq.w	801b1f6 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801afda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d102      	bne.n	801afe6 <tcp_write+0x43a>
      queue = seg;
 801afe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afe2:	647b      	str	r3, [r7, #68]	@ 0x44
 801afe4:	e00c      	b.n	801b000 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801afe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d106      	bne.n	801affa <tcp_write+0x44e>
 801afec:	4b53      	ldr	r3, [pc, #332]	@ (801b13c <tcp_write+0x590>)
 801afee:	f240 2285 	movw	r2, #645	@ 0x285
 801aff2:	4956      	ldr	r1, [pc, #344]	@ (801b14c <tcp_write+0x5a0>)
 801aff4:	4853      	ldr	r0, [pc, #332]	@ (801b144 <tcp_write+0x598>)
 801aff6:	f007 f923 	bl	8022240 <iprintf>
      prev_seg->next = seg;
 801affa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801affc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801affe:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801b000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b002:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801b004:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b008:	8b3b      	ldrh	r3, [r7, #24]
 801b00a:	4413      	add	r3, r2
 801b00c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801b010:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b014:	88fb      	ldrh	r3, [r7, #6]
 801b016:	429a      	cmp	r2, r3
 801b018:	f4ff af38 	bcc.w	801ae8c <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801b01c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d02c      	beq.n	801b07c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801b022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b024:	685b      	ldr	r3, [r3, #4]
 801b026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b028:	e01e      	b.n	801b068 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 801b02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b02c:	891a      	ldrh	r2, [r3, #8]
 801b02e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b030:	4413      	add	r3, r2
 801b032:	b29a      	uxth	r2, r3
 801b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b036:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d110      	bne.n	801b062 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b046:	8952      	ldrh	r2, [r2, #10]
 801b048:	4413      	add	r3, r2
 801b04a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b04c:	68b9      	ldr	r1, [r7, #8]
 801b04e:	4618      	mov	r0, r3
 801b050:	f007 fbf1 	bl	8022836 <memcpy>
        p->len += oversize_used;
 801b054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b056:	895a      	ldrh	r2, [r3, #10]
 801b058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b05a:	4413      	add	r3, r2
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b060:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d1dd      	bne.n	801b02a <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801b06e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b070:	891a      	ldrh	r2, [r3, #8]
 801b072:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b074:	4413      	add	r3, r2
 801b076:	b29a      	uxth	r2, r3
 801b078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b07a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b07c:	8a7a      	ldrh	r2, [r7, #18]
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b086:	2b00      	cmp	r3, #0
 801b088:	d018      	beq.n	801b0bc <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d106      	bne.n	801b09e <tcp_write+0x4f2>
 801b090:	4b2a      	ldr	r3, [pc, #168]	@ (801b13c <tcp_write+0x590>)
 801b092:	f240 22ba 	movw	r2, #698	@ 0x2ba
 801b096:	492e      	ldr	r1, [pc, #184]	@ (801b150 <tcp_write+0x5a4>)
 801b098:	482a      	ldr	r0, [pc, #168]	@ (801b144 <tcp_write+0x598>)
 801b09a:	f007 f8d1 	bl	8022240 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0a0:	685b      	ldr	r3, [r3, #4]
 801b0a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7fb f979 	bl	801639c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ac:	891a      	ldrh	r2, [r3, #8]
 801b0ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b0b0:	891b      	ldrh	r3, [r3, #8]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	b29a      	uxth	r2, r3
 801b0b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0b8:	811a      	strh	r2, [r3, #8]
 801b0ba:	e037      	b.n	801b12c <tcp_write+0x580>
  } else if (extendlen > 0) {
 801b0bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d034      	beq.n	801b12c <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d003      	beq.n	801b0d0 <tcp_write+0x524>
 801b0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ca:	685b      	ldr	r3, [r3, #4]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d106      	bne.n	801b0de <tcp_write+0x532>
 801b0d0:	4b1a      	ldr	r3, [pc, #104]	@ (801b13c <tcp_write+0x590>)
 801b0d2:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 801b0d6:	491f      	ldr	r1, [pc, #124]	@ (801b154 <tcp_write+0x5a8>)
 801b0d8:	481a      	ldr	r0, [pc, #104]	@ (801b144 <tcp_write+0x598>)
 801b0da:	f007 f8b1 	bl	8022240 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0e0:	685b      	ldr	r3, [r3, #4]
 801b0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0e4:	e009      	b.n	801b0fa <tcp_write+0x54e>
      p->tot_len += extendlen;
 801b0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e8:	891a      	ldrh	r2, [r3, #8]
 801b0ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0ec:	4413      	add	r3, r2
 801b0ee:	b29a      	uxth	r2, r3
 801b0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0f2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d1f1      	bne.n	801b0e6 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b104:	891a      	ldrh	r2, [r3, #8]
 801b106:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b108:	4413      	add	r3, r2
 801b10a:	b29a      	uxth	r2, r3
 801b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b10e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b112:	895a      	ldrh	r2, [r3, #10]
 801b114:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b116:	4413      	add	r3, r2
 801b118:	b29a      	uxth	r2, r3
 801b11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b11c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b120:	891a      	ldrh	r2, [r3, #8]
 801b122:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b124:	4413      	add	r3, r2
 801b126:	b29a      	uxth	r2, r3
 801b128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b12a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b12c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d112      	bne.n	801b158 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b136:	669a      	str	r2, [r3, #104]	@ 0x68
 801b138:	e011      	b.n	801b15e <tcp_write+0x5b2>
 801b13a:	bf00      	nop
 801b13c:	08026e10 	.word	0x08026e10
 801b140:	08027020 	.word	0x08027020
 801b144:	08026e74 	.word	0x08026e74
 801b148:	08027060 	.word	0x08027060
 801b14c:	08027070 	.word	0x08027070
 801b150:	08027084 	.word	0x08027084
 801b154:	080270bc 	.word	0x080270bc
  } else {
    last_unsent->next = queue;
 801b158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b15c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b162:	88fb      	ldrh	r3, [r7, #6]
 801b164:	441a      	add	r2, r3
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b170:	88fb      	ldrh	r3, [r7, #6]
 801b172:	1ad3      	subs	r3, r2, r3
 801b174:	b29a      	uxth	r2, r3
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b182:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d00e      	beq.n	801b1ae <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b194:	2b00      	cmp	r3, #0
 801b196:	d10a      	bne.n	801b1ae <tcp_write+0x602>
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d106      	bne.n	801b1ae <tcp_write+0x602>
 801b1a0:	4b30      	ldr	r3, [pc, #192]	@ (801b264 <tcp_write+0x6b8>)
 801b1a2:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801b1a6:	4930      	ldr	r1, [pc, #192]	@ (801b268 <tcp_write+0x6bc>)
 801b1a8:	4830      	ldr	r0, [pc, #192]	@ (801b26c <tcp_write+0x6c0>)
 801b1aa:	f007 f849 	bl	8022240 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801b1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d016      	beq.n	801b1e2 <tcp_write+0x636>
 801b1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1b6:	68db      	ldr	r3, [r3, #12]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d012      	beq.n	801b1e2 <tcp_write+0x636>
 801b1bc:	797b      	ldrb	r3, [r7, #5]
 801b1be:	f003 0302 	and.w	r3, r3, #2
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d10d      	bne.n	801b1e2 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	899b      	ldrh	r3, [r3, #12]
 801b1cc:	b29c      	uxth	r4, r3
 801b1ce:	2008      	movs	r0, #8
 801b1d0:	f7f9 fd72 	bl	8014cb8 <lwip_htons>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	461a      	mov	r2, r3
 801b1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1da:	68db      	ldr	r3, [r3, #12]
 801b1dc:	4322      	orrs	r2, r4
 801b1de:	b292      	uxth	r2, r2
 801b1e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	e039      	b.n	801b25a <tcp_write+0x6ae>
          goto memerr;
 801b1e6:	bf00      	nop
 801b1e8:	e006      	b.n	801b1f8 <tcp_write+0x64c>
            goto memerr;
 801b1ea:	bf00      	nop
 801b1ec:	e004      	b.n	801b1f8 <tcp_write+0x64c>
        goto memerr;
 801b1ee:	bf00      	nop
 801b1f0:	e002      	b.n	801b1f8 <tcp_write+0x64c>
        goto memerr;
 801b1f2:	bf00      	nop
 801b1f4:	e000      	b.n	801b1f8 <tcp_write+0x64c>
      goto memerr;
 801b1f6:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	7e9b      	ldrb	r3, [r3, #26]
 801b1fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b200:	b2da      	uxtb	r2, r3
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801b206:	4b1a      	ldr	r3, [pc, #104]	@ (801b270 <tcp_write+0x6c4>)
 801b208:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b20c:	3301      	adds	r3, #1
 801b20e:	b29a      	uxth	r2, r3
 801b210:	4b17      	ldr	r3, [pc, #92]	@ (801b270 <tcp_write+0x6c4>)
 801b212:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801b216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d002      	beq.n	801b222 <tcp_write+0x676>
    pbuf_free(concat_p);
 801b21c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801b21e:	f7fa fff1 	bl	8016204 <pbuf_free>
  }
  if (queue != NULL) {
 801b222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b224:	2b00      	cmp	r3, #0
 801b226:	d002      	beq.n	801b22e <tcp_write+0x682>
    tcp_segs_free(queue);
 801b228:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b22a:	f7fc fc0a 	bl	8017a42 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b234:	2b00      	cmp	r3, #0
 801b236:	d00e      	beq.n	801b256 <tcp_write+0x6aa>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d10a      	bne.n	801b256 <tcp_write+0x6aa>
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b244:	2b00      	cmp	r3, #0
 801b246:	d106      	bne.n	801b256 <tcp_write+0x6aa>
 801b248:	4b06      	ldr	r3, [pc, #24]	@ (801b264 <tcp_write+0x6b8>)
 801b24a:	f240 3201 	movw	r2, #769	@ 0x301
 801b24e:	4906      	ldr	r1, [pc, #24]	@ (801b268 <tcp_write+0x6bc>)
 801b250:	4806      	ldr	r0, [pc, #24]	@ (801b26c <tcp_write+0x6c0>)
 801b252:	f006 fff5 	bl	8022240 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b256:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	375c      	adds	r7, #92	@ 0x5c
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd90      	pop	{r4, r7, pc}
 801b262:	bf00      	nop
 801b264:	08026e10 	.word	0x08026e10
 801b268:	080270f4 	.word	0x080270f4
 801b26c:	08026e74 	.word	0x08026e74
 801b270:	2000bbe4 	.word	0x2000bbe4

0801b274 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b08a      	sub	sp, #40	@ 0x28
 801b278:	af02      	add	r7, sp, #8
 801b27a:	6078      	str	r0, [r7, #4]
 801b27c:	460b      	mov	r3, r1
 801b27e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b280:	2300      	movs	r3, #0
 801b282:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b284:	2300      	movs	r3, #0
 801b286:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b288:	78fb      	ldrb	r3, [r7, #3]
 801b28a:	f003 0303 	and.w	r3, r3, #3
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d106      	bne.n	801b2a0 <tcp_enqueue_flags+0x2c>
 801b292:	4b7b      	ldr	r3, [pc, #492]	@ (801b480 <tcp_enqueue_flags+0x20c>)
 801b294:	f240 321a 	movw	r2, #794	@ 0x31a
 801b298:	497a      	ldr	r1, [pc, #488]	@ (801b484 <tcp_enqueue_flags+0x210>)
 801b29a:	487b      	ldr	r0, [pc, #492]	@ (801b488 <tcp_enqueue_flags+0x214>)
 801b29c:	f006 ffd0 	bl	8022240 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b2a6:	2b03      	cmp	r3, #3
 801b2a8:	d806      	bhi.n	801b2b8 <tcp_enqueue_flags+0x44>
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b2b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801b2b4:	4293      	cmp	r3, r2
 801b2b6:	d916      	bls.n	801b2e6 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 801b2b8:	78fb      	ldrb	r3, [r7, #3]
 801b2ba:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d111      	bne.n	801b2e6 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801b2c2:	4b72      	ldr	r3, [pc, #456]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b2c4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	b29a      	uxth	r2, r3
 801b2cc:	4b6f      	ldr	r3, [pc, #444]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b2ce:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	7e9b      	ldrb	r3, [r3, #26]
 801b2d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b2da:	b2da      	uxtb	r2, r3
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b2e4:	e0c7      	b.n	801b476 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 801b2e6:	78fb      	ldrb	r3, [r7, #3]
 801b2e8:	f003 0302 	and.w	r3, r3, #2
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d001      	beq.n	801b2f4 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 801b2f0:	2301      	movs	r3, #1
 801b2f2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b2f4:	7ffb      	ldrb	r3, [r7, #31]
 801b2f6:	009b      	lsls	r3, r3, #2
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	f003 0304 	and.w	r3, r3, #4
 801b2fe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b300:	7dfb      	ldrb	r3, [r7, #23]
 801b302:	b29b      	uxth	r3, r3
 801b304:	2200      	movs	r2, #0
 801b306:	4619      	mov	r1, r3
 801b308:	2000      	movs	r0, #0
 801b30a:	f7fa fc03 	bl	8015b14 <pbuf_alloc>
 801b30e:	6138      	str	r0, [r7, #16]
 801b310:	693b      	ldr	r3, [r7, #16]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d111      	bne.n	801b33a <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	7e9b      	ldrb	r3, [r3, #26]
 801b31a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b31e:	b2da      	uxtb	r2, r3
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b324:	4b59      	ldr	r3, [pc, #356]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b326:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b32a:	3301      	adds	r3, #1
 801b32c:	b29a      	uxth	r2, r3
 801b32e:	4b57      	ldr	r3, [pc, #348]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b330:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b334:	f04f 33ff 	mov.w	r3, #4294967295
 801b338:	e09d      	b.n	801b476 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b33a:	693b      	ldr	r3, [r7, #16]
 801b33c:	895a      	ldrh	r2, [r3, #10]
 801b33e:	7dfb      	ldrb	r3, [r7, #23]
 801b340:	b29b      	uxth	r3, r3
 801b342:	429a      	cmp	r2, r3
 801b344:	d206      	bcs.n	801b354 <tcp_enqueue_flags+0xe0>
 801b346:	4b4e      	ldr	r3, [pc, #312]	@ (801b480 <tcp_enqueue_flags+0x20c>)
 801b348:	f44f 7250 	mov.w	r2, #832	@ 0x340
 801b34c:	4950      	ldr	r1, [pc, #320]	@ (801b490 <tcp_enqueue_flags+0x21c>)
 801b34e:	484e      	ldr	r0, [pc, #312]	@ (801b488 <tcp_enqueue_flags+0x214>)
 801b350:	f006 ff76 	bl	8022240 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801b358:	78fa      	ldrb	r2, [r7, #3]
 801b35a:	7ffb      	ldrb	r3, [r7, #31]
 801b35c:	9300      	str	r3, [sp, #0]
 801b35e:	460b      	mov	r3, r1
 801b360:	6939      	ldr	r1, [r7, #16]
 801b362:	6878      	ldr	r0, [r7, #4]
 801b364:	f7ff fab0 	bl	801a8c8 <tcp_create_segment>
 801b368:	60f8      	str	r0, [r7, #12]
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d111      	bne.n	801b394 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	7e9b      	ldrb	r3, [r3, #26]
 801b374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b378:	b2da      	uxtb	r2, r3
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b37e:	4b43      	ldr	r3, [pc, #268]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b380:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b384:	3301      	adds	r3, #1
 801b386:	b29a      	uxth	r2, r3
 801b388:	4b40      	ldr	r3, [pc, #256]	@ (801b48c <tcp_enqueue_flags+0x218>)
 801b38a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b38e:	f04f 33ff 	mov.w	r3, #4294967295
 801b392:	e070      	b.n	801b476 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	68db      	ldr	r3, [r3, #12]
 801b398:	f003 0303 	and.w	r3, r3, #3
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d006      	beq.n	801b3ae <tcp_enqueue_flags+0x13a>
 801b3a0:	4b37      	ldr	r3, [pc, #220]	@ (801b480 <tcp_enqueue_flags+0x20c>)
 801b3a2:	f240 3249 	movw	r2, #841	@ 0x349
 801b3a6:	493b      	ldr	r1, [pc, #236]	@ (801b494 <tcp_enqueue_flags+0x220>)
 801b3a8:	4837      	ldr	r0, [pc, #220]	@ (801b488 <tcp_enqueue_flags+0x214>)
 801b3aa:	f006 ff49 	bl	8022240 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	891b      	ldrh	r3, [r3, #8]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d006      	beq.n	801b3c4 <tcp_enqueue_flags+0x150>
 801b3b6:	4b32      	ldr	r3, [pc, #200]	@ (801b480 <tcp_enqueue_flags+0x20c>)
 801b3b8:	f240 324a 	movw	r2, #842	@ 0x34a
 801b3bc:	4936      	ldr	r1, [pc, #216]	@ (801b498 <tcp_enqueue_flags+0x224>)
 801b3be:	4832      	ldr	r0, [pc, #200]	@ (801b488 <tcp_enqueue_flags+0x214>)
 801b3c0:	f006 ff3e 	bl	8022240 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d103      	bne.n	801b3d4 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	68fa      	ldr	r2, [r7, #12]
 801b3d0:	669a      	str	r2, [r3, #104]	@ 0x68
 801b3d2:	e00d      	b.n	801b3f0 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b3d8:	61bb      	str	r3, [r7, #24]
 801b3da:	e002      	b.n	801b3e2 <tcp_enqueue_flags+0x16e>
 801b3dc:	69bb      	ldr	r3, [r7, #24]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	61bb      	str	r3, [r7, #24]
 801b3e2:	69bb      	ldr	r3, [r7, #24]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d1f8      	bne.n	801b3dc <tcp_enqueue_flags+0x168>
    useg->next = seg;
 801b3ea:	69bb      	ldr	r3, [r7, #24]
 801b3ec:	68fa      	ldr	r2, [r7, #12]
 801b3ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b3f8:	78fb      	ldrb	r3, [r7, #3]
 801b3fa:	f003 0302 	and.w	r3, r3, #2
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d104      	bne.n	801b40c <tcp_enqueue_flags+0x198>
 801b402:	78fb      	ldrb	r3, [r7, #3]
 801b404:	f003 0301 	and.w	r3, r3, #1
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d004      	beq.n	801b416 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b410:	1c5a      	adds	r2, r3, #1
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b416:	78fb      	ldrb	r3, [r7, #3]
 801b418:	f003 0301 	and.w	r3, r3, #1
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d006      	beq.n	801b42e <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	7e9b      	ldrb	r3, [r3, #26]
 801b424:	f043 0320 	orr.w	r3, r3, #32
 801b428:	b2da      	uxtb	r2, r3
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	685b      	ldr	r3, [r3, #4]
 801b432:	4618      	mov	r0, r3
 801b434:	f7fa ff7a 	bl	801632c <pbuf_clen>
 801b438:	4603      	mov	r3, r0
 801b43a:	461a      	mov	r2, r3
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b442:	4413      	add	r3, r2
 801b444:	b29a      	uxth	r2, r3
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b452:	2b00      	cmp	r3, #0
 801b454:	d00e      	beq.n	801b474 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d10a      	bne.n	801b474 <tcp_enqueue_flags+0x200>
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b462:	2b00      	cmp	r3, #0
 801b464:	d106      	bne.n	801b474 <tcp_enqueue_flags+0x200>
 801b466:	4b06      	ldr	r3, [pc, #24]	@ (801b480 <tcp_enqueue_flags+0x20c>)
 801b468:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801b46c:	490b      	ldr	r1, [pc, #44]	@ (801b49c <tcp_enqueue_flags+0x228>)
 801b46e:	4806      	ldr	r0, [pc, #24]	@ (801b488 <tcp_enqueue_flags+0x214>)
 801b470:	f006 fee6 	bl	8022240 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b474:	2300      	movs	r3, #0
}
 801b476:	4618      	mov	r0, r3
 801b478:	3720      	adds	r7, #32
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd80      	pop	{r7, pc}
 801b47e:	bf00      	nop
 801b480:	08026e10 	.word	0x08026e10
 801b484:	08027114 	.word	0x08027114
 801b488:	08026e74 	.word	0x08026e74
 801b48c:	2000bbe4 	.word	0x2000bbe4
 801b490:	0802716c 	.word	0x0802716c
 801b494:	080271a8 	.word	0x080271a8
 801b498:	080271c0 	.word	0x080271c0
 801b49c:	080271ec 	.word	0x080271ec

0801b4a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b4a0:	b590      	push	{r4, r7, lr}
 801b4a2:	b08b      	sub	sp, #44	@ 0x2c
 801b4a4:	af04      	add	r7, sp, #16
 801b4a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b4ac:	7dbb      	ldrb	r3, [r7, #22]
 801b4ae:	b29c      	uxth	r4, r3
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7f9 fc0c 	bl	8014cd2 <lwip_htonl>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	2200      	movs	r2, #0
 801b4be:	4621      	mov	r1, r4
 801b4c0:	6878      	ldr	r0, [r7, #4]
 801b4c2:	f7ff f947 	bl	801a754 <tcp_output_alloc_header>
 801b4c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b4c8:	693b      	ldr	r3, [r7, #16]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d109      	bne.n	801b4e2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	7e9b      	ldrb	r3, [r3, #26]
 801b4d2:	f043 0303 	orr.w	r3, r3, #3
 801b4d6:	b2da      	uxtb	r2, r3
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b4dc:	f06f 0301 	mvn.w	r3, #1
 801b4e0:	e036      	b.n	801b550 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	3304      	adds	r3, #4
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	f004 fbfa 	bl	801fce0 <ip4_route>
 801b4ec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d102      	bne.n	801b4fa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801b4f4:	23fc      	movs	r3, #252	@ 0xfc
 801b4f6:	75fb      	strb	r3, [r7, #23]
 801b4f8:	e012      	b.n	801b520 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801b4fa:	6879      	ldr	r1, [r7, #4]
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	1d18      	adds	r0, r3, #4
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	7a9c      	ldrb	r4, [r3, #10]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	7a5b      	ldrb	r3, [r3, #9]
 801b508:	68fa      	ldr	r2, [r7, #12]
 801b50a:	9202      	str	r2, [sp, #8]
 801b50c:	2206      	movs	r2, #6
 801b50e:	9201      	str	r2, [sp, #4]
 801b510:	9300      	str	r3, [sp, #0]
 801b512:	4623      	mov	r3, r4
 801b514:	4602      	mov	r2, r0
 801b516:	6938      	ldr	r0, [r7, #16]
 801b518:	f004 fe54 	bl	80201c4 <ip4_output_if>
 801b51c:	4603      	mov	r3, r0
 801b51e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801b520:	6938      	ldr	r0, [r7, #16]
 801b522:	f7fa fe6f 	bl	8016204 <pbuf_free>

  if (err != ERR_OK) {
 801b526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d007      	beq.n	801b53e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	7e9b      	ldrb	r3, [r3, #26]
 801b532:	f043 0303 	orr.w	r3, r3, #3
 801b536:	b2da      	uxtb	r2, r3
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	769a      	strb	r2, [r3, #26]
 801b53c:	e006      	b.n	801b54c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	7e9b      	ldrb	r3, [r3, #26]
 801b542:	f023 0303 	bic.w	r3, r3, #3
 801b546:	b2da      	uxtb	r2, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801b54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b550:	4618      	mov	r0, r3
 801b552:	371c      	adds	r7, #28
 801b554:	46bd      	mov	sp, r7
 801b556:	bd90      	pop	{r4, r7, pc}

0801b558 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b558:	b5b0      	push	{r4, r5, r7, lr}
 801b55a:	b08a      	sub	sp, #40	@ 0x28
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	7d1b      	ldrb	r3, [r3, #20]
 801b564:	2b01      	cmp	r3, #1
 801b566:	d106      	bne.n	801b576 <tcp_output+0x1e>
 801b568:	4b99      	ldr	r3, [pc, #612]	@ (801b7d0 <tcp_output+0x278>)
 801b56a:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801b56e:	4999      	ldr	r1, [pc, #612]	@ (801b7d4 <tcp_output+0x27c>)
 801b570:	4899      	ldr	r0, [pc, #612]	@ (801b7d8 <tcp_output+0x280>)
 801b572:	f006 fe65 	bl	8022240 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b576:	4b99      	ldr	r3, [pc, #612]	@ (801b7dc <tcp_output+0x284>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	687a      	ldr	r2, [r7, #4]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d101      	bne.n	801b584 <tcp_output+0x2c>
    return ERR_OK;
 801b580:	2300      	movs	r3, #0
 801b582:	e1cb      	b.n	801b91c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b590:	4293      	cmp	r3, r2
 801b592:	bf28      	it	cs
 801b594:	4613      	movcs	r3, r2
 801b596:	b29b      	uxth	r3, r3
 801b598:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b59e:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	7e9b      	ldrb	r3, [r3, #26]
 801b5a4:	f003 0302 	and.w	r3, r3, #2
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d017      	beq.n	801b5dc <tcp_output+0x84>
 801b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d00f      	beq.n	801b5d2 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5b4:	68db      	ldr	r3, [r3, #12]
 801b5b6:	685b      	ldr	r3, [r3, #4]
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f7f9 fb8a 	bl	8014cd2 <lwip_htonl>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b5c4:	1ad3      	subs	r3, r2, r3
 801b5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b5c8:	8912      	ldrh	r2, [r2, #8]
 801b5ca:	4413      	add	r3, r2
     (seg == NULL ||
 801b5cc:	69ba      	ldr	r2, [r7, #24]
 801b5ce:	429a      	cmp	r2, r3
 801b5d0:	d204      	bcs.n	801b5dc <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f7ff ff64 	bl	801b4a0 <tcp_send_empty_ack>
 801b5d8:	4603      	mov	r3, r0
 801b5da:	e19f      	b.n	801b91c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b5e2:	6a3b      	ldr	r3, [r7, #32]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d007      	beq.n	801b5f8 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801b5e8:	e002      	b.n	801b5f0 <tcp_output+0x98>
 801b5ea:	6a3b      	ldr	r3, [r7, #32]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	623b      	str	r3, [r7, #32]
 801b5f0:	6a3b      	ldr	r3, [r7, #32]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d1f8      	bne.n	801b5ea <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	3304      	adds	r3, #4
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	f004 fb6f 	bl	801fce0 <ip4_route>
 801b602:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d102      	bne.n	801b610 <tcp_output+0xb8>
    return ERR_RTE;
 801b60a:	f06f 0303 	mvn.w	r3, #3
 801b60e:	e185      	b.n	801b91c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2b00      	cmp	r3, #0
 801b614:	d003      	beq.n	801b61e <tcp_output+0xc6>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d111      	bne.n	801b642 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d002      	beq.n	801b62a <tcp_output+0xd2>
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	3304      	adds	r3, #4
 801b628:	e000      	b.n	801b62c <tcp_output+0xd4>
 801b62a:	2300      	movs	r3, #0
 801b62c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b62e:	693b      	ldr	r3, [r7, #16]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d102      	bne.n	801b63a <tcp_output+0xe2>
      return ERR_RTE;
 801b634:	f06f 0303 	mvn.w	r3, #3
 801b638:	e170      	b.n	801b91c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	681a      	ldr	r2, [r3, #0]
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b644:	2b00      	cmp	r3, #0
 801b646:	f000 813f 	beq.w	801b8c8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b64c:	68db      	ldr	r3, [r3, #12]
 801b64e:	685b      	ldr	r3, [r3, #4]
 801b650:	4618      	mov	r0, r3
 801b652:	f7f9 fb3e 	bl	8014cd2 <lwip_htonl>
 801b656:	4602      	mov	r2, r0
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b65c:	1ad3      	subs	r3, r2, r3
 801b65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b660:	8912      	ldrh	r2, [r2, #8]
 801b662:	4413      	add	r3, r2
  if (seg != NULL &&
 801b664:	69ba      	ldr	r2, [r7, #24]
 801b666:	429a      	cmp	r2, r3
 801b668:	f080 812e 	bcs.w	801b8c8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b66c:	69bb      	ldr	r3, [r7, #24]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	f000 812a 	beq.w	801b8c8 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b67a:	461a      	mov	r2, r3
 801b67c:	69bb      	ldr	r3, [r7, #24]
 801b67e:	4293      	cmp	r3, r2
 801b680:	f040 8122 	bne.w	801b8c8 <tcp_output+0x370>
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b688:	2b00      	cmp	r3, #0
 801b68a:	f040 811d 	bne.w	801b8c8 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801b694:	2b00      	cmp	r3, #0
 801b696:	f040 812c 	bne.w	801b8f2 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	2200      	movs	r2, #0
 801b69e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	2201      	movs	r2, #1
 801b6a6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 801b6aa:	e122      	b.n	801b8f2 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6ae:	68db      	ldr	r3, [r3, #12]
 801b6b0:	899b      	ldrh	r3, [r3, #12]
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7f9 faff 	bl	8014cb8 <lwip_htons>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	f003 0304 	and.w	r3, r3, #4
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d006      	beq.n	801b6d2 <tcp_output+0x17a>
 801b6c4:	4b42      	ldr	r3, [pc, #264]	@ (801b7d0 <tcp_output+0x278>)
 801b6c6:	f240 4245 	movw	r2, #1093	@ 0x445
 801b6ca:	4945      	ldr	r1, [pc, #276]	@ (801b7e0 <tcp_output+0x288>)
 801b6cc:	4842      	ldr	r0, [pc, #264]	@ (801b7d8 <tcp_output+0x280>)
 801b6ce:	f006 fdb7 	bl	8022240 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d01f      	beq.n	801b71a <tcp_output+0x1c2>
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	7e9b      	ldrb	r3, [r3, #26]
 801b6de:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d119      	bne.n	801b71a <tcp_output+0x1c2>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d00b      	beq.n	801b706 <tcp_output+0x1ae>
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d110      	bne.n	801b71a <tcp_output+0x1c2>
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6fc:	891a      	ldrh	r2, [r3, #8]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b702:	429a      	cmp	r2, r3
 801b704:	d209      	bcs.n	801b71a <tcp_output+0x1c2>
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d004      	beq.n	801b71a <tcp_output+0x1c2>
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b716:	2b03      	cmp	r3, #3
 801b718:	d901      	bls.n	801b71e <tcp_output+0x1c6>
 801b71a:	2301      	movs	r3, #1
 801b71c:	e000      	b.n	801b720 <tcp_output+0x1c8>
 801b71e:	2300      	movs	r3, #0
 801b720:	2b00      	cmp	r3, #0
 801b722:	d106      	bne.n	801b732 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	7e9b      	ldrb	r3, [r3, #26]
 801b728:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	f000 80e2 	beq.w	801b8f6 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	7d1b      	ldrb	r3, [r3, #20]
 801b736:	2b02      	cmp	r3, #2
 801b738:	d00d      	beq.n	801b756 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b73c:	68db      	ldr	r3, [r3, #12]
 801b73e:	899b      	ldrh	r3, [r3, #12]
 801b740:	b29c      	uxth	r4, r3
 801b742:	2010      	movs	r0, #16
 801b744:	f7f9 fab8 	bl	8014cb8 <lwip_htons>
 801b748:	4603      	mov	r3, r0
 801b74a:	461a      	mov	r2, r3
 801b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b74e:	68db      	ldr	r3, [r3, #12]
 801b750:	4322      	orrs	r2, r4
 801b752:	b292      	uxth	r2, r2
 801b754:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801b756:	697a      	ldr	r2, [r7, #20]
 801b758:	6879      	ldr	r1, [r7, #4]
 801b75a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b75c:	f000 f8e2 	bl	801b924 <tcp_output_segment>
 801b760:	4603      	mov	r3, r0
 801b762:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d009      	beq.n	801b780 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	7e9b      	ldrb	r3, [r3, #26]
 801b770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b774:	b2da      	uxtb	r2, r3
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	769a      	strb	r2, [r3, #26]
      return err;
 801b77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b77e:	e0cd      	b.n	801b91c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 801b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b782:	681a      	ldr	r2, [r3, #0]
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	7d1b      	ldrb	r3, [r3, #20]
 801b78c:	2b02      	cmp	r3, #2
 801b78e:	d006      	beq.n	801b79e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	7e9b      	ldrb	r3, [r3, #26]
 801b794:	f023 0303 	bic.w	r3, r3, #3
 801b798:	b2da      	uxtb	r2, r3
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7a0:	68db      	ldr	r3, [r3, #12]
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f7f9 fa94 	bl	8014cd2 <lwip_htonl>
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ae:	891b      	ldrh	r3, [r3, #8]
 801b7b0:	461d      	mov	r5, r3
 801b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7b4:	68db      	ldr	r3, [r3, #12]
 801b7b6:	899b      	ldrh	r3, [r3, #12]
 801b7b8:	b29b      	uxth	r3, r3
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7f9 fa7c 	bl	8014cb8 <lwip_htons>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	f003 0303 	and.w	r3, r3, #3
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d00c      	beq.n	801b7e4 <tcp_output+0x28c>
 801b7ca:	2301      	movs	r3, #1
 801b7cc:	e00b      	b.n	801b7e6 <tcp_output+0x28e>
 801b7ce:	bf00      	nop
 801b7d0:	08026e10 	.word	0x08026e10
 801b7d4:	08027214 	.word	0x08027214
 801b7d8:	08026e74 	.word	0x08026e74
 801b7dc:	2000bdc8 	.word	0x2000bdc8
 801b7e0:	0802723c 	.word	0x0802723c
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	442b      	add	r3, r5
 801b7e8:	4423      	add	r3, r4
 801b7ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	1ad3      	subs	r3, r2, r3
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	da02      	bge.n	801b7fe <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	68ba      	ldr	r2, [r7, #8]
 801b7fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b800:	891b      	ldrh	r3, [r3, #8]
 801b802:	461c      	mov	r4, r3
 801b804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b806:	68db      	ldr	r3, [r3, #12]
 801b808:	899b      	ldrh	r3, [r3, #12]
 801b80a:	b29b      	uxth	r3, r3
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7f9 fa53 	bl	8014cb8 <lwip_htons>
 801b812:	4603      	mov	r3, r0
 801b814:	f003 0303 	and.w	r3, r3, #3
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d001      	beq.n	801b820 <tcp_output+0x2c8>
 801b81c:	2301      	movs	r3, #1
 801b81e:	e000      	b.n	801b822 <tcp_output+0x2ca>
 801b820:	2300      	movs	r3, #0
 801b822:	4423      	add	r3, r4
 801b824:	2b00      	cmp	r3, #0
 801b826:	d049      	beq.n	801b8bc <tcp_output+0x364>
      seg->next = NULL;
 801b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b82a:	2200      	movs	r2, #0
 801b82c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b832:	2b00      	cmp	r3, #0
 801b834:	d105      	bne.n	801b842 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b83a:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 801b83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b83e:	623b      	str	r3, [r7, #32]
 801b840:	e03f      	b.n	801b8c2 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b844:	68db      	ldr	r3, [r3, #12]
 801b846:	685b      	ldr	r3, [r3, #4]
 801b848:	4618      	mov	r0, r3
 801b84a:	f7f9 fa42 	bl	8014cd2 <lwip_htonl>
 801b84e:	4604      	mov	r4, r0
 801b850:	6a3b      	ldr	r3, [r7, #32]
 801b852:	68db      	ldr	r3, [r3, #12]
 801b854:	685b      	ldr	r3, [r3, #4]
 801b856:	4618      	mov	r0, r3
 801b858:	f7f9 fa3b 	bl	8014cd2 <lwip_htonl>
 801b85c:	4603      	mov	r3, r0
 801b85e:	1ae3      	subs	r3, r4, r3
 801b860:	2b00      	cmp	r3, #0
 801b862:	da24      	bge.n	801b8ae <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	336c      	adds	r3, #108	@ 0x6c
 801b868:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b86a:	e002      	b.n	801b872 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b872:	69fb      	ldr	r3, [r7, #28]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d011      	beq.n	801b89e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b87a:	69fb      	ldr	r3, [r7, #28]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	68db      	ldr	r3, [r3, #12]
 801b880:	685b      	ldr	r3, [r3, #4]
 801b882:	4618      	mov	r0, r3
 801b884:	f7f9 fa25 	bl	8014cd2 <lwip_htonl>
 801b888:	4604      	mov	r4, r0
 801b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b88c:	68db      	ldr	r3, [r3, #12]
 801b88e:	685b      	ldr	r3, [r3, #4]
 801b890:	4618      	mov	r0, r3
 801b892:	f7f9 fa1e 	bl	8014cd2 <lwip_htonl>
 801b896:	4603      	mov	r3, r0
 801b898:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	dbe6      	blt.n	801b86c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 801b89e:	69fb      	ldr	r3, [r7, #28]
 801b8a0:	681a      	ldr	r2, [r3, #0]
 801b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8a4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b8a6:	69fb      	ldr	r3, [r7, #28]
 801b8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8aa:	601a      	str	r2, [r3, #0]
 801b8ac:	e009      	b.n	801b8c2 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b8ae:	6a3b      	ldr	r3, [r7, #32]
 801b8b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8b2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b8b4:	6a3b      	ldr	r3, [r7, #32]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	623b      	str	r3, [r7, #32]
 801b8ba:	e002      	b.n	801b8c2 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b8bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b8be:	f7fc f8d5 	bl	8017a6c <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b8c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d015      	beq.n	801b8fa <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8d0:	68db      	ldr	r3, [r3, #12]
 801b8d2:	685b      	ldr	r3, [r3, #4]
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	f7f9 f9fc 	bl	8014cd2 <lwip_htonl>
 801b8da:	4602      	mov	r2, r0
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b8e0:	1ad3      	subs	r3, r2, r3
 801b8e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8e4:	8912      	ldrh	r2, [r2, #8]
 801b8e6:	4413      	add	r3, r2
  while (seg != NULL &&
 801b8e8:	69ba      	ldr	r2, [r7, #24]
 801b8ea:	429a      	cmp	r2, r3
 801b8ec:	f4bf aede 	bcs.w	801b6ac <tcp_output+0x154>
  }
output_done:
 801b8f0:	e003      	b.n	801b8fa <tcp_output+0x3a2>
    goto output_done;
 801b8f2:	bf00      	nop
 801b8f4:	e002      	b.n	801b8fc <tcp_output+0x3a4>
      break;
 801b8f6:	bf00      	nop
 801b8f8:	e000      	b.n	801b8fc <tcp_output+0x3a4>
output_done:
 801b8fa:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b900:	2b00      	cmp	r3, #0
 801b902:	d103      	bne.n	801b90c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2200      	movs	r2, #0
 801b908:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7e9b      	ldrb	r3, [r3, #26]
 801b910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b914:	b2da      	uxtb	r2, r3
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801b91a:	2300      	movs	r3, #0
}
 801b91c:	4618      	mov	r0, r3
 801b91e:	3728      	adds	r7, #40	@ 0x28
 801b920:	46bd      	mov	sp, r7
 801b922:	bdb0      	pop	{r4, r5, r7, pc}

0801b924 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b924:	b5b0      	push	{r4, r5, r7, lr}
 801b926:	b08c      	sub	sp, #48	@ 0x30
 801b928:	af04      	add	r7, sp, #16
 801b92a:	60f8      	str	r0, [r7, #12]
 801b92c:	60b9      	str	r1, [r7, #8]
 801b92e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	685b      	ldr	r3, [r3, #4]
 801b934:	89db      	ldrh	r3, [r3, #14]
 801b936:	2b01      	cmp	r3, #1
 801b938:	d001      	beq.n	801b93e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b93a:	2300      	movs	r3, #0
 801b93c:	e09c      	b.n	801ba78 <tcp_output_segment+0x154>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	68dc      	ldr	r4, [r3, #12]
 801b946:	4610      	mov	r0, r2
 801b948:	f7f9 f9c3 	bl	8014cd2 <lwip_htonl>
 801b94c:	4603      	mov	r3, r0
 801b94e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b950:	68bb      	ldr	r3, [r7, #8]
 801b952:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	68dc      	ldr	r4, [r3, #12]
 801b958:	4610      	mov	r0, r2
 801b95a:	f7f9 f9ad 	bl	8014cb8 <lwip_htons>
 801b95e:	4603      	mov	r3, r0
 801b960:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b966:	68ba      	ldr	r2, [r7, #8]
 801b968:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b96a:	441a      	add	r2, r3
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	68db      	ldr	r3, [r3, #12]
 801b974:	3314      	adds	r3, #20
 801b976:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	7a9b      	ldrb	r3, [r3, #10]
 801b97c:	f003 0301 	and.w	r3, r3, #1
 801b980:	2b00      	cmp	r3, #0
 801b982:	d014      	beq.n	801b9ae <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	3304      	adds	r3, #4
 801b988:	4619      	mov	r1, r3
 801b98a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b98e:	f7fc fbc9 	bl	8018124 <tcp_eff_send_mss_impl>
 801b992:	4603      	mov	r3, r0
 801b994:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b996:	8b7b      	ldrh	r3, [r7, #26]
 801b998:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7f9 f998 	bl	8014cd2 <lwip_htonl>
 801b9a2:	4602      	mov	r2, r0
 801b9a4:	69fb      	ldr	r3, [r7, #28]
 801b9a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	3304      	adds	r3, #4
 801b9ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	da02      	bge.n	801b9be <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801b9b8:	68bb      	ldr	r3, [r7, #8]
 801b9ba:	2200      	movs	r2, #0
 801b9bc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d10c      	bne.n	801b9e0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801b9c6:	4b2e      	ldr	r3, [pc, #184]	@ (801ba80 <tcp_output_segment+0x15c>)
 801b9c8:	681a      	ldr	r2, [r3, #0]
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	68db      	ldr	r3, [r3, #12]
 801b9d2:	685b      	ldr	r3, [r3, #4]
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7f9 f97c 	bl	8014cd2 <lwip_htonl>
 801b9da:	4602      	mov	r2, r0
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	68da      	ldr	r2, [r3, #12]
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	685b      	ldr	r3, [r3, #4]
 801b9e8:	685b      	ldr	r3, [r3, #4]
 801b9ea:	1ad3      	subs	r3, r2, r3
 801b9ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 801b9ee:	8b3b      	ldrh	r3, [r7, #24]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d106      	bne.n	801ba02 <tcp_output_segment+0xde>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 801b9f4:	4b23      	ldr	r3, [pc, #140]	@ (801ba84 <tcp_output_segment+0x160>)
 801b9f6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b9fa:	3301      	adds	r3, #1
 801b9fc:	4a21      	ldr	r2, [pc, #132]	@ (801ba84 <tcp_output_segment+0x160>)
 801b9fe:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  seg->p->len -= len;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	8959      	ldrh	r1, [r3, #10]
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	685b      	ldr	r3, [r3, #4]
 801ba0c:	8b3a      	ldrh	r2, [r7, #24]
 801ba0e:	1a8a      	subs	r2, r1, r2
 801ba10:	b292      	uxth	r2, r2
 801ba12:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	8919      	ldrh	r1, [r3, #8]
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	685b      	ldr	r3, [r3, #4]
 801ba1e:	8b3a      	ldrh	r2, [r7, #24]
 801ba20:	1a8a      	subs	r2, r1, r2
 801ba22:	b292      	uxth	r2, r2
 801ba24:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	685b      	ldr	r3, [r3, #4]
 801ba2a:	68fa      	ldr	r2, [r7, #12]
 801ba2c:	68d2      	ldr	r2, [r2, #12]
 801ba2e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	68db      	ldr	r3, [r3, #12]
 801ba34:	2200      	movs	r2, #0
 801ba36:	741a      	strb	r2, [r3, #16]
 801ba38:	2200      	movs	r2, #0
 801ba3a:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801ba3c:	4b11      	ldr	r3, [pc, #68]	@ (801ba84 <tcp_output_segment+0x160>)
 801ba3e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801ba42:	3301      	adds	r3, #1
 801ba44:	b29a      	uxth	r2, r3
 801ba46:	4b0f      	ldr	r3, [pc, #60]	@ (801ba84 <tcp_output_segment+0x160>)
 801ba48:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	6858      	ldr	r0, [r3, #4]
 801ba50:	68b9      	ldr	r1, [r7, #8]
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	1d1c      	adds	r4, r3, #4
 801ba56:	68bb      	ldr	r3, [r7, #8]
 801ba58:	7a9d      	ldrb	r5, [r3, #10]
 801ba5a:	68bb      	ldr	r3, [r7, #8]
 801ba5c:	7a5b      	ldrb	r3, [r3, #9]
 801ba5e:	687a      	ldr	r2, [r7, #4]
 801ba60:	9202      	str	r2, [sp, #8]
 801ba62:	2206      	movs	r2, #6
 801ba64:	9201      	str	r2, [sp, #4]
 801ba66:	9300      	str	r3, [sp, #0]
 801ba68:	462b      	mov	r3, r5
 801ba6a:	4622      	mov	r2, r4
 801ba6c:	f004 fbaa 	bl	80201c4 <ip4_output_if>
 801ba70:	4603      	mov	r3, r0
 801ba72:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801ba74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ba78:	4618      	mov	r0, r3
 801ba7a:	3720      	adds	r7, #32
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bdb0      	pop	{r4, r5, r7, pc}
 801ba80:	2000bd7c 	.word	0x2000bd7c
 801ba84:	2000bbe4 	.word	0x2000bbe4

0801ba88 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b08c      	sub	sp, #48	@ 0x30
 801ba8c:	af04      	add	r7, sp, #16
 801ba8e:	60f8      	str	r0, [r7, #12]
 801ba90:	60b9      	str	r1, [r7, #8]
 801ba92:	607a      	str	r2, [r7, #4]
 801ba94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801ba96:	2200      	movs	r2, #0
 801ba98:	2114      	movs	r1, #20
 801ba9a:	2001      	movs	r0, #1
 801ba9c:	f7fa f83a 	bl	8015b14 <pbuf_alloc>
 801baa0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d06a      	beq.n	801bb7e <tcp_rst+0xf6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801baa8:	69fb      	ldr	r3, [r7, #28]
 801baaa:	895b      	ldrh	r3, [r3, #10]
 801baac:	2b13      	cmp	r3, #19
 801baae:	d806      	bhi.n	801babe <tcp_rst+0x36>
 801bab0:	4b35      	ldr	r3, [pc, #212]	@ (801bb88 <tcp_rst+0x100>)
 801bab2:	f240 524c 	movw	r2, #1356	@ 0x54c
 801bab6:	4935      	ldr	r1, [pc, #212]	@ (801bb8c <tcp_rst+0x104>)
 801bab8:	4835      	ldr	r0, [pc, #212]	@ (801bb90 <tcp_rst+0x108>)
 801baba:	f006 fbc1 	bl	8022240 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	685b      	ldr	r3, [r3, #4]
 801bac2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801bac4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801bac6:	4618      	mov	r0, r3
 801bac8:	f7f9 f8f6 	bl	8014cb8 <lwip_htons>
 801bacc:	4603      	mov	r3, r0
 801bace:	461a      	mov	r2, r3
 801bad0:	69bb      	ldr	r3, [r7, #24]
 801bad2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801bad4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bad6:	4618      	mov	r0, r3
 801bad8:	f7f9 f8ee 	bl	8014cb8 <lwip_htons>
 801badc:	4603      	mov	r3, r0
 801bade:	461a      	mov	r2, r3
 801bae0:	69bb      	ldr	r3, [r7, #24]
 801bae2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801bae4:	68f8      	ldr	r0, [r7, #12]
 801bae6:	f7f9 f8f4 	bl	8014cd2 <lwip_htonl>
 801baea:	4602      	mov	r2, r0
 801baec:	69bb      	ldr	r3, [r7, #24]
 801baee:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801baf0:	68b8      	ldr	r0, [r7, #8]
 801baf2:	f7f9 f8ee 	bl	8014cd2 <lwip_htonl>
 801baf6:	4602      	mov	r2, r0
 801baf8:	69bb      	ldr	r3, [r7, #24]
 801bafa:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801bafc:	f245 0014 	movw	r0, #20500	@ 0x5014
 801bb00:	f7f9 f8da 	bl	8014cb8 <lwip_htons>
 801bb04:	4603      	mov	r3, r0
 801bb06:	461a      	mov	r2, r3
 801bb08:	69bb      	ldr	r3, [r7, #24]
 801bb0a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	f042 0208 	orr.w	r2, r2, #8
 801bb14:	739a      	strb	r2, [r3, #14]
 801bb16:	2200      	movs	r2, #0
 801bb18:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801bb1c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801bb1e:	69bb      	ldr	r3, [r7, #24]
 801bb20:	2200      	movs	r2, #0
 801bb22:	741a      	strb	r2, [r3, #16]
 801bb24:	2200      	movs	r2, #0
 801bb26:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801bb28:	69bb      	ldr	r3, [r7, #24]
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	749a      	strb	r2, [r3, #18]
 801bb2e:	2200      	movs	r2, #0
 801bb30:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 801bb32:	4b18      	ldr	r3, [pc, #96]	@ (801bb94 <tcp_rst+0x10c>)
 801bb34:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801bb38:	3301      	adds	r3, #1
 801bb3a:	b29a      	uxth	r2, r3
 801bb3c:	4b15      	ldr	r3, [pc, #84]	@ (801bb94 <tcp_rst+0x10c>)
 801bb3e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);
 801bb42:	4b14      	ldr	r3, [pc, #80]	@ (801bb94 <tcp_rst+0x10c>)
 801bb44:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 801bb48:	3301      	adds	r3, #1
 801bb4a:	4a12      	ldr	r2, [pc, #72]	@ (801bb94 <tcp_rst+0x10c>)
 801bb4c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

  netif = ip_route(local_ip, remote_ip);
 801bb50:	6838      	ldr	r0, [r7, #0]
 801bb52:	f004 f8c5 	bl	801fce0 <ip4_route>
 801bb56:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801bb58:	697b      	ldr	r3, [r7, #20]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d00b      	beq.n	801bb76 <tcp_rst+0xee>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801bb5e:	697b      	ldr	r3, [r7, #20]
 801bb60:	9302      	str	r3, [sp, #8]
 801bb62:	2306      	movs	r3, #6
 801bb64:	9301      	str	r3, [sp, #4]
 801bb66:	2300      	movs	r3, #0
 801bb68:	9300      	str	r3, [sp, #0]
 801bb6a:	23ff      	movs	r3, #255	@ 0xff
 801bb6c:	683a      	ldr	r2, [r7, #0]
 801bb6e:	6879      	ldr	r1, [r7, #4]
 801bb70:	69f8      	ldr	r0, [r7, #28]
 801bb72:	f004 fb27 	bl	80201c4 <ip4_output_if>
  }
  pbuf_free(p);
 801bb76:	69f8      	ldr	r0, [r7, #28]
 801bb78:	f7fa fb44 	bl	8016204 <pbuf_free>
 801bb7c:	e000      	b.n	801bb80 <tcp_rst+0xf8>
    return;
 801bb7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bb80:	3720      	adds	r7, #32
 801bb82:	46bd      	mov	sp, r7
 801bb84:	bd80      	pop	{r7, pc}
 801bb86:	bf00      	nop
 801bb88:	08026e10 	.word	0x08026e10
 801bb8c:	08026e44 	.word	0x08026e44
 801bb90:	08026e74 	.word	0x08026e74
 801bb94:	2000bbe4 	.word	0x2000bbe4

0801bb98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b084      	sub	sp, #16
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d029      	beq.n	801bbfc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bbac:	60fb      	str	r3, [r7, #12]
 801bbae:	e002      	b.n	801bbb6 <tcp_rexmit_rto+0x1e>
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	60fb      	str	r3, [r7, #12]
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1f8      	bne.n	801bbb0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bbda:	2bff      	cmp	r3, #255	@ 0xff
 801bbdc:	d007      	beq.n	801bbee <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	b2da      	uxtb	r2, r3
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	2200      	movs	r2, #0
 801bbf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801bbf4:	6878      	ldr	r0, [r7, #4]
 801bbf6:	f7ff fcaf 	bl	801b558 <tcp_output>
 801bbfa:	e000      	b.n	801bbfe <tcp_rexmit_rto+0x66>
    return;
 801bbfc:	bf00      	nop
}
 801bbfe:	3710      	adds	r7, #16
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}

0801bc04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bc04:	b590      	push	{r4, r7, lr}
 801bc06:	b085      	sub	sp, #20
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d04a      	beq.n	801bcaa <tcp_rexmit+0xa6>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc18:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	681a      	ldr	r2, [r3, #0]
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	3368      	adds	r3, #104	@ 0x68
 801bc26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bc28:	e002      	b.n	801bc30 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d011      	beq.n	801bc5c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	68db      	ldr	r3, [r3, #12]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	4618      	mov	r0, r3
 801bc42:	f7f9 f846 	bl	8014cd2 <lwip_htonl>
 801bc46:	4604      	mov	r4, r0
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	68db      	ldr	r3, [r3, #12]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7f9 f83f 	bl	8014cd2 <lwip_htonl>
 801bc54:	4603      	mov	r3, r0
 801bc56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	dbe6      	blt.n	801bc2a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	68ba      	ldr	r2, [r7, #8]
 801bc68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d103      	bne.n	801bc7a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	2200      	movs	r2, #0
 801bc76:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bc80:	2bff      	cmp	r3, #255	@ 0xff
 801bc82:	d007      	beq.n	801bc94 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bc8a:	3301      	adds	r3, #1
 801bc8c:	b2da      	uxtb	r2, r3
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	2200      	movs	r2, #0
 801bc98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 801bc9a:	4b06      	ldr	r3, [pc, #24]	@ (801bcb4 <tcp_rexmit+0xb0>)
 801bc9c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801bca0:	3301      	adds	r3, #1
 801bca2:	4a04      	ldr	r2, [pc, #16]	@ (801bcb4 <tcp_rexmit+0xb0>)
 801bca4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
 801bca8:	e000      	b.n	801bcac <tcp_rexmit+0xa8>
    return;
 801bcaa:	bf00      	nop
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801bcac:	3714      	adds	r7, #20
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	bd90      	pop	{r4, r7, pc}
 801bcb2:	bf00      	nop
 801bcb4:	2000bbe4 	.word	0x2000bbe4

0801bcb8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b082      	sub	sp, #8
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d041      	beq.n	801bd4c <tcp_rexmit_fast+0x94>
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	7e9b      	ldrb	r3, [r3, #26]
 801bccc:	f003 0304 	and.w	r3, r3, #4
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d13b      	bne.n	801bd4c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801bcd4:	6878      	ldr	r0, [r7, #4]
 801bcd6:	f7ff ff95 	bl	801bc04 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801bce6:	4293      	cmp	r3, r2
 801bce8:	bf28      	it	cs
 801bcea:	4613      	movcs	r3, r2
 801bcec:	b29b      	uxth	r3, r3
 801bcee:	0fda      	lsrs	r2, r3, #31
 801bcf0:	4413      	add	r3, r2
 801bcf2:	105b      	asrs	r3, r3, #1
 801bcf4:	b29a      	uxth	r2, r3
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801bd02:	461a      	mov	r2, r3
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd08:	005b      	lsls	r3, r3, #1
 801bd0a:	429a      	cmp	r2, r3
 801bd0c:	d206      	bcs.n	801bd1c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	b29a      	uxth	r2, r3
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd26:	4619      	mov	r1, r3
 801bd28:	0049      	lsls	r1, r1, #1
 801bd2a:	440b      	add	r3, r1
 801bd2c:	b29b      	uxth	r3, r3
 801bd2e:	4413      	add	r3, r2
 801bd30:	b29a      	uxth	r2, r3
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	7e9b      	ldrb	r3, [r3, #26]
 801bd3c:	f043 0304 	orr.w	r3, r3, #4
 801bd40:	b2da      	uxtb	r2, r3
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	2200      	movs	r2, #0
 801bd4a:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 801bd4c:	bf00      	nop
 801bd4e:	3708      	adds	r7, #8
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bd80      	pop	{r7, pc}

0801bd54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bd54:	b580      	push	{r7, lr}
 801bd56:	b08a      	sub	sp, #40	@ 0x28
 801bd58:	af04      	add	r7, sp, #16
 801bd5a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bd60:	3b01      	subs	r3, #1
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7f8 ffb5 	bl	8014cd2 <lwip_htonl>
 801bd68:	4603      	mov	r3, r0
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	2100      	movs	r1, #0
 801bd6e:	6878      	ldr	r0, [r7, #4]
 801bd70:	f7fe fcf0 	bl	801a754 <tcp_output_alloc_header>
 801bd74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d102      	bne.n	801bd82 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bd7c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd80:	e029      	b.n	801bdd6 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	3304      	adds	r3, #4
 801bd86:	4618      	mov	r0, r3
 801bd88:	f003 ffaa 	bl	801fce0 <ip4_route>
 801bd8c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d102      	bne.n	801bd9a <tcp_keepalive+0x46>
    err = ERR_RTE;
 801bd94:	23fc      	movs	r3, #252	@ 0xfc
 801bd96:	75fb      	strb	r3, [r7, #23]
 801bd98:	e018      	b.n	801bdcc <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 801bd9a:	4b11      	ldr	r3, [pc, #68]	@ (801bde0 <tcp_keepalive+0x8c>)
 801bd9c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801bda0:	3301      	adds	r3, #1
 801bda2:	b29a      	uxth	r2, r3
 801bda4:	4b0e      	ldr	r3, [pc, #56]	@ (801bde0 <tcp_keepalive+0x8c>)
 801bda6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801bdaa:	6879      	ldr	r1, [r7, #4]
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	1d1a      	adds	r2, r3, #4
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	7a98      	ldrb	r0, [r3, #10]
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	9302      	str	r3, [sp, #8]
 801bdb8:	2306      	movs	r3, #6
 801bdba:	9301      	str	r3, [sp, #4]
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	9300      	str	r3, [sp, #0]
 801bdc0:	4603      	mov	r3, r0
 801bdc2:	6938      	ldr	r0, [r7, #16]
 801bdc4:	f004 f9fe 	bl	80201c4 <ip4_output_if>
 801bdc8:	4603      	mov	r3, r0
 801bdca:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801bdcc:	6938      	ldr	r0, [r7, #16]
 801bdce:	f7fa fa19 	bl	8016204 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bdd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	3718      	adds	r7, #24
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}
 801bdde:	bf00      	nop
 801bde0:	2000bbe4 	.word	0x2000bbe4

0801bde4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bde4:	b590      	push	{r4, r7, lr}
 801bde6:	b08f      	sub	sp, #60	@ 0x3c
 801bde8:	af04      	add	r7, sp, #16
 801bdea:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bdf0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801bdf2:	6a3b      	ldr	r3, [r7, #32]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d102      	bne.n	801bdfe <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bdfc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801bdfe:	6a3b      	ldr	r3, [r7, #32]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d101      	bne.n	801be08 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801be04:	2300      	movs	r3, #0
 801be06:	e08d      	b.n	801bf24 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801be08:	6a3b      	ldr	r3, [r7, #32]
 801be0a:	68db      	ldr	r3, [r3, #12]
 801be0c:	899b      	ldrh	r3, [r3, #12]
 801be0e:	b29b      	uxth	r3, r3
 801be10:	4618      	mov	r0, r3
 801be12:	f7f8 ff51 	bl	8014cb8 <lwip_htons>
 801be16:	4603      	mov	r3, r0
 801be18:	f003 0301 	and.w	r3, r3, #1
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d005      	beq.n	801be2c <tcp_zero_window_probe+0x48>
 801be20:	6a3b      	ldr	r3, [r7, #32]
 801be22:	891b      	ldrh	r3, [r3, #8]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d101      	bne.n	801be2c <tcp_zero_window_probe+0x48>
 801be28:	2301      	movs	r3, #1
 801be2a:	e000      	b.n	801be2e <tcp_zero_window_probe+0x4a>
 801be2c:	2300      	movs	r3, #0
 801be2e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801be30:	7ffb      	ldrb	r3, [r7, #31]
 801be32:	2b00      	cmp	r3, #0
 801be34:	bf0c      	ite	eq
 801be36:	2301      	moveq	r3, #1
 801be38:	2300      	movne	r3, #0
 801be3a:	b2db      	uxtb	r3, r3
 801be3c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801be3e:	6a3b      	ldr	r3, [r7, #32]
 801be40:	68db      	ldr	r3, [r3, #12]
 801be42:	685b      	ldr	r3, [r3, #4]
 801be44:	8bba      	ldrh	r2, [r7, #28]
 801be46:	2100      	movs	r1, #0
 801be48:	6878      	ldr	r0, [r7, #4]
 801be4a:	f7fe fc83 	bl	801a754 <tcp_output_alloc_header>
 801be4e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801be50:	69bb      	ldr	r3, [r7, #24]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d102      	bne.n	801be5c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801be56:	f04f 33ff 	mov.w	r3, #4294967295
 801be5a:	e063      	b.n	801bf24 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801be5c:	69bb      	ldr	r3, [r7, #24]
 801be5e:	685b      	ldr	r3, [r3, #4]
 801be60:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801be62:	7ffb      	ldrb	r3, [r7, #31]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d00e      	beq.n	801be86 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	899b      	ldrh	r3, [r3, #12]
 801be6c:	b29b      	uxth	r3, r3
 801be6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801be72:	b29c      	uxth	r4, r3
 801be74:	2011      	movs	r0, #17
 801be76:	f7f8 ff1f 	bl	8014cb8 <lwip_htons>
 801be7a:	4603      	mov	r3, r0
 801be7c:	4323      	orrs	r3, r4
 801be7e:	b29a      	uxth	r2, r3
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	819a      	strh	r2, [r3, #12]
 801be84:	e010      	b.n	801bea8 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801be86:	69bb      	ldr	r3, [r7, #24]
 801be88:	685b      	ldr	r3, [r3, #4]
 801be8a:	3314      	adds	r3, #20
 801be8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801be8e:	6a3b      	ldr	r3, [r7, #32]
 801be90:	6858      	ldr	r0, [r3, #4]
 801be92:	6a3b      	ldr	r3, [r7, #32]
 801be94:	685b      	ldr	r3, [r3, #4]
 801be96:	891a      	ldrh	r2, [r3, #8]
 801be98:	6a3b      	ldr	r3, [r7, #32]
 801be9a:	891b      	ldrh	r3, [r3, #8]
 801be9c:	1ad3      	subs	r3, r2, r3
 801be9e:	b29b      	uxth	r3, r3
 801bea0:	2201      	movs	r2, #1
 801bea2:	6939      	ldr	r1, [r7, #16]
 801bea4:	f7fa fbac 	bl	8016600 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bea8:	6a3b      	ldr	r3, [r7, #32]
 801beaa:	68db      	ldr	r3, [r3, #12]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	4618      	mov	r0, r3
 801beb0:	f7f8 ff0f 	bl	8014cd2 <lwip_htonl>
 801beb4:	4603      	mov	r3, r0
 801beb6:	3301      	adds	r3, #1
 801beb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	1ad3      	subs	r3, r2, r3
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	da02      	bge.n	801becc <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	68fa      	ldr	r2, [r7, #12]
 801beca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	3304      	adds	r3, #4
 801bed0:	4618      	mov	r0, r3
 801bed2:	f003 ff05 	bl	801fce0 <ip4_route>
 801bed6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801bed8:	68bb      	ldr	r3, [r7, #8]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d103      	bne.n	801bee6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801bede:	23fc      	movs	r3, #252	@ 0xfc
 801bee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801bee4:	e019      	b.n	801bf1a <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 801bee6:	4b11      	ldr	r3, [pc, #68]	@ (801bf2c <tcp_zero_window_probe+0x148>)
 801bee8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801beec:	3301      	adds	r3, #1
 801beee:	b29a      	uxth	r2, r3
 801bef0:	4b0e      	ldr	r3, [pc, #56]	@ (801bf2c <tcp_zero_window_probe+0x148>)
 801bef2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bef6:	6879      	ldr	r1, [r7, #4]
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	1d1a      	adds	r2, r3, #4
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	7a98      	ldrb	r0, [r3, #10]
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	9302      	str	r3, [sp, #8]
 801bf04:	2306      	movs	r3, #6
 801bf06:	9301      	str	r3, [sp, #4]
 801bf08:	2300      	movs	r3, #0
 801bf0a:	9300      	str	r3, [sp, #0]
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	69b8      	ldr	r0, [r7, #24]
 801bf10:	f004 f958 	bl	80201c4 <ip4_output_if>
 801bf14:	4603      	mov	r3, r0
 801bf16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801bf1a:	69b8      	ldr	r0, [r7, #24]
 801bf1c:	f7fa f972 	bl	8016204 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bf20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801bf24:	4618      	mov	r0, r3
 801bf26:	372c      	adds	r7, #44	@ 0x2c
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	bd90      	pop	{r4, r7, pc}
 801bf2c:	2000bbe4 	.word	0x2000bbe4

0801bf30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b082      	sub	sp, #8
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bf38:	f7fa fd08 	bl	801694c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bf3c:	4b0a      	ldr	r3, [pc, #40]	@ (801bf68 <tcpip_tcp_timer+0x38>)
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d103      	bne.n	801bf4c <tcpip_tcp_timer+0x1c>
 801bf44:	4b09      	ldr	r3, [pc, #36]	@ (801bf6c <tcpip_tcp_timer+0x3c>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d005      	beq.n	801bf58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	4908      	ldr	r1, [pc, #32]	@ (801bf70 <tcpip_tcp_timer+0x40>)
 801bf50:	20fa      	movs	r0, #250	@ 0xfa
 801bf52:	f000 f86f 	bl	801c034 <sys_timeout>
 801bf56:	e003      	b.n	801bf60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bf58:	4b06      	ldr	r3, [pc, #24]	@ (801bf74 <tcpip_tcp_timer+0x44>)
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	601a      	str	r2, [r3, #0]
  }
}
 801bf5e:	bf00      	nop
 801bf60:	bf00      	nop
 801bf62:	3708      	adds	r7, #8
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bd80      	pop	{r7, pc}
 801bf68:	2000bd88 	.word	0x2000bd88
 801bf6c:	2000bd8c 	.word	0x2000bd8c
 801bf70:	0801bf31 	.word	0x0801bf31
 801bf74:	2000bdd4 	.word	0x2000bdd4

0801bf78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (801bfa8 <tcp_timer_needed+0x30>)
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d10f      	bne.n	801bfa4 <tcp_timer_needed+0x2c>
 801bf84:	4b09      	ldr	r3, [pc, #36]	@ (801bfac <tcp_timer_needed+0x34>)
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d103      	bne.n	801bf94 <tcp_timer_needed+0x1c>
 801bf8c:	4b08      	ldr	r3, [pc, #32]	@ (801bfb0 <tcp_timer_needed+0x38>)
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d007      	beq.n	801bfa4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bf94:	4b04      	ldr	r3, [pc, #16]	@ (801bfa8 <tcp_timer_needed+0x30>)
 801bf96:	2201      	movs	r2, #1
 801bf98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	4905      	ldr	r1, [pc, #20]	@ (801bfb4 <tcp_timer_needed+0x3c>)
 801bf9e:	20fa      	movs	r0, #250	@ 0xfa
 801bfa0:	f000 f848 	bl	801c034 <sys_timeout>
  }
}
 801bfa4:	bf00      	nop
 801bfa6:	bd80      	pop	{r7, pc}
 801bfa8:	2000bdd4 	.word	0x2000bdd4
 801bfac:	2000bd88 	.word	0x2000bd88
 801bfb0:	2000bd8c 	.word	0x2000bd8c
 801bfb4:	0801bf31 	.word	0x0801bf31

0801bfb8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b084      	sub	sp, #16
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	685b      	ldr	r3, [r3, #4]
 801bfc8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	687a      	ldr	r2, [r7, #4]
 801bfd0:	4903      	ldr	r1, [pc, #12]	@ (801bfe0 <cyclic_timer+0x28>)
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f000 f82e 	bl	801c034 <sys_timeout>
}
 801bfd8:	bf00      	nop
 801bfda:	3710      	adds	r7, #16
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	0801bfb9 	.word	0x0801bfb9

0801bfe4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b082      	sub	sp, #8
 801bfe8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bfea:	2301      	movs	r3, #1
 801bfec:	607b      	str	r3, [r7, #4]
 801bfee:	e00e      	b.n	801c00e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801bff0:	4a0d      	ldr	r2, [pc, #52]	@ (801c028 <sys_timeouts_init+0x44>)
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	00db      	lsls	r3, r3, #3
 801bffc:	4a0a      	ldr	r2, [pc, #40]	@ (801c028 <sys_timeouts_init+0x44>)
 801bffe:	4413      	add	r3, r2
 801c000:	461a      	mov	r2, r3
 801c002:	490a      	ldr	r1, [pc, #40]	@ (801c02c <sys_timeouts_init+0x48>)
 801c004:	f000 f816 	bl	801c034 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	3301      	adds	r3, #1
 801c00c:	607b      	str	r3, [r7, #4]
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	2b04      	cmp	r3, #4
 801c012:	d9ed      	bls.n	801bff0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801c014:	f7ef ffaa 	bl	800bf6c <sys_now>
 801c018:	4603      	mov	r3, r0
 801c01a:	4a05      	ldr	r2, [pc, #20]	@ (801c030 <sys_timeouts_init+0x4c>)
 801c01c:	6013      	str	r3, [r2, #0]
}
 801c01e:	bf00      	nop
 801c020:	3708      	adds	r7, #8
 801c022:	46bd      	mov	sp, r7
 801c024:	bd80      	pop	{r7, pc}
 801c026:	bf00      	nop
 801c028:	08031634 	.word	0x08031634
 801c02c:	0801bfb9 	.word	0x0801bfb9
 801c030:	2000bdd0 	.word	0x2000bdd0

0801c034 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b088      	sub	sp, #32
 801c038:	af00      	add	r7, sp, #0
 801c03a:	60f8      	str	r0, [r7, #12]
 801c03c:	60b9      	str	r1, [r7, #8]
 801c03e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c040:	2006      	movs	r0, #6
 801c042:	f7f9 fae3 	bl	801560c <memp_malloc>
 801c046:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d10a      	bne.n	801c064 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c04e:	697b      	ldr	r3, [r7, #20]
 801c050:	2b00      	cmp	r3, #0
 801c052:	f040 8084 	bne.w	801c15e <sys_timeout+0x12a>
 801c056:	4b44      	ldr	r3, [pc, #272]	@ (801c168 <sys_timeout+0x134>)
 801c058:	22d4      	movs	r2, #212	@ 0xd4
 801c05a:	4944      	ldr	r1, [pc, #272]	@ (801c16c <sys_timeout+0x138>)
 801c05c:	4844      	ldr	r0, [pc, #272]	@ (801c170 <sys_timeout+0x13c>)
 801c05e:	f006 f8ef 	bl	8022240 <iprintf>
    return;
 801c062:	e07c      	b.n	801c15e <sys_timeout+0x12a>
  }

  now = sys_now();
 801c064:	f7ef ff82 	bl	800bf6c <sys_now>
 801c068:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801c06a:	4b42      	ldr	r3, [pc, #264]	@ (801c174 <sys_timeout+0x140>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d105      	bne.n	801c07e <sys_timeout+0x4a>
    diff = 0;
 801c072:	2300      	movs	r3, #0
 801c074:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801c076:	4a40      	ldr	r2, [pc, #256]	@ (801c178 <sys_timeout+0x144>)
 801c078:	693b      	ldr	r3, [r7, #16]
 801c07a:	6013      	str	r3, [r2, #0]
 801c07c:	e004      	b.n	801c088 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801c07e:	4b3e      	ldr	r3, [pc, #248]	@ (801c178 <sys_timeout+0x144>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	693a      	ldr	r2, [r7, #16]
 801c084:	1ad3      	subs	r3, r2, r3
 801c086:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801c088:	697b      	ldr	r3, [r7, #20]
 801c08a:	2200      	movs	r2, #0
 801c08c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c08e:	697b      	ldr	r3, [r7, #20]
 801c090:	68ba      	ldr	r2, [r7, #8]
 801c092:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c094:	697b      	ldr	r3, [r7, #20]
 801c096:	687a      	ldr	r2, [r7, #4]
 801c098:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801c09a:	68fa      	ldr	r2, [r7, #12]
 801c09c:	69bb      	ldr	r3, [r7, #24]
 801c09e:	441a      	add	r2, r3
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c0a4:	4b33      	ldr	r3, [pc, #204]	@ (801c174 <sys_timeout+0x140>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d103      	bne.n	801c0b4 <sys_timeout+0x80>
    next_timeout = timeout;
 801c0ac:	4a31      	ldr	r2, [pc, #196]	@ (801c174 <sys_timeout+0x140>)
 801c0ae:	697b      	ldr	r3, [r7, #20]
 801c0b0:	6013      	str	r3, [r2, #0]
    return;
 801c0b2:	e055      	b.n	801c160 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801c0b4:	4b2f      	ldr	r3, [pc, #188]	@ (801c174 <sys_timeout+0x140>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	685b      	ldr	r3, [r3, #4]
 801c0ba:	68fa      	ldr	r2, [r7, #12]
 801c0bc:	429a      	cmp	r2, r3
 801c0be:	d20f      	bcs.n	801c0e0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801c0c0:	4b2c      	ldr	r3, [pc, #176]	@ (801c174 <sys_timeout+0x140>)
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	6859      	ldr	r1, [r3, #4]
 801c0c6:	4b2b      	ldr	r3, [pc, #172]	@ (801c174 <sys_timeout+0x140>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	68fa      	ldr	r2, [r7, #12]
 801c0cc:	1a8a      	subs	r2, r1, r2
 801c0ce:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801c0d0:	4b28      	ldr	r3, [pc, #160]	@ (801c174 <sys_timeout+0x140>)
 801c0d2:	681a      	ldr	r2, [r3, #0]
 801c0d4:	697b      	ldr	r3, [r7, #20]
 801c0d6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c0d8:	4a26      	ldr	r2, [pc, #152]	@ (801c174 <sys_timeout+0x140>)
 801c0da:	697b      	ldr	r3, [r7, #20]
 801c0dc:	6013      	str	r3, [r2, #0]
 801c0de:	e03f      	b.n	801c160 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c0e0:	4b24      	ldr	r3, [pc, #144]	@ (801c174 <sys_timeout+0x140>)
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	61fb      	str	r3, [r7, #28]
 801c0e6:	e036      	b.n	801c156 <sys_timeout+0x122>
      timeout->time -= t->time;
 801c0e8:	697b      	ldr	r3, [r7, #20]
 801c0ea:	685a      	ldr	r2, [r3, #4]
 801c0ec:	69fb      	ldr	r3, [r7, #28]
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	1ad2      	subs	r2, r2, r3
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c0f6:	69fb      	ldr	r3, [r7, #28]
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d006      	beq.n	801c10c <sys_timeout+0xd8>
 801c0fe:	69fb      	ldr	r3, [r7, #28]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	685a      	ldr	r2, [r3, #4]
 801c104:	697b      	ldr	r3, [r7, #20]
 801c106:	685b      	ldr	r3, [r3, #4]
 801c108:	429a      	cmp	r2, r3
 801c10a:	d921      	bls.n	801c150 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801c10c:	69fb      	ldr	r3, [r7, #28]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d009      	beq.n	801c128 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	6859      	ldr	r1, [r3, #4]
 801c11a:	697b      	ldr	r3, [r7, #20]
 801c11c:	685a      	ldr	r2, [r3, #4]
 801c11e:	69fb      	ldr	r3, [r7, #28]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	1a8a      	subs	r2, r1, r2
 801c124:	605a      	str	r2, [r3, #4]
 801c126:	e00b      	b.n	801c140 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801c128:	697b      	ldr	r3, [r7, #20]
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	68fa      	ldr	r2, [r7, #12]
 801c12e:	429a      	cmp	r2, r3
 801c130:	d206      	bcs.n	801c140 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801c132:	4b10      	ldr	r3, [pc, #64]	@ (801c174 <sys_timeout+0x140>)
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	685a      	ldr	r2, [r3, #4]
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	441a      	add	r2, r3
 801c13c:	697b      	ldr	r3, [r7, #20]
 801c13e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801c140:	69fb      	ldr	r3, [r7, #28]
 801c142:	681a      	ldr	r2, [r3, #0]
 801c144:	697b      	ldr	r3, [r7, #20]
 801c146:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	697a      	ldr	r2, [r7, #20]
 801c14c:	601a      	str	r2, [r3, #0]
        break;
 801c14e:	e007      	b.n	801c160 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c150:	69fb      	ldr	r3, [r7, #28]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	61fb      	str	r3, [r7, #28]
 801c156:	69fb      	ldr	r3, [r7, #28]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d1c5      	bne.n	801c0e8 <sys_timeout+0xb4>
 801c15c:	e000      	b.n	801c160 <sys_timeout+0x12c>
    return;
 801c15e:	bf00      	nop
      }
    }
  }
}
 801c160:	3720      	adds	r7, #32
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}
 801c166:	bf00      	nop
 801c168:	08027254 	.word	0x08027254
 801c16c:	08027288 	.word	0x08027288
 801c170:	080272c8 	.word	0x080272c8
 801c174:	2000bdcc 	.word	0x2000bdcc
 801c178:	2000bdd0 	.word	0x2000bdd0

0801c17c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b086      	sub	sp, #24
 801c180:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801c182:	4b24      	ldr	r3, [pc, #144]	@ (801c214 <sys_check_timeouts+0x98>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d040      	beq.n	801c20c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801c18a:	f7ef feef 	bl	800bf6c <sys_now>
 801c18e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801c190:	4b21      	ldr	r3, [pc, #132]	@ (801c218 <sys_check_timeouts+0x9c>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	68fa      	ldr	r2, [r7, #12]
 801c196:	1ad3      	subs	r3, r2, r3
 801c198:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 801c19a:	4b20      	ldr	r3, [pc, #128]	@ (801c21c <sys_check_timeouts+0xa0>)
 801c19c:	781b      	ldrb	r3, [r3, #0]
 801c19e:	b2db      	uxtb	r3, r3
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d001      	beq.n	801c1a8 <sys_check_timeouts+0x2c>
 801c1a4:	f7f9 fc86 	bl	8015ab4 <pbuf_free_ooseq>
      had_one = 0;
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801c1ac:	4b19      	ldr	r3, [pc, #100]	@ (801c214 <sys_check_timeouts+0x98>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d026      	beq.n	801c206 <sys_check_timeouts+0x8a>
 801c1b8:	68bb      	ldr	r3, [r7, #8]
 801c1ba:	685b      	ldr	r3, [r3, #4]
 801c1bc:	697a      	ldr	r2, [r7, #20]
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	d321      	bcc.n	801c206 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801c1c6:	68bb      	ldr	r3, [r7, #8]
 801c1c8:	685a      	ldr	r2, [r3, #4]
 801c1ca:	4b13      	ldr	r3, [pc, #76]	@ (801c218 <sys_check_timeouts+0x9c>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	4413      	add	r3, r2
 801c1d0:	4a11      	ldr	r2, [pc, #68]	@ (801c218 <sys_check_timeouts+0x9c>)
 801c1d2:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801c1d4:	68bb      	ldr	r3, [r7, #8]
 801c1d6:	685b      	ldr	r3, [r3, #4]
 801c1d8:	697a      	ldr	r2, [r7, #20]
 801c1da:	1ad3      	subs	r3, r2, r3
 801c1dc:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801c1de:	68bb      	ldr	r3, [r7, #8]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	4a0c      	ldr	r2, [pc, #48]	@ (801c214 <sys_check_timeouts+0x98>)
 801c1e4:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801c1e6:	68bb      	ldr	r3, [r7, #8]
 801c1e8:	689b      	ldr	r3, [r3, #8]
 801c1ea:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801c1ec:	68bb      	ldr	r3, [r7, #8]
 801c1ee:	68db      	ldr	r3, [r3, #12]
 801c1f0:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c1f2:	68b9      	ldr	r1, [r7, #8]
 801c1f4:	2006      	movs	r0, #6
 801c1f6:	f7f9 fa5b 	bl	80156b0 <memp_free>
        if (handler != NULL) {
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d002      	beq.n	801c206 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6838      	ldr	r0, [r7, #0]
 801c204:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801c206:	7cfb      	ldrb	r3, [r7, #19]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d1c6      	bne.n	801c19a <sys_check_timeouts+0x1e>
  }
}
 801c20c:	bf00      	nop
 801c20e:	3718      	adds	r7, #24
 801c210:	46bd      	mov	sp, r7
 801c212:	bd80      	pop	{r7, pc}
 801c214:	2000bdcc 	.word	0x2000bdcc
 801c218:	2000bdd0 	.word	0x2000bdd0
 801c21c:	2000bbe1 	.word	0x2000bbe1

0801c220 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c220:	b480      	push	{r7}
 801c222:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801c224:	bf00      	nop
 801c226:	46bd      	mov	sp, r7
 801c228:	bc80      	pop	{r7}
 801c22a:	4770      	bx	lr

0801c22c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c22c:	b480      	push	{r7}
 801c22e:	b083      	sub	sp, #12
 801c230:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c232:	2300      	movs	r3, #0
 801c234:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c236:	4b17      	ldr	r3, [pc, #92]	@ (801c294 <udp_new_port+0x68>)
 801c238:	881b      	ldrh	r3, [r3, #0]
 801c23a:	1c5a      	adds	r2, r3, #1
 801c23c:	b291      	uxth	r1, r2
 801c23e:	4a15      	ldr	r2, [pc, #84]	@ (801c294 <udp_new_port+0x68>)
 801c240:	8011      	strh	r1, [r2, #0]
 801c242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c246:	4293      	cmp	r3, r2
 801c248:	d103      	bne.n	801c252 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c24a:	4b12      	ldr	r3, [pc, #72]	@ (801c294 <udp_new_port+0x68>)
 801c24c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c250:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c252:	4b11      	ldr	r3, [pc, #68]	@ (801c298 <udp_new_port+0x6c>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	603b      	str	r3, [r7, #0]
 801c258:	e011      	b.n	801c27e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c25a:	683b      	ldr	r3, [r7, #0]
 801c25c:	8a5a      	ldrh	r2, [r3, #18]
 801c25e:	4b0d      	ldr	r3, [pc, #52]	@ (801c294 <udp_new_port+0x68>)
 801c260:	881b      	ldrh	r3, [r3, #0]
 801c262:	429a      	cmp	r2, r3
 801c264:	d108      	bne.n	801c278 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c266:	88fb      	ldrh	r3, [r7, #6]
 801c268:	3301      	adds	r3, #1
 801c26a:	80fb      	strh	r3, [r7, #6]
 801c26c:	88fb      	ldrh	r3, [r7, #6]
 801c26e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c272:	d3e0      	bcc.n	801c236 <udp_new_port+0xa>
        return 0;
 801c274:	2300      	movs	r3, #0
 801c276:	e007      	b.n	801c288 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c278:	683b      	ldr	r3, [r7, #0]
 801c27a:	68db      	ldr	r3, [r3, #12]
 801c27c:	603b      	str	r3, [r7, #0]
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d1ea      	bne.n	801c25a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c284:	4b03      	ldr	r3, [pc, #12]	@ (801c294 <udp_new_port+0x68>)
 801c286:	881b      	ldrh	r3, [r3, #0]
}
 801c288:	4618      	mov	r0, r3
 801c28a:	370c      	adds	r7, #12
 801c28c:	46bd      	mov	sp, r7
 801c28e:	bc80      	pop	{r7}
 801c290:	4770      	bx	lr
 801c292:	bf00      	nop
 801c294:	20000120 	.word	0x20000120
 801c298:	2000bdd8 	.word	0x2000bdd8

0801c29c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c29c:	b480      	push	{r7}
 801c29e:	b085      	sub	sp, #20
 801c2a0:	af00      	add	r7, sp, #0
 801c2a2:	60f8      	str	r0, [r7, #12]
 801c2a4:	60b9      	str	r1, [r7, #8]
 801c2a6:	4613      	mov	r3, r2
 801c2a8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c2aa:	79fb      	ldrb	r3, [r7, #7]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d018      	beq.n	801c2e2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d013      	beq.n	801c2de <udp_input_local_match+0x42>
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d00f      	beq.n	801c2de <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2be:	4b13      	ldr	r3, [pc, #76]	@ (801c30c <udp_input_local_match+0x70>)
 801c2c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2c6:	d00a      	beq.n	801c2de <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	681a      	ldr	r2, [r3, #0]
 801c2cc:	4b0f      	ldr	r3, [pc, #60]	@ (801c30c <udp_input_local_match+0x70>)
 801c2ce:	695b      	ldr	r3, [r3, #20]
 801c2d0:	405a      	eors	r2, r3
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	3308      	adds	r3, #8
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d110      	bne.n	801c300 <udp_input_local_match+0x64>
          return 1;
 801c2de:	2301      	movs	r3, #1
 801c2e0:	e00f      	b.n	801c302 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d009      	beq.n	801c2fc <udp_input_local_match+0x60>
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d005      	beq.n	801c2fc <udp_input_local_match+0x60>
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	681a      	ldr	r2, [r3, #0]
 801c2f4:	4b05      	ldr	r3, [pc, #20]	@ (801c30c <udp_input_local_match+0x70>)
 801c2f6:	695b      	ldr	r3, [r3, #20]
 801c2f8:	429a      	cmp	r2, r3
 801c2fa:	d101      	bne.n	801c300 <udp_input_local_match+0x64>
      return 1;
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	e000      	b.n	801c302 <udp_input_local_match+0x66>
    }
  }

  return 0;
 801c300:	2300      	movs	r3, #0
}
 801c302:	4618      	mov	r0, r3
 801c304:	3714      	adds	r7, #20
 801c306:	46bd      	mov	sp, r7
 801c308:	bc80      	pop	{r7}
 801c30a:	4770      	bx	lr
 801c30c:	200085fc 	.word	0x200085fc

0801c310 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c310:	b590      	push	{r4, r7, lr}
 801c312:	b08d      	sub	sp, #52	@ 0x34
 801c314:	af02      	add	r7, sp, #8
 801c316:	6078      	str	r0, [r7, #4]
 801c318:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c31a:	2300      	movs	r3, #0
 801c31c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801c31e:	4b93      	ldr	r3, [pc, #588]	@ (801c56c <udp_input+0x25c>)
 801c320:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801c324:	3301      	adds	r3, #1
 801c326:	b29a      	uxth	r2, r3
 801c328:	4b90      	ldr	r3, [pc, #576]	@ (801c56c <udp_input+0x25c>)
 801c32a:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	895b      	ldrh	r3, [r3, #10]
 801c332:	2b07      	cmp	r3, #7
 801c334:	d81a      	bhi.n	801c36c <udp_input+0x5c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801c336:	4b8d      	ldr	r3, [pc, #564]	@ (801c56c <udp_input+0x25c>)
 801c338:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801c33c:	3301      	adds	r3, #1
 801c33e:	b29a      	uxth	r2, r3
 801c340:	4b8a      	ldr	r3, [pc, #552]	@ (801c56c <udp_input+0x25c>)
 801c342:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801c346:	4b89      	ldr	r3, [pc, #548]	@ (801c56c <udp_input+0x25c>)
 801c348:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c34c:	3301      	adds	r3, #1
 801c34e:	b29a      	uxth	r2, r3
 801c350:	4b86      	ldr	r3, [pc, #536]	@ (801c56c <udp_input+0x25c>)
 801c352:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 801c356:	4b85      	ldr	r3, [pc, #532]	@ (801c56c <udp_input+0x25c>)
 801c358:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801c35c:	3301      	adds	r3, #1
 801c35e:	4a83      	ldr	r2, [pc, #524]	@ (801c56c <udp_input+0x25c>)
 801c360:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
    pbuf_free(p);
 801c364:	6878      	ldr	r0, [r7, #4]
 801c366:	f7f9 ff4d 	bl	8016204 <pbuf_free>
    goto end;
 801c36a:	e0fa      	b.n	801c562 <udp_input+0x252>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	685b      	ldr	r3, [r3, #4]
 801c370:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c372:	4b7f      	ldr	r3, [pc, #508]	@ (801c570 <udp_input+0x260>)
 801c374:	695b      	ldr	r3, [r3, #20]
 801c376:	4a7e      	ldr	r2, [pc, #504]	@ (801c570 <udp_input+0x260>)
 801c378:	6812      	ldr	r2, [r2, #0]
 801c37a:	4611      	mov	r1, r2
 801c37c:	4618      	mov	r0, r3
 801c37e:	f004 f813 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801c382:	4603      	mov	r3, r0
 801c384:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c386:	697b      	ldr	r3, [r7, #20]
 801c388:	881b      	ldrh	r3, [r3, #0]
 801c38a:	b29b      	uxth	r3, r3
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7f8 fc93 	bl	8014cb8 <lwip_htons>
 801c392:	4603      	mov	r3, r0
 801c394:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c396:	697b      	ldr	r3, [r7, #20]
 801c398:	885b      	ldrh	r3, [r3, #2]
 801c39a:	b29b      	uxth	r3, r3
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7f8 fc8b 	bl	8014cb8 <lwip_htons>
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3b2:	4b70      	ldr	r3, [pc, #448]	@ (801c574 <udp_input+0x264>)
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3b8:	e044      	b.n	801c444 <udp_input+0x134>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3bc:	8a5b      	ldrh	r3, [r3, #18]
 801c3be:	89fa      	ldrh	r2, [r7, #14]
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d13a      	bne.n	801c43a <udp_input+0x12a>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c3c4:	7cfb      	ldrb	r3, [r7, #19]
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	6839      	ldr	r1, [r7, #0]
 801c3ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c3cc:	f7ff ff66 	bl	801c29c <udp_input_local_match>
 801c3d0:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d031      	beq.n	801c43a <udp_input+0x12a>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3d8:	7c1b      	ldrb	r3, [r3, #16]
 801c3da:	f003 0304 	and.w	r3, r3, #4
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d104      	bne.n	801c3ec <udp_input+0xdc>
 801c3e2:	69fb      	ldr	r3, [r7, #28]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d101      	bne.n	801c3ec <udp_input+0xdc>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ea:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ee:	8a9b      	ldrh	r3, [r3, #20]
 801c3f0:	8a3a      	ldrh	r2, [r7, #16]
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d121      	bne.n	801c43a <udp_input+0x12a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d005      	beq.n	801c40a <udp_input+0xfa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c400:	685a      	ldr	r2, [r3, #4]
 801c402:	4b5b      	ldr	r3, [pc, #364]	@ (801c570 <udp_input+0x260>)
 801c404:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c406:	429a      	cmp	r2, r3
 801c408:	d117      	bne.n	801c43a <udp_input+0x12a>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c40a:	6a3b      	ldr	r3, [r7, #32]
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d00b      	beq.n	801c428 <udp_input+0x118>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c412:	68da      	ldr	r2, [r3, #12]
 801c414:	6a3b      	ldr	r3, [r7, #32]
 801c416:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c418:	4b56      	ldr	r3, [pc, #344]	@ (801c574 <udp_input+0x264>)
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c41e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c420:	4a54      	ldr	r2, [pc, #336]	@ (801c574 <udp_input+0x264>)
 801c422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c424:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c426:	e010      	b.n	801c44a <udp_input+0x13a>
          UDP_STATS_INC(udp.cachehit);
 801c428:	4b50      	ldr	r3, [pc, #320]	@ (801c56c <udp_input+0x25c>)
 801c42a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801c42e:	3301      	adds	r3, #1
 801c430:	b29a      	uxth	r2, r3
 801c432:	4b4e      	ldr	r3, [pc, #312]	@ (801c56c <udp_input+0x25c>)
 801c434:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801c438:	e007      	b.n	801c44a <udp_input+0x13a>
      }
    }

    prev = pcb;
 801c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c43c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c440:	68db      	ldr	r3, [r3, #12]
 801c442:	627b      	str	r3, [r7, #36]	@ 0x24
 801c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c446:	2b00      	cmp	r3, #0
 801c448:	d1b7      	bne.n	801c3ba <udp_input+0xaa>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d101      	bne.n	801c454 <udp_input+0x144>
    pcb = uncon_pcb;
 801c450:	69fb      	ldr	r3, [r7, #28]
 801c452:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c456:	2b00      	cmp	r3, #0
 801c458:	d002      	beq.n	801c460 <udp_input+0x150>
    for_us = 1;
 801c45a:	2301      	movs	r3, #1
 801c45c:	76fb      	strb	r3, [r7, #27]
 801c45e:	e00a      	b.n	801c476 <udp_input+0x166>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	3304      	adds	r3, #4
 801c464:	681a      	ldr	r2, [r3, #0]
 801c466:	4b42      	ldr	r3, [pc, #264]	@ (801c570 <udp_input+0x260>)
 801c468:	695b      	ldr	r3, [r3, #20]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	bf0c      	ite	eq
 801c46e:	2301      	moveq	r3, #1
 801c470:	2300      	movne	r3, #0
 801c472:	b2db      	uxtb	r3, r3
 801c474:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c476:	7efb      	ldrb	r3, [r7, #27]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d06f      	beq.n	801c55c <udp_input+0x24c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801c47c:	f06f 0107 	mvn.w	r1, #7
 801c480:	6878      	ldr	r0, [r7, #4]
 801c482:	f7f9 fe9b 	bl	80161bc <pbuf_header>
 801c486:	4603      	mov	r3, r0
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d019      	beq.n	801c4c0 <udp_input+0x1b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801c48c:	4b3a      	ldr	r3, [pc, #232]	@ (801c578 <udp_input+0x268>)
 801c48e:	f240 1255 	movw	r2, #341	@ 0x155
 801c492:	493a      	ldr	r1, [pc, #232]	@ (801c57c <udp_input+0x26c>)
 801c494:	483a      	ldr	r0, [pc, #232]	@ (801c580 <udp_input+0x270>)
 801c496:	f005 fed3 	bl	8022240 <iprintf>
      UDP_STATS_INC(udp.drop);
 801c49a:	4b34      	ldr	r3, [pc, #208]	@ (801c56c <udp_input+0x25c>)
 801c49c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c4a0:	3301      	adds	r3, #1
 801c4a2:	b29a      	uxth	r2, r3
 801c4a4:	4b31      	ldr	r3, [pc, #196]	@ (801c56c <udp_input+0x25c>)
 801c4a6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801c4aa:	4b30      	ldr	r3, [pc, #192]	@ (801c56c <udp_input+0x25c>)
 801c4ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801c4b0:	3301      	adds	r3, #1
 801c4b2:	4a2e      	ldr	r2, [pc, #184]	@ (801c56c <udp_input+0x25c>)
 801c4b4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
      pbuf_free(p);
 801c4b8:	6878      	ldr	r0, [r7, #4]
 801c4ba:	f7f9 fea3 	bl	8016204 <pbuf_free>
      goto end;
 801c4be:	e050      	b.n	801c562 <udp_input+0x252>
    }

    if (pcb != NULL) {
 801c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d019      	beq.n	801c4fa <udp_input+0x1ea>
      MIB2_STATS_INC(mib2.udpindatagrams);
 801c4c6:	4b29      	ldr	r3, [pc, #164]	@ (801c56c <udp_input+0x25c>)
 801c4c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801c4cc:	3301      	adds	r3, #1
 801c4ce:	4a27      	ldr	r2, [pc, #156]	@ (801c56c <udp_input+0x25c>)
 801c4d0:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4d6:	699b      	ldr	r3, [r3, #24]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d00a      	beq.n	801c4f2 <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4de:	699c      	ldr	r4, [r3, #24]
 801c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e2:	69d8      	ldr	r0, [r3, #28]
 801c4e4:	8a3b      	ldrh	r3, [r7, #16]
 801c4e6:	9300      	str	r3, [sp, #0]
 801c4e8:	4b26      	ldr	r3, [pc, #152]	@ (801c584 <udp_input+0x274>)
 801c4ea:	687a      	ldr	r2, [r7, #4]
 801c4ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c4ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c4f0:	e038      	b.n	801c564 <udp_input+0x254>
        pbuf_free(p);
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7f9 fe86 	bl	8016204 <pbuf_free>
        goto end;
 801c4f8:	e033      	b.n	801c562 <udp_input+0x252>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c4fa:	7cfb      	ldrb	r3, [r7, #19]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d112      	bne.n	801c526 <udp_input+0x216>
 801c500:	4b1b      	ldr	r3, [pc, #108]	@ (801c570 <udp_input+0x260>)
 801c502:	695b      	ldr	r3, [r3, #20]
 801c504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c508:	2be0      	cmp	r3, #224	@ 0xe0
 801c50a:	d00c      	beq.n	801c526 <udp_input+0x216>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c50c:	4b18      	ldr	r3, [pc, #96]	@ (801c570 <udp_input+0x260>)
 801c50e:	899b      	ldrh	r3, [r3, #12]
 801c510:	3308      	adds	r3, #8
 801c512:	b29b      	uxth	r3, r3
 801c514:	b21b      	sxth	r3, r3
 801c516:	4619      	mov	r1, r3
 801c518:	6878      	ldr	r0, [r7, #4]
 801c51a:	f7f9 fe61 	bl	80161e0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c51e:	2103      	movs	r1, #3
 801c520:	6878      	ldr	r0, [r7, #4]
 801c522:	f003 fb29 	bl	801fb78 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801c526:	4b11      	ldr	r3, [pc, #68]	@ (801c56c <udp_input+0x25c>)
 801c528:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801c52c:	3301      	adds	r3, #1
 801c52e:	b29a      	uxth	r2, r3
 801c530:	4b0e      	ldr	r3, [pc, #56]	@ (801c56c <udp_input+0x25c>)
 801c532:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801c536:	4b0d      	ldr	r3, [pc, #52]	@ (801c56c <udp_input+0x25c>)
 801c538:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c53c:	3301      	adds	r3, #1
 801c53e:	b29a      	uxth	r2, r3
 801c540:	4b0a      	ldr	r3, [pc, #40]	@ (801c56c <udp_input+0x25c>)
 801c542:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 801c546:	4b09      	ldr	r3, [pc, #36]	@ (801c56c <udp_input+0x25c>)
 801c548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801c54c:	3301      	adds	r3, #1
 801c54e:	4a07      	ldr	r2, [pc, #28]	@ (801c56c <udp_input+0x25c>)
 801c550:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      pbuf_free(p);
 801c554:	6878      	ldr	r0, [r7, #4]
 801c556:	f7f9 fe55 	bl	8016204 <pbuf_free>
  return;
 801c55a:	e003      	b.n	801c564 <udp_input+0x254>
    pbuf_free(p);
 801c55c:	6878      	ldr	r0, [r7, #4]
 801c55e:	f7f9 fe51 	bl	8016204 <pbuf_free>
  return;
 801c562:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c564:	372c      	adds	r7, #44	@ 0x2c
 801c566:	46bd      	mov	sp, r7
 801c568:	bd90      	pop	{r4, r7, pc}
 801c56a:	bf00      	nop
 801c56c:	2000bbe4 	.word	0x2000bbe4
 801c570:	200085fc 	.word	0x200085fc
 801c574:	2000bdd8 	.word	0x2000bdd8
 801c578:	080272f0 	.word	0x080272f0
 801c57c:	08027320 	.word	0x08027320
 801c580:	08027334 	.word	0x08027334
 801c584:	2000860c 	.word	0x2000860c

0801c588 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c588:	b580      	push	{r7, lr}
 801c58a:	b088      	sub	sp, #32
 801c58c:	af02      	add	r7, sp, #8
 801c58e:	60f8      	str	r0, [r7, #12]
 801c590:	60b9      	str	r1, [r7, #8]
 801c592:	607a      	str	r2, [r7, #4]
 801c594:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d002      	beq.n	801c5a6 <udp_sendto+0x1e>
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d102      	bne.n	801c5ac <udp_sendto+0x24>
    return ERR_VAL;
 801c5a6:	f06f 0305 	mvn.w	r3, #5
 801c5aa:	e01b      	b.n	801c5e4 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801c5ac:	6978      	ldr	r0, [r7, #20]
 801c5ae:	f003 fb97 	bl	801fce0 <ip4_route>
 801c5b2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d10a      	bne.n	801c5d0 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801c5ba:	4b0c      	ldr	r3, [pc, #48]	@ (801c5ec <udp_sendto+0x64>)
 801c5bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801c5c0:	3301      	adds	r3, #1
 801c5c2:	b29a      	uxth	r2, r3
 801c5c4:	4b09      	ldr	r3, [pc, #36]	@ (801c5ec <udp_sendto+0x64>)
 801c5c6:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801c5ca:	f06f 0303 	mvn.w	r3, #3
 801c5ce:	e009      	b.n	801c5e4 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c5d0:	887a      	ldrh	r2, [r7, #2]
 801c5d2:	693b      	ldr	r3, [r7, #16]
 801c5d4:	9300      	str	r3, [sp, #0]
 801c5d6:	4613      	mov	r3, r2
 801c5d8:	687a      	ldr	r2, [r7, #4]
 801c5da:	68b9      	ldr	r1, [r7, #8]
 801c5dc:	68f8      	ldr	r0, [r7, #12]
 801c5de:	f000 f807 	bl	801c5f0 <udp_sendto_if>
 801c5e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	3718      	adds	r7, #24
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}
 801c5ec:	2000bbe4 	.word	0x2000bbe4

0801c5f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b088      	sub	sp, #32
 801c5f4:	af02      	add	r7, sp, #8
 801c5f6:	60f8      	str	r0, [r7, #12]
 801c5f8:	60b9      	str	r1, [r7, #8]
 801c5fa:	607a      	str	r2, [r7, #4]
 801c5fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d002      	beq.n	801c60a <udp_sendto_if+0x1a>
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d102      	bne.n	801c610 <udp_sendto_if+0x20>
    return ERR_VAL;
 801c60a:	f06f 0305 	mvn.w	r3, #5
 801c60e:	e028      	b.n	801c662 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d009      	beq.n	801c62a <udp_sendto_if+0x3a>
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d005      	beq.n	801c62a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c626:	2be0      	cmp	r3, #224	@ 0xe0
 801c628:	d103      	bne.n	801c632 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801c62a:	6a3b      	ldr	r3, [r7, #32]
 801c62c:	3304      	adds	r3, #4
 801c62e:	617b      	str	r3, [r7, #20]
 801c630:	e00b      	b.n	801c64a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681a      	ldr	r2, [r3, #0]
 801c636:	6a3b      	ldr	r3, [r7, #32]
 801c638:	3304      	adds	r3, #4
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	d002      	beq.n	801c646 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801c640:	f06f 0303 	mvn.w	r3, #3
 801c644:	e00d      	b.n	801c662 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c64a:	887a      	ldrh	r2, [r7, #2]
 801c64c:	697b      	ldr	r3, [r7, #20]
 801c64e:	9301      	str	r3, [sp, #4]
 801c650:	6a3b      	ldr	r3, [r7, #32]
 801c652:	9300      	str	r3, [sp, #0]
 801c654:	4613      	mov	r3, r2
 801c656:	687a      	ldr	r2, [r7, #4]
 801c658:	68b9      	ldr	r1, [r7, #8]
 801c65a:	68f8      	ldr	r0, [r7, #12]
 801c65c:	f000 f806 	bl	801c66c <udp_sendto_if_src>
 801c660:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c662:	4618      	mov	r0, r3
 801c664:	3718      	adds	r7, #24
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
	...

0801c66c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b08c      	sub	sp, #48	@ 0x30
 801c670:	af04      	add	r7, sp, #16
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	607a      	str	r2, [r7, #4]
 801c678:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d002      	beq.n	801c686 <udp_sendto_if_src+0x1a>
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d102      	bne.n	801c68c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801c686:	f06f 0305 	mvn.w	r3, #5
 801c68a:	e08d      	b.n	801c7a8 <udp_sendto_if_src+0x13c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	8a5b      	ldrh	r3, [r3, #18]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d10f      	bne.n	801c6b4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c694:	68f9      	ldr	r1, [r7, #12]
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	8a5b      	ldrh	r3, [r3, #18]
 801c69a:	461a      	mov	r2, r3
 801c69c:	68f8      	ldr	r0, [r7, #12]
 801c69e:	f000 f88f 	bl	801c7c0 <udp_bind>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c6a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d002      	beq.n	801c6b4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c6ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6b2:	e079      	b.n	801c7a8 <udp_sendto_if_src+0x13c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801c6b4:	2108      	movs	r1, #8
 801c6b6:	68b8      	ldr	r0, [r7, #8]
 801c6b8:	f7f9 fd80 	bl	80161bc <pbuf_header>
 801c6bc:	4603      	mov	r3, r0
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d014      	beq.n	801c6ec <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	2108      	movs	r1, #8
 801c6c6:	2001      	movs	r0, #1
 801c6c8:	f7f9 fa24 	bl	8015b14 <pbuf_alloc>
 801c6cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c6ce:	69fb      	ldr	r3, [r7, #28]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d102      	bne.n	801c6da <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c6d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6d8:	e066      	b.n	801c7a8 <udp_sendto_if_src+0x13c>
    }
    if (p->tot_len != 0) {
 801c6da:	68bb      	ldr	r3, [r7, #8]
 801c6dc:	891b      	ldrh	r3, [r3, #8]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d006      	beq.n	801c6f0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c6e2:	68b9      	ldr	r1, [r7, #8]
 801c6e4:	69f8      	ldr	r0, [r7, #28]
 801c6e6:	f7f9 feaf 	bl	8016448 <pbuf_chain>
 801c6ea:	e001      	b.n	801c6f0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c6ec:	68bb      	ldr	r3, [r7, #8]
 801c6ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c6f0:	69fb      	ldr	r3, [r7, #28]
 801c6f2:	895b      	ldrh	r3, [r3, #10]
 801c6f4:	2b07      	cmp	r3, #7
 801c6f6:	d806      	bhi.n	801c706 <udp_sendto_if_src+0x9a>
 801c6f8:	4b2d      	ldr	r3, [pc, #180]	@ (801c7b0 <udp_sendto_if_src+0x144>)
 801c6fa:	f240 22db 	movw	r2, #731	@ 0x2db
 801c6fe:	492d      	ldr	r1, [pc, #180]	@ (801c7b4 <udp_sendto_if_src+0x148>)
 801c700:	482d      	ldr	r0, [pc, #180]	@ (801c7b8 <udp_sendto_if_src+0x14c>)
 801c702:	f005 fd9d 	bl	8022240 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c706:	69fb      	ldr	r3, [r7, #28]
 801c708:	685b      	ldr	r3, [r3, #4]
 801c70a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	8a5b      	ldrh	r3, [r3, #18]
 801c710:	4618      	mov	r0, r3
 801c712:	f7f8 fad1 	bl	8014cb8 <lwip_htons>
 801c716:	4603      	mov	r3, r0
 801c718:	461a      	mov	r2, r3
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c71e:	887b      	ldrh	r3, [r7, #2]
 801c720:	4618      	mov	r0, r3
 801c722:	f7f8 fac9 	bl	8014cb8 <lwip_htons>
 801c726:	4603      	mov	r3, r0
 801c728:	461a      	mov	r2, r3
 801c72a:	697b      	ldr	r3, [r7, #20]
 801c72c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	2200      	movs	r2, #0
 801c732:	719a      	strb	r2, [r3, #6]
 801c734:	2200      	movs	r2, #0
 801c736:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c738:	69fb      	ldr	r3, [r7, #28]
 801c73a:	891b      	ldrh	r3, [r3, #8]
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7f8 fabb 	bl	8014cb8 <lwip_htons>
 801c742:	4603      	mov	r3, r0
 801c744:	461a      	mov	r2, r3
 801c746:	697b      	ldr	r3, [r7, #20]
 801c748:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c74a:	2311      	movs	r3, #17
 801c74c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	7a9b      	ldrb	r3, [r3, #10]
 801c752:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	7a5b      	ldrb	r3, [r3, #9]
 801c758:	7cb9      	ldrb	r1, [r7, #18]
 801c75a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c75c:	9202      	str	r2, [sp, #8]
 801c75e:	7cfa      	ldrb	r2, [r7, #19]
 801c760:	9201      	str	r2, [sp, #4]
 801c762:	9300      	str	r3, [sp, #0]
 801c764:	460b      	mov	r3, r1
 801c766:	687a      	ldr	r2, [r7, #4]
 801c768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c76a:	69f8      	ldr	r0, [r7, #28]
 801c76c:	f003 fd54 	bl	8020218 <ip4_output_if_src>
 801c770:	4603      	mov	r3, r0
 801c772:	76fb      	strb	r3, [r7, #27]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801c774:	4b11      	ldr	r3, [pc, #68]	@ (801c7bc <udp_sendto_if_src+0x150>)
 801c776:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801c77a:	3301      	adds	r3, #1
 801c77c:	4a0f      	ldr	r2, [pc, #60]	@ (801c7bc <udp_sendto_if_src+0x150>)
 801c77e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c782:	69fa      	ldr	r2, [r7, #28]
 801c784:	68bb      	ldr	r3, [r7, #8]
 801c786:	429a      	cmp	r2, r3
 801c788:	d004      	beq.n	801c794 <udp_sendto_if_src+0x128>
    /* free the header pbuf */
    pbuf_free(q);
 801c78a:	69f8      	ldr	r0, [r7, #28]
 801c78c:	f7f9 fd3a 	bl	8016204 <pbuf_free>
    q = NULL;
 801c790:	2300      	movs	r3, #0
 801c792:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801c794:	4b09      	ldr	r3, [pc, #36]	@ (801c7bc <udp_sendto_if_src+0x150>)
 801c796:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801c79a:	3301      	adds	r3, #1
 801c79c:	b29a      	uxth	r2, r3
 801c79e:	4b07      	ldr	r3, [pc, #28]	@ (801c7bc <udp_sendto_if_src+0x150>)
 801c7a0:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801c7a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	3720      	adds	r7, #32
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	080272f0 	.word	0x080272f0
 801c7b4:	0802735c 	.word	0x0802735c
 801c7b8:	08027334 	.word	0x08027334
 801c7bc:	2000bbe4 	.word	0x2000bbe4

0801c7c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	b086      	sub	sp, #24
 801c7c4:	af00      	add	r7, sp, #0
 801c7c6:	60f8      	str	r0, [r7, #12]
 801c7c8:	60b9      	str	r1, [r7, #8]
 801c7ca:	4613      	mov	r3, r2
 801c7cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c7ce:	68bb      	ldr	r3, [r7, #8]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d101      	bne.n	801c7d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c7d4:	4b30      	ldr	r3, [pc, #192]	@ (801c898 <udp_bind+0xd8>)
 801c7d6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d002      	beq.n	801c7e4 <udp_bind+0x24>
 801c7de:	68bb      	ldr	r3, [r7, #8]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d102      	bne.n	801c7ea <udp_bind+0x2a>
    return ERR_VAL;
 801c7e4:	f06f 0305 	mvn.w	r3, #5
 801c7e8:	e052      	b.n	801c890 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c7ee:	4b2b      	ldr	r3, [pc, #172]	@ (801c89c <udp_bind+0xdc>)
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	617b      	str	r3, [r7, #20]
 801c7f4:	e009      	b.n	801c80a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c7f6:	68fa      	ldr	r2, [r7, #12]
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	429a      	cmp	r2, r3
 801c7fc:	d102      	bne.n	801c804 <udp_bind+0x44>
      rebind = 1;
 801c7fe:	2301      	movs	r3, #1
 801c800:	74fb      	strb	r3, [r7, #19]
      break;
 801c802:	e005      	b.n	801c810 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	68db      	ldr	r3, [r3, #12]
 801c808:	617b      	str	r3, [r7, #20]
 801c80a:	697b      	ldr	r3, [r7, #20]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d1f2      	bne.n	801c7f6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801c810:	88fb      	ldrh	r3, [r7, #6]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d109      	bne.n	801c82a <udp_bind+0x6a>
    port = udp_new_port();
 801c816:	f7ff fd09 	bl	801c22c <udp_new_port>
 801c81a:	4603      	mov	r3, r0
 801c81c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c81e:	88fb      	ldrh	r3, [r7, #6]
 801c820:	2b00      	cmp	r3, #0
 801c822:	d11e      	bne.n	801c862 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c824:	f06f 0307 	mvn.w	r3, #7
 801c828:	e032      	b.n	801c890 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c82a:	4b1c      	ldr	r3, [pc, #112]	@ (801c89c <udp_bind+0xdc>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	617b      	str	r3, [r7, #20]
 801c830:	e014      	b.n	801c85c <udp_bind+0x9c>
      if (pcb != ipcb) {
 801c832:	68fa      	ldr	r2, [r7, #12]
 801c834:	697b      	ldr	r3, [r7, #20]
 801c836:	429a      	cmp	r2, r3
 801c838:	d00d      	beq.n	801c856 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c83a:	697b      	ldr	r3, [r7, #20]
 801c83c:	8a5b      	ldrh	r3, [r3, #18]
 801c83e:	88fa      	ldrh	r2, [r7, #6]
 801c840:	429a      	cmp	r2, r3
 801c842:	d108      	bne.n	801c856 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	681a      	ldr	r2, [r3, #0]
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c84c:	429a      	cmp	r2, r3
 801c84e:	d102      	bne.n	801c856 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c850:	f06f 0307 	mvn.w	r3, #7
 801c854:	e01c      	b.n	801c890 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	68db      	ldr	r3, [r3, #12]
 801c85a:	617b      	str	r3, [r7, #20]
 801c85c:	697b      	ldr	r3, [r7, #20]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1e7      	bne.n	801c832 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d002      	beq.n	801c86e <udp_bind+0xae>
 801c868:	68bb      	ldr	r3, [r7, #8]
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	e000      	b.n	801c870 <udp_bind+0xb0>
 801c86e:	2300      	movs	r3, #0
 801c870:	68fa      	ldr	r2, [r7, #12]
 801c872:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	88fa      	ldrh	r2, [r7, #6]
 801c878:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c87a:	7cfb      	ldrb	r3, [r7, #19]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d106      	bne.n	801c88e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c880:	4b06      	ldr	r3, [pc, #24]	@ (801c89c <udp_bind+0xdc>)
 801c882:	681a      	ldr	r2, [r3, #0]
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c888:	4a04      	ldr	r2, [pc, #16]	@ (801c89c <udp_bind+0xdc>)
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c88e:	2300      	movs	r3, #0
}
 801c890:	4618      	mov	r0, r3
 801c892:	3718      	adds	r7, #24
 801c894:	46bd      	mov	sp, r7
 801c896:	bd80      	pop	{r7, pc}
 801c898:	0803165c 	.word	0x0803165c
 801c89c:	2000bdd8 	.word	0x2000bdd8

0801c8a0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b086      	sub	sp, #24
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	60f8      	str	r0, [r7, #12]
 801c8a8:	60b9      	str	r1, [r7, #8]
 801c8aa:	4613      	mov	r3, r2
 801c8ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d002      	beq.n	801c8ba <udp_connect+0x1a>
 801c8b4:	68bb      	ldr	r3, [r7, #8]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d102      	bne.n	801c8c0 <udp_connect+0x20>
    return ERR_VAL;
 801c8ba:	f06f 0305 	mvn.w	r3, #5
 801c8be:	e03e      	b.n	801c93e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	8a5b      	ldrh	r3, [r3, #18]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d10f      	bne.n	801c8e8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c8c8:	68f9      	ldr	r1, [r7, #12]
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	8a5b      	ldrh	r3, [r3, #18]
 801c8ce:	461a      	mov	r2, r3
 801c8d0:	68f8      	ldr	r0, [r7, #12]
 801c8d2:	f7ff ff75 	bl	801c7c0 <udp_bind>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c8da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d002      	beq.n	801c8e8 <udp_connect+0x48>
      return err;
 801c8e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8e6:	e02a      	b.n	801c93e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c8e8:	68bb      	ldr	r3, [r7, #8]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d002      	beq.n	801c8f4 <udp_connect+0x54>
 801c8ee:	68bb      	ldr	r3, [r7, #8]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	e000      	b.n	801c8f6 <udp_connect+0x56>
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	68fa      	ldr	r2, [r7, #12]
 801c8f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	88fa      	ldrh	r2, [r7, #6]
 801c8fe:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	7c1b      	ldrb	r3, [r3, #16]
 801c904:	f043 0304 	orr.w	r3, r3, #4
 801c908:	b2da      	uxtb	r2, r3
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c90e:	4b0e      	ldr	r3, [pc, #56]	@ (801c948 <udp_connect+0xa8>)
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	617b      	str	r3, [r7, #20]
 801c914:	e008      	b.n	801c928 <udp_connect+0x88>
    if (pcb == ipcb) {
 801c916:	68fa      	ldr	r2, [r7, #12]
 801c918:	697b      	ldr	r3, [r7, #20]
 801c91a:	429a      	cmp	r2, r3
 801c91c:	d101      	bne.n	801c922 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801c91e:	2300      	movs	r3, #0
 801c920:	e00d      	b.n	801c93e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c922:	697b      	ldr	r3, [r7, #20]
 801c924:	68db      	ldr	r3, [r3, #12]
 801c926:	617b      	str	r3, [r7, #20]
 801c928:	697b      	ldr	r3, [r7, #20]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d1f3      	bne.n	801c916 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c92e:	4b06      	ldr	r3, [pc, #24]	@ (801c948 <udp_connect+0xa8>)
 801c930:	681a      	ldr	r2, [r3, #0]
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c936:	4a04      	ldr	r2, [pc, #16]	@ (801c948 <udp_connect+0xa8>)
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c93c:	2300      	movs	r3, #0
}
 801c93e:	4618      	mov	r0, r3
 801c940:	3718      	adds	r7, #24
 801c942:	46bd      	mov	sp, r7
 801c944:	bd80      	pop	{r7, pc}
 801c946:	bf00      	nop
 801c948:	2000bdd8 	.word	0x2000bdd8

0801c94c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c94c:	b480      	push	{r7}
 801c94e:	b085      	sub	sp, #20
 801c950:	af00      	add	r7, sp, #0
 801c952:	60f8      	str	r0, [r7, #12]
 801c954:	60b9      	str	r1, [r7, #8]
 801c956:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	68ba      	ldr	r2, [r7, #8]
 801c95c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	687a      	ldr	r2, [r7, #4]
 801c962:	61da      	str	r2, [r3, #28]
}
 801c964:	bf00      	nop
 801c966:	3714      	adds	r7, #20
 801c968:	46bd      	mov	sp, r7
 801c96a:	bc80      	pop	{r7}
 801c96c:	4770      	bx	lr
	...

0801c970 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b084      	sub	sp, #16
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c978:	4b15      	ldr	r3, [pc, #84]	@ (801c9d0 <udp_remove+0x60>)
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	687a      	ldr	r2, [r7, #4]
 801c97e:	429a      	cmp	r2, r3
 801c980:	d105      	bne.n	801c98e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c982:	4b13      	ldr	r3, [pc, #76]	@ (801c9d0 <udp_remove+0x60>)
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	68db      	ldr	r3, [r3, #12]
 801c988:	4a11      	ldr	r2, [pc, #68]	@ (801c9d0 <udp_remove+0x60>)
 801c98a:	6013      	str	r3, [r2, #0]
 801c98c:	e017      	b.n	801c9be <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c98e:	4b10      	ldr	r3, [pc, #64]	@ (801c9d0 <udp_remove+0x60>)
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	60fb      	str	r3, [r7, #12]
 801c994:	e010      	b.n	801c9b8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	68db      	ldr	r3, [r3, #12]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d009      	beq.n	801c9b2 <udp_remove+0x42>
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	68db      	ldr	r3, [r3, #12]
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	429a      	cmp	r2, r3
 801c9a6:	d104      	bne.n	801c9b2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	68da      	ldr	r2, [r3, #12]
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	60da      	str	r2, [r3, #12]
        break;
 801c9b0:	e005      	b.n	801c9be <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	68db      	ldr	r3, [r3, #12]
 801c9b6:	60fb      	str	r3, [r7, #12]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d1eb      	bne.n	801c996 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c9be:	6879      	ldr	r1, [r7, #4]
 801c9c0:	2000      	movs	r0, #0
 801c9c2:	f7f8 fe75 	bl	80156b0 <memp_free>
}
 801c9c6:	bf00      	nop
 801c9c8:	3710      	adds	r7, #16
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	bd80      	pop	{r7, pc}
 801c9ce:	bf00      	nop
 801c9d0:	2000bdd8 	.word	0x2000bdd8

0801c9d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b082      	sub	sp, #8
 801c9d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c9da:	2000      	movs	r0, #0
 801c9dc:	f7f8 fe16 	bl	801560c <memp_malloc>
 801c9e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d007      	beq.n	801c9f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c9e8:	2220      	movs	r2, #32
 801c9ea:	2100      	movs	r1, #0
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f005 fdfd 	bl	80225ec <memset>
    pcb->ttl = UDP_TTL;
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	22ff      	movs	r2, #255	@ 0xff
 801c9f6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c9f8:	687b      	ldr	r3, [r7, #4]
}
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	3708      	adds	r7, #8
 801c9fe:	46bd      	mov	sp, r7
 801ca00:	bd80      	pop	{r7, pc}

0801ca02 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ca02:	b580      	push	{r7, lr}
 801ca04:	b084      	sub	sp, #16
 801ca06:	af00      	add	r7, sp, #0
 801ca08:	4603      	mov	r3, r0
 801ca0a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801ca0c:	f7ff ffe2 	bl	801c9d4 <udp_new>
 801ca10:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ca12:	68fb      	ldr	r3, [r7, #12]
}
 801ca14:	4618      	mov	r0, r3
 801ca16:	3710      	adds	r7, #16
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}

0801ca1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801ca1c:	b480      	push	{r7}
 801ca1e:	b085      	sub	sp, #20
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
 801ca24:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d01e      	beq.n	801ca6a <udp_netif_ip_addr_changed+0x4e>
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d01a      	beq.n	801ca6a <udp_netif_ip_addr_changed+0x4e>
 801ca34:	683b      	ldr	r3, [r7, #0]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d017      	beq.n	801ca6a <udp_netif_ip_addr_changed+0x4e>
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d013      	beq.n	801ca6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ca42:	4b0c      	ldr	r3, [pc, #48]	@ (801ca74 <udp_netif_ip_addr_changed+0x58>)
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	60fb      	str	r3, [r7, #12]
 801ca48:	e00c      	b.n	801ca64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	681a      	ldr	r2, [r3, #0]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	429a      	cmp	r2, r3
 801ca54:	d103      	bne.n	801ca5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ca56:	683b      	ldr	r3, [r7, #0]
 801ca58:	681a      	ldr	r2, [r3, #0]
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	68db      	ldr	r3, [r3, #12]
 801ca62:	60fb      	str	r3, [r7, #12]
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d1ef      	bne.n	801ca4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ca6a:	bf00      	nop
 801ca6c:	3714      	adds	r7, #20
 801ca6e:	46bd      	mov	sp, r7
 801ca70:	bc80      	pop	{r7}
 801ca72:	4770      	bx	lr
 801ca74:	2000bdd8 	.word	0x2000bdd8

0801ca78 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801ca7c:	4b20      	ldr	r3, [pc, #128]	@ (801cb00 <dhcp_inc_pcb_refcount+0x88>)
 801ca7e:	781b      	ldrb	r3, [r3, #0]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d133      	bne.n	801caec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801ca84:	4b1f      	ldr	r3, [pc, #124]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d005      	beq.n	801ca98 <dhcp_inc_pcb_refcount+0x20>
 801ca8c:	4b1e      	ldr	r3, [pc, #120]	@ (801cb08 <dhcp_inc_pcb_refcount+0x90>)
 801ca8e:	22d9      	movs	r2, #217	@ 0xd9
 801ca90:	491e      	ldr	r1, [pc, #120]	@ (801cb0c <dhcp_inc_pcb_refcount+0x94>)
 801ca92:	481f      	ldr	r0, [pc, #124]	@ (801cb10 <dhcp_inc_pcb_refcount+0x98>)
 801ca94:	f005 fbd4 	bl	8022240 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801ca98:	f7ff ff9c 	bl	801c9d4 <udp_new>
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	4a19      	ldr	r2, [pc, #100]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801caa0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801caa2:	4b18      	ldr	r3, [pc, #96]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d102      	bne.n	801cab0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801caaa:	f04f 33ff 	mov.w	r3, #4294967295
 801caae:	e024      	b.n	801cafa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801cab0:	4b14      	ldr	r3, [pc, #80]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	7a1a      	ldrb	r2, [r3, #8]
 801cab6:	4b13      	ldr	r3, [pc, #76]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	f042 0220 	orr.w	r2, r2, #32
 801cabe:	b2d2      	uxtb	r2, r2
 801cac0:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801cac2:	4b10      	ldr	r3, [pc, #64]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	2244      	movs	r2, #68	@ 0x44
 801cac8:	4912      	ldr	r1, [pc, #72]	@ (801cb14 <dhcp_inc_pcb_refcount+0x9c>)
 801caca:	4618      	mov	r0, r3
 801cacc:	f7ff fe78 	bl	801c7c0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801cad0:	4b0c      	ldr	r3, [pc, #48]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	2243      	movs	r2, #67	@ 0x43
 801cad6:	490f      	ldr	r1, [pc, #60]	@ (801cb14 <dhcp_inc_pcb_refcount+0x9c>)
 801cad8:	4618      	mov	r0, r3
 801cada:	f7ff fee1 	bl	801c8a0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801cade:	4b09      	ldr	r3, [pc, #36]	@ (801cb04 <dhcp_inc_pcb_refcount+0x8c>)
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	2200      	movs	r2, #0
 801cae4:	490c      	ldr	r1, [pc, #48]	@ (801cb18 <dhcp_inc_pcb_refcount+0xa0>)
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7ff ff30 	bl	801c94c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801caec:	4b04      	ldr	r3, [pc, #16]	@ (801cb00 <dhcp_inc_pcb_refcount+0x88>)
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	3301      	adds	r3, #1
 801caf2:	b2da      	uxtb	r2, r3
 801caf4:	4b02      	ldr	r3, [pc, #8]	@ (801cb00 <dhcp_inc_pcb_refcount+0x88>)
 801caf6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801caf8:	2300      	movs	r3, #0
}
 801cafa:	4618      	mov	r0, r3
 801cafc:	bd80      	pop	{r7, pc}
 801cafe:	bf00      	nop
 801cb00:	2000be08 	.word	0x2000be08
 801cb04:	2000be04 	.word	0x2000be04
 801cb08:	0802738c 	.word	0x0802738c
 801cb0c:	080273c4 	.word	0x080273c4
 801cb10:	080273ec 	.word	0x080273ec
 801cb14:	0803165c 	.word	0x0803165c
 801cb18:	0801e22d 	.word	0x0801e22d

0801cb1c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801cb20:	4b0e      	ldr	r3, [pc, #56]	@ (801cb5c <dhcp_dec_pcb_refcount+0x40>)
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d105      	bne.n	801cb34 <dhcp_dec_pcb_refcount+0x18>
 801cb28:	4b0d      	ldr	r3, [pc, #52]	@ (801cb60 <dhcp_dec_pcb_refcount+0x44>)
 801cb2a:	22f3      	movs	r2, #243	@ 0xf3
 801cb2c:	490d      	ldr	r1, [pc, #52]	@ (801cb64 <dhcp_dec_pcb_refcount+0x48>)
 801cb2e:	480e      	ldr	r0, [pc, #56]	@ (801cb68 <dhcp_dec_pcb_refcount+0x4c>)
 801cb30:	f005 fb86 	bl	8022240 <iprintf>
  dhcp_pcb_refcount--;
 801cb34:	4b09      	ldr	r3, [pc, #36]	@ (801cb5c <dhcp_dec_pcb_refcount+0x40>)
 801cb36:	781b      	ldrb	r3, [r3, #0]
 801cb38:	3b01      	subs	r3, #1
 801cb3a:	b2da      	uxtb	r2, r3
 801cb3c:	4b07      	ldr	r3, [pc, #28]	@ (801cb5c <dhcp_dec_pcb_refcount+0x40>)
 801cb3e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801cb40:	4b06      	ldr	r3, [pc, #24]	@ (801cb5c <dhcp_dec_pcb_refcount+0x40>)
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d107      	bne.n	801cb58 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801cb48:	4b08      	ldr	r3, [pc, #32]	@ (801cb6c <dhcp_dec_pcb_refcount+0x50>)
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f7ff ff0f 	bl	801c970 <udp_remove>
    dhcp_pcb = NULL;
 801cb52:	4b06      	ldr	r3, [pc, #24]	@ (801cb6c <dhcp_dec_pcb_refcount+0x50>)
 801cb54:	2200      	movs	r2, #0
 801cb56:	601a      	str	r2, [r3, #0]
  }
}
 801cb58:	bf00      	nop
 801cb5a:	bd80      	pop	{r7, pc}
 801cb5c:	2000be08 	.word	0x2000be08
 801cb60:	0802738c 	.word	0x0802738c
 801cb64:	08027414 	.word	0x08027414
 801cb68:	080273ec 	.word	0x080273ec
 801cb6c:	2000be04 	.word	0x2000be04

0801cb70 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b084      	sub	sp, #16
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801cb7e:	210c      	movs	r1, #12
 801cb80:	68f8      	ldr	r0, [r7, #12]
 801cb82:	f000 ffb1 	bl	801dae8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801cb86:	4b06      	ldr	r3, [pc, #24]	@ (801cba0 <dhcp_handle_nak+0x30>)
 801cb88:	4a05      	ldr	r2, [pc, #20]	@ (801cba0 <dhcp_handle_nak+0x30>)
 801cb8a:	4905      	ldr	r1, [pc, #20]	@ (801cba0 <dhcp_handle_nak+0x30>)
 801cb8c:	6878      	ldr	r0, [r7, #4]
 801cb8e:	f7f8 fe1d 	bl	80157cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801cb92:	6878      	ldr	r0, [r7, #4]
 801cb94:	f000 fbe2 	bl	801d35c <dhcp_discover>
}
 801cb98:	bf00      	nop
 801cb9a:	3710      	adds	r7, #16
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	bd80      	pop	{r7, pc}
 801cba0:	0803165c 	.word	0x0803165c

0801cba4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	b084      	sub	sp, #16
 801cba8:	af00      	add	r7, sp, #0
 801cbaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbb0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801cbb2:	2108      	movs	r1, #8
 801cbb4:	68f8      	ldr	r0, [r7, #12]
 801cbb6:	f000 ff97 	bl	801dae8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	3328      	adds	r3, #40	@ 0x28
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	4619      	mov	r1, r3
 801cbc2:	6878      	ldr	r0, [r7, #4]
 801cbc4:	f002 fbda 	bl	801f37c <etharp_query>
 801cbc8:	4603      	mov	r3, r0
 801cbca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	7a9b      	ldrb	r3, [r3, #10]
 801cbd0:	2bff      	cmp	r3, #255	@ 0xff
 801cbd2:	d005      	beq.n	801cbe0 <dhcp_check+0x3c>
    dhcp->tries++;
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	7a9b      	ldrb	r3, [r3, #10]
 801cbd8:	3301      	adds	r3, #1
 801cbda:	b2da      	uxtb	r2, r3
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801cbe0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801cbe4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cbe6:	893b      	ldrh	r3, [r7, #8]
 801cbe8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cbec:	4a06      	ldr	r2, [pc, #24]	@ (801cc08 <dhcp_check+0x64>)
 801cbee:	fb82 1203 	smull	r1, r2, r2, r3
 801cbf2:	1152      	asrs	r2, r2, #5
 801cbf4:	17db      	asrs	r3, r3, #31
 801cbf6:	1ad3      	subs	r3, r2, r3
 801cbf8:	b29a      	uxth	r2, r3
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801cbfe:	bf00      	nop
 801cc00:	3710      	adds	r7, #16
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd80      	pop	{r7, pc}
 801cc06:	bf00      	nop
 801cc08:	10624dd3 	.word	0x10624dd3

0801cc0c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801cc1a:	4b0c      	ldr	r3, [pc, #48]	@ (801cc4c <dhcp_handle_offer+0x40>)
 801cc1c:	789b      	ldrb	r3, [r3, #2]
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d00f      	beq.n	801cc42 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cc22:	4b0b      	ldr	r3, [pc, #44]	@ (801cc50 <dhcp_handle_offer+0x44>)
 801cc24:	689b      	ldr	r3, [r3, #8]
 801cc26:	4618      	mov	r0, r3
 801cc28:	f7f8 f853 	bl	8014cd2 <lwip_htonl>
 801cc2c:	4602      	mov	r2, r0
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	685b      	ldr	r3, [r3, #4]
 801cc36:	691a      	ldr	r2, [r3, #16]
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	629a      	str	r2, [r3, #40]	@ 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801cc3c:	6878      	ldr	r0, [r7, #4]
 801cc3e:	f000 f809 	bl	801cc54 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801cc42:	bf00      	nop
 801cc44:	3710      	adds	r7, #16
 801cc46:	46bd      	mov	sp, r7
 801cc48:	bd80      	pop	{r7, pc}
 801cc4a:	bf00      	nop
 801cc4c:	2000bdfc 	.word	0x2000bdfc
 801cc50:	2000bddc 	.word	0x2000bddc

0801cc54 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b088      	sub	sp, #32
 801cc58:	af02      	add	r7, sp, #8
 801cc5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc60:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801cc62:	2101      	movs	r1, #1
 801cc64:	6938      	ldr	r0, [r7, #16]
 801cc66:	f000 ff3f 	bl	801dae8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801cc6a:	2203      	movs	r2, #3
 801cc6c:	6939      	ldr	r1, [r7, #16]
 801cc6e:	6878      	ldr	r0, [r7, #4]
 801cc70:	f001 fbc2 	bl	801e3f8 <dhcp_create_msg>
 801cc74:	4603      	mov	r3, r0
 801cc76:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cc78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d159      	bne.n	801cd34 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cc80:	2202      	movs	r2, #2
 801cc82:	2139      	movs	r1, #57	@ 0x39
 801cc84:	6938      	ldr	r0, [r7, #16]
 801cc86:	f000 ff49 	bl	801db1c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cc8e:	4619      	mov	r1, r3
 801cc90:	6938      	ldr	r0, [r7, #16]
 801cc92:	f000 ffa5 	bl	801dbe0 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801cc96:	2204      	movs	r2, #4
 801cc98:	2132      	movs	r1, #50	@ 0x32
 801cc9a:	6938      	ldr	r0, [r7, #16]
 801cc9c:	f000 ff3e 	bl	801db1c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cca0:	693b      	ldr	r3, [r7, #16]
 801cca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cca4:	4618      	mov	r0, r3
 801cca6:	f7f8 f814 	bl	8014cd2 <lwip_htonl>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	4619      	mov	r1, r3
 801ccae:	6938      	ldr	r0, [r7, #16]
 801ccb0:	f000 ffd0 	bl	801dc54 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801ccb4:	2204      	movs	r2, #4
 801ccb6:	2136      	movs	r1, #54	@ 0x36
 801ccb8:	6938      	ldr	r0, [r7, #16]
 801ccba:	f000 ff2f 	bl	801db1c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801ccbe:	693b      	ldr	r3, [r7, #16]
 801ccc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	f7f8 f805 	bl	8014cd2 <lwip_htonl>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	4619      	mov	r1, r3
 801cccc:	6938      	ldr	r0, [r7, #16]
 801ccce:	f000 ffc1 	bl	801dc54 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ccd2:	2203      	movs	r2, #3
 801ccd4:	2137      	movs	r1, #55	@ 0x37
 801ccd6:	6938      	ldr	r0, [r7, #16]
 801ccd8:	f000 ff20 	bl	801db1c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ccdc:	2300      	movs	r3, #0
 801ccde:	75fb      	strb	r3, [r7, #23]
 801cce0:	e009      	b.n	801ccf6 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801cce2:	7dfb      	ldrb	r3, [r7, #23]
 801cce4:	4a29      	ldr	r2, [pc, #164]	@ (801cd8c <dhcp_select+0x138>)
 801cce6:	5cd3      	ldrb	r3, [r2, r3]
 801cce8:	4619      	mov	r1, r3
 801ccea:	6938      	ldr	r0, [r7, #16]
 801ccec:	f000 ff50 	bl	801db90 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ccf0:	7dfb      	ldrb	r3, [r7, #23]
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	75fb      	strb	r3, [r7, #23]
 801ccf6:	7dfb      	ldrb	r3, [r7, #23]
 801ccf8:	2b02      	cmp	r3, #2
 801ccfa:	d9f2      	bls.n	801cce2 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801ccfc:	6938      	ldr	r0, [r7, #16]
 801ccfe:	f001 fd1f 	bl	801e740 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cd02:	693b      	ldr	r3, [r7, #16]
 801cd04:	68da      	ldr	r2, [r3, #12]
 801cd06:	693b      	ldr	r3, [r7, #16]
 801cd08:	8a9b      	ldrh	r3, [r3, #20]
 801cd0a:	33f0      	adds	r3, #240	@ 0xf0
 801cd0c:	b29b      	uxth	r3, r3
 801cd0e:	4619      	mov	r1, r3
 801cd10:	4610      	mov	r0, r2
 801cd12:	f7f9 f903 	bl	8015f1c <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801cd16:	4b1e      	ldr	r3, [pc, #120]	@ (801cd90 <dhcp_select+0x13c>)
 801cd18:	6818      	ldr	r0, [r3, #0]
 801cd1a:	693b      	ldr	r3, [r7, #16]
 801cd1c:	68d9      	ldr	r1, [r3, #12]
 801cd1e:	4b1d      	ldr	r3, [pc, #116]	@ (801cd94 <dhcp_select+0x140>)
 801cd20:	9301      	str	r3, [sp, #4]
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	9300      	str	r3, [sp, #0]
 801cd26:	2343      	movs	r3, #67	@ 0x43
 801cd28:	4a1b      	ldr	r2, [pc, #108]	@ (801cd98 <dhcp_select+0x144>)
 801cd2a:	f7ff fc9f 	bl	801c66c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801cd2e:	6938      	ldr	r0, [r7, #16]
 801cd30:	f001 fcc4 	bl	801e6bc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cd34:	693b      	ldr	r3, [r7, #16]
 801cd36:	7a9b      	ldrb	r3, [r3, #10]
 801cd38:	2bff      	cmp	r3, #255	@ 0xff
 801cd3a:	d005      	beq.n	801cd48 <dhcp_select+0xf4>
    dhcp->tries++;
 801cd3c:	693b      	ldr	r3, [r7, #16]
 801cd3e:	7a9b      	ldrb	r3, [r3, #10]
 801cd40:	3301      	adds	r3, #1
 801cd42:	b2da      	uxtb	r2, r3
 801cd44:	693b      	ldr	r3, [r7, #16]
 801cd46:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801cd48:	693b      	ldr	r3, [r7, #16]
 801cd4a:	7a9b      	ldrb	r3, [r3, #10]
 801cd4c:	2b05      	cmp	r3, #5
 801cd4e:	d807      	bhi.n	801cd60 <dhcp_select+0x10c>
 801cd50:	693b      	ldr	r3, [r7, #16]
 801cd52:	7a9b      	ldrb	r3, [r3, #10]
 801cd54:	461a      	mov	r2, r3
 801cd56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801cd5a:	4093      	lsls	r3, r2
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	e001      	b.n	801cd64 <dhcp_select+0x110>
 801cd60:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801cd64:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cd66:	89bb      	ldrh	r3, [r7, #12]
 801cd68:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cd6c:	4a0b      	ldr	r2, [pc, #44]	@ (801cd9c <dhcp_select+0x148>)
 801cd6e:	fb82 1203 	smull	r1, r2, r2, r3
 801cd72:	1152      	asrs	r2, r2, #5
 801cd74:	17db      	asrs	r3, r3, #31
 801cd76:	1ad3      	subs	r3, r2, r3
 801cd78:	b29a      	uxth	r2, r3
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cd7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	3718      	adds	r7, #24
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}
 801cd8a:	bf00      	nop
 801cd8c:	20000124 	.word	0x20000124
 801cd90:	2000be04 	.word	0x2000be04
 801cd94:	0803165c 	.word	0x0803165c
 801cd98:	08031660 	.word	0x08031660
 801cd9c:	10624dd3 	.word	0x10624dd3

0801cda0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b082      	sub	sp, #8
 801cda4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801cda6:	4b27      	ldr	r3, [pc, #156]	@ (801ce44 <dhcp_coarse_tmr+0xa4>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 801cdac:	e042      	b.n	801ce34 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cdb2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801cdb4:	683b      	ldr	r3, [r7, #0]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d039      	beq.n	801ce2e <dhcp_coarse_tmr+0x8e>
 801cdba:	683b      	ldr	r3, [r7, #0]
 801cdbc:	7a5b      	ldrb	r3, [r3, #9]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d035      	beq.n	801ce2e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801cdc2:	683b      	ldr	r3, [r7, #0]
 801cdc4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d012      	beq.n	801cdf0 <dhcp_coarse_tmr+0x50>
 801cdca:	683b      	ldr	r3, [r7, #0]
 801cdcc:	8c1b      	ldrh	r3, [r3, #32]
 801cdce:	3301      	adds	r3, #1
 801cdd0:	b29a      	uxth	r2, r3
 801cdd2:	683b      	ldr	r3, [r7, #0]
 801cdd4:	841a      	strh	r2, [r3, #32]
 801cdd6:	683b      	ldr	r3, [r7, #0]
 801cdd8:	8c1a      	ldrh	r2, [r3, #32]
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cdde:	429a      	cmp	r2, r3
 801cde0:	d106      	bne.n	801cdf0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801cde2:	6878      	ldr	r0, [r7, #4]
 801cde4:	f000 fdc0 	bl	801d968 <dhcp_release>
        dhcp_discover(netif);
 801cde8:	6878      	ldr	r0, [r7, #4]
 801cdea:	f000 fab7 	bl	801d35c <dhcp_discover>
 801cdee:	e01e      	b.n	801ce2e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801cdf0:	683b      	ldr	r3, [r7, #0]
 801cdf2:	8bdb      	ldrh	r3, [r3, #30]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d00b      	beq.n	801ce10 <dhcp_coarse_tmr+0x70>
 801cdf8:	683b      	ldr	r3, [r7, #0]
 801cdfa:	8bdb      	ldrh	r3, [r3, #30]
 801cdfc:	1e5a      	subs	r2, r3, #1
 801cdfe:	b291      	uxth	r1, r2
 801ce00:	683a      	ldr	r2, [r7, #0]
 801ce02:	83d1      	strh	r1, [r2, #30]
 801ce04:	2b01      	cmp	r3, #1
 801ce06:	d103      	bne.n	801ce10 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801ce08:	6878      	ldr	r0, [r7, #4]
 801ce0a:	f000 f8c6 	bl	801cf9a <dhcp_t2_timeout>
 801ce0e:	e00e      	b.n	801ce2e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801ce10:	683b      	ldr	r3, [r7, #0]
 801ce12:	8b9b      	ldrh	r3, [r3, #28]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d00a      	beq.n	801ce2e <dhcp_coarse_tmr+0x8e>
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	8b9b      	ldrh	r3, [r3, #28]
 801ce1c:	1e5a      	subs	r2, r3, #1
 801ce1e:	b291      	uxth	r1, r2
 801ce20:	683a      	ldr	r2, [r7, #0]
 801ce22:	8391      	strh	r1, [r2, #28]
 801ce24:	2b01      	cmp	r3, #1
 801ce26:	d102      	bne.n	801ce2e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801ce28:	6878      	ldr	r0, [r7, #4]
 801ce2a:	f000 f888 	bl	801cf3e <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d1b9      	bne.n	801cdae <dhcp_coarse_tmr+0xe>
  }
}
 801ce3a:	bf00      	nop
 801ce3c:	bf00      	nop
 801ce3e:	3708      	adds	r7, #8
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	2000bbd8 	.word	0x2000bbd8

0801ce48 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b082      	sub	sp, #8
 801ce4c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801ce4e:	4b16      	ldr	r3, [pc, #88]	@ (801cea8 <dhcp_fine_tmr+0x60>)
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801ce54:	e020      	b.n	801ce98 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce5a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801ce5c:	683b      	ldr	r3, [r7, #0]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d017      	beq.n	801ce92 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801ce62:	683b      	ldr	r3, [r7, #0]
 801ce64:	8adb      	ldrh	r3, [r3, #22]
 801ce66:	2b01      	cmp	r3, #1
 801ce68:	d906      	bls.n	801ce78 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801ce6a:	683b      	ldr	r3, [r7, #0]
 801ce6c:	8adb      	ldrh	r3, [r3, #22]
 801ce6e:	3b01      	subs	r3, #1
 801ce70:	b29a      	uxth	r2, r3
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	82da      	strh	r2, [r3, #22]
 801ce76:	e00c      	b.n	801ce92 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801ce78:	683b      	ldr	r3, [r7, #0]
 801ce7a:	8adb      	ldrh	r3, [r3, #22]
 801ce7c:	2b01      	cmp	r3, #1
 801ce7e:	d108      	bne.n	801ce92 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801ce80:	683b      	ldr	r3, [r7, #0]
 801ce82:	8adb      	ldrh	r3, [r3, #22]
 801ce84:	3b01      	subs	r3, #1
 801ce86:	b29a      	uxth	r2, r3
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f000 f80d 	bl	801ceac <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d1db      	bne.n	801ce56 <dhcp_fine_tmr+0xe>
  }
}
 801ce9e:	bf00      	nop
 801cea0:	bf00      	nop
 801cea2:	3708      	adds	r7, #8
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	2000bbd8 	.word	0x2000bbd8

0801ceac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b084      	sub	sp, #16
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ceb8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	7a5b      	ldrb	r3, [r3, #9]
 801cebe:	2b0c      	cmp	r3, #12
 801cec0:	d003      	beq.n	801ceca <dhcp_timeout+0x1e>
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	7a5b      	ldrb	r3, [r3, #9]
 801cec6:	2b06      	cmp	r3, #6
 801cec8:	d103      	bne.n	801ced2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801ceca:	6878      	ldr	r0, [r7, #4]
 801cecc:	f000 fa46 	bl	801d35c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801ced0:	e031      	b.n	801cf36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	7a5b      	ldrb	r3, [r3, #9]
 801ced6:	2b01      	cmp	r3, #1
 801ced8:	d10e      	bne.n	801cef8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	7a9b      	ldrb	r3, [r3, #10]
 801cede:	2b05      	cmp	r3, #5
 801cee0:	d803      	bhi.n	801ceea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801cee2:	6878      	ldr	r0, [r7, #4]
 801cee4:	f7ff feb6 	bl	801cc54 <dhcp_select>
}
 801cee8:	e025      	b.n	801cf36 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f000 fd3c 	bl	801d968 <dhcp_release>
      dhcp_discover(netif);
 801cef0:	6878      	ldr	r0, [r7, #4]
 801cef2:	f000 fa33 	bl	801d35c <dhcp_discover>
}
 801cef6:	e01e      	b.n	801cf36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	7a5b      	ldrb	r3, [r3, #9]
 801cefc:	2b08      	cmp	r3, #8
 801cefe:	d10b      	bne.n	801cf18 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	7a9b      	ldrb	r3, [r3, #10]
 801cf04:	2b01      	cmp	r3, #1
 801cf06:	d803      	bhi.n	801cf10 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801cf08:	6878      	ldr	r0, [r7, #4]
 801cf0a:	f7ff fe4b 	bl	801cba4 <dhcp_check>
}
 801cf0e:	e012      	b.n	801cf36 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801cf10:	6878      	ldr	r0, [r7, #4]
 801cf12:	f000 faaf 	bl	801d474 <dhcp_bind>
}
 801cf16:	e00e      	b.n	801cf36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	7a5b      	ldrb	r3, [r3, #9]
 801cf1c:	2b03      	cmp	r3, #3
 801cf1e:	d10a      	bne.n	801cf36 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	7a9b      	ldrb	r3, [r3, #10]
 801cf24:	2b01      	cmp	r3, #1
 801cf26:	d803      	bhi.n	801cf30 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801cf28:	6878      	ldr	r0, [r7, #4]
 801cf2a:	f000 fc89 	bl	801d840 <dhcp_reboot>
}
 801cf2e:	e002      	b.n	801cf36 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801cf30:	6878      	ldr	r0, [r7, #4]
 801cf32:	f000 fa13 	bl	801d35c <dhcp_discover>
}
 801cf36:	bf00      	nop
 801cf38:	3710      	adds	r7, #16
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}

0801cf3e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801cf3e:	b580      	push	{r7, lr}
 801cf40:	b084      	sub	sp, #16
 801cf42:	af00      	add	r7, sp, #0
 801cf44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	7a5b      	ldrb	r3, [r3, #9]
 801cf50:	2b01      	cmp	r3, #1
 801cf52:	d007      	beq.n	801cf64 <dhcp_t1_timeout+0x26>
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	7a5b      	ldrb	r3, [r3, #9]
 801cf58:	2b0a      	cmp	r3, #10
 801cf5a:	d003      	beq.n	801cf64 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cf60:	2b05      	cmp	r3, #5
 801cf62:	d116      	bne.n	801cf92 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801cf64:	6878      	ldr	r0, [r7, #4]
 801cf66:	f000 fb5f 	bl	801d628 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	8b5b      	ldrh	r3, [r3, #26]
 801cf6e:	461a      	mov	r2, r3
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	8c1b      	ldrh	r3, [r3, #32]
 801cf74:	1ad3      	subs	r3, r2, r3
 801cf76:	2b01      	cmp	r3, #1
 801cf78:	dd0b      	ble.n	801cf92 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	8b5b      	ldrh	r3, [r3, #26]
 801cf7e:	461a      	mov	r2, r3
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	8c1b      	ldrh	r3, [r3, #32]
 801cf84:	1ad3      	subs	r3, r2, r3
 801cf86:	0fda      	lsrs	r2, r3, #31
 801cf88:	4413      	add	r3, r2
 801cf8a:	105b      	asrs	r3, r3, #1
 801cf8c:	b29a      	uxth	r2, r3
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801cf92:	bf00      	nop
 801cf94:	3710      	adds	r7, #16
 801cf96:	46bd      	mov	sp, r7
 801cf98:	bd80      	pop	{r7, pc}

0801cf9a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801cf9a:	b580      	push	{r7, lr}
 801cf9c:	b084      	sub	sp, #16
 801cf9e:	af00      	add	r7, sp, #0
 801cfa0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	7a5b      	ldrb	r3, [r3, #9]
 801cfac:	2b01      	cmp	r3, #1
 801cfae:	d00b      	beq.n	801cfc8 <dhcp_t2_timeout+0x2e>
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	7a5b      	ldrb	r3, [r3, #9]
 801cfb4:	2b0a      	cmp	r3, #10
 801cfb6:	d007      	beq.n	801cfc8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cfb8:	68fb      	ldr	r3, [r7, #12]
 801cfba:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cfbc:	2b05      	cmp	r3, #5
 801cfbe:	d003      	beq.n	801cfc8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	7a5b      	ldrb	r3, [r3, #9]
 801cfc4:	2b04      	cmp	r3, #4
 801cfc6:	d116      	bne.n	801cff6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801cfc8:	6878      	ldr	r0, [r7, #4]
 801cfca:	f000 fbb3 	bl	801d734 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cfd2:	461a      	mov	r2, r3
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	8c1b      	ldrh	r3, [r3, #32]
 801cfd8:	1ad3      	subs	r3, r2, r3
 801cfda:	2b01      	cmp	r3, #1
 801cfdc:	dd0b      	ble.n	801cff6 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cfe2:	461a      	mov	r2, r3
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	8c1b      	ldrh	r3, [r3, #32]
 801cfe8:	1ad3      	subs	r3, r2, r3
 801cfea:	0fda      	lsrs	r2, r3, #31
 801cfec:	4413      	add	r3, r2
 801cfee:	105b      	asrs	r3, r3, #1
 801cff0:	b29a      	uxth	r2, r3
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801cff6:	bf00      	nop
 801cff8:	3710      	adds	r7, #16
 801cffa:	46bd      	mov	sp, r7
 801cffc:	bd80      	pop	{r7, pc}
	...

0801d000 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b084      	sub	sp, #16
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d00c:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	2200      	movs	r2, #0
 801d012:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	2200      	movs	r2, #0
 801d018:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801d01a:	4b27      	ldr	r3, [pc, #156]	@ (801d0b8 <dhcp_handle_ack+0xb8>)
 801d01c:	78db      	ldrb	r3, [r3, #3]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d003      	beq.n	801d02a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801d022:	4b26      	ldr	r3, [pc, #152]	@ (801d0bc <dhcp_handle_ack+0xbc>)
 801d024:	68da      	ldr	r2, [r3, #12]
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801d02a:	4b23      	ldr	r3, [pc, #140]	@ (801d0b8 <dhcp_handle_ack+0xb8>)
 801d02c:	791b      	ldrb	r3, [r3, #4]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d004      	beq.n	801d03c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801d032:	4b22      	ldr	r3, [pc, #136]	@ (801d0bc <dhcp_handle_ack+0xbc>)
 801d034:	691a      	ldr	r2, [r3, #16]
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	639a      	str	r2, [r3, #56]	@ 0x38
 801d03a:	e004      	b.n	801d046 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d040:	085a      	lsrs	r2, r3, #1
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801d046:	4b1c      	ldr	r3, [pc, #112]	@ (801d0b8 <dhcp_handle_ack+0xb8>)
 801d048:	795b      	ldrb	r3, [r3, #5]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d004      	beq.n	801d058 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801d04e:	4b1b      	ldr	r3, [pc, #108]	@ (801d0bc <dhcp_handle_ack+0xbc>)
 801d050:	695a      	ldr	r2, [r3, #20]
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	63da      	str	r2, [r3, #60]	@ 0x3c
 801d056:	e007      	b.n	801d068 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d05c:	4613      	mov	r3, r2
 801d05e:	00db      	lsls	r3, r3, #3
 801d060:	1a9b      	subs	r3, r3, r2
 801d062:	08da      	lsrs	r2, r3, #3
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	685b      	ldr	r3, [r3, #4]
 801d06c:	691a      	ldr	r2, [r3, #16]
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	629a      	str	r2, [r3, #40]	@ 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d072:	4b11      	ldr	r3, [pc, #68]	@ (801d0b8 <dhcp_handle_ack+0xb8>)
 801d074:	799b      	ldrb	r3, [r3, #6]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d00b      	beq.n	801d092 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801d07a:	4b10      	ldr	r3, [pc, #64]	@ (801d0bc <dhcp_handle_ack+0xbc>)
 801d07c:	699b      	ldr	r3, [r3, #24]
 801d07e:	4618      	mov	r0, r3
 801d080:	f7f7 fe27 	bl	8014cd2 <lwip_htonl>
 801d084:	4602      	mov	r2, r0
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	62da      	str	r2, [r3, #44]	@ 0x2c
    dhcp->subnet_mask_given = 1;
 801d08a:	68fb      	ldr	r3, [r7, #12]
 801d08c:	2201      	movs	r2, #1
 801d08e:	72da      	strb	r2, [r3, #11]
 801d090:	e002      	b.n	801d098 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	2200      	movs	r2, #0
 801d096:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801d098:	4b07      	ldr	r3, [pc, #28]	@ (801d0b8 <dhcp_handle_ack+0xb8>)
 801d09a:	79db      	ldrb	r3, [r3, #7]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d007      	beq.n	801d0b0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801d0a0:	4b06      	ldr	r3, [pc, #24]	@ (801d0bc <dhcp_handle_ack+0xbc>)
 801d0a2:	69db      	ldr	r3, [r3, #28]
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	f7f7 fe14 	bl	8014cd2 <lwip_htonl>
 801d0aa:	4602      	mov	r2, r0
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	631a      	str	r2, [r3, #48]	@ 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801d0b0:	bf00      	nop
 801d0b2:	3710      	adds	r7, #16
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bd80      	pop	{r7, pc}
 801d0b8:	2000bdfc 	.word	0x2000bdfc
 801d0bc:	2000bddc 	.word	0x2000bddc

0801d0c0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b084      	sub	sp, #16
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d109      	bne.n	801d0e2 <dhcp_start+0x22>
 801d0ce:	4b3c      	ldr	r3, [pc, #240]	@ (801d1c0 <dhcp_start+0x100>)
 801d0d0:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801d0d4:	493b      	ldr	r1, [pc, #236]	@ (801d1c4 <dhcp_start+0x104>)
 801d0d6:	483c      	ldr	r0, [pc, #240]	@ (801d1c8 <dhcp_start+0x108>)
 801d0d8:	f005 f8b2 	bl	8022240 <iprintf>
 801d0dc:	f06f 030f 	mvn.w	r3, #15
 801d0e0:	e069      	b.n	801d1b6 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801d0e8:	f003 0301 	and.w	r3, r3, #1
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d109      	bne.n	801d104 <dhcp_start+0x44>
 801d0f0:	4b33      	ldr	r3, [pc, #204]	@ (801d1c0 <dhcp_start+0x100>)
 801d0f2:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801d0f6:	4935      	ldr	r1, [pc, #212]	@ (801d1cc <dhcp_start+0x10c>)
 801d0f8:	4833      	ldr	r0, [pc, #204]	@ (801d1c8 <dhcp_start+0x108>)
 801d0fa:	f005 f8a1 	bl	8022240 <iprintf>
 801d0fe:	f06f 030f 	mvn.w	r3, #15
 801d102:	e058      	b.n	801d1b6 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d108:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d10e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801d112:	d202      	bcs.n	801d11a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801d114:	f04f 33ff 	mov.w	r3, #4294967295
 801d118:	e04d      	b.n	801d1b6 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d10d      	bne.n	801d13c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801d120:	2040      	movs	r0, #64	@ 0x40
 801d122:	f7f8 f8c5 	bl	80152b0 <mem_malloc>
 801d126:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d102      	bne.n	801d134 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801d12e:	f04f 33ff 	mov.w	r3, #4294967295
 801d132:	e040      	b.n	801d1b6 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	68fa      	ldr	r2, [r7, #12]
 801d138:	625a      	str	r2, [r3, #36]	@ 0x24
 801d13a:	e01b      	b.n	801d174 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	68db      	ldr	r3, [r3, #12]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d006      	beq.n	801d152 <dhcp_start+0x92>
 801d144:	4b1e      	ldr	r3, [pc, #120]	@ (801d1c0 <dhcp_start+0x100>)
 801d146:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 801d14a:	4921      	ldr	r1, [pc, #132]	@ (801d1d0 <dhcp_start+0x110>)
 801d14c:	481e      	ldr	r0, [pc, #120]	@ (801d1c8 <dhcp_start+0x108>)
 801d14e:	f005 f877 	bl	8022240 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	685b      	ldr	r3, [r3, #4]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d006      	beq.n	801d168 <dhcp_start+0xa8>
 801d15a:	4b19      	ldr	r3, [pc, #100]	@ (801d1c0 <dhcp_start+0x100>)
 801d15c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801d160:	491c      	ldr	r1, [pc, #112]	@ (801d1d4 <dhcp_start+0x114>)
 801d162:	4819      	ldr	r0, [pc, #100]	@ (801d1c8 <dhcp_start+0x108>)
 801d164:	f005 f86c 	bl	8022240 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	7a1b      	ldrb	r3, [r3, #8]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d001      	beq.n	801d174 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d170:	f7ff fcd4 	bl	801cb1c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801d174:	2240      	movs	r2, #64	@ 0x40
 801d176:	2100      	movs	r1, #0
 801d178:	68f8      	ldr	r0, [r7, #12]
 801d17a:	f005 fa37 	bl	80225ec <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801d17e:	f7ff fc7b 	bl	801ca78 <dhcp_inc_pcb_refcount>
 801d182:	4603      	mov	r3, r0
 801d184:	2b00      	cmp	r3, #0
 801d186:	d002      	beq.n	801d18e <dhcp_start+0xce>
    return ERR_MEM;
 801d188:	f04f 33ff 	mov.w	r3, #4294967295
 801d18c:	e013      	b.n	801d1b6 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2201      	movs	r2, #1
 801d192:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f000 f8e1 	bl	801d35c <dhcp_discover>
 801d19a:	4603      	mov	r3, r0
 801d19c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801d19e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d005      	beq.n	801d1b2 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801d1a6:	6878      	ldr	r0, [r7, #4]
 801d1a8:	f000 fc66 	bl	801da78 <dhcp_stop>
    return ERR_MEM;
 801d1ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d1b0:	e001      	b.n	801d1b6 <dhcp_start+0xf6>
  }
  return result;
 801d1b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	3710      	adds	r7, #16
 801d1ba:	46bd      	mov	sp, r7
 801d1bc:	bd80      	pop	{r7, pc}
 801d1be:	bf00      	nop
 801d1c0:	0802738c 	.word	0x0802738c
 801d1c4:	08027438 	.word	0x08027438
 801d1c8:	080273ec 	.word	0x080273ec
 801d1cc:	0802747c 	.word	0x0802747c
 801d1d0:	080274a0 	.word	0x080274a0
 801d1d4:	080274b8 	.word	0x080274b8

0801d1d8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b084      	sub	sp, #16
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1e4:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d01a      	beq.n	801d222 <dhcp_network_changed+0x4a>
    return;
  switch (dhcp->state) {
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	7a5b      	ldrb	r3, [r3, #9]
 801d1f0:	2b0a      	cmp	r3, #10
 801d1f2:	d008      	beq.n	801d206 <dhcp_network_changed+0x2e>
 801d1f4:	2b0a      	cmp	r3, #10
 801d1f6:	dc0d      	bgt.n	801d214 <dhcp_network_changed+0x3c>
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d014      	beq.n	801d226 <dhcp_network_changed+0x4e>
 801d1fc:	2b00      	cmp	r3, #0
 801d1fe:	db09      	blt.n	801d214 <dhcp_network_changed+0x3c>
 801d200:	3b03      	subs	r3, #3
 801d202:	2b02      	cmp	r3, #2
 801d204:	d806      	bhi.n	801d214 <dhcp_network_changed+0x3c>
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	2200      	movs	r2, #0
 801d20a:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 801d20c:	6878      	ldr	r0, [r7, #4]
 801d20e:	f000 fb17 	bl	801d840 <dhcp_reboot>
    break;
 801d212:	e009      	b.n	801d228 <dhcp_network_changed+0x50>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	2200      	movs	r2, #0
 801d218:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 801d21a:	6878      	ldr	r0, [r7, #4]
 801d21c:	f000 f89e 	bl	801d35c <dhcp_discover>
    break;
 801d220:	e002      	b.n	801d228 <dhcp_network_changed+0x50>
    return;
 801d222:	bf00      	nop
 801d224:	e000      	b.n	801d228 <dhcp_network_changed+0x50>
    break;
 801d226:	bf00      	nop
  }
}
 801d228:	3710      	adds	r7, #16
 801d22a:	46bd      	mov	sp, r7
 801d22c:	bd80      	pop	{r7, pc}
	...

0801d230 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b084      	sub	sp, #16
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d107      	bne.n	801d250 <dhcp_arp_reply+0x20>
 801d240:	4b0e      	ldr	r3, [pc, #56]	@ (801d27c <dhcp_arp_reply+0x4c>)
 801d242:	f240 327b 	movw	r2, #891	@ 0x37b
 801d246:	490e      	ldr	r1, [pc, #56]	@ (801d280 <dhcp_arp_reply+0x50>)
 801d248:	480e      	ldr	r0, [pc, #56]	@ (801d284 <dhcp_arp_reply+0x54>)
 801d24a:	f004 fff9 	bl	8022240 <iprintf>
 801d24e:	e012      	b.n	801d276 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d254:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d00c      	beq.n	801d276 <dhcp_arp_reply+0x46>
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	7a5b      	ldrb	r3, [r3, #9]
 801d260:	2b08      	cmp	r3, #8
 801d262:	d108      	bne.n	801d276 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801d264:	683b      	ldr	r3, [r7, #0]
 801d266:	681a      	ldr	r2, [r3, #0]
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d26c:	429a      	cmp	r2, r3
 801d26e:	d102      	bne.n	801d276 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f000 f809 	bl	801d288 <dhcp_decline>
    }
  }
}
 801d276:	3710      	adds	r7, #16
 801d278:	46bd      	mov	sp, r7
 801d27a:	bd80      	pop	{r7, pc}
 801d27c:	0802738c 	.word	0x0802738c
 801d280:	08027438 	.word	0x08027438
 801d284:	080273ec 	.word	0x080273ec

0801d288 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b086      	sub	sp, #24
 801d28c:	af02      	add	r7, sp, #8
 801d28e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d294:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801d296:	2300      	movs	r3, #0
 801d298:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801d29a:	210c      	movs	r1, #12
 801d29c:	68f8      	ldr	r0, [r7, #12]
 801d29e:	f000 fc23 	bl	801dae8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801d2a2:	2204      	movs	r2, #4
 801d2a4:	68f9      	ldr	r1, [r7, #12]
 801d2a6:	6878      	ldr	r0, [r7, #4]
 801d2a8:	f001 f8a6 	bl	801e3f8 <dhcp_create_msg>
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801d2b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d12a      	bne.n	801d30e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801d2b8:	2204      	movs	r2, #4
 801d2ba:	2132      	movs	r1, #50	@ 0x32
 801d2bc:	68f8      	ldr	r0, [r7, #12]
 801d2be:	f000 fc2d 	bl	801db1c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7f7 fd03 	bl	8014cd2 <lwip_htonl>
 801d2cc:	4603      	mov	r3, r0
 801d2ce:	4619      	mov	r1, r3
 801d2d0:	68f8      	ldr	r0, [r7, #12]
 801d2d2:	f000 fcbf 	bl	801dc54 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801d2d6:	68f8      	ldr	r0, [r7, #12]
 801d2d8:	f001 fa32 	bl	801e740 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	68da      	ldr	r2, [r3, #12]
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	8a9b      	ldrh	r3, [r3, #20]
 801d2e4:	33f0      	adds	r3, #240	@ 0xf0
 801d2e6:	b29b      	uxth	r3, r3
 801d2e8:	4619      	mov	r1, r3
 801d2ea:	4610      	mov	r0, r2
 801d2ec:	f7f8 fe16 	bl	8015f1c <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801d2f0:	4b16      	ldr	r3, [pc, #88]	@ (801d34c <dhcp_decline+0xc4>)
 801d2f2:	6818      	ldr	r0, [r3, #0]
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	68d9      	ldr	r1, [r3, #12]
 801d2f8:	4b15      	ldr	r3, [pc, #84]	@ (801d350 <dhcp_decline+0xc8>)
 801d2fa:	9301      	str	r3, [sp, #4]
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	9300      	str	r3, [sp, #0]
 801d300:	2343      	movs	r3, #67	@ 0x43
 801d302:	4a14      	ldr	r2, [pc, #80]	@ (801d354 <dhcp_decline+0xcc>)
 801d304:	f7ff f9b2 	bl	801c66c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801d308:	68f8      	ldr	r0, [r7, #12]
 801d30a:	f001 f9d7 	bl	801e6bc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	7a9b      	ldrb	r3, [r3, #10]
 801d312:	2bff      	cmp	r3, #255	@ 0xff
 801d314:	d005      	beq.n	801d322 <dhcp_decline+0x9a>
    dhcp->tries++;
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	7a9b      	ldrb	r3, [r3, #10]
 801d31a:	3301      	adds	r3, #1
 801d31c:	b2da      	uxtb	r2, r3
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801d322:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d326:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d328:	893b      	ldrh	r3, [r7, #8]
 801d32a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d32e:	4a0a      	ldr	r2, [pc, #40]	@ (801d358 <dhcp_decline+0xd0>)
 801d330:	fb82 1203 	smull	r1, r2, r2, r3
 801d334:	1152      	asrs	r2, r2, #5
 801d336:	17db      	asrs	r3, r3, #31
 801d338:	1ad3      	subs	r3, r2, r3
 801d33a:	b29a      	uxth	r2, r3
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d340:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d344:	4618      	mov	r0, r3
 801d346:	3710      	adds	r7, #16
 801d348:	46bd      	mov	sp, r7
 801d34a:	bd80      	pop	{r7, pc}
 801d34c:	2000be04 	.word	0x2000be04
 801d350:	0803165c 	.word	0x0803165c
 801d354:	08031660 	.word	0x08031660
 801d358:	10624dd3 	.word	0x10624dd3

0801d35c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801d35c:	b580      	push	{r7, lr}
 801d35e:	b088      	sub	sp, #32
 801d360:	af02      	add	r7, sp, #8
 801d362:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d368:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801d36a:	2300      	movs	r3, #0
 801d36c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801d36e:	693b      	ldr	r3, [r7, #16]
 801d370:	2200      	movs	r2, #0
 801d372:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801d374:	2106      	movs	r1, #6
 801d376:	6938      	ldr	r0, [r7, #16]
 801d378:	f000 fbb6 	bl	801dae8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801d37c:	2201      	movs	r2, #1
 801d37e:	6939      	ldr	r1, [r7, #16]
 801d380:	6878      	ldr	r0, [r7, #4]
 801d382:	f001 f839 	bl	801e3f8 <dhcp_create_msg>
 801d386:	4603      	mov	r3, r0
 801d388:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d13b      	bne.n	801d40a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d392:	2202      	movs	r2, #2
 801d394:	2139      	movs	r1, #57	@ 0x39
 801d396:	6938      	ldr	r0, [r7, #16]
 801d398:	f000 fbc0 	bl	801db1c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d3a0:	4619      	mov	r1, r3
 801d3a2:	6938      	ldr	r0, [r7, #16]
 801d3a4:	f000 fc1c 	bl	801dbe0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d3a8:	2203      	movs	r2, #3
 801d3aa:	2137      	movs	r1, #55	@ 0x37
 801d3ac:	6938      	ldr	r0, [r7, #16]
 801d3ae:	f000 fbb5 	bl	801db1c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	75fb      	strb	r3, [r7, #23]
 801d3b6:	e009      	b.n	801d3cc <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d3b8:	7dfb      	ldrb	r3, [r7, #23]
 801d3ba:	4a29      	ldr	r2, [pc, #164]	@ (801d460 <dhcp_discover+0x104>)
 801d3bc:	5cd3      	ldrb	r3, [r2, r3]
 801d3be:	4619      	mov	r1, r3
 801d3c0:	6938      	ldr	r0, [r7, #16]
 801d3c2:	f000 fbe5 	bl	801db90 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3c6:	7dfb      	ldrb	r3, [r7, #23]
 801d3c8:	3301      	adds	r3, #1
 801d3ca:	75fb      	strb	r3, [r7, #23]
 801d3cc:	7dfb      	ldrb	r3, [r7, #23]
 801d3ce:	2b02      	cmp	r3, #2
 801d3d0:	d9f2      	bls.n	801d3b8 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801d3d2:	6938      	ldr	r0, [r7, #16]
 801d3d4:	f001 f9b4 	bl	801e740 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d3d8:	693b      	ldr	r3, [r7, #16]
 801d3da:	68da      	ldr	r2, [r3, #12]
 801d3dc:	693b      	ldr	r3, [r7, #16]
 801d3de:	8a9b      	ldrh	r3, [r3, #20]
 801d3e0:	33f0      	adds	r3, #240	@ 0xf0
 801d3e2:	b29b      	uxth	r3, r3
 801d3e4:	4619      	mov	r1, r3
 801d3e6:	4610      	mov	r0, r2
 801d3e8:	f7f8 fd98 	bl	8015f1c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801d3ec:	4b1d      	ldr	r3, [pc, #116]	@ (801d464 <dhcp_discover+0x108>)
 801d3ee:	6818      	ldr	r0, [r3, #0]
 801d3f0:	693b      	ldr	r3, [r7, #16]
 801d3f2:	68d9      	ldr	r1, [r3, #12]
 801d3f4:	4b1c      	ldr	r3, [pc, #112]	@ (801d468 <dhcp_discover+0x10c>)
 801d3f6:	9301      	str	r3, [sp, #4]
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	9300      	str	r3, [sp, #0]
 801d3fc:	2343      	movs	r3, #67	@ 0x43
 801d3fe:	4a1b      	ldr	r2, [pc, #108]	@ (801d46c <dhcp_discover+0x110>)
 801d400:	f7ff f934 	bl	801c66c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 801d404:	6938      	ldr	r0, [r7, #16]
 801d406:	f001 f959 	bl	801e6bc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d40a:	693b      	ldr	r3, [r7, #16]
 801d40c:	7a9b      	ldrb	r3, [r3, #10]
 801d40e:	2bff      	cmp	r3, #255	@ 0xff
 801d410:	d005      	beq.n	801d41e <dhcp_discover+0xc2>
    dhcp->tries++;
 801d412:	693b      	ldr	r3, [r7, #16]
 801d414:	7a9b      	ldrb	r3, [r3, #10]
 801d416:	3301      	adds	r3, #1
 801d418:	b2da      	uxtb	r2, r3
 801d41a:	693b      	ldr	r3, [r7, #16]
 801d41c:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	7a9b      	ldrb	r3, [r3, #10]
 801d422:	2b05      	cmp	r3, #5
 801d424:	d807      	bhi.n	801d436 <dhcp_discover+0xda>
 801d426:	693b      	ldr	r3, [r7, #16]
 801d428:	7a9b      	ldrb	r3, [r3, #10]
 801d42a:	461a      	mov	r2, r3
 801d42c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d430:	4093      	lsls	r3, r2
 801d432:	b29b      	uxth	r3, r3
 801d434:	e001      	b.n	801d43a <dhcp_discover+0xde>
 801d436:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801d43a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d43c:	89bb      	ldrh	r3, [r7, #12]
 801d43e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d442:	4a0b      	ldr	r2, [pc, #44]	@ (801d470 <dhcp_discover+0x114>)
 801d444:	fb82 1203 	smull	r1, r2, r2, r3
 801d448:	1152      	asrs	r2, r2, #5
 801d44a:	17db      	asrs	r3, r3, #31
 801d44c:	1ad3      	subs	r3, r2, r3
 801d44e:	b29a      	uxth	r2, r3
 801d450:	693b      	ldr	r3, [r7, #16]
 801d452:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d458:	4618      	mov	r0, r3
 801d45a:	3718      	adds	r7, #24
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd80      	pop	{r7, pc}
 801d460:	20000124 	.word	0x20000124
 801d464:	2000be04 	.word	0x2000be04
 801d468:	0803165c 	.word	0x0803165c
 801d46c:	08031660 	.word	0x08031660
 801d470:	10624dd3 	.word	0x10624dd3

0801d474 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801d474:	b580      	push	{r7, lr}
 801d476:	b088      	sub	sp, #32
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d107      	bne.n	801d492 <dhcp_bind+0x1e>
 801d482:	4b64      	ldr	r3, [pc, #400]	@ (801d614 <dhcp_bind+0x1a0>)
 801d484:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d488:	4963      	ldr	r1, [pc, #396]	@ (801d618 <dhcp_bind+0x1a4>)
 801d48a:	4864      	ldr	r0, [pc, #400]	@ (801d61c <dhcp_bind+0x1a8>)
 801d48c:	f004 fed8 	bl	8022240 <iprintf>
 801d490:	e0bc      	b.n	801d60c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d496:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d498:	69bb      	ldr	r3, [r7, #24]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d107      	bne.n	801d4ae <dhcp_bind+0x3a>
 801d49e:	4b5d      	ldr	r3, [pc, #372]	@ (801d614 <dhcp_bind+0x1a0>)
 801d4a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801d4a4:	495e      	ldr	r1, [pc, #376]	@ (801d620 <dhcp_bind+0x1ac>)
 801d4a6:	485d      	ldr	r0, [pc, #372]	@ (801d61c <dhcp_bind+0x1a8>)
 801d4a8:	f004 feca 	bl	8022240 <iprintf>
 801d4ac:	e0ae      	b.n	801d60c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801d4ae:	69bb      	ldr	r3, [r7, #24]
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d4b4:	69bb      	ldr	r3, [r7, #24]
 801d4b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4bc:	d019      	beq.n	801d4f2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d4be:	69bb      	ldr	r3, [r7, #24]
 801d4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d4c2:	331e      	adds	r3, #30
 801d4c4:	4a57      	ldr	r2, [pc, #348]	@ (801d624 <dhcp_bind+0x1b0>)
 801d4c6:	fba2 2303 	umull	r2, r3, r2, r3
 801d4ca:	095b      	lsrs	r3, r3, #5
 801d4cc:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801d4ce:	69fb      	ldr	r3, [r7, #28]
 801d4d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d4d4:	d302      	bcc.n	801d4dc <dhcp_bind+0x68>
       timeout = 0xffff;
 801d4d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d4da:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801d4dc:	69fb      	ldr	r3, [r7, #28]
 801d4de:	b29a      	uxth	r2, r3
 801d4e0:	69bb      	ldr	r3, [r7, #24]
 801d4e2:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 801d4e4:	69bb      	ldr	r3, [r7, #24]
 801d4e6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d102      	bne.n	801d4f2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801d4ec:	69bb      	ldr	r3, [r7, #24]
 801d4ee:	2201      	movs	r2, #1
 801d4f0:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d4f2:	69bb      	ldr	r3, [r7, #24]
 801d4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4fa:	d01d      	beq.n	801d538 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d4fc:	69bb      	ldr	r3, [r7, #24]
 801d4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d500:	331e      	adds	r3, #30
 801d502:	4a48      	ldr	r2, [pc, #288]	@ (801d624 <dhcp_bind+0x1b0>)
 801d504:	fba2 2303 	umull	r2, r3, r2, r3
 801d508:	095b      	lsrs	r3, r3, #5
 801d50a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d50c:	69fb      	ldr	r3, [r7, #28]
 801d50e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d512:	d302      	bcc.n	801d51a <dhcp_bind+0xa6>
      timeout = 0xffff;
 801d514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d518:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801d51a:	69fb      	ldr	r3, [r7, #28]
 801d51c:	b29a      	uxth	r2, r3
 801d51e:	69bb      	ldr	r3, [r7, #24]
 801d520:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801d522:	69bb      	ldr	r3, [r7, #24]
 801d524:	8b1b      	ldrh	r3, [r3, #24]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d102      	bne.n	801d530 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	2201      	movs	r2, #1
 801d52e:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d530:	69bb      	ldr	r3, [r7, #24]
 801d532:	8b1a      	ldrh	r2, [r3, #24]
 801d534:	69bb      	ldr	r3, [r7, #24]
 801d536:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d538:	69bb      	ldr	r3, [r7, #24]
 801d53a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d540:	d01d      	beq.n	801d57e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d542:	69bb      	ldr	r3, [r7, #24]
 801d544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d546:	331e      	adds	r3, #30
 801d548:	4a36      	ldr	r2, [pc, #216]	@ (801d624 <dhcp_bind+0x1b0>)
 801d54a:	fba2 2303 	umull	r2, r3, r2, r3
 801d54e:	095b      	lsrs	r3, r3, #5
 801d550:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d558:	d302      	bcc.n	801d560 <dhcp_bind+0xec>
      timeout = 0xffff;
 801d55a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d55e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801d560:	69fb      	ldr	r3, [r7, #28]
 801d562:	b29a      	uxth	r2, r3
 801d564:	69bb      	ldr	r3, [r7, #24]
 801d566:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 801d568:	69bb      	ldr	r3, [r7, #24]
 801d56a:	8b5b      	ldrh	r3, [r3, #26]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d102      	bne.n	801d576 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d570:	69bb      	ldr	r3, [r7, #24]
 801d572:	2201      	movs	r2, #1
 801d574:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d576:	69bb      	ldr	r3, [r7, #24]
 801d578:	8b5a      	ldrh	r2, [r3, #26]
 801d57a:	69bb      	ldr	r3, [r7, #24]
 801d57c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d57e:	69bb      	ldr	r3, [r7, #24]
 801d580:	8b1a      	ldrh	r2, [r3, #24]
 801d582:	69bb      	ldr	r3, [r7, #24]
 801d584:	8b5b      	ldrh	r3, [r3, #26]
 801d586:	429a      	cmp	r2, r3
 801d588:	d306      	bcc.n	801d598 <dhcp_bind+0x124>
 801d58a:	69bb      	ldr	r3, [r7, #24]
 801d58c:	8b5b      	ldrh	r3, [r3, #26]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d002      	beq.n	801d598 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d592:	69bb      	ldr	r3, [r7, #24]
 801d594:	2200      	movs	r2, #0
 801d596:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801d598:	69bb      	ldr	r3, [r7, #24]
 801d59a:	7adb      	ldrb	r3, [r3, #11]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d003      	beq.n	801d5a8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d5a0:	69bb      	ldr	r3, [r7, #24]
 801d5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5a4:	613b      	str	r3, [r7, #16]
 801d5a6:	e014      	b.n	801d5d2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d5a8:	69bb      	ldr	r3, [r7, #24]
 801d5aa:	3328      	adds	r3, #40	@ 0x28
 801d5ac:	781b      	ldrb	r3, [r3, #0]
 801d5ae:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d5b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	db02      	blt.n	801d5be <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d5b8:	23ff      	movs	r3, #255	@ 0xff
 801d5ba:	613b      	str	r3, [r7, #16]
 801d5bc:	e009      	b.n	801d5d2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d5be:	7dfb      	ldrb	r3, [r7, #23]
 801d5c0:	2bbf      	cmp	r3, #191	@ 0xbf
 801d5c2:	d903      	bls.n	801d5cc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d5c4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801d5c8:	613b      	str	r3, [r7, #16]
 801d5ca:	e002      	b.n	801d5d2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d5cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d5d0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d5d2:	69bb      	ldr	r3, [r7, #24]
 801d5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d5d6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d108      	bne.n	801d5f0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d5de:	69bb      	ldr	r3, [r7, #24]
 801d5e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d5e2:	693b      	ldr	r3, [r7, #16]
 801d5e4:	4013      	ands	r3, r2
 801d5e6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d5ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d5f0:	210a      	movs	r1, #10
 801d5f2:	69b8      	ldr	r0, [r7, #24]
 801d5f4:	f000 fa78 	bl	801dae8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d5f8:	69bb      	ldr	r3, [r7, #24]
 801d5fa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801d5fe:	f107 030c 	add.w	r3, r7, #12
 801d602:	f107 0210 	add.w	r2, r7, #16
 801d606:	6878      	ldr	r0, [r7, #4]
 801d608:	f7f8 f8e0 	bl	80157cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d60c:	3720      	adds	r7, #32
 801d60e:	46bd      	mov	sp, r7
 801d610:	bd80      	pop	{r7, pc}
 801d612:	bf00      	nop
 801d614:	0802738c 	.word	0x0802738c
 801d618:	080274cc 	.word	0x080274cc
 801d61c:	080273ec 	.word	0x080273ec
 801d620:	080274e8 	.word	0x080274e8
 801d624:	88888889 	.word	0x88888889

0801d628 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d628:	b580      	push	{r7, lr}
 801d62a:	b088      	sub	sp, #32
 801d62c:	af02      	add	r7, sp, #8
 801d62e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d634:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d636:	2105      	movs	r1, #5
 801d638:	6938      	ldr	r0, [r7, #16]
 801d63a:	f000 fa55 	bl	801dae8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d63e:	2203      	movs	r2, #3
 801d640:	6939      	ldr	r1, [r7, #16]
 801d642:	6878      	ldr	r0, [r7, #4]
 801d644:	f000 fed8 	bl	801e3f8 <dhcp_create_msg>
 801d648:	4603      	mov	r3, r0
 801d64a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d650:	2b00      	cmp	r3, #0
 801d652:	d13b      	bne.n	801d6cc <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d654:	2202      	movs	r2, #2
 801d656:	2139      	movs	r1, #57	@ 0x39
 801d658:	6938      	ldr	r0, [r7, #16]
 801d65a:	f000 fa5f 	bl	801db1c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d662:	4619      	mov	r1, r3
 801d664:	6938      	ldr	r0, [r7, #16]
 801d666:	f000 fabb 	bl	801dbe0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d66a:	2203      	movs	r2, #3
 801d66c:	2137      	movs	r1, #55	@ 0x37
 801d66e:	6938      	ldr	r0, [r7, #16]
 801d670:	f000 fa54 	bl	801db1c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d674:	2300      	movs	r3, #0
 801d676:	75fb      	strb	r3, [r7, #23]
 801d678:	e009      	b.n	801d68e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d67a:	7dfb      	ldrb	r3, [r7, #23]
 801d67c:	4a2a      	ldr	r2, [pc, #168]	@ (801d728 <dhcp_renew+0x100>)
 801d67e:	5cd3      	ldrb	r3, [r2, r3]
 801d680:	4619      	mov	r1, r3
 801d682:	6938      	ldr	r0, [r7, #16]
 801d684:	f000 fa84 	bl	801db90 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d688:	7dfb      	ldrb	r3, [r7, #23]
 801d68a:	3301      	adds	r3, #1
 801d68c:	75fb      	strb	r3, [r7, #23]
 801d68e:	7dfb      	ldrb	r3, [r7, #23]
 801d690:	2b02      	cmp	r3, #2
 801d692:	d9f2      	bls.n	801d67a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 801d694:	6938      	ldr	r0, [r7, #16]
 801d696:	f001 f853 	bl	801e740 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d69a:	693b      	ldr	r3, [r7, #16]
 801d69c:	68da      	ldr	r2, [r3, #12]
 801d69e:	693b      	ldr	r3, [r7, #16]
 801d6a0:	8a9b      	ldrh	r3, [r3, #20]
 801d6a2:	33f0      	adds	r3, #240	@ 0xf0
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	4619      	mov	r1, r3
 801d6a8:	4610      	mov	r0, r2
 801d6aa:	f7f8 fc37 	bl	8015f1c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801d6ae:	4b1f      	ldr	r3, [pc, #124]	@ (801d72c <dhcp_renew+0x104>)
 801d6b0:	6818      	ldr	r0, [r3, #0]
 801d6b2:	693b      	ldr	r3, [r7, #16]
 801d6b4:	68d9      	ldr	r1, [r3, #12]
 801d6b6:	693b      	ldr	r3, [r7, #16]
 801d6b8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	2343      	movs	r3, #67	@ 0x43
 801d6c2:	f7fe ff95 	bl	801c5f0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d6c6:	6938      	ldr	r0, [r7, #16]
 801d6c8:	f000 fff8 	bl	801e6bc <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d6cc:	693b      	ldr	r3, [r7, #16]
 801d6ce:	7a9b      	ldrb	r3, [r3, #10]
 801d6d0:	2bff      	cmp	r3, #255	@ 0xff
 801d6d2:	d005      	beq.n	801d6e0 <dhcp_renew+0xb8>
    dhcp->tries++;
 801d6d4:	693b      	ldr	r3, [r7, #16]
 801d6d6:	7a9b      	ldrb	r3, [r3, #10]
 801d6d8:	3301      	adds	r3, #1
 801d6da:	b2da      	uxtb	r2, r3
 801d6dc:	693b      	ldr	r3, [r7, #16]
 801d6de:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801d6e0:	693b      	ldr	r3, [r7, #16]
 801d6e2:	7a9b      	ldrb	r3, [r3, #10]
 801d6e4:	2b09      	cmp	r3, #9
 801d6e6:	d809      	bhi.n	801d6fc <dhcp_renew+0xd4>
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	7a9b      	ldrb	r3, [r3, #10]
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	0152      	lsls	r2, r2, #5
 801d6f0:	1ad2      	subs	r2, r2, r3
 801d6f2:	0092      	lsls	r2, r2, #2
 801d6f4:	4413      	add	r3, r2
 801d6f6:	011b      	lsls	r3, r3, #4
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	e001      	b.n	801d700 <dhcp_renew+0xd8>
 801d6fc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801d700:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d702:	89bb      	ldrh	r3, [r7, #12]
 801d704:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d708:	4a09      	ldr	r2, [pc, #36]	@ (801d730 <dhcp_renew+0x108>)
 801d70a:	fb82 1203 	smull	r1, r2, r2, r3
 801d70e:	1152      	asrs	r2, r2, #5
 801d710:	17db      	asrs	r3, r3, #31
 801d712:	1ad3      	subs	r3, r2, r3
 801d714:	b29a      	uxth	r2, r3
 801d716:	693b      	ldr	r3, [r7, #16]
 801d718:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d71e:	4618      	mov	r0, r3
 801d720:	3718      	adds	r7, #24
 801d722:	46bd      	mov	sp, r7
 801d724:	bd80      	pop	{r7, pc}
 801d726:	bf00      	nop
 801d728:	20000124 	.word	0x20000124
 801d72c:	2000be04 	.word	0x2000be04
 801d730:	10624dd3 	.word	0x10624dd3

0801d734 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d734:	b580      	push	{r7, lr}
 801d736:	b088      	sub	sp, #32
 801d738:	af02      	add	r7, sp, #8
 801d73a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d740:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d742:	2104      	movs	r1, #4
 801d744:	6938      	ldr	r0, [r7, #16]
 801d746:	f000 f9cf 	bl	801dae8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d74a:	2203      	movs	r2, #3
 801d74c:	6939      	ldr	r1, [r7, #16]
 801d74e:	6878      	ldr	r0, [r7, #4]
 801d750:	f000 fe52 	bl	801e3f8 <dhcp_create_msg>
 801d754:	4603      	mov	r3, r0
 801d756:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d139      	bne.n	801d7d4 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d760:	2202      	movs	r2, #2
 801d762:	2139      	movs	r1, #57	@ 0x39
 801d764:	6938      	ldr	r0, [r7, #16]
 801d766:	f000 f9d9 	bl	801db1c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d76e:	4619      	mov	r1, r3
 801d770:	6938      	ldr	r0, [r7, #16]
 801d772:	f000 fa35 	bl	801dbe0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d776:	2203      	movs	r2, #3
 801d778:	2137      	movs	r1, #55	@ 0x37
 801d77a:	6938      	ldr	r0, [r7, #16]
 801d77c:	f000 f9ce 	bl	801db1c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d780:	2300      	movs	r3, #0
 801d782:	75fb      	strb	r3, [r7, #23]
 801d784:	e009      	b.n	801d79a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d786:	7dfb      	ldrb	r3, [r7, #23]
 801d788:	4a29      	ldr	r2, [pc, #164]	@ (801d830 <dhcp_rebind+0xfc>)
 801d78a:	5cd3      	ldrb	r3, [r2, r3]
 801d78c:	4619      	mov	r1, r3
 801d78e:	6938      	ldr	r0, [r7, #16]
 801d790:	f000 f9fe 	bl	801db90 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d794:	7dfb      	ldrb	r3, [r7, #23]
 801d796:	3301      	adds	r3, #1
 801d798:	75fb      	strb	r3, [r7, #23]
 801d79a:	7dfb      	ldrb	r3, [r7, #23]
 801d79c:	2b02      	cmp	r3, #2
 801d79e:	d9f2      	bls.n	801d786 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801d7a0:	6938      	ldr	r0, [r7, #16]
 801d7a2:	f000 ffcd 	bl	801e740 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d7a6:	693b      	ldr	r3, [r7, #16]
 801d7a8:	68da      	ldr	r2, [r3, #12]
 801d7aa:	693b      	ldr	r3, [r7, #16]
 801d7ac:	8a9b      	ldrh	r3, [r3, #20]
 801d7ae:	33f0      	adds	r3, #240	@ 0xf0
 801d7b0:	b29b      	uxth	r3, r3
 801d7b2:	4619      	mov	r1, r3
 801d7b4:	4610      	mov	r0, r2
 801d7b6:	f7f8 fbb1 	bl	8015f1c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d7ba:	4b1e      	ldr	r3, [pc, #120]	@ (801d834 <dhcp_rebind+0x100>)
 801d7bc:	6818      	ldr	r0, [r3, #0]
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	68d9      	ldr	r1, [r3, #12]
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	9300      	str	r3, [sp, #0]
 801d7c6:	2343      	movs	r3, #67	@ 0x43
 801d7c8:	4a1b      	ldr	r2, [pc, #108]	@ (801d838 <dhcp_rebind+0x104>)
 801d7ca:	f7fe ff11 	bl	801c5f0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d7ce:	6938      	ldr	r0, [r7, #16]
 801d7d0:	f000 ff74 	bl	801e6bc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d7d4:	693b      	ldr	r3, [r7, #16]
 801d7d6:	7a9b      	ldrb	r3, [r3, #10]
 801d7d8:	2bff      	cmp	r3, #255	@ 0xff
 801d7da:	d005      	beq.n	801d7e8 <dhcp_rebind+0xb4>
    dhcp->tries++;
 801d7dc:	693b      	ldr	r3, [r7, #16]
 801d7de:	7a9b      	ldrb	r3, [r3, #10]
 801d7e0:	3301      	adds	r3, #1
 801d7e2:	b2da      	uxtb	r2, r3
 801d7e4:	693b      	ldr	r3, [r7, #16]
 801d7e6:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d7e8:	693b      	ldr	r3, [r7, #16]
 801d7ea:	7a9b      	ldrb	r3, [r3, #10]
 801d7ec:	2b09      	cmp	r3, #9
 801d7ee:	d809      	bhi.n	801d804 <dhcp_rebind+0xd0>
 801d7f0:	693b      	ldr	r3, [r7, #16]
 801d7f2:	7a9b      	ldrb	r3, [r3, #10]
 801d7f4:	461a      	mov	r2, r3
 801d7f6:	0152      	lsls	r2, r2, #5
 801d7f8:	1ad2      	subs	r2, r2, r3
 801d7fa:	0092      	lsls	r2, r2, #2
 801d7fc:	4413      	add	r3, r2
 801d7fe:	00db      	lsls	r3, r3, #3
 801d800:	b29b      	uxth	r3, r3
 801d802:	e001      	b.n	801d808 <dhcp_rebind+0xd4>
 801d804:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d808:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d80a:	89bb      	ldrh	r3, [r7, #12]
 801d80c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d810:	4a0a      	ldr	r2, [pc, #40]	@ (801d83c <dhcp_rebind+0x108>)
 801d812:	fb82 1203 	smull	r1, r2, r2, r3
 801d816:	1152      	asrs	r2, r2, #5
 801d818:	17db      	asrs	r3, r3, #31
 801d81a:	1ad3      	subs	r3, r2, r3
 801d81c:	b29a      	uxth	r2, r3
 801d81e:	693b      	ldr	r3, [r7, #16]
 801d820:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d826:	4618      	mov	r0, r3
 801d828:	3718      	adds	r7, #24
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}
 801d82e:	bf00      	nop
 801d830:	20000124 	.word	0x20000124
 801d834:	2000be04 	.word	0x2000be04
 801d838:	08031660 	.word	0x08031660
 801d83c:	10624dd3 	.word	0x10624dd3

0801d840 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b088      	sub	sp, #32
 801d844:	af02      	add	r7, sp, #8
 801d846:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d84c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d84e:	2103      	movs	r1, #3
 801d850:	6938      	ldr	r0, [r7, #16]
 801d852:	f000 f949 	bl	801dae8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d856:	2203      	movs	r2, #3
 801d858:	6939      	ldr	r1, [r7, #16]
 801d85a:	6878      	ldr	r0, [r7, #4]
 801d85c:	f000 fdcc 	bl	801e3f8 <dhcp_create_msg>
 801d860:	4603      	mov	r3, r0
 801d862:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d147      	bne.n	801d8fc <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d86c:	2202      	movs	r2, #2
 801d86e:	2139      	movs	r1, #57	@ 0x39
 801d870:	6938      	ldr	r0, [r7, #16]
 801d872:	f000 f953 	bl	801db1c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d876:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801d87a:	6938      	ldr	r0, [r7, #16]
 801d87c:	f000 f9b0 	bl	801dbe0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801d880:	2204      	movs	r2, #4
 801d882:	2132      	movs	r1, #50	@ 0x32
 801d884:	6938      	ldr	r0, [r7, #16]
 801d886:	f000 f949 	bl	801db1c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d88a:	693b      	ldr	r3, [r7, #16]
 801d88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d88e:	4618      	mov	r0, r3
 801d890:	f7f7 fa1f 	bl	8014cd2 <lwip_htonl>
 801d894:	4603      	mov	r3, r0
 801d896:	4619      	mov	r1, r3
 801d898:	6938      	ldr	r0, [r7, #16]
 801d89a:	f000 f9db 	bl	801dc54 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d89e:	2203      	movs	r2, #3
 801d8a0:	2137      	movs	r1, #55	@ 0x37
 801d8a2:	6938      	ldr	r0, [r7, #16]
 801d8a4:	f000 f93a 	bl	801db1c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	75fb      	strb	r3, [r7, #23]
 801d8ac:	e009      	b.n	801d8c2 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d8ae:	7dfb      	ldrb	r3, [r7, #23]
 801d8b0:	4a29      	ldr	r2, [pc, #164]	@ (801d958 <dhcp_reboot+0x118>)
 801d8b2:	5cd3      	ldrb	r3, [r2, r3]
 801d8b4:	4619      	mov	r1, r3
 801d8b6:	6938      	ldr	r0, [r7, #16]
 801d8b8:	f000 f96a 	bl	801db90 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d8bc:	7dfb      	ldrb	r3, [r7, #23]
 801d8be:	3301      	adds	r3, #1
 801d8c0:	75fb      	strb	r3, [r7, #23]
 801d8c2:	7dfb      	ldrb	r3, [r7, #23]
 801d8c4:	2b02      	cmp	r3, #2
 801d8c6:	d9f2      	bls.n	801d8ae <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801d8c8:	6938      	ldr	r0, [r7, #16]
 801d8ca:	f000 ff39 	bl	801e740 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d8ce:	693b      	ldr	r3, [r7, #16]
 801d8d0:	68da      	ldr	r2, [r3, #12]
 801d8d2:	693b      	ldr	r3, [r7, #16]
 801d8d4:	8a9b      	ldrh	r3, [r3, #20]
 801d8d6:	33f0      	adds	r3, #240	@ 0xf0
 801d8d8:	b29b      	uxth	r3, r3
 801d8da:	4619      	mov	r1, r3
 801d8dc:	4610      	mov	r0, r2
 801d8de:	f7f8 fb1d 	bl	8015f1c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d8e2:	4b1e      	ldr	r3, [pc, #120]	@ (801d95c <dhcp_reboot+0x11c>)
 801d8e4:	6818      	ldr	r0, [r3, #0]
 801d8e6:	693b      	ldr	r3, [r7, #16]
 801d8e8:	68d9      	ldr	r1, [r3, #12]
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	9300      	str	r3, [sp, #0]
 801d8ee:	2343      	movs	r3, #67	@ 0x43
 801d8f0:	4a1b      	ldr	r2, [pc, #108]	@ (801d960 <dhcp_reboot+0x120>)
 801d8f2:	f7fe fe7d 	bl	801c5f0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d8f6:	6938      	ldr	r0, [r7, #16]
 801d8f8:	f000 fee0 	bl	801e6bc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d8fc:	693b      	ldr	r3, [r7, #16]
 801d8fe:	7a9b      	ldrb	r3, [r3, #10]
 801d900:	2bff      	cmp	r3, #255	@ 0xff
 801d902:	d005      	beq.n	801d910 <dhcp_reboot+0xd0>
    dhcp->tries++;
 801d904:	693b      	ldr	r3, [r7, #16]
 801d906:	7a9b      	ldrb	r3, [r3, #10]
 801d908:	3301      	adds	r3, #1
 801d90a:	b2da      	uxtb	r2, r3
 801d90c:	693b      	ldr	r3, [r7, #16]
 801d90e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d910:	693b      	ldr	r3, [r7, #16]
 801d912:	7a9b      	ldrb	r3, [r3, #10]
 801d914:	2b09      	cmp	r3, #9
 801d916:	d809      	bhi.n	801d92c <dhcp_reboot+0xec>
 801d918:	693b      	ldr	r3, [r7, #16]
 801d91a:	7a9b      	ldrb	r3, [r3, #10]
 801d91c:	461a      	mov	r2, r3
 801d91e:	0152      	lsls	r2, r2, #5
 801d920:	1ad2      	subs	r2, r2, r3
 801d922:	0092      	lsls	r2, r2, #2
 801d924:	4413      	add	r3, r2
 801d926:	00db      	lsls	r3, r3, #3
 801d928:	b29b      	uxth	r3, r3
 801d92a:	e001      	b.n	801d930 <dhcp_reboot+0xf0>
 801d92c:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d930:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d932:	89bb      	ldrh	r3, [r7, #12]
 801d934:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d938:	4a0a      	ldr	r2, [pc, #40]	@ (801d964 <dhcp_reboot+0x124>)
 801d93a:	fb82 1203 	smull	r1, r2, r2, r3
 801d93e:	1152      	asrs	r2, r2, #5
 801d940:	17db      	asrs	r3, r3, #31
 801d942:	1ad3      	subs	r3, r2, r3
 801d944:	b29a      	uxth	r2, r3
 801d946:	693b      	ldr	r3, [r7, #16]
 801d948:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d94e:	4618      	mov	r0, r3
 801d950:	3718      	adds	r7, #24
 801d952:	46bd      	mov	sp, r7
 801d954:	bd80      	pop	{r7, pc}
 801d956:	bf00      	nop
 801d958:	20000124 	.word	0x20000124
 801d95c:	2000be04 	.word	0x2000be04
 801d960:	08031660 	.word	0x08031660
 801d964:	10624dd3 	.word	0x10624dd3

0801d968 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b088      	sub	sp, #32
 801d96c:	af02      	add	r7, sp, #8
 801d96e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d974:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d102      	bne.n	801d982 <dhcp_release+0x1a>
    return ERR_ARG;
 801d97c:	f06f 030f 	mvn.w	r3, #15
 801d980:	e072      	b.n	801da68 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d986:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801d988:	6878      	ldr	r0, [r7, #4]
 801d98a:	f000 ff33 	bl	801e7f4 <dhcp_supplied_address>
 801d98e:	4603      	mov	r3, r0
 801d990:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d992:	2100      	movs	r1, #0
 801d994:	6978      	ldr	r0, [r7, #20]
 801d996:	f000 f8a7 	bl	801dae8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d99a:	697b      	ldr	r3, [r7, #20]
 801d99c:	2200      	movs	r2, #0
 801d99e:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d9a0:	697b      	ldr	r3, [r7, #20]
 801d9a2:	2200      	movs	r2, #0
 801d9a4:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d9a6:	697b      	ldr	r3, [r7, #20]
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d9ac:	697b      	ldr	r3, [r7, #20]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d9b2:	697b      	ldr	r3, [r7, #20]
 801d9b4:	2200      	movs	r2, #0
 801d9b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d9bc:	697b      	ldr	r3, [r7, #20]
 801d9be:	639a      	str	r2, [r3, #56]	@ 0x38
 801d9c0:	697b      	ldr	r3, [r7, #20]
 801d9c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d9c4:	697b      	ldr	r3, [r7, #20]
 801d9c6:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d9c8:	697b      	ldr	r3, [r7, #20]
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	845a      	strh	r2, [r3, #34]	@ 0x22
 801d9ce:	697b      	ldr	r3, [r7, #20]
 801d9d0:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 801d9d2:	697b      	ldr	r3, [r7, #20]
 801d9d4:	841a      	strh	r2, [r3, #32]
 801d9d6:	697b      	ldr	r3, [r7, #20]
 801d9d8:	8c1a      	ldrh	r2, [r3, #32]
 801d9da:	697b      	ldr	r3, [r7, #20]
 801d9dc:	83da      	strh	r2, [r3, #30]
 801d9de:	697b      	ldr	r3, [r7, #20]
 801d9e0:	8bda      	ldrh	r2, [r3, #30]
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801d9e6:	7cfb      	ldrb	r3, [r7, #19]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d101      	bne.n	801d9f0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	e03b      	b.n	801da68 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801d9f0:	2207      	movs	r2, #7
 801d9f2:	6979      	ldr	r1, [r7, #20]
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	f000 fcff 	bl	801e3f8 <dhcp_create_msg>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801d9fe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d128      	bne.n	801da58 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801da06:	2204      	movs	r2, #4
 801da08:	2136      	movs	r1, #54	@ 0x36
 801da0a:	6978      	ldr	r0, [r7, #20]
 801da0c:	f000 f886 	bl	801db1c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	4618      	mov	r0, r3
 801da14:	f7f7 f95d 	bl	8014cd2 <lwip_htonl>
 801da18:	4603      	mov	r3, r0
 801da1a:	4619      	mov	r1, r3
 801da1c:	6978      	ldr	r0, [r7, #20]
 801da1e:	f000 f919 	bl	801dc54 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801da22:	6978      	ldr	r0, [r7, #20]
 801da24:	f000 fe8c 	bl	801e740 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801da28:	697b      	ldr	r3, [r7, #20]
 801da2a:	68da      	ldr	r2, [r3, #12]
 801da2c:	697b      	ldr	r3, [r7, #20]
 801da2e:	8a9b      	ldrh	r3, [r3, #20]
 801da30:	33f0      	adds	r3, #240	@ 0xf0
 801da32:	b29b      	uxth	r3, r3
 801da34:	4619      	mov	r1, r3
 801da36:	4610      	mov	r0, r2
 801da38:	f7f8 fa70 	bl	8015f1c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801da3c:	4b0c      	ldr	r3, [pc, #48]	@ (801da70 <dhcp_release+0x108>)
 801da3e:	6818      	ldr	r0, [r3, #0]
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	68d9      	ldr	r1, [r3, #12]
 801da44:	f107 020c 	add.w	r2, r7, #12
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	9300      	str	r3, [sp, #0]
 801da4c:	2343      	movs	r3, #67	@ 0x43
 801da4e:	f7fe fdcf 	bl	801c5f0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801da52:	6978      	ldr	r0, [r7, #20]
 801da54:	f000 fe32 	bl	801e6bc <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801da58:	4b06      	ldr	r3, [pc, #24]	@ (801da74 <dhcp_release+0x10c>)
 801da5a:	4a06      	ldr	r2, [pc, #24]	@ (801da74 <dhcp_release+0x10c>)
 801da5c:	4905      	ldr	r1, [pc, #20]	@ (801da74 <dhcp_release+0x10c>)
 801da5e:	6878      	ldr	r0, [r7, #4]
 801da60:	f7f7 feb4 	bl	80157cc <netif_set_addr>

  return result;
 801da64:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801da68:	4618      	mov	r0, r3
 801da6a:	3718      	adds	r7, #24
 801da6c:	46bd      	mov	sp, r7
 801da6e:	bd80      	pop	{r7, pc}
 801da70:	2000be04 	.word	0x2000be04
 801da74:	0803165c 	.word	0x0803165c

0801da78 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801da78:	b580      	push	{r7, lr}
 801da7a:	b084      	sub	sp, #16
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d107      	bne.n	801da96 <dhcp_stop+0x1e>
 801da86:	4b14      	ldr	r3, [pc, #80]	@ (801dad8 <dhcp_stop+0x60>)
 801da88:	f240 5242 	movw	r2, #1346	@ 0x542
 801da8c:	4913      	ldr	r1, [pc, #76]	@ (801dadc <dhcp_stop+0x64>)
 801da8e:	4814      	ldr	r0, [pc, #80]	@ (801dae0 <dhcp_stop+0x68>)
 801da90:	f004 fbd6 	bl	8022240 <iprintf>
 801da94:	e01d      	b.n	801dad2 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d017      	beq.n	801dad2 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	685b      	ldr	r3, [r3, #4]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d006      	beq.n	801dab8 <dhcp_stop+0x40>
 801daaa:	4b0b      	ldr	r3, [pc, #44]	@ (801dad8 <dhcp_stop+0x60>)
 801daac:	f240 524f 	movw	r2, #1359	@ 0x54f
 801dab0:	490c      	ldr	r1, [pc, #48]	@ (801dae4 <dhcp_stop+0x6c>)
 801dab2:	480b      	ldr	r0, [pc, #44]	@ (801dae0 <dhcp_stop+0x68>)
 801dab4:	f004 fbc4 	bl	8022240 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801dab8:	2100      	movs	r1, #0
 801daba:	68f8      	ldr	r0, [r7, #12]
 801dabc:	f000 f814 	bl	801dae8 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	7a1b      	ldrb	r3, [r3, #8]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d004      	beq.n	801dad2 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801dac8:	f7ff f828 	bl	801cb1c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	2200      	movs	r2, #0
 801dad0:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801dad2:	3710      	adds	r7, #16
 801dad4:	46bd      	mov	sp, r7
 801dad6:	bd80      	pop	{r7, pc}
 801dad8:	0802738c 	.word	0x0802738c
 801dadc:	08027500 	.word	0x08027500
 801dae0:	080273ec 	.word	0x080273ec
 801dae4:	080274b8 	.word	0x080274b8

0801dae8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801dae8:	b480      	push	{r7}
 801daea:	b083      	sub	sp, #12
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	460b      	mov	r3, r1
 801daf2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	7a5b      	ldrb	r3, [r3, #9]
 801daf8:	78fa      	ldrb	r2, [r7, #3]
 801dafa:	429a      	cmp	r2, r3
 801dafc:	d008      	beq.n	801db10 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	78fa      	ldrb	r2, [r7, #3]
 801db02:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	2200      	movs	r2, #0
 801db08:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	2200      	movs	r2, #0
 801db0e:	82da      	strh	r2, [r3, #22]
  }
}
 801db10:	bf00      	nop
 801db12:	370c      	adds	r7, #12
 801db14:	46bd      	mov	sp, r7
 801db16:	bc80      	pop	{r7}
 801db18:	4770      	bx	lr
	...

0801db1c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b082      	sub	sp, #8
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
 801db24:	460b      	mov	r3, r1
 801db26:	70fb      	strb	r3, [r7, #3]
 801db28:	4613      	mov	r3, r2
 801db2a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	8a9b      	ldrh	r3, [r3, #20]
 801db30:	461a      	mov	r2, r3
 801db32:	78bb      	ldrb	r3, [r7, #2]
 801db34:	4413      	add	r3, r2
 801db36:	3302      	adds	r3, #2
 801db38:	2b44      	cmp	r3, #68	@ 0x44
 801db3a:	d906      	bls.n	801db4a <dhcp_option+0x2e>
 801db3c:	4b11      	ldr	r3, [pc, #68]	@ (801db84 <dhcp_option+0x68>)
 801db3e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801db42:	4911      	ldr	r1, [pc, #68]	@ (801db88 <dhcp_option+0x6c>)
 801db44:	4811      	ldr	r0, [pc, #68]	@ (801db8c <dhcp_option+0x70>)
 801db46:	f004 fb7b 	bl	8022240 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	691a      	ldr	r2, [r3, #16]
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	8a9b      	ldrh	r3, [r3, #20]
 801db52:	1c59      	adds	r1, r3, #1
 801db54:	b288      	uxth	r0, r1
 801db56:	6879      	ldr	r1, [r7, #4]
 801db58:	8288      	strh	r0, [r1, #20]
 801db5a:	4413      	add	r3, r2
 801db5c:	78fa      	ldrb	r2, [r7, #3]
 801db5e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	691a      	ldr	r2, [r3, #16]
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	8a9b      	ldrh	r3, [r3, #20]
 801db6a:	1c59      	adds	r1, r3, #1
 801db6c:	b288      	uxth	r0, r1
 801db6e:	6879      	ldr	r1, [r7, #4]
 801db70:	8288      	strh	r0, [r1, #20]
 801db72:	4413      	add	r3, r2
 801db74:	78ba      	ldrb	r2, [r7, #2]
 801db76:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801db7a:	bf00      	nop
 801db7c:	3708      	adds	r7, #8
 801db7e:	46bd      	mov	sp, r7
 801db80:	bd80      	pop	{r7, pc}
 801db82:	bf00      	nop
 801db84:	0802738c 	.word	0x0802738c
 801db88:	0802751c 	.word	0x0802751c
 801db8c:	080273ec 	.word	0x080273ec

0801db90 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801db90:	b580      	push	{r7, lr}
 801db92:	b082      	sub	sp, #8
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
 801db98:	460b      	mov	r3, r1
 801db9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	8a9b      	ldrh	r3, [r3, #20]
 801dba0:	2b43      	cmp	r3, #67	@ 0x43
 801dba2:	d906      	bls.n	801dbb2 <dhcp_option_byte+0x22>
 801dba4:	4b0b      	ldr	r3, [pc, #44]	@ (801dbd4 <dhcp_option_byte+0x44>)
 801dba6:	f240 527b 	movw	r2, #1403	@ 0x57b
 801dbaa:	490b      	ldr	r1, [pc, #44]	@ (801dbd8 <dhcp_option_byte+0x48>)
 801dbac:	480b      	ldr	r0, [pc, #44]	@ (801dbdc <dhcp_option_byte+0x4c>)
 801dbae:	f004 fb47 	bl	8022240 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	691a      	ldr	r2, [r3, #16]
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	8a9b      	ldrh	r3, [r3, #20]
 801dbba:	1c59      	adds	r1, r3, #1
 801dbbc:	b288      	uxth	r0, r1
 801dbbe:	6879      	ldr	r1, [r7, #4]
 801dbc0:	8288      	strh	r0, [r1, #20]
 801dbc2:	4413      	add	r3, r2
 801dbc4:	78fa      	ldrb	r2, [r7, #3]
 801dbc6:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dbca:	bf00      	nop
 801dbcc:	3708      	adds	r7, #8
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	bd80      	pop	{r7, pc}
 801dbd2:	bf00      	nop
 801dbd4:	0802738c 	.word	0x0802738c
 801dbd8:	08027564 	.word	0x08027564
 801dbdc:	080273ec 	.word	0x080273ec

0801dbe0 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801dbe0:	b590      	push	{r4, r7, lr}
 801dbe2:	b083      	sub	sp, #12
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6078      	str	r0, [r7, #4]
 801dbe8:	460b      	mov	r3, r1
 801dbea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	8a9b      	ldrh	r3, [r3, #20]
 801dbf0:	3302      	adds	r3, #2
 801dbf2:	2b44      	cmp	r3, #68	@ 0x44
 801dbf4:	d906      	bls.n	801dc04 <dhcp_option_short+0x24>
 801dbf6:	4b14      	ldr	r3, [pc, #80]	@ (801dc48 <dhcp_option_short+0x68>)
 801dbf8:	f240 5282 	movw	r2, #1410	@ 0x582
 801dbfc:	4913      	ldr	r1, [pc, #76]	@ (801dc4c <dhcp_option_short+0x6c>)
 801dbfe:	4814      	ldr	r0, [pc, #80]	@ (801dc50 <dhcp_option_short+0x70>)
 801dc00:	f004 fb1e 	bl	8022240 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801dc04:	887b      	ldrh	r3, [r7, #2]
 801dc06:	0a1b      	lsrs	r3, r3, #8
 801dc08:	b298      	uxth	r0, r3
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	691a      	ldr	r2, [r3, #16]
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	8a9b      	ldrh	r3, [r3, #20]
 801dc12:	1c59      	adds	r1, r3, #1
 801dc14:	b28c      	uxth	r4, r1
 801dc16:	6879      	ldr	r1, [r7, #4]
 801dc18:	828c      	strh	r4, [r1, #20]
 801dc1a:	b2c1      	uxtb	r1, r0
 801dc1c:	4413      	add	r3, r2
 801dc1e:	460a      	mov	r2, r1
 801dc20:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	691a      	ldr	r2, [r3, #16]
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	8a9b      	ldrh	r3, [r3, #20]
 801dc2c:	1c59      	adds	r1, r3, #1
 801dc2e:	b288      	uxth	r0, r1
 801dc30:	6879      	ldr	r1, [r7, #4]
 801dc32:	8288      	strh	r0, [r1, #20]
 801dc34:	8879      	ldrh	r1, [r7, #2]
 801dc36:	b2c9      	uxtb	r1, r1
 801dc38:	4413      	add	r3, r2
 801dc3a:	460a      	mov	r2, r1
 801dc3c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dc40:	bf00      	nop
 801dc42:	370c      	adds	r7, #12
 801dc44:	46bd      	mov	sp, r7
 801dc46:	bd90      	pop	{r4, r7, pc}
 801dc48:	0802738c 	.word	0x0802738c
 801dc4c:	080275a0 	.word	0x080275a0
 801dc50:	080273ec 	.word	0x080273ec

0801dc54 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 801dc54:	b590      	push	{r4, r7, lr}
 801dc56:	b083      	sub	sp, #12
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
 801dc5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	8a9b      	ldrh	r3, [r3, #20]
 801dc62:	3304      	adds	r3, #4
 801dc64:	2b44      	cmp	r3, #68	@ 0x44
 801dc66:	d906      	bls.n	801dc76 <dhcp_option_long+0x22>
 801dc68:	4b22      	ldr	r3, [pc, #136]	@ (801dcf4 <dhcp_option_long+0xa0>)
 801dc6a:	f240 528a 	movw	r2, #1418	@ 0x58a
 801dc6e:	4922      	ldr	r1, [pc, #136]	@ (801dcf8 <dhcp_option_long+0xa4>)
 801dc70:	4822      	ldr	r0, [pc, #136]	@ (801dcfc <dhcp_option_long+0xa8>)
 801dc72:	f004 fae5 	bl	8022240 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801dc76:	683b      	ldr	r3, [r7, #0]
 801dc78:	0e18      	lsrs	r0, r3, #24
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	691a      	ldr	r2, [r3, #16]
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	8a9b      	ldrh	r3, [r3, #20]
 801dc82:	1c59      	adds	r1, r3, #1
 801dc84:	b28c      	uxth	r4, r1
 801dc86:	6879      	ldr	r1, [r7, #4]
 801dc88:	828c      	strh	r4, [r1, #20]
 801dc8a:	b2c1      	uxtb	r1, r0
 801dc8c:	4413      	add	r3, r2
 801dc8e:	460a      	mov	r2, r1
 801dc90:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	0c18      	lsrs	r0, r3, #16
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	691a      	ldr	r2, [r3, #16]
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	8a9b      	ldrh	r3, [r3, #20]
 801dca0:	1c59      	adds	r1, r3, #1
 801dca2:	b28c      	uxth	r4, r1
 801dca4:	6879      	ldr	r1, [r7, #4]
 801dca6:	828c      	strh	r4, [r1, #20]
 801dca8:	b2c1      	uxtb	r1, r0
 801dcaa:	4413      	add	r3, r2
 801dcac:	460a      	mov	r2, r1
 801dcae:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801dcb2:	683b      	ldr	r3, [r7, #0]
 801dcb4:	0a18      	lsrs	r0, r3, #8
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	691a      	ldr	r2, [r3, #16]
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	8a9b      	ldrh	r3, [r3, #20]
 801dcbe:	1c59      	adds	r1, r3, #1
 801dcc0:	b28c      	uxth	r4, r1
 801dcc2:	6879      	ldr	r1, [r7, #4]
 801dcc4:	828c      	strh	r4, [r1, #20]
 801dcc6:	b2c1      	uxtb	r1, r0
 801dcc8:	4413      	add	r3, r2
 801dcca:	460a      	mov	r2, r1
 801dccc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	691a      	ldr	r2, [r3, #16]
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	8a9b      	ldrh	r3, [r3, #20]
 801dcd8:	1c59      	adds	r1, r3, #1
 801dcda:	b288      	uxth	r0, r1
 801dcdc:	6879      	ldr	r1, [r7, #4]
 801dcde:	8288      	strh	r0, [r1, #20]
 801dce0:	6839      	ldr	r1, [r7, #0]
 801dce2:	b2c9      	uxtb	r1, r1
 801dce4:	4413      	add	r3, r2
 801dce6:	460a      	mov	r2, r1
 801dce8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dcec:	bf00      	nop
 801dcee:	370c      	adds	r7, #12
 801dcf0:	46bd      	mov	sp, r7
 801dcf2:	bd90      	pop	{r4, r7, pc}
 801dcf4:	0802738c 	.word	0x0802738c
 801dcf8:	080275e4 	.word	0x080275e4
 801dcfc:	080273ec 	.word	0x080273ec

0801dd00 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801dd00:	b580      	push	{r7, lr}
 801dd02:	b08e      	sub	sp, #56	@ 0x38
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]
 801dd08:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	627b      	str	r3, [r7, #36]	@ 0x24
  int parse_sname_as_options = 0;
 801dd0e:	2300      	movs	r3, #0
 801dd10:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801dd12:	2208      	movs	r2, #8
 801dd14:	2100      	movs	r1, #0
 801dd16:	48b3      	ldr	r0, [pc, #716]	@ (801dfe4 <dhcp_parse_reply+0x2e4>)
 801dd18:	f004 fc68 	bl	80225ec <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801dd1c:	683b      	ldr	r3, [r7, #0]
 801dd1e:	895b      	ldrh	r3, [r3, #10]
 801dd20:	2b2b      	cmp	r3, #43	@ 0x2b
 801dd22:	d802      	bhi.n	801dd2a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801dd24:	f06f 0301 	mvn.w	r3, #1
 801dd28:	e26a      	b.n	801e200 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801dd2a:	683b      	ldr	r3, [r7, #0]
 801dd2c:	685a      	ldr	r2, [r3, #4]
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801dd32:	23f0      	movs	r3, #240	@ 0xf0
 801dd34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	891b      	ldrh	r3, [r3, #8]
 801dd3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
again:
  q = p;
 801dd3c:	683b      	ldr	r3, [r7, #0]
 801dd3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801dd40:	e00c      	b.n	801dd5c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd44:	895b      	ldrh	r3, [r3, #10]
 801dd46:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dd48:	1ad3      	subs	r3, r2, r3
 801dd4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max -= q->len;
 801dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd4e:	895b      	ldrh	r3, [r3, #10]
 801dd50:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801dd52:	1ad3      	subs	r3, r2, r3
 801dd54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    q = q->next;
 801dd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d004      	beq.n	801dd6c <dhcp_parse_reply+0x6c>
 801dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd64:	895b      	ldrh	r3, [r3, #10]
 801dd66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dd68:	429a      	cmp	r2, r3
 801dd6a:	d2ea      	bcs.n	801dd42 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801dd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d102      	bne.n	801dd78 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801dd72:	f06f 0301 	mvn.w	r3, #1
 801dd76:	e243      	b.n	801e200 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801dd78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801dd7a:	867b      	strh	r3, [r7, #50]	@ 0x32
  offset_max = options_idx_max;
 801dd7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801dd7e:	863b      	strh	r3, [r7, #48]	@ 0x30
  options = (u8_t*)q->payload;
 801dd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd82:	685b      	ldr	r3, [r3, #4]
 801dd84:	637b      	str	r3, [r7, #52]	@ 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dd86:	e1fb      	b.n	801e180 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801dd88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dd8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dd8c:	4413      	add	r3, r2
 801dd8e:	781b      	ldrb	r3, [r3, #0]
 801dd90:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801dd92:	2300      	movs	r3, #0
 801dd94:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801dd96:	f04f 33ff 	mov.w	r3, #4294967295
 801dd9a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801dd9c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dd9e:	3302      	adds	r3, #2
 801dda0:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801dda2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dda4:	3301      	adds	r3, #1
 801dda6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801dda8:	8952      	ldrh	r2, [r2, #10]
 801ddaa:	4293      	cmp	r3, r2
 801ddac:	da06      	bge.n	801ddbc <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801ddae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801ddb0:	3301      	adds	r3, #1
 801ddb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ddb4:	4413      	add	r3, r2
 801ddb6:	781b      	ldrb	r3, [r3, #0]
 801ddb8:	77fb      	strb	r3, [r7, #31]
 801ddba:	e00a      	b.n	801ddd2 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801ddbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d004      	beq.n	801ddce <dhcp_parse_reply+0xce>
 801ddc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	685b      	ldr	r3, [r3, #4]
 801ddca:	781b      	ldrb	r3, [r3, #0]
 801ddcc:	e000      	b.n	801ddd0 <dhcp_parse_reply+0xd0>
 801ddce:	2300      	movs	r3, #0
 801ddd0:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ddd2:	7ffb      	ldrb	r3, [r7, #31]
 801ddd4:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801ddd6:	7d7b      	ldrb	r3, [r7, #21]
 801ddd8:	2b3b      	cmp	r3, #59	@ 0x3b
 801ddda:	f200 8121 	bhi.w	801e020 <dhcp_parse_reply+0x320>
 801ddde:	a201      	add	r2, pc, #4	@ (adr r2, 801dde4 <dhcp_parse_reply+0xe4>)
 801dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dde4:	0801ded5 	.word	0x0801ded5
 801dde8:	0801dee5 	.word	0x0801dee5
 801ddec:	0801e021 	.word	0x0801e021
 801ddf0:	0801df05 	.word	0x0801df05
 801ddf4:	0801e021 	.word	0x0801e021
 801ddf8:	0801e021 	.word	0x0801e021
 801ddfc:	0801e021 	.word	0x0801e021
 801de00:	0801e021 	.word	0x0801e021
 801de04:	0801e021 	.word	0x0801e021
 801de08:	0801e021 	.word	0x0801e021
 801de0c:	0801e021 	.word	0x0801e021
 801de10:	0801e021 	.word	0x0801e021
 801de14:	0801e021 	.word	0x0801e021
 801de18:	0801e021 	.word	0x0801e021
 801de1c:	0801e021 	.word	0x0801e021
 801de20:	0801e021 	.word	0x0801e021
 801de24:	0801e021 	.word	0x0801e021
 801de28:	0801e021 	.word	0x0801e021
 801de2c:	0801e021 	.word	0x0801e021
 801de30:	0801e021 	.word	0x0801e021
 801de34:	0801e021 	.word	0x0801e021
 801de38:	0801e021 	.word	0x0801e021
 801de3c:	0801e021 	.word	0x0801e021
 801de40:	0801e021 	.word	0x0801e021
 801de44:	0801e021 	.word	0x0801e021
 801de48:	0801e021 	.word	0x0801e021
 801de4c:	0801e021 	.word	0x0801e021
 801de50:	0801e021 	.word	0x0801e021
 801de54:	0801e021 	.word	0x0801e021
 801de58:	0801e021 	.word	0x0801e021
 801de5c:	0801e021 	.word	0x0801e021
 801de60:	0801e021 	.word	0x0801e021
 801de64:	0801e021 	.word	0x0801e021
 801de68:	0801e021 	.word	0x0801e021
 801de6c:	0801e021 	.word	0x0801e021
 801de70:	0801e021 	.word	0x0801e021
 801de74:	0801e021 	.word	0x0801e021
 801de78:	0801e021 	.word	0x0801e021
 801de7c:	0801e021 	.word	0x0801e021
 801de80:	0801e021 	.word	0x0801e021
 801de84:	0801e021 	.word	0x0801e021
 801de88:	0801e021 	.word	0x0801e021
 801de8c:	0801e021 	.word	0x0801e021
 801de90:	0801e021 	.word	0x0801e021
 801de94:	0801e021 	.word	0x0801e021
 801de98:	0801e021 	.word	0x0801e021
 801de9c:	0801e021 	.word	0x0801e021
 801dea0:	0801e021 	.word	0x0801e021
 801dea4:	0801e021 	.word	0x0801e021
 801dea8:	0801e021 	.word	0x0801e021
 801deac:	0801e021 	.word	0x0801e021
 801deb0:	0801df2b 	.word	0x0801df2b
 801deb4:	0801df4b 	.word	0x0801df4b
 801deb8:	0801df85 	.word	0x0801df85
 801debc:	0801dfa5 	.word	0x0801dfa5
 801dec0:	0801e021 	.word	0x0801e021
 801dec4:	0801e021 	.word	0x0801e021
 801dec8:	0801e021 	.word	0x0801e021
 801decc:	0801dfc5 	.word	0x0801dfc5
 801ded0:	0801e001 	.word	0x0801e001
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801ded4:	2300      	movs	r3, #0
 801ded6:	77fb      	strb	r3, [r7, #31]
 801ded8:	7ffb      	ldrb	r3, [r7, #31]
 801deda:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801dedc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dede:	3b01      	subs	r3, #1
 801dee0:	867b      	strh	r3, [r7, #50]	@ 0x32
        break;
 801dee2:	e0a0      	b.n	801e026 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dee4:	7ffb      	ldrb	r3, [r7, #31]
 801dee6:	2b04      	cmp	r3, #4
 801dee8:	d009      	beq.n	801defe <dhcp_parse_reply+0x1fe>
 801deea:	4b3f      	ldr	r3, [pc, #252]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801deec:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 801def0:	493e      	ldr	r1, [pc, #248]	@ (801dfec <dhcp_parse_reply+0x2ec>)
 801def2:	483f      	ldr	r0, [pc, #252]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801def4:	f004 f9a4 	bl	8022240 <iprintf>
 801def8:	f06f 0305 	mvn.w	r3, #5
 801defc:	e180      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801defe:	2306      	movs	r3, #6
 801df00:	61bb      	str	r3, [r7, #24]
        break;
 801df02:	e090      	b.n	801e026 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801df04:	2304      	movs	r3, #4
 801df06:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801df08:	7ffa      	ldrb	r2, [r7, #31]
 801df0a:	7fbb      	ldrb	r3, [r7, #30]
 801df0c:	429a      	cmp	r2, r3
 801df0e:	d209      	bcs.n	801df24 <dhcp_parse_reply+0x224>
 801df10:	4b35      	ldr	r3, [pc, #212]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801df12:	f240 52fb 	movw	r2, #1531	@ 0x5fb
 801df16:	4937      	ldr	r1, [pc, #220]	@ (801dff4 <dhcp_parse_reply+0x2f4>)
 801df18:	4835      	ldr	r0, [pc, #212]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801df1a:	f004 f991 	bl	8022240 <iprintf>
 801df1e:	f06f 0305 	mvn.w	r3, #5
 801df22:	e16d      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801df24:	2307      	movs	r3, #7
 801df26:	61bb      	str	r3, [r7, #24]
        break;
 801df28:	e07d      	b.n	801e026 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801df2a:	7ffb      	ldrb	r3, [r7, #31]
 801df2c:	2b04      	cmp	r3, #4
 801df2e:	d009      	beq.n	801df44 <dhcp_parse_reply+0x244>
 801df30:	4b2d      	ldr	r3, [pc, #180]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801df32:	f240 6209 	movw	r2, #1545	@ 0x609
 801df36:	492d      	ldr	r1, [pc, #180]	@ (801dfec <dhcp_parse_reply+0x2ec>)
 801df38:	482d      	ldr	r0, [pc, #180]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801df3a:	f004 f981 	bl	8022240 <iprintf>
 801df3e:	f06f 0305 	mvn.w	r3, #5
 801df42:	e15d      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801df44:	2303      	movs	r3, #3
 801df46:	61bb      	str	r3, [r7, #24]
        break;
 801df48:	e06d      	b.n	801e026 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801df4a:	7ffb      	ldrb	r3, [r7, #31]
 801df4c:	2b01      	cmp	r3, #1
 801df4e:	d009      	beq.n	801df64 <dhcp_parse_reply+0x264>
 801df50:	4b25      	ldr	r3, [pc, #148]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801df52:	f240 6217 	movw	r2, #1559	@ 0x617
 801df56:	4928      	ldr	r1, [pc, #160]	@ (801dff8 <dhcp_parse_reply+0x2f8>)
 801df58:	4825      	ldr	r0, [pc, #148]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801df5a:	f004 f971 	bl	8022240 <iprintf>
 801df5e:	f06f 0305 	mvn.w	r3, #5
 801df62:	e14d      	b.n	801e200 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801df64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801df66:	2bf0      	cmp	r3, #240	@ 0xf0
 801df68:	d009      	beq.n	801df7e <dhcp_parse_reply+0x27e>
 801df6a:	4b1f      	ldr	r3, [pc, #124]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801df6c:	f240 6219 	movw	r2, #1561	@ 0x619
 801df70:	4922      	ldr	r1, [pc, #136]	@ (801dffc <dhcp_parse_reply+0x2fc>)
 801df72:	481f      	ldr	r0, [pc, #124]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801df74:	f004 f964 	bl	8022240 <iprintf>
 801df78:	f06f 0305 	mvn.w	r3, #5
 801df7c:	e140      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801df7e:	2300      	movs	r3, #0
 801df80:	61bb      	str	r3, [r7, #24]
        break;
 801df82:	e050      	b.n	801e026 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801df84:	7ffb      	ldrb	r3, [r7, #31]
 801df86:	2b01      	cmp	r3, #1
 801df88:	d009      	beq.n	801df9e <dhcp_parse_reply+0x29e>
 801df8a:	4b17      	ldr	r3, [pc, #92]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801df8c:	f240 621d 	movw	r2, #1565	@ 0x61d
 801df90:	4919      	ldr	r1, [pc, #100]	@ (801dff8 <dhcp_parse_reply+0x2f8>)
 801df92:	4817      	ldr	r0, [pc, #92]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801df94:	f004 f954 	bl	8022240 <iprintf>
 801df98:	f06f 0305 	mvn.w	r3, #5
 801df9c:	e130      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801df9e:	2301      	movs	r3, #1
 801dfa0:	61bb      	str	r3, [r7, #24]
        break;
 801dfa2:	e040      	b.n	801e026 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dfa4:	7ffb      	ldrb	r3, [r7, #31]
 801dfa6:	2b04      	cmp	r3, #4
 801dfa8:	d009      	beq.n	801dfbe <dhcp_parse_reply+0x2be>
 801dfaa:	4b0f      	ldr	r3, [pc, #60]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801dfac:	f240 6221 	movw	r2, #1569	@ 0x621
 801dfb0:	490e      	ldr	r1, [pc, #56]	@ (801dfec <dhcp_parse_reply+0x2ec>)
 801dfb2:	480f      	ldr	r0, [pc, #60]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801dfb4:	f004 f944 	bl	8022240 <iprintf>
 801dfb8:	f06f 0305 	mvn.w	r3, #5
 801dfbc:	e120      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801dfbe:	2302      	movs	r3, #2
 801dfc0:	61bb      	str	r3, [r7, #24]
        break;
 801dfc2:	e030      	b.n	801e026 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dfc4:	7ffb      	ldrb	r3, [r7, #31]
 801dfc6:	2b04      	cmp	r3, #4
 801dfc8:	d009      	beq.n	801dfde <dhcp_parse_reply+0x2de>
 801dfca:	4b07      	ldr	r3, [pc, #28]	@ (801dfe8 <dhcp_parse_reply+0x2e8>)
 801dfcc:	f240 6225 	movw	r2, #1573	@ 0x625
 801dfd0:	4906      	ldr	r1, [pc, #24]	@ (801dfec <dhcp_parse_reply+0x2ec>)
 801dfd2:	4807      	ldr	r0, [pc, #28]	@ (801dff0 <dhcp_parse_reply+0x2f0>)
 801dfd4:	f004 f934 	bl	8022240 <iprintf>
 801dfd8:	f06f 0305 	mvn.w	r3, #5
 801dfdc:	e110      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801dfde:	2304      	movs	r3, #4
 801dfe0:	61bb      	str	r3, [r7, #24]
        break;
 801dfe2:	e020      	b.n	801e026 <dhcp_parse_reply+0x326>
 801dfe4:	2000bdfc 	.word	0x2000bdfc
 801dfe8:	0802738c 	.word	0x0802738c
 801dfec:	08027624 	.word	0x08027624
 801dff0:	080273ec 	.word	0x080273ec
 801dff4:	08027630 	.word	0x08027630
 801dff8:	08027644 	.word	0x08027644
 801dffc:	08027650 	.word	0x08027650
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e000:	7ffb      	ldrb	r3, [r7, #31]
 801e002:	2b04      	cmp	r3, #4
 801e004:	d009      	beq.n	801e01a <dhcp_parse_reply+0x31a>
 801e006:	4b80      	ldr	r3, [pc, #512]	@ (801e208 <dhcp_parse_reply+0x508>)
 801e008:	f240 6229 	movw	r2, #1577	@ 0x629
 801e00c:	497f      	ldr	r1, [pc, #508]	@ (801e20c <dhcp_parse_reply+0x50c>)
 801e00e:	4880      	ldr	r0, [pc, #512]	@ (801e210 <dhcp_parse_reply+0x510>)
 801e010:	f004 f916 	bl	8022240 <iprintf>
 801e014:	f06f 0305 	mvn.w	r3, #5
 801e018:	e0f2      	b.n	801e200 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801e01a:	2305      	movs	r3, #5
 801e01c:	61bb      	str	r3, [r7, #24]
        break;
 801e01e:	e002      	b.n	801e026 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 801e020:	2300      	movs	r3, #0
 801e022:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 801e024:	bf00      	nop
    }
    offset += len + 2;
 801e026:	7ffb      	ldrb	r3, [r7, #31]
 801e028:	b29a      	uxth	r2, r3
 801e02a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801e02c:	4413      	add	r3, r2
 801e02e:	b29b      	uxth	r3, r3
 801e030:	3302      	adds	r3, #2
 801e032:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (decode_len > 0) {
 801e034:	7fbb      	ldrb	r3, [r7, #30]
 801e036:	2b00      	cmp	r3, #0
 801e038:	d079      	beq.n	801e12e <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801e03a:	2300      	movs	r3, #0
 801e03c:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801e03e:	69bb      	ldr	r3, [r7, #24]
 801e040:	2b00      	cmp	r3, #0
 801e042:	db02      	blt.n	801e04a <dhcp_parse_reply+0x34a>
 801e044:	69bb      	ldr	r3, [r7, #24]
 801e046:	2b07      	cmp	r3, #7
 801e048:	dd06      	ble.n	801e058 <dhcp_parse_reply+0x358>
 801e04a:	4b6f      	ldr	r3, [pc, #444]	@ (801e208 <dhcp_parse_reply+0x508>)
 801e04c:	f240 6236 	movw	r2, #1590	@ 0x636
 801e050:	4970      	ldr	r1, [pc, #448]	@ (801e214 <dhcp_parse_reply+0x514>)
 801e052:	486f      	ldr	r0, [pc, #444]	@ (801e210 <dhcp_parse_reply+0x510>)
 801e054:	f004 f8f4 	bl	8022240 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801e058:	4a6f      	ldr	r2, [pc, #444]	@ (801e218 <dhcp_parse_reply+0x518>)
 801e05a:	69bb      	ldr	r3, [r7, #24]
 801e05c:	4413      	add	r3, r2
 801e05e:	781b      	ldrb	r3, [r3, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d164      	bne.n	801e12e <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 801e064:	7fbb      	ldrb	r3, [r7, #30]
 801e066:	2b04      	cmp	r3, #4
 801e068:	bf28      	it	cs
 801e06a:	2304      	movcs	r3, #4
 801e06c:	b2db      	uxtb	r3, r3
 801e06e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e070:	8afb      	ldrh	r3, [r7, #22]
 801e072:	8a7a      	ldrh	r2, [r7, #18]
 801e074:	f107 0108 	add.w	r1, r7, #8
 801e078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e07a:	f7f8 fac1 	bl	8016600 <pbuf_copy_partial>
 801e07e:	4603      	mov	r3, r0
 801e080:	461a      	mov	r2, r3
 801e082:	8a7b      	ldrh	r3, [r7, #18]
 801e084:	4293      	cmp	r3, r2
 801e086:	d002      	beq.n	801e08e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801e088:	f06f 0301 	mvn.w	r3, #1
 801e08c:	e0b8      	b.n	801e200 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801e08e:	7fbb      	ldrb	r3, [r7, #30]
 801e090:	2b04      	cmp	r3, #4
 801e092:	d927      	bls.n	801e0e4 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801e094:	7fbb      	ldrb	r3, [r7, #30]
 801e096:	f003 0303 	and.w	r3, r3, #3
 801e09a:	b2db      	uxtb	r3, r3
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d009      	beq.n	801e0b4 <dhcp_parse_reply+0x3b4>
 801e0a0:	4b59      	ldr	r3, [pc, #356]	@ (801e208 <dhcp_parse_reply+0x508>)
 801e0a2:	f240 623e 	movw	r2, #1598	@ 0x63e
 801e0a6:	495d      	ldr	r1, [pc, #372]	@ (801e21c <dhcp_parse_reply+0x51c>)
 801e0a8:	4859      	ldr	r0, [pc, #356]	@ (801e210 <dhcp_parse_reply+0x510>)
 801e0aa:	f004 f8c9 	bl	8022240 <iprintf>
 801e0ae:	f06f 0305 	mvn.w	r3, #5
 801e0b2:	e0a5      	b.n	801e200 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 801e0b4:	4a58      	ldr	r2, [pc, #352]	@ (801e218 <dhcp_parse_reply+0x518>)
 801e0b6:	69bb      	ldr	r3, [r7, #24]
 801e0b8:	4413      	add	r3, r2
 801e0ba:	2201      	movs	r2, #1
 801e0bc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801e0be:	68bb      	ldr	r3, [r7, #8]
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	f7f6 fe06 	bl	8014cd2 <lwip_htonl>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	4955      	ldr	r1, [pc, #340]	@ (801e220 <dhcp_parse_reply+0x520>)
 801e0ca:	69bb      	ldr	r3, [r7, #24]
 801e0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 801e0d0:	7fbb      	ldrb	r3, [r7, #30]
 801e0d2:	3b04      	subs	r3, #4
 801e0d4:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801e0d6:	8afb      	ldrh	r3, [r7, #22]
 801e0d8:	3304      	adds	r3, #4
 801e0da:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801e0dc:	69bb      	ldr	r3, [r7, #24]
 801e0de:	3301      	adds	r3, #1
 801e0e0:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801e0e2:	e7ac      	b.n	801e03e <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 801e0e4:	7fbb      	ldrb	r3, [r7, #30]
 801e0e6:	2b04      	cmp	r3, #4
 801e0e8:	d106      	bne.n	801e0f8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801e0ea:	68bb      	ldr	r3, [r7, #8]
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	f7f6 fdf0 	bl	8014cd2 <lwip_htonl>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	60bb      	str	r3, [r7, #8]
 801e0f6:	e010      	b.n	801e11a <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801e0f8:	7fbb      	ldrb	r3, [r7, #30]
 801e0fa:	2b01      	cmp	r3, #1
 801e0fc:	d009      	beq.n	801e112 <dhcp_parse_reply+0x412>
 801e0fe:	4b42      	ldr	r3, [pc, #264]	@ (801e208 <dhcp_parse_reply+0x508>)
 801e100:	f44f 62c9 	mov.w	r2, #1608	@ 0x648
 801e104:	4947      	ldr	r1, [pc, #284]	@ (801e224 <dhcp_parse_reply+0x524>)
 801e106:	4842      	ldr	r0, [pc, #264]	@ (801e210 <dhcp_parse_reply+0x510>)
 801e108:	f004 f89a 	bl	8022240 <iprintf>
 801e10c:	f06f 0305 	mvn.w	r3, #5
 801e110:	e076      	b.n	801e200 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 801e112:	f107 0308 	add.w	r3, r7, #8
 801e116:	781b      	ldrb	r3, [r3, #0]
 801e118:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801e11a:	4a3f      	ldr	r2, [pc, #252]	@ (801e218 <dhcp_parse_reply+0x518>)
 801e11c:	69bb      	ldr	r3, [r7, #24]
 801e11e:	4413      	add	r3, r2
 801e120:	2201      	movs	r2, #1
 801e122:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 801e124:	68ba      	ldr	r2, [r7, #8]
 801e126:	493e      	ldr	r1, [pc, #248]	@ (801e220 <dhcp_parse_reply+0x520>)
 801e128:	69bb      	ldr	r3, [r7, #24]
 801e12a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e130:	895b      	ldrh	r3, [r3, #10]
 801e132:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e134:	429a      	cmp	r2, r3
 801e136:	d323      	bcc.n	801e180 <dhcp_parse_reply+0x480>
      offset -= q->len;
 801e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e13a:	895b      	ldrh	r3, [r3, #10]
 801e13c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e13e:	1ad3      	subs	r3, r2, r3
 801e140:	867b      	strh	r3, [r7, #50]	@ 0x32
      offset_max -= q->len;
 801e142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e144:	895b      	ldrh	r3, [r3, #10]
 801e146:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801e148:	1ad3      	subs	r3, r2, r3
 801e14a:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((offset < offset_max) && offset_max) {
 801e14c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e14e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e150:	429a      	cmp	r2, r3
 801e152:	d223      	bcs.n	801e19c <dhcp_parse_reply+0x49c>
 801e154:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e156:	2b00      	cmp	r3, #0
 801e158:	d020      	beq.n	801e19c <dhcp_parse_reply+0x49c>
        q = q->next;
 801e15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	62bb      	str	r3, [r7, #40]	@ 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801e160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e162:	2b00      	cmp	r3, #0
 801e164:	d109      	bne.n	801e17a <dhcp_parse_reply+0x47a>
 801e166:	4b28      	ldr	r3, [pc, #160]	@ (801e208 <dhcp_parse_reply+0x508>)
 801e168:	f240 6254 	movw	r2, #1620	@ 0x654
 801e16c:	492e      	ldr	r1, [pc, #184]	@ (801e228 <dhcp_parse_reply+0x528>)
 801e16e:	4828      	ldr	r0, [pc, #160]	@ (801e210 <dhcp_parse_reply+0x510>)
 801e170:	f004 f866 	bl	8022240 <iprintf>
 801e174:	f06f 0305 	mvn.w	r3, #5
 801e178:	e042      	b.n	801e200 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801e17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e17c:	685b      	ldr	r3, [r3, #4]
 801e17e:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e182:	2b00      	cmp	r3, #0
 801e184:	d00a      	beq.n	801e19c <dhcp_parse_reply+0x49c>
 801e186:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e188:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e18a:	429a      	cmp	r2, r3
 801e18c:	d206      	bcs.n	801e19c <dhcp_parse_reply+0x49c>
 801e18e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801e190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e192:	4413      	add	r3, r2
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	2bff      	cmp	r3, #255	@ 0xff
 801e198:	f47f adf6 	bne.w	801dd88 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801e19c:	4b1e      	ldr	r3, [pc, #120]	@ (801e218 <dhcp_parse_reply+0x518>)
 801e19e:	781b      	ldrb	r3, [r3, #0]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d018      	beq.n	801e1d6 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e1a4:	4b1e      	ldr	r3, [pc, #120]	@ (801e220 <dhcp_parse_reply+0x520>)
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e1aa:	4b1b      	ldr	r3, [pc, #108]	@ (801e218 <dhcp_parse_reply+0x518>)
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	2b01      	cmp	r3, #1
 801e1b4:	d102      	bne.n	801e1bc <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 801e1b6:	2301      	movs	r3, #1
 801e1b8:	627b      	str	r3, [r7, #36]	@ 0x24
 801e1ba:	e00c      	b.n	801e1d6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801e1bc:	68fb      	ldr	r3, [r7, #12]
 801e1be:	2b02      	cmp	r3, #2
 801e1c0:	d102      	bne.n	801e1c8 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801e1c2:	2301      	movs	r3, #1
 801e1c4:	623b      	str	r3, [r7, #32]
 801e1c6:	e006      	b.n	801e1d6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	2b03      	cmp	r3, #3
 801e1cc:	d103      	bne.n	801e1d6 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801e1ce:	2301      	movs	r3, #1
 801e1d0:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	627b      	str	r3, [r7, #36]	@ 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 801e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d006      	beq.n	801e1ea <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801e1dc:	2300      	movs	r3, #0
 801e1de:	627b      	str	r3, [r7, #36]	@ 0x24
    options_idx = DHCP_FILE_OFS;
 801e1e0:	236c      	movs	r3, #108	@ 0x6c
 801e1e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801e1e4:	23ec      	movs	r3, #236	@ 0xec
 801e1e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801e1e8:	e5a8      	b.n	801dd3c <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801e1ea:	6a3b      	ldr	r3, [r7, #32]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d006      	beq.n	801e1fe <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 801e1f0:	2300      	movs	r3, #0
 801e1f2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 801e1f4:	232c      	movs	r3, #44	@ 0x2c
 801e1f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801e1f8:	236c      	movs	r3, #108	@ 0x6c
 801e1fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801e1fc:	e59e      	b.n	801dd3c <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801e1fe:	2300      	movs	r3, #0
}
 801e200:	4618      	mov	r0, r3
 801e202:	3738      	adds	r7, #56	@ 0x38
 801e204:	46bd      	mov	sp, r7
 801e206:	bd80      	pop	{r7, pc}
 801e208:	0802738c 	.word	0x0802738c
 801e20c:	08027624 	.word	0x08027624
 801e210:	080273ec 	.word	0x080273ec
 801e214:	08027668 	.word	0x08027668
 801e218:	2000bdfc 	.word	0x2000bdfc
 801e21c:	0802767c 	.word	0x0802767c
 801e220:	2000bddc 	.word	0x2000bddc
 801e224:	08027694 	.word	0x08027694
 801e228:	080276a8 	.word	0x080276a8

0801e22c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b08a      	sub	sp, #40	@ 0x28
 801e230:	af00      	add	r7, sp, #0
 801e232:	60f8      	str	r0, [r7, #12]
 801e234:	60b9      	str	r1, [r7, #8]
 801e236:	607a      	str	r2, [r7, #4]
 801e238:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801e23a:	4b69      	ldr	r3, [pc, #420]	@ (801e3e0 <dhcp_recv+0x1b4>)
 801e23c:	685b      	ldr	r3, [r3, #4]
 801e23e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e240:	6a3b      	ldr	r3, [r7, #32]
 801e242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e244:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	685b      	ldr	r3, [r3, #4]
 801e24a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801e24c:	69fb      	ldr	r3, [r7, #28]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	f000 80a9 	beq.w	801e3a6 <dhcp_recv+0x17a>
 801e254:	69fb      	ldr	r3, [r7, #28]
 801e256:	7a1b      	ldrb	r3, [r3, #8]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	f000 80a4 	beq.w	801e3a6 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801e25e:	69fb      	ldr	r3, [r7, #28]
 801e260:	685b      	ldr	r3, [r3, #4]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d006      	beq.n	801e274 <dhcp_recv+0x48>
 801e266:	4b5f      	ldr	r3, [pc, #380]	@ (801e3e4 <dhcp_recv+0x1b8>)
 801e268:	f44f 62d5 	mov.w	r2, #1704	@ 0x6a8
 801e26c:	495e      	ldr	r1, [pc, #376]	@ (801e3e8 <dhcp_recv+0x1bc>)
 801e26e:	485f      	ldr	r0, [pc, #380]	@ (801e3ec <dhcp_recv+0x1c0>)
 801e270:	f003 ffe6 	bl	8022240 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	895b      	ldrh	r3, [r3, #10]
 801e278:	2b2b      	cmp	r3, #43	@ 0x2b
 801e27a:	f240 8096 	bls.w	801e3aa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801e27e:	69bb      	ldr	r3, [r7, #24]
 801e280:	781b      	ldrb	r3, [r3, #0]
 801e282:	2b02      	cmp	r3, #2
 801e284:	f040 8093 	bne.w	801e3ae <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801e288:	2300      	movs	r3, #0
 801e28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e28e:	e012      	b.n	801e2b6 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e294:	6a3a      	ldr	r2, [r7, #32]
 801e296:	4413      	add	r3, r2
 801e298:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801e29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2a0:	69b9      	ldr	r1, [r7, #24]
 801e2a2:	440b      	add	r3, r1
 801e2a4:	7f1b      	ldrb	r3, [r3, #28]
 801e2a6:	429a      	cmp	r2, r3
 801e2a8:	f040 8083 	bne.w	801e3b2 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801e2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e2b6:	6a3b      	ldr	r3, [r7, #32]
 801e2b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e2bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d207      	bcs.n	801e2d4 <dhcp_recv+0xa8>
 801e2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2c8:	2b05      	cmp	r3, #5
 801e2ca:	d803      	bhi.n	801e2d4 <dhcp_recv+0xa8>
 801e2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2d0:	2b0f      	cmp	r3, #15
 801e2d2:	d9dd      	bls.n	801e290 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801e2d4:	69bb      	ldr	r3, [r7, #24]
 801e2d6:	685b      	ldr	r3, [r3, #4]
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f7f6 fcfa 	bl	8014cd2 <lwip_htonl>
 801e2de:	4602      	mov	r2, r0
 801e2e0:	69fb      	ldr	r3, [r7, #28]
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	429a      	cmp	r2, r3
 801e2e6:	d166      	bne.n	801e3b6 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 801e2e8:	6879      	ldr	r1, [r7, #4]
 801e2ea:	69f8      	ldr	r0, [r7, #28]
 801e2ec:	f7ff fd08 	bl	801dd00 <dhcp_parse_reply>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d161      	bne.n	801e3ba <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801e2f6:	4b3e      	ldr	r3, [pc, #248]	@ (801e3f0 <dhcp_recv+0x1c4>)
 801e2f8:	785b      	ldrb	r3, [r3, #1]
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d05f      	beq.n	801e3be <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e2fe:	4b3d      	ldr	r3, [pc, #244]	@ (801e3f4 <dhcp_recv+0x1c8>)
 801e300:	685b      	ldr	r3, [r3, #4]
 801e302:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801e304:	7dfb      	ldrb	r3, [r7, #23]
 801e306:	2b05      	cmp	r3, #5
 801e308:	d128      	bne.n	801e35c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e30a:	69fb      	ldr	r3, [r7, #28]
 801e30c:	7a5b      	ldrb	r3, [r3, #9]
 801e30e:	2b01      	cmp	r3, #1
 801e310:	d111      	bne.n	801e336 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 801e312:	6a38      	ldr	r0, [r7, #32]
 801e314:	f7fe fe74 	bl	801d000 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e318:	6a3b      	ldr	r3, [r7, #32]
 801e31a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801e31e:	f003 0308 	and.w	r3, r3, #8
 801e322:	2b00      	cmp	r3, #0
 801e324:	d003      	beq.n	801e32e <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801e326:	6a38      	ldr	r0, [r7, #32]
 801e328:	f7fe fc3c 	bl	801cba4 <dhcp_check>
 801e32c:	e04a      	b.n	801e3c4 <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801e32e:	6a38      	ldr	r0, [r7, #32]
 801e330:	f7ff f8a0 	bl	801d474 <dhcp_bind>
 801e334:	e046      	b.n	801e3c4 <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e336:	69fb      	ldr	r3, [r7, #28]
 801e338:	7a5b      	ldrb	r3, [r3, #9]
 801e33a:	2b03      	cmp	r3, #3
 801e33c:	d007      	beq.n	801e34e <dhcp_recv+0x122>
 801e33e:	69fb      	ldr	r3, [r7, #28]
 801e340:	7a5b      	ldrb	r3, [r3, #9]
 801e342:	2b04      	cmp	r3, #4
 801e344:	d003      	beq.n	801e34e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801e346:	69fb      	ldr	r3, [r7, #28]
 801e348:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e34a:	2b05      	cmp	r3, #5
 801e34c:	d13a      	bne.n	801e3c4 <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801e34e:	6a38      	ldr	r0, [r7, #32]
 801e350:	f7fe fe56 	bl	801d000 <dhcp_handle_ack>
      dhcp_bind(netif);
 801e354:	6a38      	ldr	r0, [r7, #32]
 801e356:	f7ff f88d 	bl	801d474 <dhcp_bind>
 801e35a:	e033      	b.n	801e3c4 <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801e35c:	7dfb      	ldrb	r3, [r7, #23]
 801e35e:	2b06      	cmp	r3, #6
 801e360:	d113      	bne.n	801e38a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e362:	69fb      	ldr	r3, [r7, #28]
 801e364:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 801e366:	2b03      	cmp	r3, #3
 801e368:	d00b      	beq.n	801e382 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e36a:	69fb      	ldr	r3, [r7, #28]
 801e36c:	7a5b      	ldrb	r3, [r3, #9]
 801e36e:	2b01      	cmp	r3, #1
 801e370:	d007      	beq.n	801e382 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e372:	69fb      	ldr	r3, [r7, #28]
 801e374:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e376:	2b04      	cmp	r3, #4
 801e378:	d003      	beq.n	801e382 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e37a:	69fb      	ldr	r3, [r7, #28]
 801e37c:	7a5b      	ldrb	r3, [r3, #9]
 801e37e:	2b05      	cmp	r3, #5
 801e380:	d103      	bne.n	801e38a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801e382:	6a38      	ldr	r0, [r7, #32]
 801e384:	f7fe fbf4 	bl	801cb70 <dhcp_handle_nak>
 801e388:	e01c      	b.n	801e3c4 <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801e38a:	7dfb      	ldrb	r3, [r7, #23]
 801e38c:	2b02      	cmp	r3, #2
 801e38e:	d118      	bne.n	801e3c2 <dhcp_recv+0x196>
 801e390:	69fb      	ldr	r3, [r7, #28]
 801e392:	7a5b      	ldrb	r3, [r3, #9]
 801e394:	2b06      	cmp	r3, #6
 801e396:	d114      	bne.n	801e3c2 <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 801e398:	69fb      	ldr	r3, [r7, #28]
 801e39a:	2200      	movs	r2, #0
 801e39c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801e39e:	6a38      	ldr	r0, [r7, #32]
 801e3a0:	f7fe fc34 	bl	801cc0c <dhcp_handle_offer>
 801e3a4:	e00e      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3a6:	bf00      	nop
 801e3a8:	e00c      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3aa:	bf00      	nop
 801e3ac:	e00a      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3ae:	bf00      	nop
 801e3b0:	e008      	b.n	801e3c4 <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 801e3b2:	bf00      	nop
 801e3b4:	e006      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3b6:	bf00      	nop
 801e3b8:	e004      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3ba:	bf00      	nop
 801e3bc:	e002      	b.n	801e3c4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3be:	bf00      	nop
 801e3c0:	e000      	b.n	801e3c4 <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 801e3c2:	bf00      	nop
  if (dhcp != NULL) {
 801e3c4:	69fb      	ldr	r3, [r7, #28]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d002      	beq.n	801e3d0 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 801e3ca:	69fb      	ldr	r3, [r7, #28]
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801e3d0:	6878      	ldr	r0, [r7, #4]
 801e3d2:	f7f7 ff17 	bl	8016204 <pbuf_free>
}
 801e3d6:	bf00      	nop
 801e3d8:	3728      	adds	r7, #40	@ 0x28
 801e3da:	46bd      	mov	sp, r7
 801e3dc:	bd80      	pop	{r7, pc}
 801e3de:	bf00      	nop
 801e3e0:	200085fc 	.word	0x200085fc
 801e3e4:	0802738c 	.word	0x0802738c
 801e3e8:	080274b8 	.word	0x080274b8
 801e3ec:	080273ec 	.word	0x080273ec
 801e3f0:	2000bdfc 	.word	0x2000bdfc
 801e3f4:	2000bddc 	.word	0x2000bddc

0801e3f8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801e3f8:	b590      	push	{r4, r7, lr}
 801e3fa:	b087      	sub	sp, #28
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	60f8      	str	r0, [r7, #12]
 801e400:	60b9      	str	r1, [r7, #8]
 801e402:	4613      	mov	r3, r2
 801e404:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d109      	bne.n	801e420 <dhcp_create_msg+0x28>
 801e40c:	4ba3      	ldr	r3, [pc, #652]	@ (801e69c <dhcp_create_msg+0x2a4>)
 801e40e:	f240 721d 	movw	r2, #1821	@ 0x71d
 801e412:	49a3      	ldr	r1, [pc, #652]	@ (801e6a0 <dhcp_create_msg+0x2a8>)
 801e414:	48a3      	ldr	r0, [pc, #652]	@ (801e6a4 <dhcp_create_msg+0x2ac>)
 801e416:	f003 ff13 	bl	8022240 <iprintf>
 801e41a:	f06f 030f 	mvn.w	r3, #15
 801e41e:	e138      	b.n	801e692 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801e420:	68bb      	ldr	r3, [r7, #8]
 801e422:	2b00      	cmp	r3, #0
 801e424:	d109      	bne.n	801e43a <dhcp_create_msg+0x42>
 801e426:	4b9d      	ldr	r3, [pc, #628]	@ (801e69c <dhcp_create_msg+0x2a4>)
 801e428:	f240 721e 	movw	r2, #1822	@ 0x71e
 801e42c:	499e      	ldr	r1, [pc, #632]	@ (801e6a8 <dhcp_create_msg+0x2b0>)
 801e42e:	489d      	ldr	r0, [pc, #628]	@ (801e6a4 <dhcp_create_msg+0x2ac>)
 801e430:	f003 ff06 	bl	8022240 <iprintf>
 801e434:	f06f 0305 	mvn.w	r3, #5
 801e438:	e12b      	b.n	801e692 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801e43a:	68bb      	ldr	r3, [r7, #8]
 801e43c:	68db      	ldr	r3, [r3, #12]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d006      	beq.n	801e450 <dhcp_create_msg+0x58>
 801e442:	4b96      	ldr	r3, [pc, #600]	@ (801e69c <dhcp_create_msg+0x2a4>)
 801e444:	f240 721f 	movw	r2, #1823	@ 0x71f
 801e448:	4998      	ldr	r1, [pc, #608]	@ (801e6ac <dhcp_create_msg+0x2b4>)
 801e44a:	4896      	ldr	r0, [pc, #600]	@ (801e6a4 <dhcp_create_msg+0x2ac>)
 801e44c:	f003 fef8 	bl	8022240 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801e450:	68bb      	ldr	r3, [r7, #8]
 801e452:	691b      	ldr	r3, [r3, #16]
 801e454:	2b00      	cmp	r3, #0
 801e456:	d006      	beq.n	801e466 <dhcp_create_msg+0x6e>
 801e458:	4b90      	ldr	r3, [pc, #576]	@ (801e69c <dhcp_create_msg+0x2a4>)
 801e45a:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 801e45e:	4994      	ldr	r1, [pc, #592]	@ (801e6b0 <dhcp_create_msg+0x2b8>)
 801e460:	4890      	ldr	r0, [pc, #576]	@ (801e6a4 <dhcp_create_msg+0x2ac>)
 801e462:	f003 feed 	bl	8022240 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e466:	2200      	movs	r2, #0
 801e468:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801e46c:	2000      	movs	r0, #0
 801e46e:	f7f7 fb51 	bl	8015b14 <pbuf_alloc>
 801e472:	4602      	mov	r2, r0
 801e474:	68bb      	ldr	r3, [r7, #8]
 801e476:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 801e478:	68bb      	ldr	r3, [r7, #8]
 801e47a:	68db      	ldr	r3, [r3, #12]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d102      	bne.n	801e486 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801e480:	f04f 33ff 	mov.w	r3, #4294967295
 801e484:	e105      	b.n	801e692 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e486:	68bb      	ldr	r3, [r7, #8]
 801e488:	68db      	ldr	r3, [r3, #12]
 801e48a:	895b      	ldrh	r3, [r3, #10]
 801e48c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801e490:	d206      	bcs.n	801e4a0 <dhcp_create_msg+0xa8>
 801e492:	4b82      	ldr	r3, [pc, #520]	@ (801e69c <dhcp_create_msg+0x2a4>)
 801e494:	f240 7227 	movw	r2, #1831	@ 0x727
 801e498:	4986      	ldr	r1, [pc, #536]	@ (801e6b4 <dhcp_create_msg+0x2bc>)
 801e49a:	4882      	ldr	r0, [pc, #520]	@ (801e6a4 <dhcp_create_msg+0x2ac>)
 801e49c:	f003 fed0 	bl	8022240 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e4a0:	79fb      	ldrb	r3, [r7, #7]
 801e4a2:	2b03      	cmp	r3, #3
 801e4a4:	d103      	bne.n	801e4ae <dhcp_create_msg+0xb6>
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	7a5b      	ldrb	r3, [r3, #9]
 801e4aa:	2b03      	cmp	r3, #3
 801e4ac:	d10d      	bne.n	801e4ca <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e4ae:	68bb      	ldr	r3, [r7, #8]
 801e4b0:	7a9b      	ldrb	r3, [r3, #10]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d105      	bne.n	801e4c2 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801e4b6:	f003 f8d9 	bl	802166c <rand>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	461a      	mov	r2, r3
 801e4be:	4b7e      	ldr	r3, [pc, #504]	@ (801e6b8 <dhcp_create_msg+0x2c0>)
 801e4c0:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801e4c2:	4b7d      	ldr	r3, [pc, #500]	@ (801e6b8 <dhcp_create_msg+0x2c0>)
 801e4c4:	681a      	ldr	r2, [r3, #0]
 801e4c6:	68bb      	ldr	r3, [r7, #8]
 801e4c8:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	68db      	ldr	r3, [r3, #12]
 801e4ce:	685a      	ldr	r2, [r3, #4]
 801e4d0:	68bb      	ldr	r3, [r7, #8]
 801e4d2:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801e4d4:	68bb      	ldr	r3, [r7, #8]
 801e4d6:	691b      	ldr	r3, [r3, #16]
 801e4d8:	2201      	movs	r2, #1
 801e4da:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	691b      	ldr	r3, [r3, #16]
 801e4e0:	2201      	movs	r2, #1
 801e4e2:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801e4e4:	68bb      	ldr	r3, [r7, #8]
 801e4e6:	691b      	ldr	r3, [r3, #16]
 801e4e8:	68fa      	ldr	r2, [r7, #12]
 801e4ea:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 801e4ee:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801e4f0:	68bb      	ldr	r3, [r7, #8]
 801e4f2:	691b      	ldr	r3, [r3, #16]
 801e4f4:	2200      	movs	r2, #0
 801e4f6:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801e4f8:	68bb      	ldr	r3, [r7, #8]
 801e4fa:	681a      	ldr	r2, [r3, #0]
 801e4fc:	68bb      	ldr	r3, [r7, #8]
 801e4fe:	691c      	ldr	r4, [r3, #16]
 801e500:	4610      	mov	r0, r2
 801e502:	f7f6 fbe6 	bl	8014cd2 <lwip_htonl>
 801e506:	4603      	mov	r3, r0
 801e508:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801e50a:	68bb      	ldr	r3, [r7, #8]
 801e50c:	691b      	ldr	r3, [r3, #16]
 801e50e:	2200      	movs	r2, #0
 801e510:	721a      	strb	r2, [r3, #8]
 801e512:	2200      	movs	r2, #0
 801e514:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801e516:	68bb      	ldr	r3, [r7, #8]
 801e518:	691b      	ldr	r3, [r3, #16]
 801e51a:	2200      	movs	r2, #0
 801e51c:	729a      	strb	r2, [r3, #10]
 801e51e:	2200      	movs	r2, #0
 801e520:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801e522:	68bb      	ldr	r3, [r7, #8]
 801e524:	691b      	ldr	r3, [r3, #16]
 801e526:	2200      	movs	r2, #0
 801e528:	731a      	strb	r2, [r3, #12]
 801e52a:	2200      	movs	r2, #0
 801e52c:	735a      	strb	r2, [r3, #13]
 801e52e:	2200      	movs	r2, #0
 801e530:	739a      	strb	r2, [r3, #14]
 801e532:	2200      	movs	r2, #0
 801e534:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e536:	79fb      	ldrb	r3, [r7, #7]
 801e538:	2b08      	cmp	r3, #8
 801e53a:	d010      	beq.n	801e55e <dhcp_create_msg+0x166>
 801e53c:	79fb      	ldrb	r3, [r7, #7]
 801e53e:	2b04      	cmp	r3, #4
 801e540:	d00d      	beq.n	801e55e <dhcp_create_msg+0x166>
 801e542:	79fb      	ldrb	r3, [r7, #7]
 801e544:	2b07      	cmp	r3, #7
 801e546:	d00a      	beq.n	801e55e <dhcp_create_msg+0x166>
 801e548:	79fb      	ldrb	r3, [r7, #7]
 801e54a:	2b03      	cmp	r3, #3
 801e54c:	d10d      	bne.n	801e56a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801e54e:	68bb      	ldr	r3, [r7, #8]
 801e550:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e552:	2b05      	cmp	r3, #5
 801e554:	d003      	beq.n	801e55e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801e556:	68bb      	ldr	r3, [r7, #8]
 801e558:	7a5b      	ldrb	r3, [r3, #9]
 801e55a:	2b04      	cmp	r3, #4
 801e55c:	d105      	bne.n	801e56a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	1d1a      	adds	r2, r3, #4
 801e562:	68bb      	ldr	r3, [r7, #8]
 801e564:	691b      	ldr	r3, [r3, #16]
 801e566:	6812      	ldr	r2, [r2, #0]
 801e568:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801e56a:	68bb      	ldr	r3, [r7, #8]
 801e56c:	691b      	ldr	r3, [r3, #16]
 801e56e:	2200      	movs	r2, #0
 801e570:	741a      	strb	r2, [r3, #16]
 801e572:	2200      	movs	r2, #0
 801e574:	745a      	strb	r2, [r3, #17]
 801e576:	2200      	movs	r2, #0
 801e578:	749a      	strb	r2, [r3, #18]
 801e57a:	2200      	movs	r2, #0
 801e57c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801e57e:	68bb      	ldr	r3, [r7, #8]
 801e580:	691b      	ldr	r3, [r3, #16]
 801e582:	2200      	movs	r2, #0
 801e584:	751a      	strb	r2, [r3, #20]
 801e586:	2200      	movs	r2, #0
 801e588:	755a      	strb	r2, [r3, #21]
 801e58a:	2200      	movs	r2, #0
 801e58c:	759a      	strb	r2, [r3, #22]
 801e58e:	2200      	movs	r2, #0
 801e590:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801e592:	68bb      	ldr	r3, [r7, #8]
 801e594:	691b      	ldr	r3, [r3, #16]
 801e596:	2200      	movs	r2, #0
 801e598:	761a      	strb	r2, [r3, #24]
 801e59a:	2200      	movs	r2, #0
 801e59c:	765a      	strb	r2, [r3, #25]
 801e59e:	2200      	movs	r2, #0
 801e5a0:	769a      	strb	r2, [r3, #26]
 801e5a2:	2200      	movs	r2, #0
 801e5a4:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	82fb      	strh	r3, [r7, #22]
 801e5aa:	e019      	b.n	801e5e0 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e5b2:	461a      	mov	r2, r3
 801e5b4:	8afb      	ldrh	r3, [r7, #22]
 801e5b6:	4293      	cmp	r3, r2
 801e5b8:	d208      	bcs.n	801e5cc <dhcp_create_msg+0x1d4>
 801e5ba:	8afb      	ldrh	r3, [r7, #22]
 801e5bc:	2b05      	cmp	r3, #5
 801e5be:	d805      	bhi.n	801e5cc <dhcp_create_msg+0x1d4>
 801e5c0:	8afb      	ldrh	r3, [r7, #22]
 801e5c2:	68fa      	ldr	r2, [r7, #12]
 801e5c4:	4413      	add	r3, r2
 801e5c6:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 801e5ca:	e000      	b.n	801e5ce <dhcp_create_msg+0x1d6>
 801e5cc:	2100      	movs	r1, #0
 801e5ce:	68bb      	ldr	r3, [r7, #8]
 801e5d0:	691a      	ldr	r2, [r3, #16]
 801e5d2:	8afb      	ldrh	r3, [r7, #22]
 801e5d4:	4413      	add	r3, r2
 801e5d6:	460a      	mov	r2, r1
 801e5d8:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801e5da:	8afb      	ldrh	r3, [r7, #22]
 801e5dc:	3301      	adds	r3, #1
 801e5de:	82fb      	strh	r3, [r7, #22]
 801e5e0:	8afb      	ldrh	r3, [r7, #22]
 801e5e2:	2b0f      	cmp	r3, #15
 801e5e4:	d9e2      	bls.n	801e5ac <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	82fb      	strh	r3, [r7, #22]
 801e5ea:	e009      	b.n	801e600 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801e5ec:	68bb      	ldr	r3, [r7, #8]
 801e5ee:	691a      	ldr	r2, [r3, #16]
 801e5f0:	8afb      	ldrh	r3, [r7, #22]
 801e5f2:	4413      	add	r3, r2
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e5fa:	8afb      	ldrh	r3, [r7, #22]
 801e5fc:	3301      	adds	r3, #1
 801e5fe:	82fb      	strh	r3, [r7, #22]
 801e600:	8afb      	ldrh	r3, [r7, #22]
 801e602:	2b3f      	cmp	r3, #63	@ 0x3f
 801e604:	d9f2      	bls.n	801e5ec <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e606:	2300      	movs	r3, #0
 801e608:	82fb      	strh	r3, [r7, #22]
 801e60a:	e009      	b.n	801e620 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801e60c:	68bb      	ldr	r3, [r7, #8]
 801e60e:	691a      	ldr	r2, [r3, #16]
 801e610:	8afb      	ldrh	r3, [r7, #22]
 801e612:	4413      	add	r3, r2
 801e614:	2200      	movs	r2, #0
 801e616:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e61a:	8afb      	ldrh	r3, [r7, #22]
 801e61c:	3301      	adds	r3, #1
 801e61e:	82fb      	strh	r3, [r7, #22]
 801e620:	8afb      	ldrh	r3, [r7, #22]
 801e622:	2b7f      	cmp	r3, #127	@ 0x7f
 801e624:	d9f2      	bls.n	801e60c <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e626:	68bb      	ldr	r3, [r7, #8]
 801e628:	691b      	ldr	r3, [r3, #16]
 801e62a:	2200      	movs	r2, #0
 801e62c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e630:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801e634:	2200      	movs	r2, #0
 801e636:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801e63a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801e63e:	2200      	movs	r2, #0
 801e640:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801e644:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801e648:	2200      	movs	r2, #0
 801e64a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e64e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 801e652:	68bb      	ldr	r3, [r7, #8]
 801e654:	2200      	movs	r2, #0
 801e656:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e658:	2300      	movs	r3, #0
 801e65a:	82fb      	strh	r3, [r7, #22]
 801e65c:	e00b      	b.n	801e676 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801e65e:	68bb      	ldr	r3, [r7, #8]
 801e660:	691a      	ldr	r2, [r3, #16]
 801e662:	8afb      	ldrh	r3, [r7, #22]
 801e664:	8af9      	ldrh	r1, [r7, #22]
 801e666:	b2c9      	uxtb	r1, r1
 801e668:	4413      	add	r3, r2
 801e66a:	460a      	mov	r2, r1
 801e66c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e670:	8afb      	ldrh	r3, [r7, #22]
 801e672:	3301      	adds	r3, #1
 801e674:	82fb      	strh	r3, [r7, #22]
 801e676:	8afb      	ldrh	r3, [r7, #22]
 801e678:	2b43      	cmp	r3, #67	@ 0x43
 801e67a:	d9f0      	bls.n	801e65e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e67c:	2201      	movs	r2, #1
 801e67e:	2135      	movs	r1, #53	@ 0x35
 801e680:	68b8      	ldr	r0, [r7, #8]
 801e682:	f7ff fa4b 	bl	801db1c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801e686:	79fb      	ldrb	r3, [r7, #7]
 801e688:	4619      	mov	r1, r3
 801e68a:	68b8      	ldr	r0, [r7, #8]
 801e68c:	f7ff fa80 	bl	801db90 <dhcp_option_byte>
  return ERR_OK;
 801e690:	2300      	movs	r3, #0
}
 801e692:	4618      	mov	r0, r3
 801e694:	371c      	adds	r7, #28
 801e696:	46bd      	mov	sp, r7
 801e698:	bd90      	pop	{r4, r7, pc}
 801e69a:	bf00      	nop
 801e69c:	0802738c 	.word	0x0802738c
 801e6a0:	080276bc 	.word	0x080276bc
 801e6a4:	080273ec 	.word	0x080273ec
 801e6a8:	080276dc 	.word	0x080276dc
 801e6ac:	080276fc 	.word	0x080276fc
 801e6b0:	08027724 	.word	0x08027724
 801e6b4:	0802774c 	.word	0x0802774c
 801e6b8:	2000be0c 	.word	0x2000be0c

0801e6bc <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b082      	sub	sp, #8
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d107      	bne.n	801e6da <dhcp_delete_msg+0x1e>
 801e6ca:	4b18      	ldr	r3, [pc, #96]	@ (801e72c <dhcp_delete_msg+0x70>)
 801e6cc:	f240 726d 	movw	r2, #1901	@ 0x76d
 801e6d0:	4917      	ldr	r1, [pc, #92]	@ (801e730 <dhcp_delete_msg+0x74>)
 801e6d2:	4818      	ldr	r0, [pc, #96]	@ (801e734 <dhcp_delete_msg+0x78>)
 801e6d4:	f003 fdb4 	bl	8022240 <iprintf>
 801e6d8:	e024      	b.n	801e724 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	68db      	ldr	r3, [r3, #12]
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d106      	bne.n	801e6f0 <dhcp_delete_msg+0x34>
 801e6e2:	4b12      	ldr	r3, [pc, #72]	@ (801e72c <dhcp_delete_msg+0x70>)
 801e6e4:	f240 726e 	movw	r2, #1902	@ 0x76e
 801e6e8:	4913      	ldr	r1, [pc, #76]	@ (801e738 <dhcp_delete_msg+0x7c>)
 801e6ea:	4812      	ldr	r0, [pc, #72]	@ (801e734 <dhcp_delete_msg+0x78>)
 801e6ec:	f003 fda8 	bl	8022240 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	691b      	ldr	r3, [r3, #16]
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d106      	bne.n	801e706 <dhcp_delete_msg+0x4a>
 801e6f8:	4b0c      	ldr	r3, [pc, #48]	@ (801e72c <dhcp_delete_msg+0x70>)
 801e6fa:	f240 726f 	movw	r2, #1903	@ 0x76f
 801e6fe:	490f      	ldr	r1, [pc, #60]	@ (801e73c <dhcp_delete_msg+0x80>)
 801e700:	480c      	ldr	r0, [pc, #48]	@ (801e734 <dhcp_delete_msg+0x78>)
 801e702:	f003 fd9d 	bl	8022240 <iprintf>
  if (dhcp->p_out != NULL) {
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	68db      	ldr	r3, [r3, #12]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d004      	beq.n	801e718 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	68db      	ldr	r3, [r3, #12]
 801e712:	4618      	mov	r0, r3
 801e714:	f7f7 fd76 	bl	8016204 <pbuf_free>
  }
  dhcp->p_out = NULL;
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	2200      	movs	r2, #0
 801e71c:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	2200      	movs	r2, #0
 801e722:	611a      	str	r2, [r3, #16]
}
 801e724:	3708      	adds	r7, #8
 801e726:	46bd      	mov	sp, r7
 801e728:	bd80      	pop	{r7, pc}
 801e72a:	bf00      	nop
 801e72c:	0802738c 	.word	0x0802738c
 801e730:	0802778c 	.word	0x0802778c
 801e734:	080273ec 	.word	0x080273ec
 801e738:	080277ac 	.word	0x080277ac
 801e73c:	080277d4 	.word	0x080277d4

0801e740 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801e740:	b580      	push	{r7, lr}
 801e742:	b082      	sub	sp, #8
 801e744:	af00      	add	r7, sp, #0
 801e746:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d107      	bne.n	801e75e <dhcp_option_trailer+0x1e>
 801e74e:	4b24      	ldr	r3, [pc, #144]	@ (801e7e0 <dhcp_option_trailer+0xa0>)
 801e750:	f240 7282 	movw	r2, #1922	@ 0x782
 801e754:	4923      	ldr	r1, [pc, #140]	@ (801e7e4 <dhcp_option_trailer+0xa4>)
 801e756:	4824      	ldr	r0, [pc, #144]	@ (801e7e8 <dhcp_option_trailer+0xa8>)
 801e758:	f003 fd72 	bl	8022240 <iprintf>
 801e75c:	e03c      	b.n	801e7d8 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	691b      	ldr	r3, [r3, #16]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d106      	bne.n	801e774 <dhcp_option_trailer+0x34>
 801e766:	4b1e      	ldr	r3, [pc, #120]	@ (801e7e0 <dhcp_option_trailer+0xa0>)
 801e768:	f240 7283 	movw	r2, #1923	@ 0x783
 801e76c:	491f      	ldr	r1, [pc, #124]	@ (801e7ec <dhcp_option_trailer+0xac>)
 801e76e:	481e      	ldr	r0, [pc, #120]	@ (801e7e8 <dhcp_option_trailer+0xa8>)
 801e770:	f003 fd66 	bl	8022240 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	8a9b      	ldrh	r3, [r3, #20]
 801e778:	2b43      	cmp	r3, #67	@ 0x43
 801e77a:	d906      	bls.n	801e78a <dhcp_option_trailer+0x4a>
 801e77c:	4b18      	ldr	r3, [pc, #96]	@ (801e7e0 <dhcp_option_trailer+0xa0>)
 801e77e:	f240 7284 	movw	r2, #1924	@ 0x784
 801e782:	491b      	ldr	r1, [pc, #108]	@ (801e7f0 <dhcp_option_trailer+0xb0>)
 801e784:	4818      	ldr	r0, [pc, #96]	@ (801e7e8 <dhcp_option_trailer+0xa8>)
 801e786:	f003 fd5b 	bl	8022240 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	691a      	ldr	r2, [r3, #16]
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	8a9b      	ldrh	r3, [r3, #20]
 801e792:	1c59      	adds	r1, r3, #1
 801e794:	b288      	uxth	r0, r1
 801e796:	6879      	ldr	r1, [r7, #4]
 801e798:	8288      	strh	r0, [r1, #20]
 801e79a:	4413      	add	r3, r2
 801e79c:	22ff      	movs	r2, #255	@ 0xff
 801e79e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7a2:	e00b      	b.n	801e7bc <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	691a      	ldr	r2, [r3, #16]
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	8a9b      	ldrh	r3, [r3, #20]
 801e7ac:	1c59      	adds	r1, r3, #1
 801e7ae:	b288      	uxth	r0, r1
 801e7b0:	6879      	ldr	r1, [r7, #4]
 801e7b2:	8288      	strh	r0, [r1, #20]
 801e7b4:	4413      	add	r3, r2
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	8a9b      	ldrh	r3, [r3, #20]
 801e7c0:	2b43      	cmp	r3, #67	@ 0x43
 801e7c2:	d905      	bls.n	801e7d0 <dhcp_option_trailer+0x90>
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	8a9b      	ldrh	r3, [r3, #20]
 801e7c8:	f003 0303 	and.w	r3, r3, #3
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d003      	beq.n	801e7d8 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7d4:	2b43      	cmp	r3, #67	@ 0x43
 801e7d6:	d9e5      	bls.n	801e7a4 <dhcp_option_trailer+0x64>
  }
}
 801e7d8:	3708      	adds	r7, #8
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	bd80      	pop	{r7, pc}
 801e7de:	bf00      	nop
 801e7e0:	0802738c 	.word	0x0802738c
 801e7e4:	080277fc 	.word	0x080277fc
 801e7e8:	080273ec 	.word	0x080273ec
 801e7ec:	08027820 	.word	0x08027820
 801e7f0:	0802784c 	.word	0x0802784c

0801e7f4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e7f4:	b480      	push	{r7}
 801e7f6:	b085      	sub	sp, #20
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d017      	beq.n	801e832 <dhcp_supplied_address+0x3e>
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e806:	2b00      	cmp	r3, #0
 801e808:	d013      	beq.n	801e832 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e80e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	7a5b      	ldrb	r3, [r3, #9]
 801e814:	2b0a      	cmp	r3, #10
 801e816:	d007      	beq.n	801e828 <dhcp_supplied_address+0x34>
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	7a5b      	ldrb	r3, [r3, #9]
 801e81c:	2b05      	cmp	r3, #5
 801e81e:	d003      	beq.n	801e828 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e824:	2b04      	cmp	r3, #4
 801e826:	d101      	bne.n	801e82c <dhcp_supplied_address+0x38>
 801e828:	2301      	movs	r3, #1
 801e82a:	e000      	b.n	801e82e <dhcp_supplied_address+0x3a>
 801e82c:	2300      	movs	r3, #0
 801e82e:	b2db      	uxtb	r3, r3
 801e830:	e000      	b.n	801e834 <dhcp_supplied_address+0x40>
  }
  return 0;
 801e832:	2300      	movs	r3, #0
}
 801e834:	4618      	mov	r0, r3
 801e836:	3714      	adds	r7, #20
 801e838:	46bd      	mov	sp, r7
 801e83a:	bc80      	pop	{r7}
 801e83c:	4770      	bx	lr
	...

0801e840 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e840:	b580      	push	{r7, lr}
 801e842:	b082      	sub	sp, #8
 801e844:	af00      	add	r7, sp, #0
 801e846:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e848:	4915      	ldr	r1, [pc, #84]	@ (801e8a0 <etharp_free_entry+0x60>)
 801e84a:	687a      	ldr	r2, [r7, #4]
 801e84c:	4613      	mov	r3, r2
 801e84e:	005b      	lsls	r3, r3, #1
 801e850:	4413      	add	r3, r2
 801e852:	00db      	lsls	r3, r3, #3
 801e854:	440b      	add	r3, r1
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d013      	beq.n	801e884 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e85c:	4910      	ldr	r1, [pc, #64]	@ (801e8a0 <etharp_free_entry+0x60>)
 801e85e:	687a      	ldr	r2, [r7, #4]
 801e860:	4613      	mov	r3, r2
 801e862:	005b      	lsls	r3, r3, #1
 801e864:	4413      	add	r3, r2
 801e866:	00db      	lsls	r3, r3, #3
 801e868:	440b      	add	r3, r1
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	4618      	mov	r0, r3
 801e86e:	f7f7 fcc9 	bl	8016204 <pbuf_free>
    arp_table[i].q = NULL;
 801e872:	490b      	ldr	r1, [pc, #44]	@ (801e8a0 <etharp_free_entry+0x60>)
 801e874:	687a      	ldr	r2, [r7, #4]
 801e876:	4613      	mov	r3, r2
 801e878:	005b      	lsls	r3, r3, #1
 801e87a:	4413      	add	r3, r2
 801e87c:	00db      	lsls	r3, r3, #3
 801e87e:	440b      	add	r3, r1
 801e880:	2200      	movs	r2, #0
 801e882:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e884:	4906      	ldr	r1, [pc, #24]	@ (801e8a0 <etharp_free_entry+0x60>)
 801e886:	687a      	ldr	r2, [r7, #4]
 801e888:	4613      	mov	r3, r2
 801e88a:	005b      	lsls	r3, r3, #1
 801e88c:	4413      	add	r3, r2
 801e88e:	00db      	lsls	r3, r3, #3
 801e890:	440b      	add	r3, r1
 801e892:	3314      	adds	r3, #20
 801e894:	2200      	movs	r2, #0
 801e896:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e898:	bf00      	nop
 801e89a:	3708      	adds	r7, #8
 801e89c:	46bd      	mov	sp, r7
 801e89e:	bd80      	pop	{r7, pc}
 801e8a0:	2000be10 	.word	0x2000be10

0801e8a4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e8a4:	b580      	push	{r7, lr}
 801e8a6:	b082      	sub	sp, #8
 801e8a8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	71fb      	strb	r3, [r7, #7]
 801e8ae:	e096      	b.n	801e9de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e8b0:	79fa      	ldrb	r2, [r7, #7]
 801e8b2:	494f      	ldr	r1, [pc, #316]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e8b4:	4613      	mov	r3, r2
 801e8b6:	005b      	lsls	r3, r3, #1
 801e8b8:	4413      	add	r3, r2
 801e8ba:	00db      	lsls	r3, r3, #3
 801e8bc:	440b      	add	r3, r1
 801e8be:	3314      	adds	r3, #20
 801e8c0:	781b      	ldrb	r3, [r3, #0]
 801e8c2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801e8c4:	79bb      	ldrb	r3, [r7, #6]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	f000 8086 	beq.w	801e9d8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801e8cc:	79fa      	ldrb	r2, [r7, #7]
 801e8ce:	4948      	ldr	r1, [pc, #288]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e8d0:	4613      	mov	r3, r2
 801e8d2:	005b      	lsls	r3, r3, #1
 801e8d4:	4413      	add	r3, r2
 801e8d6:	00db      	lsls	r3, r3, #3
 801e8d8:	440b      	add	r3, r1
 801e8da:	3312      	adds	r3, #18
 801e8dc:	881b      	ldrh	r3, [r3, #0]
 801e8de:	3301      	adds	r3, #1
 801e8e0:	b298      	uxth	r0, r3
 801e8e2:	4943      	ldr	r1, [pc, #268]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e8e4:	4613      	mov	r3, r2
 801e8e6:	005b      	lsls	r3, r3, #1
 801e8e8:	4413      	add	r3, r2
 801e8ea:	00db      	lsls	r3, r3, #3
 801e8ec:	440b      	add	r3, r1
 801e8ee:	3312      	adds	r3, #18
 801e8f0:	4602      	mov	r2, r0
 801e8f2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e8f4:	79fa      	ldrb	r2, [r7, #7]
 801e8f6:	493e      	ldr	r1, [pc, #248]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e8f8:	4613      	mov	r3, r2
 801e8fa:	005b      	lsls	r3, r3, #1
 801e8fc:	4413      	add	r3, r2
 801e8fe:	00db      	lsls	r3, r3, #3
 801e900:	440b      	add	r3, r1
 801e902:	3312      	adds	r3, #18
 801e904:	881b      	ldrh	r3, [r3, #0]
 801e906:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801e90a:	d215      	bcs.n	801e938 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e90c:	79fa      	ldrb	r2, [r7, #7]
 801e90e:	4938      	ldr	r1, [pc, #224]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e910:	4613      	mov	r3, r2
 801e912:	005b      	lsls	r3, r3, #1
 801e914:	4413      	add	r3, r2
 801e916:	00db      	lsls	r3, r3, #3
 801e918:	440b      	add	r3, r1
 801e91a:	3314      	adds	r3, #20
 801e91c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e91e:	2b01      	cmp	r3, #1
 801e920:	d10f      	bne.n	801e942 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e922:	79fa      	ldrb	r2, [r7, #7]
 801e924:	4932      	ldr	r1, [pc, #200]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e926:	4613      	mov	r3, r2
 801e928:	005b      	lsls	r3, r3, #1
 801e92a:	4413      	add	r3, r2
 801e92c:	00db      	lsls	r3, r3, #3
 801e92e:	440b      	add	r3, r1
 801e930:	3312      	adds	r3, #18
 801e932:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e934:	2b04      	cmp	r3, #4
 801e936:	d904      	bls.n	801e942 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e938:	79fb      	ldrb	r3, [r7, #7]
 801e93a:	4618      	mov	r0, r3
 801e93c:	f7ff ff80 	bl	801e840 <etharp_free_entry>
 801e940:	e04a      	b.n	801e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e942:	79fa      	ldrb	r2, [r7, #7]
 801e944:	492a      	ldr	r1, [pc, #168]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e946:	4613      	mov	r3, r2
 801e948:	005b      	lsls	r3, r3, #1
 801e94a:	4413      	add	r3, r2
 801e94c:	00db      	lsls	r3, r3, #3
 801e94e:	440b      	add	r3, r1
 801e950:	3314      	adds	r3, #20
 801e952:	781b      	ldrb	r3, [r3, #0]
 801e954:	2b03      	cmp	r3, #3
 801e956:	d10a      	bne.n	801e96e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e958:	79fa      	ldrb	r2, [r7, #7]
 801e95a:	4925      	ldr	r1, [pc, #148]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e95c:	4613      	mov	r3, r2
 801e95e:	005b      	lsls	r3, r3, #1
 801e960:	4413      	add	r3, r2
 801e962:	00db      	lsls	r3, r3, #3
 801e964:	440b      	add	r3, r1
 801e966:	3314      	adds	r3, #20
 801e968:	2204      	movs	r2, #4
 801e96a:	701a      	strb	r2, [r3, #0]
 801e96c:	e034      	b.n	801e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e96e:	79fa      	ldrb	r2, [r7, #7]
 801e970:	491f      	ldr	r1, [pc, #124]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e972:	4613      	mov	r3, r2
 801e974:	005b      	lsls	r3, r3, #1
 801e976:	4413      	add	r3, r2
 801e978:	00db      	lsls	r3, r3, #3
 801e97a:	440b      	add	r3, r1
 801e97c:	3314      	adds	r3, #20
 801e97e:	781b      	ldrb	r3, [r3, #0]
 801e980:	2b04      	cmp	r3, #4
 801e982:	d10a      	bne.n	801e99a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e984:	79fa      	ldrb	r2, [r7, #7]
 801e986:	491a      	ldr	r1, [pc, #104]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e988:	4613      	mov	r3, r2
 801e98a:	005b      	lsls	r3, r3, #1
 801e98c:	4413      	add	r3, r2
 801e98e:	00db      	lsls	r3, r3, #3
 801e990:	440b      	add	r3, r1
 801e992:	3314      	adds	r3, #20
 801e994:	2202      	movs	r2, #2
 801e996:	701a      	strb	r2, [r3, #0]
 801e998:	e01e      	b.n	801e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e99a:	79fa      	ldrb	r2, [r7, #7]
 801e99c:	4914      	ldr	r1, [pc, #80]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e99e:	4613      	mov	r3, r2
 801e9a0:	005b      	lsls	r3, r3, #1
 801e9a2:	4413      	add	r3, r2
 801e9a4:	00db      	lsls	r3, r3, #3
 801e9a6:	440b      	add	r3, r1
 801e9a8:	3314      	adds	r3, #20
 801e9aa:	781b      	ldrb	r3, [r3, #0]
 801e9ac:	2b01      	cmp	r3, #1
 801e9ae:	d113      	bne.n	801e9d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e9b0:	79fa      	ldrb	r2, [r7, #7]
 801e9b2:	490f      	ldr	r1, [pc, #60]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e9b4:	4613      	mov	r3, r2
 801e9b6:	005b      	lsls	r3, r3, #1
 801e9b8:	4413      	add	r3, r2
 801e9ba:	00db      	lsls	r3, r3, #3
 801e9bc:	440b      	add	r3, r1
 801e9be:	3308      	adds	r3, #8
 801e9c0:	6818      	ldr	r0, [r3, #0]
 801e9c2:	79fa      	ldrb	r2, [r7, #7]
 801e9c4:	4613      	mov	r3, r2
 801e9c6:	005b      	lsls	r3, r3, #1
 801e9c8:	4413      	add	r3, r2
 801e9ca:	00db      	lsls	r3, r3, #3
 801e9cc:	4a08      	ldr	r2, [pc, #32]	@ (801e9f0 <etharp_tmr+0x14c>)
 801e9ce:	4413      	add	r3, r2
 801e9d0:	3304      	adds	r3, #4
 801e9d2:	4619      	mov	r1, r3
 801e9d4:	f000 fee8 	bl	801f7a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e9d8:	79fb      	ldrb	r3, [r7, #7]
 801e9da:	3301      	adds	r3, #1
 801e9dc:	71fb      	strb	r3, [r7, #7]
 801e9de:	79fb      	ldrb	r3, [r7, #7]
 801e9e0:	2b09      	cmp	r3, #9
 801e9e2:	f67f af65 	bls.w	801e8b0 <etharp_tmr+0xc>
      }
    }
  }
}
 801e9e6:	bf00      	nop
 801e9e8:	bf00      	nop
 801e9ea:	3708      	adds	r7, #8
 801e9ec:	46bd      	mov	sp, r7
 801e9ee:	bd80      	pop	{r7, pc}
 801e9f0:	2000be10 	.word	0x2000be10

0801e9f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b088      	sub	sp, #32
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	60f8      	str	r0, [r7, #12]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	607a      	str	r2, [r7, #4]
 801ea00:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ea02:	230a      	movs	r3, #10
 801ea04:	77fb      	strb	r3, [r7, #31]
 801ea06:	230a      	movs	r3, #10
 801ea08:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801ea0a:	230a      	movs	r3, #10
 801ea0c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801ea0e:	2300      	movs	r3, #0
 801ea10:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801ea12:	230a      	movs	r3, #10
 801ea14:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ea16:	2300      	movs	r3, #0
 801ea18:	833b      	strh	r3, [r7, #24]
 801ea1a:	2300      	movs	r3, #0
 801ea1c:	82fb      	strh	r3, [r7, #22]
 801ea1e:	2300      	movs	r3, #0
 801ea20:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ea22:	2300      	movs	r3, #0
 801ea24:	773b      	strb	r3, [r7, #28]
 801ea26:	e093      	b.n	801eb50 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801ea28:	7f3a      	ldrb	r2, [r7, #28]
 801ea2a:	4990      	ldr	r1, [pc, #576]	@ (801ec6c <etharp_find_entry+0x278>)
 801ea2c:	4613      	mov	r3, r2
 801ea2e:	005b      	lsls	r3, r3, #1
 801ea30:	4413      	add	r3, r2
 801ea32:	00db      	lsls	r3, r3, #3
 801ea34:	440b      	add	r3, r1
 801ea36:	3314      	adds	r3, #20
 801ea38:	781b      	ldrb	r3, [r3, #0]
 801ea3a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ea3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801ea40:	2b0a      	cmp	r3, #10
 801ea42:	d105      	bne.n	801ea50 <etharp_find_entry+0x5c>
 801ea44:	7cfb      	ldrb	r3, [r7, #19]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d102      	bne.n	801ea50 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801ea4a:	7f3b      	ldrb	r3, [r7, #28]
 801ea4c:	777b      	strb	r3, [r7, #29]
 801ea4e:	e07c      	b.n	801eb4a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ea50:	7cfb      	ldrb	r3, [r7, #19]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d079      	beq.n	801eb4a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ea56:	7cfb      	ldrb	r3, [r7, #19]
 801ea58:	2b01      	cmp	r3, #1
 801ea5a:	d009      	beq.n	801ea70 <etharp_find_entry+0x7c>
 801ea5c:	7cfb      	ldrb	r3, [r7, #19]
 801ea5e:	2b01      	cmp	r3, #1
 801ea60:	d806      	bhi.n	801ea70 <etharp_find_entry+0x7c>
 801ea62:	4b83      	ldr	r3, [pc, #524]	@ (801ec70 <etharp_find_entry+0x27c>)
 801ea64:	f240 1225 	movw	r2, #293	@ 0x125
 801ea68:	4982      	ldr	r1, [pc, #520]	@ (801ec74 <etharp_find_entry+0x280>)
 801ea6a:	4883      	ldr	r0, [pc, #524]	@ (801ec78 <etharp_find_entry+0x284>)
 801ea6c:	f003 fbe8 	bl	8022240 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d00f      	beq.n	801ea96 <etharp_find_entry+0xa2>
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	6819      	ldr	r1, [r3, #0]
 801ea7a:	7f3a      	ldrb	r2, [r7, #28]
 801ea7c:	487b      	ldr	r0, [pc, #492]	@ (801ec6c <etharp_find_entry+0x278>)
 801ea7e:	4613      	mov	r3, r2
 801ea80:	005b      	lsls	r3, r3, #1
 801ea82:	4413      	add	r3, r2
 801ea84:	00db      	lsls	r3, r3, #3
 801ea86:	4403      	add	r3, r0
 801ea88:	3304      	adds	r3, #4
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	4299      	cmp	r1, r3
 801ea8e:	d102      	bne.n	801ea96 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ea90:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801ea94:	e0e5      	b.n	801ec62 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ea96:	7cfb      	ldrb	r3, [r7, #19]
 801ea98:	2b01      	cmp	r3, #1
 801ea9a:	d13b      	bne.n	801eb14 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ea9c:	7f3a      	ldrb	r2, [r7, #28]
 801ea9e:	4973      	ldr	r1, [pc, #460]	@ (801ec6c <etharp_find_entry+0x278>)
 801eaa0:	4613      	mov	r3, r2
 801eaa2:	005b      	lsls	r3, r3, #1
 801eaa4:	4413      	add	r3, r2
 801eaa6:	00db      	lsls	r3, r3, #3
 801eaa8:	440b      	add	r3, r1
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d018      	beq.n	801eae2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801eab0:	7f3a      	ldrb	r2, [r7, #28]
 801eab2:	496e      	ldr	r1, [pc, #440]	@ (801ec6c <etharp_find_entry+0x278>)
 801eab4:	4613      	mov	r3, r2
 801eab6:	005b      	lsls	r3, r3, #1
 801eab8:	4413      	add	r3, r2
 801eaba:	00db      	lsls	r3, r3, #3
 801eabc:	440b      	add	r3, r1
 801eabe:	3312      	adds	r3, #18
 801eac0:	881b      	ldrh	r3, [r3, #0]
 801eac2:	8b3a      	ldrh	r2, [r7, #24]
 801eac4:	429a      	cmp	r2, r3
 801eac6:	d840      	bhi.n	801eb4a <etharp_find_entry+0x156>
            old_queue = i;
 801eac8:	7f3b      	ldrb	r3, [r7, #28]
 801eaca:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801eacc:	7f3a      	ldrb	r2, [r7, #28]
 801eace:	4967      	ldr	r1, [pc, #412]	@ (801ec6c <etharp_find_entry+0x278>)
 801ead0:	4613      	mov	r3, r2
 801ead2:	005b      	lsls	r3, r3, #1
 801ead4:	4413      	add	r3, r2
 801ead6:	00db      	lsls	r3, r3, #3
 801ead8:	440b      	add	r3, r1
 801eada:	3312      	adds	r3, #18
 801eadc:	881b      	ldrh	r3, [r3, #0]
 801eade:	833b      	strh	r3, [r7, #24]
 801eae0:	e033      	b.n	801eb4a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801eae2:	7f3a      	ldrb	r2, [r7, #28]
 801eae4:	4961      	ldr	r1, [pc, #388]	@ (801ec6c <etharp_find_entry+0x278>)
 801eae6:	4613      	mov	r3, r2
 801eae8:	005b      	lsls	r3, r3, #1
 801eaea:	4413      	add	r3, r2
 801eaec:	00db      	lsls	r3, r3, #3
 801eaee:	440b      	add	r3, r1
 801eaf0:	3312      	adds	r3, #18
 801eaf2:	881b      	ldrh	r3, [r3, #0]
 801eaf4:	8afa      	ldrh	r2, [r7, #22]
 801eaf6:	429a      	cmp	r2, r3
 801eaf8:	d827      	bhi.n	801eb4a <etharp_find_entry+0x156>
            old_pending = i;
 801eafa:	7f3b      	ldrb	r3, [r7, #28]
 801eafc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801eafe:	7f3a      	ldrb	r2, [r7, #28]
 801eb00:	495a      	ldr	r1, [pc, #360]	@ (801ec6c <etharp_find_entry+0x278>)
 801eb02:	4613      	mov	r3, r2
 801eb04:	005b      	lsls	r3, r3, #1
 801eb06:	4413      	add	r3, r2
 801eb08:	00db      	lsls	r3, r3, #3
 801eb0a:	440b      	add	r3, r1
 801eb0c:	3312      	adds	r3, #18
 801eb0e:	881b      	ldrh	r3, [r3, #0]
 801eb10:	82fb      	strh	r3, [r7, #22]
 801eb12:	e01a      	b.n	801eb4a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801eb14:	7cfb      	ldrb	r3, [r7, #19]
 801eb16:	2b01      	cmp	r3, #1
 801eb18:	d917      	bls.n	801eb4a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801eb1a:	7f3a      	ldrb	r2, [r7, #28]
 801eb1c:	4953      	ldr	r1, [pc, #332]	@ (801ec6c <etharp_find_entry+0x278>)
 801eb1e:	4613      	mov	r3, r2
 801eb20:	005b      	lsls	r3, r3, #1
 801eb22:	4413      	add	r3, r2
 801eb24:	00db      	lsls	r3, r3, #3
 801eb26:	440b      	add	r3, r1
 801eb28:	3312      	adds	r3, #18
 801eb2a:	881b      	ldrh	r3, [r3, #0]
 801eb2c:	8aba      	ldrh	r2, [r7, #20]
 801eb2e:	429a      	cmp	r2, r3
 801eb30:	d80b      	bhi.n	801eb4a <etharp_find_entry+0x156>
            old_stable = i;
 801eb32:	7f3b      	ldrb	r3, [r7, #28]
 801eb34:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801eb36:	7f3a      	ldrb	r2, [r7, #28]
 801eb38:	494c      	ldr	r1, [pc, #304]	@ (801ec6c <etharp_find_entry+0x278>)
 801eb3a:	4613      	mov	r3, r2
 801eb3c:	005b      	lsls	r3, r3, #1
 801eb3e:	4413      	add	r3, r2
 801eb40:	00db      	lsls	r3, r3, #3
 801eb42:	440b      	add	r3, r1
 801eb44:	3312      	adds	r3, #18
 801eb46:	881b      	ldrh	r3, [r3, #0]
 801eb48:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eb4a:	7f3b      	ldrb	r3, [r7, #28]
 801eb4c:	3301      	adds	r3, #1
 801eb4e:	773b      	strb	r3, [r7, #28]
 801eb50:	7f3b      	ldrb	r3, [r7, #28]
 801eb52:	2b09      	cmp	r3, #9
 801eb54:	f67f af68 	bls.w	801ea28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801eb58:	7afb      	ldrb	r3, [r7, #11]
 801eb5a:	f003 0302 	and.w	r3, r3, #2
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d108      	bne.n	801eb74 <etharp_find_entry+0x180>
 801eb62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801eb66:	2b0a      	cmp	r3, #10
 801eb68:	d107      	bne.n	801eb7a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801eb6a:	7afb      	ldrb	r3, [r7, #11]
 801eb6c:	f003 0301 	and.w	r3, r3, #1
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d102      	bne.n	801eb7a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801eb74:	f04f 33ff 	mov.w	r3, #4294967295
 801eb78:	e073      	b.n	801ec62 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801eb7a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801eb7e:	2b09      	cmp	r3, #9
 801eb80:	dc02      	bgt.n	801eb88 <etharp_find_entry+0x194>
    i = empty;
 801eb82:	7f7b      	ldrb	r3, [r7, #29]
 801eb84:	773b      	strb	r3, [r7, #28]
 801eb86:	e036      	b.n	801ebf6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801eb88:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801eb8c:	2b09      	cmp	r3, #9
 801eb8e:	dc13      	bgt.n	801ebb8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801eb90:	7fbb      	ldrb	r3, [r7, #30]
 801eb92:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801eb94:	7f3a      	ldrb	r2, [r7, #28]
 801eb96:	4935      	ldr	r1, [pc, #212]	@ (801ec6c <etharp_find_entry+0x278>)
 801eb98:	4613      	mov	r3, r2
 801eb9a:	005b      	lsls	r3, r3, #1
 801eb9c:	4413      	add	r3, r2
 801eb9e:	00db      	lsls	r3, r3, #3
 801eba0:	440b      	add	r3, r1
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d018      	beq.n	801ebda <etharp_find_entry+0x1e6>
 801eba8:	4b31      	ldr	r3, [pc, #196]	@ (801ec70 <etharp_find_entry+0x27c>)
 801ebaa:	f240 126f 	movw	r2, #367	@ 0x16f
 801ebae:	4933      	ldr	r1, [pc, #204]	@ (801ec7c <etharp_find_entry+0x288>)
 801ebb0:	4831      	ldr	r0, [pc, #196]	@ (801ec78 <etharp_find_entry+0x284>)
 801ebb2:	f003 fb45 	bl	8022240 <iprintf>
 801ebb6:	e010      	b.n	801ebda <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ebb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ebbc:	2b09      	cmp	r3, #9
 801ebbe:	dc02      	bgt.n	801ebc6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801ebc0:	7ffb      	ldrb	r3, [r7, #31]
 801ebc2:	773b      	strb	r3, [r7, #28]
 801ebc4:	e009      	b.n	801ebda <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ebc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ebca:	2b09      	cmp	r3, #9
 801ebcc:	dc02      	bgt.n	801ebd4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ebce:	7efb      	ldrb	r3, [r7, #27]
 801ebd0:	773b      	strb	r3, [r7, #28]
 801ebd2:	e002      	b.n	801ebda <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801ebd4:	f04f 33ff 	mov.w	r3, #4294967295
 801ebd8:	e043      	b.n	801ec62 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ebda:	7f3b      	ldrb	r3, [r7, #28]
 801ebdc:	2b09      	cmp	r3, #9
 801ebde:	d906      	bls.n	801ebee <etharp_find_entry+0x1fa>
 801ebe0:	4b23      	ldr	r3, [pc, #140]	@ (801ec70 <etharp_find_entry+0x27c>)
 801ebe2:	f240 1281 	movw	r2, #385	@ 0x181
 801ebe6:	4926      	ldr	r1, [pc, #152]	@ (801ec80 <etharp_find_entry+0x28c>)
 801ebe8:	4823      	ldr	r0, [pc, #140]	@ (801ec78 <etharp_find_entry+0x284>)
 801ebea:	f003 fb29 	bl	8022240 <iprintf>
    etharp_free_entry(i);
 801ebee:	7f3b      	ldrb	r3, [r7, #28]
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	f7ff fe25 	bl	801e840 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ebf6:	7f3b      	ldrb	r3, [r7, #28]
 801ebf8:	2b09      	cmp	r3, #9
 801ebfa:	d906      	bls.n	801ec0a <etharp_find_entry+0x216>
 801ebfc:	4b1c      	ldr	r3, [pc, #112]	@ (801ec70 <etharp_find_entry+0x27c>)
 801ebfe:	f240 1285 	movw	r2, #389	@ 0x185
 801ec02:	491f      	ldr	r1, [pc, #124]	@ (801ec80 <etharp_find_entry+0x28c>)
 801ec04:	481c      	ldr	r0, [pc, #112]	@ (801ec78 <etharp_find_entry+0x284>)
 801ec06:	f003 fb1b 	bl	8022240 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ec0a:	7f3a      	ldrb	r2, [r7, #28]
 801ec0c:	4917      	ldr	r1, [pc, #92]	@ (801ec6c <etharp_find_entry+0x278>)
 801ec0e:	4613      	mov	r3, r2
 801ec10:	005b      	lsls	r3, r3, #1
 801ec12:	4413      	add	r3, r2
 801ec14:	00db      	lsls	r3, r3, #3
 801ec16:	440b      	add	r3, r1
 801ec18:	3314      	adds	r3, #20
 801ec1a:	781b      	ldrb	r3, [r3, #0]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d006      	beq.n	801ec2e <etharp_find_entry+0x23a>
 801ec20:	4b13      	ldr	r3, [pc, #76]	@ (801ec70 <etharp_find_entry+0x27c>)
 801ec22:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 801ec26:	4917      	ldr	r1, [pc, #92]	@ (801ec84 <etharp_find_entry+0x290>)
 801ec28:	4813      	ldr	r0, [pc, #76]	@ (801ec78 <etharp_find_entry+0x284>)
 801ec2a:	f003 fb09 	bl	8022240 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ec2e:	68fb      	ldr	r3, [r7, #12]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d00a      	beq.n	801ec4a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ec34:	7f3a      	ldrb	r2, [r7, #28]
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	6819      	ldr	r1, [r3, #0]
 801ec3a:	480c      	ldr	r0, [pc, #48]	@ (801ec6c <etharp_find_entry+0x278>)
 801ec3c:	4613      	mov	r3, r2
 801ec3e:	005b      	lsls	r3, r3, #1
 801ec40:	4413      	add	r3, r2
 801ec42:	00db      	lsls	r3, r3, #3
 801ec44:	4403      	add	r3, r0
 801ec46:	3304      	adds	r3, #4
 801ec48:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ec4a:	7f3a      	ldrb	r2, [r7, #28]
 801ec4c:	4907      	ldr	r1, [pc, #28]	@ (801ec6c <etharp_find_entry+0x278>)
 801ec4e:	4613      	mov	r3, r2
 801ec50:	005b      	lsls	r3, r3, #1
 801ec52:	4413      	add	r3, r2
 801ec54:	00db      	lsls	r3, r3, #3
 801ec56:	440b      	add	r3, r1
 801ec58:	3312      	adds	r3, #18
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801ec5e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801ec62:	4618      	mov	r0, r3
 801ec64:	3720      	adds	r7, #32
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd80      	pop	{r7, pc}
 801ec6a:	bf00      	nop
 801ec6c:	2000be10 	.word	0x2000be10
 801ec70:	0802788c 	.word	0x0802788c
 801ec74:	080278c4 	.word	0x080278c4
 801ec78:	08027904 	.word	0x08027904
 801ec7c:	0802792c 	.word	0x0802792c
 801ec80:	08027944 	.word	0x08027944
 801ec84:	08027958 	.word	0x08027958

0801ec88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ec88:	b580      	push	{r7, lr}
 801ec8a:	b088      	sub	sp, #32
 801ec8c:	af02      	add	r7, sp, #8
 801ec8e:	60f8      	str	r0, [r7, #12]
 801ec90:	60b9      	str	r1, [r7, #8]
 801ec92:	607a      	str	r2, [r7, #4]
 801ec94:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ec9c:	2b06      	cmp	r3, #6
 801ec9e:	d006      	beq.n	801ecae <etharp_update_arp_entry+0x26>
 801eca0:	4b48      	ldr	r3, [pc, #288]	@ (801edc4 <etharp_update_arp_entry+0x13c>)
 801eca2:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801eca6:	4948      	ldr	r1, [pc, #288]	@ (801edc8 <etharp_update_arp_entry+0x140>)
 801eca8:	4848      	ldr	r0, [pc, #288]	@ (801edcc <etharp_update_arp_entry+0x144>)
 801ecaa:	f003 fac9 	bl	8022240 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ecae:	68bb      	ldr	r3, [r7, #8]
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d012      	beq.n	801ecda <etharp_update_arp_entry+0x52>
 801ecb4:	68bb      	ldr	r3, [r7, #8]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	d00e      	beq.n	801ecda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ecbc:	68bb      	ldr	r3, [r7, #8]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	68f9      	ldr	r1, [r7, #12]
 801ecc2:	4618      	mov	r0, r3
 801ecc4:	f001 fb70 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801ecc8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d105      	bne.n	801ecda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ecce:	68bb      	ldr	r3, [r7, #8]
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ecd6:	2be0      	cmp	r3, #224	@ 0xe0
 801ecd8:	d102      	bne.n	801ece0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ecda:	f06f 030f 	mvn.w	r3, #15
 801ecde:	e06c      	b.n	801edba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ece0:	78fb      	ldrb	r3, [r7, #3]
 801ece2:	68fa      	ldr	r2, [r7, #12]
 801ece4:	4619      	mov	r1, r3
 801ece6:	68b8      	ldr	r0, [r7, #8]
 801ece8:	f7ff fe84 	bl	801e9f4 <etharp_find_entry>
 801ecec:	4603      	mov	r3, r0
 801ecee:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ecf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	da02      	bge.n	801ecfe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ecf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ecfc:	e05d      	b.n	801edba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ecfe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed02:	4933      	ldr	r1, [pc, #204]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed04:	4613      	mov	r3, r2
 801ed06:	005b      	lsls	r3, r3, #1
 801ed08:	4413      	add	r3, r2
 801ed0a:	00db      	lsls	r3, r3, #3
 801ed0c:	440b      	add	r3, r1
 801ed0e:	3314      	adds	r3, #20
 801ed10:	2202      	movs	r2, #2
 801ed12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ed14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed18:	492d      	ldr	r1, [pc, #180]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed1a:	4613      	mov	r3, r2
 801ed1c:	005b      	lsls	r3, r3, #1
 801ed1e:	4413      	add	r3, r2
 801ed20:	00db      	lsls	r3, r3, #3
 801ed22:	440b      	add	r3, r1
 801ed24:	3308      	adds	r3, #8
 801ed26:	68fa      	ldr	r2, [r7, #12]
 801ed28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801ed2a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed2e:	4613      	mov	r3, r2
 801ed30:	005b      	lsls	r3, r3, #1
 801ed32:	4413      	add	r3, r2
 801ed34:	00db      	lsls	r3, r3, #3
 801ed36:	3308      	adds	r3, #8
 801ed38:	4a25      	ldr	r2, [pc, #148]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed3a:	4413      	add	r3, r2
 801ed3c:	3304      	adds	r3, #4
 801ed3e:	2206      	movs	r2, #6
 801ed40:	6879      	ldr	r1, [r7, #4]
 801ed42:	4618      	mov	r0, r3
 801ed44:	f003 fd77 	bl	8022836 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ed48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed4c:	4920      	ldr	r1, [pc, #128]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed4e:	4613      	mov	r3, r2
 801ed50:	005b      	lsls	r3, r3, #1
 801ed52:	4413      	add	r3, r2
 801ed54:	00db      	lsls	r3, r3, #3
 801ed56:	440b      	add	r3, r1
 801ed58:	3312      	adds	r3, #18
 801ed5a:	2200      	movs	r2, #0
 801ed5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ed5e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed62:	491b      	ldr	r1, [pc, #108]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed64:	4613      	mov	r3, r2
 801ed66:	005b      	lsls	r3, r3, #1
 801ed68:	4413      	add	r3, r2
 801ed6a:	00db      	lsls	r3, r3, #3
 801ed6c:	440b      	add	r3, r1
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d021      	beq.n	801edb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ed74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed78:	4915      	ldr	r1, [pc, #84]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed7a:	4613      	mov	r3, r2
 801ed7c:	005b      	lsls	r3, r3, #1
 801ed7e:	4413      	add	r3, r2
 801ed80:	00db      	lsls	r3, r3, #3
 801ed82:	440b      	add	r3, r1
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ed88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed8c:	4910      	ldr	r1, [pc, #64]	@ (801edd0 <etharp_update_arp_entry+0x148>)
 801ed8e:	4613      	mov	r3, r2
 801ed90:	005b      	lsls	r3, r3, #1
 801ed92:	4413      	add	r3, r2
 801ed94:	00db      	lsls	r3, r3, #3
 801ed96:	440b      	add	r3, r1
 801ed98:	2200      	movs	r2, #0
 801ed9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ed9c:	68fb      	ldr	r3, [r7, #12]
 801ed9e:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801eda2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801eda6:	9300      	str	r3, [sp, #0]
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	6939      	ldr	r1, [r7, #16]
 801edac:	68f8      	ldr	r0, [r7, #12]
 801edae:	f002 fc09 	bl	80215c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801edb2:	6938      	ldr	r0, [r7, #16]
 801edb4:	f7f7 fa26 	bl	8016204 <pbuf_free>
  }
  return ERR_OK;
 801edb8:	2300      	movs	r3, #0
}
 801edba:	4618      	mov	r0, r3
 801edbc:	3718      	adds	r7, #24
 801edbe:	46bd      	mov	sp, r7
 801edc0:	bd80      	pop	{r7, pc}
 801edc2:	bf00      	nop
 801edc4:	0802788c 	.word	0x0802788c
 801edc8:	08027984 	.word	0x08027984
 801edcc:	08027904 	.word	0x08027904
 801edd0:	2000be10 	.word	0x2000be10

0801edd4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801edd4:	b580      	push	{r7, lr}
 801edd6:	b084      	sub	sp, #16
 801edd8:	af00      	add	r7, sp, #0
 801edda:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eddc:	2300      	movs	r3, #0
 801edde:	73fb      	strb	r3, [r7, #15]
 801ede0:	e01f      	b.n	801ee22 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801ede2:	7bfa      	ldrb	r2, [r7, #15]
 801ede4:	4913      	ldr	r1, [pc, #76]	@ (801ee34 <etharp_cleanup_netif+0x60>)
 801ede6:	4613      	mov	r3, r2
 801ede8:	005b      	lsls	r3, r3, #1
 801edea:	4413      	add	r3, r2
 801edec:	00db      	lsls	r3, r3, #3
 801edee:	440b      	add	r3, r1
 801edf0:	3314      	adds	r3, #20
 801edf2:	781b      	ldrb	r3, [r3, #0]
 801edf4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801edf6:	7bbb      	ldrb	r3, [r7, #14]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d00f      	beq.n	801ee1c <etharp_cleanup_netif+0x48>
 801edfc:	7bfa      	ldrb	r2, [r7, #15]
 801edfe:	490d      	ldr	r1, [pc, #52]	@ (801ee34 <etharp_cleanup_netif+0x60>)
 801ee00:	4613      	mov	r3, r2
 801ee02:	005b      	lsls	r3, r3, #1
 801ee04:	4413      	add	r3, r2
 801ee06:	00db      	lsls	r3, r3, #3
 801ee08:	440b      	add	r3, r1
 801ee0a:	3308      	adds	r3, #8
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	687a      	ldr	r2, [r7, #4]
 801ee10:	429a      	cmp	r2, r3
 801ee12:	d103      	bne.n	801ee1c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801ee14:	7bfb      	ldrb	r3, [r7, #15]
 801ee16:	4618      	mov	r0, r3
 801ee18:	f7ff fd12 	bl	801e840 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ee1c:	7bfb      	ldrb	r3, [r7, #15]
 801ee1e:	3301      	adds	r3, #1
 801ee20:	73fb      	strb	r3, [r7, #15]
 801ee22:	7bfb      	ldrb	r3, [r7, #15]
 801ee24:	2b09      	cmp	r3, #9
 801ee26:	d9dc      	bls.n	801ede2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801ee28:	bf00      	nop
 801ee2a:	bf00      	nop
 801ee2c:	3710      	adds	r7, #16
 801ee2e:	46bd      	mov	sp, r7
 801ee30:	bd80      	pop	{r7, pc}
 801ee32:	bf00      	nop
 801ee34:	2000be10 	.word	0x2000be10

0801ee38 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 801ee38:	b580      	push	{r7, lr}
 801ee3a:	b084      	sub	sp, #16
 801ee3c:	af00      	add	r7, sp, #0
 801ee3e:	60b9      	str	r1, [r7, #8]
 801ee40:	607a      	str	r2, [r7, #4]
 801ee42:	603b      	str	r3, [r7, #0]
 801ee44:	4603      	mov	r3, r0
 801ee46:	73fb      	strb	r3, [r7, #15]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ee48:	68bb      	ldr	r3, [r7, #8]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d106      	bne.n	801ee5c <etharp_get_entry+0x24>
 801ee4e:	4b28      	ldr	r3, [pc, #160]	@ (801eef0 <etharp_get_entry+0xb8>)
 801ee50:	f240 2266 	movw	r2, #614	@ 0x266
 801ee54:	4927      	ldr	r1, [pc, #156]	@ (801eef4 <etharp_get_entry+0xbc>)
 801ee56:	4828      	ldr	r0, [pc, #160]	@ (801eef8 <etharp_get_entry+0xc0>)
 801ee58:	f003 f9f2 	bl	8022240 <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d106      	bne.n	801ee70 <etharp_get_entry+0x38>
 801ee62:	4b23      	ldr	r3, [pc, #140]	@ (801eef0 <etharp_get_entry+0xb8>)
 801ee64:	f240 2267 	movw	r2, #615	@ 0x267
 801ee68:	4924      	ldr	r1, [pc, #144]	@ (801eefc <etharp_get_entry+0xc4>)
 801ee6a:	4823      	ldr	r0, [pc, #140]	@ (801eef8 <etharp_get_entry+0xc0>)
 801ee6c:	f003 f9e8 	bl	8022240 <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 801ee70:	683b      	ldr	r3, [r7, #0]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d106      	bne.n	801ee84 <etharp_get_entry+0x4c>
 801ee76:	4b1e      	ldr	r3, [pc, #120]	@ (801eef0 <etharp_get_entry+0xb8>)
 801ee78:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801ee7c:	4920      	ldr	r1, [pc, #128]	@ (801ef00 <etharp_get_entry+0xc8>)
 801ee7e:	481e      	ldr	r0, [pc, #120]	@ (801eef8 <etharp_get_entry+0xc0>)
 801ee80:	f003 f9de 	bl	8022240 <iprintf>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 801ee84:	7bfb      	ldrb	r3, [r7, #15]
 801ee86:	2b09      	cmp	r3, #9
 801ee88:	d82c      	bhi.n	801eee4 <etharp_get_entry+0xac>
 801ee8a:	7bfa      	ldrb	r2, [r7, #15]
 801ee8c:	491d      	ldr	r1, [pc, #116]	@ (801ef04 <etharp_get_entry+0xcc>)
 801ee8e:	4613      	mov	r3, r2
 801ee90:	005b      	lsls	r3, r3, #1
 801ee92:	4413      	add	r3, r2
 801ee94:	00db      	lsls	r3, r3, #3
 801ee96:	440b      	add	r3, r1
 801ee98:	3314      	adds	r3, #20
 801ee9a:	781b      	ldrb	r3, [r3, #0]
 801ee9c:	2b01      	cmp	r3, #1
 801ee9e:	d921      	bls.n	801eee4 <etharp_get_entry+0xac>
    *ipaddr  = &arp_table[i].ipaddr;
 801eea0:	7bfa      	ldrb	r2, [r7, #15]
 801eea2:	4613      	mov	r3, r2
 801eea4:	005b      	lsls	r3, r3, #1
 801eea6:	4413      	add	r3, r2
 801eea8:	00db      	lsls	r3, r3, #3
 801eeaa:	4a16      	ldr	r2, [pc, #88]	@ (801ef04 <etharp_get_entry+0xcc>)
 801eeac:	4413      	add	r3, r2
 801eeae:	1d1a      	adds	r2, r3, #4
 801eeb0:	68bb      	ldr	r3, [r7, #8]
 801eeb2:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 801eeb4:	7bfa      	ldrb	r2, [r7, #15]
 801eeb6:	4913      	ldr	r1, [pc, #76]	@ (801ef04 <etharp_get_entry+0xcc>)
 801eeb8:	4613      	mov	r3, r2
 801eeba:	005b      	lsls	r3, r3, #1
 801eebc:	4413      	add	r3, r2
 801eebe:	00db      	lsls	r3, r3, #3
 801eec0:	440b      	add	r3, r1
 801eec2:	3308      	adds	r3, #8
 801eec4:	681a      	ldr	r2, [r3, #0]
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801eeca:	7bfa      	ldrb	r2, [r7, #15]
 801eecc:	4613      	mov	r3, r2
 801eece:	005b      	lsls	r3, r3, #1
 801eed0:	4413      	add	r3, r2
 801eed2:	00db      	lsls	r3, r3, #3
 801eed4:	3308      	adds	r3, #8
 801eed6:	4a0b      	ldr	r2, [pc, #44]	@ (801ef04 <etharp_get_entry+0xcc>)
 801eed8:	4413      	add	r3, r2
 801eeda:	1d1a      	adds	r2, r3, #4
 801eedc:	683b      	ldr	r3, [r7, #0]
 801eede:	601a      	str	r2, [r3, #0]
    return 1;
 801eee0:	2301      	movs	r3, #1
 801eee2:	e000      	b.n	801eee6 <etharp_get_entry+0xae>
  } else {
    return 0;
 801eee4:	2300      	movs	r3, #0
  }
}
 801eee6:	4618      	mov	r0, r3
 801eee8:	3710      	adds	r7, #16
 801eeea:	46bd      	mov	sp, r7
 801eeec:	bd80      	pop	{r7, pc}
 801eeee:	bf00      	nop
 801eef0:	0802788c 	.word	0x0802788c
 801eef4:	080279cc 	.word	0x080279cc
 801eef8:	08027904 	.word	0x08027904
 801eefc:	080279dc 	.word	0x080279dc
 801ef00:	080279ec 	.word	0x080279ec
 801ef04:	2000be10 	.word	0x2000be10

0801ef08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ef08:	b5b0      	push	{r4, r5, r7, lr}
 801ef0a:	b08a      	sub	sp, #40	@ 0x28
 801ef0c:	af04      	add	r7, sp, #16
 801ef0e:	6078      	str	r0, [r7, #4]
 801ef10:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d107      	bne.n	801ef28 <etharp_input+0x20>
 801ef18:	4b4c      	ldr	r3, [pc, #304]	@ (801f04c <etharp_input+0x144>)
 801ef1a:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801ef1e:	494c      	ldr	r1, [pc, #304]	@ (801f050 <etharp_input+0x148>)
 801ef20:	484c      	ldr	r0, [pc, #304]	@ (801f054 <etharp_input+0x14c>)
 801ef22:	f003 f98d 	bl	8022240 <iprintf>
 801ef26:	e08d      	b.n	801f044 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801ef2e:	693b      	ldr	r3, [r7, #16]
 801ef30:	881b      	ldrh	r3, [r3, #0]
 801ef32:	b29b      	uxth	r3, r3
 801ef34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ef38:	d10c      	bne.n	801ef54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ef3a:	693b      	ldr	r3, [r7, #16]
 801ef3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801ef3e:	2b06      	cmp	r3, #6
 801ef40:	d108      	bne.n	801ef54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ef42:	693b      	ldr	r3, [r7, #16]
 801ef44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ef46:	2b04      	cmp	r3, #4
 801ef48:	d104      	bne.n	801ef54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ef4a:	693b      	ldr	r3, [r7, #16]
 801ef4c:	885b      	ldrh	r3, [r3, #2]
 801ef4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ef50:	2b08      	cmp	r3, #8
 801ef52:	d00f      	beq.n	801ef74 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801ef54:	4b40      	ldr	r3, [pc, #256]	@ (801f058 <etharp_input+0x150>)
 801ef56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ef58:	3301      	adds	r3, #1
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	4b3e      	ldr	r3, [pc, #248]	@ (801f058 <etharp_input+0x150>)
 801ef5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ef60:	4b3d      	ldr	r3, [pc, #244]	@ (801f058 <etharp_input+0x150>)
 801ef62:	8bdb      	ldrh	r3, [r3, #30]
 801ef64:	3301      	adds	r3, #1
 801ef66:	b29a      	uxth	r2, r3
 801ef68:	4b3b      	ldr	r3, [pc, #236]	@ (801f058 <etharp_input+0x150>)
 801ef6a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801ef6c:	6878      	ldr	r0, [r7, #4]
 801ef6e:	f7f7 f949 	bl	8016204 <pbuf_free>
    return;
 801ef72:	e067      	b.n	801f044 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 801ef74:	4b38      	ldr	r3, [pc, #224]	@ (801f058 <etharp_input+0x150>)
 801ef76:	8b5b      	ldrh	r3, [r3, #26]
 801ef78:	3301      	adds	r3, #1
 801ef7a:	b29a      	uxth	r2, r3
 801ef7c:	4b36      	ldr	r3, [pc, #216]	@ (801f058 <etharp_input+0x150>)
 801ef7e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801ef80:	693b      	ldr	r3, [r7, #16]
 801ef82:	330e      	adds	r3, #14
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801ef88:	693b      	ldr	r3, [r7, #16]
 801ef8a:	3318      	adds	r3, #24
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ef90:	683b      	ldr	r3, [r7, #0]
 801ef92:	3304      	adds	r3, #4
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d102      	bne.n	801efa0 <etharp_input+0x98>
    for_us = 0;
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	75fb      	strb	r3, [r7, #23]
 801ef9e:	e009      	b.n	801efb4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801efa0:	68ba      	ldr	r2, [r7, #8]
 801efa2:	683b      	ldr	r3, [r7, #0]
 801efa4:	3304      	adds	r3, #4
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	429a      	cmp	r2, r3
 801efaa:	bf0c      	ite	eq
 801efac:	2301      	moveq	r3, #1
 801efae:	2300      	movne	r3, #0
 801efb0:	b2db      	uxtb	r3, r3
 801efb2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801efb4:	693b      	ldr	r3, [r7, #16]
 801efb6:	f103 0208 	add.w	r2, r3, #8
 801efba:	7dfb      	ldrb	r3, [r7, #23]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d001      	beq.n	801efc4 <etharp_input+0xbc>
 801efc0:	2301      	movs	r3, #1
 801efc2:	e000      	b.n	801efc6 <etharp_input+0xbe>
 801efc4:	2302      	movs	r3, #2
 801efc6:	f107 010c 	add.w	r1, r7, #12
 801efca:	6838      	ldr	r0, [r7, #0]
 801efcc:	f7ff fe5c 	bl	801ec88 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801efd0:	693b      	ldr	r3, [r7, #16]
 801efd2:	88db      	ldrh	r3, [r3, #6]
 801efd4:	b29b      	uxth	r3, r3
 801efd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801efda:	d003      	beq.n	801efe4 <etharp_input+0xdc>
 801efdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801efe0:	d01e      	beq.n	801f020 <etharp_input+0x118>
 801efe2:	e024      	b.n	801f02e <etharp_input+0x126>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 801efe4:	7dfb      	ldrb	r3, [r7, #23]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d028      	beq.n	801f03c <etharp_input+0x134>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801eff0:	693b      	ldr	r3, [r7, #16]
 801eff2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	f103 052d 	add.w	r5, r3, #45	@ 0x2d
 801effc:	683b      	ldr	r3, [r7, #0]
 801effe:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801f000:	693a      	ldr	r2, [r7, #16]
 801f002:	3208      	adds	r2, #8
      etharp_raw(netif,
 801f004:	2102      	movs	r1, #2
 801f006:	9103      	str	r1, [sp, #12]
 801f008:	f107 010c 	add.w	r1, r7, #12
 801f00c:	9102      	str	r1, [sp, #8]
 801f00e:	9201      	str	r2, [sp, #4]
 801f010:	9300      	str	r3, [sp, #0]
 801f012:	462b      	mov	r3, r5
 801f014:	4622      	mov	r2, r4
 801f016:	4601      	mov	r1, r0
 801f018:	6838      	ldr	r0, [r7, #0]
 801f01a:	f000 fb09 	bl	801f630 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 801f01e:	e00d      	b.n	801f03c <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 801f020:	f107 030c 	add.w	r3, r7, #12
 801f024:	4619      	mov	r1, r3
 801f026:	6838      	ldr	r0, [r7, #0]
 801f028:	f7fe f902 	bl	801d230 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 801f02c:	e007      	b.n	801f03e <etharp_input+0x136>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 801f02e:	4b0a      	ldr	r3, [pc, #40]	@ (801f058 <etharp_input+0x150>)
 801f030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801f032:	3301      	adds	r3, #1
 801f034:	b29a      	uxth	r2, r3
 801f036:	4b08      	ldr	r3, [pc, #32]	@ (801f058 <etharp_input+0x150>)
 801f038:	859a      	strh	r2, [r3, #44]	@ 0x2c
    break;
 801f03a:	e000      	b.n	801f03e <etharp_input+0x136>
    break;
 801f03c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801f03e:	6878      	ldr	r0, [r7, #4]
 801f040:	f7f7 f8e0 	bl	8016204 <pbuf_free>
}
 801f044:	3718      	adds	r7, #24
 801f046:	46bd      	mov	sp, r7
 801f048:	bdb0      	pop	{r4, r5, r7, pc}
 801f04a:	bf00      	nop
 801f04c:	0802788c 	.word	0x0802788c
 801f050:	080279dc 	.word	0x080279dc
 801f054:	08027904 	.word	0x08027904
 801f058:	2000bbe4 	.word	0x2000bbe4

0801f05c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801f05c:	b580      	push	{r7, lr}
 801f05e:	b086      	sub	sp, #24
 801f060:	af02      	add	r7, sp, #8
 801f062:	60f8      	str	r0, [r7, #12]
 801f064:	60b9      	str	r1, [r7, #8]
 801f066:	4613      	mov	r3, r2
 801f068:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f06a:	79fa      	ldrb	r2, [r7, #7]
 801f06c:	4944      	ldr	r1, [pc, #272]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f06e:	4613      	mov	r3, r2
 801f070:	005b      	lsls	r3, r3, #1
 801f072:	4413      	add	r3, r2
 801f074:	00db      	lsls	r3, r3, #3
 801f076:	440b      	add	r3, r1
 801f078:	3314      	adds	r3, #20
 801f07a:	781b      	ldrb	r3, [r3, #0]
 801f07c:	2b01      	cmp	r3, #1
 801f07e:	d806      	bhi.n	801f08e <etharp_output_to_arp_index+0x32>
 801f080:	4b40      	ldr	r3, [pc, #256]	@ (801f184 <etharp_output_to_arp_index+0x128>)
 801f082:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801f086:	4940      	ldr	r1, [pc, #256]	@ (801f188 <etharp_output_to_arp_index+0x12c>)
 801f088:	4840      	ldr	r0, [pc, #256]	@ (801f18c <etharp_output_to_arp_index+0x130>)
 801f08a:	f003 f8d9 	bl	8022240 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f08e:	79fa      	ldrb	r2, [r7, #7]
 801f090:	493b      	ldr	r1, [pc, #236]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f092:	4613      	mov	r3, r2
 801f094:	005b      	lsls	r3, r3, #1
 801f096:	4413      	add	r3, r2
 801f098:	00db      	lsls	r3, r3, #3
 801f09a:	440b      	add	r3, r1
 801f09c:	3314      	adds	r3, #20
 801f09e:	781b      	ldrb	r3, [r3, #0]
 801f0a0:	2b02      	cmp	r3, #2
 801f0a2:	d153      	bne.n	801f14c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801f0a4:	79fa      	ldrb	r2, [r7, #7]
 801f0a6:	4936      	ldr	r1, [pc, #216]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f0a8:	4613      	mov	r3, r2
 801f0aa:	005b      	lsls	r3, r3, #1
 801f0ac:	4413      	add	r3, r2
 801f0ae:	00db      	lsls	r3, r3, #3
 801f0b0:	440b      	add	r3, r1
 801f0b2:	3312      	adds	r3, #18
 801f0b4:	881b      	ldrh	r3, [r3, #0]
 801f0b6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801f0ba:	d919      	bls.n	801f0f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f0bc:	79fa      	ldrb	r2, [r7, #7]
 801f0be:	4613      	mov	r3, r2
 801f0c0:	005b      	lsls	r3, r3, #1
 801f0c2:	4413      	add	r3, r2
 801f0c4:	00db      	lsls	r3, r3, #3
 801f0c6:	4a2e      	ldr	r2, [pc, #184]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f0c8:	4413      	add	r3, r2
 801f0ca:	3304      	adds	r3, #4
 801f0cc:	4619      	mov	r1, r3
 801f0ce:	68f8      	ldr	r0, [r7, #12]
 801f0d0:	f000 fb6a 	bl	801f7a8 <etharp_request>
 801f0d4:	4603      	mov	r3, r0
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d138      	bne.n	801f14c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f0da:	79fa      	ldrb	r2, [r7, #7]
 801f0dc:	4928      	ldr	r1, [pc, #160]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f0de:	4613      	mov	r3, r2
 801f0e0:	005b      	lsls	r3, r3, #1
 801f0e2:	4413      	add	r3, r2
 801f0e4:	00db      	lsls	r3, r3, #3
 801f0e6:	440b      	add	r3, r1
 801f0e8:	3314      	adds	r3, #20
 801f0ea:	2203      	movs	r2, #3
 801f0ec:	701a      	strb	r2, [r3, #0]
 801f0ee:	e02d      	b.n	801f14c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801f0f0:	79fa      	ldrb	r2, [r7, #7]
 801f0f2:	4923      	ldr	r1, [pc, #140]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f0f4:	4613      	mov	r3, r2
 801f0f6:	005b      	lsls	r3, r3, #1
 801f0f8:	4413      	add	r3, r2
 801f0fa:	00db      	lsls	r3, r3, #3
 801f0fc:	440b      	add	r3, r1
 801f0fe:	3312      	adds	r3, #18
 801f100:	881b      	ldrh	r3, [r3, #0]
 801f102:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801f106:	d321      	bcc.n	801f14c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f108:	79fa      	ldrb	r2, [r7, #7]
 801f10a:	4613      	mov	r3, r2
 801f10c:	005b      	lsls	r3, r3, #1
 801f10e:	4413      	add	r3, r2
 801f110:	00db      	lsls	r3, r3, #3
 801f112:	4a1b      	ldr	r2, [pc, #108]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f114:	4413      	add	r3, r2
 801f116:	1d19      	adds	r1, r3, #4
 801f118:	79fa      	ldrb	r2, [r7, #7]
 801f11a:	4613      	mov	r3, r2
 801f11c:	005b      	lsls	r3, r3, #1
 801f11e:	4413      	add	r3, r2
 801f120:	00db      	lsls	r3, r3, #3
 801f122:	3308      	adds	r3, #8
 801f124:	4a16      	ldr	r2, [pc, #88]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f126:	4413      	add	r3, r2
 801f128:	3304      	adds	r3, #4
 801f12a:	461a      	mov	r2, r3
 801f12c:	68f8      	ldr	r0, [r7, #12]
 801f12e:	f000 fb19 	bl	801f764 <etharp_request_dst>
 801f132:	4603      	mov	r3, r0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d109      	bne.n	801f14c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f138:	79fa      	ldrb	r2, [r7, #7]
 801f13a:	4911      	ldr	r1, [pc, #68]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f13c:	4613      	mov	r3, r2
 801f13e:	005b      	lsls	r3, r3, #1
 801f140:	4413      	add	r3, r2
 801f142:	00db      	lsls	r3, r3, #3
 801f144:	440b      	add	r3, r1
 801f146:	3314      	adds	r3, #20
 801f148:	2203      	movs	r2, #3
 801f14a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 801f152:	79fa      	ldrb	r2, [r7, #7]
 801f154:	4613      	mov	r3, r2
 801f156:	005b      	lsls	r3, r3, #1
 801f158:	4413      	add	r3, r2
 801f15a:	00db      	lsls	r3, r3, #3
 801f15c:	3308      	adds	r3, #8
 801f15e:	4a08      	ldr	r2, [pc, #32]	@ (801f180 <etharp_output_to_arp_index+0x124>)
 801f160:	4413      	add	r3, r2
 801f162:	3304      	adds	r3, #4
 801f164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f168:	9200      	str	r2, [sp, #0]
 801f16a:	460a      	mov	r2, r1
 801f16c:	68b9      	ldr	r1, [r7, #8]
 801f16e:	68f8      	ldr	r0, [r7, #12]
 801f170:	f002 fa28 	bl	80215c4 <ethernet_output>
 801f174:	4603      	mov	r3, r0
}
 801f176:	4618      	mov	r0, r3
 801f178:	3710      	adds	r7, #16
 801f17a:	46bd      	mov	sp, r7
 801f17c:	bd80      	pop	{r7, pc}
 801f17e:	bf00      	nop
 801f180:	2000be10 	.word	0x2000be10
 801f184:	0802788c 	.word	0x0802788c
 801f188:	080279fc 	.word	0x080279fc
 801f18c:	08027904 	.word	0x08027904

0801f190 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b08a      	sub	sp, #40	@ 0x28
 801f194:	af02      	add	r7, sp, #8
 801f196:	60f8      	str	r0, [r7, #12]
 801f198:	60b9      	str	r1, [r7, #8]
 801f19a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f1a0:	68fb      	ldr	r3, [r7, #12]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d106      	bne.n	801f1b4 <etharp_output+0x24>
 801f1a6:	4b6c      	ldr	r3, [pc, #432]	@ (801f358 <etharp_output+0x1c8>)
 801f1a8:	f240 321b 	movw	r2, #795	@ 0x31b
 801f1ac:	496b      	ldr	r1, [pc, #428]	@ (801f35c <etharp_output+0x1cc>)
 801f1ae:	486c      	ldr	r0, [pc, #432]	@ (801f360 <etharp_output+0x1d0>)
 801f1b0:	f003 f846 	bl	8022240 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f1b4:	68bb      	ldr	r3, [r7, #8]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d106      	bne.n	801f1c8 <etharp_output+0x38>
 801f1ba:	4b67      	ldr	r3, [pc, #412]	@ (801f358 <etharp_output+0x1c8>)
 801f1bc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801f1c0:	4968      	ldr	r1, [pc, #416]	@ (801f364 <etharp_output+0x1d4>)
 801f1c2:	4867      	ldr	r0, [pc, #412]	@ (801f360 <etharp_output+0x1d0>)
 801f1c4:	f003 f83c 	bl	8022240 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d106      	bne.n	801f1dc <etharp_output+0x4c>
 801f1ce:	4b62      	ldr	r3, [pc, #392]	@ (801f358 <etharp_output+0x1c8>)
 801f1d0:	f240 321d 	movw	r2, #797	@ 0x31d
 801f1d4:	4964      	ldr	r1, [pc, #400]	@ (801f368 <etharp_output+0x1d8>)
 801f1d6:	4862      	ldr	r0, [pc, #392]	@ (801f360 <etharp_output+0x1d0>)
 801f1d8:	f003 f832 	bl	8022240 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	68f9      	ldr	r1, [r7, #12]
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	f001 f8e0 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801f1e8:	4603      	mov	r3, r0
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d002      	beq.n	801f1f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801f1ee:	4b5f      	ldr	r3, [pc, #380]	@ (801f36c <etharp_output+0x1dc>)
 801f1f0:	61fb      	str	r3, [r7, #28]
 801f1f2:	e0a1      	b.n	801f338 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f1fc:	2be0      	cmp	r3, #224	@ 0xe0
 801f1fe:	d118      	bne.n	801f232 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f200:	2301      	movs	r3, #1
 801f202:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801f204:	2300      	movs	r3, #0
 801f206:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f208:	235e      	movs	r3, #94	@ 0x5e
 801f20a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	3301      	adds	r3, #1
 801f210:	781b      	ldrb	r3, [r3, #0]
 801f212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f216:	b2db      	uxtb	r3, r3
 801f218:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	3302      	adds	r3, #2
 801f21e:	781b      	ldrb	r3, [r3, #0]
 801f220:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	3303      	adds	r3, #3
 801f226:	781b      	ldrb	r3, [r3, #0]
 801f228:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801f22a:	f107 0310 	add.w	r3, r7, #16
 801f22e:	61fb      	str	r3, [r7, #28]
 801f230:	e082      	b.n	801f338 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	681a      	ldr	r2, [r3, #0]
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	3304      	adds	r3, #4
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	405a      	eors	r2, r3
 801f23e:	68fb      	ldr	r3, [r7, #12]
 801f240:	3308      	adds	r3, #8
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	4013      	ands	r3, r2
 801f246:	2b00      	cmp	r3, #0
 801f248:	d012      	beq.n	801f270 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f250:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801f254:	4293      	cmp	r3, r2
 801f256:	d00b      	beq.n	801f270 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	330c      	adds	r3, #12
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d003      	beq.n	801f26a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	330c      	adds	r3, #12
 801f266:	61bb      	str	r3, [r7, #24]
 801f268:	e002      	b.n	801f270 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801f26a:	f06f 0303 	mvn.w	r3, #3
 801f26e:	e06f      	b.n	801f350 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f270:	4b3f      	ldr	r3, [pc, #252]	@ (801f370 <etharp_output+0x1e0>)
 801f272:	781b      	ldrb	r3, [r3, #0]
 801f274:	4619      	mov	r1, r3
 801f276:	4a3f      	ldr	r2, [pc, #252]	@ (801f374 <etharp_output+0x1e4>)
 801f278:	460b      	mov	r3, r1
 801f27a:	005b      	lsls	r3, r3, #1
 801f27c:	440b      	add	r3, r1
 801f27e:	00db      	lsls	r3, r3, #3
 801f280:	4413      	add	r3, r2
 801f282:	3314      	adds	r3, #20
 801f284:	781b      	ldrb	r3, [r3, #0]
 801f286:	2b01      	cmp	r3, #1
 801f288:	d91d      	bls.n	801f2c6 <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801f28a:	69bb      	ldr	r3, [r7, #24]
 801f28c:	681a      	ldr	r2, [r3, #0]
 801f28e:	4b38      	ldr	r3, [pc, #224]	@ (801f370 <etharp_output+0x1e0>)
 801f290:	781b      	ldrb	r3, [r3, #0]
 801f292:	4618      	mov	r0, r3
 801f294:	4937      	ldr	r1, [pc, #220]	@ (801f374 <etharp_output+0x1e4>)
 801f296:	4603      	mov	r3, r0
 801f298:	005b      	lsls	r3, r3, #1
 801f29a:	4403      	add	r3, r0
 801f29c:	00db      	lsls	r3, r3, #3
 801f29e:	440b      	add	r3, r1
 801f2a0:	3304      	adds	r3, #4
 801f2a2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	d10e      	bne.n	801f2c6 <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801f2a8:	4b33      	ldr	r3, [pc, #204]	@ (801f378 <etharp_output+0x1e8>)
 801f2aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801f2ac:	3301      	adds	r3, #1
 801f2ae:	b29a      	uxth	r2, r3
 801f2b0:	4b31      	ldr	r3, [pc, #196]	@ (801f378 <etharp_output+0x1e8>)
 801f2b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f2b4:	4b2e      	ldr	r3, [pc, #184]	@ (801f370 <etharp_output+0x1e0>)
 801f2b6:	781b      	ldrb	r3, [r3, #0]
 801f2b8:	461a      	mov	r2, r3
 801f2ba:	68b9      	ldr	r1, [r7, #8]
 801f2bc:	68f8      	ldr	r0, [r7, #12]
 801f2be:	f7ff fecd 	bl	801f05c <etharp_output_to_arp_index>
 801f2c2:	4603      	mov	r3, r0
 801f2c4:	e044      	b.n	801f350 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f2c6:	2300      	movs	r3, #0
 801f2c8:	75fb      	strb	r3, [r7, #23]
 801f2ca:	e02a      	b.n	801f322 <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f2cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801f2d0:	4928      	ldr	r1, [pc, #160]	@ (801f374 <etharp_output+0x1e4>)
 801f2d2:	4613      	mov	r3, r2
 801f2d4:	005b      	lsls	r3, r3, #1
 801f2d6:	4413      	add	r3, r2
 801f2d8:	00db      	lsls	r3, r3, #3
 801f2da:	440b      	add	r3, r1
 801f2dc:	3314      	adds	r3, #20
 801f2de:	781b      	ldrb	r3, [r3, #0]
 801f2e0:	2b01      	cmp	r3, #1
 801f2e2:	d918      	bls.n	801f316 <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801f2e4:	69bb      	ldr	r3, [r7, #24]
 801f2e6:	6819      	ldr	r1, [r3, #0]
 801f2e8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801f2ec:	4821      	ldr	r0, [pc, #132]	@ (801f374 <etharp_output+0x1e4>)
 801f2ee:	4613      	mov	r3, r2
 801f2f0:	005b      	lsls	r3, r3, #1
 801f2f2:	4413      	add	r3, r2
 801f2f4:	00db      	lsls	r3, r3, #3
 801f2f6:	4403      	add	r3, r0
 801f2f8:	3304      	adds	r3, #4
 801f2fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f2fc:	4299      	cmp	r1, r3
 801f2fe:	d10a      	bne.n	801f316 <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801f300:	7dfa      	ldrb	r2, [r7, #23]
 801f302:	4b1b      	ldr	r3, [pc, #108]	@ (801f370 <etharp_output+0x1e0>)
 801f304:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801f306:	7dfb      	ldrb	r3, [r7, #23]
 801f308:	461a      	mov	r2, r3
 801f30a:	68b9      	ldr	r1, [r7, #8]
 801f30c:	68f8      	ldr	r0, [r7, #12]
 801f30e:	f7ff fea5 	bl	801f05c <etharp_output_to_arp_index>
 801f312:	4603      	mov	r3, r0
 801f314:	e01c      	b.n	801f350 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f31a:	b2db      	uxtb	r3, r3
 801f31c:	3301      	adds	r3, #1
 801f31e:	b2db      	uxtb	r3, r3
 801f320:	75fb      	strb	r3, [r7, #23]
 801f322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f326:	2b09      	cmp	r3, #9
 801f328:	ddd0      	ble.n	801f2cc <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801f32a:	68ba      	ldr	r2, [r7, #8]
 801f32c:	69b9      	ldr	r1, [r7, #24]
 801f32e:	68f8      	ldr	r0, [r7, #12]
 801f330:	f000 f824 	bl	801f37c <etharp_query>
 801f334:	4603      	mov	r3, r0
 801f336:	e00b      	b.n	801f350 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801f33e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f342:	9300      	str	r3, [sp, #0]
 801f344:	69fb      	ldr	r3, [r7, #28]
 801f346:	68b9      	ldr	r1, [r7, #8]
 801f348:	68f8      	ldr	r0, [r7, #12]
 801f34a:	f002 f93b 	bl	80215c4 <ethernet_output>
 801f34e:	4603      	mov	r3, r0
}
 801f350:	4618      	mov	r0, r3
 801f352:	3720      	adds	r7, #32
 801f354:	46bd      	mov	sp, r7
 801f356:	bd80      	pop	{r7, pc}
 801f358:	0802788c 	.word	0x0802788c
 801f35c:	080279dc 	.word	0x080279dc
 801f360:	08027904 	.word	0x08027904
 801f364:	08027a2c 	.word	0x08027a2c
 801f368:	080279cc 	.word	0x080279cc
 801f36c:	08031664 	.word	0x08031664
 801f370:	2000bf00 	.word	0x2000bf00
 801f374:	2000be10 	.word	0x2000be10
 801f378:	2000bbe4 	.word	0x2000bbe4

0801f37c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801f37c:	b580      	push	{r7, lr}
 801f37e:	b08c      	sub	sp, #48	@ 0x30
 801f380:	af02      	add	r7, sp, #8
 801f382:	60f8      	str	r0, [r7, #12]
 801f384:	60b9      	str	r1, [r7, #8]
 801f386:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	332d      	adds	r3, #45	@ 0x2d
 801f38c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801f38e:	23ff      	movs	r3, #255	@ 0xff
 801f390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801f394:	2300      	movs	r3, #0
 801f396:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f398:	68bb      	ldr	r3, [r7, #8]
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	68f9      	ldr	r1, [r7, #12]
 801f39e:	4618      	mov	r0, r3
 801f3a0:	f001 f802 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801f3a4:	4603      	mov	r3, r0
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	d10c      	bne.n	801f3c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f3aa:	68bb      	ldr	r3, [r7, #8]
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f3b2:	2be0      	cmp	r3, #224	@ 0xe0
 801f3b4:	d006      	beq.n	801f3c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d003      	beq.n	801f3c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801f3bc:	68bb      	ldr	r3, [r7, #8]
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d102      	bne.n	801f3ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f3c4:	f06f 030f 	mvn.w	r3, #15
 801f3c8:	e11d      	b.n	801f606 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801f3ca:	68fa      	ldr	r2, [r7, #12]
 801f3cc:	2101      	movs	r1, #1
 801f3ce:	68b8      	ldr	r0, [r7, #8]
 801f3d0:	f7ff fb10 	bl	801e9f4 <etharp_find_entry>
 801f3d4:	4603      	mov	r3, r0
 801f3d6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801f3d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	da0b      	bge.n	801f3f8 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d005      	beq.n	801f3f2 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801f3e6:	4b8a      	ldr	r3, [pc, #552]	@ (801f610 <etharp_query+0x294>)
 801f3e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f3ea:	3301      	adds	r3, #1
 801f3ec:	b29a      	uxth	r2, r3
 801f3ee:	4b88      	ldr	r3, [pc, #544]	@ (801f610 <etharp_query+0x294>)
 801f3f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i;
 801f3f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f3f6:	e106      	b.n	801f606 <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801f3f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f3fc:	4985      	ldr	r1, [pc, #532]	@ (801f614 <etharp_query+0x298>)
 801f3fe:	4613      	mov	r3, r2
 801f400:	005b      	lsls	r3, r3, #1
 801f402:	4413      	add	r3, r2
 801f404:	00db      	lsls	r3, r3, #3
 801f406:	440b      	add	r3, r1
 801f408:	3314      	adds	r3, #20
 801f40a:	781b      	ldrb	r3, [r3, #0]
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d117      	bne.n	801f440 <etharp_query+0xc4>
    is_new_entry = 1;
 801f410:	2301      	movs	r3, #1
 801f412:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f414:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f418:	497e      	ldr	r1, [pc, #504]	@ (801f614 <etharp_query+0x298>)
 801f41a:	4613      	mov	r3, r2
 801f41c:	005b      	lsls	r3, r3, #1
 801f41e:	4413      	add	r3, r2
 801f420:	00db      	lsls	r3, r3, #3
 801f422:	440b      	add	r3, r1
 801f424:	3314      	adds	r3, #20
 801f426:	2201      	movs	r2, #1
 801f428:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801f42a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f42e:	4979      	ldr	r1, [pc, #484]	@ (801f614 <etharp_query+0x298>)
 801f430:	4613      	mov	r3, r2
 801f432:	005b      	lsls	r3, r3, #1
 801f434:	4413      	add	r3, r2
 801f436:	00db      	lsls	r3, r3, #3
 801f438:	440b      	add	r3, r1
 801f43a:	3308      	adds	r3, #8
 801f43c:	68fa      	ldr	r2, [r7, #12]
 801f43e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801f440:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f444:	4973      	ldr	r1, [pc, #460]	@ (801f614 <etharp_query+0x298>)
 801f446:	4613      	mov	r3, r2
 801f448:	005b      	lsls	r3, r3, #1
 801f44a:	4413      	add	r3, r2
 801f44c:	00db      	lsls	r3, r3, #3
 801f44e:	440b      	add	r3, r1
 801f450:	3314      	adds	r3, #20
 801f452:	781b      	ldrb	r3, [r3, #0]
 801f454:	2b01      	cmp	r3, #1
 801f456:	d012      	beq.n	801f47e <etharp_query+0x102>
 801f458:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f45c:	496d      	ldr	r1, [pc, #436]	@ (801f614 <etharp_query+0x298>)
 801f45e:	4613      	mov	r3, r2
 801f460:	005b      	lsls	r3, r3, #1
 801f462:	4413      	add	r3, r2
 801f464:	00db      	lsls	r3, r3, #3
 801f466:	440b      	add	r3, r1
 801f468:	3314      	adds	r3, #20
 801f46a:	781b      	ldrb	r3, [r3, #0]
 801f46c:	2b01      	cmp	r3, #1
 801f46e:	d806      	bhi.n	801f47e <etharp_query+0x102>
 801f470:	4b69      	ldr	r3, [pc, #420]	@ (801f618 <etharp_query+0x29c>)
 801f472:	f240 32c7 	movw	r2, #967	@ 0x3c7
 801f476:	4969      	ldr	r1, [pc, #420]	@ (801f61c <etharp_query+0x2a0>)
 801f478:	4869      	ldr	r0, [pc, #420]	@ (801f620 <etharp_query+0x2a4>)
 801f47a:	f002 fee1 	bl	8022240 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801f47e:	6a3b      	ldr	r3, [r7, #32]
 801f480:	2b00      	cmp	r3, #0
 801f482:	d102      	bne.n	801f48a <etharp_query+0x10e>
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	2b00      	cmp	r3, #0
 801f488:	d10c      	bne.n	801f4a4 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801f48a:	68b9      	ldr	r1, [r7, #8]
 801f48c:	68f8      	ldr	r0, [r7, #12]
 801f48e:	f000 f98b 	bl	801f7a8 <etharp_request>
 801f492:	4603      	mov	r3, r0
 801f494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d102      	bne.n	801f4a4 <etharp_query+0x128>
      return result;
 801f49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801f4a2:	e0b0      	b.n	801f606 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d106      	bne.n	801f4b8 <etharp_query+0x13c>
 801f4aa:	4b5b      	ldr	r3, [pc, #364]	@ (801f618 <etharp_query+0x29c>)
 801f4ac:	f240 32db 	movw	r2, #987	@ 0x3db
 801f4b0:	495c      	ldr	r1, [pc, #368]	@ (801f624 <etharp_query+0x2a8>)
 801f4b2:	485b      	ldr	r0, [pc, #364]	@ (801f620 <etharp_query+0x2a4>)
 801f4b4:	f002 fec4 	bl	8022240 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f4b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f4bc:	4955      	ldr	r1, [pc, #340]	@ (801f614 <etharp_query+0x298>)
 801f4be:	4613      	mov	r3, r2
 801f4c0:	005b      	lsls	r3, r3, #1
 801f4c2:	4413      	add	r3, r2
 801f4c4:	00db      	lsls	r3, r3, #3
 801f4c6:	440b      	add	r3, r1
 801f4c8:	3314      	adds	r3, #20
 801f4ca:	781b      	ldrb	r3, [r3, #0]
 801f4cc:	2b01      	cmp	r3, #1
 801f4ce:	d918      	bls.n	801f502 <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801f4d0:	7cfa      	ldrb	r2, [r7, #19]
 801f4d2:	4b55      	ldr	r3, [pc, #340]	@ (801f628 <etharp_query+0x2ac>)
 801f4d4:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f4d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f4da:	4613      	mov	r3, r2
 801f4dc:	005b      	lsls	r3, r3, #1
 801f4de:	4413      	add	r3, r2
 801f4e0:	00db      	lsls	r3, r3, #3
 801f4e2:	3308      	adds	r3, #8
 801f4e4:	4a4b      	ldr	r2, [pc, #300]	@ (801f614 <etharp_query+0x298>)
 801f4e6:	4413      	add	r3, r2
 801f4e8:	3304      	adds	r3, #4
 801f4ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f4ee:	9200      	str	r2, [sp, #0]
 801f4f0:	697a      	ldr	r2, [r7, #20]
 801f4f2:	6879      	ldr	r1, [r7, #4]
 801f4f4:	68f8      	ldr	r0, [r7, #12]
 801f4f6:	f002 f865 	bl	80215c4 <ethernet_output>
 801f4fa:	4603      	mov	r3, r0
 801f4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801f500:	e07f      	b.n	801f602 <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f502:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f506:	4943      	ldr	r1, [pc, #268]	@ (801f614 <etharp_query+0x298>)
 801f508:	4613      	mov	r3, r2
 801f50a:	005b      	lsls	r3, r3, #1
 801f50c:	4413      	add	r3, r2
 801f50e:	00db      	lsls	r3, r3, #3
 801f510:	440b      	add	r3, r1
 801f512:	3314      	adds	r3, #20
 801f514:	781b      	ldrb	r3, [r3, #0]
 801f516:	2b01      	cmp	r3, #1
 801f518:	d173      	bne.n	801f602 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f51a:	2300      	movs	r3, #0
 801f51c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f522:	e01a      	b.n	801f55a <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f524:	69fb      	ldr	r3, [r7, #28]
 801f526:	895a      	ldrh	r2, [r3, #10]
 801f528:	69fb      	ldr	r3, [r7, #28]
 801f52a:	891b      	ldrh	r3, [r3, #8]
 801f52c:	429a      	cmp	r2, r3
 801f52e:	d10a      	bne.n	801f546 <etharp_query+0x1ca>
 801f530:	69fb      	ldr	r3, [r7, #28]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	2b00      	cmp	r3, #0
 801f536:	d006      	beq.n	801f546 <etharp_query+0x1ca>
 801f538:	4b37      	ldr	r3, [pc, #220]	@ (801f618 <etharp_query+0x29c>)
 801f53a:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801f53e:	493b      	ldr	r1, [pc, #236]	@ (801f62c <etharp_query+0x2b0>)
 801f540:	4837      	ldr	r0, [pc, #220]	@ (801f620 <etharp_query+0x2a4>)
 801f542:	f002 fe7d 	bl	8022240 <iprintf>
      if (p->type != PBUF_ROM) {
 801f546:	69fb      	ldr	r3, [r7, #28]
 801f548:	7b1b      	ldrb	r3, [r3, #12]
 801f54a:	2b01      	cmp	r3, #1
 801f54c:	d002      	beq.n	801f554 <etharp_query+0x1d8>
        copy_needed = 1;
 801f54e:	2301      	movs	r3, #1
 801f550:	61bb      	str	r3, [r7, #24]
        break;
 801f552:	e005      	b.n	801f560 <etharp_query+0x1e4>
      }
      p = p->next;
 801f554:	69fb      	ldr	r3, [r7, #28]
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f55a:	69fb      	ldr	r3, [r7, #28]
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d1e1      	bne.n	801f524 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 801f560:	69bb      	ldr	r3, [r7, #24]
 801f562:	2b00      	cmp	r3, #0
 801f564:	d017      	beq.n	801f596 <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801f566:	69fb      	ldr	r3, [r7, #28]
 801f568:	891b      	ldrh	r3, [r3, #8]
 801f56a:	2200      	movs	r2, #0
 801f56c:	4619      	mov	r1, r3
 801f56e:	2002      	movs	r0, #2
 801f570:	f7f6 fad0 	bl	8015b14 <pbuf_alloc>
 801f574:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801f576:	69fb      	ldr	r3, [r7, #28]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d011      	beq.n	801f5a0 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 801f57c:	6879      	ldr	r1, [r7, #4]
 801f57e:	69f8      	ldr	r0, [r7, #28]
 801f580:	f7f6 ff72 	bl	8016468 <pbuf_copy>
 801f584:	4603      	mov	r3, r0
 801f586:	2b00      	cmp	r3, #0
 801f588:	d00a      	beq.n	801f5a0 <etharp_query+0x224>
          pbuf_free(p);
 801f58a:	69f8      	ldr	r0, [r7, #28]
 801f58c:	f7f6 fe3a 	bl	8016204 <pbuf_free>
          p = NULL;
 801f590:	2300      	movs	r3, #0
 801f592:	61fb      	str	r3, [r7, #28]
 801f594:	e004      	b.n	801f5a0 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f59a:	69f8      	ldr	r0, [r7, #28]
 801f59c:	f7f6 fedc 	bl	8016358 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f5a0:	69fb      	ldr	r3, [r7, #28]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d024      	beq.n	801f5f0 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f5a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5aa:	491a      	ldr	r1, [pc, #104]	@ (801f614 <etharp_query+0x298>)
 801f5ac:	4613      	mov	r3, r2
 801f5ae:	005b      	lsls	r3, r3, #1
 801f5b0:	4413      	add	r3, r2
 801f5b2:	00db      	lsls	r3, r3, #3
 801f5b4:	440b      	add	r3, r1
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d00b      	beq.n	801f5d4 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801f5bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5c0:	4914      	ldr	r1, [pc, #80]	@ (801f614 <etharp_query+0x298>)
 801f5c2:	4613      	mov	r3, r2
 801f5c4:	005b      	lsls	r3, r3, #1
 801f5c6:	4413      	add	r3, r2
 801f5c8:	00db      	lsls	r3, r3, #3
 801f5ca:	440b      	add	r3, r1
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f7f6 fe18 	bl	8016204 <pbuf_free>
      }
      arp_table[i].q = p;
 801f5d4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5d8:	490e      	ldr	r1, [pc, #56]	@ (801f614 <etharp_query+0x298>)
 801f5da:	4613      	mov	r3, r2
 801f5dc:	005b      	lsls	r3, r3, #1
 801f5de:	4413      	add	r3, r2
 801f5e0:	00db      	lsls	r3, r3, #3
 801f5e2:	440b      	add	r3, r1
 801f5e4:	69fa      	ldr	r2, [r7, #28]
 801f5e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f5e8:	2300      	movs	r3, #0
 801f5ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801f5ee:	e008      	b.n	801f602 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801f5f0:	4b07      	ldr	r3, [pc, #28]	@ (801f610 <etharp_query+0x294>)
 801f5f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f5f4:	3301      	adds	r3, #1
 801f5f6:	b29a      	uxth	r2, r3
 801f5f8:	4b05      	ldr	r3, [pc, #20]	@ (801f610 <etharp_query+0x294>)
 801f5fa:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f5fc:	23ff      	movs	r3, #255	@ 0xff
 801f5fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801f602:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801f606:	4618      	mov	r0, r3
 801f608:	3728      	adds	r7, #40	@ 0x28
 801f60a:	46bd      	mov	sp, r7
 801f60c:	bd80      	pop	{r7, pc}
 801f60e:	bf00      	nop
 801f610:	2000bbe4 	.word	0x2000bbe4
 801f614:	2000be10 	.word	0x2000be10
 801f618:	0802788c 	.word	0x0802788c
 801f61c:	08027a38 	.word	0x08027a38
 801f620:	08027904 	.word	0x08027904
 801f624:	08027a2c 	.word	0x08027a2c
 801f628:	2000bf00 	.word	0x2000bf00
 801f62c:	08027a60 	.word	0x08027a60

0801f630 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f630:	b580      	push	{r7, lr}
 801f632:	b08a      	sub	sp, #40	@ 0x28
 801f634:	af02      	add	r7, sp, #8
 801f636:	60f8      	str	r0, [r7, #12]
 801f638:	60b9      	str	r1, [r7, #8]
 801f63a:	607a      	str	r2, [r7, #4]
 801f63c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f63e:	2300      	movs	r3, #0
 801f640:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	2b00      	cmp	r3, #0
 801f646:	d106      	bne.n	801f656 <etharp_raw+0x26>
 801f648:	4b40      	ldr	r3, [pc, #256]	@ (801f74c <etharp_raw+0x11c>)
 801f64a:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 801f64e:	4940      	ldr	r1, [pc, #256]	@ (801f750 <etharp_raw+0x120>)
 801f650:	4840      	ldr	r0, [pc, #256]	@ (801f754 <etharp_raw+0x124>)
 801f652:	f002 fdf5 	bl	8022240 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f656:	2200      	movs	r2, #0
 801f658:	211c      	movs	r1, #28
 801f65a:	2002      	movs	r0, #2
 801f65c:	f7f6 fa5a 	bl	8015b14 <pbuf_alloc>
 801f660:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f662:	69bb      	ldr	r3, [r7, #24]
 801f664:	2b00      	cmp	r3, #0
 801f666:	d108      	bne.n	801f67a <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801f668:	4b3b      	ldr	r3, [pc, #236]	@ (801f758 <etharp_raw+0x128>)
 801f66a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f66c:	3301      	adds	r3, #1
 801f66e:	b29a      	uxth	r2, r3
 801f670:	4b39      	ldr	r3, [pc, #228]	@ (801f758 <etharp_raw+0x128>)
 801f672:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801f674:	f04f 33ff 	mov.w	r3, #4294967295
 801f678:	e063      	b.n	801f742 <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f67a:	69bb      	ldr	r3, [r7, #24]
 801f67c:	895b      	ldrh	r3, [r3, #10]
 801f67e:	2b1b      	cmp	r3, #27
 801f680:	d806      	bhi.n	801f690 <etharp_raw+0x60>
 801f682:	4b32      	ldr	r3, [pc, #200]	@ (801f74c <etharp_raw+0x11c>)
 801f684:	f240 4263 	movw	r2, #1123	@ 0x463
 801f688:	4934      	ldr	r1, [pc, #208]	@ (801f75c <etharp_raw+0x12c>)
 801f68a:	4832      	ldr	r0, [pc, #200]	@ (801f754 <etharp_raw+0x124>)
 801f68c:	f002 fdd8 	bl	8022240 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f690:	69bb      	ldr	r3, [r7, #24]
 801f692:	685b      	ldr	r3, [r3, #4]
 801f694:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f696:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f698:	4618      	mov	r0, r3
 801f69a:	f7f5 fb0d 	bl	8014cb8 <lwip_htons>
 801f69e:	4603      	mov	r3, r0
 801f6a0:	461a      	mov	r2, r3
 801f6a2:	697b      	ldr	r3, [r7, #20]
 801f6a4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f6ac:	2b06      	cmp	r3, #6
 801f6ae:	d006      	beq.n	801f6be <etharp_raw+0x8e>
 801f6b0:	4b26      	ldr	r3, [pc, #152]	@ (801f74c <etharp_raw+0x11c>)
 801f6b2:	f240 426a 	movw	r2, #1130	@ 0x46a
 801f6b6:	492a      	ldr	r1, [pc, #168]	@ (801f760 <etharp_raw+0x130>)
 801f6b8:	4826      	ldr	r0, [pc, #152]	@ (801f754 <etharp_raw+0x124>)
 801f6ba:	f002 fdc1 	bl	8022240 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801f6be:	697b      	ldr	r3, [r7, #20]
 801f6c0:	3308      	adds	r3, #8
 801f6c2:	2206      	movs	r2, #6
 801f6c4:	6839      	ldr	r1, [r7, #0]
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	f003 f8b5 	bl	8022836 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	3312      	adds	r3, #18
 801f6d0:	2206      	movs	r2, #6
 801f6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	f003 f8ae 	bl	8022836 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	330e      	adds	r3, #14
 801f6de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f6e0:	6812      	ldr	r2, [r2, #0]
 801f6e2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801f6e4:	697b      	ldr	r3, [r7, #20]
 801f6e6:	3318      	adds	r3, #24
 801f6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f6ea:	6812      	ldr	r2, [r2, #0]
 801f6ec:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801f6ee:	697b      	ldr	r3, [r7, #20]
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	701a      	strb	r2, [r3, #0]
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	f042 0201 	orr.w	r2, r2, #1
 801f6fa:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f6fc:	697b      	ldr	r3, [r7, #20]
 801f6fe:	2200      	movs	r2, #0
 801f700:	f042 0208 	orr.w	r2, r2, #8
 801f704:	709a      	strb	r2, [r3, #2]
 801f706:	2200      	movs	r2, #0
 801f708:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f70a:	697b      	ldr	r3, [r7, #20]
 801f70c:	2206      	movs	r2, #6
 801f70e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f710:	697b      	ldr	r3, [r7, #20]
 801f712:	2204      	movs	r2, #4
 801f714:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f716:	f640 0306 	movw	r3, #2054	@ 0x806
 801f71a:	9300      	str	r3, [sp, #0]
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	68ba      	ldr	r2, [r7, #8]
 801f720:	69b9      	ldr	r1, [r7, #24]
 801f722:	68f8      	ldr	r0, [r7, #12]
 801f724:	f001 ff4e 	bl	80215c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801f728:	4b0b      	ldr	r3, [pc, #44]	@ (801f758 <etharp_raw+0x128>)
 801f72a:	8b1b      	ldrh	r3, [r3, #24]
 801f72c:	3301      	adds	r3, #1
 801f72e:	b29a      	uxth	r2, r3
 801f730:	4b09      	ldr	r3, [pc, #36]	@ (801f758 <etharp_raw+0x128>)
 801f732:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801f734:	69b8      	ldr	r0, [r7, #24]
 801f736:	f7f6 fd65 	bl	8016204 <pbuf_free>
  p = NULL;
 801f73a:	2300      	movs	r3, #0
 801f73c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f73e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f742:	4618      	mov	r0, r3
 801f744:	3720      	adds	r7, #32
 801f746:	46bd      	mov	sp, r7
 801f748:	bd80      	pop	{r7, pc}
 801f74a:	bf00      	nop
 801f74c:	0802788c 	.word	0x0802788c
 801f750:	080279dc 	.word	0x080279dc
 801f754:	08027904 	.word	0x08027904
 801f758:	2000bbe4 	.word	0x2000bbe4
 801f75c:	08027a7c 	.word	0x08027a7c
 801f760:	08027ab0 	.word	0x08027ab0

0801f764 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801f764:	b580      	push	{r7, lr}
 801f766:	b088      	sub	sp, #32
 801f768:	af04      	add	r7, sp, #16
 801f76a:	60f8      	str	r0, [r7, #12]
 801f76c:	60b9      	str	r1, [r7, #8]
 801f76e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f780:	2201      	movs	r2, #1
 801f782:	9203      	str	r2, [sp, #12]
 801f784:	68ba      	ldr	r2, [r7, #8]
 801f786:	9202      	str	r2, [sp, #8]
 801f788:	4a06      	ldr	r2, [pc, #24]	@ (801f7a4 <etharp_request_dst+0x40>)
 801f78a:	9201      	str	r2, [sp, #4]
 801f78c:	9300      	str	r3, [sp, #0]
 801f78e:	4603      	mov	r3, r0
 801f790:	687a      	ldr	r2, [r7, #4]
 801f792:	68f8      	ldr	r0, [r7, #12]
 801f794:	f7ff ff4c 	bl	801f630 <etharp_raw>
 801f798:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f79a:	4618      	mov	r0, r3
 801f79c:	3710      	adds	r7, #16
 801f79e:	46bd      	mov	sp, r7
 801f7a0:	bd80      	pop	{r7, pc}
 801f7a2:	bf00      	nop
 801f7a4:	0803166c 	.word	0x0803166c

0801f7a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f7a8:	b580      	push	{r7, lr}
 801f7aa:	b082      	sub	sp, #8
 801f7ac:	af00      	add	r7, sp, #0
 801f7ae:	6078      	str	r0, [r7, #4]
 801f7b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f7b2:	4a05      	ldr	r2, [pc, #20]	@ (801f7c8 <etharp_request+0x20>)
 801f7b4:	6839      	ldr	r1, [r7, #0]
 801f7b6:	6878      	ldr	r0, [r7, #4]
 801f7b8:	f7ff ffd4 	bl	801f764 <etharp_request_dst>
 801f7bc:	4603      	mov	r3, r0
}
 801f7be:	4618      	mov	r0, r3
 801f7c0:	3708      	adds	r7, #8
 801f7c2:	46bd      	mov	sp, r7
 801f7c4:	bd80      	pop	{r7, pc}
 801f7c6:	bf00      	nop
 801f7c8:	08031664 	.word	0x08031664

0801f7cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b08e      	sub	sp, #56	@ 0x38
 801f7d0:	af04      	add	r7, sp, #16
 801f7d2:	6078      	str	r0, [r7, #4]
 801f7d4:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 801f7d6:	4baa      	ldr	r3, [pc, #680]	@ (801fa80 <icmp_input+0x2b4>)
 801f7d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f7dc:	3301      	adds	r3, #1
 801f7de:	b29a      	uxth	r2, r3
 801f7e0:	4ba7      	ldr	r3, [pc, #668]	@ (801fa80 <icmp_input+0x2b4>)
 801f7e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 801f7e6:	4ba6      	ldr	r3, [pc, #664]	@ (801fa80 <icmp_input+0x2b4>)
 801f7e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801f7ec:	3301      	adds	r3, #1
 801f7ee:	4aa4      	ldr	r2, [pc, #656]	@ (801fa80 <icmp_input+0x2b4>)
 801f7f0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c

  iphdr_in = ip4_current_header();
 801f7f4:	4ba3      	ldr	r3, [pc, #652]	@ (801fa84 <icmp_input+0x2b8>)
 801f7f6:	689b      	ldr	r3, [r3, #8]
 801f7f8:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801f7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7fc:	781b      	ldrb	r3, [r3, #0]
 801f7fe:	f003 030f 	and.w	r3, r3, #15
 801f802:	b29b      	uxth	r3, r3
 801f804:	009b      	lsls	r3, r3, #2
 801f806:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801f808:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f80a:	2b13      	cmp	r3, #19
 801f80c:	f240 817f 	bls.w	801fb0e <icmp_input+0x342>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	895b      	ldrh	r3, [r3, #10]
 801f814:	2b03      	cmp	r3, #3
 801f816:	f240 817c 	bls.w	801fb12 <icmp_input+0x346>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	685b      	ldr	r3, [r3, #4]
 801f81e:	781b      	ldrb	r3, [r3, #0]
 801f820:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f824:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d002      	beq.n	801f832 <icmp_input+0x66>
 801f82c:	2b08      	cmp	r3, #8
 801f82e:	d008      	beq.n	801f842 <icmp_input+0x76>
 801f830:	e0dd      	b.n	801f9ee <icmp_input+0x222>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
 801f832:	4b93      	ldr	r3, [pc, #588]	@ (801fa80 <icmp_input+0x2b4>)
 801f834:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801f838:	3301      	adds	r3, #1
 801f83a:	4a91      	ldr	r2, [pc, #580]	@ (801fa80 <icmp_input+0x2b4>)
 801f83c:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
    break;
 801f840:	e161      	b.n	801fb06 <icmp_input+0x33a>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
 801f842:	4b8f      	ldr	r3, [pc, #572]	@ (801fa80 <icmp_input+0x2b4>)
 801f844:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801f848:	3301      	adds	r3, #1
 801f84a:	4a8d      	ldr	r2, [pc, #564]	@ (801fa80 <icmp_input+0x2b4>)
 801f84c:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
    src = ip4_current_dest_addr();
 801f850:	4b8d      	ldr	r3, [pc, #564]	@ (801fa88 <icmp_input+0x2bc>)
 801f852:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f854:	4b8b      	ldr	r3, [pc, #556]	@ (801fa84 <icmp_input+0x2b8>)
 801f856:	695b      	ldr	r3, [r3, #20]
 801f858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f85c:	2be0      	cmp	r3, #224	@ 0xe0
 801f85e:	f000 816e 	beq.w	801fb3e <icmp_input+0x372>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f862:	4b88      	ldr	r3, [pc, #544]	@ (801fa84 <icmp_input+0x2b8>)
 801f864:	695b      	ldr	r3, [r3, #20]
 801f866:	4a87      	ldr	r2, [pc, #540]	@ (801fa84 <icmp_input+0x2b8>)
 801f868:	6812      	ldr	r2, [r2, #0]
 801f86a:	4611      	mov	r1, r2
 801f86c:	4618      	mov	r0, r3
 801f86e:	f000 fd9b 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801f872:	4603      	mov	r3, r0
 801f874:	2b00      	cmp	r3, #0
 801f876:	f040 8164 	bne.w	801fb42 <icmp_input+0x376>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	891b      	ldrh	r3, [r3, #8]
 801f87e:	2b07      	cmp	r3, #7
 801f880:	f240 8149 	bls.w	801fb16 <icmp_input+0x34a>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f884:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f886:	330e      	adds	r3, #14
 801f888:	b29b      	uxth	r3, r3
 801f88a:	b21b      	sxth	r3, r3
 801f88c:	4619      	mov	r1, r3
 801f88e:	6878      	ldr	r0, [r7, #4]
 801f890:	f7f6 fc94 	bl	80161bc <pbuf_header>
 801f894:	4603      	mov	r3, r0
 801f896:	2b00      	cmp	r3, #0
 801f898:	d046      	beq.n	801f928 <icmp_input+0x15c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	891a      	ldrh	r2, [r3, #8]
 801f89e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8a0:	4413      	add	r3, r2
 801f8a2:	b29b      	uxth	r3, r3
 801f8a4:	2200      	movs	r2, #0
 801f8a6:	4619      	mov	r1, r3
 801f8a8:	2002      	movs	r0, #2
 801f8aa:	f7f6 f933 	bl	8015b14 <pbuf_alloc>
 801f8ae:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801f8b0:	69bb      	ldr	r3, [r7, #24]
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	f000 8147 	beq.w	801fb46 <icmp_input+0x37a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f8b8:	69bb      	ldr	r3, [r7, #24]
 801f8ba:	895b      	ldrh	r3, [r3, #10]
 801f8bc:	461a      	mov	r2, r3
 801f8be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8c0:	3308      	adds	r3, #8
 801f8c2:	429a      	cmp	r2, r3
 801f8c4:	d203      	bcs.n	801f8ce <icmp_input+0x102>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801f8c6:	69b8      	ldr	r0, [r7, #24]
 801f8c8:	f7f6 fc9c 	bl	8016204 <pbuf_free>
        goto icmperr;
 801f8cc:	e13c      	b.n	801fb48 <icmp_input+0x37c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801f8ce:	69bb      	ldr	r3, [r7, #24]
 801f8d0:	685b      	ldr	r3, [r3, #4]
 801f8d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801f8d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f8d6:	4618      	mov	r0, r3
 801f8d8:	f002 ffad 	bl	8022836 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801f8dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8de:	425b      	negs	r3, r3
 801f8e0:	b29b      	uxth	r3, r3
 801f8e2:	b21b      	sxth	r3, r3
 801f8e4:	4619      	mov	r1, r3
 801f8e6:	69b8      	ldr	r0, [r7, #24]
 801f8e8:	f7f6 fc68 	bl	80161bc <pbuf_header>
 801f8ec:	4603      	mov	r3, r0
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d009      	beq.n	801f906 <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f8f2:	4b66      	ldr	r3, [pc, #408]	@ (801fa8c <icmp_input+0x2c0>)
 801f8f4:	22af      	movs	r2, #175	@ 0xaf
 801f8f6:	4966      	ldr	r1, [pc, #408]	@ (801fa90 <icmp_input+0x2c4>)
 801f8f8:	4866      	ldr	r0, [pc, #408]	@ (801fa94 <icmp_input+0x2c8>)
 801f8fa:	f002 fca1 	bl	8022240 <iprintf>
        pbuf_free(r);
 801f8fe:	69b8      	ldr	r0, [r7, #24]
 801f900:	f7f6 fc80 	bl	8016204 <pbuf_free>
        goto icmperr;
 801f904:	e120      	b.n	801fb48 <icmp_input+0x37c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801f906:	6879      	ldr	r1, [r7, #4]
 801f908:	69b8      	ldr	r0, [r7, #24]
 801f90a:	f7f6 fdad 	bl	8016468 <pbuf_copy>
 801f90e:	4603      	mov	r3, r0
 801f910:	2b00      	cmp	r3, #0
 801f912:	d003      	beq.n	801f91c <icmp_input+0x150>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801f914:	69b8      	ldr	r0, [r7, #24]
 801f916:	f7f6 fc75 	bl	8016204 <pbuf_free>
        goto icmperr;
 801f91a:	e115      	b.n	801fb48 <icmp_input+0x37c>
      }
      /* free the original p */
      pbuf_free(p);
 801f91c:	6878      	ldr	r0, [r7, #4]
 801f91e:	f7f6 fc71 	bl	8016204 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801f922:	69bb      	ldr	r3, [r7, #24]
 801f924:	607b      	str	r3, [r7, #4]
 801f926:	e015      	b.n	801f954 <icmp_input+0x188>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f92a:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801f92e:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801f932:	33f2      	adds	r3, #242	@ 0xf2
 801f934:	b29b      	uxth	r3, r3
 801f936:	b21b      	sxth	r3, r3
 801f938:	4619      	mov	r1, r3
 801f93a:	6878      	ldr	r0, [r7, #4]
 801f93c:	f7f6 fc3e 	bl	80161bc <pbuf_header>
 801f940:	4603      	mov	r3, r0
 801f942:	2b00      	cmp	r3, #0
 801f944:	d006      	beq.n	801f954 <icmp_input+0x188>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f946:	4b51      	ldr	r3, [pc, #324]	@ (801fa8c <icmp_input+0x2c0>)
 801f948:	22c0      	movs	r2, #192	@ 0xc0
 801f94a:	4953      	ldr	r1, [pc, #332]	@ (801fa98 <icmp_input+0x2cc>)
 801f94c:	4851      	ldr	r0, [pc, #324]	@ (801fa94 <icmp_input+0x2c8>)
 801f94e:	f002 fc77 	bl	8022240 <iprintf>
        goto icmperr;
 801f952:	e0f9      	b.n	801fb48 <icmp_input+0x37c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	685b      	ldr	r3, [r3, #4]
 801f958:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801f95a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801f95e:	4619      	mov	r1, r3
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	f7f6 fc2b 	bl	80161bc <pbuf_header>
 801f966:	4603      	mov	r3, r0
 801f968:	2b00      	cmp	r3, #0
 801f96a:	f040 80cb 	bne.w	801fb04 <icmp_input+0x338>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	685b      	ldr	r3, [r3, #4]
 801f972:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801f974:	69fb      	ldr	r3, [r7, #28]
 801f976:	681a      	ldr	r2, [r3, #0]
 801f978:	693b      	ldr	r3, [r7, #16]
 801f97a:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f97c:	4b41      	ldr	r3, [pc, #260]	@ (801fa84 <icmp_input+0x2b8>)
 801f97e:	691a      	ldr	r2, [r3, #16]
 801f980:	693b      	ldr	r3, [r7, #16]
 801f982:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f984:	697b      	ldr	r3, [r7, #20]
 801f986:	2200      	movs	r2, #0
 801f988:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801f98a:	697b      	ldr	r3, [r7, #20]
 801f98c:	2200      	movs	r2, #0
 801f98e:	709a      	strb	r2, [r3, #2]
 801f990:	2200      	movs	r2, #0
 801f992:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801f994:	693b      	ldr	r3, [r7, #16]
 801f996:	22ff      	movs	r2, #255	@ 0xff
 801f998:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801f99a:	693b      	ldr	r3, [r7, #16]
 801f99c:	2200      	movs	r2, #0
 801f99e:	729a      	strb	r2, [r3, #10]
 801f9a0:	2200      	movs	r2, #0
 801f9a2:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 801f9a4:	4b36      	ldr	r3, [pc, #216]	@ (801fa80 <icmp_input+0x2b4>)
 801f9a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f9aa:	3301      	adds	r3, #1
 801f9ac:	b29a      	uxth	r2, r3
 801f9ae:	4b34      	ldr	r3, [pc, #208]	@ (801fa80 <icmp_input+0x2b4>)
 801f9b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
 801f9b4:	4b32      	ldr	r3, [pc, #200]	@ (801fa80 <icmp_input+0x2b4>)
 801f9b6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801f9ba:	3301      	adds	r3, #1
 801f9bc:	4a30      	ldr	r2, [pc, #192]	@ (801fa80 <icmp_input+0x2b4>)
 801f9be:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
 801f9c2:	4b2f      	ldr	r3, [pc, #188]	@ (801fa80 <icmp_input+0x2b4>)
 801f9c4:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 801f9c8:	3301      	adds	r3, #1
 801f9ca:	4a2d      	ldr	r2, [pc, #180]	@ (801fa80 <icmp_input+0x2b4>)
 801f9cc:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f9d0:	683b      	ldr	r3, [r7, #0]
 801f9d2:	9302      	str	r3, [sp, #8]
 801f9d4:	2301      	movs	r3, #1
 801f9d6:	9301      	str	r3, [sp, #4]
 801f9d8:	2300      	movs	r3, #0
 801f9da:	9300      	str	r3, [sp, #0]
 801f9dc:	23ff      	movs	r3, #255	@ 0xff
 801f9de:	2200      	movs	r2, #0
 801f9e0:	69f9      	ldr	r1, [r7, #28]
 801f9e2:	6878      	ldr	r0, [r7, #4]
 801f9e4:	f000 fbee 	bl	80201c4 <ip4_output_if>
 801f9e8:	4603      	mov	r3, r0
 801f9ea:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801f9ec:	e08a      	b.n	801fb04 <icmp_input+0x338>
  default:
    if (type == ICMP_DUR) {
 801f9ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f9f2:	2b03      	cmp	r3, #3
 801f9f4:	d107      	bne.n	801fa06 <icmp_input+0x23a>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
 801f9f6:	4b22      	ldr	r3, [pc, #136]	@ (801fa80 <icmp_input+0x2b4>)
 801f9f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801f9fc:	3301      	adds	r3, #1
 801f9fe:	4a20      	ldr	r2, [pc, #128]	@ (801fa80 <icmp_input+0x2b4>)
 801fa00:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 801fa04:	e06d      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_TE) {
 801fa06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa0a:	2b0b      	cmp	r3, #11
 801fa0c:	d107      	bne.n	801fa1e <icmp_input+0x252>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
 801fa0e:	4b1c      	ldr	r3, [pc, #112]	@ (801fa80 <icmp_input+0x2b4>)
 801fa10:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801fa14:	3301      	adds	r3, #1
 801fa16:	4a1a      	ldr	r2, [pc, #104]	@ (801fa80 <icmp_input+0x2b4>)
 801fa18:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
 801fa1c:	e061      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_PP) {
 801fa1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa22:	2b0c      	cmp	r3, #12
 801fa24:	d107      	bne.n	801fa36 <icmp_input+0x26a>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
 801fa26:	4b16      	ldr	r3, [pc, #88]	@ (801fa80 <icmp_input+0x2b4>)
 801fa28:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801fa2c:	3301      	adds	r3, #1
 801fa2e:	4a14      	ldr	r2, [pc, #80]	@ (801fa80 <icmp_input+0x2b4>)
 801fa30:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
 801fa34:	e055      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_SQ) {
 801fa36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa3a:	2b04      	cmp	r3, #4
 801fa3c:	d107      	bne.n	801fa4e <icmp_input+0x282>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 801fa3e:	4b10      	ldr	r3, [pc, #64]	@ (801fa80 <icmp_input+0x2b4>)
 801fa40:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801fa44:	3301      	adds	r3, #1
 801fa46:	4a0e      	ldr	r2, [pc, #56]	@ (801fa80 <icmp_input+0x2b4>)
 801fa48:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
 801fa4c:	e049      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_RD) {
 801fa4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa52:	2b05      	cmp	r3, #5
 801fa54:	d107      	bne.n	801fa66 <icmp_input+0x29a>
      MIB2_STATS_INC(mib2.icmpinredirects);
 801fa56:	4b0a      	ldr	r3, [pc, #40]	@ (801fa80 <icmp_input+0x2b4>)
 801fa58:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801fa5c:	3301      	adds	r3, #1
 801fa5e:	4a08      	ldr	r2, [pc, #32]	@ (801fa80 <icmp_input+0x2b4>)
 801fa60:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
 801fa64:	e03d      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_TS) {
 801fa66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa6a:	2b0d      	cmp	r3, #13
 801fa6c:	d116      	bne.n	801fa9c <icmp_input+0x2d0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
 801fa6e:	4b04      	ldr	r3, [pc, #16]	@ (801fa80 <icmp_input+0x2b4>)
 801fa70:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801fa74:	3301      	adds	r3, #1
 801fa76:	4a02      	ldr	r2, [pc, #8]	@ (801fa80 <icmp_input+0x2b4>)
 801fa78:	f8c2 3170 	str.w	r3, [r2, #368]	@ 0x170
 801fa7c:	e031      	b.n	801fae2 <icmp_input+0x316>
 801fa7e:	bf00      	nop
 801fa80:	2000bbe4 	.word	0x2000bbe4
 801fa84:	200085fc 	.word	0x200085fc
 801fa88:	20008610 	.word	0x20008610
 801fa8c:	08027af4 	.word	0x08027af4
 801fa90:	08027b2c 	.word	0x08027b2c
 801fa94:	08027b64 	.word	0x08027b64
 801fa98:	08027b8c 	.word	0x08027b8c
    } else if (type == ICMP_TSR) {
 801fa9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801faa0:	2b0e      	cmp	r3, #14
 801faa2:	d107      	bne.n	801fab4 <icmp_input+0x2e8>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
 801faa4:	4b33      	ldr	r3, [pc, #204]	@ (801fb74 <icmp_input+0x3a8>)
 801faa6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801faaa:	3301      	adds	r3, #1
 801faac:	4a31      	ldr	r2, [pc, #196]	@ (801fb74 <icmp_input+0x3a8>)
 801faae:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
 801fab2:	e016      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_AM) {
 801fab4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fab8:	2b11      	cmp	r3, #17
 801faba:	d107      	bne.n	801facc <icmp_input+0x300>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
 801fabc:	4b2d      	ldr	r3, [pc, #180]	@ (801fb74 <icmp_input+0x3a8>)
 801fabe:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801fac2:	3301      	adds	r3, #1
 801fac4:	4a2b      	ldr	r2, [pc, #172]	@ (801fb74 <icmp_input+0x3a8>)
 801fac6:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
 801faca:	e00a      	b.n	801fae2 <icmp_input+0x316>
    } else if (type == ICMP_AMR) {
 801facc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fad0:	2b12      	cmp	r3, #18
 801fad2:	d106      	bne.n	801fae2 <icmp_input+0x316>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 801fad4:	4b27      	ldr	r3, [pc, #156]	@ (801fb74 <icmp_input+0x3a8>)
 801fad6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801fada:	3301      	adds	r3, #1
 801fadc:	4a25      	ldr	r2, [pc, #148]	@ (801fb74 <icmp_input+0x3a8>)
 801fade:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 801fae2:	4b24      	ldr	r3, [pc, #144]	@ (801fb74 <icmp_input+0x3a8>)
 801fae4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801fae8:	3301      	adds	r3, #1
 801faea:	b29a      	uxth	r2, r3
 801faec:	4b21      	ldr	r3, [pc, #132]	@ (801fb74 <icmp_input+0x3a8>)
 801faee:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
    ICMP_STATS_INC(icmp.drop);
 801faf2:	4b20      	ldr	r3, [pc, #128]	@ (801fb74 <icmp_input+0x3a8>)
 801faf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801faf8:	3301      	adds	r3, #1
 801fafa:	b29a      	uxth	r2, r3
 801fafc:	4b1d      	ldr	r3, [pc, #116]	@ (801fb74 <icmp_input+0x3a8>)
 801fafe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801fb02:	e000      	b.n	801fb06 <icmp_input+0x33a>
    break;
 801fb04:	bf00      	nop
  }
  pbuf_free(p);
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f7f6 fb7c 	bl	8016204 <pbuf_free>
  return;
 801fb0c:	e02f      	b.n	801fb6e <icmp_input+0x3a2>
    goto lenerr;
 801fb0e:	bf00      	nop
 801fb10:	e002      	b.n	801fb18 <icmp_input+0x34c>
    goto lenerr;
 801fb12:	bf00      	nop
 801fb14:	e000      	b.n	801fb18 <icmp_input+0x34c>
      goto lenerr;
 801fb16:	bf00      	nop
lenerr:
  pbuf_free(p);
 801fb18:	6878      	ldr	r0, [r7, #4]
 801fb1a:	f7f6 fb73 	bl	8016204 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801fb1e:	4b15      	ldr	r3, [pc, #84]	@ (801fb74 <icmp_input+0x3a8>)
 801fb20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fb24:	3301      	adds	r3, #1
 801fb26:	b29a      	uxth	r2, r3
 801fb28:	4b12      	ldr	r3, [pc, #72]	@ (801fb74 <icmp_input+0x3a8>)
 801fb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 801fb2e:	4b11      	ldr	r3, [pc, #68]	@ (801fb74 <icmp_input+0x3a8>)
 801fb30:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801fb34:	3301      	adds	r3, #1
 801fb36:	4a0f      	ldr	r2, [pc, #60]	@ (801fb74 <icmp_input+0x3a8>)
 801fb38:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801fb3c:	e017      	b.n	801fb6e <icmp_input+0x3a2>
      goto icmperr;
 801fb3e:	bf00      	nop
 801fb40:	e002      	b.n	801fb48 <icmp_input+0x37c>
      goto icmperr;
 801fb42:	bf00      	nop
 801fb44:	e000      	b.n	801fb48 <icmp_input+0x37c>
        goto icmperr;
 801fb46:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801fb48:	6878      	ldr	r0, [r7, #4]
 801fb4a:	f7f6 fb5b 	bl	8016204 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801fb4e:	4b09      	ldr	r3, [pc, #36]	@ (801fb74 <icmp_input+0x3a8>)
 801fb50:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801fb54:	3301      	adds	r3, #1
 801fb56:	b29a      	uxth	r2, r3
 801fb58:	4b06      	ldr	r3, [pc, #24]	@ (801fb74 <icmp_input+0x3a8>)
 801fb5a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801fb5e:	4b05      	ldr	r3, [pc, #20]	@ (801fb74 <icmp_input+0x3a8>)
 801fb60:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801fb64:	3301      	adds	r3, #1
 801fb66:	4a03      	ldr	r2, [pc, #12]	@ (801fb74 <icmp_input+0x3a8>)
 801fb68:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801fb6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801fb6e:	3728      	adds	r7, #40	@ 0x28
 801fb70:	46bd      	mov	sp, r7
 801fb72:	bd80      	pop	{r7, pc}
 801fb74:	2000bbe4 	.word	0x2000bbe4

0801fb78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801fb78:	b580      	push	{r7, lr}
 801fb7a:	b082      	sub	sp, #8
 801fb7c:	af00      	add	r7, sp, #0
 801fb7e:	6078      	str	r0, [r7, #4]
 801fb80:	460b      	mov	r3, r1
 801fb82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801fb84:	4b08      	ldr	r3, [pc, #32]	@ (801fba8 <icmp_dest_unreach+0x30>)
 801fb86:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801fb8a:	3301      	adds	r3, #1
 801fb8c:	4a06      	ldr	r2, [pc, #24]	@ (801fba8 <icmp_dest_unreach+0x30>)
 801fb8e:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
  icmp_send_response(p, ICMP_DUR, t);
 801fb92:	78fb      	ldrb	r3, [r7, #3]
 801fb94:	461a      	mov	r2, r3
 801fb96:	2103      	movs	r1, #3
 801fb98:	6878      	ldr	r0, [r7, #4]
 801fb9a:	f000 f821 	bl	801fbe0 <icmp_send_response>
}
 801fb9e:	bf00      	nop
 801fba0:	3708      	adds	r7, #8
 801fba2:	46bd      	mov	sp, r7
 801fba4:	bd80      	pop	{r7, pc}
 801fba6:	bf00      	nop
 801fba8:	2000bbe4 	.word	0x2000bbe4

0801fbac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801fbac:	b580      	push	{r7, lr}
 801fbae:	b082      	sub	sp, #8
 801fbb0:	af00      	add	r7, sp, #0
 801fbb2:	6078      	str	r0, [r7, #4]
 801fbb4:	460b      	mov	r3, r1
 801fbb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 801fbb8:	4b08      	ldr	r3, [pc, #32]	@ (801fbdc <icmp_time_exceeded+0x30>)
 801fbba:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801fbbe:	3301      	adds	r3, #1
 801fbc0:	4a06      	ldr	r2, [pc, #24]	@ (801fbdc <icmp_time_exceeded+0x30>)
 801fbc2:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
  icmp_send_response(p, ICMP_TE, t);
 801fbc6:	78fb      	ldrb	r3, [r7, #3]
 801fbc8:	461a      	mov	r2, r3
 801fbca:	210b      	movs	r1, #11
 801fbcc:	6878      	ldr	r0, [r7, #4]
 801fbce:	f000 f807 	bl	801fbe0 <icmp_send_response>
}
 801fbd2:	bf00      	nop
 801fbd4:	3708      	adds	r7, #8
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}
 801fbda:	bf00      	nop
 801fbdc:	2000bbe4 	.word	0x2000bbe4

0801fbe0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	b08c      	sub	sp, #48	@ 0x30
 801fbe4:	af04      	add	r7, sp, #16
 801fbe6:	6078      	str	r0, [r7, #4]
 801fbe8:	460b      	mov	r3, r1
 801fbea:	70fb      	strb	r3, [r7, #3]
 801fbec:	4613      	mov	r3, r2
 801fbee:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 801fbf0:	4b37      	ldr	r3, [pc, #220]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fbf2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801fbf6:	3301      	adds	r3, #1
 801fbf8:	4a35      	ldr	r2, [pc, #212]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fbfa:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801fbfe:	2200      	movs	r2, #0
 801fc00:	2124      	movs	r1, #36	@ 0x24
 801fc02:	2001      	movs	r0, #1
 801fc04:	f7f5 ff86 	bl	8015b14 <pbuf_alloc>
 801fc08:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801fc0a:	69fb      	ldr	r3, [r7, #28]
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	d107      	bne.n	801fc20 <icmp_send_response+0x40>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 801fc10:	4b2f      	ldr	r3, [pc, #188]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fc12:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801fc16:	3301      	adds	r3, #1
 801fc18:	4a2d      	ldr	r2, [pc, #180]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fc1a:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
 801fc1e:	e053      	b.n	801fcc8 <icmp_send_response+0xe8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801fc20:	69fb      	ldr	r3, [r7, #28]
 801fc22:	895b      	ldrh	r3, [r3, #10]
 801fc24:	2b23      	cmp	r3, #35	@ 0x23
 801fc26:	d806      	bhi.n	801fc36 <icmp_send_response+0x56>
 801fc28:	4b2a      	ldr	r3, [pc, #168]	@ (801fcd4 <icmp_send_response+0xf4>)
 801fc2a:	f240 1261 	movw	r2, #353	@ 0x161
 801fc2e:	492a      	ldr	r1, [pc, #168]	@ (801fcd8 <icmp_send_response+0xf8>)
 801fc30:	482a      	ldr	r0, [pc, #168]	@ (801fcdc <icmp_send_response+0xfc>)
 801fc32:	f002 fb05 	bl	8022240 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	685b      	ldr	r3, [r3, #4]
 801fc3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801fc3c:	69fb      	ldr	r3, [r7, #28]
 801fc3e:	685b      	ldr	r3, [r3, #4]
 801fc40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801fc42:	697b      	ldr	r3, [r7, #20]
 801fc44:	78fa      	ldrb	r2, [r7, #3]
 801fc46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801fc48:	697b      	ldr	r3, [r7, #20]
 801fc4a:	78ba      	ldrb	r2, [r7, #2]
 801fc4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801fc4e:	697b      	ldr	r3, [r7, #20]
 801fc50:	2200      	movs	r2, #0
 801fc52:	711a      	strb	r2, [r3, #4]
 801fc54:	2200      	movs	r2, #0
 801fc56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801fc58:	697b      	ldr	r3, [r7, #20]
 801fc5a:	2200      	movs	r2, #0
 801fc5c:	719a      	strb	r2, [r3, #6]
 801fc5e:	2200      	movs	r2, #0
 801fc60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801fc62:	69fb      	ldr	r3, [r7, #28]
 801fc64:	685b      	ldr	r3, [r3, #4]
 801fc66:	f103 0008 	add.w	r0, r3, #8
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	685b      	ldr	r3, [r3, #4]
 801fc6e:	221c      	movs	r2, #28
 801fc70:	4619      	mov	r1, r3
 801fc72:	f002 fde0 	bl	8022836 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801fc76:	69bb      	ldr	r3, [r7, #24]
 801fc78:	68db      	ldr	r3, [r3, #12]
 801fc7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801fc7c:	f107 030c 	add.w	r3, r7, #12
 801fc80:	4618      	mov	r0, r3
 801fc82:	f000 f82d 	bl	801fce0 <ip4_route>
 801fc86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801fc88:	693b      	ldr	r3, [r7, #16]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d019      	beq.n	801fcc2 <icmp_send_response+0xe2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801fc8e:	697b      	ldr	r3, [r7, #20]
 801fc90:	2200      	movs	r2, #0
 801fc92:	709a      	strb	r2, [r3, #2]
 801fc94:	2200      	movs	r2, #0
 801fc96:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801fc98:	4b0d      	ldr	r3, [pc, #52]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fc9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fc9e:	3301      	adds	r3, #1
 801fca0:	b29a      	uxth	r2, r3
 801fca2:	4b0b      	ldr	r3, [pc, #44]	@ (801fcd0 <icmp_send_response+0xf0>)
 801fca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801fca8:	f107 020c 	add.w	r2, r7, #12
 801fcac:	693b      	ldr	r3, [r7, #16]
 801fcae:	9302      	str	r3, [sp, #8]
 801fcb0:	2301      	movs	r3, #1
 801fcb2:	9301      	str	r3, [sp, #4]
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	9300      	str	r3, [sp, #0]
 801fcb8:	23ff      	movs	r3, #255	@ 0xff
 801fcba:	2100      	movs	r1, #0
 801fcbc:	69f8      	ldr	r0, [r7, #28]
 801fcbe:	f000 fa81 	bl	80201c4 <ip4_output_if>
  }
  pbuf_free(q);
 801fcc2:	69f8      	ldr	r0, [r7, #28]
 801fcc4:	f7f6 fa9e 	bl	8016204 <pbuf_free>
}
 801fcc8:	3720      	adds	r7, #32
 801fcca:	46bd      	mov	sp, r7
 801fccc:	bd80      	pop	{r7, pc}
 801fcce:	bf00      	nop
 801fcd0:	2000bbe4 	.word	0x2000bbe4
 801fcd4:	08027af4 	.word	0x08027af4
 801fcd8:	08027bc0 	.word	0x08027bc0
 801fcdc:	08027b64 	.word	0x08027b64

0801fce0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801fce0:	b480      	push	{r7}
 801fce2:	b085      	sub	sp, #20
 801fce4:	af00      	add	r7, sp, #0
 801fce6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801fce8:	4b37      	ldr	r3, [pc, #220]	@ (801fdc8 <ip4_route+0xe8>)
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	60fb      	str	r3, [r7, #12]
 801fcee:	e036      	b.n	801fd5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fcf0:	68fb      	ldr	r3, [r7, #12]
 801fcf2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fcf6:	f003 0301 	and.w	r3, r3, #1
 801fcfa:	b2db      	uxtb	r3, r3
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d02b      	beq.n	801fd58 <ip4_route+0x78>
 801fd00:	68fb      	ldr	r3, [r7, #12]
 801fd02:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd06:	089b      	lsrs	r3, r3, #2
 801fd08:	f003 0301 	and.w	r3, r3, #1
 801fd0c:	b2db      	uxtb	r3, r3
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	d022      	beq.n	801fd58 <ip4_route+0x78>
 801fd12:	68fb      	ldr	r3, [r7, #12]
 801fd14:	3304      	adds	r3, #4
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d01d      	beq.n	801fd58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	681a      	ldr	r2, [r3, #0]
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	3304      	adds	r3, #4
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	405a      	eors	r2, r3
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	3308      	adds	r3, #8
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	4013      	ands	r3, r2
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d101      	bne.n	801fd38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	e042      	b.n	801fdbe <ip4_route+0xde>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd3e:	f003 0302 	and.w	r3, r3, #2
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d108      	bne.n	801fd58 <ip4_route+0x78>
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	681a      	ldr	r2, [r3, #0]
 801fd4a:	68fb      	ldr	r3, [r7, #12]
 801fd4c:	330c      	adds	r3, #12
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	429a      	cmp	r2, r3
 801fd52:	d101      	bne.n	801fd58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801fd54:	68fb      	ldr	r3, [r7, #12]
 801fd56:	e032      	b.n	801fdbe <ip4_route+0xde>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	60fb      	str	r3, [r7, #12]
 801fd5e:	68fb      	ldr	r3, [r7, #12]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d1c5      	bne.n	801fcf0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fd64:	4b19      	ldr	r3, [pc, #100]	@ (801fdcc <ip4_route+0xec>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d015      	beq.n	801fd98 <ip4_route+0xb8>
 801fd6c:	4b17      	ldr	r3, [pc, #92]	@ (801fdcc <ip4_route+0xec>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd74:	f003 0301 	and.w	r3, r3, #1
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	d00d      	beq.n	801fd98 <ip4_route+0xb8>
 801fd7c:	4b13      	ldr	r3, [pc, #76]	@ (801fdcc <ip4_route+0xec>)
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd84:	f003 0304 	and.w	r3, r3, #4
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d005      	beq.n	801fd98 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801fd8c:	4b0f      	ldr	r3, [pc, #60]	@ (801fdcc <ip4_route+0xec>)
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	3304      	adds	r3, #4
 801fd92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d110      	bne.n	801fdba <ip4_route+0xda>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801fd98:	4b0d      	ldr	r3, [pc, #52]	@ (801fdd0 <ip4_route+0xf0>)
 801fd9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801fd9e:	3301      	adds	r3, #1
 801fda0:	b29a      	uxth	r2, r3
 801fda2:	4b0b      	ldr	r3, [pc, #44]	@ (801fdd0 <ip4_route+0xf0>)
 801fda4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801fda8:	4b09      	ldr	r3, [pc, #36]	@ (801fdd0 <ip4_route+0xf0>)
 801fdaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801fdae:	3301      	adds	r3, #1
 801fdb0:	4a07      	ldr	r2, [pc, #28]	@ (801fdd0 <ip4_route+0xf0>)
 801fdb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    return NULL;
 801fdb6:	2300      	movs	r3, #0
 801fdb8:	e001      	b.n	801fdbe <ip4_route+0xde>
  }

  return netif_default;
 801fdba:	4b04      	ldr	r3, [pc, #16]	@ (801fdcc <ip4_route+0xec>)
 801fdbc:	681b      	ldr	r3, [r3, #0]
}
 801fdbe:	4618      	mov	r0, r3
 801fdc0:	3714      	adds	r7, #20
 801fdc2:	46bd      	mov	sp, r7
 801fdc4:	bc80      	pop	{r7}
 801fdc6:	4770      	bx	lr
 801fdc8:	2000bbd8 	.word	0x2000bbd8
 801fdcc:	2000bbdc 	.word	0x2000bbdc
 801fdd0:	2000bbe4 	.word	0x2000bbe4

0801fdd4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801fdd4:	b580      	push	{r7, lr}
 801fdd6:	b088      	sub	sp, #32
 801fdd8:	af00      	add	r7, sp, #0
 801fdda:	6078      	str	r0, [r7, #4]
 801fddc:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801fdde:	2301      	movs	r3, #1
 801fde0:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801fde2:	4b9d      	ldr	r3, [pc, #628]	@ (8020058 <ip4_input+0x284>)
 801fde4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801fde8:	3301      	adds	r3, #1
 801fdea:	b29a      	uxth	r2, r3
 801fdec:	4b9a      	ldr	r3, [pc, #616]	@ (8020058 <ip4_input+0x284>)
 801fdee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801fdf2:	4b99      	ldr	r3, [pc, #612]	@ (8020058 <ip4_input+0x284>)
 801fdf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801fdf8:	3301      	adds	r3, #1
 801fdfa:	4a97      	ldr	r2, [pc, #604]	@ (8020058 <ip4_input+0x284>)
 801fdfc:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	685b      	ldr	r3, [r3, #4]
 801fe04:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801fe06:	69fb      	ldr	r3, [r7, #28]
 801fe08:	781b      	ldrb	r3, [r3, #0]
 801fe0a:	091b      	lsrs	r3, r3, #4
 801fe0c:	b2db      	uxtb	r3, r3
 801fe0e:	2b04      	cmp	r3, #4
 801fe10:	d01b      	beq.n	801fe4a <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801fe12:	6878      	ldr	r0, [r7, #4]
 801fe14:	f7f6 f9f6 	bl	8016204 <pbuf_free>
    IP_STATS_INC(ip.err);
 801fe18:	4b8f      	ldr	r3, [pc, #572]	@ (8020058 <ip4_input+0x284>)
 801fe1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801fe1e:	3301      	adds	r3, #1
 801fe20:	b29a      	uxth	r2, r3
 801fe22:	4b8d      	ldr	r3, [pc, #564]	@ (8020058 <ip4_input+0x284>)
 801fe24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801fe28:	4b8b      	ldr	r3, [pc, #556]	@ (8020058 <ip4_input+0x284>)
 801fe2a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fe2e:	3301      	adds	r3, #1
 801fe30:	b29a      	uxth	r2, r3
 801fe32:	4b89      	ldr	r3, [pc, #548]	@ (8020058 <ip4_input+0x284>)
 801fe34:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801fe38:	4b87      	ldr	r3, [pc, #540]	@ (8020058 <ip4_input+0x284>)
 801fe3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801fe3e:	3301      	adds	r3, #1
 801fe40:	4a85      	ldr	r2, [pc, #532]	@ (8020058 <ip4_input+0x284>)
 801fe42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    return ERR_OK;
 801fe46:	2300      	movs	r3, #0
 801fe48:	e1b3      	b.n	80201b2 <ip4_input+0x3de>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801fe4a:	69fb      	ldr	r3, [r7, #28]
 801fe4c:	781b      	ldrb	r3, [r3, #0]
 801fe4e:	f003 030f 	and.w	r3, r3, #15
 801fe52:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801fe54:	89fb      	ldrh	r3, [r7, #14]
 801fe56:	009b      	lsls	r3, r3, #2
 801fe58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fe5a:	69fb      	ldr	r3, [r7, #28]
 801fe5c:	885b      	ldrh	r3, [r3, #2]
 801fe5e:	b29b      	uxth	r3, r3
 801fe60:	4618      	mov	r0, r3
 801fe62:	f7f4 ff29 	bl	8014cb8 <lwip_htons>
 801fe66:	4603      	mov	r3, r0
 801fe68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	891b      	ldrh	r3, [r3, #8]
 801fe6e:	89ba      	ldrh	r2, [r7, #12]
 801fe70:	429a      	cmp	r2, r3
 801fe72:	d204      	bcs.n	801fe7e <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801fe74:	89bb      	ldrh	r3, [r7, #12]
 801fe76:	4619      	mov	r1, r3
 801fe78:	6878      	ldr	r0, [r7, #4]
 801fe7a:	f7f6 f84f 	bl	8015f1c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	895b      	ldrh	r3, [r3, #10]
 801fe82:	89fa      	ldrh	r2, [r7, #14]
 801fe84:	429a      	cmp	r2, r3
 801fe86:	d807      	bhi.n	801fe98 <ip4_input+0xc4>
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	891b      	ldrh	r3, [r3, #8]
 801fe8c:	89ba      	ldrh	r2, [r7, #12]
 801fe8e:	429a      	cmp	r2, r3
 801fe90:	d802      	bhi.n	801fe98 <ip4_input+0xc4>
 801fe92:	89fb      	ldrh	r3, [r7, #14]
 801fe94:	2b13      	cmp	r3, #19
 801fe96:	d81b      	bhi.n	801fed0 <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801fe98:	6878      	ldr	r0, [r7, #4]
 801fe9a:	f7f6 f9b3 	bl	8016204 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801fe9e:	4b6e      	ldr	r3, [pc, #440]	@ (8020058 <ip4_input+0x284>)
 801fea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801fea4:	3301      	adds	r3, #1
 801fea6:	b29a      	uxth	r2, r3
 801fea8:	4b6b      	ldr	r3, [pc, #428]	@ (8020058 <ip4_input+0x284>)
 801feaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801feae:	4b6a      	ldr	r3, [pc, #424]	@ (8020058 <ip4_input+0x284>)
 801feb0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801feb4:	3301      	adds	r3, #1
 801feb6:	b29a      	uxth	r2, r3
 801feb8:	4b67      	ldr	r3, [pc, #412]	@ (8020058 <ip4_input+0x284>)
 801feba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801febe:	4b66      	ldr	r3, [pc, #408]	@ (8020058 <ip4_input+0x284>)
 801fec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fec4:	3301      	adds	r3, #1
 801fec6:	4a64      	ldr	r2, [pc, #400]	@ (8020058 <ip4_input+0x284>)
 801fec8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    return ERR_OK;
 801fecc:	2300      	movs	r3, #0
 801fece:	e170      	b.n	80201b2 <ip4_input+0x3de>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801fed0:	69fb      	ldr	r3, [r7, #28]
 801fed2:	691b      	ldr	r3, [r3, #16]
 801fed4:	4a61      	ldr	r2, [pc, #388]	@ (802005c <ip4_input+0x288>)
 801fed6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801fed8:	69fb      	ldr	r3, [r7, #28]
 801feda:	68db      	ldr	r3, [r3, #12]
 801fedc:	4a5f      	ldr	r2, [pc, #380]	@ (802005c <ip4_input+0x288>)
 801fede:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fee0:	4b5e      	ldr	r3, [pc, #376]	@ (802005c <ip4_input+0x288>)
 801fee2:	695b      	ldr	r3, [r3, #20]
 801fee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801fee8:	2be0      	cmp	r3, #224	@ 0xe0
 801feea:	d112      	bne.n	801ff12 <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801feec:	683b      	ldr	r3, [r7, #0]
 801feee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fef2:	f003 0301 	and.w	r3, r3, #1
 801fef6:	b2db      	uxtb	r3, r3
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d007      	beq.n	801ff0c <ip4_input+0x138>
 801fefc:	683b      	ldr	r3, [r7, #0]
 801fefe:	3304      	adds	r3, #4
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d002      	beq.n	801ff0c <ip4_input+0x138>
      netif = inp;
 801ff06:	683b      	ldr	r3, [r7, #0]
 801ff08:	61bb      	str	r3, [r7, #24]
 801ff0a:	e041      	b.n	801ff90 <ip4_input+0x1bc>
    } else {
      netif = NULL;
 801ff0c:	2300      	movs	r3, #0
 801ff0e:	61bb      	str	r3, [r7, #24]
 801ff10:	e03e      	b.n	801ff90 <ip4_input+0x1bc>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801ff12:	2301      	movs	r3, #1
 801ff14:	613b      	str	r3, [r7, #16]
    netif = inp;
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ff1a:	69bb      	ldr	r3, [r7, #24]
 801ff1c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801ff20:	f003 0301 	and.w	r3, r3, #1
 801ff24:	b2db      	uxtb	r3, r3
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d014      	beq.n	801ff54 <ip4_input+0x180>
 801ff2a:	69bb      	ldr	r3, [r7, #24]
 801ff2c:	3304      	adds	r3, #4
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d00f      	beq.n	801ff54 <ip4_input+0x180>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ff34:	4b49      	ldr	r3, [pc, #292]	@ (802005c <ip4_input+0x288>)
 801ff36:	695a      	ldr	r2, [r3, #20]
 801ff38:	69bb      	ldr	r3, [r7, #24]
 801ff3a:	3304      	adds	r3, #4
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	429a      	cmp	r2, r3
 801ff40:	d026      	beq.n	801ff90 <ip4_input+0x1bc>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ff42:	4b46      	ldr	r3, [pc, #280]	@ (802005c <ip4_input+0x288>)
 801ff44:	695b      	ldr	r3, [r3, #20]
 801ff46:	69b9      	ldr	r1, [r7, #24]
 801ff48:	4618      	mov	r0, r3
 801ff4a:	f000 fa2d 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801ff4e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d11d      	bne.n	801ff90 <ip4_input+0x1bc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801ff54:	693b      	ldr	r3, [r7, #16]
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	d00d      	beq.n	801ff76 <ip4_input+0x1a2>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801ff5a:	4b40      	ldr	r3, [pc, #256]	@ (802005c <ip4_input+0x288>)
 801ff5c:	695b      	ldr	r3, [r3, #20]
 801ff5e:	b2db      	uxtb	r3, r3
 801ff60:	2b7f      	cmp	r3, #127	@ 0x7f
 801ff62:	d102      	bne.n	801ff6a <ip4_input+0x196>
          netif = NULL;
 801ff64:	2300      	movs	r3, #0
 801ff66:	61bb      	str	r3, [r7, #24]
          break;
 801ff68:	e012      	b.n	801ff90 <ip4_input+0x1bc>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801ff6a:	2300      	movs	r3, #0
 801ff6c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 801ff6e:	4b3c      	ldr	r3, [pc, #240]	@ (8020060 <ip4_input+0x28c>)
 801ff70:	681b      	ldr	r3, [r3, #0]
 801ff72:	61bb      	str	r3, [r7, #24]
 801ff74:	e002      	b.n	801ff7c <ip4_input+0x1a8>
      } else {
        netif = netif->next;
 801ff76:	69bb      	ldr	r3, [r7, #24]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801ff7c:	69ba      	ldr	r2, [r7, #24]
 801ff7e:	683b      	ldr	r3, [r7, #0]
 801ff80:	429a      	cmp	r2, r3
 801ff82:	d102      	bne.n	801ff8a <ip4_input+0x1b6>
        netif = netif->next;
 801ff84:	69bb      	ldr	r3, [r7, #24]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801ff8a:	69bb      	ldr	r3, [r7, #24]
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d1c4      	bne.n	801ff1a <ip4_input+0x146>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ff90:	69bb      	ldr	r3, [r7, #24]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d111      	bne.n	801ffba <ip4_input+0x1e6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ff96:	69fb      	ldr	r3, [r7, #28]
 801ff98:	7a5b      	ldrb	r3, [r3, #9]
 801ff9a:	2b11      	cmp	r3, #17
 801ff9c:	d10d      	bne.n	801ffba <ip4_input+0x1e6>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801ff9e:	89fb      	ldrh	r3, [r7, #14]
 801ffa0:	69fa      	ldr	r2, [r7, #28]
 801ffa2:	4413      	add	r3, r2
 801ffa4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ffa6:	68bb      	ldr	r3, [r7, #8]
 801ffa8:	885b      	ldrh	r3, [r3, #2]
 801ffaa:	b29b      	uxth	r3, r3
 801ffac:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801ffb0:	d103      	bne.n	801ffba <ip4_input+0x1e6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ffb2:	683b      	ldr	r3, [r7, #0]
 801ffb4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ffb6:	2300      	movs	r3, #0
 801ffb8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d02d      	beq.n	802001c <ip4_input+0x248>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ffc0:	4b26      	ldr	r3, [pc, #152]	@ (802005c <ip4_input+0x288>)
 801ffc2:	691b      	ldr	r3, [r3, #16]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d029      	beq.n	802001c <ip4_input+0x248>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ffc8:	4b24      	ldr	r3, [pc, #144]	@ (802005c <ip4_input+0x288>)
 801ffca:	691b      	ldr	r3, [r3, #16]
 801ffcc:	6839      	ldr	r1, [r7, #0]
 801ffce:	4618      	mov	r0, r3
 801ffd0:	f000 f9ea 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 801ffd4:	4603      	mov	r3, r0
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d105      	bne.n	801ffe6 <ip4_input+0x212>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ffda:	4b20      	ldr	r3, [pc, #128]	@ (802005c <ip4_input+0x288>)
 801ffdc:	691b      	ldr	r3, [r3, #16]
 801ffde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ffe2:	2be0      	cmp	r3, #224	@ 0xe0
 801ffe4:	d11a      	bne.n	802001c <ip4_input+0x248>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ffe6:	6878      	ldr	r0, [r7, #4]
 801ffe8:	f7f6 f90c 	bl	8016204 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801ffec:	4b1a      	ldr	r3, [pc, #104]	@ (8020058 <ip4_input+0x284>)
 801ffee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fff2:	3301      	adds	r3, #1
 801fff4:	b29a      	uxth	r2, r3
 801fff6:	4b18      	ldr	r3, [pc, #96]	@ (8020058 <ip4_input+0x284>)
 801fff8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801fffc:	4b16      	ldr	r3, [pc, #88]	@ (8020058 <ip4_input+0x284>)
 801fffe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8020002:	3301      	adds	r3, #1
 8020004:	4a14      	ldr	r2, [pc, #80]	@ (8020058 <ip4_input+0x284>)
 8020006:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 802000a:	4b13      	ldr	r3, [pc, #76]	@ (8020058 <ip4_input+0x284>)
 802000c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020010:	3301      	adds	r3, #1
 8020012:	4a11      	ldr	r2, [pc, #68]	@ (8020058 <ip4_input+0x284>)
 8020014:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      return ERR_OK;
 8020018:	2300      	movs	r3, #0
 802001a:	e0ca      	b.n	80201b2 <ip4_input+0x3de>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 802001c:	69bb      	ldr	r3, [r7, #24]
 802001e:	2b00      	cmp	r3, #0
 8020020:	d120      	bne.n	8020064 <ip4_input+0x290>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8020022:	4b0d      	ldr	r3, [pc, #52]	@ (8020058 <ip4_input+0x284>)
 8020024:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8020028:	3301      	adds	r3, #1
 802002a:	b29a      	uxth	r2, r3
 802002c:	4b0a      	ldr	r3, [pc, #40]	@ (8020058 <ip4_input+0x284>)
 802002e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8020032:	4b09      	ldr	r3, [pc, #36]	@ (8020058 <ip4_input+0x284>)
 8020034:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8020038:	3301      	adds	r3, #1
 802003a:	4a07      	ldr	r2, [pc, #28]	@ (8020058 <ip4_input+0x284>)
 802003c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 8020040:	4b05      	ldr	r3, [pc, #20]	@ (8020058 <ip4_input+0x284>)
 8020042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020046:	3301      	adds	r3, #1
 8020048:	4a03      	ldr	r2, [pc, #12]	@ (8020058 <ip4_input+0x284>)
 802004a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    }
    pbuf_free(p);
 802004e:	6878      	ldr	r0, [r7, #4]
 8020050:	f7f6 f8d8 	bl	8016204 <pbuf_free>
    return ERR_OK;
 8020054:	2300      	movs	r3, #0
 8020056:	e0ac      	b.n	80201b2 <ip4_input+0x3de>
 8020058:	2000bbe4 	.word	0x2000bbe4
 802005c:	200085fc 	.word	0x200085fc
 8020060:	2000bbd8 	.word	0x2000bbd8
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020064:	69fb      	ldr	r3, [r7, #28]
 8020066:	88db      	ldrh	r3, [r3, #6]
 8020068:	b29b      	uxth	r3, r3
 802006a:	461a      	mov	r2, r3
 802006c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8020070:	4013      	ands	r3, r2
 8020072:	2b00      	cmp	r3, #0
 8020074:	d00b      	beq.n	802008e <ip4_input+0x2ba>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8020076:	6878      	ldr	r0, [r7, #4]
 8020078:	f000 fed0 	bl	8020e1c <ip4_reass>
 802007c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	2b00      	cmp	r3, #0
 8020082:	d101      	bne.n	8020088 <ip4_input+0x2b4>
      return ERR_OK;
 8020084:	2300      	movs	r3, #0
 8020086:	e094      	b.n	80201b2 <ip4_input+0x3de>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	685b      	ldr	r3, [r3, #4]
 802008c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802008e:	4a4b      	ldr	r2, [pc, #300]	@ (80201bc <ip4_input+0x3e8>)
 8020090:	69bb      	ldr	r3, [r7, #24]
 8020092:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020094:	4a49      	ldr	r2, [pc, #292]	@ (80201bc <ip4_input+0x3e8>)
 8020096:	683b      	ldr	r3, [r7, #0]
 8020098:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802009a:	4a48      	ldr	r2, [pc, #288]	@ (80201bc <ip4_input+0x3e8>)
 802009c:	69fb      	ldr	r3, [r7, #28]
 802009e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80200a0:	69fb      	ldr	r3, [r7, #28]
 80200a2:	781b      	ldrb	r3, [r3, #0]
 80200a4:	f003 030f 	and.w	r3, r3, #15
 80200a8:	b29b      	uxth	r3, r3
 80200aa:	009b      	lsls	r3, r3, #2
 80200ac:	b29a      	uxth	r2, r3
 80200ae:	4b43      	ldr	r3, [pc, #268]	@ (80201bc <ip4_input+0x3e8>)
 80200b0:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80200b2:	89fb      	ldrh	r3, [r7, #14]
 80200b4:	425b      	negs	r3, r3
 80200b6:	b29b      	uxth	r3, r3
 80200b8:	b21b      	sxth	r3, r3
 80200ba:	4619      	mov	r1, r3
 80200bc:	6878      	ldr	r0, [r7, #4]
 80200be:	f7f6 f87d 	bl	80161bc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80200c2:	69fb      	ldr	r3, [r7, #28]
 80200c4:	7a5b      	ldrb	r3, [r3, #9]
 80200c6:	2b11      	cmp	r3, #17
 80200c8:	d006      	beq.n	80200d8 <ip4_input+0x304>
 80200ca:	2b11      	cmp	r3, #17
 80200cc:	dc28      	bgt.n	8020120 <ip4_input+0x34c>
 80200ce:	2b01      	cmp	r3, #1
 80200d0:	d01a      	beq.n	8020108 <ip4_input+0x334>
 80200d2:	2b06      	cmp	r3, #6
 80200d4:	d00c      	beq.n	80200f0 <ip4_input+0x31c>
 80200d6:	e023      	b.n	8020120 <ip4_input+0x34c>
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
 80200d8:	4b39      	ldr	r3, [pc, #228]	@ (80201c0 <ip4_input+0x3ec>)
 80200da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80200de:	3301      	adds	r3, #1
 80200e0:	4a37      	ldr	r2, [pc, #220]	@ (80201c0 <ip4_input+0x3ec>)
 80200e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      udp_input(p, inp);
 80200e6:	6839      	ldr	r1, [r7, #0]
 80200e8:	6878      	ldr	r0, [r7, #4]
 80200ea:	f7fc f911 	bl	801c310 <udp_input>
      break;
 80200ee:	e04d      	b.n	802018c <ip4_input+0x3b8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
 80200f0:	4b33      	ldr	r3, [pc, #204]	@ (80201c0 <ip4_input+0x3ec>)
 80200f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80200f6:	3301      	adds	r3, #1
 80200f8:	4a31      	ldr	r2, [pc, #196]	@ (80201c0 <ip4_input+0x3ec>)
 80200fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      tcp_input(p, inp);
 80200fe:	6839      	ldr	r1, [r7, #0]
 8020100:	6878      	ldr	r0, [r7, #4]
 8020102:	f7f8 f895 	bl	8018230 <tcp_input>
      break;
 8020106:	e041      	b.n	802018c <ip4_input+0x3b8>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
 8020108:	4b2d      	ldr	r3, [pc, #180]	@ (80201c0 <ip4_input+0x3ec>)
 802010a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 802010e:	3301      	adds	r3, #1
 8020110:	4a2b      	ldr	r2, [pc, #172]	@ (80201c0 <ip4_input+0x3ec>)
 8020112:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      icmp_input(p, inp);
 8020116:	6839      	ldr	r1, [r7, #0]
 8020118:	6878      	ldr	r0, [r7, #4]
 802011a:	f7ff fb57 	bl	801f7cc <icmp_input>
      break;
 802011e:	e035      	b.n	802018c <ip4_input+0x3b8>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020120:	4b26      	ldr	r3, [pc, #152]	@ (80201bc <ip4_input+0x3e8>)
 8020122:	695b      	ldr	r3, [r3, #20]
 8020124:	69b9      	ldr	r1, [r7, #24]
 8020126:	4618      	mov	r0, r3
 8020128:	f000 f93e 	bl	80203a8 <ip4_addr_isbroadcast_u32>
 802012c:	4603      	mov	r3, r0
 802012e:	2b00      	cmp	r3, #0
 8020130:	d112      	bne.n	8020158 <ip4_input+0x384>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020132:	4b22      	ldr	r3, [pc, #136]	@ (80201bc <ip4_input+0x3e8>)
 8020134:	695b      	ldr	r3, [r3, #20]
 8020136:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802013a:	2be0      	cmp	r3, #224	@ 0xe0
 802013c:	d00c      	beq.n	8020158 <ip4_input+0x384>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 802013e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020142:	4619      	mov	r1, r3
 8020144:	6878      	ldr	r0, [r7, #4]
 8020146:	f7f6 f84b 	bl	80161e0 <pbuf_header_force>
        p->payload = iphdr;
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	69fa      	ldr	r2, [r7, #28]
 802014e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020150:	2102      	movs	r1, #2
 8020152:	6878      	ldr	r0, [r7, #4]
 8020154:	f7ff fd10 	bl	801fb78 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8020158:	6878      	ldr	r0, [r7, #4]
 802015a:	f7f6 f853 	bl	8016204 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 802015e:	4b18      	ldr	r3, [pc, #96]	@ (80201c0 <ip4_input+0x3ec>)
 8020160:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8020164:	3301      	adds	r3, #1
 8020166:	b29a      	uxth	r2, r3
 8020168:	4b15      	ldr	r3, [pc, #84]	@ (80201c0 <ip4_input+0x3ec>)
 802016a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      IP_STATS_INC(ip.drop);
 802016e:	4b14      	ldr	r3, [pc, #80]	@ (80201c0 <ip4_input+0x3ec>)
 8020170:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8020174:	3301      	adds	r3, #1
 8020176:	b29a      	uxth	r2, r3
 8020178:	4b11      	ldr	r3, [pc, #68]	@ (80201c0 <ip4_input+0x3ec>)
 802017a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
 802017e:	4b10      	ldr	r3, [pc, #64]	@ (80201c0 <ip4_input+0x3ec>)
 8020180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020184:	3301      	adds	r3, #1
 8020186:	4a0e      	ldr	r2, [pc, #56]	@ (80201c0 <ip4_input+0x3ec>)
 8020188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 802018c:	4b0b      	ldr	r3, [pc, #44]	@ (80201bc <ip4_input+0x3e8>)
 802018e:	2200      	movs	r2, #0
 8020190:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020192:	4b0a      	ldr	r3, [pc, #40]	@ (80201bc <ip4_input+0x3e8>)
 8020194:	2200      	movs	r2, #0
 8020196:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8020198:	4b08      	ldr	r3, [pc, #32]	@ (80201bc <ip4_input+0x3e8>)
 802019a:	2200      	movs	r2, #0
 802019c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802019e:	4b07      	ldr	r3, [pc, #28]	@ (80201bc <ip4_input+0x3e8>)
 80201a0:	2200      	movs	r2, #0
 80201a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80201a4:	4b05      	ldr	r3, [pc, #20]	@ (80201bc <ip4_input+0x3e8>)
 80201a6:	2200      	movs	r2, #0
 80201a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80201aa:	4b04      	ldr	r3, [pc, #16]	@ (80201bc <ip4_input+0x3e8>)
 80201ac:	2200      	movs	r2, #0
 80201ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80201b0:	2300      	movs	r3, #0
}
 80201b2:	4618      	mov	r0, r3
 80201b4:	3720      	adds	r7, #32
 80201b6:	46bd      	mov	sp, r7
 80201b8:	bd80      	pop	{r7, pc}
 80201ba:	bf00      	nop
 80201bc:	200085fc 	.word	0x200085fc
 80201c0:	2000bbe4 	.word	0x2000bbe4

080201c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80201c4:	b580      	push	{r7, lr}
 80201c6:	b08a      	sub	sp, #40	@ 0x28
 80201c8:	af04      	add	r7, sp, #16
 80201ca:	60f8      	str	r0, [r7, #12]
 80201cc:	60b9      	str	r1, [r7, #8]
 80201ce:	607a      	str	r2, [r7, #4]
 80201d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80201d2:	68bb      	ldr	r3, [r7, #8]
 80201d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d009      	beq.n	80201f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80201dc:	68bb      	ldr	r3, [r7, #8]
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d003      	beq.n	80201ea <ip4_output_if+0x26>
 80201e2:	68bb      	ldr	r3, [r7, #8]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	2b00      	cmp	r3, #0
 80201e8:	d102      	bne.n	80201f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80201ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201ec:	3304      	adds	r3, #4
 80201ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80201f0:	78fa      	ldrb	r2, [r7, #3]
 80201f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201f4:	9302      	str	r3, [sp, #8]
 80201f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80201fa:	9301      	str	r3, [sp, #4]
 80201fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020200:	9300      	str	r3, [sp, #0]
 8020202:	4613      	mov	r3, r2
 8020204:	687a      	ldr	r2, [r7, #4]
 8020206:	6979      	ldr	r1, [r7, #20]
 8020208:	68f8      	ldr	r0, [r7, #12]
 802020a:	f000 f805 	bl	8020218 <ip4_output_if_src>
 802020e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020210:	4618      	mov	r0, r3
 8020212:	3718      	adds	r7, #24
 8020214:	46bd      	mov	sp, r7
 8020216:	bd80      	pop	{r7, pc}

08020218 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8020218:	b580      	push	{r7, lr}
 802021a:	b088      	sub	sp, #32
 802021c:	af00      	add	r7, sp, #0
 802021e:	60f8      	str	r0, [r7, #12]
 8020220:	60b9      	str	r1, [r7, #8]
 8020222:	607a      	str	r2, [r7, #4]
 8020224:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020226:	68fb      	ldr	r3, [r7, #12]
 8020228:	89db      	ldrh	r3, [r3, #14]
 802022a:	2b01      	cmp	r3, #1
 802022c:	d006      	beq.n	802023c <ip4_output_if_src+0x24>
 802022e:	4b57      	ldr	r3, [pc, #348]	@ (802038c <ip4_output_if_src+0x174>)
 8020230:	f240 3233 	movw	r2, #819	@ 0x333
 8020234:	4956      	ldr	r1, [pc, #344]	@ (8020390 <ip4_output_if_src+0x178>)
 8020236:	4857      	ldr	r0, [pc, #348]	@ (8020394 <ip4_output_if_src+0x17c>)
 8020238:	f002 f802 	bl	8022240 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 802023c:	4b56      	ldr	r3, [pc, #344]	@ (8020398 <ip4_output_if_src+0x180>)
 802023e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8020242:	3301      	adds	r3, #1
 8020244:	4a54      	ldr	r2, [pc, #336]	@ (8020398 <ip4_output_if_src+0x180>)
 8020246:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	2b00      	cmp	r3, #0
 802024e:	d06f      	beq.n	8020330 <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 8020250:	2314      	movs	r3, #20
 8020252:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8020254:	2114      	movs	r1, #20
 8020256:	68f8      	ldr	r0, [r7, #12]
 8020258:	f7f5 ffb0 	bl	80161bc <pbuf_header>
 802025c:	4603      	mov	r3, r0
 802025e:	2b00      	cmp	r3, #0
 8020260:	d011      	beq.n	8020286 <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8020262:	4b4d      	ldr	r3, [pc, #308]	@ (8020398 <ip4_output_if_src+0x180>)
 8020264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8020268:	3301      	adds	r3, #1
 802026a:	b29a      	uxth	r2, r3
 802026c:	4b4a      	ldr	r3, [pc, #296]	@ (8020398 <ip4_output_if_src+0x180>)
 802026e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 8020272:	4b49      	ldr	r3, [pc, #292]	@ (8020398 <ip4_output_if_src+0x180>)
 8020274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020278:	3301      	adds	r3, #1
 802027a:	4a47      	ldr	r2, [pc, #284]	@ (8020398 <ip4_output_if_src+0x180>)
 802027c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      return ERR_BUF;
 8020280:	f06f 0301 	mvn.w	r3, #1
 8020284:	e07d      	b.n	8020382 <ip4_output_if_src+0x16a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	685b      	ldr	r3, [r3, #4]
 802028a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 802028c:	68fb      	ldr	r3, [r7, #12]
 802028e:	895b      	ldrh	r3, [r3, #10]
 8020290:	2b13      	cmp	r3, #19
 8020292:	d806      	bhi.n	80202a2 <ip4_output_if_src+0x8a>
 8020294:	4b3d      	ldr	r3, [pc, #244]	@ (802038c <ip4_output_if_src+0x174>)
 8020296:	f44f 7258 	mov.w	r2, #864	@ 0x360
 802029a:	4940      	ldr	r1, [pc, #256]	@ (802039c <ip4_output_if_src+0x184>)
 802029c:	483d      	ldr	r0, [pc, #244]	@ (8020394 <ip4_output_if_src+0x17c>)
 802029e:	f001 ffcf 	bl	8022240 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80202a2:	69fb      	ldr	r3, [r7, #28]
 80202a4:	78fa      	ldrb	r2, [r7, #3]
 80202a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80202a8:	69fb      	ldr	r3, [r7, #28]
 80202aa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80202ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	681a      	ldr	r2, [r3, #0]
 80202b4:	69fb      	ldr	r3, [r7, #28]
 80202b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80202b8:	8b7b      	ldrh	r3, [r7, #26]
 80202ba:	089b      	lsrs	r3, r3, #2
 80202bc:	b29b      	uxth	r3, r3
 80202be:	b2db      	uxtb	r3, r3
 80202c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80202c4:	b2da      	uxtb	r2, r3
 80202c6:	69fb      	ldr	r3, [r7, #28]
 80202c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80202ca:	69fb      	ldr	r3, [r7, #28]
 80202cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80202d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80202d2:	68fb      	ldr	r3, [r7, #12]
 80202d4:	891b      	ldrh	r3, [r3, #8]
 80202d6:	4618      	mov	r0, r3
 80202d8:	f7f4 fcee 	bl	8014cb8 <lwip_htons>
 80202dc:	4603      	mov	r3, r0
 80202de:	461a      	mov	r2, r3
 80202e0:	69fb      	ldr	r3, [r7, #28]
 80202e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80202e4:	69fb      	ldr	r3, [r7, #28]
 80202e6:	2200      	movs	r2, #0
 80202e8:	719a      	strb	r2, [r3, #6]
 80202ea:	2200      	movs	r2, #0
 80202ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80202ee:	4b2c      	ldr	r3, [pc, #176]	@ (80203a0 <ip4_output_if_src+0x188>)
 80202f0:	881b      	ldrh	r3, [r3, #0]
 80202f2:	4618      	mov	r0, r3
 80202f4:	f7f4 fce0 	bl	8014cb8 <lwip_htons>
 80202f8:	4603      	mov	r3, r0
 80202fa:	461a      	mov	r2, r3
 80202fc:	69fb      	ldr	r3, [r7, #28]
 80202fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020300:	4b27      	ldr	r3, [pc, #156]	@ (80203a0 <ip4_output_if_src+0x188>)
 8020302:	881b      	ldrh	r3, [r3, #0]
 8020304:	3301      	adds	r3, #1
 8020306:	b29a      	uxth	r2, r3
 8020308:	4b25      	ldr	r3, [pc, #148]	@ (80203a0 <ip4_output_if_src+0x188>)
 802030a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802030c:	68bb      	ldr	r3, [r7, #8]
 802030e:	2b00      	cmp	r3, #0
 8020310:	d104      	bne.n	802031c <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020312:	4b24      	ldr	r3, [pc, #144]	@ (80203a4 <ip4_output_if_src+0x18c>)
 8020314:	681a      	ldr	r2, [r3, #0]
 8020316:	69fb      	ldr	r3, [r7, #28]
 8020318:	60da      	str	r2, [r3, #12]
 802031a:	e003      	b.n	8020324 <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802031c:	68bb      	ldr	r3, [r7, #8]
 802031e:	681a      	ldr	r2, [r3, #0]
 8020320:	69fb      	ldr	r3, [r7, #28]
 8020322:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020324:	69fb      	ldr	r3, [r7, #28]
 8020326:	2200      	movs	r2, #0
 8020328:	729a      	strb	r2, [r3, #10]
 802032a:	2200      	movs	r2, #0
 802032c:	72da      	strb	r2, [r3, #11]
 802032e:	e008      	b.n	8020342 <ip4_output_if_src+0x12a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8020330:	68fb      	ldr	r3, [r7, #12]
 8020332:	685b      	ldr	r3, [r3, #4]
 8020334:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020336:	69fb      	ldr	r3, [r7, #28]
 8020338:	691b      	ldr	r3, [r3, #16]
 802033a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802033c:	f107 0314 	add.w	r3, r7, #20
 8020340:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8020342:	4b15      	ldr	r3, [pc, #84]	@ (8020398 <ip4_output_if_src+0x180>)
 8020344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8020348:	3301      	adds	r3, #1
 802034a:	b29a      	uxth	r2, r3
 802034c:	4b12      	ldr	r3, [pc, #72]	@ (8020398 <ip4_output_if_src+0x180>)
 802034e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020356:	2b00      	cmp	r3, #0
 8020358:	d00c      	beq.n	8020374 <ip4_output_if_src+0x15c>
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	891a      	ldrh	r2, [r3, #8]
 802035e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020362:	429a      	cmp	r2, r3
 8020364:	d906      	bls.n	8020374 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 8020366:	687a      	ldr	r2, [r7, #4]
 8020368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802036a:	68f8      	ldr	r0, [r7, #12]
 802036c:	f000 ff30 	bl	80211d0 <ip4_frag>
 8020370:	4603      	mov	r3, r0
 8020372:	e006      	b.n	8020382 <ip4_output_if_src+0x16a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020376:	695b      	ldr	r3, [r3, #20]
 8020378:	687a      	ldr	r2, [r7, #4]
 802037a:	68f9      	ldr	r1, [r7, #12]
 802037c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802037e:	4798      	blx	r3
 8020380:	4603      	mov	r3, r0
}
 8020382:	4618      	mov	r0, r3
 8020384:	3720      	adds	r7, #32
 8020386:	46bd      	mov	sp, r7
 8020388:	bd80      	pop	{r7, pc}
 802038a:	bf00      	nop
 802038c:	08027bec 	.word	0x08027bec
 8020390:	08027c20 	.word	0x08027c20
 8020394:	08027c2c 	.word	0x08027c2c
 8020398:	2000bbe4 	.word	0x2000bbe4
 802039c:	08027c54 	.word	0x08027c54
 80203a0:	2000bf02 	.word	0x2000bf02
 80203a4:	0803165c 	.word	0x0803165c

080203a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80203a8:	b480      	push	{r7}
 80203aa:	b085      	sub	sp, #20
 80203ac:	af00      	add	r7, sp, #0
 80203ae:	6078      	str	r0, [r7, #4]
 80203b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203bc:	d002      	beq.n	80203c4 <ip4_addr_isbroadcast_u32+0x1c>
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d101      	bne.n	80203c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80203c4:	2301      	movs	r3, #1
 80203c6:	e02a      	b.n	802041e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80203c8:	683b      	ldr	r3, [r7, #0]
 80203ca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80203ce:	f003 0302 	and.w	r3, r3, #2
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d101      	bne.n	80203da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80203d6:	2300      	movs	r3, #0
 80203d8:	e021      	b.n	802041e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80203da:	683b      	ldr	r3, [r7, #0]
 80203dc:	3304      	adds	r3, #4
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	687a      	ldr	r2, [r7, #4]
 80203e2:	429a      	cmp	r2, r3
 80203e4:	d101      	bne.n	80203ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80203e6:	2300      	movs	r3, #0
 80203e8:	e019      	b.n	802041e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80203ea:	68fa      	ldr	r2, [r7, #12]
 80203ec:	683b      	ldr	r3, [r7, #0]
 80203ee:	3304      	adds	r3, #4
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	405a      	eors	r2, r3
 80203f4:	683b      	ldr	r3, [r7, #0]
 80203f6:	3308      	adds	r3, #8
 80203f8:	681b      	ldr	r3, [r3, #0]
 80203fa:	4013      	ands	r3, r2
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d10d      	bne.n	802041c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020400:	683b      	ldr	r3, [r7, #0]
 8020402:	3308      	adds	r3, #8
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	43da      	mvns	r2, r3
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 802040c:	683b      	ldr	r3, [r7, #0]
 802040e:	3308      	adds	r3, #8
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020414:	429a      	cmp	r2, r3
 8020416:	d101      	bne.n	802041c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020418:	2301      	movs	r3, #1
 802041a:	e000      	b.n	802041e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 802041c:	2300      	movs	r3, #0
  }
}
 802041e:	4618      	mov	r0, r3
 8020420:	3714      	adds	r7, #20
 8020422:	46bd      	mov	sp, r7
 8020424:	bc80      	pop	{r7}
 8020426:	4770      	bx	lr

08020428 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8020428:	b580      	push	{r7, lr}
 802042a:	b084      	sub	sp, #16
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8020430:	f107 030c 	add.w	r3, r7, #12
 8020434:	4619      	mov	r1, r3
 8020436:	6878      	ldr	r0, [r7, #4]
 8020438:	f000 f80c 	bl	8020454 <ip4addr_aton>
 802043c:	4603      	mov	r3, r0
 802043e:	2b00      	cmp	r3, #0
 8020440:	d001      	beq.n	8020446 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8020442:	68fb      	ldr	r3, [r7, #12]
 8020444:	e001      	b.n	802044a <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8020446:	f04f 33ff 	mov.w	r3, #4294967295
}
 802044a:	4618      	mov	r0, r3
 802044c:	3710      	adds	r7, #16
 802044e:	46bd      	mov	sp, r7
 8020450:	bd80      	pop	{r7, pc}
	...

08020454 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8020454:	b580      	push	{r7, lr}
 8020456:	b08a      	sub	sp, #40	@ 0x28
 8020458:	af00      	add	r7, sp, #0
 802045a:	6078      	str	r0, [r7, #4]
 802045c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 802045e:	f107 030c 	add.w	r3, r7, #12
 8020462:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	781b      	ldrb	r3, [r3, #0]
 8020468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 802046c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020470:	2b2f      	cmp	r3, #47	@ 0x2f
 8020472:	d903      	bls.n	802047c <ip4addr_aton+0x28>
 8020474:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020478:	2b39      	cmp	r3, #57	@ 0x39
 802047a:	d901      	bls.n	8020480 <ip4addr_aton+0x2c>
      return 0;
 802047c:	2300      	movs	r3, #0
 802047e:	e11e      	b.n	80206be <ip4addr_aton+0x26a>
    }
    val = 0;
 8020480:	2300      	movs	r3, #0
 8020482:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8020484:	230a      	movs	r3, #10
 8020486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 802048a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802048e:	2b30      	cmp	r3, #48	@ 0x30
 8020490:	d11c      	bne.n	80204cc <ip4addr_aton+0x78>
      c = *++cp;
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	3301      	adds	r3, #1
 8020496:	607b      	str	r3, [r7, #4]
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	781b      	ldrb	r3, [r3, #0]
 802049c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 80204a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204a4:	2b78      	cmp	r3, #120	@ 0x78
 80204a6:	d003      	beq.n	80204b0 <ip4addr_aton+0x5c>
 80204a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204ac:	2b58      	cmp	r3, #88	@ 0x58
 80204ae:	d10a      	bne.n	80204c6 <ip4addr_aton+0x72>
        base = 16;
 80204b0:	2310      	movs	r3, #16
 80204b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	3301      	adds	r3, #1
 80204ba:	607b      	str	r3, [r7, #4]
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	781b      	ldrb	r3, [r3, #0]
 80204c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80204c4:	e002      	b.n	80204cc <ip4addr_aton+0x78>
      } else {
        base = 8;
 80204c6:	2308      	movs	r3, #8
 80204c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 80204cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80204d2:	d915      	bls.n	8020500 <ip4addr_aton+0xac>
 80204d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204d8:	2b39      	cmp	r3, #57	@ 0x39
 80204da:	d811      	bhi.n	8020500 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 80204dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80204e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80204e2:	fb03 f202 	mul.w	r2, r3, r2
 80204e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204ea:	4413      	add	r3, r2
 80204ec:	3b30      	subs	r3, #48	@ 0x30
 80204ee:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	3301      	adds	r3, #1
 80204f4:	607b      	str	r3, [r7, #4]
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	781b      	ldrb	r3, [r3, #0]
 80204fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80204fe:	e036      	b.n	802056e <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 8020500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8020504:	2b10      	cmp	r3, #16
 8020506:	d133      	bne.n	8020570 <ip4addr_aton+0x11c>
 8020508:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802050c:	2b2f      	cmp	r3, #47	@ 0x2f
 802050e:	d903      	bls.n	8020518 <ip4addr_aton+0xc4>
 8020510:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020514:	2b39      	cmp	r3, #57	@ 0x39
 8020516:	d90f      	bls.n	8020538 <ip4addr_aton+0xe4>
 8020518:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802051c:	2b60      	cmp	r3, #96	@ 0x60
 802051e:	d903      	bls.n	8020528 <ip4addr_aton+0xd4>
 8020520:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020524:	2b66      	cmp	r3, #102	@ 0x66
 8020526:	d907      	bls.n	8020538 <ip4addr_aton+0xe4>
 8020528:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802052c:	2b40      	cmp	r3, #64	@ 0x40
 802052e:	d91f      	bls.n	8020570 <ip4addr_aton+0x11c>
 8020530:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020534:	2b46      	cmp	r3, #70	@ 0x46
 8020536:	d81b      	bhi.n	8020570 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8020538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802053a:	011b      	lsls	r3, r3, #4
 802053c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8020540:	f102 010a 	add.w	r1, r2, #10
 8020544:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8020548:	2a60      	cmp	r2, #96	@ 0x60
 802054a:	d905      	bls.n	8020558 <ip4addr_aton+0x104>
 802054c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8020550:	2a7a      	cmp	r2, #122	@ 0x7a
 8020552:	d801      	bhi.n	8020558 <ip4addr_aton+0x104>
 8020554:	2261      	movs	r2, #97	@ 0x61
 8020556:	e000      	b.n	802055a <ip4addr_aton+0x106>
 8020558:	2241      	movs	r2, #65	@ 0x41
 802055a:	1a8a      	subs	r2, r1, r2
 802055c:	4313      	orrs	r3, r2
 802055e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	3301      	adds	r3, #1
 8020564:	607b      	str	r3, [r7, #4]
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	781b      	ldrb	r3, [r3, #0]
 802056a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 802056e:	e7ad      	b.n	80204cc <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 8020570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020574:	2b2e      	cmp	r3, #46	@ 0x2e
 8020576:	d114      	bne.n	80205a2 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8020578:	f107 030c 	add.w	r3, r7, #12
 802057c:	330c      	adds	r3, #12
 802057e:	69fa      	ldr	r2, [r7, #28]
 8020580:	429a      	cmp	r2, r3
 8020582:	d301      	bcc.n	8020588 <ip4addr_aton+0x134>
        return 0;
 8020584:	2300      	movs	r3, #0
 8020586:	e09a      	b.n	80206be <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 8020588:	69fb      	ldr	r3, [r7, #28]
 802058a:	1d1a      	adds	r2, r3, #4
 802058c:	61fa      	str	r2, [r7, #28]
 802058e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020590:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	3301      	adds	r3, #1
 8020596:	607b      	str	r3, [r7, #4]
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	781b      	ldrb	r3, [r3, #0]
 802059c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 80205a0:	e764      	b.n	802046c <ip4addr_aton+0x18>
    } else {
      break;
 80205a2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 80205a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d019      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205b0:	2b20      	cmp	r3, #32
 80205b2:	d015      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205b8:	2b0c      	cmp	r3, #12
 80205ba:	d011      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205c0:	2b0a      	cmp	r3, #10
 80205c2:	d00d      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205c8:	2b0d      	cmp	r3, #13
 80205ca:	d009      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205d0:	2b09      	cmp	r3, #9
 80205d2:	d005      	beq.n	80205e0 <ip4addr_aton+0x18c>
 80205d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205d8:	2b0b      	cmp	r3, #11
 80205da:	d001      	beq.n	80205e0 <ip4addr_aton+0x18c>
    return 0;
 80205dc:	2300      	movs	r3, #0
 80205de:	e06e      	b.n	80206be <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80205e0:	f107 030c 	add.w	r3, r7, #12
 80205e4:	69fa      	ldr	r2, [r7, #28]
 80205e6:	1ad3      	subs	r3, r2, r3
 80205e8:	109b      	asrs	r3, r3, #2
 80205ea:	3301      	adds	r3, #1
 80205ec:	2b04      	cmp	r3, #4
 80205ee:	d853      	bhi.n	8020698 <ip4addr_aton+0x244>
 80205f0:	a201      	add	r2, pc, #4	@ (adr r2, 80205f8 <ip4addr_aton+0x1a4>)
 80205f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205f6:	bf00      	nop
 80205f8:	0802060d 	.word	0x0802060d
 80205fc:	080206a9 	.word	0x080206a9
 8020600:	08020611 	.word	0x08020611
 8020604:	08020633 	.word	0x08020633
 8020608:	08020661 	.word	0x08020661

  case 0:
    return 0;       /* initial nondigit */
 802060c:	2300      	movs	r3, #0
 802060e:	e056      	b.n	80206be <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8020610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020612:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020616:	d301      	bcc.n	802061c <ip4addr_aton+0x1c8>
      return 0;
 8020618:	2300      	movs	r3, #0
 802061a:	e050      	b.n	80206be <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	2bff      	cmp	r3, #255	@ 0xff
 8020620:	d901      	bls.n	8020626 <ip4addr_aton+0x1d2>
      return 0;
 8020622:	2300      	movs	r3, #0
 8020624:	e04b      	b.n	80206be <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	061b      	lsls	r3, r3, #24
 802062a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802062c:	4313      	orrs	r3, r2
 802062e:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8020630:	e03b      	b.n	80206aa <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8020632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020638:	d301      	bcc.n	802063e <ip4addr_aton+0x1ea>
      return 0;
 802063a:	2300      	movs	r3, #0
 802063c:	e03f      	b.n	80206be <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	2bff      	cmp	r3, #255	@ 0xff
 8020642:	d802      	bhi.n	802064a <ip4addr_aton+0x1f6>
 8020644:	693b      	ldr	r3, [r7, #16]
 8020646:	2bff      	cmp	r3, #255	@ 0xff
 8020648:	d901      	bls.n	802064e <ip4addr_aton+0x1fa>
      return 0;
 802064a:	2300      	movs	r3, #0
 802064c:	e037      	b.n	80206be <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	061a      	lsls	r2, r3, #24
 8020652:	693b      	ldr	r3, [r7, #16]
 8020654:	041b      	lsls	r3, r3, #16
 8020656:	4313      	orrs	r3, r2
 8020658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802065a:	4313      	orrs	r3, r2
 802065c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 802065e:	e024      	b.n	80206aa <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8020660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020662:	2bff      	cmp	r3, #255	@ 0xff
 8020664:	d901      	bls.n	802066a <ip4addr_aton+0x216>
      return 0;
 8020666:	2300      	movs	r3, #0
 8020668:	e029      	b.n	80206be <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	2bff      	cmp	r3, #255	@ 0xff
 802066e:	d805      	bhi.n	802067c <ip4addr_aton+0x228>
 8020670:	693b      	ldr	r3, [r7, #16]
 8020672:	2bff      	cmp	r3, #255	@ 0xff
 8020674:	d802      	bhi.n	802067c <ip4addr_aton+0x228>
 8020676:	697b      	ldr	r3, [r7, #20]
 8020678:	2bff      	cmp	r3, #255	@ 0xff
 802067a:	d901      	bls.n	8020680 <ip4addr_aton+0x22c>
      return 0;
 802067c:	2300      	movs	r3, #0
 802067e:	e01e      	b.n	80206be <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8020680:	68fb      	ldr	r3, [r7, #12]
 8020682:	061a      	lsls	r2, r3, #24
 8020684:	693b      	ldr	r3, [r7, #16]
 8020686:	041b      	lsls	r3, r3, #16
 8020688:	431a      	orrs	r2, r3
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	021b      	lsls	r3, r3, #8
 802068e:	4313      	orrs	r3, r2
 8020690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020692:	4313      	orrs	r3, r2
 8020694:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8020696:	e008      	b.n	80206aa <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 8020698:	4b0b      	ldr	r3, [pc, #44]	@ (80206c8 <ip4addr_aton+0x274>)
 802069a:	f240 1203 	movw	r2, #259	@ 0x103
 802069e:	490b      	ldr	r1, [pc, #44]	@ (80206cc <ip4addr_aton+0x278>)
 80206a0:	480b      	ldr	r0, [pc, #44]	@ (80206d0 <ip4addr_aton+0x27c>)
 80206a2:	f001 fdcd 	bl	8022240 <iprintf>
    break;
 80206a6:	e000      	b.n	80206aa <ip4addr_aton+0x256>
    break;
 80206a8:	bf00      	nop
  }
  if (addr) {
 80206aa:	683b      	ldr	r3, [r7, #0]
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d005      	beq.n	80206bc <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80206b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80206b2:	f7f4 fb0e 	bl	8014cd2 <lwip_htonl>
 80206b6:	4602      	mov	r2, r0
 80206b8:	683b      	ldr	r3, [r7, #0]
 80206ba:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80206bc:	2301      	movs	r3, #1
}
 80206be:	4618      	mov	r0, r3
 80206c0:	3728      	adds	r7, #40	@ 0x28
 80206c2:	46bd      	mov	sp, r7
 80206c4:	bd80      	pop	{r7, pc}
 80206c6:	bf00      	nop
 80206c8:	08027c84 	.word	0x08027c84
 80206cc:	08027cc0 	.word	0x08027cc0
 80206d0:	08027ccc 	.word	0x08027ccc

080206d4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80206d4:	b580      	push	{r7, lr}
 80206d6:	b082      	sub	sp, #8
 80206d8:	af00      	add	r7, sp, #0
 80206da:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80206dc:	2210      	movs	r2, #16
 80206de:	4904      	ldr	r1, [pc, #16]	@ (80206f0 <ip4addr_ntoa+0x1c>)
 80206e0:	6878      	ldr	r0, [r7, #4]
 80206e2:	f000 f807 	bl	80206f4 <ip4addr_ntoa_r>
 80206e6:	4603      	mov	r3, r0
}
 80206e8:	4618      	mov	r0, r3
 80206ea:	3708      	adds	r7, #8
 80206ec:	46bd      	mov	sp, r7
 80206ee:	bd80      	pop	{r7, pc}
 80206f0:	2000bf04 	.word	0x2000bf04

080206f4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80206f4:	b480      	push	{r7}
 80206f6:	b08d      	sub	sp, #52	@ 0x34
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	60f8      	str	r0, [r7, #12]
 80206fc:	60b9      	str	r1, [r7, #8]
 80206fe:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8020700:	2300      	movs	r3, #0
 8020702:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8020704:	68fb      	ldr	r3, [r7, #12]
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802070a:	68bb      	ldr	r3, [r7, #8]
 802070c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 802070e:	f107 0318 	add.w	r3, r7, #24
 8020712:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8020714:	2300      	movs	r3, #0
 8020716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802071a:	e058      	b.n	80207ce <ip4addr_ntoa_r+0xda>
    i = 0;
 802071c:	2300      	movs	r3, #0
 802071e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8020722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020724:	781a      	ldrb	r2, [r3, #0]
 8020726:	4b32      	ldr	r3, [pc, #200]	@ (80207f0 <ip4addr_ntoa_r+0xfc>)
 8020728:	fba3 1302 	umull	r1, r3, r3, r2
 802072c:	08d9      	lsrs	r1, r3, #3
 802072e:	460b      	mov	r3, r1
 8020730:	009b      	lsls	r3, r3, #2
 8020732:	440b      	add	r3, r1
 8020734:	005b      	lsls	r3, r3, #1
 8020736:	1ad3      	subs	r3, r2, r3
 8020738:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 802073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802073c:	781b      	ldrb	r3, [r3, #0]
 802073e:	4a2c      	ldr	r2, [pc, #176]	@ (80207f0 <ip4addr_ntoa_r+0xfc>)
 8020740:	fba2 2303 	umull	r2, r3, r2, r3
 8020744:	08db      	lsrs	r3, r3, #3
 8020746:	b2da      	uxtb	r2, r3
 8020748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802074a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 802074c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8020750:	1c5a      	adds	r2, r3, #1
 8020752:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8020756:	4619      	mov	r1, r3
 8020758:	7ffb      	ldrb	r3, [r7, #31]
 802075a:	3330      	adds	r3, #48	@ 0x30
 802075c:	b2da      	uxtb	r2, r3
 802075e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8020762:	443b      	add	r3, r7
 8020764:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8020768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802076a:	781b      	ldrb	r3, [r3, #0]
 802076c:	2b00      	cmp	r3, #0
 802076e:	d1d8      	bne.n	8020722 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8020770:	e011      	b.n	8020796 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8020772:	6a3b      	ldr	r3, [r7, #32]
 8020774:	1c5a      	adds	r2, r3, #1
 8020776:	623a      	str	r2, [r7, #32]
 8020778:	687a      	ldr	r2, [r7, #4]
 802077a:	429a      	cmp	r2, r3
 802077c:	dc01      	bgt.n	8020782 <ip4addr_ntoa_r+0x8e>
        return NULL;
 802077e:	2300      	movs	r3, #0
 8020780:	e030      	b.n	80207e4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8020782:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8020786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020788:	1c59      	adds	r1, r3, #1
 802078a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802078c:	3230      	adds	r2, #48	@ 0x30
 802078e:	443a      	add	r2, r7
 8020790:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8020794:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8020796:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 802079a:	1e5a      	subs	r2, r3, #1
 802079c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d1e6      	bne.n	8020772 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80207a4:	6a3b      	ldr	r3, [r7, #32]
 80207a6:	1c5a      	adds	r2, r3, #1
 80207a8:	623a      	str	r2, [r7, #32]
 80207aa:	687a      	ldr	r2, [r7, #4]
 80207ac:	429a      	cmp	r2, r3
 80207ae:	dc01      	bgt.n	80207b4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80207b0:	2300      	movs	r3, #0
 80207b2:	e017      	b.n	80207e4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80207b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207b6:	1c5a      	adds	r2, r3, #1
 80207b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80207ba:	222e      	movs	r2, #46	@ 0x2e
 80207bc:	701a      	strb	r2, [r3, #0]
    ap++;
 80207be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207c0:	3301      	adds	r3, #1
 80207c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80207c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80207c8:	3301      	adds	r3, #1
 80207ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80207ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80207d2:	2b03      	cmp	r3, #3
 80207d4:	d9a2      	bls.n	802071c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80207d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207d8:	3b01      	subs	r3, #1
 80207da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80207dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207de:	2200      	movs	r2, #0
 80207e0:	701a      	strb	r2, [r3, #0]
  return buf;
 80207e2:	68bb      	ldr	r3, [r7, #8]
}
 80207e4:	4618      	mov	r0, r3
 80207e6:	3734      	adds	r7, #52	@ 0x34
 80207e8:	46bd      	mov	sp, r7
 80207ea:	bc80      	pop	{r7}
 80207ec:	4770      	bx	lr
 80207ee:	bf00      	nop
 80207f0:	cccccccd 	.word	0xcccccccd

080207f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80207f4:	b580      	push	{r7, lr}
 80207f6:	b084      	sub	sp, #16
 80207f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80207fa:	2300      	movs	r3, #0
 80207fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80207fe:	4b12      	ldr	r3, [pc, #72]	@ (8020848 <ip_reass_tmr+0x54>)
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8020804:	e018      	b.n	8020838 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	7fdb      	ldrb	r3, [r3, #31]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d00b      	beq.n	8020826 <ip_reass_tmr+0x32>
      r->timer--;
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	7fdb      	ldrb	r3, [r3, #31]
 8020812:	3b01      	subs	r3, #1
 8020814:	b2da      	uxtb	r2, r3
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	60fb      	str	r3, [r7, #12]
 8020824:	e008      	b.n	8020838 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020830:	68b9      	ldr	r1, [r7, #8]
 8020832:	6878      	ldr	r0, [r7, #4]
 8020834:	f000 f80a 	bl	802084c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	2b00      	cmp	r3, #0
 802083c:	d1e3      	bne.n	8020806 <ip_reass_tmr+0x12>
     }
   }
}
 802083e:	bf00      	nop
 8020840:	bf00      	nop
 8020842:	3710      	adds	r7, #16
 8020844:	46bd      	mov	sp, r7
 8020846:	bd80      	pop	{r7, pc}
 8020848:	2000bf14 	.word	0x2000bf14

0802084c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	b088      	sub	sp, #32
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
 8020854:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8020856:	2300      	movs	r3, #0
 8020858:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802085a:	683a      	ldr	r2, [r7, #0]
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	429a      	cmp	r2, r3
 8020860:	d105      	bne.n	802086e <ip_reass_free_complete_datagram+0x22>
 8020862:	4b48      	ldr	r3, [pc, #288]	@ (8020984 <ip_reass_free_complete_datagram+0x138>)
 8020864:	22ab      	movs	r2, #171	@ 0xab
 8020866:	4948      	ldr	r1, [pc, #288]	@ (8020988 <ip_reass_free_complete_datagram+0x13c>)
 8020868:	4848      	ldr	r0, [pc, #288]	@ (802098c <ip_reass_free_complete_datagram+0x140>)
 802086a:	f001 fce9 	bl	8022240 <iprintf>
  if (prev != NULL) {
 802086e:	683b      	ldr	r3, [r7, #0]
 8020870:	2b00      	cmp	r3, #0
 8020872:	d00a      	beq.n	802088a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020874:	683b      	ldr	r3, [r7, #0]
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	687a      	ldr	r2, [r7, #4]
 802087a:	429a      	cmp	r2, r3
 802087c:	d005      	beq.n	802088a <ip_reass_free_complete_datagram+0x3e>
 802087e:	4b41      	ldr	r3, [pc, #260]	@ (8020984 <ip_reass_free_complete_datagram+0x138>)
 8020880:	22ad      	movs	r2, #173	@ 0xad
 8020882:	4943      	ldr	r1, [pc, #268]	@ (8020990 <ip_reass_free_complete_datagram+0x144>)
 8020884:	4841      	ldr	r0, [pc, #260]	@ (802098c <ip_reass_free_complete_datagram+0x140>)
 8020886:	f001 fcdb 	bl	8022240 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 802088a:	4b42      	ldr	r3, [pc, #264]	@ (8020994 <ip_reass_free_complete_datagram+0x148>)
 802088c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8020890:	3301      	adds	r3, #1
 8020892:	4a40      	ldr	r2, [pc, #256]	@ (8020994 <ip_reass_free_complete_datagram+0x148>)
 8020894:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	685b      	ldr	r3, [r3, #4]
 802089c:	685b      	ldr	r3, [r3, #4]
 802089e:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80208a0:	697b      	ldr	r3, [r7, #20]
 80208a2:	889b      	ldrh	r3, [r3, #4]
 80208a4:	b29b      	uxth	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d12a      	bne.n	8020900 <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	685b      	ldr	r3, [r3, #4]
 80208ae:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80208b0:	697b      	ldr	r3, [r7, #20]
 80208b2:	681a      	ldr	r2, [r3, #0]
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80208b8:	69bb      	ldr	r3, [r7, #24]
 80208ba:	6858      	ldr	r0, [r3, #4]
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	3308      	adds	r3, #8
 80208c0:	2214      	movs	r2, #20
 80208c2:	4619      	mov	r1, r3
 80208c4:	f001 ffb7 	bl	8022836 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80208c8:	2101      	movs	r1, #1
 80208ca:	69b8      	ldr	r0, [r7, #24]
 80208cc:	f7ff f96e 	bl	801fbac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80208d0:	69b8      	ldr	r0, [r7, #24]
 80208d2:	f7f5 fd2b 	bl	801632c <pbuf_clen>
 80208d6:	4603      	mov	r3, r0
 80208d8:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80208da:	8bfa      	ldrh	r2, [r7, #30]
 80208dc:	8a7b      	ldrh	r3, [r7, #18]
 80208de:	4413      	add	r3, r2
 80208e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80208e4:	db05      	blt.n	80208f2 <ip_reass_free_complete_datagram+0xa6>
 80208e6:	4b27      	ldr	r3, [pc, #156]	@ (8020984 <ip_reass_free_complete_datagram+0x138>)
 80208e8:	22bc      	movs	r2, #188	@ 0xbc
 80208ea:	492b      	ldr	r1, [pc, #172]	@ (8020998 <ip_reass_free_complete_datagram+0x14c>)
 80208ec:	4827      	ldr	r0, [pc, #156]	@ (802098c <ip_reass_free_complete_datagram+0x140>)
 80208ee:	f001 fca7 	bl	8022240 <iprintf>
    pbufs_freed += clen;
 80208f2:	8bfa      	ldrh	r2, [r7, #30]
 80208f4:	8a7b      	ldrh	r3, [r7, #18]
 80208f6:	4413      	add	r3, r2
 80208f8:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80208fa:	69b8      	ldr	r0, [r7, #24]
 80208fc:	f7f5 fc82 	bl	8016204 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	685b      	ldr	r3, [r3, #4]
 8020904:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8020906:	e01f      	b.n	8020948 <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020908:	69bb      	ldr	r3, [r7, #24]
 802090a:	685b      	ldr	r3, [r3, #4]
 802090c:	617b      	str	r3, [r7, #20]
    pcur = p;
 802090e:	69bb      	ldr	r3, [r7, #24]
 8020910:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8020912:	697b      	ldr	r3, [r7, #20]
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020918:	68f8      	ldr	r0, [r7, #12]
 802091a:	f7f5 fd07 	bl	801632c <pbuf_clen>
 802091e:	4603      	mov	r3, r0
 8020920:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020922:	8bfa      	ldrh	r2, [r7, #30]
 8020924:	8a7b      	ldrh	r3, [r7, #18]
 8020926:	4413      	add	r3, r2
 8020928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802092c:	db05      	blt.n	802093a <ip_reass_free_complete_datagram+0xee>
 802092e:	4b15      	ldr	r3, [pc, #84]	@ (8020984 <ip_reass_free_complete_datagram+0x138>)
 8020930:	22cc      	movs	r2, #204	@ 0xcc
 8020932:	4919      	ldr	r1, [pc, #100]	@ (8020998 <ip_reass_free_complete_datagram+0x14c>)
 8020934:	4815      	ldr	r0, [pc, #84]	@ (802098c <ip_reass_free_complete_datagram+0x140>)
 8020936:	f001 fc83 	bl	8022240 <iprintf>
    pbufs_freed += clen;
 802093a:	8bfa      	ldrh	r2, [r7, #30]
 802093c:	8a7b      	ldrh	r3, [r7, #18]
 802093e:	4413      	add	r3, r2
 8020940:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020942:	68f8      	ldr	r0, [r7, #12]
 8020944:	f7f5 fc5e 	bl	8016204 <pbuf_free>
  while (p != NULL) {
 8020948:	69bb      	ldr	r3, [r7, #24]
 802094a:	2b00      	cmp	r3, #0
 802094c:	d1dc      	bne.n	8020908 <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802094e:	6839      	ldr	r1, [r7, #0]
 8020950:	6878      	ldr	r0, [r7, #4]
 8020952:	f000 f8cb 	bl	8020aec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8020956:	4b11      	ldr	r3, [pc, #68]	@ (802099c <ip_reass_free_complete_datagram+0x150>)
 8020958:	881b      	ldrh	r3, [r3, #0]
 802095a:	8bfa      	ldrh	r2, [r7, #30]
 802095c:	429a      	cmp	r2, r3
 802095e:	d905      	bls.n	802096c <ip_reass_free_complete_datagram+0x120>
 8020960:	4b08      	ldr	r3, [pc, #32]	@ (8020984 <ip_reass_free_complete_datagram+0x138>)
 8020962:	22d2      	movs	r2, #210	@ 0xd2
 8020964:	490e      	ldr	r1, [pc, #56]	@ (80209a0 <ip_reass_free_complete_datagram+0x154>)
 8020966:	4809      	ldr	r0, [pc, #36]	@ (802098c <ip_reass_free_complete_datagram+0x140>)
 8020968:	f001 fc6a 	bl	8022240 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 802096c:	4b0b      	ldr	r3, [pc, #44]	@ (802099c <ip_reass_free_complete_datagram+0x150>)
 802096e:	881a      	ldrh	r2, [r3, #0]
 8020970:	8bfb      	ldrh	r3, [r7, #30]
 8020972:	1ad3      	subs	r3, r2, r3
 8020974:	b29a      	uxth	r2, r3
 8020976:	4b09      	ldr	r3, [pc, #36]	@ (802099c <ip_reass_free_complete_datagram+0x150>)
 8020978:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 802097a:	8bfb      	ldrh	r3, [r7, #30]
}
 802097c:	4618      	mov	r0, r3
 802097e:	3720      	adds	r7, #32
 8020980:	46bd      	mov	sp, r7
 8020982:	bd80      	pop	{r7, pc}
 8020984:	08027cf4 	.word	0x08027cf4
 8020988:	08027d30 	.word	0x08027d30
 802098c:	08027d3c 	.word	0x08027d3c
 8020990:	08027d64 	.word	0x08027d64
 8020994:	2000bbe4 	.word	0x2000bbe4
 8020998:	08027d78 	.word	0x08027d78
 802099c:	2000bf18 	.word	0x2000bf18
 80209a0:	08027d98 	.word	0x08027d98

080209a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80209a4:	b580      	push	{r7, lr}
 80209a6:	b08a      	sub	sp, #40	@ 0x28
 80209a8:	af00      	add	r7, sp, #0
 80209aa:	6078      	str	r0, [r7, #4]
 80209ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80209ae:	2300      	movs	r3, #0
 80209b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80209b2:	2300      	movs	r3, #0
 80209b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80209b6:	2300      	movs	r3, #0
 80209b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80209ba:	2300      	movs	r3, #0
 80209bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80209be:	2300      	movs	r3, #0
 80209c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80209c2:	4b28      	ldr	r3, [pc, #160]	@ (8020a64 <ip_reass_remove_oldest_datagram+0xc0>)
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80209c8:	e030      	b.n	8020a2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80209ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209cc:	695a      	ldr	r2, [r3, #20]
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	68db      	ldr	r3, [r3, #12]
 80209d2:	429a      	cmp	r2, r3
 80209d4:	d10c      	bne.n	80209f0 <ip_reass_remove_oldest_datagram+0x4c>
 80209d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209d8:	699a      	ldr	r2, [r3, #24]
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	691b      	ldr	r3, [r3, #16]
 80209de:	429a      	cmp	r2, r3
 80209e0:	d106      	bne.n	80209f0 <ip_reass_remove_oldest_datagram+0x4c>
 80209e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209e4:	899a      	ldrh	r2, [r3, #12]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	889b      	ldrh	r3, [r3, #4]
 80209ea:	b29b      	uxth	r3, r3
 80209ec:	429a      	cmp	r2, r3
 80209ee:	d014      	beq.n	8020a1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80209f0:	693b      	ldr	r3, [r7, #16]
 80209f2:	3301      	adds	r3, #1
 80209f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80209f6:	6a3b      	ldr	r3, [r7, #32]
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d104      	bne.n	8020a06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80209fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020a00:	69fb      	ldr	r3, [r7, #28]
 8020a02:	61bb      	str	r3, [r7, #24]
 8020a04:	e009      	b.n	8020a1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8020a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a08:	7fda      	ldrb	r2, [r3, #31]
 8020a0a:	6a3b      	ldr	r3, [r7, #32]
 8020a0c:	7fdb      	ldrb	r3, [r3, #31]
 8020a0e:	429a      	cmp	r2, r3
 8020a10:	d803      	bhi.n	8020a1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8020a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020a16:	69fb      	ldr	r3, [r7, #28]
 8020a18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d001      	beq.n	8020a26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8020a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8020a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8020a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d1cb      	bne.n	80209ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8020a32:	6a3b      	ldr	r3, [r7, #32]
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	d008      	beq.n	8020a4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020a38:	69b9      	ldr	r1, [r7, #24]
 8020a3a:	6a38      	ldr	r0, [r7, #32]
 8020a3c:	f7ff ff06 	bl	802084c <ip_reass_free_complete_datagram>
 8020a40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020a42:	697a      	ldr	r2, [r7, #20]
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	4413      	add	r3, r2
 8020a48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020a4a:	697a      	ldr	r2, [r7, #20]
 8020a4c:	683b      	ldr	r3, [r7, #0]
 8020a4e:	429a      	cmp	r2, r3
 8020a50:	da02      	bge.n	8020a58 <ip_reass_remove_oldest_datagram+0xb4>
 8020a52:	693b      	ldr	r3, [r7, #16]
 8020a54:	2b01      	cmp	r3, #1
 8020a56:	dcac      	bgt.n	80209b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020a58:	697b      	ldr	r3, [r7, #20]
}
 8020a5a:	4618      	mov	r0, r3
 8020a5c:	3728      	adds	r7, #40	@ 0x28
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	bd80      	pop	{r7, pc}
 8020a62:	bf00      	nop
 8020a64:	2000bf14 	.word	0x2000bf14

08020a68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020a68:	b580      	push	{r7, lr}
 8020a6a:	b084      	sub	sp, #16
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	6078      	str	r0, [r7, #4]
 8020a70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020a72:	2004      	movs	r0, #4
 8020a74:	f7f4 fdca 	bl	801560c <memp_malloc>
 8020a78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020a7a:	68fb      	ldr	r3, [r7, #12]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d116      	bne.n	8020aae <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020a80:	6839      	ldr	r1, [r7, #0]
 8020a82:	6878      	ldr	r0, [r7, #4]
 8020a84:	f7ff ff8e 	bl	80209a4 <ip_reass_remove_oldest_datagram>
 8020a88:	4602      	mov	r2, r0
 8020a8a:	683b      	ldr	r3, [r7, #0]
 8020a8c:	4293      	cmp	r3, r2
 8020a8e:	dc03      	bgt.n	8020a98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020a90:	2004      	movs	r0, #4
 8020a92:	f7f4 fdbb 	bl	801560c <memp_malloc>
 8020a96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020a98:	68fb      	ldr	r3, [r7, #12]
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d107      	bne.n	8020aae <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8020a9e:	4b11      	ldr	r3, [pc, #68]	@ (8020ae4 <ip_reass_enqueue_new_datagram+0x7c>)
 8020aa0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8020aa2:	3301      	adds	r3, #1
 8020aa4:	b29a      	uxth	r2, r3
 8020aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8020ae4 <ip_reass_enqueue_new_datagram+0x7c>)
 8020aa8:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8020aaa:	2300      	movs	r3, #0
 8020aac:	e016      	b.n	8020adc <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020aae:	2220      	movs	r2, #32
 8020ab0:	2100      	movs	r1, #0
 8020ab2:	68f8      	ldr	r0, [r7, #12]
 8020ab4:	f001 fd9a 	bl	80225ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020ab8:	68fb      	ldr	r3, [r7, #12]
 8020aba:	2203      	movs	r2, #3
 8020abc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020abe:	4b0a      	ldr	r3, [pc, #40]	@ (8020ae8 <ip_reass_enqueue_new_datagram+0x80>)
 8020ac0:	681a      	ldr	r2, [r3, #0]
 8020ac2:	68fb      	ldr	r3, [r7, #12]
 8020ac4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8020ac6:	4a08      	ldr	r2, [pc, #32]	@ (8020ae8 <ip_reass_enqueue_new_datagram+0x80>)
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020acc:	68fb      	ldr	r3, [r7, #12]
 8020ace:	3308      	adds	r3, #8
 8020ad0:	2214      	movs	r2, #20
 8020ad2:	6879      	ldr	r1, [r7, #4]
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	f001 feae 	bl	8022836 <memcpy>
  return ipr;
 8020ada:	68fb      	ldr	r3, [r7, #12]
}
 8020adc:	4618      	mov	r0, r3
 8020ade:	3710      	adds	r7, #16
 8020ae0:	46bd      	mov	sp, r7
 8020ae2:	bd80      	pop	{r7, pc}
 8020ae4:	2000bbe4 	.word	0x2000bbe4
 8020ae8:	2000bf14 	.word	0x2000bf14

08020aec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020aec:	b580      	push	{r7, lr}
 8020aee:	b082      	sub	sp, #8
 8020af0:	af00      	add	r7, sp, #0
 8020af2:	6078      	str	r0, [r7, #4]
 8020af4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020af6:	4b10      	ldr	r3, [pc, #64]	@ (8020b38 <ip_reass_dequeue_datagram+0x4c>)
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	687a      	ldr	r2, [r7, #4]
 8020afc:	429a      	cmp	r2, r3
 8020afe:	d104      	bne.n	8020b0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	4a0c      	ldr	r2, [pc, #48]	@ (8020b38 <ip_reass_dequeue_datagram+0x4c>)
 8020b06:	6013      	str	r3, [r2, #0]
 8020b08:	e00d      	b.n	8020b26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020b0a:	683b      	ldr	r3, [r7, #0]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d106      	bne.n	8020b1e <ip_reass_dequeue_datagram+0x32>
 8020b10:	4b0a      	ldr	r3, [pc, #40]	@ (8020b3c <ip_reass_dequeue_datagram+0x50>)
 8020b12:	f240 1245 	movw	r2, #325	@ 0x145
 8020b16:	490a      	ldr	r1, [pc, #40]	@ (8020b40 <ip_reass_dequeue_datagram+0x54>)
 8020b18:	480a      	ldr	r0, [pc, #40]	@ (8020b44 <ip_reass_dequeue_datagram+0x58>)
 8020b1a:	f001 fb91 	bl	8022240 <iprintf>
    prev->next = ipr->next;
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	681a      	ldr	r2, [r3, #0]
 8020b22:	683b      	ldr	r3, [r7, #0]
 8020b24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020b26:	6879      	ldr	r1, [r7, #4]
 8020b28:	2004      	movs	r0, #4
 8020b2a:	f7f4 fdc1 	bl	80156b0 <memp_free>
}
 8020b2e:	bf00      	nop
 8020b30:	3708      	adds	r7, #8
 8020b32:	46bd      	mov	sp, r7
 8020b34:	bd80      	pop	{r7, pc}
 8020b36:	bf00      	nop
 8020b38:	2000bf14 	.word	0x2000bf14
 8020b3c:	08027cf4 	.word	0x08027cf4
 8020b40:	08027db4 	.word	0x08027db4
 8020b44:	08027d3c 	.word	0x08027d3c

08020b48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	b08c      	sub	sp, #48	@ 0x30
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	60f8      	str	r0, [r7, #12]
 8020b50:	60b9      	str	r1, [r7, #8]
 8020b52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8020b54:	2300      	movs	r3, #0
 8020b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020b58:	2301      	movs	r3, #1
 8020b5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8020b5c:	68bb      	ldr	r3, [r7, #8]
 8020b5e:	685b      	ldr	r3, [r3, #4]
 8020b60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8020b62:	69fb      	ldr	r3, [r7, #28]
 8020b64:	885b      	ldrh	r3, [r3, #2]
 8020b66:	b29b      	uxth	r3, r3
 8020b68:	4618      	mov	r0, r3
 8020b6a:	f7f4 f8a5 	bl	8014cb8 <lwip_htons>
 8020b6e:	4603      	mov	r3, r0
 8020b70:	461a      	mov	r2, r3
 8020b72:	69fb      	ldr	r3, [r7, #28]
 8020b74:	781b      	ldrb	r3, [r3, #0]
 8020b76:	f003 030f 	and.w	r3, r3, #15
 8020b7a:	b29b      	uxth	r3, r3
 8020b7c:	009b      	lsls	r3, r3, #2
 8020b7e:	b29b      	uxth	r3, r3
 8020b80:	1ad3      	subs	r3, r2, r3
 8020b82:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8020b84:	69fb      	ldr	r3, [r7, #28]
 8020b86:	88db      	ldrh	r3, [r3, #6]
 8020b88:	b29b      	uxth	r3, r3
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	f7f4 f894 	bl	8014cb8 <lwip_htons>
 8020b90:	4603      	mov	r3, r0
 8020b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020b96:	b29b      	uxth	r3, r3
 8020b98:	00db      	lsls	r3, r3, #3
 8020b9a:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8020b9c:	68bb      	ldr	r3, [r7, #8]
 8020b9e:	685b      	ldr	r3, [r3, #4]
 8020ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8020ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	701a      	strb	r2, [r3, #0]
 8020ba8:	2200      	movs	r2, #0
 8020baa:	705a      	strb	r2, [r3, #1]
 8020bac:	2200      	movs	r2, #0
 8020bae:	709a      	strb	r2, [r3, #2]
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8020bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bb6:	8b3a      	ldrh	r2, [r7, #24]
 8020bb8:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8020bba:	8b3a      	ldrh	r2, [r7, #24]
 8020bbc:	8b7b      	ldrh	r3, [r7, #26]
 8020bbe:	4413      	add	r3, r2
 8020bc0:	b29a      	uxth	r2, r3
 8020bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bc4:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	685b      	ldr	r3, [r3, #4]
 8020bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8020bcc:	e061      	b.n	8020c92 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8020bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bd0:	685b      	ldr	r3, [r3, #4]
 8020bd2:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8020bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bd6:	889b      	ldrh	r3, [r3, #4]
 8020bd8:	b29a      	uxth	r2, r3
 8020bda:	697b      	ldr	r3, [r7, #20]
 8020bdc:	889b      	ldrh	r3, [r3, #4]
 8020bde:	b29b      	uxth	r3, r3
 8020be0:	429a      	cmp	r2, r3
 8020be2:	d232      	bcs.n	8020c4a <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8020be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020be8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8020bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d01f      	beq.n	8020c30 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8020bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bf2:	889b      	ldrh	r3, [r3, #4]
 8020bf4:	b29a      	uxth	r2, r3
 8020bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020bf8:	88db      	ldrh	r3, [r3, #6]
 8020bfa:	b29b      	uxth	r3, r3
 8020bfc:	429a      	cmp	r2, r3
 8020bfe:	f0c0 80e3 	bcc.w	8020dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 8020c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c04:	88db      	ldrh	r3, [r3, #6]
 8020c06:	b29a      	uxth	r2, r3
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	889b      	ldrh	r3, [r3, #4]
 8020c0c:	b29b      	uxth	r3, r3
 8020c0e:	429a      	cmp	r2, r3
 8020c10:	f200 80da 	bhi.w	8020dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8020c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c16:	68ba      	ldr	r2, [r7, #8]
 8020c18:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c1c:	88db      	ldrh	r3, [r3, #6]
 8020c1e:	b29a      	uxth	r2, r3
 8020c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c22:	889b      	ldrh	r3, [r3, #4]
 8020c24:	b29b      	uxth	r3, r3
 8020c26:	429a      	cmp	r2, r3
 8020c28:	d037      	beq.n	8020c9a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020c2e:	e034      	b.n	8020c9a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8020c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c32:	88db      	ldrh	r3, [r3, #6]
 8020c34:	b29a      	uxth	r2, r3
 8020c36:	697b      	ldr	r3, [r7, #20]
 8020c38:	889b      	ldrh	r3, [r3, #4]
 8020c3a:	b29b      	uxth	r3, r3
 8020c3c:	429a      	cmp	r2, r3
 8020c3e:	f200 80c5 	bhi.w	8020dcc <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	68ba      	ldr	r2, [r7, #8]
 8020c46:	605a      	str	r2, [r3, #4]
      break;
 8020c48:	e027      	b.n	8020c9a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8020c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c4c:	889b      	ldrh	r3, [r3, #4]
 8020c4e:	b29a      	uxth	r2, r3
 8020c50:	697b      	ldr	r3, [r7, #20]
 8020c52:	889b      	ldrh	r3, [r3, #4]
 8020c54:	b29b      	uxth	r3, r3
 8020c56:	429a      	cmp	r2, r3
 8020c58:	f000 80ba 	beq.w	8020dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c5e:	889b      	ldrh	r3, [r3, #4]
 8020c60:	b29a      	uxth	r2, r3
 8020c62:	697b      	ldr	r3, [r7, #20]
 8020c64:	88db      	ldrh	r3, [r3, #6]
 8020c66:	b29b      	uxth	r3, r3
 8020c68:	429a      	cmp	r2, r3
 8020c6a:	f0c0 80b3 	bcc.w	8020dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d009      	beq.n	8020c88 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 8020c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c76:	88db      	ldrh	r3, [r3, #6]
 8020c78:	b29a      	uxth	r2, r3
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	889b      	ldrh	r3, [r3, #4]
 8020c7e:	b29b      	uxth	r3, r3
 8020c80:	429a      	cmp	r2, r3
 8020c82:	d001      	beq.n	8020c88 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020c84:	2300      	movs	r3, #0
 8020c86:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8020c8e:	697b      	ldr	r3, [r7, #20]
 8020c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8020c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d19a      	bne.n	8020bce <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 8020c98:	e000      	b.n	8020c9c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 8020c9a:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	d12d      	bne.n	8020cfe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 8020ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d01c      	beq.n	8020ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020caa:	88db      	ldrh	r3, [r3, #6]
 8020cac:	b29a      	uxth	r2, r3
 8020cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cb0:	889b      	ldrh	r3, [r3, #4]
 8020cb2:	b29b      	uxth	r3, r3
 8020cb4:	429a      	cmp	r2, r3
 8020cb6:	d906      	bls.n	8020cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 8020cb8:	4b51      	ldr	r3, [pc, #324]	@ (8020e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020cba:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8020cbe:	4951      	ldr	r1, [pc, #324]	@ (8020e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020cc0:	4851      	ldr	r0, [pc, #324]	@ (8020e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020cc2:	f001 fabd 	bl	8022240 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8020cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cc8:	68ba      	ldr	r2, [r7, #8]
 8020cca:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cce:	88db      	ldrh	r3, [r3, #6]
 8020cd0:	b29a      	uxth	r2, r3
 8020cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cd4:	889b      	ldrh	r3, [r3, #4]
 8020cd6:	b29b      	uxth	r3, r3
 8020cd8:	429a      	cmp	r2, r3
 8020cda:	d010      	beq.n	8020cfe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8020cdc:	2300      	movs	r3, #0
 8020cde:	623b      	str	r3, [r7, #32]
 8020ce0:	e00d      	b.n	8020cfe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8020ce2:	68fb      	ldr	r3, [r7, #12]
 8020ce4:	685b      	ldr	r3, [r3, #4]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d006      	beq.n	8020cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8020cea:	4b45      	ldr	r3, [pc, #276]	@ (8020e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020cec:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8020cf0:	4946      	ldr	r1, [pc, #280]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020cf2:	4845      	ldr	r0, [pc, #276]	@ (8020e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020cf4:	f001 faa4 	bl	8022240 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	68ba      	ldr	r2, [r7, #8]
 8020cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d105      	bne.n	8020d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	7f9b      	ldrb	r3, [r3, #30]
 8020d08:	f003 0301 	and.w	r3, r3, #1
 8020d0c:	2b00      	cmp	r3, #0
 8020d0e:	d059      	beq.n	8020dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8020d10:	6a3b      	ldr	r3, [r7, #32]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d04f      	beq.n	8020db6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8020d16:	68fb      	ldr	r3, [r7, #12]
 8020d18:	685b      	ldr	r3, [r3, #4]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d006      	beq.n	8020d2c <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8020d1e:	68fb      	ldr	r3, [r7, #12]
 8020d20:	685b      	ldr	r3, [r3, #4]
 8020d22:	685b      	ldr	r3, [r3, #4]
 8020d24:	889b      	ldrh	r3, [r3, #4]
 8020d26:	b29b      	uxth	r3, r3
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d002      	beq.n	8020d32 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	623b      	str	r3, [r7, #32]
 8020d30:	e041      	b.n	8020db6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8020d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d34:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8020d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020d3c:	e012      	b.n	8020d64 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8020d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d40:	685b      	ldr	r3, [r3, #4]
 8020d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8020d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d46:	88db      	ldrh	r3, [r3, #6]
 8020d48:	b29a      	uxth	r2, r3
 8020d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d4c:	889b      	ldrh	r3, [r3, #4]
 8020d4e:	b29b      	uxth	r3, r3
 8020d50:	429a      	cmp	r2, r3
 8020d52:	d002      	beq.n	8020d5a <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 8020d54:	2300      	movs	r3, #0
 8020d56:	623b      	str	r3, [r7, #32]
            break;
 8020d58:	e007      	b.n	8020d6a <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8020d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8020d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d1e9      	bne.n	8020d3e <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020d6a:	6a3b      	ldr	r3, [r7, #32]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d022      	beq.n	8020db6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	685b      	ldr	r3, [r3, #4]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d106      	bne.n	8020d86 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 8020d78:	4b21      	ldr	r3, [pc, #132]	@ (8020e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020d7a:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 8020d7e:	4924      	ldr	r1, [pc, #144]	@ (8020e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020d80:	4821      	ldr	r0, [pc, #132]	@ (8020e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020d82:	f001 fa5d 	bl	8022240 <iprintf>
          LWIP_ASSERT("sanity check",
 8020d86:	68fb      	ldr	r3, [r7, #12]
 8020d88:	685b      	ldr	r3, [r3, #4]
 8020d8a:	685b      	ldr	r3, [r3, #4]
 8020d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020d8e:	429a      	cmp	r2, r3
 8020d90:	d106      	bne.n	8020da0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 8020d92:	4b1b      	ldr	r3, [pc, #108]	@ (8020e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020d94:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8020d98:	491d      	ldr	r1, [pc, #116]	@ (8020e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020d9a:	481b      	ldr	r0, [pc, #108]	@ (8020e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020d9c:	f001 fa50 	bl	8022240 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8020da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d006      	beq.n	8020db6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 8020da8:	4b15      	ldr	r3, [pc, #84]	@ (8020e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020daa:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8020dae:	4919      	ldr	r1, [pc, #100]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020db0:	4815      	ldr	r0, [pc, #84]	@ (8020e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020db2:	f001 fa45 	bl	8022240 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8020db6:	6a3b      	ldr	r3, [r7, #32]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	bf14      	ite	ne
 8020dbc:	2301      	movne	r3, #1
 8020dbe:	2300      	moveq	r3, #0
 8020dc0:	b2db      	uxtb	r3, r3
 8020dc2:	e018      	b.n	8020df6 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	e016      	b.n	8020df6 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8020dc8:	bf00      	nop
 8020dca:	e004      	b.n	8020dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8020dcc:	bf00      	nop
 8020dce:	e002      	b.n	8020dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8020dd0:	bf00      	nop
 8020dd2:	e000      	b.n	8020dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8020dd4:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8020dd6:	68b8      	ldr	r0, [r7, #8]
 8020dd8:	f7f5 faa8 	bl	801632c <pbuf_clen>
 8020ddc:	4603      	mov	r3, r0
 8020dde:	461a      	mov	r2, r3
 8020de0:	4b0d      	ldr	r3, [pc, #52]	@ (8020e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020de2:	881b      	ldrh	r3, [r3, #0]
 8020de4:	1a9b      	subs	r3, r3, r2
 8020de6:	b29a      	uxth	r2, r3
 8020de8:	4b0b      	ldr	r3, [pc, #44]	@ (8020e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020dea:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8020dec:	68b8      	ldr	r0, [r7, #8]
 8020dee:	f7f5 fa09 	bl	8016204 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020df2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8020df6:	4618      	mov	r0, r3
 8020df8:	3730      	adds	r7, #48	@ 0x30
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd80      	pop	{r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	08027cf4 	.word	0x08027cf4
 8020e04:	08027dd0 	.word	0x08027dd0
 8020e08:	08027d3c 	.word	0x08027d3c
 8020e0c:	08027df0 	.word	0x08027df0
 8020e10:	08027e28 	.word	0x08027e28
 8020e14:	08027e38 	.word	0x08027e38
 8020e18:	2000bf18 	.word	0x2000bf18

08020e1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	b08e      	sub	sp, #56	@ 0x38
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8020e24:	4b9d      	ldr	r3, [pc, #628]	@ (802109c <ip4_reass+0x280>)
 8020e26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020e28:	3301      	adds	r3, #1
 8020e2a:	b29a      	uxth	r2, r3
 8020e2c:	4b9b      	ldr	r3, [pc, #620]	@ (802109c <ip4_reass+0x280>)
 8020e2e:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8020e30:	4b9a      	ldr	r3, [pc, #616]	@ (802109c <ip4_reass+0x280>)
 8020e32:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8020e36:	3301      	adds	r3, #1
 8020e38:	4a98      	ldr	r2, [pc, #608]	@ (802109c <ip4_reass+0x280>)
 8020e3a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  fraghdr = (struct ip_hdr*)p->payload;
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	685b      	ldr	r3, [r3, #4]
 8020e42:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8020e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e46:	781b      	ldrb	r3, [r3, #0]
 8020e48:	f003 030f 	and.w	r3, r3, #15
 8020e4c:	2b05      	cmp	r3, #5
 8020e4e:	d008      	beq.n	8020e62 <ip4_reass+0x46>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8020e50:	4b92      	ldr	r3, [pc, #584]	@ (802109c <ip4_reass+0x280>)
 8020e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8020e56:	3301      	adds	r3, #1
 8020e58:	b29a      	uxth	r2, r3
 8020e5a:	4b90      	ldr	r3, [pc, #576]	@ (802109c <ip4_reass+0x280>)
 8020e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 8020e60:	e14c      	b.n	80210fc <ip4_reass+0x2e0>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8020e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e64:	88db      	ldrh	r3, [r3, #6]
 8020e66:	b29b      	uxth	r3, r3
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7f3 ff25 	bl	8014cb8 <lwip_htons>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020e74:	b29b      	uxth	r3, r3
 8020e76:	00db      	lsls	r3, r3, #3
 8020e78:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8020e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e7c:	885b      	ldrh	r3, [r3, #2]
 8020e7e:	b29b      	uxth	r3, r3
 8020e80:	4618      	mov	r0, r3
 8020e82:	f7f3 ff19 	bl	8014cb8 <lwip_htons>
 8020e86:	4603      	mov	r3, r0
 8020e88:	461a      	mov	r2, r3
 8020e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e8c:	781b      	ldrb	r3, [r3, #0]
 8020e8e:	f003 030f 	and.w	r3, r3, #15
 8020e92:	b29b      	uxth	r3, r3
 8020e94:	009b      	lsls	r3, r3, #2
 8020e96:	b29b      	uxth	r3, r3
 8020e98:	1ad3      	subs	r3, r2, r3
 8020e9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020e9c:	6878      	ldr	r0, [r7, #4]
 8020e9e:	f7f5 fa45 	bl	801632c <pbuf_clen>
 8020ea2:	4603      	mov	r3, r0
 8020ea4:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020ea6:	4b7e      	ldr	r3, [pc, #504]	@ (80210a0 <ip4_reass+0x284>)
 8020ea8:	881b      	ldrh	r3, [r3, #0]
 8020eaa:	461a      	mov	r2, r3
 8020eac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020eae:	4413      	add	r3, r2
 8020eb0:	2b0a      	cmp	r3, #10
 8020eb2:	dd15      	ble.n	8020ee0 <ip4_reass+0xc4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020eb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020eb6:	4619      	mov	r1, r3
 8020eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020eba:	f7ff fd73 	bl	80209a4 <ip_reass_remove_oldest_datagram>
 8020ebe:	4603      	mov	r3, r0
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d006      	beq.n	8020ed2 <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020ec4:	4b76      	ldr	r3, [pc, #472]	@ (80210a0 <ip4_reass+0x284>)
 8020ec6:	881b      	ldrh	r3, [r3, #0]
 8020ec8:	461a      	mov	r2, r3
 8020eca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020ecc:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020ece:	2b0a      	cmp	r3, #10
 8020ed0:	dd06      	ble.n	8020ee0 <ip4_reass+0xc4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8020ed2:	4b72      	ldr	r3, [pc, #456]	@ (802109c <ip4_reass+0x280>)
 8020ed4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8020ed6:	3301      	adds	r3, #1
 8020ed8:	b29a      	uxth	r2, r3
 8020eda:	4b70      	ldr	r3, [pc, #448]	@ (802109c <ip4_reass+0x280>)
 8020edc:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8020ede:	e10d      	b.n	80210fc <ip4_reass+0x2e0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020ee0:	4b70      	ldr	r3, [pc, #448]	@ (80210a4 <ip4_reass+0x288>)
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8020ee6:	e01e      	b.n	8020f26 <ip4_reass+0x10a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020eea:	695a      	ldr	r2, [r3, #20]
 8020eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020eee:	68db      	ldr	r3, [r3, #12]
 8020ef0:	429a      	cmp	r2, r3
 8020ef2:	d115      	bne.n	8020f20 <ip4_reass+0x104>
 8020ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ef6:	699a      	ldr	r2, [r3, #24]
 8020ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020efa:	691b      	ldr	r3, [r3, #16]
 8020efc:	429a      	cmp	r2, r3
 8020efe:	d10f      	bne.n	8020f20 <ip4_reass+0x104>
 8020f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f02:	899a      	ldrh	r2, [r3, #12]
 8020f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f06:	889b      	ldrh	r3, [r3, #4]
 8020f08:	b29b      	uxth	r3, r3
 8020f0a:	429a      	cmp	r2, r3
 8020f0c:	d108      	bne.n	8020f20 <ip4_reass+0x104>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8020f0e:	4b63      	ldr	r3, [pc, #396]	@ (802109c <ip4_reass+0x280>)
 8020f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8020f14:	3301      	adds	r3, #1
 8020f16:	b29a      	uxth	r2, r3
 8020f18:	4b60      	ldr	r3, [pc, #384]	@ (802109c <ip4_reass+0x280>)
 8020f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8020f1e:	e005      	b.n	8020f2c <ip4_reass+0x110>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8020f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d1dd      	bne.n	8020ee8 <ip4_reass+0xcc>
    }
  }

  if (ipr == NULL) {
 8020f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	d109      	bne.n	8020f46 <ip4_reass+0x12a>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8020f32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020f34:	4619      	mov	r1, r3
 8020f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020f38:	f7ff fd96 	bl	8020a68 <ip_reass_enqueue_new_datagram>
 8020f3c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8020f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d11c      	bne.n	8020f7e <ip4_reass+0x162>
      goto nullreturn;
 8020f44:	e0da      	b.n	80210fc <ip4_reass+0x2e0>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f48:	88db      	ldrh	r3, [r3, #6]
 8020f4a:	b29b      	uxth	r3, r3
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	f7f3 feb3 	bl	8014cb8 <lwip_htons>
 8020f52:	4603      	mov	r3, r0
 8020f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d110      	bne.n	8020f7e <ip4_reass+0x162>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f5e:	89db      	ldrh	r3, [r3, #14]
 8020f60:	4618      	mov	r0, r3
 8020f62:	f7f3 fea9 	bl	8014cb8 <lwip_htons>
 8020f66:	4603      	mov	r3, r0
 8020f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d006      	beq.n	8020f7e <ip4_reass+0x162>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f72:	3308      	adds	r3, #8
 8020f74:	2214      	movs	r2, #20
 8020f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020f78:	4618      	mov	r0, r3
 8020f7a:	f001 fc5c 	bl	8022836 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f80:	88db      	ldrh	r3, [r3, #6]
 8020f82:	b29b      	uxth	r3, r3
 8020f84:	f003 0320 	and.w	r3, r3, #32
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	bf0c      	ite	eq
 8020f8c:	2301      	moveq	r3, #1
 8020f8e:	2300      	movne	r3, #0
 8020f90:	b2db      	uxtb	r3, r3
 8020f92:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020f94:	69fb      	ldr	r3, [r7, #28]
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d00e      	beq.n	8020fb8 <ip4_reass+0x19c>
    u16_t datagram_len = (u16_t)(offset + len);
 8020f9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020f9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020f9e:	4413      	add	r3, r2
 8020fa0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020fa2:	8b7a      	ldrh	r2, [r7, #26]
 8020fa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020fa6:	429a      	cmp	r2, r3
 8020fa8:	f0c0 80a5 	bcc.w	80210f6 <ip4_reass+0x2da>
 8020fac:	8b7b      	ldrh	r3, [r7, #26]
 8020fae:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8020fb2:	4293      	cmp	r3, r2
 8020fb4:	f200 809f 	bhi.w	80210f6 <ip4_reass+0x2da>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020fb8:	69fa      	ldr	r2, [r7, #28]
 8020fba:	6879      	ldr	r1, [r7, #4]
 8020fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020fbe:	f7ff fdc3 	bl	8020b48 <ip_reass_chain_frag_into_datagram_and_validate>
 8020fc2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020fc4:	697b      	ldr	r3, [r7, #20]
 8020fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fca:	f000 8096 	beq.w	80210fa <ip4_reass+0x2de>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020fce:	4b34      	ldr	r3, [pc, #208]	@ (80210a0 <ip4_reass+0x284>)
 8020fd0:	881a      	ldrh	r2, [r3, #0]
 8020fd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020fd4:	4413      	add	r3, r2
 8020fd6:	b29a      	uxth	r2, r3
 8020fd8:	4b31      	ldr	r3, [pc, #196]	@ (80210a0 <ip4_reass+0x284>)
 8020fda:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020fdc:	69fb      	ldr	r3, [r7, #28]
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	d00d      	beq.n	8020ffe <ip4_reass+0x1e2>
    u16_t datagram_len = (u16_t)(offset + len);
 8020fe2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020fe6:	4413      	add	r3, r2
 8020fe8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8020fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020fec:	8a7a      	ldrh	r2, [r7, #18]
 8020fee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ff2:	7f9b      	ldrb	r3, [r3, #30]
 8020ff4:	f043 0301 	orr.w	r3, r3, #1
 8020ff8:	b2da      	uxtb	r2, r3
 8020ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ffc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020ffe:	697b      	ldr	r3, [r7, #20]
 8021000:	2b01      	cmp	r3, #1
 8021002:	d176      	bne.n	80210f2 <ip4_reass+0x2d6>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8021004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021006:	8b9b      	ldrh	r3, [r3, #28]
 8021008:	3314      	adds	r3, #20
 802100a:	b29a      	uxth	r2, r3
 802100c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802100e:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8021010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021012:	685b      	ldr	r3, [r3, #4]
 8021014:	685b      	ldr	r3, [r3, #4]
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 802101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802101c:	685b      	ldr	r3, [r3, #4]
 802101e:	685b      	ldr	r3, [r3, #4]
 8021020:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021024:	3308      	adds	r3, #8
 8021026:	2214      	movs	r2, #20
 8021028:	4619      	mov	r1, r3
 802102a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802102c:	f001 fc03 	bl	8022836 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8021030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021032:	8b9b      	ldrh	r3, [r3, #28]
 8021034:	4618      	mov	r0, r3
 8021036:	f7f3 fe3f 	bl	8014cb8 <lwip_htons>
 802103a:	4603      	mov	r3, r0
 802103c:	461a      	mov	r2, r3
 802103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021040:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021044:	2200      	movs	r2, #0
 8021046:	719a      	strb	r2, [r3, #6]
 8021048:	2200      	movs	r2, #0
 802104a:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802104e:	2200      	movs	r2, #0
 8021050:	729a      	strb	r2, [r3, #10]
 8021052:	2200      	movs	r2, #0
 8021054:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021058:	685b      	ldr	r3, [r3, #4]
 802105a:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802105c:	e00e      	b.n	802107c <ip4_reass+0x260>
      iprh = (struct ip_reass_helper*)r->payload;
 802105e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021060:	685b      	ldr	r3, [r3, #4]
 8021062:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8021064:	f06f 0113 	mvn.w	r1, #19
 8021068:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 802106a:	f7f5 f8a7 	bl	80161bc <pbuf_header>
      pbuf_cat(p, r);
 802106e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8021070:	6878      	ldr	r0, [r7, #4]
 8021072:	f7f5 f993 	bl	801639c <pbuf_cat>
      r = iprh->next_pbuf;
 8021076:	68fb      	ldr	r3, [r7, #12]
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 802107c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802107e:	2b00      	cmp	r3, #0
 8021080:	d1ed      	bne.n	802105e <ip4_reass+0x242>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021082:	4b08      	ldr	r3, [pc, #32]	@ (80210a4 <ip4_reass+0x288>)
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021088:	429a      	cmp	r2, r3
 802108a:	d102      	bne.n	8021092 <ip4_reass+0x276>
      ipr_prev = NULL;
 802108c:	2300      	movs	r3, #0
 802108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021090:	e017      	b.n	80210c2 <ip4_reass+0x2a6>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021092:	4b04      	ldr	r3, [pc, #16]	@ (80210a4 <ip4_reass+0x288>)
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021098:	e00e      	b.n	80210b8 <ip4_reass+0x29c>
 802109a:	bf00      	nop
 802109c:	2000bbe4 	.word	0x2000bbe4
 80210a0:	2000bf18 	.word	0x2000bf18
 80210a4:	2000bf14 	.word	0x2000bf14
        if (ipr_prev->next == ipr) {
 80210a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80210ae:	429a      	cmp	r2, r3
 80210b0:	d006      	beq.n	80210c0 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80210b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80210b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d1f4      	bne.n	80210a8 <ip4_reass+0x28c>
 80210be:	e000      	b.n	80210c2 <ip4_reass+0x2a6>
          break;
 80210c0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80210c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80210c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80210c6:	f7ff fd11 	bl	8020aec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80210ca:	6878      	ldr	r0, [r7, #4]
 80210cc:	f7f5 f92e 	bl	801632c <pbuf_clen>
 80210d0:	4603      	mov	r3, r0
 80210d2:	461a      	mov	r2, r3
 80210d4:	4b10      	ldr	r3, [pc, #64]	@ (8021118 <ip4_reass+0x2fc>)
 80210d6:	881b      	ldrh	r3, [r3, #0]
 80210d8:	1a9b      	subs	r3, r3, r2
 80210da:	b29a      	uxth	r2, r3
 80210dc:	4b0e      	ldr	r3, [pc, #56]	@ (8021118 <ip4_reass+0x2fc>)
 80210de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 80210e0:	4b0e      	ldr	r3, [pc, #56]	@ (802111c <ip4_reass+0x300>)
 80210e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80210e6:	3301      	adds	r3, #1
 80210e8:	4a0c      	ldr	r2, [pc, #48]	@ (802111c <ip4_reass+0x300>)
 80210ea:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    /* Return the pbuf chain */
    return p;
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	e00e      	b.n	8021110 <ip4_reass+0x2f4>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80210f2:	2300      	movs	r3, #0
 80210f4:	e00c      	b.n	8021110 <ip4_reass+0x2f4>
      goto nullreturn;
 80210f6:	bf00      	nop
 80210f8:	e000      	b.n	80210fc <ip4_reass+0x2e0>
    goto nullreturn;
 80210fa:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 80210fc:	4b07      	ldr	r3, [pc, #28]	@ (802111c <ip4_reass+0x300>)
 80210fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8021100:	3301      	adds	r3, #1
 8021102:	b29a      	uxth	r2, r3
 8021104:	4b05      	ldr	r3, [pc, #20]	@ (802111c <ip4_reass+0x300>)
 8021106:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 8021108:	6878      	ldr	r0, [r7, #4]
 802110a:	f7f5 f87b 	bl	8016204 <pbuf_free>
  return NULL;
 802110e:	2300      	movs	r3, #0
}
 8021110:	4618      	mov	r0, r3
 8021112:	3738      	adds	r7, #56	@ 0x38
 8021114:	46bd      	mov	sp, r7
 8021116:	bd80      	pop	{r7, pc}
 8021118:	2000bf18 	.word	0x2000bf18
 802111c:	2000bbe4 	.word	0x2000bbe4

08021120 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021120:	b580      	push	{r7, lr}
 8021122:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8021124:	2005      	movs	r0, #5
 8021126:	f7f4 fa71 	bl	801560c <memp_malloc>
 802112a:	4603      	mov	r3, r0
}
 802112c:	4618      	mov	r0, r3
 802112e:	bd80      	pop	{r7, pc}

08021130 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8021130:	b580      	push	{r7, lr}
 8021132:	b082      	sub	sp, #8
 8021134:	af00      	add	r7, sp, #0
 8021136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d106      	bne.n	802114c <ip_frag_free_pbuf_custom_ref+0x1c>
 802113e:	4b07      	ldr	r3, [pc, #28]	@ (802115c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021140:	f240 22ae 	movw	r2, #686	@ 0x2ae
 8021144:	4906      	ldr	r1, [pc, #24]	@ (8021160 <ip_frag_free_pbuf_custom_ref+0x30>)
 8021146:	4807      	ldr	r0, [pc, #28]	@ (8021164 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021148:	f001 f87a 	bl	8022240 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802114c:	6879      	ldr	r1, [r7, #4]
 802114e:	2005      	movs	r0, #5
 8021150:	f7f4 faae 	bl	80156b0 <memp_free>
}
 8021154:	bf00      	nop
 8021156:	3708      	adds	r7, #8
 8021158:	46bd      	mov	sp, r7
 802115a:	bd80      	pop	{r7, pc}
 802115c:	08027cf4 	.word	0x08027cf4
 8021160:	08027e5c 	.word	0x08027e5c
 8021164:	08027d3c 	.word	0x08027d3c

08021168 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021168:	b580      	push	{r7, lr}
 802116a:	b084      	sub	sp, #16
 802116c:	af00      	add	r7, sp, #0
 802116e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	2b00      	cmp	r3, #0
 8021178:	d106      	bne.n	8021188 <ipfrag_free_pbuf_custom+0x20>
 802117a:	4b11      	ldr	r3, [pc, #68]	@ (80211c0 <ipfrag_free_pbuf_custom+0x58>)
 802117c:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8021180:	4910      	ldr	r1, [pc, #64]	@ (80211c4 <ipfrag_free_pbuf_custom+0x5c>)
 8021182:	4811      	ldr	r0, [pc, #68]	@ (80211c8 <ipfrag_free_pbuf_custom+0x60>)
 8021184:	f001 f85c 	bl	8022240 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8021188:	68fa      	ldr	r2, [r7, #12]
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	429a      	cmp	r2, r3
 802118e:	d006      	beq.n	802119e <ipfrag_free_pbuf_custom+0x36>
 8021190:	4b0b      	ldr	r3, [pc, #44]	@ (80211c0 <ipfrag_free_pbuf_custom+0x58>)
 8021192:	f240 22b9 	movw	r2, #697	@ 0x2b9
 8021196:	490d      	ldr	r1, [pc, #52]	@ (80211cc <ipfrag_free_pbuf_custom+0x64>)
 8021198:	480b      	ldr	r0, [pc, #44]	@ (80211c8 <ipfrag_free_pbuf_custom+0x60>)
 802119a:	f001 f851 	bl	8022240 <iprintf>
  if (pcr->original != NULL) {
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	695b      	ldr	r3, [r3, #20]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d004      	beq.n	80211b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	695b      	ldr	r3, [r3, #20]
 80211aa:	4618      	mov	r0, r3
 80211ac:	f7f5 f82a 	bl	8016204 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80211b0:	68f8      	ldr	r0, [r7, #12]
 80211b2:	f7ff ffbd 	bl	8021130 <ip_frag_free_pbuf_custom_ref>
}
 80211b6:	bf00      	nop
 80211b8:	3710      	adds	r7, #16
 80211ba:	46bd      	mov	sp, r7
 80211bc:	bd80      	pop	{r7, pc}
 80211be:	bf00      	nop
 80211c0:	08027cf4 	.word	0x08027cf4
 80211c4:	08027e68 	.word	0x08027e68
 80211c8:	08027d3c 	.word	0x08027d3c
 80211cc:	08027e74 	.word	0x08027e74

080211d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80211d0:	b580      	push	{r7, lr}
 80211d2:	b092      	sub	sp, #72	@ 0x48
 80211d4:	af02      	add	r7, sp, #8
 80211d6:	60f8      	str	r0, [r7, #12]
 80211d8:	60b9      	str	r1, [r7, #8]
 80211da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80211dc:	2300      	movs	r3, #0
 80211de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80211e0:	68bb      	ldr	r3, [r7, #8]
 80211e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80211e4:	3b14      	subs	r3, #20
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	da00      	bge.n	80211ec <ip4_frag+0x1c>
 80211ea:	3307      	adds	r3, #7
 80211ec:	10db      	asrs	r3, r3, #3
 80211ee:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80211f0:	2314      	movs	r3, #20
 80211f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80211f4:	68fb      	ldr	r3, [r7, #12]
 80211f6:	685b      	ldr	r3, [r3, #4]
 80211f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 80211fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80211fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80211fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021200:	781b      	ldrb	r3, [r3, #0]
 8021202:	f003 030f 	and.w	r3, r3, #15
 8021206:	2b05      	cmp	r3, #5
 8021208:	d009      	beq.n	802121e <ip4_frag+0x4e>
 802120a:	4b84      	ldr	r3, [pc, #528]	@ (802141c <ip4_frag+0x24c>)
 802120c:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8021210:	4983      	ldr	r1, [pc, #524]	@ (8021420 <ip4_frag+0x250>)
 8021212:	4884      	ldr	r0, [pc, #528]	@ (8021424 <ip4_frag+0x254>)
 8021214:	f001 f814 	bl	8022240 <iprintf>
 8021218:	f06f 0305 	mvn.w	r3, #5
 802121c:	e0fa      	b.n	8021414 <ip4_frag+0x244>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021220:	88db      	ldrh	r3, [r3, #6]
 8021222:	b29b      	uxth	r3, r3
 8021224:	4618      	mov	r0, r3
 8021226:	f7f3 fd47 	bl	8014cb8 <lwip_htons>
 802122a:	4603      	mov	r3, r0
 802122c:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 802122e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021234:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8021236:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802123c:	2b00      	cmp	r3, #0
 802123e:	d009      	beq.n	8021254 <ip4_frag+0x84>
 8021240:	4b76      	ldr	r3, [pc, #472]	@ (802141c <ip4_frag+0x24c>)
 8021242:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8021246:	4978      	ldr	r1, [pc, #480]	@ (8021428 <ip4_frag+0x258>)
 8021248:	4876      	ldr	r0, [pc, #472]	@ (8021424 <ip4_frag+0x254>)
 802124a:	f000 fff9 	bl	8022240 <iprintf>
 802124e:	f06f 0305 	mvn.w	r3, #5
 8021252:	e0df      	b.n	8021414 <ip4_frag+0x244>

  left = p->tot_len - IP_HLEN;
 8021254:	68fb      	ldr	r3, [r7, #12]
 8021256:	891b      	ldrh	r3, [r3, #8]
 8021258:	3b14      	subs	r3, #20
 802125a:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 802125c:	e0c3      	b.n	80213e6 <ip4_frag+0x216>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 802125e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8021260:	00da      	lsls	r2, r3, #3
 8021262:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8021264:	4293      	cmp	r3, r2
 8021266:	bfa8      	it	ge
 8021268:	4613      	movge	r3, r2
 802126a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802126c:	2200      	movs	r2, #0
 802126e:	2114      	movs	r1, #20
 8021270:	2002      	movs	r0, #2
 8021272:	f7f4 fc4f 	bl	8015b14 <pbuf_alloc>
 8021276:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8021278:	6a3b      	ldr	r3, [r7, #32]
 802127a:	2b00      	cmp	r3, #0
 802127c:	f000 80c0 	beq.w	8021400 <ip4_frag+0x230>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021280:	68fb      	ldr	r3, [r7, #12]
 8021282:	895b      	ldrh	r3, [r3, #10]
 8021284:	2b13      	cmp	r3, #19
 8021286:	d806      	bhi.n	8021296 <ip4_frag+0xc6>
 8021288:	4b64      	ldr	r3, [pc, #400]	@ (802141c <ip4_frag+0x24c>)
 802128a:	f44f 7242 	mov.w	r2, #776	@ 0x308
 802128e:	4967      	ldr	r1, [pc, #412]	@ (802142c <ip4_frag+0x25c>)
 8021290:	4864      	ldr	r0, [pc, #400]	@ (8021424 <ip4_frag+0x254>)
 8021292:	f000 ffd5 	bl	8022240 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021296:	6a3b      	ldr	r3, [r7, #32]
 8021298:	685b      	ldr	r3, [r3, #4]
 802129a:	2214      	movs	r2, #20
 802129c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802129e:	4618      	mov	r0, r3
 80212a0:	f001 fac9 	bl	8022836 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80212a4:	6a3b      	ldr	r3, [r7, #32]
 80212a6:	685b      	ldr	r3, [r3, #4]
 80212a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 80212aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80212ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 80212ae:	e04f      	b.n	8021350 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	895a      	ldrh	r2, [r3, #10]
 80212b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80212b6:	1ad3      	subs	r3, r2, r3
 80212b8:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80212ba:	8b7a      	ldrh	r2, [r7, #26]
 80212bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80212be:	4293      	cmp	r3, r2
 80212c0:	bf28      	it	cs
 80212c2:	4613      	movcs	r3, r2
 80212c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80212c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d105      	bne.n	80212d8 <ip4_frag+0x108>
        poff = 0;
 80212cc:	2300      	movs	r3, #0
 80212ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	60fb      	str	r3, [r7, #12]
        continue;
 80212d6:	e03b      	b.n	8021350 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80212d8:	f7ff ff22 	bl	8021120 <ip_frag_alloc_pbuf_custom_ref>
 80212dc:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80212de:	697b      	ldr	r3, [r7, #20]
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d103      	bne.n	80212ec <ip4_frag+0x11c>
        pbuf_free(rambuf);
 80212e4:	6a38      	ldr	r0, [r7, #32]
 80212e6:	f7f4 ff8d 	bl	8016204 <pbuf_free>
        goto memerr;
 80212ea:	e08a      	b.n	8021402 <ip4_frag+0x232>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80212ec:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80212f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80212f4:	4413      	add	r3, r2
 80212f6:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80212f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80212fa:	9201      	str	r2, [sp, #4]
 80212fc:	9300      	str	r3, [sp, #0]
 80212fe:	4603      	mov	r3, r0
 8021300:	2202      	movs	r2, #2
 8021302:	2004      	movs	r0, #4
 8021304:	f7f4 fda0 	bl	8015e48 <pbuf_alloced_custom>
 8021308:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 802130a:	693b      	ldr	r3, [r7, #16]
 802130c:	2b00      	cmp	r3, #0
 802130e:	d106      	bne.n	802131e <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021310:	6978      	ldr	r0, [r7, #20]
 8021312:	f7ff ff0d 	bl	8021130 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021316:	6a38      	ldr	r0, [r7, #32]
 8021318:	f7f4 ff74 	bl	8016204 <pbuf_free>
        goto memerr;
 802131c:	e071      	b.n	8021402 <ip4_frag+0x232>
      }
      pbuf_ref(p);
 802131e:	68f8      	ldr	r0, [r7, #12]
 8021320:	f7f5 f81a 	bl	8016358 <pbuf_ref>
      pcr->original = p;
 8021324:	697b      	ldr	r3, [r7, #20]
 8021326:	68fa      	ldr	r2, [r7, #12]
 8021328:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	4a40      	ldr	r2, [pc, #256]	@ (8021430 <ip4_frag+0x260>)
 802132e:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8021330:	6939      	ldr	r1, [r7, #16]
 8021332:	6a38      	ldr	r0, [r7, #32]
 8021334:	f7f5 f832 	bl	801639c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8021338:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 802133a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802133c:	1ad3      	subs	r3, r2, r3
 802133e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 8021340:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8021342:	2b00      	cmp	r3, #0
 8021344:	d004      	beq.n	8021350 <ip4_frag+0x180>
        poff = 0;
 8021346:	2300      	movs	r3, #0
 8021348:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 802134a:	68fb      	ldr	r3, [r7, #12]
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8021350:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8021352:	2b00      	cmp	r3, #0
 8021354:	d1ac      	bne.n	80212b0 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8021356:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021358:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802135a:	4413      	add	r3, r2
 802135c:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802135e:	68bb      	ldr	r3, [r7, #8]
 8021360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8021362:	f1a3 0213 	sub.w	r2, r3, #19
 8021366:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8021368:	429a      	cmp	r2, r3
 802136a:	bfcc      	ite	gt
 802136c:	2301      	movgt	r3, #1
 802136e:	2300      	movle	r3, #0
 8021370:	b2db      	uxtb	r3, r3
 8021372:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021374:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8021376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802137a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 802137c:	69fb      	ldr	r3, [r7, #28]
 802137e:	2b00      	cmp	r3, #0
 8021380:	d103      	bne.n	802138a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8021382:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021388:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802138a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 802138c:	4618      	mov	r0, r3
 802138e:	f7f3 fc93 	bl	8014cb8 <lwip_htons>
 8021392:	4603      	mov	r3, r0
 8021394:	461a      	mov	r2, r3
 8021396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021398:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 802139a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802139c:	3314      	adds	r3, #20
 802139e:	b29b      	uxth	r3, r3
 80213a0:	4618      	mov	r0, r3
 80213a2:	f7f3 fc89 	bl	8014cb8 <lwip_htons>
 80213a6:	4603      	mov	r3, r0
 80213a8:	461a      	mov	r2, r3
 80213aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80213ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213b0:	2200      	movs	r2, #0
 80213b2:	729a      	strb	r2, [r3, #10]
 80213b4:	2200      	movs	r2, #0
 80213b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80213b8:	68bb      	ldr	r3, [r7, #8]
 80213ba:	695b      	ldr	r3, [r3, #20]
 80213bc:	687a      	ldr	r2, [r7, #4]
 80213be:	6a39      	ldr	r1, [r7, #32]
 80213c0:	68b8      	ldr	r0, [r7, #8]
 80213c2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80213c4:	4b1b      	ldr	r3, [pc, #108]	@ (8021434 <ip4_frag+0x264>)
 80213c6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80213c8:	3301      	adds	r3, #1
 80213ca:	b29a      	uxth	r2, r3
 80213cc:	4b19      	ldr	r3, [pc, #100]	@ (8021434 <ip4_frag+0x264>)
 80213ce:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80213d0:	6a38      	ldr	r0, [r7, #32]
 80213d2:	f7f4 ff17 	bl	8016204 <pbuf_free>
    left -= fragsize;
 80213d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80213d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80213da:	1ad3      	subs	r3, r2, r3
 80213dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 80213de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80213e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80213e2:	4413      	add	r3, r2
 80213e4:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 80213e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	f47f af38 	bne.w	802125e <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 80213ee:	4b11      	ldr	r3, [pc, #68]	@ (8021434 <ip4_frag+0x264>)
 80213f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80213f4:	3301      	adds	r3, #1
 80213f6:	4a0f      	ldr	r2, [pc, #60]	@ (8021434 <ip4_frag+0x264>)
 80213f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  return ERR_OK;
 80213fc:	2300      	movs	r3, #0
 80213fe:	e009      	b.n	8021414 <ip4_frag+0x244>
      goto memerr;
 8021400:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 8021402:	4b0c      	ldr	r3, [pc, #48]	@ (8021434 <ip4_frag+0x264>)
 8021404:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8021408:	3301      	adds	r3, #1
 802140a:	4a0a      	ldr	r2, [pc, #40]	@ (8021434 <ip4_frag+0x264>)
 802140c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  return ERR_MEM;
 8021410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021414:	4618      	mov	r0, r3
 8021416:	3740      	adds	r7, #64	@ 0x40
 8021418:	46bd      	mov	sp, r7
 802141a:	bd80      	pop	{r7, pc}
 802141c:	08027cf4 	.word	0x08027cf4
 8021420:	08027e80 	.word	0x08027e80
 8021424:	08027d3c 	.word	0x08027d3c
 8021428:	08027ea8 	.word	0x08027ea8
 802142c:	08027ec4 	.word	0x08027ec4
 8021430:	08021169 	.word	0x08021169
 8021434:	2000bbe4 	.word	0x2000bbe4

08021438 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021438:	b580      	push	{r7, lr}
 802143a:	b086      	sub	sp, #24
 802143c:	af00      	add	r7, sp, #0
 802143e:	6078      	str	r0, [r7, #4]
 8021440:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8021442:	230e      	movs	r3, #14
 8021444:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	895b      	ldrh	r3, [r3, #10]
 802144a:	2b0e      	cmp	r3, #14
 802144c:	d811      	bhi.n	8021472 <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 802144e:	4b5b      	ldr	r3, [pc, #364]	@ (80215bc <ethernet_input+0x184>)
 8021450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8021452:	3301      	adds	r3, #1
 8021454:	b29a      	uxth	r2, r3
 8021456:	4b59      	ldr	r3, [pc, #356]	@ (80215bc <ethernet_input+0x184>)
 8021458:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 802145a:	4b58      	ldr	r3, [pc, #352]	@ (80215bc <ethernet_input+0x184>)
 802145c:	8bdb      	ldrh	r3, [r3, #30]
 802145e:	3301      	adds	r3, #1
 8021460:	b29a      	uxth	r2, r3
 8021462:	4b56      	ldr	r3, [pc, #344]	@ (80215bc <ethernet_input+0x184>)
 8021464:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 8021466:	683b      	ldr	r3, [r7, #0]
 8021468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802146a:	1c5a      	adds	r2, r3, #1
 802146c:	683b      	ldr	r3, [r7, #0]
 802146e:	651a      	str	r2, [r3, #80]	@ 0x50
    goto free_and_return;
 8021470:	e09b      	b.n	80215aa <ethernet_input+0x172>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	685b      	ldr	r3, [r3, #4]
 8021476:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021478:	693b      	ldr	r3, [r7, #16]
 802147a:	7b1a      	ldrb	r2, [r3, #12]
 802147c:	7b5b      	ldrb	r3, [r3, #13]
 802147e:	021b      	lsls	r3, r3, #8
 8021480:	4313      	orrs	r3, r2
 8021482:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021484:	693b      	ldr	r3, [r7, #16]
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	f003 0301 	and.w	r3, r3, #1
 802148c:	2b00      	cmp	r3, #0
 802148e:	d023      	beq.n	80214d8 <ethernet_input+0xa0>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8021490:	693b      	ldr	r3, [r7, #16]
 8021492:	781b      	ldrb	r3, [r3, #0]
 8021494:	2b01      	cmp	r3, #1
 8021496:	d10f      	bne.n	80214b8 <ethernet_input+0x80>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021498:	693b      	ldr	r3, [r7, #16]
 802149a:	785b      	ldrb	r3, [r3, #1]
 802149c:	2b00      	cmp	r3, #0
 802149e:	d11b      	bne.n	80214d8 <ethernet_input+0xa0>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80214a0:	693b      	ldr	r3, [r7, #16]
 80214a2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80214a4:	2b5e      	cmp	r3, #94	@ 0x5e
 80214a6:	d117      	bne.n	80214d8 <ethernet_input+0xa0>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	7b5b      	ldrb	r3, [r3, #13]
 80214ac:	f043 0310 	orr.w	r3, r3, #16
 80214b0:	b2da      	uxtb	r2, r3
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	735a      	strb	r2, [r3, #13]
 80214b6:	e00f      	b.n	80214d8 <ethernet_input+0xa0>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80214b8:	693b      	ldr	r3, [r7, #16]
 80214ba:	2206      	movs	r2, #6
 80214bc:	4940      	ldr	r1, [pc, #256]	@ (80215c0 <ethernet_input+0x188>)
 80214be:	4618      	mov	r0, r3
 80214c0:	f001 f86a 	bl	8022598 <memcmp>
 80214c4:	4603      	mov	r3, r0
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d106      	bne.n	80214d8 <ethernet_input+0xa0>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	7b5b      	ldrb	r3, [r3, #13]
 80214ce:	f043 0308 	orr.w	r3, r3, #8
 80214d2:	b2da      	uxtb	r2, r3
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80214d8:	89fb      	ldrh	r3, [r7, #14]
 80214da:	2b08      	cmp	r3, #8
 80214dc:	d003      	beq.n	80214e6 <ethernet_input+0xae>
 80214de:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80214e2:	d01e      	beq.n	8021522 <ethernet_input+0xea>
 80214e4:	e048      	b.n	8021578 <ethernet_input+0x140>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80214e6:	683b      	ldr	r3, [r7, #0]
 80214e8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80214ec:	f003 0308 	and.w	r3, r3, #8
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	d055      	beq.n	80215a0 <ethernet_input+0x168>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	895b      	ldrh	r3, [r3, #10]
 80214f8:	461a      	mov	r2, r3
 80214fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80214fe:	429a      	cmp	r2, r3
 8021500:	db50      	blt.n	80215a4 <ethernet_input+0x16c>
 8021502:	8afb      	ldrh	r3, [r7, #22]
 8021504:	425b      	negs	r3, r3
 8021506:	b29b      	uxth	r3, r3
 8021508:	b21b      	sxth	r3, r3
 802150a:	4619      	mov	r1, r3
 802150c:	6878      	ldr	r0, [r7, #4]
 802150e:	f7f4 fe55 	bl	80161bc <pbuf_header>
 8021512:	4603      	mov	r3, r0
 8021514:	2b00      	cmp	r3, #0
 8021516:	d145      	bne.n	80215a4 <ethernet_input+0x16c>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8021518:	6839      	ldr	r1, [r7, #0]
 802151a:	6878      	ldr	r0, [r7, #4]
 802151c:	f7fe fc5a 	bl	801fdd4 <ip4_input>
      }
      break;
 8021520:	e03c      	b.n	802159c <ethernet_input+0x164>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021522:	683b      	ldr	r3, [r7, #0]
 8021524:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8021528:	f003 0308 	and.w	r3, r3, #8
 802152c:	2b00      	cmp	r3, #0
 802152e:	d03b      	beq.n	80215a8 <ethernet_input+0x170>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	895b      	ldrh	r3, [r3, #10]
 8021534:	461a      	mov	r2, r3
 8021536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802153a:	429a      	cmp	r2, r3
 802153c:	db0a      	blt.n	8021554 <ethernet_input+0x11c>
 802153e:	8afb      	ldrh	r3, [r7, #22]
 8021540:	425b      	negs	r3, r3
 8021542:	b29b      	uxth	r3, r3
 8021544:	b21b      	sxth	r3, r3
 8021546:	4619      	mov	r1, r3
 8021548:	6878      	ldr	r0, [r7, #4]
 802154a:	f7f4 fe37 	bl	80161bc <pbuf_header>
 802154e:	4603      	mov	r3, r0
 8021550:	2b00      	cmp	r3, #0
 8021552:	d00c      	beq.n	802156e <ethernet_input+0x136>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8021554:	4b19      	ldr	r3, [pc, #100]	@ (80215bc <ethernet_input+0x184>)
 8021556:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8021558:	3301      	adds	r3, #1
 802155a:	b29a      	uxth	r2, r3
 802155c:	4b17      	ldr	r3, [pc, #92]	@ (80215bc <ethernet_input+0x184>)
 802155e:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8021560:	4b16      	ldr	r3, [pc, #88]	@ (80215bc <ethernet_input+0x184>)
 8021562:	8bdb      	ldrh	r3, [r3, #30]
 8021564:	3301      	adds	r3, #1
 8021566:	b29a      	uxth	r2, r3
 8021568:	4b14      	ldr	r3, [pc, #80]	@ (80215bc <ethernet_input+0x184>)
 802156a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 802156c:	e01d      	b.n	80215aa <ethernet_input+0x172>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 802156e:	6839      	ldr	r1, [r7, #0]
 8021570:	6878      	ldr	r0, [r7, #4]
 8021572:	f7fd fcc9 	bl	801ef08 <etharp_input>
      }
      break;
 8021576:	e011      	b.n	802159c <ethernet_input+0x164>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8021578:	4b10      	ldr	r3, [pc, #64]	@ (80215bc <ethernet_input+0x184>)
 802157a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802157c:	3301      	adds	r3, #1
 802157e:	b29a      	uxth	r2, r3
 8021580:	4b0e      	ldr	r3, [pc, #56]	@ (80215bc <ethernet_input+0x184>)
 8021582:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8021584:	4b0d      	ldr	r3, [pc, #52]	@ (80215bc <ethernet_input+0x184>)
 8021586:	8bdb      	ldrh	r3, [r3, #30]
 8021588:	3301      	adds	r3, #1
 802158a:	b29a      	uxth	r2, r3
 802158c:	4b0b      	ldr	r3, [pc, #44]	@ (80215bc <ethernet_input+0x184>)
 802158e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 8021590:	683b      	ldr	r3, [r7, #0]
 8021592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021594:	1c5a      	adds	r2, r3, #1
 8021596:	683b      	ldr	r3, [r7, #0]
 8021598:	655a      	str	r2, [r3, #84]	@ 0x54
      goto free_and_return;
 802159a:	e006      	b.n	80215aa <ethernet_input+0x172>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 802159c:	2300      	movs	r3, #0
 802159e:	e008      	b.n	80215b2 <ethernet_input+0x17a>
        goto free_and_return;
 80215a0:	bf00      	nop
 80215a2:	e002      	b.n	80215aa <ethernet_input+0x172>
        goto free_and_return;
 80215a4:	bf00      	nop
 80215a6:	e000      	b.n	80215aa <ethernet_input+0x172>
        goto free_and_return;
 80215a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80215aa:	6878      	ldr	r0, [r7, #4]
 80215ac:	f7f4 fe2a 	bl	8016204 <pbuf_free>
  return ERR_OK;
 80215b0:	2300      	movs	r3, #0
}
 80215b2:	4618      	mov	r0, r3
 80215b4:	3718      	adds	r7, #24
 80215b6:	46bd      	mov	sp, r7
 80215b8:	bd80      	pop	{r7, pc}
 80215ba:	bf00      	nop
 80215bc:	2000bbe4 	.word	0x2000bbe4
 80215c0:	08031664 	.word	0x08031664

080215c4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80215c4:	b580      	push	{r7, lr}
 80215c6:	b086      	sub	sp, #24
 80215c8:	af00      	add	r7, sp, #0
 80215ca:	60f8      	str	r0, [r7, #12]
 80215cc:	60b9      	str	r1, [r7, #8]
 80215ce:	607a      	str	r2, [r7, #4]
 80215d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80215d2:	8c3b      	ldrh	r3, [r7, #32]
 80215d4:	4618      	mov	r0, r3
 80215d6:	f7f3 fb6f 	bl	8014cb8 <lwip_htons>
 80215da:	4603      	mov	r3, r0
 80215dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80215de:	210e      	movs	r1, #14
 80215e0:	68b8      	ldr	r0, [r7, #8]
 80215e2:	f7f4 fdeb 	bl	80161bc <pbuf_header>
 80215e6:	4603      	mov	r3, r0
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d125      	bne.n	8021638 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80215ec:	68bb      	ldr	r3, [r7, #8]
 80215ee:	685b      	ldr	r3, [r3, #4]
 80215f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80215f2:	693b      	ldr	r3, [r7, #16]
 80215f4:	8afa      	ldrh	r2, [r7, #22]
 80215f6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80215f8:	693b      	ldr	r3, [r7, #16]
 80215fa:	2206      	movs	r2, #6
 80215fc:	6839      	ldr	r1, [r7, #0]
 80215fe:	4618      	mov	r0, r3
 8021600:	f001 f919 	bl	8022836 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8021604:	693b      	ldr	r3, [r7, #16]
 8021606:	3306      	adds	r3, #6
 8021608:	2206      	movs	r2, #6
 802160a:	6879      	ldr	r1, [r7, #4]
 802160c:	4618      	mov	r0, r3
 802160e:	f001 f912 	bl	8022836 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021612:	68fb      	ldr	r3, [r7, #12]
 8021614:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021618:	2b06      	cmp	r3, #6
 802161a:	d006      	beq.n	802162a <ethernet_output+0x66>
 802161c:	4b0d      	ldr	r3, [pc, #52]	@ (8021654 <ethernet_output+0x90>)
 802161e:	f240 122b 	movw	r2, #299	@ 0x12b
 8021622:	490d      	ldr	r1, [pc, #52]	@ (8021658 <ethernet_output+0x94>)
 8021624:	480d      	ldr	r0, [pc, #52]	@ (802165c <ethernet_output+0x98>)
 8021626:	f000 fe0b 	bl	8022240 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802162a:	68fb      	ldr	r3, [r7, #12]
 802162c:	699b      	ldr	r3, [r3, #24]
 802162e:	68b9      	ldr	r1, [r7, #8]
 8021630:	68f8      	ldr	r0, [r7, #12]
 8021632:	4798      	blx	r3
 8021634:	4603      	mov	r3, r0
 8021636:	e008      	b.n	802164a <ethernet_output+0x86>
      goto pbuf_header_failed;
 8021638:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 802163a:	4b09      	ldr	r3, [pc, #36]	@ (8021660 <ethernet_output+0x9c>)
 802163c:	895b      	ldrh	r3, [r3, #10]
 802163e:	3301      	adds	r3, #1
 8021640:	b29a      	uxth	r2, r3
 8021642:	4b07      	ldr	r3, [pc, #28]	@ (8021660 <ethernet_output+0x9c>)
 8021644:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8021646:	f06f 0301 	mvn.w	r3, #1
}
 802164a:	4618      	mov	r0, r3
 802164c:	3718      	adds	r7, #24
 802164e:	46bd      	mov	sp, r7
 8021650:	bd80      	pop	{r7, pc}
 8021652:	bf00      	nop
 8021654:	08027ee4 	.word	0x08027ee4
 8021658:	08027f1c 	.word	0x08027f1c
 802165c:	08027f50 	.word	0x08027f50
 8021660:	2000bbe4 	.word	0x2000bbe4

08021664 <atoi>:
 8021664:	220a      	movs	r2, #10
 8021666:	2100      	movs	r1, #0
 8021668:	f000 b8ba 	b.w	80217e0 <strtol>

0802166c <rand>:
 802166c:	4b16      	ldr	r3, [pc, #88]	@ (80216c8 <rand+0x5c>)
 802166e:	b510      	push	{r4, lr}
 8021670:	681c      	ldr	r4, [r3, #0]
 8021672:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021674:	b9b3      	cbnz	r3, 80216a4 <rand+0x38>
 8021676:	2018      	movs	r0, #24
 8021678:	f001 ffae 	bl	80235d8 <malloc>
 802167c:	4602      	mov	r2, r0
 802167e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021680:	b920      	cbnz	r0, 802168c <rand+0x20>
 8021682:	2152      	movs	r1, #82	@ 0x52
 8021684:	4b11      	ldr	r3, [pc, #68]	@ (80216cc <rand+0x60>)
 8021686:	4812      	ldr	r0, [pc, #72]	@ (80216d0 <rand+0x64>)
 8021688:	f001 f8e4 	bl	8022854 <__assert_func>
 802168c:	4911      	ldr	r1, [pc, #68]	@ (80216d4 <rand+0x68>)
 802168e:	4b12      	ldr	r3, [pc, #72]	@ (80216d8 <rand+0x6c>)
 8021690:	e9c0 1300 	strd	r1, r3, [r0]
 8021694:	4b11      	ldr	r3, [pc, #68]	@ (80216dc <rand+0x70>)
 8021696:	2100      	movs	r1, #0
 8021698:	6083      	str	r3, [r0, #8]
 802169a:	230b      	movs	r3, #11
 802169c:	8183      	strh	r3, [r0, #12]
 802169e:	2001      	movs	r0, #1
 80216a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80216a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80216a6:	480e      	ldr	r0, [pc, #56]	@ (80216e0 <rand+0x74>)
 80216a8:	690b      	ldr	r3, [r1, #16]
 80216aa:	694c      	ldr	r4, [r1, #20]
 80216ac:	4358      	muls	r0, r3
 80216ae:	4a0d      	ldr	r2, [pc, #52]	@ (80216e4 <rand+0x78>)
 80216b0:	fb02 0004 	mla	r0, r2, r4, r0
 80216b4:	fba3 3202 	umull	r3, r2, r3, r2
 80216b8:	3301      	adds	r3, #1
 80216ba:	eb40 0002 	adc.w	r0, r0, r2
 80216be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80216c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80216c6:	bd10      	pop	{r4, pc}
 80216c8:	20000134 	.word	0x20000134
 80216cc:	08031672 	.word	0x08031672
 80216d0:	08031689 	.word	0x08031689
 80216d4:	abcd330e 	.word	0xabcd330e
 80216d8:	e66d1234 	.word	0xe66d1234
 80216dc:	0005deec 	.word	0x0005deec
 80216e0:	5851f42d 	.word	0x5851f42d
 80216e4:	4c957f2d 	.word	0x4c957f2d

080216e8 <_strtol_l.isra.0>:
 80216e8:	2b24      	cmp	r3, #36	@ 0x24
 80216ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216ee:	4686      	mov	lr, r0
 80216f0:	4690      	mov	r8, r2
 80216f2:	d801      	bhi.n	80216f8 <_strtol_l.isra.0+0x10>
 80216f4:	2b01      	cmp	r3, #1
 80216f6:	d106      	bne.n	8021706 <_strtol_l.isra.0+0x1e>
 80216f8:	f001 f862 	bl	80227c0 <__errno>
 80216fc:	2316      	movs	r3, #22
 80216fe:	6003      	str	r3, [r0, #0]
 8021700:	2000      	movs	r0, #0
 8021702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021706:	460d      	mov	r5, r1
 8021708:	4833      	ldr	r0, [pc, #204]	@ (80217d8 <_strtol_l.isra.0+0xf0>)
 802170a:	462a      	mov	r2, r5
 802170c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021710:	5d06      	ldrb	r6, [r0, r4]
 8021712:	f016 0608 	ands.w	r6, r6, #8
 8021716:	d1f8      	bne.n	802170a <_strtol_l.isra.0+0x22>
 8021718:	2c2d      	cmp	r4, #45	@ 0x2d
 802171a:	d110      	bne.n	802173e <_strtol_l.isra.0+0x56>
 802171c:	2601      	movs	r6, #1
 802171e:	782c      	ldrb	r4, [r5, #0]
 8021720:	1c95      	adds	r5, r2, #2
 8021722:	f033 0210 	bics.w	r2, r3, #16
 8021726:	d115      	bne.n	8021754 <_strtol_l.isra.0+0x6c>
 8021728:	2c30      	cmp	r4, #48	@ 0x30
 802172a:	d10d      	bne.n	8021748 <_strtol_l.isra.0+0x60>
 802172c:	782a      	ldrb	r2, [r5, #0]
 802172e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8021732:	2a58      	cmp	r2, #88	@ 0x58
 8021734:	d108      	bne.n	8021748 <_strtol_l.isra.0+0x60>
 8021736:	786c      	ldrb	r4, [r5, #1]
 8021738:	3502      	adds	r5, #2
 802173a:	2310      	movs	r3, #16
 802173c:	e00a      	b.n	8021754 <_strtol_l.isra.0+0x6c>
 802173e:	2c2b      	cmp	r4, #43	@ 0x2b
 8021740:	bf04      	itt	eq
 8021742:	782c      	ldrbeq	r4, [r5, #0]
 8021744:	1c95      	addeq	r5, r2, #2
 8021746:	e7ec      	b.n	8021722 <_strtol_l.isra.0+0x3a>
 8021748:	2b00      	cmp	r3, #0
 802174a:	d1f6      	bne.n	802173a <_strtol_l.isra.0+0x52>
 802174c:	2c30      	cmp	r4, #48	@ 0x30
 802174e:	bf14      	ite	ne
 8021750:	230a      	movne	r3, #10
 8021752:	2308      	moveq	r3, #8
 8021754:	2200      	movs	r2, #0
 8021756:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802175a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802175e:	fbbc f9f3 	udiv	r9, ip, r3
 8021762:	4610      	mov	r0, r2
 8021764:	fb03 ca19 	mls	sl, r3, r9, ip
 8021768:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802176c:	2f09      	cmp	r7, #9
 802176e:	d80f      	bhi.n	8021790 <_strtol_l.isra.0+0xa8>
 8021770:	463c      	mov	r4, r7
 8021772:	42a3      	cmp	r3, r4
 8021774:	dd1b      	ble.n	80217ae <_strtol_l.isra.0+0xc6>
 8021776:	1c57      	adds	r7, r2, #1
 8021778:	d007      	beq.n	802178a <_strtol_l.isra.0+0xa2>
 802177a:	4581      	cmp	r9, r0
 802177c:	d314      	bcc.n	80217a8 <_strtol_l.isra.0+0xc0>
 802177e:	d101      	bne.n	8021784 <_strtol_l.isra.0+0x9c>
 8021780:	45a2      	cmp	sl, r4
 8021782:	db11      	blt.n	80217a8 <_strtol_l.isra.0+0xc0>
 8021784:	2201      	movs	r2, #1
 8021786:	fb00 4003 	mla	r0, r0, r3, r4
 802178a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802178e:	e7eb      	b.n	8021768 <_strtol_l.isra.0+0x80>
 8021790:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8021794:	2f19      	cmp	r7, #25
 8021796:	d801      	bhi.n	802179c <_strtol_l.isra.0+0xb4>
 8021798:	3c37      	subs	r4, #55	@ 0x37
 802179a:	e7ea      	b.n	8021772 <_strtol_l.isra.0+0x8a>
 802179c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80217a0:	2f19      	cmp	r7, #25
 80217a2:	d804      	bhi.n	80217ae <_strtol_l.isra.0+0xc6>
 80217a4:	3c57      	subs	r4, #87	@ 0x57
 80217a6:	e7e4      	b.n	8021772 <_strtol_l.isra.0+0x8a>
 80217a8:	f04f 32ff 	mov.w	r2, #4294967295
 80217ac:	e7ed      	b.n	802178a <_strtol_l.isra.0+0xa2>
 80217ae:	1c53      	adds	r3, r2, #1
 80217b0:	d108      	bne.n	80217c4 <_strtol_l.isra.0+0xdc>
 80217b2:	2322      	movs	r3, #34	@ 0x22
 80217b4:	4660      	mov	r0, ip
 80217b6:	f8ce 3000 	str.w	r3, [lr]
 80217ba:	f1b8 0f00 	cmp.w	r8, #0
 80217be:	d0a0      	beq.n	8021702 <_strtol_l.isra.0+0x1a>
 80217c0:	1e69      	subs	r1, r5, #1
 80217c2:	e006      	b.n	80217d2 <_strtol_l.isra.0+0xea>
 80217c4:	b106      	cbz	r6, 80217c8 <_strtol_l.isra.0+0xe0>
 80217c6:	4240      	negs	r0, r0
 80217c8:	f1b8 0f00 	cmp.w	r8, #0
 80217cc:	d099      	beq.n	8021702 <_strtol_l.isra.0+0x1a>
 80217ce:	2a00      	cmp	r2, #0
 80217d0:	d1f6      	bne.n	80217c0 <_strtol_l.isra.0+0xd8>
 80217d2:	f8c8 1000 	str.w	r1, [r8]
 80217d6:	e794      	b.n	8021702 <_strtol_l.isra.0+0x1a>
 80217d8:	08031855 	.word	0x08031855

080217dc <_strtol_r>:
 80217dc:	f7ff bf84 	b.w	80216e8 <_strtol_l.isra.0>

080217e0 <strtol>:
 80217e0:	4613      	mov	r3, r2
 80217e2:	460a      	mov	r2, r1
 80217e4:	4601      	mov	r1, r0
 80217e6:	4802      	ldr	r0, [pc, #8]	@ (80217f0 <strtol+0x10>)
 80217e8:	6800      	ldr	r0, [r0, #0]
 80217ea:	f7ff bf7d 	b.w	80216e8 <_strtol_l.isra.0>
 80217ee:	bf00      	nop
 80217f0:	20000134 	.word	0x20000134

080217f4 <tolower>:
 80217f4:	4b03      	ldr	r3, [pc, #12]	@ (8021804 <tolower+0x10>)
 80217f6:	5c1b      	ldrb	r3, [r3, r0]
 80217f8:	f003 0303 	and.w	r3, r3, #3
 80217fc:	2b01      	cmp	r3, #1
 80217fe:	bf08      	it	eq
 8021800:	3020      	addeq	r0, #32
 8021802:	4770      	bx	lr
 8021804:	08031855 	.word	0x08031855

08021808 <__cvt>:
 8021808:	2b00      	cmp	r3, #0
 802180a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802180e:	461d      	mov	r5, r3
 8021810:	bfbb      	ittet	lt
 8021812:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8021816:	461d      	movlt	r5, r3
 8021818:	2300      	movge	r3, #0
 802181a:	232d      	movlt	r3, #45	@ 0x2d
 802181c:	b088      	sub	sp, #32
 802181e:	4614      	mov	r4, r2
 8021820:	bfb8      	it	lt
 8021822:	4614      	movlt	r4, r2
 8021824:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021826:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8021828:	7013      	strb	r3, [r2, #0]
 802182a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802182c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8021830:	f023 0820 	bic.w	r8, r3, #32
 8021834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8021838:	d005      	beq.n	8021846 <__cvt+0x3e>
 802183a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802183e:	d100      	bne.n	8021842 <__cvt+0x3a>
 8021840:	3601      	adds	r6, #1
 8021842:	2302      	movs	r3, #2
 8021844:	e000      	b.n	8021848 <__cvt+0x40>
 8021846:	2303      	movs	r3, #3
 8021848:	aa07      	add	r2, sp, #28
 802184a:	9204      	str	r2, [sp, #16]
 802184c:	aa06      	add	r2, sp, #24
 802184e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8021852:	e9cd 3600 	strd	r3, r6, [sp]
 8021856:	4622      	mov	r2, r4
 8021858:	462b      	mov	r3, r5
 802185a:	f001 f8a1 	bl	80229a0 <_dtoa_r>
 802185e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8021862:	4607      	mov	r7, r0
 8021864:	d119      	bne.n	802189a <__cvt+0x92>
 8021866:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021868:	07db      	lsls	r3, r3, #31
 802186a:	d50e      	bpl.n	802188a <__cvt+0x82>
 802186c:	eb00 0906 	add.w	r9, r0, r6
 8021870:	2200      	movs	r2, #0
 8021872:	2300      	movs	r3, #0
 8021874:	4620      	mov	r0, r4
 8021876:	4629      	mov	r1, r5
 8021878:	f7df f8dc 	bl	8000a34 <__aeabi_dcmpeq>
 802187c:	b108      	cbz	r0, 8021882 <__cvt+0x7a>
 802187e:	f8cd 901c 	str.w	r9, [sp, #28]
 8021882:	2230      	movs	r2, #48	@ 0x30
 8021884:	9b07      	ldr	r3, [sp, #28]
 8021886:	454b      	cmp	r3, r9
 8021888:	d31e      	bcc.n	80218c8 <__cvt+0xc0>
 802188a:	4638      	mov	r0, r7
 802188c:	9b07      	ldr	r3, [sp, #28]
 802188e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021890:	1bdb      	subs	r3, r3, r7
 8021892:	6013      	str	r3, [r2, #0]
 8021894:	b008      	add	sp, #32
 8021896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802189a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802189e:	eb00 0906 	add.w	r9, r0, r6
 80218a2:	d1e5      	bne.n	8021870 <__cvt+0x68>
 80218a4:	7803      	ldrb	r3, [r0, #0]
 80218a6:	2b30      	cmp	r3, #48	@ 0x30
 80218a8:	d10a      	bne.n	80218c0 <__cvt+0xb8>
 80218aa:	2200      	movs	r2, #0
 80218ac:	2300      	movs	r3, #0
 80218ae:	4620      	mov	r0, r4
 80218b0:	4629      	mov	r1, r5
 80218b2:	f7df f8bf 	bl	8000a34 <__aeabi_dcmpeq>
 80218b6:	b918      	cbnz	r0, 80218c0 <__cvt+0xb8>
 80218b8:	f1c6 0601 	rsb	r6, r6, #1
 80218bc:	f8ca 6000 	str.w	r6, [sl]
 80218c0:	f8da 3000 	ldr.w	r3, [sl]
 80218c4:	4499      	add	r9, r3
 80218c6:	e7d3      	b.n	8021870 <__cvt+0x68>
 80218c8:	1c59      	adds	r1, r3, #1
 80218ca:	9107      	str	r1, [sp, #28]
 80218cc:	701a      	strb	r2, [r3, #0]
 80218ce:	e7d9      	b.n	8021884 <__cvt+0x7c>

080218d0 <__exponent>:
 80218d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80218d2:	2900      	cmp	r1, #0
 80218d4:	bfb6      	itet	lt
 80218d6:	232d      	movlt	r3, #45	@ 0x2d
 80218d8:	232b      	movge	r3, #43	@ 0x2b
 80218da:	4249      	neglt	r1, r1
 80218dc:	2909      	cmp	r1, #9
 80218de:	7002      	strb	r2, [r0, #0]
 80218e0:	7043      	strb	r3, [r0, #1]
 80218e2:	dd29      	ble.n	8021938 <__exponent+0x68>
 80218e4:	f10d 0307 	add.w	r3, sp, #7
 80218e8:	461d      	mov	r5, r3
 80218ea:	270a      	movs	r7, #10
 80218ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80218f0:	461a      	mov	r2, r3
 80218f2:	fb07 1416 	mls	r4, r7, r6, r1
 80218f6:	3430      	adds	r4, #48	@ 0x30
 80218f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80218fc:	460c      	mov	r4, r1
 80218fe:	2c63      	cmp	r4, #99	@ 0x63
 8021900:	4631      	mov	r1, r6
 8021902:	f103 33ff 	add.w	r3, r3, #4294967295
 8021906:	dcf1      	bgt.n	80218ec <__exponent+0x1c>
 8021908:	3130      	adds	r1, #48	@ 0x30
 802190a:	1e94      	subs	r4, r2, #2
 802190c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8021910:	4623      	mov	r3, r4
 8021912:	1c41      	adds	r1, r0, #1
 8021914:	42ab      	cmp	r3, r5
 8021916:	d30a      	bcc.n	802192e <__exponent+0x5e>
 8021918:	f10d 0309 	add.w	r3, sp, #9
 802191c:	1a9b      	subs	r3, r3, r2
 802191e:	42ac      	cmp	r4, r5
 8021920:	bf88      	it	hi
 8021922:	2300      	movhi	r3, #0
 8021924:	3302      	adds	r3, #2
 8021926:	4403      	add	r3, r0
 8021928:	1a18      	subs	r0, r3, r0
 802192a:	b003      	add	sp, #12
 802192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802192e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8021932:	f801 6f01 	strb.w	r6, [r1, #1]!
 8021936:	e7ed      	b.n	8021914 <__exponent+0x44>
 8021938:	2330      	movs	r3, #48	@ 0x30
 802193a:	3130      	adds	r1, #48	@ 0x30
 802193c:	7083      	strb	r3, [r0, #2]
 802193e:	70c1      	strb	r1, [r0, #3]
 8021940:	1d03      	adds	r3, r0, #4
 8021942:	e7f1      	b.n	8021928 <__exponent+0x58>

08021944 <_printf_float>:
 8021944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021948:	b091      	sub	sp, #68	@ 0x44
 802194a:	460c      	mov	r4, r1
 802194c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8021950:	4616      	mov	r6, r2
 8021952:	461f      	mov	r7, r3
 8021954:	4605      	mov	r5, r0
 8021956:	f000 fee9 	bl	802272c <_localeconv_r>
 802195a:	6803      	ldr	r3, [r0, #0]
 802195c:	4618      	mov	r0, r3
 802195e:	9308      	str	r3, [sp, #32]
 8021960:	f7de fc3c 	bl	80001dc <strlen>
 8021964:	2300      	movs	r3, #0
 8021966:	930e      	str	r3, [sp, #56]	@ 0x38
 8021968:	f8d8 3000 	ldr.w	r3, [r8]
 802196c:	9009      	str	r0, [sp, #36]	@ 0x24
 802196e:	3307      	adds	r3, #7
 8021970:	f023 0307 	bic.w	r3, r3, #7
 8021974:	f103 0208 	add.w	r2, r3, #8
 8021978:	f894 a018 	ldrb.w	sl, [r4, #24]
 802197c:	f8d4 b000 	ldr.w	fp, [r4]
 8021980:	f8c8 2000 	str.w	r2, [r8]
 8021984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021988:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802198c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802198e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8021992:	f04f 32ff 	mov.w	r2, #4294967295
 8021996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802199a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 802199e:	4b9c      	ldr	r3, [pc, #624]	@ (8021c10 <_printf_float+0x2cc>)
 80219a0:	f7df f87a 	bl	8000a98 <__aeabi_dcmpun>
 80219a4:	bb70      	cbnz	r0, 8021a04 <_printf_float+0xc0>
 80219a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80219aa:	f04f 32ff 	mov.w	r2, #4294967295
 80219ae:	4b98      	ldr	r3, [pc, #608]	@ (8021c10 <_printf_float+0x2cc>)
 80219b0:	f7df f854 	bl	8000a5c <__aeabi_dcmple>
 80219b4:	bb30      	cbnz	r0, 8021a04 <_printf_float+0xc0>
 80219b6:	2200      	movs	r2, #0
 80219b8:	2300      	movs	r3, #0
 80219ba:	4640      	mov	r0, r8
 80219bc:	4649      	mov	r1, r9
 80219be:	f7df f843 	bl	8000a48 <__aeabi_dcmplt>
 80219c2:	b110      	cbz	r0, 80219ca <_printf_float+0x86>
 80219c4:	232d      	movs	r3, #45	@ 0x2d
 80219c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80219ca:	4a92      	ldr	r2, [pc, #584]	@ (8021c14 <_printf_float+0x2d0>)
 80219cc:	4b92      	ldr	r3, [pc, #584]	@ (8021c18 <_printf_float+0x2d4>)
 80219ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80219d2:	bf8c      	ite	hi
 80219d4:	4690      	movhi	r8, r2
 80219d6:	4698      	movls	r8, r3
 80219d8:	2303      	movs	r3, #3
 80219da:	f04f 0900 	mov.w	r9, #0
 80219de:	6123      	str	r3, [r4, #16]
 80219e0:	f02b 0304 	bic.w	r3, fp, #4
 80219e4:	6023      	str	r3, [r4, #0]
 80219e6:	4633      	mov	r3, r6
 80219e8:	4621      	mov	r1, r4
 80219ea:	4628      	mov	r0, r5
 80219ec:	9700      	str	r7, [sp, #0]
 80219ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80219f0:	f000 f9d4 	bl	8021d9c <_printf_common>
 80219f4:	3001      	adds	r0, #1
 80219f6:	f040 8090 	bne.w	8021b1a <_printf_float+0x1d6>
 80219fa:	f04f 30ff 	mov.w	r0, #4294967295
 80219fe:	b011      	add	sp, #68	@ 0x44
 8021a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a04:	4642      	mov	r2, r8
 8021a06:	464b      	mov	r3, r9
 8021a08:	4640      	mov	r0, r8
 8021a0a:	4649      	mov	r1, r9
 8021a0c:	f7df f844 	bl	8000a98 <__aeabi_dcmpun>
 8021a10:	b148      	cbz	r0, 8021a26 <_printf_float+0xe2>
 8021a12:	464b      	mov	r3, r9
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	bfb8      	it	lt
 8021a18:	232d      	movlt	r3, #45	@ 0x2d
 8021a1a:	4a80      	ldr	r2, [pc, #512]	@ (8021c1c <_printf_float+0x2d8>)
 8021a1c:	bfb8      	it	lt
 8021a1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8021a22:	4b7f      	ldr	r3, [pc, #508]	@ (8021c20 <_printf_float+0x2dc>)
 8021a24:	e7d3      	b.n	80219ce <_printf_float+0x8a>
 8021a26:	6863      	ldr	r3, [r4, #4]
 8021a28:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8021a2c:	1c5a      	adds	r2, r3, #1
 8021a2e:	d13f      	bne.n	8021ab0 <_printf_float+0x16c>
 8021a30:	2306      	movs	r3, #6
 8021a32:	6063      	str	r3, [r4, #4]
 8021a34:	2200      	movs	r2, #0
 8021a36:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8021a3a:	6023      	str	r3, [r4, #0]
 8021a3c:	9206      	str	r2, [sp, #24]
 8021a3e:	aa0e      	add	r2, sp, #56	@ 0x38
 8021a40:	e9cd a204 	strd	sl, r2, [sp, #16]
 8021a44:	aa0d      	add	r2, sp, #52	@ 0x34
 8021a46:	9203      	str	r2, [sp, #12]
 8021a48:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8021a4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021a50:	6863      	ldr	r3, [r4, #4]
 8021a52:	4642      	mov	r2, r8
 8021a54:	9300      	str	r3, [sp, #0]
 8021a56:	4628      	mov	r0, r5
 8021a58:	464b      	mov	r3, r9
 8021a5a:	910a      	str	r1, [sp, #40]	@ 0x28
 8021a5c:	f7ff fed4 	bl	8021808 <__cvt>
 8021a60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021a62:	4680      	mov	r8, r0
 8021a64:	2947      	cmp	r1, #71	@ 0x47
 8021a66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021a68:	d128      	bne.n	8021abc <_printf_float+0x178>
 8021a6a:	1cc8      	adds	r0, r1, #3
 8021a6c:	db02      	blt.n	8021a74 <_printf_float+0x130>
 8021a6e:	6863      	ldr	r3, [r4, #4]
 8021a70:	4299      	cmp	r1, r3
 8021a72:	dd40      	ble.n	8021af6 <_printf_float+0x1b2>
 8021a74:	f1aa 0a02 	sub.w	sl, sl, #2
 8021a78:	fa5f fa8a 	uxtb.w	sl, sl
 8021a7c:	4652      	mov	r2, sl
 8021a7e:	3901      	subs	r1, #1
 8021a80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8021a84:	910d      	str	r1, [sp, #52]	@ 0x34
 8021a86:	f7ff ff23 	bl	80218d0 <__exponent>
 8021a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021a8c:	4681      	mov	r9, r0
 8021a8e:	1813      	adds	r3, r2, r0
 8021a90:	2a01      	cmp	r2, #1
 8021a92:	6123      	str	r3, [r4, #16]
 8021a94:	dc02      	bgt.n	8021a9c <_printf_float+0x158>
 8021a96:	6822      	ldr	r2, [r4, #0]
 8021a98:	07d2      	lsls	r2, r2, #31
 8021a9a:	d501      	bpl.n	8021aa0 <_printf_float+0x15c>
 8021a9c:	3301      	adds	r3, #1
 8021a9e:	6123      	str	r3, [r4, #16]
 8021aa0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d09e      	beq.n	80219e6 <_printf_float+0xa2>
 8021aa8:	232d      	movs	r3, #45	@ 0x2d
 8021aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021aae:	e79a      	b.n	80219e6 <_printf_float+0xa2>
 8021ab0:	2947      	cmp	r1, #71	@ 0x47
 8021ab2:	d1bf      	bne.n	8021a34 <_printf_float+0xf0>
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d1bd      	bne.n	8021a34 <_printf_float+0xf0>
 8021ab8:	2301      	movs	r3, #1
 8021aba:	e7ba      	b.n	8021a32 <_printf_float+0xee>
 8021abc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021ac0:	d9dc      	bls.n	8021a7c <_printf_float+0x138>
 8021ac2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8021ac6:	d118      	bne.n	8021afa <_printf_float+0x1b6>
 8021ac8:	2900      	cmp	r1, #0
 8021aca:	6863      	ldr	r3, [r4, #4]
 8021acc:	dd0b      	ble.n	8021ae6 <_printf_float+0x1a2>
 8021ace:	6121      	str	r1, [r4, #16]
 8021ad0:	b913      	cbnz	r3, 8021ad8 <_printf_float+0x194>
 8021ad2:	6822      	ldr	r2, [r4, #0]
 8021ad4:	07d0      	lsls	r0, r2, #31
 8021ad6:	d502      	bpl.n	8021ade <_printf_float+0x19a>
 8021ad8:	3301      	adds	r3, #1
 8021ada:	440b      	add	r3, r1
 8021adc:	6123      	str	r3, [r4, #16]
 8021ade:	f04f 0900 	mov.w	r9, #0
 8021ae2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8021ae4:	e7dc      	b.n	8021aa0 <_printf_float+0x15c>
 8021ae6:	b913      	cbnz	r3, 8021aee <_printf_float+0x1aa>
 8021ae8:	6822      	ldr	r2, [r4, #0]
 8021aea:	07d2      	lsls	r2, r2, #31
 8021aec:	d501      	bpl.n	8021af2 <_printf_float+0x1ae>
 8021aee:	3302      	adds	r3, #2
 8021af0:	e7f4      	b.n	8021adc <_printf_float+0x198>
 8021af2:	2301      	movs	r3, #1
 8021af4:	e7f2      	b.n	8021adc <_printf_float+0x198>
 8021af6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8021afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021afc:	4299      	cmp	r1, r3
 8021afe:	db05      	blt.n	8021b0c <_printf_float+0x1c8>
 8021b00:	6823      	ldr	r3, [r4, #0]
 8021b02:	6121      	str	r1, [r4, #16]
 8021b04:	07d8      	lsls	r0, r3, #31
 8021b06:	d5ea      	bpl.n	8021ade <_printf_float+0x19a>
 8021b08:	1c4b      	adds	r3, r1, #1
 8021b0a:	e7e7      	b.n	8021adc <_printf_float+0x198>
 8021b0c:	2900      	cmp	r1, #0
 8021b0e:	bfcc      	ite	gt
 8021b10:	2201      	movgt	r2, #1
 8021b12:	f1c1 0202 	rsble	r2, r1, #2
 8021b16:	4413      	add	r3, r2
 8021b18:	e7e0      	b.n	8021adc <_printf_float+0x198>
 8021b1a:	6823      	ldr	r3, [r4, #0]
 8021b1c:	055a      	lsls	r2, r3, #21
 8021b1e:	d407      	bmi.n	8021b30 <_printf_float+0x1ec>
 8021b20:	6923      	ldr	r3, [r4, #16]
 8021b22:	4642      	mov	r2, r8
 8021b24:	4631      	mov	r1, r6
 8021b26:	4628      	mov	r0, r5
 8021b28:	47b8      	blx	r7
 8021b2a:	3001      	adds	r0, #1
 8021b2c:	d12b      	bne.n	8021b86 <_printf_float+0x242>
 8021b2e:	e764      	b.n	80219fa <_printf_float+0xb6>
 8021b30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021b34:	f240 80dc 	bls.w	8021cf0 <_printf_float+0x3ac>
 8021b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021b3c:	2200      	movs	r2, #0
 8021b3e:	2300      	movs	r3, #0
 8021b40:	f7de ff78 	bl	8000a34 <__aeabi_dcmpeq>
 8021b44:	2800      	cmp	r0, #0
 8021b46:	d033      	beq.n	8021bb0 <_printf_float+0x26c>
 8021b48:	2301      	movs	r3, #1
 8021b4a:	4631      	mov	r1, r6
 8021b4c:	4628      	mov	r0, r5
 8021b4e:	4a35      	ldr	r2, [pc, #212]	@ (8021c24 <_printf_float+0x2e0>)
 8021b50:	47b8      	blx	r7
 8021b52:	3001      	adds	r0, #1
 8021b54:	f43f af51 	beq.w	80219fa <_printf_float+0xb6>
 8021b58:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8021b5c:	4543      	cmp	r3, r8
 8021b5e:	db02      	blt.n	8021b66 <_printf_float+0x222>
 8021b60:	6823      	ldr	r3, [r4, #0]
 8021b62:	07d8      	lsls	r0, r3, #31
 8021b64:	d50f      	bpl.n	8021b86 <_printf_float+0x242>
 8021b66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021b6a:	4631      	mov	r1, r6
 8021b6c:	4628      	mov	r0, r5
 8021b6e:	47b8      	blx	r7
 8021b70:	3001      	adds	r0, #1
 8021b72:	f43f af42 	beq.w	80219fa <_printf_float+0xb6>
 8021b76:	f04f 0900 	mov.w	r9, #0
 8021b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8021b7e:	f104 0a1a 	add.w	sl, r4, #26
 8021b82:	45c8      	cmp	r8, r9
 8021b84:	dc09      	bgt.n	8021b9a <_printf_float+0x256>
 8021b86:	6823      	ldr	r3, [r4, #0]
 8021b88:	079b      	lsls	r3, r3, #30
 8021b8a:	f100 8102 	bmi.w	8021d92 <_printf_float+0x44e>
 8021b8e:	68e0      	ldr	r0, [r4, #12]
 8021b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b92:	4298      	cmp	r0, r3
 8021b94:	bfb8      	it	lt
 8021b96:	4618      	movlt	r0, r3
 8021b98:	e731      	b.n	80219fe <_printf_float+0xba>
 8021b9a:	2301      	movs	r3, #1
 8021b9c:	4652      	mov	r2, sl
 8021b9e:	4631      	mov	r1, r6
 8021ba0:	4628      	mov	r0, r5
 8021ba2:	47b8      	blx	r7
 8021ba4:	3001      	adds	r0, #1
 8021ba6:	f43f af28 	beq.w	80219fa <_printf_float+0xb6>
 8021baa:	f109 0901 	add.w	r9, r9, #1
 8021bae:	e7e8      	b.n	8021b82 <_printf_float+0x23e>
 8021bb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	dc38      	bgt.n	8021c28 <_printf_float+0x2e4>
 8021bb6:	2301      	movs	r3, #1
 8021bb8:	4631      	mov	r1, r6
 8021bba:	4628      	mov	r0, r5
 8021bbc:	4a19      	ldr	r2, [pc, #100]	@ (8021c24 <_printf_float+0x2e0>)
 8021bbe:	47b8      	blx	r7
 8021bc0:	3001      	adds	r0, #1
 8021bc2:	f43f af1a 	beq.w	80219fa <_printf_float+0xb6>
 8021bc6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8021bca:	ea59 0303 	orrs.w	r3, r9, r3
 8021bce:	d102      	bne.n	8021bd6 <_printf_float+0x292>
 8021bd0:	6823      	ldr	r3, [r4, #0]
 8021bd2:	07d9      	lsls	r1, r3, #31
 8021bd4:	d5d7      	bpl.n	8021b86 <_printf_float+0x242>
 8021bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021bda:	4631      	mov	r1, r6
 8021bdc:	4628      	mov	r0, r5
 8021bde:	47b8      	blx	r7
 8021be0:	3001      	adds	r0, #1
 8021be2:	f43f af0a 	beq.w	80219fa <_printf_float+0xb6>
 8021be6:	f04f 0a00 	mov.w	sl, #0
 8021bea:	f104 0b1a 	add.w	fp, r4, #26
 8021bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021bf0:	425b      	negs	r3, r3
 8021bf2:	4553      	cmp	r3, sl
 8021bf4:	dc01      	bgt.n	8021bfa <_printf_float+0x2b6>
 8021bf6:	464b      	mov	r3, r9
 8021bf8:	e793      	b.n	8021b22 <_printf_float+0x1de>
 8021bfa:	2301      	movs	r3, #1
 8021bfc:	465a      	mov	r2, fp
 8021bfe:	4631      	mov	r1, r6
 8021c00:	4628      	mov	r0, r5
 8021c02:	47b8      	blx	r7
 8021c04:	3001      	adds	r0, #1
 8021c06:	f43f aef8 	beq.w	80219fa <_printf_float+0xb6>
 8021c0a:	f10a 0a01 	add.w	sl, sl, #1
 8021c0e:	e7ee      	b.n	8021bee <_printf_float+0x2aa>
 8021c10:	7fefffff 	.word	0x7fefffff
 8021c14:	080316e5 	.word	0x080316e5
 8021c18:	080316e1 	.word	0x080316e1
 8021c1c:	080316ed 	.word	0x080316ed
 8021c20:	080316e9 	.word	0x080316e9
 8021c24:	08031845 	.word	0x08031845
 8021c28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021c2a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021c2e:	4553      	cmp	r3, sl
 8021c30:	bfa8      	it	ge
 8021c32:	4653      	movge	r3, sl
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	4699      	mov	r9, r3
 8021c38:	dc36      	bgt.n	8021ca8 <_printf_float+0x364>
 8021c3a:	f04f 0b00 	mov.w	fp, #0
 8021c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021c42:	f104 021a 	add.w	r2, r4, #26
 8021c46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c4a:	eba3 0309 	sub.w	r3, r3, r9
 8021c4e:	455b      	cmp	r3, fp
 8021c50:	dc31      	bgt.n	8021cb6 <_printf_float+0x372>
 8021c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c54:	459a      	cmp	sl, r3
 8021c56:	dc3a      	bgt.n	8021cce <_printf_float+0x38a>
 8021c58:	6823      	ldr	r3, [r4, #0]
 8021c5a:	07da      	lsls	r2, r3, #31
 8021c5c:	d437      	bmi.n	8021cce <_printf_float+0x38a>
 8021c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c60:	ebaa 0903 	sub.w	r9, sl, r3
 8021c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c66:	ebaa 0303 	sub.w	r3, sl, r3
 8021c6a:	4599      	cmp	r9, r3
 8021c6c:	bfa8      	it	ge
 8021c6e:	4699      	movge	r9, r3
 8021c70:	f1b9 0f00 	cmp.w	r9, #0
 8021c74:	dc33      	bgt.n	8021cde <_printf_float+0x39a>
 8021c76:	f04f 0800 	mov.w	r8, #0
 8021c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021c7e:	f104 0b1a 	add.w	fp, r4, #26
 8021c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c84:	ebaa 0303 	sub.w	r3, sl, r3
 8021c88:	eba3 0309 	sub.w	r3, r3, r9
 8021c8c:	4543      	cmp	r3, r8
 8021c8e:	f77f af7a 	ble.w	8021b86 <_printf_float+0x242>
 8021c92:	2301      	movs	r3, #1
 8021c94:	465a      	mov	r2, fp
 8021c96:	4631      	mov	r1, r6
 8021c98:	4628      	mov	r0, r5
 8021c9a:	47b8      	blx	r7
 8021c9c:	3001      	adds	r0, #1
 8021c9e:	f43f aeac 	beq.w	80219fa <_printf_float+0xb6>
 8021ca2:	f108 0801 	add.w	r8, r8, #1
 8021ca6:	e7ec      	b.n	8021c82 <_printf_float+0x33e>
 8021ca8:	4642      	mov	r2, r8
 8021caa:	4631      	mov	r1, r6
 8021cac:	4628      	mov	r0, r5
 8021cae:	47b8      	blx	r7
 8021cb0:	3001      	adds	r0, #1
 8021cb2:	d1c2      	bne.n	8021c3a <_printf_float+0x2f6>
 8021cb4:	e6a1      	b.n	80219fa <_printf_float+0xb6>
 8021cb6:	2301      	movs	r3, #1
 8021cb8:	4631      	mov	r1, r6
 8021cba:	4628      	mov	r0, r5
 8021cbc:	920a      	str	r2, [sp, #40]	@ 0x28
 8021cbe:	47b8      	blx	r7
 8021cc0:	3001      	adds	r0, #1
 8021cc2:	f43f ae9a 	beq.w	80219fa <_printf_float+0xb6>
 8021cc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cc8:	f10b 0b01 	add.w	fp, fp, #1
 8021ccc:	e7bb      	b.n	8021c46 <_printf_float+0x302>
 8021cce:	4631      	mov	r1, r6
 8021cd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021cd4:	4628      	mov	r0, r5
 8021cd6:	47b8      	blx	r7
 8021cd8:	3001      	adds	r0, #1
 8021cda:	d1c0      	bne.n	8021c5e <_printf_float+0x31a>
 8021cdc:	e68d      	b.n	80219fa <_printf_float+0xb6>
 8021cde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ce0:	464b      	mov	r3, r9
 8021ce2:	4631      	mov	r1, r6
 8021ce4:	4628      	mov	r0, r5
 8021ce6:	4442      	add	r2, r8
 8021ce8:	47b8      	blx	r7
 8021cea:	3001      	adds	r0, #1
 8021cec:	d1c3      	bne.n	8021c76 <_printf_float+0x332>
 8021cee:	e684      	b.n	80219fa <_printf_float+0xb6>
 8021cf0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021cf4:	f1ba 0f01 	cmp.w	sl, #1
 8021cf8:	dc01      	bgt.n	8021cfe <_printf_float+0x3ba>
 8021cfa:	07db      	lsls	r3, r3, #31
 8021cfc:	d536      	bpl.n	8021d6c <_printf_float+0x428>
 8021cfe:	2301      	movs	r3, #1
 8021d00:	4642      	mov	r2, r8
 8021d02:	4631      	mov	r1, r6
 8021d04:	4628      	mov	r0, r5
 8021d06:	47b8      	blx	r7
 8021d08:	3001      	adds	r0, #1
 8021d0a:	f43f ae76 	beq.w	80219fa <_printf_float+0xb6>
 8021d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021d12:	4631      	mov	r1, r6
 8021d14:	4628      	mov	r0, r5
 8021d16:	47b8      	blx	r7
 8021d18:	3001      	adds	r0, #1
 8021d1a:	f43f ae6e 	beq.w	80219fa <_printf_float+0xb6>
 8021d1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021d22:	2200      	movs	r2, #0
 8021d24:	2300      	movs	r3, #0
 8021d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021d2a:	f7de fe83 	bl	8000a34 <__aeabi_dcmpeq>
 8021d2e:	b9c0      	cbnz	r0, 8021d62 <_printf_float+0x41e>
 8021d30:	4653      	mov	r3, sl
 8021d32:	f108 0201 	add.w	r2, r8, #1
 8021d36:	4631      	mov	r1, r6
 8021d38:	4628      	mov	r0, r5
 8021d3a:	47b8      	blx	r7
 8021d3c:	3001      	adds	r0, #1
 8021d3e:	d10c      	bne.n	8021d5a <_printf_float+0x416>
 8021d40:	e65b      	b.n	80219fa <_printf_float+0xb6>
 8021d42:	2301      	movs	r3, #1
 8021d44:	465a      	mov	r2, fp
 8021d46:	4631      	mov	r1, r6
 8021d48:	4628      	mov	r0, r5
 8021d4a:	47b8      	blx	r7
 8021d4c:	3001      	adds	r0, #1
 8021d4e:	f43f ae54 	beq.w	80219fa <_printf_float+0xb6>
 8021d52:	f108 0801 	add.w	r8, r8, #1
 8021d56:	45d0      	cmp	r8, sl
 8021d58:	dbf3      	blt.n	8021d42 <_printf_float+0x3fe>
 8021d5a:	464b      	mov	r3, r9
 8021d5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021d60:	e6e0      	b.n	8021b24 <_printf_float+0x1e0>
 8021d62:	f04f 0800 	mov.w	r8, #0
 8021d66:	f104 0b1a 	add.w	fp, r4, #26
 8021d6a:	e7f4      	b.n	8021d56 <_printf_float+0x412>
 8021d6c:	2301      	movs	r3, #1
 8021d6e:	4642      	mov	r2, r8
 8021d70:	e7e1      	b.n	8021d36 <_printf_float+0x3f2>
 8021d72:	2301      	movs	r3, #1
 8021d74:	464a      	mov	r2, r9
 8021d76:	4631      	mov	r1, r6
 8021d78:	4628      	mov	r0, r5
 8021d7a:	47b8      	blx	r7
 8021d7c:	3001      	adds	r0, #1
 8021d7e:	f43f ae3c 	beq.w	80219fa <_printf_float+0xb6>
 8021d82:	f108 0801 	add.w	r8, r8, #1
 8021d86:	68e3      	ldr	r3, [r4, #12]
 8021d88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021d8a:	1a5b      	subs	r3, r3, r1
 8021d8c:	4543      	cmp	r3, r8
 8021d8e:	dcf0      	bgt.n	8021d72 <_printf_float+0x42e>
 8021d90:	e6fd      	b.n	8021b8e <_printf_float+0x24a>
 8021d92:	f04f 0800 	mov.w	r8, #0
 8021d96:	f104 0919 	add.w	r9, r4, #25
 8021d9a:	e7f4      	b.n	8021d86 <_printf_float+0x442>

08021d9c <_printf_common>:
 8021d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021da0:	4616      	mov	r6, r2
 8021da2:	4698      	mov	r8, r3
 8021da4:	688a      	ldr	r2, [r1, #8]
 8021da6:	690b      	ldr	r3, [r1, #16]
 8021da8:	4607      	mov	r7, r0
 8021daa:	4293      	cmp	r3, r2
 8021dac:	bfb8      	it	lt
 8021dae:	4613      	movlt	r3, r2
 8021db0:	6033      	str	r3, [r6, #0]
 8021db2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021db6:	460c      	mov	r4, r1
 8021db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021dbc:	b10a      	cbz	r2, 8021dc2 <_printf_common+0x26>
 8021dbe:	3301      	adds	r3, #1
 8021dc0:	6033      	str	r3, [r6, #0]
 8021dc2:	6823      	ldr	r3, [r4, #0]
 8021dc4:	0699      	lsls	r1, r3, #26
 8021dc6:	bf42      	ittt	mi
 8021dc8:	6833      	ldrmi	r3, [r6, #0]
 8021dca:	3302      	addmi	r3, #2
 8021dcc:	6033      	strmi	r3, [r6, #0]
 8021dce:	6825      	ldr	r5, [r4, #0]
 8021dd0:	f015 0506 	ands.w	r5, r5, #6
 8021dd4:	d106      	bne.n	8021de4 <_printf_common+0x48>
 8021dd6:	f104 0a19 	add.w	sl, r4, #25
 8021dda:	68e3      	ldr	r3, [r4, #12]
 8021ddc:	6832      	ldr	r2, [r6, #0]
 8021dde:	1a9b      	subs	r3, r3, r2
 8021de0:	42ab      	cmp	r3, r5
 8021de2:	dc2b      	bgt.n	8021e3c <_printf_common+0xa0>
 8021de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021de8:	6822      	ldr	r2, [r4, #0]
 8021dea:	3b00      	subs	r3, #0
 8021dec:	bf18      	it	ne
 8021dee:	2301      	movne	r3, #1
 8021df0:	0692      	lsls	r2, r2, #26
 8021df2:	d430      	bmi.n	8021e56 <_printf_common+0xba>
 8021df4:	4641      	mov	r1, r8
 8021df6:	4638      	mov	r0, r7
 8021df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021dfc:	47c8      	blx	r9
 8021dfe:	3001      	adds	r0, #1
 8021e00:	d023      	beq.n	8021e4a <_printf_common+0xae>
 8021e02:	6823      	ldr	r3, [r4, #0]
 8021e04:	6922      	ldr	r2, [r4, #16]
 8021e06:	f003 0306 	and.w	r3, r3, #6
 8021e0a:	2b04      	cmp	r3, #4
 8021e0c:	bf14      	ite	ne
 8021e0e:	2500      	movne	r5, #0
 8021e10:	6833      	ldreq	r3, [r6, #0]
 8021e12:	f04f 0600 	mov.w	r6, #0
 8021e16:	bf08      	it	eq
 8021e18:	68e5      	ldreq	r5, [r4, #12]
 8021e1a:	f104 041a 	add.w	r4, r4, #26
 8021e1e:	bf08      	it	eq
 8021e20:	1aed      	subeq	r5, r5, r3
 8021e22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8021e26:	bf08      	it	eq
 8021e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021e2c:	4293      	cmp	r3, r2
 8021e2e:	bfc4      	itt	gt
 8021e30:	1a9b      	subgt	r3, r3, r2
 8021e32:	18ed      	addgt	r5, r5, r3
 8021e34:	42b5      	cmp	r5, r6
 8021e36:	d11a      	bne.n	8021e6e <_printf_common+0xd2>
 8021e38:	2000      	movs	r0, #0
 8021e3a:	e008      	b.n	8021e4e <_printf_common+0xb2>
 8021e3c:	2301      	movs	r3, #1
 8021e3e:	4652      	mov	r2, sl
 8021e40:	4641      	mov	r1, r8
 8021e42:	4638      	mov	r0, r7
 8021e44:	47c8      	blx	r9
 8021e46:	3001      	adds	r0, #1
 8021e48:	d103      	bne.n	8021e52 <_printf_common+0xb6>
 8021e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8021e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e52:	3501      	adds	r5, #1
 8021e54:	e7c1      	b.n	8021dda <_printf_common+0x3e>
 8021e56:	2030      	movs	r0, #48	@ 0x30
 8021e58:	18e1      	adds	r1, r4, r3
 8021e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021e5e:	1c5a      	adds	r2, r3, #1
 8021e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021e64:	4422      	add	r2, r4
 8021e66:	3302      	adds	r3, #2
 8021e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021e6c:	e7c2      	b.n	8021df4 <_printf_common+0x58>
 8021e6e:	2301      	movs	r3, #1
 8021e70:	4622      	mov	r2, r4
 8021e72:	4641      	mov	r1, r8
 8021e74:	4638      	mov	r0, r7
 8021e76:	47c8      	blx	r9
 8021e78:	3001      	adds	r0, #1
 8021e7a:	d0e6      	beq.n	8021e4a <_printf_common+0xae>
 8021e7c:	3601      	adds	r6, #1
 8021e7e:	e7d9      	b.n	8021e34 <_printf_common+0x98>

08021e80 <_printf_i>:
 8021e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021e84:	7e0f      	ldrb	r7, [r1, #24]
 8021e86:	4691      	mov	r9, r2
 8021e88:	2f78      	cmp	r7, #120	@ 0x78
 8021e8a:	4680      	mov	r8, r0
 8021e8c:	460c      	mov	r4, r1
 8021e8e:	469a      	mov	sl, r3
 8021e90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021e96:	d807      	bhi.n	8021ea8 <_printf_i+0x28>
 8021e98:	2f62      	cmp	r7, #98	@ 0x62
 8021e9a:	d80a      	bhi.n	8021eb2 <_printf_i+0x32>
 8021e9c:	2f00      	cmp	r7, #0
 8021e9e:	f000 80d1 	beq.w	8022044 <_printf_i+0x1c4>
 8021ea2:	2f58      	cmp	r7, #88	@ 0x58
 8021ea4:	f000 80b8 	beq.w	8022018 <_printf_i+0x198>
 8021ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021eb0:	e03a      	b.n	8021f28 <_printf_i+0xa8>
 8021eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021eb6:	2b15      	cmp	r3, #21
 8021eb8:	d8f6      	bhi.n	8021ea8 <_printf_i+0x28>
 8021eba:	a101      	add	r1, pc, #4	@ (adr r1, 8021ec0 <_printf_i+0x40>)
 8021ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021ec0:	08021f19 	.word	0x08021f19
 8021ec4:	08021f2d 	.word	0x08021f2d
 8021ec8:	08021ea9 	.word	0x08021ea9
 8021ecc:	08021ea9 	.word	0x08021ea9
 8021ed0:	08021ea9 	.word	0x08021ea9
 8021ed4:	08021ea9 	.word	0x08021ea9
 8021ed8:	08021f2d 	.word	0x08021f2d
 8021edc:	08021ea9 	.word	0x08021ea9
 8021ee0:	08021ea9 	.word	0x08021ea9
 8021ee4:	08021ea9 	.word	0x08021ea9
 8021ee8:	08021ea9 	.word	0x08021ea9
 8021eec:	0802202b 	.word	0x0802202b
 8021ef0:	08021f57 	.word	0x08021f57
 8021ef4:	08021fe5 	.word	0x08021fe5
 8021ef8:	08021ea9 	.word	0x08021ea9
 8021efc:	08021ea9 	.word	0x08021ea9
 8021f00:	0802204d 	.word	0x0802204d
 8021f04:	08021ea9 	.word	0x08021ea9
 8021f08:	08021f57 	.word	0x08021f57
 8021f0c:	08021ea9 	.word	0x08021ea9
 8021f10:	08021ea9 	.word	0x08021ea9
 8021f14:	08021fed 	.word	0x08021fed
 8021f18:	6833      	ldr	r3, [r6, #0]
 8021f1a:	1d1a      	adds	r2, r3, #4
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	6032      	str	r2, [r6, #0]
 8021f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021f28:	2301      	movs	r3, #1
 8021f2a:	e09c      	b.n	8022066 <_printf_i+0x1e6>
 8021f2c:	6833      	ldr	r3, [r6, #0]
 8021f2e:	6820      	ldr	r0, [r4, #0]
 8021f30:	1d19      	adds	r1, r3, #4
 8021f32:	6031      	str	r1, [r6, #0]
 8021f34:	0606      	lsls	r6, r0, #24
 8021f36:	d501      	bpl.n	8021f3c <_printf_i+0xbc>
 8021f38:	681d      	ldr	r5, [r3, #0]
 8021f3a:	e003      	b.n	8021f44 <_printf_i+0xc4>
 8021f3c:	0645      	lsls	r5, r0, #25
 8021f3e:	d5fb      	bpl.n	8021f38 <_printf_i+0xb8>
 8021f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021f44:	2d00      	cmp	r5, #0
 8021f46:	da03      	bge.n	8021f50 <_printf_i+0xd0>
 8021f48:	232d      	movs	r3, #45	@ 0x2d
 8021f4a:	426d      	negs	r5, r5
 8021f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021f50:	230a      	movs	r3, #10
 8021f52:	4858      	ldr	r0, [pc, #352]	@ (80220b4 <_printf_i+0x234>)
 8021f54:	e011      	b.n	8021f7a <_printf_i+0xfa>
 8021f56:	6821      	ldr	r1, [r4, #0]
 8021f58:	6833      	ldr	r3, [r6, #0]
 8021f5a:	0608      	lsls	r0, r1, #24
 8021f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8021f60:	d402      	bmi.n	8021f68 <_printf_i+0xe8>
 8021f62:	0649      	lsls	r1, r1, #25
 8021f64:	bf48      	it	mi
 8021f66:	b2ad      	uxthmi	r5, r5
 8021f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8021f6a:	6033      	str	r3, [r6, #0]
 8021f6c:	bf14      	ite	ne
 8021f6e:	230a      	movne	r3, #10
 8021f70:	2308      	moveq	r3, #8
 8021f72:	4850      	ldr	r0, [pc, #320]	@ (80220b4 <_printf_i+0x234>)
 8021f74:	2100      	movs	r1, #0
 8021f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021f7a:	6866      	ldr	r6, [r4, #4]
 8021f7c:	2e00      	cmp	r6, #0
 8021f7e:	60a6      	str	r6, [r4, #8]
 8021f80:	db05      	blt.n	8021f8e <_printf_i+0x10e>
 8021f82:	6821      	ldr	r1, [r4, #0]
 8021f84:	432e      	orrs	r6, r5
 8021f86:	f021 0104 	bic.w	r1, r1, #4
 8021f8a:	6021      	str	r1, [r4, #0]
 8021f8c:	d04b      	beq.n	8022026 <_printf_i+0x1a6>
 8021f8e:	4616      	mov	r6, r2
 8021f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8021f94:	fb03 5711 	mls	r7, r3, r1, r5
 8021f98:	5dc7      	ldrb	r7, [r0, r7]
 8021f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021f9e:	462f      	mov	r7, r5
 8021fa0:	42bb      	cmp	r3, r7
 8021fa2:	460d      	mov	r5, r1
 8021fa4:	d9f4      	bls.n	8021f90 <_printf_i+0x110>
 8021fa6:	2b08      	cmp	r3, #8
 8021fa8:	d10b      	bne.n	8021fc2 <_printf_i+0x142>
 8021faa:	6823      	ldr	r3, [r4, #0]
 8021fac:	07df      	lsls	r7, r3, #31
 8021fae:	d508      	bpl.n	8021fc2 <_printf_i+0x142>
 8021fb0:	6923      	ldr	r3, [r4, #16]
 8021fb2:	6861      	ldr	r1, [r4, #4]
 8021fb4:	4299      	cmp	r1, r3
 8021fb6:	bfde      	ittt	le
 8021fb8:	2330      	movle	r3, #48	@ 0x30
 8021fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021fbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021fc2:	1b92      	subs	r2, r2, r6
 8021fc4:	6122      	str	r2, [r4, #16]
 8021fc6:	464b      	mov	r3, r9
 8021fc8:	4621      	mov	r1, r4
 8021fca:	4640      	mov	r0, r8
 8021fcc:	f8cd a000 	str.w	sl, [sp]
 8021fd0:	aa03      	add	r2, sp, #12
 8021fd2:	f7ff fee3 	bl	8021d9c <_printf_common>
 8021fd6:	3001      	adds	r0, #1
 8021fd8:	d14a      	bne.n	8022070 <_printf_i+0x1f0>
 8021fda:	f04f 30ff 	mov.w	r0, #4294967295
 8021fde:	b004      	add	sp, #16
 8021fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fe4:	6823      	ldr	r3, [r4, #0]
 8021fe6:	f043 0320 	orr.w	r3, r3, #32
 8021fea:	6023      	str	r3, [r4, #0]
 8021fec:	2778      	movs	r7, #120	@ 0x78
 8021fee:	4832      	ldr	r0, [pc, #200]	@ (80220b8 <_printf_i+0x238>)
 8021ff0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021ff4:	6823      	ldr	r3, [r4, #0]
 8021ff6:	6831      	ldr	r1, [r6, #0]
 8021ff8:	061f      	lsls	r7, r3, #24
 8021ffa:	f851 5b04 	ldr.w	r5, [r1], #4
 8021ffe:	d402      	bmi.n	8022006 <_printf_i+0x186>
 8022000:	065f      	lsls	r7, r3, #25
 8022002:	bf48      	it	mi
 8022004:	b2ad      	uxthmi	r5, r5
 8022006:	6031      	str	r1, [r6, #0]
 8022008:	07d9      	lsls	r1, r3, #31
 802200a:	bf44      	itt	mi
 802200c:	f043 0320 	orrmi.w	r3, r3, #32
 8022010:	6023      	strmi	r3, [r4, #0]
 8022012:	b11d      	cbz	r5, 802201c <_printf_i+0x19c>
 8022014:	2310      	movs	r3, #16
 8022016:	e7ad      	b.n	8021f74 <_printf_i+0xf4>
 8022018:	4826      	ldr	r0, [pc, #152]	@ (80220b4 <_printf_i+0x234>)
 802201a:	e7e9      	b.n	8021ff0 <_printf_i+0x170>
 802201c:	6823      	ldr	r3, [r4, #0]
 802201e:	f023 0320 	bic.w	r3, r3, #32
 8022022:	6023      	str	r3, [r4, #0]
 8022024:	e7f6      	b.n	8022014 <_printf_i+0x194>
 8022026:	4616      	mov	r6, r2
 8022028:	e7bd      	b.n	8021fa6 <_printf_i+0x126>
 802202a:	6833      	ldr	r3, [r6, #0]
 802202c:	6825      	ldr	r5, [r4, #0]
 802202e:	1d18      	adds	r0, r3, #4
 8022030:	6961      	ldr	r1, [r4, #20]
 8022032:	6030      	str	r0, [r6, #0]
 8022034:	062e      	lsls	r6, r5, #24
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	d501      	bpl.n	802203e <_printf_i+0x1be>
 802203a:	6019      	str	r1, [r3, #0]
 802203c:	e002      	b.n	8022044 <_printf_i+0x1c4>
 802203e:	0668      	lsls	r0, r5, #25
 8022040:	d5fb      	bpl.n	802203a <_printf_i+0x1ba>
 8022042:	8019      	strh	r1, [r3, #0]
 8022044:	2300      	movs	r3, #0
 8022046:	4616      	mov	r6, r2
 8022048:	6123      	str	r3, [r4, #16]
 802204a:	e7bc      	b.n	8021fc6 <_printf_i+0x146>
 802204c:	6833      	ldr	r3, [r6, #0]
 802204e:	2100      	movs	r1, #0
 8022050:	1d1a      	adds	r2, r3, #4
 8022052:	6032      	str	r2, [r6, #0]
 8022054:	681e      	ldr	r6, [r3, #0]
 8022056:	6862      	ldr	r2, [r4, #4]
 8022058:	4630      	mov	r0, r6
 802205a:	f000 fbde 	bl	802281a <memchr>
 802205e:	b108      	cbz	r0, 8022064 <_printf_i+0x1e4>
 8022060:	1b80      	subs	r0, r0, r6
 8022062:	6060      	str	r0, [r4, #4]
 8022064:	6863      	ldr	r3, [r4, #4]
 8022066:	6123      	str	r3, [r4, #16]
 8022068:	2300      	movs	r3, #0
 802206a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802206e:	e7aa      	b.n	8021fc6 <_printf_i+0x146>
 8022070:	4632      	mov	r2, r6
 8022072:	4649      	mov	r1, r9
 8022074:	4640      	mov	r0, r8
 8022076:	6923      	ldr	r3, [r4, #16]
 8022078:	47d0      	blx	sl
 802207a:	3001      	adds	r0, #1
 802207c:	d0ad      	beq.n	8021fda <_printf_i+0x15a>
 802207e:	6823      	ldr	r3, [r4, #0]
 8022080:	079b      	lsls	r3, r3, #30
 8022082:	d413      	bmi.n	80220ac <_printf_i+0x22c>
 8022084:	68e0      	ldr	r0, [r4, #12]
 8022086:	9b03      	ldr	r3, [sp, #12]
 8022088:	4298      	cmp	r0, r3
 802208a:	bfb8      	it	lt
 802208c:	4618      	movlt	r0, r3
 802208e:	e7a6      	b.n	8021fde <_printf_i+0x15e>
 8022090:	2301      	movs	r3, #1
 8022092:	4632      	mov	r2, r6
 8022094:	4649      	mov	r1, r9
 8022096:	4640      	mov	r0, r8
 8022098:	47d0      	blx	sl
 802209a:	3001      	adds	r0, #1
 802209c:	d09d      	beq.n	8021fda <_printf_i+0x15a>
 802209e:	3501      	adds	r5, #1
 80220a0:	68e3      	ldr	r3, [r4, #12]
 80220a2:	9903      	ldr	r1, [sp, #12]
 80220a4:	1a5b      	subs	r3, r3, r1
 80220a6:	42ab      	cmp	r3, r5
 80220a8:	dcf2      	bgt.n	8022090 <_printf_i+0x210>
 80220aa:	e7eb      	b.n	8022084 <_printf_i+0x204>
 80220ac:	2500      	movs	r5, #0
 80220ae:	f104 0619 	add.w	r6, r4, #25
 80220b2:	e7f5      	b.n	80220a0 <_printf_i+0x220>
 80220b4:	080316f1 	.word	0x080316f1
 80220b8:	08031702 	.word	0x08031702

080220bc <std>:
 80220bc:	2300      	movs	r3, #0
 80220be:	b510      	push	{r4, lr}
 80220c0:	4604      	mov	r4, r0
 80220c2:	e9c0 3300 	strd	r3, r3, [r0]
 80220c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80220ca:	6083      	str	r3, [r0, #8]
 80220cc:	8181      	strh	r1, [r0, #12]
 80220ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80220d0:	81c2      	strh	r2, [r0, #14]
 80220d2:	6183      	str	r3, [r0, #24]
 80220d4:	4619      	mov	r1, r3
 80220d6:	2208      	movs	r2, #8
 80220d8:	305c      	adds	r0, #92	@ 0x5c
 80220da:	f000 fa87 	bl	80225ec <memset>
 80220de:	4b0d      	ldr	r3, [pc, #52]	@ (8022114 <std+0x58>)
 80220e0:	6224      	str	r4, [r4, #32]
 80220e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80220e4:	4b0c      	ldr	r3, [pc, #48]	@ (8022118 <std+0x5c>)
 80220e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80220e8:	4b0c      	ldr	r3, [pc, #48]	@ (802211c <std+0x60>)
 80220ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80220ec:	4b0c      	ldr	r3, [pc, #48]	@ (8022120 <std+0x64>)
 80220ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80220f0:	4b0c      	ldr	r3, [pc, #48]	@ (8022124 <std+0x68>)
 80220f2:	429c      	cmp	r4, r3
 80220f4:	d006      	beq.n	8022104 <std+0x48>
 80220f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80220fa:	4294      	cmp	r4, r2
 80220fc:	d002      	beq.n	8022104 <std+0x48>
 80220fe:	33d0      	adds	r3, #208	@ 0xd0
 8022100:	429c      	cmp	r4, r3
 8022102:	d105      	bne.n	8022110 <std+0x54>
 8022104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802210c:	f000 bb82 	b.w	8022814 <__retarget_lock_init_recursive>
 8022110:	bd10      	pop	{r4, pc}
 8022112:	bf00      	nop
 8022114:	080223e5 	.word	0x080223e5
 8022118:	0802240b 	.word	0x0802240b
 802211c:	08022443 	.word	0x08022443
 8022120:	08022467 	.word	0x08022467
 8022124:	2000bf1c 	.word	0x2000bf1c

08022128 <stdio_exit_handler>:
 8022128:	4a02      	ldr	r2, [pc, #8]	@ (8022134 <stdio_exit_handler+0xc>)
 802212a:	4903      	ldr	r1, [pc, #12]	@ (8022138 <stdio_exit_handler+0x10>)
 802212c:	4803      	ldr	r0, [pc, #12]	@ (802213c <stdio_exit_handler+0x14>)
 802212e:	f000 b869 	b.w	8022204 <_fwalk_sglue>
 8022132:	bf00      	nop
 8022134:	20000128 	.word	0x20000128
 8022138:	08024a9d 	.word	0x08024a9d
 802213c:	20000138 	.word	0x20000138

08022140 <cleanup_stdio>:
 8022140:	6841      	ldr	r1, [r0, #4]
 8022142:	4b0c      	ldr	r3, [pc, #48]	@ (8022174 <cleanup_stdio+0x34>)
 8022144:	b510      	push	{r4, lr}
 8022146:	4299      	cmp	r1, r3
 8022148:	4604      	mov	r4, r0
 802214a:	d001      	beq.n	8022150 <cleanup_stdio+0x10>
 802214c:	f002 fca6 	bl	8024a9c <_fflush_r>
 8022150:	68a1      	ldr	r1, [r4, #8]
 8022152:	4b09      	ldr	r3, [pc, #36]	@ (8022178 <cleanup_stdio+0x38>)
 8022154:	4299      	cmp	r1, r3
 8022156:	d002      	beq.n	802215e <cleanup_stdio+0x1e>
 8022158:	4620      	mov	r0, r4
 802215a:	f002 fc9f 	bl	8024a9c <_fflush_r>
 802215e:	68e1      	ldr	r1, [r4, #12]
 8022160:	4b06      	ldr	r3, [pc, #24]	@ (802217c <cleanup_stdio+0x3c>)
 8022162:	4299      	cmp	r1, r3
 8022164:	d004      	beq.n	8022170 <cleanup_stdio+0x30>
 8022166:	4620      	mov	r0, r4
 8022168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802216c:	f002 bc96 	b.w	8024a9c <_fflush_r>
 8022170:	bd10      	pop	{r4, pc}
 8022172:	bf00      	nop
 8022174:	2000bf1c 	.word	0x2000bf1c
 8022178:	2000bf84 	.word	0x2000bf84
 802217c:	2000bfec 	.word	0x2000bfec

08022180 <global_stdio_init.part.0>:
 8022180:	b510      	push	{r4, lr}
 8022182:	4b0b      	ldr	r3, [pc, #44]	@ (80221b0 <global_stdio_init.part.0+0x30>)
 8022184:	4c0b      	ldr	r4, [pc, #44]	@ (80221b4 <global_stdio_init.part.0+0x34>)
 8022186:	4a0c      	ldr	r2, [pc, #48]	@ (80221b8 <global_stdio_init.part.0+0x38>)
 8022188:	4620      	mov	r0, r4
 802218a:	601a      	str	r2, [r3, #0]
 802218c:	2104      	movs	r1, #4
 802218e:	2200      	movs	r2, #0
 8022190:	f7ff ff94 	bl	80220bc <std>
 8022194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022198:	2201      	movs	r2, #1
 802219a:	2109      	movs	r1, #9
 802219c:	f7ff ff8e 	bl	80220bc <std>
 80221a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80221a4:	2202      	movs	r2, #2
 80221a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221aa:	2112      	movs	r1, #18
 80221ac:	f7ff bf86 	b.w	80220bc <std>
 80221b0:	2000c054 	.word	0x2000c054
 80221b4:	2000bf1c 	.word	0x2000bf1c
 80221b8:	08022129 	.word	0x08022129

080221bc <__sfp_lock_acquire>:
 80221bc:	4801      	ldr	r0, [pc, #4]	@ (80221c4 <__sfp_lock_acquire+0x8>)
 80221be:	f000 bb2a 	b.w	8022816 <__retarget_lock_acquire_recursive>
 80221c2:	bf00      	nop
 80221c4:	2000c05d 	.word	0x2000c05d

080221c8 <__sfp_lock_release>:
 80221c8:	4801      	ldr	r0, [pc, #4]	@ (80221d0 <__sfp_lock_release+0x8>)
 80221ca:	f000 bb25 	b.w	8022818 <__retarget_lock_release_recursive>
 80221ce:	bf00      	nop
 80221d0:	2000c05d 	.word	0x2000c05d

080221d4 <__sinit>:
 80221d4:	b510      	push	{r4, lr}
 80221d6:	4604      	mov	r4, r0
 80221d8:	f7ff fff0 	bl	80221bc <__sfp_lock_acquire>
 80221dc:	6a23      	ldr	r3, [r4, #32]
 80221de:	b11b      	cbz	r3, 80221e8 <__sinit+0x14>
 80221e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221e4:	f7ff bff0 	b.w	80221c8 <__sfp_lock_release>
 80221e8:	4b04      	ldr	r3, [pc, #16]	@ (80221fc <__sinit+0x28>)
 80221ea:	6223      	str	r3, [r4, #32]
 80221ec:	4b04      	ldr	r3, [pc, #16]	@ (8022200 <__sinit+0x2c>)
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d1f5      	bne.n	80221e0 <__sinit+0xc>
 80221f4:	f7ff ffc4 	bl	8022180 <global_stdio_init.part.0>
 80221f8:	e7f2      	b.n	80221e0 <__sinit+0xc>
 80221fa:	bf00      	nop
 80221fc:	08022141 	.word	0x08022141
 8022200:	2000c054 	.word	0x2000c054

08022204 <_fwalk_sglue>:
 8022204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022208:	4607      	mov	r7, r0
 802220a:	4688      	mov	r8, r1
 802220c:	4614      	mov	r4, r2
 802220e:	2600      	movs	r6, #0
 8022210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022214:	f1b9 0901 	subs.w	r9, r9, #1
 8022218:	d505      	bpl.n	8022226 <_fwalk_sglue+0x22>
 802221a:	6824      	ldr	r4, [r4, #0]
 802221c:	2c00      	cmp	r4, #0
 802221e:	d1f7      	bne.n	8022210 <_fwalk_sglue+0xc>
 8022220:	4630      	mov	r0, r6
 8022222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022226:	89ab      	ldrh	r3, [r5, #12]
 8022228:	2b01      	cmp	r3, #1
 802222a:	d907      	bls.n	802223c <_fwalk_sglue+0x38>
 802222c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022230:	3301      	adds	r3, #1
 8022232:	d003      	beq.n	802223c <_fwalk_sglue+0x38>
 8022234:	4629      	mov	r1, r5
 8022236:	4638      	mov	r0, r7
 8022238:	47c0      	blx	r8
 802223a:	4306      	orrs	r6, r0
 802223c:	3568      	adds	r5, #104	@ 0x68
 802223e:	e7e9      	b.n	8022214 <_fwalk_sglue+0x10>

08022240 <iprintf>:
 8022240:	b40f      	push	{r0, r1, r2, r3}
 8022242:	b507      	push	{r0, r1, r2, lr}
 8022244:	4906      	ldr	r1, [pc, #24]	@ (8022260 <iprintf+0x20>)
 8022246:	ab04      	add	r3, sp, #16
 8022248:	6808      	ldr	r0, [r1, #0]
 802224a:	f853 2b04 	ldr.w	r2, [r3], #4
 802224e:	6881      	ldr	r1, [r0, #8]
 8022250:	9301      	str	r3, [sp, #4]
 8022252:	f002 f93f 	bl	80244d4 <_vfiprintf_r>
 8022256:	b003      	add	sp, #12
 8022258:	f85d eb04 	ldr.w	lr, [sp], #4
 802225c:	b004      	add	sp, #16
 802225e:	4770      	bx	lr
 8022260:	20000134 	.word	0x20000134

08022264 <_puts_r>:
 8022264:	6a03      	ldr	r3, [r0, #32]
 8022266:	b570      	push	{r4, r5, r6, lr}
 8022268:	4605      	mov	r5, r0
 802226a:	460e      	mov	r6, r1
 802226c:	6884      	ldr	r4, [r0, #8]
 802226e:	b90b      	cbnz	r3, 8022274 <_puts_r+0x10>
 8022270:	f7ff ffb0 	bl	80221d4 <__sinit>
 8022274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022276:	07db      	lsls	r3, r3, #31
 8022278:	d405      	bmi.n	8022286 <_puts_r+0x22>
 802227a:	89a3      	ldrh	r3, [r4, #12]
 802227c:	0598      	lsls	r0, r3, #22
 802227e:	d402      	bmi.n	8022286 <_puts_r+0x22>
 8022280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022282:	f000 fac8 	bl	8022816 <__retarget_lock_acquire_recursive>
 8022286:	89a3      	ldrh	r3, [r4, #12]
 8022288:	0719      	lsls	r1, r3, #28
 802228a:	d502      	bpl.n	8022292 <_puts_r+0x2e>
 802228c:	6923      	ldr	r3, [r4, #16]
 802228e:	2b00      	cmp	r3, #0
 8022290:	d135      	bne.n	80222fe <_puts_r+0x9a>
 8022292:	4621      	mov	r1, r4
 8022294:	4628      	mov	r0, r5
 8022296:	f000 f929 	bl	80224ec <__swsetup_r>
 802229a:	b380      	cbz	r0, 80222fe <_puts_r+0x9a>
 802229c:	f04f 35ff 	mov.w	r5, #4294967295
 80222a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80222a2:	07da      	lsls	r2, r3, #31
 80222a4:	d405      	bmi.n	80222b2 <_puts_r+0x4e>
 80222a6:	89a3      	ldrh	r3, [r4, #12]
 80222a8:	059b      	lsls	r3, r3, #22
 80222aa:	d402      	bmi.n	80222b2 <_puts_r+0x4e>
 80222ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80222ae:	f000 fab3 	bl	8022818 <__retarget_lock_release_recursive>
 80222b2:	4628      	mov	r0, r5
 80222b4:	bd70      	pop	{r4, r5, r6, pc}
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	da04      	bge.n	80222c4 <_puts_r+0x60>
 80222ba:	69a2      	ldr	r2, [r4, #24]
 80222bc:	429a      	cmp	r2, r3
 80222be:	dc17      	bgt.n	80222f0 <_puts_r+0x8c>
 80222c0:	290a      	cmp	r1, #10
 80222c2:	d015      	beq.n	80222f0 <_puts_r+0x8c>
 80222c4:	6823      	ldr	r3, [r4, #0]
 80222c6:	1c5a      	adds	r2, r3, #1
 80222c8:	6022      	str	r2, [r4, #0]
 80222ca:	7019      	strb	r1, [r3, #0]
 80222cc:	68a3      	ldr	r3, [r4, #8]
 80222ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80222d2:	3b01      	subs	r3, #1
 80222d4:	60a3      	str	r3, [r4, #8]
 80222d6:	2900      	cmp	r1, #0
 80222d8:	d1ed      	bne.n	80222b6 <_puts_r+0x52>
 80222da:	2b00      	cmp	r3, #0
 80222dc:	da11      	bge.n	8022302 <_puts_r+0x9e>
 80222de:	4622      	mov	r2, r4
 80222e0:	210a      	movs	r1, #10
 80222e2:	4628      	mov	r0, r5
 80222e4:	f000 f8c3 	bl	802246e <__swbuf_r>
 80222e8:	3001      	adds	r0, #1
 80222ea:	d0d7      	beq.n	802229c <_puts_r+0x38>
 80222ec:	250a      	movs	r5, #10
 80222ee:	e7d7      	b.n	80222a0 <_puts_r+0x3c>
 80222f0:	4622      	mov	r2, r4
 80222f2:	4628      	mov	r0, r5
 80222f4:	f000 f8bb 	bl	802246e <__swbuf_r>
 80222f8:	3001      	adds	r0, #1
 80222fa:	d1e7      	bne.n	80222cc <_puts_r+0x68>
 80222fc:	e7ce      	b.n	802229c <_puts_r+0x38>
 80222fe:	3e01      	subs	r6, #1
 8022300:	e7e4      	b.n	80222cc <_puts_r+0x68>
 8022302:	6823      	ldr	r3, [r4, #0]
 8022304:	1c5a      	adds	r2, r3, #1
 8022306:	6022      	str	r2, [r4, #0]
 8022308:	220a      	movs	r2, #10
 802230a:	701a      	strb	r2, [r3, #0]
 802230c:	e7ee      	b.n	80222ec <_puts_r+0x88>
	...

08022310 <puts>:
 8022310:	4b02      	ldr	r3, [pc, #8]	@ (802231c <puts+0xc>)
 8022312:	4601      	mov	r1, r0
 8022314:	6818      	ldr	r0, [r3, #0]
 8022316:	f7ff bfa5 	b.w	8022264 <_puts_r>
 802231a:	bf00      	nop
 802231c:	20000134 	.word	0x20000134

08022320 <sniprintf>:
 8022320:	b40c      	push	{r2, r3}
 8022322:	b530      	push	{r4, r5, lr}
 8022324:	4b18      	ldr	r3, [pc, #96]	@ (8022388 <sniprintf+0x68>)
 8022326:	1e0c      	subs	r4, r1, #0
 8022328:	681d      	ldr	r5, [r3, #0]
 802232a:	b09d      	sub	sp, #116	@ 0x74
 802232c:	da08      	bge.n	8022340 <sniprintf+0x20>
 802232e:	238b      	movs	r3, #139	@ 0x8b
 8022330:	f04f 30ff 	mov.w	r0, #4294967295
 8022334:	602b      	str	r3, [r5, #0]
 8022336:	b01d      	add	sp, #116	@ 0x74
 8022338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802233c:	b002      	add	sp, #8
 802233e:	4770      	bx	lr
 8022340:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022344:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022348:	f04f 0300 	mov.w	r3, #0
 802234c:	931b      	str	r3, [sp, #108]	@ 0x6c
 802234e:	bf0c      	ite	eq
 8022350:	4623      	moveq	r3, r4
 8022352:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022356:	9304      	str	r3, [sp, #16]
 8022358:	9307      	str	r3, [sp, #28]
 802235a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802235e:	9002      	str	r0, [sp, #8]
 8022360:	9006      	str	r0, [sp, #24]
 8022362:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022366:	4628      	mov	r0, r5
 8022368:	ab21      	add	r3, sp, #132	@ 0x84
 802236a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802236c:	a902      	add	r1, sp, #8
 802236e:	9301      	str	r3, [sp, #4]
 8022370:	f001 fdbe 	bl	8023ef0 <_svfiprintf_r>
 8022374:	1c43      	adds	r3, r0, #1
 8022376:	bfbc      	itt	lt
 8022378:	238b      	movlt	r3, #139	@ 0x8b
 802237a:	602b      	strlt	r3, [r5, #0]
 802237c:	2c00      	cmp	r4, #0
 802237e:	d0da      	beq.n	8022336 <sniprintf+0x16>
 8022380:	2200      	movs	r2, #0
 8022382:	9b02      	ldr	r3, [sp, #8]
 8022384:	701a      	strb	r2, [r3, #0]
 8022386:	e7d6      	b.n	8022336 <sniprintf+0x16>
 8022388:	20000134 	.word	0x20000134

0802238c <siscanf>:
 802238c:	b40e      	push	{r1, r2, r3}
 802238e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8022392:	b570      	push	{r4, r5, r6, lr}
 8022394:	2500      	movs	r5, #0
 8022396:	b09d      	sub	sp, #116	@ 0x74
 8022398:	ac21      	add	r4, sp, #132	@ 0x84
 802239a:	f854 6b04 	ldr.w	r6, [r4], #4
 802239e:	f8ad 2014 	strh.w	r2, [sp, #20]
 80223a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80223a4:	9002      	str	r0, [sp, #8]
 80223a6:	9006      	str	r0, [sp, #24]
 80223a8:	f7dd ff18 	bl	80001dc <strlen>
 80223ac:	4b0b      	ldr	r3, [pc, #44]	@ (80223dc <siscanf+0x50>)
 80223ae:	9003      	str	r0, [sp, #12]
 80223b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80223b6:	9007      	str	r0, [sp, #28]
 80223b8:	4809      	ldr	r0, [pc, #36]	@ (80223e0 <siscanf+0x54>)
 80223ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80223be:	4632      	mov	r2, r6
 80223c0:	4623      	mov	r3, r4
 80223c2:	a902      	add	r1, sp, #8
 80223c4:	6800      	ldr	r0, [r0, #0]
 80223c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80223c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80223ca:	9401      	str	r4, [sp, #4]
 80223cc:	f001 fee6 	bl	802419c <__ssvfiscanf_r>
 80223d0:	b01d      	add	sp, #116	@ 0x74
 80223d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80223d6:	b003      	add	sp, #12
 80223d8:	4770      	bx	lr
 80223da:	bf00      	nop
 80223dc:	08022407 	.word	0x08022407
 80223e0:	20000134 	.word	0x20000134

080223e4 <__sread>:
 80223e4:	b510      	push	{r4, lr}
 80223e6:	460c      	mov	r4, r1
 80223e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223ec:	f000 f9c4 	bl	8022778 <_read_r>
 80223f0:	2800      	cmp	r0, #0
 80223f2:	bfab      	itete	ge
 80223f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80223f6:	89a3      	ldrhlt	r3, [r4, #12]
 80223f8:	181b      	addge	r3, r3, r0
 80223fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80223fe:	bfac      	ite	ge
 8022400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022402:	81a3      	strhlt	r3, [r4, #12]
 8022404:	bd10      	pop	{r4, pc}

08022406 <__seofread>:
 8022406:	2000      	movs	r0, #0
 8022408:	4770      	bx	lr

0802240a <__swrite>:
 802240a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802240e:	461f      	mov	r7, r3
 8022410:	898b      	ldrh	r3, [r1, #12]
 8022412:	4605      	mov	r5, r0
 8022414:	05db      	lsls	r3, r3, #23
 8022416:	460c      	mov	r4, r1
 8022418:	4616      	mov	r6, r2
 802241a:	d505      	bpl.n	8022428 <__swrite+0x1e>
 802241c:	2302      	movs	r3, #2
 802241e:	2200      	movs	r2, #0
 8022420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022424:	f000 f996 	bl	8022754 <_lseek_r>
 8022428:	89a3      	ldrh	r3, [r4, #12]
 802242a:	4632      	mov	r2, r6
 802242c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022430:	81a3      	strh	r3, [r4, #12]
 8022432:	4628      	mov	r0, r5
 8022434:	463b      	mov	r3, r7
 8022436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802243a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802243e:	f000 b9ad 	b.w	802279c <_write_r>

08022442 <__sseek>:
 8022442:	b510      	push	{r4, lr}
 8022444:	460c      	mov	r4, r1
 8022446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802244a:	f000 f983 	bl	8022754 <_lseek_r>
 802244e:	1c43      	adds	r3, r0, #1
 8022450:	89a3      	ldrh	r3, [r4, #12]
 8022452:	bf15      	itete	ne
 8022454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802245a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802245e:	81a3      	strheq	r3, [r4, #12]
 8022460:	bf18      	it	ne
 8022462:	81a3      	strhne	r3, [r4, #12]
 8022464:	bd10      	pop	{r4, pc}

08022466 <__sclose>:
 8022466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802246a:	f000 b963 	b.w	8022734 <_close_r>

0802246e <__swbuf_r>:
 802246e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022470:	460e      	mov	r6, r1
 8022472:	4614      	mov	r4, r2
 8022474:	4605      	mov	r5, r0
 8022476:	b118      	cbz	r0, 8022480 <__swbuf_r+0x12>
 8022478:	6a03      	ldr	r3, [r0, #32]
 802247a:	b90b      	cbnz	r3, 8022480 <__swbuf_r+0x12>
 802247c:	f7ff feaa 	bl	80221d4 <__sinit>
 8022480:	69a3      	ldr	r3, [r4, #24]
 8022482:	60a3      	str	r3, [r4, #8]
 8022484:	89a3      	ldrh	r3, [r4, #12]
 8022486:	071a      	lsls	r2, r3, #28
 8022488:	d501      	bpl.n	802248e <__swbuf_r+0x20>
 802248a:	6923      	ldr	r3, [r4, #16]
 802248c:	b943      	cbnz	r3, 80224a0 <__swbuf_r+0x32>
 802248e:	4621      	mov	r1, r4
 8022490:	4628      	mov	r0, r5
 8022492:	f000 f82b 	bl	80224ec <__swsetup_r>
 8022496:	b118      	cbz	r0, 80224a0 <__swbuf_r+0x32>
 8022498:	f04f 37ff 	mov.w	r7, #4294967295
 802249c:	4638      	mov	r0, r7
 802249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80224a0:	6823      	ldr	r3, [r4, #0]
 80224a2:	6922      	ldr	r2, [r4, #16]
 80224a4:	b2f6      	uxtb	r6, r6
 80224a6:	1a98      	subs	r0, r3, r2
 80224a8:	6963      	ldr	r3, [r4, #20]
 80224aa:	4637      	mov	r7, r6
 80224ac:	4283      	cmp	r3, r0
 80224ae:	dc05      	bgt.n	80224bc <__swbuf_r+0x4e>
 80224b0:	4621      	mov	r1, r4
 80224b2:	4628      	mov	r0, r5
 80224b4:	f002 faf2 	bl	8024a9c <_fflush_r>
 80224b8:	2800      	cmp	r0, #0
 80224ba:	d1ed      	bne.n	8022498 <__swbuf_r+0x2a>
 80224bc:	68a3      	ldr	r3, [r4, #8]
 80224be:	3b01      	subs	r3, #1
 80224c0:	60a3      	str	r3, [r4, #8]
 80224c2:	6823      	ldr	r3, [r4, #0]
 80224c4:	1c5a      	adds	r2, r3, #1
 80224c6:	6022      	str	r2, [r4, #0]
 80224c8:	701e      	strb	r6, [r3, #0]
 80224ca:	6962      	ldr	r2, [r4, #20]
 80224cc:	1c43      	adds	r3, r0, #1
 80224ce:	429a      	cmp	r2, r3
 80224d0:	d004      	beq.n	80224dc <__swbuf_r+0x6e>
 80224d2:	89a3      	ldrh	r3, [r4, #12]
 80224d4:	07db      	lsls	r3, r3, #31
 80224d6:	d5e1      	bpl.n	802249c <__swbuf_r+0x2e>
 80224d8:	2e0a      	cmp	r6, #10
 80224da:	d1df      	bne.n	802249c <__swbuf_r+0x2e>
 80224dc:	4621      	mov	r1, r4
 80224de:	4628      	mov	r0, r5
 80224e0:	f002 fadc 	bl	8024a9c <_fflush_r>
 80224e4:	2800      	cmp	r0, #0
 80224e6:	d0d9      	beq.n	802249c <__swbuf_r+0x2e>
 80224e8:	e7d6      	b.n	8022498 <__swbuf_r+0x2a>
	...

080224ec <__swsetup_r>:
 80224ec:	b538      	push	{r3, r4, r5, lr}
 80224ee:	4b29      	ldr	r3, [pc, #164]	@ (8022594 <__swsetup_r+0xa8>)
 80224f0:	4605      	mov	r5, r0
 80224f2:	6818      	ldr	r0, [r3, #0]
 80224f4:	460c      	mov	r4, r1
 80224f6:	b118      	cbz	r0, 8022500 <__swsetup_r+0x14>
 80224f8:	6a03      	ldr	r3, [r0, #32]
 80224fa:	b90b      	cbnz	r3, 8022500 <__swsetup_r+0x14>
 80224fc:	f7ff fe6a 	bl	80221d4 <__sinit>
 8022500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022504:	0719      	lsls	r1, r3, #28
 8022506:	d422      	bmi.n	802254e <__swsetup_r+0x62>
 8022508:	06da      	lsls	r2, r3, #27
 802250a:	d407      	bmi.n	802251c <__swsetup_r+0x30>
 802250c:	2209      	movs	r2, #9
 802250e:	602a      	str	r2, [r5, #0]
 8022510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022514:	f04f 30ff 	mov.w	r0, #4294967295
 8022518:	81a3      	strh	r3, [r4, #12]
 802251a:	e033      	b.n	8022584 <__swsetup_r+0x98>
 802251c:	0758      	lsls	r0, r3, #29
 802251e:	d512      	bpl.n	8022546 <__swsetup_r+0x5a>
 8022520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022522:	b141      	cbz	r1, 8022536 <__swsetup_r+0x4a>
 8022524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022528:	4299      	cmp	r1, r3
 802252a:	d002      	beq.n	8022532 <__swsetup_r+0x46>
 802252c:	4628      	mov	r0, r5
 802252e:	f001 f80b 	bl	8023548 <_free_r>
 8022532:	2300      	movs	r3, #0
 8022534:	6363      	str	r3, [r4, #52]	@ 0x34
 8022536:	89a3      	ldrh	r3, [r4, #12]
 8022538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802253c:	81a3      	strh	r3, [r4, #12]
 802253e:	2300      	movs	r3, #0
 8022540:	6063      	str	r3, [r4, #4]
 8022542:	6923      	ldr	r3, [r4, #16]
 8022544:	6023      	str	r3, [r4, #0]
 8022546:	89a3      	ldrh	r3, [r4, #12]
 8022548:	f043 0308 	orr.w	r3, r3, #8
 802254c:	81a3      	strh	r3, [r4, #12]
 802254e:	6923      	ldr	r3, [r4, #16]
 8022550:	b94b      	cbnz	r3, 8022566 <__swsetup_r+0x7a>
 8022552:	89a3      	ldrh	r3, [r4, #12]
 8022554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802255c:	d003      	beq.n	8022566 <__swsetup_r+0x7a>
 802255e:	4621      	mov	r1, r4
 8022560:	4628      	mov	r0, r5
 8022562:	f002 fafa 	bl	8024b5a <__smakebuf_r>
 8022566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802256a:	f013 0201 	ands.w	r2, r3, #1
 802256e:	d00a      	beq.n	8022586 <__swsetup_r+0x9a>
 8022570:	2200      	movs	r2, #0
 8022572:	60a2      	str	r2, [r4, #8]
 8022574:	6962      	ldr	r2, [r4, #20]
 8022576:	4252      	negs	r2, r2
 8022578:	61a2      	str	r2, [r4, #24]
 802257a:	6922      	ldr	r2, [r4, #16]
 802257c:	b942      	cbnz	r2, 8022590 <__swsetup_r+0xa4>
 802257e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022582:	d1c5      	bne.n	8022510 <__swsetup_r+0x24>
 8022584:	bd38      	pop	{r3, r4, r5, pc}
 8022586:	0799      	lsls	r1, r3, #30
 8022588:	bf58      	it	pl
 802258a:	6962      	ldrpl	r2, [r4, #20]
 802258c:	60a2      	str	r2, [r4, #8]
 802258e:	e7f4      	b.n	802257a <__swsetup_r+0x8e>
 8022590:	2000      	movs	r0, #0
 8022592:	e7f7      	b.n	8022584 <__swsetup_r+0x98>
 8022594:	20000134 	.word	0x20000134

08022598 <memcmp>:
 8022598:	b510      	push	{r4, lr}
 802259a:	3901      	subs	r1, #1
 802259c:	4402      	add	r2, r0
 802259e:	4290      	cmp	r0, r2
 80225a0:	d101      	bne.n	80225a6 <memcmp+0xe>
 80225a2:	2000      	movs	r0, #0
 80225a4:	e005      	b.n	80225b2 <memcmp+0x1a>
 80225a6:	7803      	ldrb	r3, [r0, #0]
 80225a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80225ac:	42a3      	cmp	r3, r4
 80225ae:	d001      	beq.n	80225b4 <memcmp+0x1c>
 80225b0:	1b18      	subs	r0, r3, r4
 80225b2:	bd10      	pop	{r4, pc}
 80225b4:	3001      	adds	r0, #1
 80225b6:	e7f2      	b.n	802259e <memcmp+0x6>

080225b8 <memmove>:
 80225b8:	4288      	cmp	r0, r1
 80225ba:	b510      	push	{r4, lr}
 80225bc:	eb01 0402 	add.w	r4, r1, r2
 80225c0:	d902      	bls.n	80225c8 <memmove+0x10>
 80225c2:	4284      	cmp	r4, r0
 80225c4:	4623      	mov	r3, r4
 80225c6:	d807      	bhi.n	80225d8 <memmove+0x20>
 80225c8:	1e43      	subs	r3, r0, #1
 80225ca:	42a1      	cmp	r1, r4
 80225cc:	d008      	beq.n	80225e0 <memmove+0x28>
 80225ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80225d6:	e7f8      	b.n	80225ca <memmove+0x12>
 80225d8:	4601      	mov	r1, r0
 80225da:	4402      	add	r2, r0
 80225dc:	428a      	cmp	r2, r1
 80225de:	d100      	bne.n	80225e2 <memmove+0x2a>
 80225e0:	bd10      	pop	{r4, pc}
 80225e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80225e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80225ea:	e7f7      	b.n	80225dc <memmove+0x24>

080225ec <memset>:
 80225ec:	4603      	mov	r3, r0
 80225ee:	4402      	add	r2, r0
 80225f0:	4293      	cmp	r3, r2
 80225f2:	d100      	bne.n	80225f6 <memset+0xa>
 80225f4:	4770      	bx	lr
 80225f6:	f803 1b01 	strb.w	r1, [r3], #1
 80225fa:	e7f9      	b.n	80225f0 <memset+0x4>

080225fc <strchr>:
 80225fc:	4603      	mov	r3, r0
 80225fe:	b2c9      	uxtb	r1, r1
 8022600:	4618      	mov	r0, r3
 8022602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022606:	b112      	cbz	r2, 802260e <strchr+0x12>
 8022608:	428a      	cmp	r2, r1
 802260a:	d1f9      	bne.n	8022600 <strchr+0x4>
 802260c:	4770      	bx	lr
 802260e:	2900      	cmp	r1, #0
 8022610:	bf18      	it	ne
 8022612:	2000      	movne	r0, #0
 8022614:	4770      	bx	lr
	...

08022618 <strncasecmp>:
 8022618:	b570      	push	{r4, r5, r6, lr}
 802261a:	4605      	mov	r5, r0
 802261c:	4e0d      	ldr	r6, [pc, #52]	@ (8022654 <strncasecmp+0x3c>)
 802261e:	440a      	add	r2, r1
 8022620:	428a      	cmp	r2, r1
 8022622:	d101      	bne.n	8022628 <strncasecmp+0x10>
 8022624:	2000      	movs	r0, #0
 8022626:	e013      	b.n	8022650 <strncasecmp+0x38>
 8022628:	f815 3b01 	ldrb.w	r3, [r5], #1
 802262c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022630:	5cf0      	ldrb	r0, [r6, r3]
 8022632:	f000 0003 	and.w	r0, r0, #3
 8022636:	2801      	cmp	r0, #1
 8022638:	5d30      	ldrb	r0, [r6, r4]
 802263a:	bf08      	it	eq
 802263c:	3320      	addeq	r3, #32
 802263e:	f000 0003 	and.w	r0, r0, #3
 8022642:	2801      	cmp	r0, #1
 8022644:	bf08      	it	eq
 8022646:	3420      	addeq	r4, #32
 8022648:	1b18      	subs	r0, r3, r4
 802264a:	d101      	bne.n	8022650 <strncasecmp+0x38>
 802264c:	2c00      	cmp	r4, #0
 802264e:	d1e7      	bne.n	8022620 <strncasecmp+0x8>
 8022650:	bd70      	pop	{r4, r5, r6, pc}
 8022652:	bf00      	nop
 8022654:	08031855 	.word	0x08031855

08022658 <strncmp>:
 8022658:	b510      	push	{r4, lr}
 802265a:	b16a      	cbz	r2, 8022678 <strncmp+0x20>
 802265c:	3901      	subs	r1, #1
 802265e:	1884      	adds	r4, r0, r2
 8022660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022664:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022668:	429a      	cmp	r2, r3
 802266a:	d103      	bne.n	8022674 <strncmp+0x1c>
 802266c:	42a0      	cmp	r0, r4
 802266e:	d001      	beq.n	8022674 <strncmp+0x1c>
 8022670:	2a00      	cmp	r2, #0
 8022672:	d1f5      	bne.n	8022660 <strncmp+0x8>
 8022674:	1ad0      	subs	r0, r2, r3
 8022676:	bd10      	pop	{r4, pc}
 8022678:	4610      	mov	r0, r2
 802267a:	e7fc      	b.n	8022676 <strncmp+0x1e>

0802267c <strncpy>:
 802267c:	4603      	mov	r3, r0
 802267e:	b510      	push	{r4, lr}
 8022680:	3901      	subs	r1, #1
 8022682:	b132      	cbz	r2, 8022692 <strncpy+0x16>
 8022684:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022688:	3a01      	subs	r2, #1
 802268a:	f803 4b01 	strb.w	r4, [r3], #1
 802268e:	2c00      	cmp	r4, #0
 8022690:	d1f7      	bne.n	8022682 <strncpy+0x6>
 8022692:	2100      	movs	r1, #0
 8022694:	441a      	add	r2, r3
 8022696:	4293      	cmp	r3, r2
 8022698:	d100      	bne.n	802269c <strncpy+0x20>
 802269a:	bd10      	pop	{r4, pc}
 802269c:	f803 1b01 	strb.w	r1, [r3], #1
 80226a0:	e7f9      	b.n	8022696 <strncpy+0x1a>

080226a2 <strstr>:
 80226a2:	780a      	ldrb	r2, [r1, #0]
 80226a4:	b570      	push	{r4, r5, r6, lr}
 80226a6:	b96a      	cbnz	r2, 80226c4 <strstr+0x22>
 80226a8:	bd70      	pop	{r4, r5, r6, pc}
 80226aa:	429a      	cmp	r2, r3
 80226ac:	d109      	bne.n	80226c2 <strstr+0x20>
 80226ae:	460c      	mov	r4, r1
 80226b0:	4605      	mov	r5, r0
 80226b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	d0f6      	beq.n	80226a8 <strstr+0x6>
 80226ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80226be:	429e      	cmp	r6, r3
 80226c0:	d0f7      	beq.n	80226b2 <strstr+0x10>
 80226c2:	3001      	adds	r0, #1
 80226c4:	7803      	ldrb	r3, [r0, #0]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d1ef      	bne.n	80226aa <strstr+0x8>
 80226ca:	4618      	mov	r0, r3
 80226cc:	e7ec      	b.n	80226a8 <strstr+0x6>
	...

080226d0 <strcasestr>:
 80226d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80226d4:	780b      	ldrb	r3, [r1, #0]
 80226d6:	4606      	mov	r6, r0
 80226d8:	b1fb      	cbz	r3, 802271a <strcasestr+0x4a>
 80226da:	4f13      	ldr	r7, [pc, #76]	@ (8022728 <strcasestr+0x58>)
 80226dc:	1c4d      	adds	r5, r1, #1
 80226de:	5cfa      	ldrb	r2, [r7, r3]
 80226e0:	4628      	mov	r0, r5
 80226e2:	f002 0203 	and.w	r2, r2, #3
 80226e6:	2a01      	cmp	r2, #1
 80226e8:	bf08      	it	eq
 80226ea:	3320      	addeq	r3, #32
 80226ec:	b2dc      	uxtb	r4, r3
 80226ee:	f7dd fd75 	bl	80001dc <strlen>
 80226f2:	4681      	mov	r9, r0
 80226f4:	46b0      	mov	r8, r6
 80226f6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80226fa:	b19b      	cbz	r3, 8022724 <strcasestr+0x54>
 80226fc:	5cfa      	ldrb	r2, [r7, r3]
 80226fe:	f002 0203 	and.w	r2, r2, #3
 8022702:	2a01      	cmp	r2, #1
 8022704:	bf08      	it	eq
 8022706:	3320      	addeq	r3, #32
 8022708:	b2db      	uxtb	r3, r3
 802270a:	42a3      	cmp	r3, r4
 802270c:	d108      	bne.n	8022720 <strcasestr+0x50>
 802270e:	464a      	mov	r2, r9
 8022710:	4629      	mov	r1, r5
 8022712:	4640      	mov	r0, r8
 8022714:	f7ff ff80 	bl	8022618 <strncasecmp>
 8022718:	b910      	cbnz	r0, 8022720 <strcasestr+0x50>
 802271a:	4630      	mov	r0, r6
 802271c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022720:	4646      	mov	r6, r8
 8022722:	e7e7      	b.n	80226f4 <strcasestr+0x24>
 8022724:	461e      	mov	r6, r3
 8022726:	e7f8      	b.n	802271a <strcasestr+0x4a>
 8022728:	08031855 	.word	0x08031855

0802272c <_localeconv_r>:
 802272c:	4800      	ldr	r0, [pc, #0]	@ (8022730 <_localeconv_r+0x4>)
 802272e:	4770      	bx	lr
 8022730:	20000274 	.word	0x20000274

08022734 <_close_r>:
 8022734:	b538      	push	{r3, r4, r5, lr}
 8022736:	2300      	movs	r3, #0
 8022738:	4d05      	ldr	r5, [pc, #20]	@ (8022750 <_close_r+0x1c>)
 802273a:	4604      	mov	r4, r0
 802273c:	4608      	mov	r0, r1
 802273e:	602b      	str	r3, [r5, #0]
 8022740:	f7e1 f9b2 	bl	8003aa8 <_close>
 8022744:	1c43      	adds	r3, r0, #1
 8022746:	d102      	bne.n	802274e <_close_r+0x1a>
 8022748:	682b      	ldr	r3, [r5, #0]
 802274a:	b103      	cbz	r3, 802274e <_close_r+0x1a>
 802274c:	6023      	str	r3, [r4, #0]
 802274e:	bd38      	pop	{r3, r4, r5, pc}
 8022750:	2000c058 	.word	0x2000c058

08022754 <_lseek_r>:
 8022754:	b538      	push	{r3, r4, r5, lr}
 8022756:	4604      	mov	r4, r0
 8022758:	4608      	mov	r0, r1
 802275a:	4611      	mov	r1, r2
 802275c:	2200      	movs	r2, #0
 802275e:	4d05      	ldr	r5, [pc, #20]	@ (8022774 <_lseek_r+0x20>)
 8022760:	602a      	str	r2, [r5, #0]
 8022762:	461a      	mov	r2, r3
 8022764:	f7e1 f9c4 	bl	8003af0 <_lseek>
 8022768:	1c43      	adds	r3, r0, #1
 802276a:	d102      	bne.n	8022772 <_lseek_r+0x1e>
 802276c:	682b      	ldr	r3, [r5, #0]
 802276e:	b103      	cbz	r3, 8022772 <_lseek_r+0x1e>
 8022770:	6023      	str	r3, [r4, #0]
 8022772:	bd38      	pop	{r3, r4, r5, pc}
 8022774:	2000c058 	.word	0x2000c058

08022778 <_read_r>:
 8022778:	b538      	push	{r3, r4, r5, lr}
 802277a:	4604      	mov	r4, r0
 802277c:	4608      	mov	r0, r1
 802277e:	4611      	mov	r1, r2
 8022780:	2200      	movs	r2, #0
 8022782:	4d05      	ldr	r5, [pc, #20]	@ (8022798 <_read_r+0x20>)
 8022784:	602a      	str	r2, [r5, #0]
 8022786:	461a      	mov	r2, r3
 8022788:	f7e1 f955 	bl	8003a36 <_read>
 802278c:	1c43      	adds	r3, r0, #1
 802278e:	d102      	bne.n	8022796 <_read_r+0x1e>
 8022790:	682b      	ldr	r3, [r5, #0]
 8022792:	b103      	cbz	r3, 8022796 <_read_r+0x1e>
 8022794:	6023      	str	r3, [r4, #0]
 8022796:	bd38      	pop	{r3, r4, r5, pc}
 8022798:	2000c058 	.word	0x2000c058

0802279c <_write_r>:
 802279c:	b538      	push	{r3, r4, r5, lr}
 802279e:	4604      	mov	r4, r0
 80227a0:	4608      	mov	r0, r1
 80227a2:	4611      	mov	r1, r2
 80227a4:	2200      	movs	r2, #0
 80227a6:	4d05      	ldr	r5, [pc, #20]	@ (80227bc <_write_r+0x20>)
 80227a8:	602a      	str	r2, [r5, #0]
 80227aa:	461a      	mov	r2, r3
 80227ac:	f7e1 f960 	bl	8003a70 <_write>
 80227b0:	1c43      	adds	r3, r0, #1
 80227b2:	d102      	bne.n	80227ba <_write_r+0x1e>
 80227b4:	682b      	ldr	r3, [r5, #0]
 80227b6:	b103      	cbz	r3, 80227ba <_write_r+0x1e>
 80227b8:	6023      	str	r3, [r4, #0]
 80227ba:	bd38      	pop	{r3, r4, r5, pc}
 80227bc:	2000c058 	.word	0x2000c058

080227c0 <__errno>:
 80227c0:	4b01      	ldr	r3, [pc, #4]	@ (80227c8 <__errno+0x8>)
 80227c2:	6818      	ldr	r0, [r3, #0]
 80227c4:	4770      	bx	lr
 80227c6:	bf00      	nop
 80227c8:	20000134 	.word	0x20000134

080227cc <__libc_init_array>:
 80227cc:	b570      	push	{r4, r5, r6, lr}
 80227ce:	2600      	movs	r6, #0
 80227d0:	4d0c      	ldr	r5, [pc, #48]	@ (8022804 <__libc_init_array+0x38>)
 80227d2:	4c0d      	ldr	r4, [pc, #52]	@ (8022808 <__libc_init_array+0x3c>)
 80227d4:	1b64      	subs	r4, r4, r5
 80227d6:	10a4      	asrs	r4, r4, #2
 80227d8:	42a6      	cmp	r6, r4
 80227da:	d109      	bne.n	80227f0 <__libc_init_array+0x24>
 80227dc:	f002 fc4c 	bl	8025078 <_init>
 80227e0:	2600      	movs	r6, #0
 80227e2:	4d0a      	ldr	r5, [pc, #40]	@ (802280c <__libc_init_array+0x40>)
 80227e4:	4c0a      	ldr	r4, [pc, #40]	@ (8022810 <__libc_init_array+0x44>)
 80227e6:	1b64      	subs	r4, r4, r5
 80227e8:	10a4      	asrs	r4, r4, #2
 80227ea:	42a6      	cmp	r6, r4
 80227ec:	d105      	bne.n	80227fa <__libc_init_array+0x2e>
 80227ee:	bd70      	pop	{r4, r5, r6, pc}
 80227f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80227f4:	4798      	blx	r3
 80227f6:	3601      	adds	r6, #1
 80227f8:	e7ee      	b.n	80227d8 <__libc_init_array+0xc>
 80227fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80227fe:	4798      	blx	r3
 8022800:	3601      	adds	r6, #1
 8022802:	e7f2      	b.n	80227ea <__libc_init_array+0x1e>
 8022804:	08031a68 	.word	0x08031a68
 8022808:	08031a68 	.word	0x08031a68
 802280c:	08031a68 	.word	0x08031a68
 8022810:	08031a6c 	.word	0x08031a6c

08022814 <__retarget_lock_init_recursive>:
 8022814:	4770      	bx	lr

08022816 <__retarget_lock_acquire_recursive>:
 8022816:	4770      	bx	lr

08022818 <__retarget_lock_release_recursive>:
 8022818:	4770      	bx	lr

0802281a <memchr>:
 802281a:	4603      	mov	r3, r0
 802281c:	b510      	push	{r4, lr}
 802281e:	b2c9      	uxtb	r1, r1
 8022820:	4402      	add	r2, r0
 8022822:	4293      	cmp	r3, r2
 8022824:	4618      	mov	r0, r3
 8022826:	d101      	bne.n	802282c <memchr+0x12>
 8022828:	2000      	movs	r0, #0
 802282a:	e003      	b.n	8022834 <memchr+0x1a>
 802282c:	7804      	ldrb	r4, [r0, #0]
 802282e:	3301      	adds	r3, #1
 8022830:	428c      	cmp	r4, r1
 8022832:	d1f6      	bne.n	8022822 <memchr+0x8>
 8022834:	bd10      	pop	{r4, pc}

08022836 <memcpy>:
 8022836:	440a      	add	r2, r1
 8022838:	4291      	cmp	r1, r2
 802283a:	f100 33ff 	add.w	r3, r0, #4294967295
 802283e:	d100      	bne.n	8022842 <memcpy+0xc>
 8022840:	4770      	bx	lr
 8022842:	b510      	push	{r4, lr}
 8022844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022848:	4291      	cmp	r1, r2
 802284a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802284e:	d1f9      	bne.n	8022844 <memcpy+0xe>
 8022850:	bd10      	pop	{r4, pc}
	...

08022854 <__assert_func>:
 8022854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022856:	4614      	mov	r4, r2
 8022858:	461a      	mov	r2, r3
 802285a:	4b09      	ldr	r3, [pc, #36]	@ (8022880 <__assert_func+0x2c>)
 802285c:	4605      	mov	r5, r0
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	68d8      	ldr	r0, [r3, #12]
 8022862:	b14c      	cbz	r4, 8022878 <__assert_func+0x24>
 8022864:	4b07      	ldr	r3, [pc, #28]	@ (8022884 <__assert_func+0x30>)
 8022866:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802286a:	9100      	str	r1, [sp, #0]
 802286c:	462b      	mov	r3, r5
 802286e:	4906      	ldr	r1, [pc, #24]	@ (8022888 <__assert_func+0x34>)
 8022870:	f002 f93c 	bl	8024aec <fiprintf>
 8022874:	f002 fa50 	bl	8024d18 <abort>
 8022878:	4b04      	ldr	r3, [pc, #16]	@ (802288c <__assert_func+0x38>)
 802287a:	461c      	mov	r4, r3
 802287c:	e7f3      	b.n	8022866 <__assert_func+0x12>
 802287e:	bf00      	nop
 8022880:	20000134 	.word	0x20000134
 8022884:	08031713 	.word	0x08031713
 8022888:	08031720 	.word	0x08031720
 802288c:	0803174e 	.word	0x0803174e

08022890 <quorem>:
 8022890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022894:	6903      	ldr	r3, [r0, #16]
 8022896:	690c      	ldr	r4, [r1, #16]
 8022898:	4607      	mov	r7, r0
 802289a:	42a3      	cmp	r3, r4
 802289c:	db7e      	blt.n	802299c <quorem+0x10c>
 802289e:	3c01      	subs	r4, #1
 80228a0:	00a3      	lsls	r3, r4, #2
 80228a2:	f100 0514 	add.w	r5, r0, #20
 80228a6:	f101 0814 	add.w	r8, r1, #20
 80228aa:	9300      	str	r3, [sp, #0]
 80228ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80228b0:	9301      	str	r3, [sp, #4]
 80228b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80228b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80228ba:	3301      	adds	r3, #1
 80228bc:	429a      	cmp	r2, r3
 80228be:	fbb2 f6f3 	udiv	r6, r2, r3
 80228c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80228c6:	d32e      	bcc.n	8022926 <quorem+0x96>
 80228c8:	f04f 0a00 	mov.w	sl, #0
 80228cc:	46c4      	mov	ip, r8
 80228ce:	46ae      	mov	lr, r5
 80228d0:	46d3      	mov	fp, sl
 80228d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80228d6:	b298      	uxth	r0, r3
 80228d8:	fb06 a000 	mla	r0, r6, r0, sl
 80228dc:	0c1b      	lsrs	r3, r3, #16
 80228de:	0c02      	lsrs	r2, r0, #16
 80228e0:	fb06 2303 	mla	r3, r6, r3, r2
 80228e4:	f8de 2000 	ldr.w	r2, [lr]
 80228e8:	b280      	uxth	r0, r0
 80228ea:	b292      	uxth	r2, r2
 80228ec:	1a12      	subs	r2, r2, r0
 80228ee:	445a      	add	r2, fp
 80228f0:	f8de 0000 	ldr.w	r0, [lr]
 80228f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80228f8:	b29b      	uxth	r3, r3
 80228fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80228fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8022902:	b292      	uxth	r2, r2
 8022904:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8022908:	45e1      	cmp	r9, ip
 802290a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802290e:	f84e 2b04 	str.w	r2, [lr], #4
 8022912:	d2de      	bcs.n	80228d2 <quorem+0x42>
 8022914:	9b00      	ldr	r3, [sp, #0]
 8022916:	58eb      	ldr	r3, [r5, r3]
 8022918:	b92b      	cbnz	r3, 8022926 <quorem+0x96>
 802291a:	9b01      	ldr	r3, [sp, #4]
 802291c:	3b04      	subs	r3, #4
 802291e:	429d      	cmp	r5, r3
 8022920:	461a      	mov	r2, r3
 8022922:	d32f      	bcc.n	8022984 <quorem+0xf4>
 8022924:	613c      	str	r4, [r7, #16]
 8022926:	4638      	mov	r0, r7
 8022928:	f001 f97e 	bl	8023c28 <__mcmp>
 802292c:	2800      	cmp	r0, #0
 802292e:	db25      	blt.n	802297c <quorem+0xec>
 8022930:	4629      	mov	r1, r5
 8022932:	2000      	movs	r0, #0
 8022934:	f858 2b04 	ldr.w	r2, [r8], #4
 8022938:	f8d1 c000 	ldr.w	ip, [r1]
 802293c:	fa1f fe82 	uxth.w	lr, r2
 8022940:	fa1f f38c 	uxth.w	r3, ip
 8022944:	eba3 030e 	sub.w	r3, r3, lr
 8022948:	4403      	add	r3, r0
 802294a:	0c12      	lsrs	r2, r2, #16
 802294c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022950:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8022954:	b29b      	uxth	r3, r3
 8022956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802295a:	45c1      	cmp	r9, r8
 802295c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8022960:	f841 3b04 	str.w	r3, [r1], #4
 8022964:	d2e6      	bcs.n	8022934 <quorem+0xa4>
 8022966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802296a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802296e:	b922      	cbnz	r2, 802297a <quorem+0xea>
 8022970:	3b04      	subs	r3, #4
 8022972:	429d      	cmp	r5, r3
 8022974:	461a      	mov	r2, r3
 8022976:	d30b      	bcc.n	8022990 <quorem+0x100>
 8022978:	613c      	str	r4, [r7, #16]
 802297a:	3601      	adds	r6, #1
 802297c:	4630      	mov	r0, r6
 802297e:	b003      	add	sp, #12
 8022980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022984:	6812      	ldr	r2, [r2, #0]
 8022986:	3b04      	subs	r3, #4
 8022988:	2a00      	cmp	r2, #0
 802298a:	d1cb      	bne.n	8022924 <quorem+0x94>
 802298c:	3c01      	subs	r4, #1
 802298e:	e7c6      	b.n	802291e <quorem+0x8e>
 8022990:	6812      	ldr	r2, [r2, #0]
 8022992:	3b04      	subs	r3, #4
 8022994:	2a00      	cmp	r2, #0
 8022996:	d1ef      	bne.n	8022978 <quorem+0xe8>
 8022998:	3c01      	subs	r4, #1
 802299a:	e7ea      	b.n	8022972 <quorem+0xe2>
 802299c:	2000      	movs	r0, #0
 802299e:	e7ee      	b.n	802297e <quorem+0xee>

080229a0 <_dtoa_r>:
 80229a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229a4:	4614      	mov	r4, r2
 80229a6:	461d      	mov	r5, r3
 80229a8:	69c7      	ldr	r7, [r0, #28]
 80229aa:	b097      	sub	sp, #92	@ 0x5c
 80229ac:	4681      	mov	r9, r0
 80229ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80229b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80229b4:	b97f      	cbnz	r7, 80229d6 <_dtoa_r+0x36>
 80229b6:	2010      	movs	r0, #16
 80229b8:	f000 fe0e 	bl	80235d8 <malloc>
 80229bc:	4602      	mov	r2, r0
 80229be:	f8c9 001c 	str.w	r0, [r9, #28]
 80229c2:	b920      	cbnz	r0, 80229ce <_dtoa_r+0x2e>
 80229c4:	21ef      	movs	r1, #239	@ 0xef
 80229c6:	4bac      	ldr	r3, [pc, #688]	@ (8022c78 <_dtoa_r+0x2d8>)
 80229c8:	48ac      	ldr	r0, [pc, #688]	@ (8022c7c <_dtoa_r+0x2dc>)
 80229ca:	f7ff ff43 	bl	8022854 <__assert_func>
 80229ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80229d2:	6007      	str	r7, [r0, #0]
 80229d4:	60c7      	str	r7, [r0, #12]
 80229d6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80229da:	6819      	ldr	r1, [r3, #0]
 80229dc:	b159      	cbz	r1, 80229f6 <_dtoa_r+0x56>
 80229de:	685a      	ldr	r2, [r3, #4]
 80229e0:	2301      	movs	r3, #1
 80229e2:	4093      	lsls	r3, r2
 80229e4:	604a      	str	r2, [r1, #4]
 80229e6:	608b      	str	r3, [r1, #8]
 80229e8:	4648      	mov	r0, r9
 80229ea:	f000 feeb 	bl	80237c4 <_Bfree>
 80229ee:	2200      	movs	r2, #0
 80229f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80229f4:	601a      	str	r2, [r3, #0]
 80229f6:	1e2b      	subs	r3, r5, #0
 80229f8:	bfaf      	iteee	ge
 80229fa:	2300      	movge	r3, #0
 80229fc:	2201      	movlt	r2, #1
 80229fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8022a02:	9307      	strlt	r3, [sp, #28]
 8022a04:	bfa8      	it	ge
 8022a06:	6033      	strge	r3, [r6, #0]
 8022a08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8022c80 <_dtoa_r+0x2e0>)
 8022a0e:	bfb8      	it	lt
 8022a10:	6032      	strlt	r2, [r6, #0]
 8022a12:	ea33 0308 	bics.w	r3, r3, r8
 8022a16:	d112      	bne.n	8022a3e <_dtoa_r+0x9e>
 8022a18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022a1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022a1e:	6013      	str	r3, [r2, #0]
 8022a20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8022a24:	4323      	orrs	r3, r4
 8022a26:	f000 855e 	beq.w	80234e6 <_dtoa_r+0xb46>
 8022a2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8022c84 <_dtoa_r+0x2e4>
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	f000 8560 	beq.w	80234f6 <_dtoa_r+0xb56>
 8022a36:	f10a 0303 	add.w	r3, sl, #3
 8022a3a:	f000 bd5a 	b.w	80234f2 <_dtoa_r+0xb52>
 8022a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022a42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8022a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022a4a:	2200      	movs	r2, #0
 8022a4c:	2300      	movs	r3, #0
 8022a4e:	f7dd fff1 	bl	8000a34 <__aeabi_dcmpeq>
 8022a52:	4607      	mov	r7, r0
 8022a54:	b158      	cbz	r0, 8022a6e <_dtoa_r+0xce>
 8022a56:	2301      	movs	r3, #1
 8022a58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022a5a:	6013      	str	r3, [r2, #0]
 8022a5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a5e:	b113      	cbz	r3, 8022a66 <_dtoa_r+0xc6>
 8022a60:	4b89      	ldr	r3, [pc, #548]	@ (8022c88 <_dtoa_r+0x2e8>)
 8022a62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022a64:	6013      	str	r3, [r2, #0]
 8022a66:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8022c8c <_dtoa_r+0x2ec>
 8022a6a:	f000 bd44 	b.w	80234f6 <_dtoa_r+0xb56>
 8022a6e:	ab14      	add	r3, sp, #80	@ 0x50
 8022a70:	9301      	str	r3, [sp, #4]
 8022a72:	ab15      	add	r3, sp, #84	@ 0x54
 8022a74:	9300      	str	r3, [sp, #0]
 8022a76:	4648      	mov	r0, r9
 8022a78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8022a7c:	f001 f984 	bl	8023d88 <__d2b>
 8022a80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8022a84:	9003      	str	r0, [sp, #12]
 8022a86:	2e00      	cmp	r6, #0
 8022a88:	d078      	beq.n	8022b7c <_dtoa_r+0x1dc>
 8022a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022a90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8022a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022a98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8022a9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8022aa0:	9712      	str	r7, [sp, #72]	@ 0x48
 8022aa2:	4619      	mov	r1, r3
 8022aa4:	2200      	movs	r2, #0
 8022aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8022c90 <_dtoa_r+0x2f0>)
 8022aa8:	f7dd fba4 	bl	80001f4 <__aeabi_dsub>
 8022aac:	a36c      	add	r3, pc, #432	@ (adr r3, 8022c60 <_dtoa_r+0x2c0>)
 8022aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ab2:	f7dd fd57 	bl	8000564 <__aeabi_dmul>
 8022ab6:	a36c      	add	r3, pc, #432	@ (adr r3, 8022c68 <_dtoa_r+0x2c8>)
 8022ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022abc:	f7dd fb9c 	bl	80001f8 <__adddf3>
 8022ac0:	4604      	mov	r4, r0
 8022ac2:	4630      	mov	r0, r6
 8022ac4:	460d      	mov	r5, r1
 8022ac6:	f7dd fce3 	bl	8000490 <__aeabi_i2d>
 8022aca:	a369      	add	r3, pc, #420	@ (adr r3, 8022c70 <_dtoa_r+0x2d0>)
 8022acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ad0:	f7dd fd48 	bl	8000564 <__aeabi_dmul>
 8022ad4:	4602      	mov	r2, r0
 8022ad6:	460b      	mov	r3, r1
 8022ad8:	4620      	mov	r0, r4
 8022ada:	4629      	mov	r1, r5
 8022adc:	f7dd fb8c 	bl	80001f8 <__adddf3>
 8022ae0:	4604      	mov	r4, r0
 8022ae2:	460d      	mov	r5, r1
 8022ae4:	f7dd ffee 	bl	8000ac4 <__aeabi_d2iz>
 8022ae8:	2200      	movs	r2, #0
 8022aea:	4607      	mov	r7, r0
 8022aec:	2300      	movs	r3, #0
 8022aee:	4620      	mov	r0, r4
 8022af0:	4629      	mov	r1, r5
 8022af2:	f7dd ffa9 	bl	8000a48 <__aeabi_dcmplt>
 8022af6:	b140      	cbz	r0, 8022b0a <_dtoa_r+0x16a>
 8022af8:	4638      	mov	r0, r7
 8022afa:	f7dd fcc9 	bl	8000490 <__aeabi_i2d>
 8022afe:	4622      	mov	r2, r4
 8022b00:	462b      	mov	r3, r5
 8022b02:	f7dd ff97 	bl	8000a34 <__aeabi_dcmpeq>
 8022b06:	b900      	cbnz	r0, 8022b0a <_dtoa_r+0x16a>
 8022b08:	3f01      	subs	r7, #1
 8022b0a:	2f16      	cmp	r7, #22
 8022b0c:	d854      	bhi.n	8022bb8 <_dtoa_r+0x218>
 8022b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022b12:	4b60      	ldr	r3, [pc, #384]	@ (8022c94 <_dtoa_r+0x2f4>)
 8022b14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b1c:	f7dd ff94 	bl	8000a48 <__aeabi_dcmplt>
 8022b20:	2800      	cmp	r0, #0
 8022b22:	d04b      	beq.n	8022bbc <_dtoa_r+0x21c>
 8022b24:	2300      	movs	r3, #0
 8022b26:	3f01      	subs	r7, #1
 8022b28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022b2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022b2c:	1b9b      	subs	r3, r3, r6
 8022b2e:	1e5a      	subs	r2, r3, #1
 8022b30:	bf49      	itett	mi
 8022b32:	f1c3 0301 	rsbmi	r3, r3, #1
 8022b36:	2300      	movpl	r3, #0
 8022b38:	9304      	strmi	r3, [sp, #16]
 8022b3a:	2300      	movmi	r3, #0
 8022b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8022b3e:	bf54      	ite	pl
 8022b40:	9304      	strpl	r3, [sp, #16]
 8022b42:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8022b44:	2f00      	cmp	r7, #0
 8022b46:	db3b      	blt.n	8022bc0 <_dtoa_r+0x220>
 8022b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b4a:	970e      	str	r7, [sp, #56]	@ 0x38
 8022b4c:	443b      	add	r3, r7
 8022b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b50:	2300      	movs	r3, #0
 8022b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022b56:	2b09      	cmp	r3, #9
 8022b58:	d865      	bhi.n	8022c26 <_dtoa_r+0x286>
 8022b5a:	2b05      	cmp	r3, #5
 8022b5c:	bfc4      	itt	gt
 8022b5e:	3b04      	subgt	r3, #4
 8022b60:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8022b62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022b64:	bfc8      	it	gt
 8022b66:	2400      	movgt	r4, #0
 8022b68:	f1a3 0302 	sub.w	r3, r3, #2
 8022b6c:	bfd8      	it	le
 8022b6e:	2401      	movle	r4, #1
 8022b70:	2b03      	cmp	r3, #3
 8022b72:	d864      	bhi.n	8022c3e <_dtoa_r+0x29e>
 8022b74:	e8df f003 	tbb	[pc, r3]
 8022b78:	2c385553 	.word	0x2c385553
 8022b7c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8022b80:	441e      	add	r6, r3
 8022b82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8022b86:	2b20      	cmp	r3, #32
 8022b88:	bfc1      	itttt	gt
 8022b8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8022b8e:	fa08 f803 	lslgt.w	r8, r8, r3
 8022b92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8022b96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8022b9a:	bfd6      	itet	le
 8022b9c:	f1c3 0320 	rsble	r3, r3, #32
 8022ba0:	ea48 0003 	orrgt.w	r0, r8, r3
 8022ba4:	fa04 f003 	lslle.w	r0, r4, r3
 8022ba8:	f7dd fc62 	bl	8000470 <__aeabi_ui2d>
 8022bac:	2201      	movs	r2, #1
 8022bae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8022bb2:	3e01      	subs	r6, #1
 8022bb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8022bb6:	e774      	b.n	8022aa2 <_dtoa_r+0x102>
 8022bb8:	2301      	movs	r3, #1
 8022bba:	e7b5      	b.n	8022b28 <_dtoa_r+0x188>
 8022bbc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022bbe:	e7b4      	b.n	8022b2a <_dtoa_r+0x18a>
 8022bc0:	9b04      	ldr	r3, [sp, #16]
 8022bc2:	1bdb      	subs	r3, r3, r7
 8022bc4:	9304      	str	r3, [sp, #16]
 8022bc6:	427b      	negs	r3, r7
 8022bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8022bca:	2300      	movs	r3, #0
 8022bcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8022bce:	e7c1      	b.n	8022b54 <_dtoa_r+0x1b4>
 8022bd0:	2301      	movs	r3, #1
 8022bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022bd6:	eb07 0b03 	add.w	fp, r7, r3
 8022bda:	f10b 0301 	add.w	r3, fp, #1
 8022bde:	2b01      	cmp	r3, #1
 8022be0:	9308      	str	r3, [sp, #32]
 8022be2:	bfb8      	it	lt
 8022be4:	2301      	movlt	r3, #1
 8022be6:	e006      	b.n	8022bf6 <_dtoa_r+0x256>
 8022be8:	2301      	movs	r3, #1
 8022bea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	dd28      	ble.n	8022c44 <_dtoa_r+0x2a4>
 8022bf2:	469b      	mov	fp, r3
 8022bf4:	9308      	str	r3, [sp, #32]
 8022bf6:	2100      	movs	r1, #0
 8022bf8:	2204      	movs	r2, #4
 8022bfa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8022bfe:	f102 0514 	add.w	r5, r2, #20
 8022c02:	429d      	cmp	r5, r3
 8022c04:	d926      	bls.n	8022c54 <_dtoa_r+0x2b4>
 8022c06:	6041      	str	r1, [r0, #4]
 8022c08:	4648      	mov	r0, r9
 8022c0a:	f000 fd9b 	bl	8023744 <_Balloc>
 8022c0e:	4682      	mov	sl, r0
 8022c10:	2800      	cmp	r0, #0
 8022c12:	d143      	bne.n	8022c9c <_dtoa_r+0x2fc>
 8022c14:	4602      	mov	r2, r0
 8022c16:	f240 11af 	movw	r1, #431	@ 0x1af
 8022c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8022c98 <_dtoa_r+0x2f8>)
 8022c1c:	e6d4      	b.n	80229c8 <_dtoa_r+0x28>
 8022c1e:	2300      	movs	r3, #0
 8022c20:	e7e3      	b.n	8022bea <_dtoa_r+0x24a>
 8022c22:	2300      	movs	r3, #0
 8022c24:	e7d5      	b.n	8022bd2 <_dtoa_r+0x232>
 8022c26:	2401      	movs	r4, #1
 8022c28:	2300      	movs	r3, #0
 8022c2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022c2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c2e:	f04f 3bff 	mov.w	fp, #4294967295
 8022c32:	2200      	movs	r2, #0
 8022c34:	2312      	movs	r3, #18
 8022c36:	f8cd b020 	str.w	fp, [sp, #32]
 8022c3a:	9221      	str	r2, [sp, #132]	@ 0x84
 8022c3c:	e7db      	b.n	8022bf6 <_dtoa_r+0x256>
 8022c3e:	2301      	movs	r3, #1
 8022c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022c42:	e7f4      	b.n	8022c2e <_dtoa_r+0x28e>
 8022c44:	f04f 0b01 	mov.w	fp, #1
 8022c48:	465b      	mov	r3, fp
 8022c4a:	f8cd b020 	str.w	fp, [sp, #32]
 8022c4e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8022c52:	e7d0      	b.n	8022bf6 <_dtoa_r+0x256>
 8022c54:	3101      	adds	r1, #1
 8022c56:	0052      	lsls	r2, r2, #1
 8022c58:	e7d1      	b.n	8022bfe <_dtoa_r+0x25e>
 8022c5a:	bf00      	nop
 8022c5c:	f3af 8000 	nop.w
 8022c60:	636f4361 	.word	0x636f4361
 8022c64:	3fd287a7 	.word	0x3fd287a7
 8022c68:	8b60c8b3 	.word	0x8b60c8b3
 8022c6c:	3fc68a28 	.word	0x3fc68a28
 8022c70:	509f79fb 	.word	0x509f79fb
 8022c74:	3fd34413 	.word	0x3fd34413
 8022c78:	08031672 	.word	0x08031672
 8022c7c:	0803175c 	.word	0x0803175c
 8022c80:	7ff00000 	.word	0x7ff00000
 8022c84:	08031758 	.word	0x08031758
 8022c88:	08031846 	.word	0x08031846
 8022c8c:	08031845 	.word	0x08031845
 8022c90:	3ff80000 	.word	0x3ff80000
 8022c94:	08031990 	.word	0x08031990
 8022c98:	080317b4 	.word	0x080317b4
 8022c9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022ca0:	6018      	str	r0, [r3, #0]
 8022ca2:	9b08      	ldr	r3, [sp, #32]
 8022ca4:	2b0e      	cmp	r3, #14
 8022ca6:	f200 80a1 	bhi.w	8022dec <_dtoa_r+0x44c>
 8022caa:	2c00      	cmp	r4, #0
 8022cac:	f000 809e 	beq.w	8022dec <_dtoa_r+0x44c>
 8022cb0:	2f00      	cmp	r7, #0
 8022cb2:	dd33      	ble.n	8022d1c <_dtoa_r+0x37c>
 8022cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8022f28 <_dtoa_r+0x588>)
 8022cb6:	f007 020f 	and.w	r2, r7, #15
 8022cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022cbe:	05f8      	lsls	r0, r7, #23
 8022cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022cc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8022cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8022ccc:	d516      	bpl.n	8022cfc <_dtoa_r+0x35c>
 8022cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022cd2:	4b96      	ldr	r3, [pc, #600]	@ (8022f2c <_dtoa_r+0x58c>)
 8022cd4:	2603      	movs	r6, #3
 8022cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022cda:	f7dd fd6d 	bl	80007b8 <__aeabi_ddiv>
 8022cde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022ce2:	f004 040f 	and.w	r4, r4, #15
 8022ce6:	4d91      	ldr	r5, [pc, #580]	@ (8022f2c <_dtoa_r+0x58c>)
 8022ce8:	b954      	cbnz	r4, 8022d00 <_dtoa_r+0x360>
 8022cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cf2:	f7dd fd61 	bl	80007b8 <__aeabi_ddiv>
 8022cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022cfa:	e028      	b.n	8022d4e <_dtoa_r+0x3ae>
 8022cfc:	2602      	movs	r6, #2
 8022cfe:	e7f2      	b.n	8022ce6 <_dtoa_r+0x346>
 8022d00:	07e1      	lsls	r1, r4, #31
 8022d02:	d508      	bpl.n	8022d16 <_dtoa_r+0x376>
 8022d04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022d0c:	f7dd fc2a 	bl	8000564 <__aeabi_dmul>
 8022d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022d14:	3601      	adds	r6, #1
 8022d16:	1064      	asrs	r4, r4, #1
 8022d18:	3508      	adds	r5, #8
 8022d1a:	e7e5      	b.n	8022ce8 <_dtoa_r+0x348>
 8022d1c:	f000 80af 	beq.w	8022e7e <_dtoa_r+0x4de>
 8022d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022d24:	427c      	negs	r4, r7
 8022d26:	4b80      	ldr	r3, [pc, #512]	@ (8022f28 <_dtoa_r+0x588>)
 8022d28:	f004 020f 	and.w	r2, r4, #15
 8022d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d34:	f7dd fc16 	bl	8000564 <__aeabi_dmul>
 8022d38:	2602      	movs	r6, #2
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d40:	4d7a      	ldr	r5, [pc, #488]	@ (8022f2c <_dtoa_r+0x58c>)
 8022d42:	1124      	asrs	r4, r4, #4
 8022d44:	2c00      	cmp	r4, #0
 8022d46:	f040 808f 	bne.w	8022e68 <_dtoa_r+0x4c8>
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d1d3      	bne.n	8022cf6 <_dtoa_r+0x356>
 8022d4e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	f000 8094 	beq.w	8022e82 <_dtoa_r+0x4e2>
 8022d5a:	2200      	movs	r2, #0
 8022d5c:	4620      	mov	r0, r4
 8022d5e:	4629      	mov	r1, r5
 8022d60:	4b73      	ldr	r3, [pc, #460]	@ (8022f30 <_dtoa_r+0x590>)
 8022d62:	f7dd fe71 	bl	8000a48 <__aeabi_dcmplt>
 8022d66:	2800      	cmp	r0, #0
 8022d68:	f000 808b 	beq.w	8022e82 <_dtoa_r+0x4e2>
 8022d6c:	9b08      	ldr	r3, [sp, #32]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	f000 8087 	beq.w	8022e82 <_dtoa_r+0x4e2>
 8022d74:	f1bb 0f00 	cmp.w	fp, #0
 8022d78:	dd34      	ble.n	8022de4 <_dtoa_r+0x444>
 8022d7a:	4620      	mov	r0, r4
 8022d7c:	2200      	movs	r2, #0
 8022d7e:	4629      	mov	r1, r5
 8022d80:	4b6c      	ldr	r3, [pc, #432]	@ (8022f34 <_dtoa_r+0x594>)
 8022d82:	f7dd fbef 	bl	8000564 <__aeabi_dmul>
 8022d86:	465c      	mov	r4, fp
 8022d88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8022d90:	3601      	adds	r6, #1
 8022d92:	4630      	mov	r0, r6
 8022d94:	f7dd fb7c 	bl	8000490 <__aeabi_i2d>
 8022d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022d9c:	f7dd fbe2 	bl	8000564 <__aeabi_dmul>
 8022da0:	2200      	movs	r2, #0
 8022da2:	4b65      	ldr	r3, [pc, #404]	@ (8022f38 <_dtoa_r+0x598>)
 8022da4:	f7dd fa28 	bl	80001f8 <__adddf3>
 8022da8:	4605      	mov	r5, r0
 8022daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8022dae:	2c00      	cmp	r4, #0
 8022db0:	d16a      	bne.n	8022e88 <_dtoa_r+0x4e8>
 8022db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022db6:	2200      	movs	r2, #0
 8022db8:	4b60      	ldr	r3, [pc, #384]	@ (8022f3c <_dtoa_r+0x59c>)
 8022dba:	f7dd fa1b 	bl	80001f4 <__aeabi_dsub>
 8022dbe:	4602      	mov	r2, r0
 8022dc0:	460b      	mov	r3, r1
 8022dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022dc6:	462a      	mov	r2, r5
 8022dc8:	4633      	mov	r3, r6
 8022dca:	f7dd fe5b 	bl	8000a84 <__aeabi_dcmpgt>
 8022dce:	2800      	cmp	r0, #0
 8022dd0:	f040 8298 	bne.w	8023304 <_dtoa_r+0x964>
 8022dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022dd8:	462a      	mov	r2, r5
 8022dda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8022dde:	f7dd fe33 	bl	8000a48 <__aeabi_dcmplt>
 8022de2:	bb38      	cbnz	r0, 8022e34 <_dtoa_r+0x494>
 8022de4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8022de8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8022dec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	f2c0 8157 	blt.w	80230a2 <_dtoa_r+0x702>
 8022df4:	2f0e      	cmp	r7, #14
 8022df6:	f300 8154 	bgt.w	80230a2 <_dtoa_r+0x702>
 8022dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8022f28 <_dtoa_r+0x588>)
 8022dfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022e04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8022e08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	f280 80e5 	bge.w	8022fda <_dtoa_r+0x63a>
 8022e10:	9b08      	ldr	r3, [sp, #32]
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	f300 80e1 	bgt.w	8022fda <_dtoa_r+0x63a>
 8022e18:	d10c      	bne.n	8022e34 <_dtoa_r+0x494>
 8022e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022e1e:	2200      	movs	r2, #0
 8022e20:	4b46      	ldr	r3, [pc, #280]	@ (8022f3c <_dtoa_r+0x59c>)
 8022e22:	f7dd fb9f 	bl	8000564 <__aeabi_dmul>
 8022e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022e2a:	f7dd fe21 	bl	8000a70 <__aeabi_dcmpge>
 8022e2e:	2800      	cmp	r0, #0
 8022e30:	f000 8266 	beq.w	8023300 <_dtoa_r+0x960>
 8022e34:	2400      	movs	r4, #0
 8022e36:	4625      	mov	r5, r4
 8022e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022e3a:	4656      	mov	r6, sl
 8022e3c:	ea6f 0803 	mvn.w	r8, r3
 8022e40:	2700      	movs	r7, #0
 8022e42:	4621      	mov	r1, r4
 8022e44:	4648      	mov	r0, r9
 8022e46:	f000 fcbd 	bl	80237c4 <_Bfree>
 8022e4a:	2d00      	cmp	r5, #0
 8022e4c:	f000 80bd 	beq.w	8022fca <_dtoa_r+0x62a>
 8022e50:	b12f      	cbz	r7, 8022e5e <_dtoa_r+0x4be>
 8022e52:	42af      	cmp	r7, r5
 8022e54:	d003      	beq.n	8022e5e <_dtoa_r+0x4be>
 8022e56:	4639      	mov	r1, r7
 8022e58:	4648      	mov	r0, r9
 8022e5a:	f000 fcb3 	bl	80237c4 <_Bfree>
 8022e5e:	4629      	mov	r1, r5
 8022e60:	4648      	mov	r0, r9
 8022e62:	f000 fcaf 	bl	80237c4 <_Bfree>
 8022e66:	e0b0      	b.n	8022fca <_dtoa_r+0x62a>
 8022e68:	07e2      	lsls	r2, r4, #31
 8022e6a:	d505      	bpl.n	8022e78 <_dtoa_r+0x4d8>
 8022e6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022e70:	f7dd fb78 	bl	8000564 <__aeabi_dmul>
 8022e74:	2301      	movs	r3, #1
 8022e76:	3601      	adds	r6, #1
 8022e78:	1064      	asrs	r4, r4, #1
 8022e7a:	3508      	adds	r5, #8
 8022e7c:	e762      	b.n	8022d44 <_dtoa_r+0x3a4>
 8022e7e:	2602      	movs	r6, #2
 8022e80:	e765      	b.n	8022d4e <_dtoa_r+0x3ae>
 8022e82:	46b8      	mov	r8, r7
 8022e84:	9c08      	ldr	r4, [sp, #32]
 8022e86:	e784      	b.n	8022d92 <_dtoa_r+0x3f2>
 8022e88:	4b27      	ldr	r3, [pc, #156]	@ (8022f28 <_dtoa_r+0x588>)
 8022e8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022e8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022e90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8022e94:	4454      	add	r4, sl
 8022e96:	2900      	cmp	r1, #0
 8022e98:	d054      	beq.n	8022f44 <_dtoa_r+0x5a4>
 8022e9a:	2000      	movs	r0, #0
 8022e9c:	4928      	ldr	r1, [pc, #160]	@ (8022f40 <_dtoa_r+0x5a0>)
 8022e9e:	f7dd fc8b 	bl	80007b8 <__aeabi_ddiv>
 8022ea2:	4633      	mov	r3, r6
 8022ea4:	462a      	mov	r2, r5
 8022ea6:	f7dd f9a5 	bl	80001f4 <__aeabi_dsub>
 8022eaa:	4656      	mov	r6, sl
 8022eac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022eb4:	f7dd fe06 	bl	8000ac4 <__aeabi_d2iz>
 8022eb8:	4605      	mov	r5, r0
 8022eba:	f7dd fae9 	bl	8000490 <__aeabi_i2d>
 8022ebe:	4602      	mov	r2, r0
 8022ec0:	460b      	mov	r3, r1
 8022ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ec6:	f7dd f995 	bl	80001f4 <__aeabi_dsub>
 8022eca:	4602      	mov	r2, r0
 8022ecc:	460b      	mov	r3, r1
 8022ece:	3530      	adds	r5, #48	@ 0x30
 8022ed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022ed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022ed8:	f806 5b01 	strb.w	r5, [r6], #1
 8022edc:	f7dd fdb4 	bl	8000a48 <__aeabi_dcmplt>
 8022ee0:	2800      	cmp	r0, #0
 8022ee2:	d172      	bne.n	8022fca <_dtoa_r+0x62a>
 8022ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022ee8:	2000      	movs	r0, #0
 8022eea:	4911      	ldr	r1, [pc, #68]	@ (8022f30 <_dtoa_r+0x590>)
 8022eec:	f7dd f982 	bl	80001f4 <__aeabi_dsub>
 8022ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022ef4:	f7dd fda8 	bl	8000a48 <__aeabi_dcmplt>
 8022ef8:	2800      	cmp	r0, #0
 8022efa:	f040 80b4 	bne.w	8023066 <_dtoa_r+0x6c6>
 8022efe:	42a6      	cmp	r6, r4
 8022f00:	f43f af70 	beq.w	8022de4 <_dtoa_r+0x444>
 8022f04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022f08:	2200      	movs	r2, #0
 8022f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8022f34 <_dtoa_r+0x594>)
 8022f0c:	f7dd fb2a 	bl	8000564 <__aeabi_dmul>
 8022f10:	2200      	movs	r2, #0
 8022f12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f1a:	4b06      	ldr	r3, [pc, #24]	@ (8022f34 <_dtoa_r+0x594>)
 8022f1c:	f7dd fb22 	bl	8000564 <__aeabi_dmul>
 8022f20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022f24:	e7c4      	b.n	8022eb0 <_dtoa_r+0x510>
 8022f26:	bf00      	nop
 8022f28:	08031990 	.word	0x08031990
 8022f2c:	08031968 	.word	0x08031968
 8022f30:	3ff00000 	.word	0x3ff00000
 8022f34:	40240000 	.word	0x40240000
 8022f38:	401c0000 	.word	0x401c0000
 8022f3c:	40140000 	.word	0x40140000
 8022f40:	3fe00000 	.word	0x3fe00000
 8022f44:	4631      	mov	r1, r6
 8022f46:	4628      	mov	r0, r5
 8022f48:	f7dd fb0c 	bl	8000564 <__aeabi_dmul>
 8022f4c:	4656      	mov	r6, sl
 8022f4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022f52:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f58:	f7dd fdb4 	bl	8000ac4 <__aeabi_d2iz>
 8022f5c:	4605      	mov	r5, r0
 8022f5e:	f7dd fa97 	bl	8000490 <__aeabi_i2d>
 8022f62:	4602      	mov	r2, r0
 8022f64:	460b      	mov	r3, r1
 8022f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f6a:	f7dd f943 	bl	80001f4 <__aeabi_dsub>
 8022f6e:	4602      	mov	r2, r0
 8022f70:	460b      	mov	r3, r1
 8022f72:	3530      	adds	r5, #48	@ 0x30
 8022f74:	f806 5b01 	strb.w	r5, [r6], #1
 8022f78:	42a6      	cmp	r6, r4
 8022f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022f7e:	f04f 0200 	mov.w	r2, #0
 8022f82:	d124      	bne.n	8022fce <_dtoa_r+0x62e>
 8022f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022f88:	4bae      	ldr	r3, [pc, #696]	@ (8023244 <_dtoa_r+0x8a4>)
 8022f8a:	f7dd f935 	bl	80001f8 <__adddf3>
 8022f8e:	4602      	mov	r2, r0
 8022f90:	460b      	mov	r3, r1
 8022f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f96:	f7dd fd75 	bl	8000a84 <__aeabi_dcmpgt>
 8022f9a:	2800      	cmp	r0, #0
 8022f9c:	d163      	bne.n	8023066 <_dtoa_r+0x6c6>
 8022f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022fa2:	2000      	movs	r0, #0
 8022fa4:	49a7      	ldr	r1, [pc, #668]	@ (8023244 <_dtoa_r+0x8a4>)
 8022fa6:	f7dd f925 	bl	80001f4 <__aeabi_dsub>
 8022faa:	4602      	mov	r2, r0
 8022fac:	460b      	mov	r3, r1
 8022fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fb2:	f7dd fd49 	bl	8000a48 <__aeabi_dcmplt>
 8022fb6:	2800      	cmp	r0, #0
 8022fb8:	f43f af14 	beq.w	8022de4 <_dtoa_r+0x444>
 8022fbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022fbe:	1e73      	subs	r3, r6, #1
 8022fc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022fc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022fc6:	2b30      	cmp	r3, #48	@ 0x30
 8022fc8:	d0f8      	beq.n	8022fbc <_dtoa_r+0x61c>
 8022fca:	4647      	mov	r7, r8
 8022fcc:	e03b      	b.n	8023046 <_dtoa_r+0x6a6>
 8022fce:	4b9e      	ldr	r3, [pc, #632]	@ (8023248 <_dtoa_r+0x8a8>)
 8022fd0:	f7dd fac8 	bl	8000564 <__aeabi_dmul>
 8022fd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022fd8:	e7bc      	b.n	8022f54 <_dtoa_r+0x5b4>
 8022fda:	4656      	mov	r6, sl
 8022fdc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022fe4:	4620      	mov	r0, r4
 8022fe6:	4629      	mov	r1, r5
 8022fe8:	f7dd fbe6 	bl	80007b8 <__aeabi_ddiv>
 8022fec:	f7dd fd6a 	bl	8000ac4 <__aeabi_d2iz>
 8022ff0:	4680      	mov	r8, r0
 8022ff2:	f7dd fa4d 	bl	8000490 <__aeabi_i2d>
 8022ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022ffa:	f7dd fab3 	bl	8000564 <__aeabi_dmul>
 8022ffe:	4602      	mov	r2, r0
 8023000:	460b      	mov	r3, r1
 8023002:	4620      	mov	r0, r4
 8023004:	4629      	mov	r1, r5
 8023006:	f7dd f8f5 	bl	80001f4 <__aeabi_dsub>
 802300a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802300e:	9d08      	ldr	r5, [sp, #32]
 8023010:	f806 4b01 	strb.w	r4, [r6], #1
 8023014:	eba6 040a 	sub.w	r4, r6, sl
 8023018:	42a5      	cmp	r5, r4
 802301a:	4602      	mov	r2, r0
 802301c:	460b      	mov	r3, r1
 802301e:	d133      	bne.n	8023088 <_dtoa_r+0x6e8>
 8023020:	f7dd f8ea 	bl	80001f8 <__adddf3>
 8023024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023028:	4604      	mov	r4, r0
 802302a:	460d      	mov	r5, r1
 802302c:	f7dd fd2a 	bl	8000a84 <__aeabi_dcmpgt>
 8023030:	b9c0      	cbnz	r0, 8023064 <_dtoa_r+0x6c4>
 8023032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023036:	4620      	mov	r0, r4
 8023038:	4629      	mov	r1, r5
 802303a:	f7dd fcfb 	bl	8000a34 <__aeabi_dcmpeq>
 802303e:	b110      	cbz	r0, 8023046 <_dtoa_r+0x6a6>
 8023040:	f018 0f01 	tst.w	r8, #1
 8023044:	d10e      	bne.n	8023064 <_dtoa_r+0x6c4>
 8023046:	4648      	mov	r0, r9
 8023048:	9903      	ldr	r1, [sp, #12]
 802304a:	f000 fbbb 	bl	80237c4 <_Bfree>
 802304e:	2300      	movs	r3, #0
 8023050:	7033      	strb	r3, [r6, #0]
 8023052:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023054:	3701      	adds	r7, #1
 8023056:	601f      	str	r7, [r3, #0]
 8023058:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802305a:	2b00      	cmp	r3, #0
 802305c:	f000 824b 	beq.w	80234f6 <_dtoa_r+0xb56>
 8023060:	601e      	str	r6, [r3, #0]
 8023062:	e248      	b.n	80234f6 <_dtoa_r+0xb56>
 8023064:	46b8      	mov	r8, r7
 8023066:	4633      	mov	r3, r6
 8023068:	461e      	mov	r6, r3
 802306a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802306e:	2a39      	cmp	r2, #57	@ 0x39
 8023070:	d106      	bne.n	8023080 <_dtoa_r+0x6e0>
 8023072:	459a      	cmp	sl, r3
 8023074:	d1f8      	bne.n	8023068 <_dtoa_r+0x6c8>
 8023076:	2230      	movs	r2, #48	@ 0x30
 8023078:	f108 0801 	add.w	r8, r8, #1
 802307c:	f88a 2000 	strb.w	r2, [sl]
 8023080:	781a      	ldrb	r2, [r3, #0]
 8023082:	3201      	adds	r2, #1
 8023084:	701a      	strb	r2, [r3, #0]
 8023086:	e7a0      	b.n	8022fca <_dtoa_r+0x62a>
 8023088:	2200      	movs	r2, #0
 802308a:	4b6f      	ldr	r3, [pc, #444]	@ (8023248 <_dtoa_r+0x8a8>)
 802308c:	f7dd fa6a 	bl	8000564 <__aeabi_dmul>
 8023090:	2200      	movs	r2, #0
 8023092:	2300      	movs	r3, #0
 8023094:	4604      	mov	r4, r0
 8023096:	460d      	mov	r5, r1
 8023098:	f7dd fccc 	bl	8000a34 <__aeabi_dcmpeq>
 802309c:	2800      	cmp	r0, #0
 802309e:	d09f      	beq.n	8022fe0 <_dtoa_r+0x640>
 80230a0:	e7d1      	b.n	8023046 <_dtoa_r+0x6a6>
 80230a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80230a4:	2a00      	cmp	r2, #0
 80230a6:	f000 80ea 	beq.w	802327e <_dtoa_r+0x8de>
 80230aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80230ac:	2a01      	cmp	r2, #1
 80230ae:	f300 80cd 	bgt.w	802324c <_dtoa_r+0x8ac>
 80230b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80230b4:	2a00      	cmp	r2, #0
 80230b6:	f000 80c1 	beq.w	802323c <_dtoa_r+0x89c>
 80230ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80230be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80230c0:	9e04      	ldr	r6, [sp, #16]
 80230c2:	9a04      	ldr	r2, [sp, #16]
 80230c4:	2101      	movs	r1, #1
 80230c6:	441a      	add	r2, r3
 80230c8:	9204      	str	r2, [sp, #16]
 80230ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80230cc:	4648      	mov	r0, r9
 80230ce:	441a      	add	r2, r3
 80230d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80230d2:	f000 fc2b 	bl	802392c <__i2b>
 80230d6:	4605      	mov	r5, r0
 80230d8:	b166      	cbz	r6, 80230f4 <_dtoa_r+0x754>
 80230da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230dc:	2b00      	cmp	r3, #0
 80230de:	dd09      	ble.n	80230f4 <_dtoa_r+0x754>
 80230e0:	42b3      	cmp	r3, r6
 80230e2:	bfa8      	it	ge
 80230e4:	4633      	movge	r3, r6
 80230e6:	9a04      	ldr	r2, [sp, #16]
 80230e8:	1af6      	subs	r6, r6, r3
 80230ea:	1ad2      	subs	r2, r2, r3
 80230ec:	9204      	str	r2, [sp, #16]
 80230ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80230f0:	1ad3      	subs	r3, r2, r3
 80230f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80230f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80230f6:	b30b      	cbz	r3, 802313c <_dtoa_r+0x79c>
 80230f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	f000 80c6 	beq.w	802328c <_dtoa_r+0x8ec>
 8023100:	2c00      	cmp	r4, #0
 8023102:	f000 80c0 	beq.w	8023286 <_dtoa_r+0x8e6>
 8023106:	4629      	mov	r1, r5
 8023108:	4622      	mov	r2, r4
 802310a:	4648      	mov	r0, r9
 802310c:	f000 fcc6 	bl	8023a9c <__pow5mult>
 8023110:	9a03      	ldr	r2, [sp, #12]
 8023112:	4601      	mov	r1, r0
 8023114:	4605      	mov	r5, r0
 8023116:	4648      	mov	r0, r9
 8023118:	f000 fc1e 	bl	8023958 <__multiply>
 802311c:	9903      	ldr	r1, [sp, #12]
 802311e:	4680      	mov	r8, r0
 8023120:	4648      	mov	r0, r9
 8023122:	f000 fb4f 	bl	80237c4 <_Bfree>
 8023126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023128:	1b1b      	subs	r3, r3, r4
 802312a:	930a      	str	r3, [sp, #40]	@ 0x28
 802312c:	f000 80b1 	beq.w	8023292 <_dtoa_r+0x8f2>
 8023130:	4641      	mov	r1, r8
 8023132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023134:	4648      	mov	r0, r9
 8023136:	f000 fcb1 	bl	8023a9c <__pow5mult>
 802313a:	9003      	str	r0, [sp, #12]
 802313c:	2101      	movs	r1, #1
 802313e:	4648      	mov	r0, r9
 8023140:	f000 fbf4 	bl	802392c <__i2b>
 8023144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023146:	4604      	mov	r4, r0
 8023148:	2b00      	cmp	r3, #0
 802314a:	f000 81d8 	beq.w	80234fe <_dtoa_r+0xb5e>
 802314e:	461a      	mov	r2, r3
 8023150:	4601      	mov	r1, r0
 8023152:	4648      	mov	r0, r9
 8023154:	f000 fca2 	bl	8023a9c <__pow5mult>
 8023158:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802315a:	4604      	mov	r4, r0
 802315c:	2b01      	cmp	r3, #1
 802315e:	f300 809f 	bgt.w	80232a0 <_dtoa_r+0x900>
 8023162:	9b06      	ldr	r3, [sp, #24]
 8023164:	2b00      	cmp	r3, #0
 8023166:	f040 8097 	bne.w	8023298 <_dtoa_r+0x8f8>
 802316a:	9b07      	ldr	r3, [sp, #28]
 802316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023170:	2b00      	cmp	r3, #0
 8023172:	f040 8093 	bne.w	802329c <_dtoa_r+0x8fc>
 8023176:	9b07      	ldr	r3, [sp, #28]
 8023178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802317c:	0d1b      	lsrs	r3, r3, #20
 802317e:	051b      	lsls	r3, r3, #20
 8023180:	b133      	cbz	r3, 8023190 <_dtoa_r+0x7f0>
 8023182:	9b04      	ldr	r3, [sp, #16]
 8023184:	3301      	adds	r3, #1
 8023186:	9304      	str	r3, [sp, #16]
 8023188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802318a:	3301      	adds	r3, #1
 802318c:	9309      	str	r3, [sp, #36]	@ 0x24
 802318e:	2301      	movs	r3, #1
 8023190:	930a      	str	r3, [sp, #40]	@ 0x28
 8023192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023194:	2b00      	cmp	r3, #0
 8023196:	f000 81b8 	beq.w	802350a <_dtoa_r+0xb6a>
 802319a:	6923      	ldr	r3, [r4, #16]
 802319c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80231a0:	6918      	ldr	r0, [r3, #16]
 80231a2:	f000 fb77 	bl	8023894 <__hi0bits>
 80231a6:	f1c0 0020 	rsb	r0, r0, #32
 80231aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231ac:	4418      	add	r0, r3
 80231ae:	f010 001f 	ands.w	r0, r0, #31
 80231b2:	f000 8082 	beq.w	80232ba <_dtoa_r+0x91a>
 80231b6:	f1c0 0320 	rsb	r3, r0, #32
 80231ba:	2b04      	cmp	r3, #4
 80231bc:	dd73      	ble.n	80232a6 <_dtoa_r+0x906>
 80231be:	9b04      	ldr	r3, [sp, #16]
 80231c0:	f1c0 001c 	rsb	r0, r0, #28
 80231c4:	4403      	add	r3, r0
 80231c6:	9304      	str	r3, [sp, #16]
 80231c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231ca:	4406      	add	r6, r0
 80231cc:	4403      	add	r3, r0
 80231ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80231d0:	9b04      	ldr	r3, [sp, #16]
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	dd05      	ble.n	80231e2 <_dtoa_r+0x842>
 80231d6:	461a      	mov	r2, r3
 80231d8:	4648      	mov	r0, r9
 80231da:	9903      	ldr	r1, [sp, #12]
 80231dc:	f000 fcb8 	bl	8023b50 <__lshift>
 80231e0:	9003      	str	r0, [sp, #12]
 80231e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	dd05      	ble.n	80231f4 <_dtoa_r+0x854>
 80231e8:	4621      	mov	r1, r4
 80231ea:	461a      	mov	r2, r3
 80231ec:	4648      	mov	r0, r9
 80231ee:	f000 fcaf 	bl	8023b50 <__lshift>
 80231f2:	4604      	mov	r4, r0
 80231f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d061      	beq.n	80232be <_dtoa_r+0x91e>
 80231fa:	4621      	mov	r1, r4
 80231fc:	9803      	ldr	r0, [sp, #12]
 80231fe:	f000 fd13 	bl	8023c28 <__mcmp>
 8023202:	2800      	cmp	r0, #0
 8023204:	da5b      	bge.n	80232be <_dtoa_r+0x91e>
 8023206:	2300      	movs	r3, #0
 8023208:	220a      	movs	r2, #10
 802320a:	4648      	mov	r0, r9
 802320c:	9903      	ldr	r1, [sp, #12]
 802320e:	f000 fafb 	bl	8023808 <__multadd>
 8023212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023214:	f107 38ff 	add.w	r8, r7, #4294967295
 8023218:	9003      	str	r0, [sp, #12]
 802321a:	2b00      	cmp	r3, #0
 802321c:	f000 8177 	beq.w	802350e <_dtoa_r+0xb6e>
 8023220:	4629      	mov	r1, r5
 8023222:	2300      	movs	r3, #0
 8023224:	220a      	movs	r2, #10
 8023226:	4648      	mov	r0, r9
 8023228:	f000 faee 	bl	8023808 <__multadd>
 802322c:	f1bb 0f00 	cmp.w	fp, #0
 8023230:	4605      	mov	r5, r0
 8023232:	dc6f      	bgt.n	8023314 <_dtoa_r+0x974>
 8023234:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023236:	2b02      	cmp	r3, #2
 8023238:	dc49      	bgt.n	80232ce <_dtoa_r+0x92e>
 802323a:	e06b      	b.n	8023314 <_dtoa_r+0x974>
 802323c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802323e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8023242:	e73c      	b.n	80230be <_dtoa_r+0x71e>
 8023244:	3fe00000 	.word	0x3fe00000
 8023248:	40240000 	.word	0x40240000
 802324c:	9b08      	ldr	r3, [sp, #32]
 802324e:	1e5c      	subs	r4, r3, #1
 8023250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023252:	42a3      	cmp	r3, r4
 8023254:	db09      	blt.n	802326a <_dtoa_r+0x8ca>
 8023256:	1b1c      	subs	r4, r3, r4
 8023258:	9b08      	ldr	r3, [sp, #32]
 802325a:	2b00      	cmp	r3, #0
 802325c:	f6bf af30 	bge.w	80230c0 <_dtoa_r+0x720>
 8023260:	9b04      	ldr	r3, [sp, #16]
 8023262:	9a08      	ldr	r2, [sp, #32]
 8023264:	1a9e      	subs	r6, r3, r2
 8023266:	2300      	movs	r3, #0
 8023268:	e72b      	b.n	80230c2 <_dtoa_r+0x722>
 802326a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802326c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802326e:	1ae3      	subs	r3, r4, r3
 8023270:	441a      	add	r2, r3
 8023272:	940a      	str	r4, [sp, #40]	@ 0x28
 8023274:	9e04      	ldr	r6, [sp, #16]
 8023276:	2400      	movs	r4, #0
 8023278:	9b08      	ldr	r3, [sp, #32]
 802327a:	920e      	str	r2, [sp, #56]	@ 0x38
 802327c:	e721      	b.n	80230c2 <_dtoa_r+0x722>
 802327e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023280:	9e04      	ldr	r6, [sp, #16]
 8023282:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023284:	e728      	b.n	80230d8 <_dtoa_r+0x738>
 8023286:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802328a:	e751      	b.n	8023130 <_dtoa_r+0x790>
 802328c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802328e:	9903      	ldr	r1, [sp, #12]
 8023290:	e750      	b.n	8023134 <_dtoa_r+0x794>
 8023292:	f8cd 800c 	str.w	r8, [sp, #12]
 8023296:	e751      	b.n	802313c <_dtoa_r+0x79c>
 8023298:	2300      	movs	r3, #0
 802329a:	e779      	b.n	8023190 <_dtoa_r+0x7f0>
 802329c:	9b06      	ldr	r3, [sp, #24]
 802329e:	e777      	b.n	8023190 <_dtoa_r+0x7f0>
 80232a0:	2300      	movs	r3, #0
 80232a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80232a4:	e779      	b.n	802319a <_dtoa_r+0x7fa>
 80232a6:	d093      	beq.n	80231d0 <_dtoa_r+0x830>
 80232a8:	9a04      	ldr	r2, [sp, #16]
 80232aa:	331c      	adds	r3, #28
 80232ac:	441a      	add	r2, r3
 80232ae:	9204      	str	r2, [sp, #16]
 80232b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80232b2:	441e      	add	r6, r3
 80232b4:	441a      	add	r2, r3
 80232b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80232b8:	e78a      	b.n	80231d0 <_dtoa_r+0x830>
 80232ba:	4603      	mov	r3, r0
 80232bc:	e7f4      	b.n	80232a8 <_dtoa_r+0x908>
 80232be:	9b08      	ldr	r3, [sp, #32]
 80232c0:	46b8      	mov	r8, r7
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	dc20      	bgt.n	8023308 <_dtoa_r+0x968>
 80232c6:	469b      	mov	fp, r3
 80232c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80232ca:	2b02      	cmp	r3, #2
 80232cc:	dd1e      	ble.n	802330c <_dtoa_r+0x96c>
 80232ce:	f1bb 0f00 	cmp.w	fp, #0
 80232d2:	f47f adb1 	bne.w	8022e38 <_dtoa_r+0x498>
 80232d6:	4621      	mov	r1, r4
 80232d8:	465b      	mov	r3, fp
 80232da:	2205      	movs	r2, #5
 80232dc:	4648      	mov	r0, r9
 80232de:	f000 fa93 	bl	8023808 <__multadd>
 80232e2:	4601      	mov	r1, r0
 80232e4:	4604      	mov	r4, r0
 80232e6:	9803      	ldr	r0, [sp, #12]
 80232e8:	f000 fc9e 	bl	8023c28 <__mcmp>
 80232ec:	2800      	cmp	r0, #0
 80232ee:	f77f ada3 	ble.w	8022e38 <_dtoa_r+0x498>
 80232f2:	4656      	mov	r6, sl
 80232f4:	2331      	movs	r3, #49	@ 0x31
 80232f6:	f108 0801 	add.w	r8, r8, #1
 80232fa:	f806 3b01 	strb.w	r3, [r6], #1
 80232fe:	e59f      	b.n	8022e40 <_dtoa_r+0x4a0>
 8023300:	46b8      	mov	r8, r7
 8023302:	9c08      	ldr	r4, [sp, #32]
 8023304:	4625      	mov	r5, r4
 8023306:	e7f4      	b.n	80232f2 <_dtoa_r+0x952>
 8023308:	f8dd b020 	ldr.w	fp, [sp, #32]
 802330c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802330e:	2b00      	cmp	r3, #0
 8023310:	f000 8101 	beq.w	8023516 <_dtoa_r+0xb76>
 8023314:	2e00      	cmp	r6, #0
 8023316:	dd05      	ble.n	8023324 <_dtoa_r+0x984>
 8023318:	4629      	mov	r1, r5
 802331a:	4632      	mov	r2, r6
 802331c:	4648      	mov	r0, r9
 802331e:	f000 fc17 	bl	8023b50 <__lshift>
 8023322:	4605      	mov	r5, r0
 8023324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023326:	2b00      	cmp	r3, #0
 8023328:	d05c      	beq.n	80233e4 <_dtoa_r+0xa44>
 802332a:	4648      	mov	r0, r9
 802332c:	6869      	ldr	r1, [r5, #4]
 802332e:	f000 fa09 	bl	8023744 <_Balloc>
 8023332:	4606      	mov	r6, r0
 8023334:	b928      	cbnz	r0, 8023342 <_dtoa_r+0x9a2>
 8023336:	4602      	mov	r2, r0
 8023338:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802333c:	4b80      	ldr	r3, [pc, #512]	@ (8023540 <_dtoa_r+0xba0>)
 802333e:	f7ff bb43 	b.w	80229c8 <_dtoa_r+0x28>
 8023342:	692a      	ldr	r2, [r5, #16]
 8023344:	f105 010c 	add.w	r1, r5, #12
 8023348:	3202      	adds	r2, #2
 802334a:	0092      	lsls	r2, r2, #2
 802334c:	300c      	adds	r0, #12
 802334e:	f7ff fa72 	bl	8022836 <memcpy>
 8023352:	2201      	movs	r2, #1
 8023354:	4631      	mov	r1, r6
 8023356:	4648      	mov	r0, r9
 8023358:	f000 fbfa 	bl	8023b50 <__lshift>
 802335c:	462f      	mov	r7, r5
 802335e:	4605      	mov	r5, r0
 8023360:	f10a 0301 	add.w	r3, sl, #1
 8023364:	9304      	str	r3, [sp, #16]
 8023366:	eb0a 030b 	add.w	r3, sl, fp
 802336a:	930a      	str	r3, [sp, #40]	@ 0x28
 802336c:	9b06      	ldr	r3, [sp, #24]
 802336e:	f003 0301 	and.w	r3, r3, #1
 8023372:	9309      	str	r3, [sp, #36]	@ 0x24
 8023374:	9b04      	ldr	r3, [sp, #16]
 8023376:	4621      	mov	r1, r4
 8023378:	9803      	ldr	r0, [sp, #12]
 802337a:	f103 3bff 	add.w	fp, r3, #4294967295
 802337e:	f7ff fa87 	bl	8022890 <quorem>
 8023382:	4603      	mov	r3, r0
 8023384:	4639      	mov	r1, r7
 8023386:	3330      	adds	r3, #48	@ 0x30
 8023388:	9006      	str	r0, [sp, #24]
 802338a:	9803      	ldr	r0, [sp, #12]
 802338c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802338e:	f000 fc4b 	bl	8023c28 <__mcmp>
 8023392:	462a      	mov	r2, r5
 8023394:	9008      	str	r0, [sp, #32]
 8023396:	4621      	mov	r1, r4
 8023398:	4648      	mov	r0, r9
 802339a:	f000 fc61 	bl	8023c60 <__mdiff>
 802339e:	68c2      	ldr	r2, [r0, #12]
 80233a0:	4606      	mov	r6, r0
 80233a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233a4:	bb02      	cbnz	r2, 80233e8 <_dtoa_r+0xa48>
 80233a6:	4601      	mov	r1, r0
 80233a8:	9803      	ldr	r0, [sp, #12]
 80233aa:	f000 fc3d 	bl	8023c28 <__mcmp>
 80233ae:	4602      	mov	r2, r0
 80233b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233b2:	4631      	mov	r1, r6
 80233b4:	4648      	mov	r0, r9
 80233b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80233ba:	f000 fa03 	bl	80237c4 <_Bfree>
 80233be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80233c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80233c2:	9e04      	ldr	r6, [sp, #16]
 80233c4:	ea42 0103 	orr.w	r1, r2, r3
 80233c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233ca:	4319      	orrs	r1, r3
 80233cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233ce:	d10d      	bne.n	80233ec <_dtoa_r+0xa4c>
 80233d0:	2b39      	cmp	r3, #57	@ 0x39
 80233d2:	d027      	beq.n	8023424 <_dtoa_r+0xa84>
 80233d4:	9a08      	ldr	r2, [sp, #32]
 80233d6:	2a00      	cmp	r2, #0
 80233d8:	dd01      	ble.n	80233de <_dtoa_r+0xa3e>
 80233da:	9b06      	ldr	r3, [sp, #24]
 80233dc:	3331      	adds	r3, #49	@ 0x31
 80233de:	f88b 3000 	strb.w	r3, [fp]
 80233e2:	e52e      	b.n	8022e42 <_dtoa_r+0x4a2>
 80233e4:	4628      	mov	r0, r5
 80233e6:	e7b9      	b.n	802335c <_dtoa_r+0x9bc>
 80233e8:	2201      	movs	r2, #1
 80233ea:	e7e2      	b.n	80233b2 <_dtoa_r+0xa12>
 80233ec:	9908      	ldr	r1, [sp, #32]
 80233ee:	2900      	cmp	r1, #0
 80233f0:	db04      	blt.n	80233fc <_dtoa_r+0xa5c>
 80233f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80233f4:	4301      	orrs	r1, r0
 80233f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80233f8:	4301      	orrs	r1, r0
 80233fa:	d120      	bne.n	802343e <_dtoa_r+0xa9e>
 80233fc:	2a00      	cmp	r2, #0
 80233fe:	ddee      	ble.n	80233de <_dtoa_r+0xa3e>
 8023400:	2201      	movs	r2, #1
 8023402:	9903      	ldr	r1, [sp, #12]
 8023404:	4648      	mov	r0, r9
 8023406:	9304      	str	r3, [sp, #16]
 8023408:	f000 fba2 	bl	8023b50 <__lshift>
 802340c:	4621      	mov	r1, r4
 802340e:	9003      	str	r0, [sp, #12]
 8023410:	f000 fc0a 	bl	8023c28 <__mcmp>
 8023414:	2800      	cmp	r0, #0
 8023416:	9b04      	ldr	r3, [sp, #16]
 8023418:	dc02      	bgt.n	8023420 <_dtoa_r+0xa80>
 802341a:	d1e0      	bne.n	80233de <_dtoa_r+0xa3e>
 802341c:	07da      	lsls	r2, r3, #31
 802341e:	d5de      	bpl.n	80233de <_dtoa_r+0xa3e>
 8023420:	2b39      	cmp	r3, #57	@ 0x39
 8023422:	d1da      	bne.n	80233da <_dtoa_r+0xa3a>
 8023424:	2339      	movs	r3, #57	@ 0x39
 8023426:	f88b 3000 	strb.w	r3, [fp]
 802342a:	4633      	mov	r3, r6
 802342c:	461e      	mov	r6, r3
 802342e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8023432:	3b01      	subs	r3, #1
 8023434:	2a39      	cmp	r2, #57	@ 0x39
 8023436:	d04e      	beq.n	80234d6 <_dtoa_r+0xb36>
 8023438:	3201      	adds	r2, #1
 802343a:	701a      	strb	r2, [r3, #0]
 802343c:	e501      	b.n	8022e42 <_dtoa_r+0x4a2>
 802343e:	2a00      	cmp	r2, #0
 8023440:	dd03      	ble.n	802344a <_dtoa_r+0xaaa>
 8023442:	2b39      	cmp	r3, #57	@ 0x39
 8023444:	d0ee      	beq.n	8023424 <_dtoa_r+0xa84>
 8023446:	3301      	adds	r3, #1
 8023448:	e7c9      	b.n	80233de <_dtoa_r+0xa3e>
 802344a:	9a04      	ldr	r2, [sp, #16]
 802344c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802344e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023452:	428a      	cmp	r2, r1
 8023454:	d028      	beq.n	80234a8 <_dtoa_r+0xb08>
 8023456:	2300      	movs	r3, #0
 8023458:	220a      	movs	r2, #10
 802345a:	9903      	ldr	r1, [sp, #12]
 802345c:	4648      	mov	r0, r9
 802345e:	f000 f9d3 	bl	8023808 <__multadd>
 8023462:	42af      	cmp	r7, r5
 8023464:	9003      	str	r0, [sp, #12]
 8023466:	f04f 0300 	mov.w	r3, #0
 802346a:	f04f 020a 	mov.w	r2, #10
 802346e:	4639      	mov	r1, r7
 8023470:	4648      	mov	r0, r9
 8023472:	d107      	bne.n	8023484 <_dtoa_r+0xae4>
 8023474:	f000 f9c8 	bl	8023808 <__multadd>
 8023478:	4607      	mov	r7, r0
 802347a:	4605      	mov	r5, r0
 802347c:	9b04      	ldr	r3, [sp, #16]
 802347e:	3301      	adds	r3, #1
 8023480:	9304      	str	r3, [sp, #16]
 8023482:	e777      	b.n	8023374 <_dtoa_r+0x9d4>
 8023484:	f000 f9c0 	bl	8023808 <__multadd>
 8023488:	4629      	mov	r1, r5
 802348a:	4607      	mov	r7, r0
 802348c:	2300      	movs	r3, #0
 802348e:	220a      	movs	r2, #10
 8023490:	4648      	mov	r0, r9
 8023492:	f000 f9b9 	bl	8023808 <__multadd>
 8023496:	4605      	mov	r5, r0
 8023498:	e7f0      	b.n	802347c <_dtoa_r+0xadc>
 802349a:	f1bb 0f00 	cmp.w	fp, #0
 802349e:	bfcc      	ite	gt
 80234a0:	465e      	movgt	r6, fp
 80234a2:	2601      	movle	r6, #1
 80234a4:	2700      	movs	r7, #0
 80234a6:	4456      	add	r6, sl
 80234a8:	2201      	movs	r2, #1
 80234aa:	9903      	ldr	r1, [sp, #12]
 80234ac:	4648      	mov	r0, r9
 80234ae:	9304      	str	r3, [sp, #16]
 80234b0:	f000 fb4e 	bl	8023b50 <__lshift>
 80234b4:	4621      	mov	r1, r4
 80234b6:	9003      	str	r0, [sp, #12]
 80234b8:	f000 fbb6 	bl	8023c28 <__mcmp>
 80234bc:	2800      	cmp	r0, #0
 80234be:	dcb4      	bgt.n	802342a <_dtoa_r+0xa8a>
 80234c0:	d102      	bne.n	80234c8 <_dtoa_r+0xb28>
 80234c2:	9b04      	ldr	r3, [sp, #16]
 80234c4:	07db      	lsls	r3, r3, #31
 80234c6:	d4b0      	bmi.n	802342a <_dtoa_r+0xa8a>
 80234c8:	4633      	mov	r3, r6
 80234ca:	461e      	mov	r6, r3
 80234cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80234d0:	2a30      	cmp	r2, #48	@ 0x30
 80234d2:	d0fa      	beq.n	80234ca <_dtoa_r+0xb2a>
 80234d4:	e4b5      	b.n	8022e42 <_dtoa_r+0x4a2>
 80234d6:	459a      	cmp	sl, r3
 80234d8:	d1a8      	bne.n	802342c <_dtoa_r+0xa8c>
 80234da:	2331      	movs	r3, #49	@ 0x31
 80234dc:	f108 0801 	add.w	r8, r8, #1
 80234e0:	f88a 3000 	strb.w	r3, [sl]
 80234e4:	e4ad      	b.n	8022e42 <_dtoa_r+0x4a2>
 80234e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80234e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8023544 <_dtoa_r+0xba4>
 80234ec:	b11b      	cbz	r3, 80234f6 <_dtoa_r+0xb56>
 80234ee:	f10a 0308 	add.w	r3, sl, #8
 80234f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80234f4:	6013      	str	r3, [r2, #0]
 80234f6:	4650      	mov	r0, sl
 80234f8:	b017      	add	sp, #92	@ 0x5c
 80234fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023500:	2b01      	cmp	r3, #1
 8023502:	f77f ae2e 	ble.w	8023162 <_dtoa_r+0x7c2>
 8023506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023508:	930a      	str	r3, [sp, #40]	@ 0x28
 802350a:	2001      	movs	r0, #1
 802350c:	e64d      	b.n	80231aa <_dtoa_r+0x80a>
 802350e:	f1bb 0f00 	cmp.w	fp, #0
 8023512:	f77f aed9 	ble.w	80232c8 <_dtoa_r+0x928>
 8023516:	4656      	mov	r6, sl
 8023518:	4621      	mov	r1, r4
 802351a:	9803      	ldr	r0, [sp, #12]
 802351c:	f7ff f9b8 	bl	8022890 <quorem>
 8023520:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023524:	f806 3b01 	strb.w	r3, [r6], #1
 8023528:	eba6 020a 	sub.w	r2, r6, sl
 802352c:	4593      	cmp	fp, r2
 802352e:	ddb4      	ble.n	802349a <_dtoa_r+0xafa>
 8023530:	2300      	movs	r3, #0
 8023532:	220a      	movs	r2, #10
 8023534:	4648      	mov	r0, r9
 8023536:	9903      	ldr	r1, [sp, #12]
 8023538:	f000 f966 	bl	8023808 <__multadd>
 802353c:	9003      	str	r0, [sp, #12]
 802353e:	e7eb      	b.n	8023518 <_dtoa_r+0xb78>
 8023540:	080317b4 	.word	0x080317b4
 8023544:	0803174f 	.word	0x0803174f

08023548 <_free_r>:
 8023548:	b538      	push	{r3, r4, r5, lr}
 802354a:	4605      	mov	r5, r0
 802354c:	2900      	cmp	r1, #0
 802354e:	d040      	beq.n	80235d2 <_free_r+0x8a>
 8023550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023554:	1f0c      	subs	r4, r1, #4
 8023556:	2b00      	cmp	r3, #0
 8023558:	bfb8      	it	lt
 802355a:	18e4      	addlt	r4, r4, r3
 802355c:	f000 f8e6 	bl	802372c <__malloc_lock>
 8023560:	4a1c      	ldr	r2, [pc, #112]	@ (80235d4 <_free_r+0x8c>)
 8023562:	6813      	ldr	r3, [r2, #0]
 8023564:	b933      	cbnz	r3, 8023574 <_free_r+0x2c>
 8023566:	6063      	str	r3, [r4, #4]
 8023568:	6014      	str	r4, [r2, #0]
 802356a:	4628      	mov	r0, r5
 802356c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023570:	f000 b8e2 	b.w	8023738 <__malloc_unlock>
 8023574:	42a3      	cmp	r3, r4
 8023576:	d908      	bls.n	802358a <_free_r+0x42>
 8023578:	6820      	ldr	r0, [r4, #0]
 802357a:	1821      	adds	r1, r4, r0
 802357c:	428b      	cmp	r3, r1
 802357e:	bf01      	itttt	eq
 8023580:	6819      	ldreq	r1, [r3, #0]
 8023582:	685b      	ldreq	r3, [r3, #4]
 8023584:	1809      	addeq	r1, r1, r0
 8023586:	6021      	streq	r1, [r4, #0]
 8023588:	e7ed      	b.n	8023566 <_free_r+0x1e>
 802358a:	461a      	mov	r2, r3
 802358c:	685b      	ldr	r3, [r3, #4]
 802358e:	b10b      	cbz	r3, 8023594 <_free_r+0x4c>
 8023590:	42a3      	cmp	r3, r4
 8023592:	d9fa      	bls.n	802358a <_free_r+0x42>
 8023594:	6811      	ldr	r1, [r2, #0]
 8023596:	1850      	adds	r0, r2, r1
 8023598:	42a0      	cmp	r0, r4
 802359a:	d10b      	bne.n	80235b4 <_free_r+0x6c>
 802359c:	6820      	ldr	r0, [r4, #0]
 802359e:	4401      	add	r1, r0
 80235a0:	1850      	adds	r0, r2, r1
 80235a2:	4283      	cmp	r3, r0
 80235a4:	6011      	str	r1, [r2, #0]
 80235a6:	d1e0      	bne.n	802356a <_free_r+0x22>
 80235a8:	6818      	ldr	r0, [r3, #0]
 80235aa:	685b      	ldr	r3, [r3, #4]
 80235ac:	4408      	add	r0, r1
 80235ae:	6010      	str	r0, [r2, #0]
 80235b0:	6053      	str	r3, [r2, #4]
 80235b2:	e7da      	b.n	802356a <_free_r+0x22>
 80235b4:	d902      	bls.n	80235bc <_free_r+0x74>
 80235b6:	230c      	movs	r3, #12
 80235b8:	602b      	str	r3, [r5, #0]
 80235ba:	e7d6      	b.n	802356a <_free_r+0x22>
 80235bc:	6820      	ldr	r0, [r4, #0]
 80235be:	1821      	adds	r1, r4, r0
 80235c0:	428b      	cmp	r3, r1
 80235c2:	bf01      	itttt	eq
 80235c4:	6819      	ldreq	r1, [r3, #0]
 80235c6:	685b      	ldreq	r3, [r3, #4]
 80235c8:	1809      	addeq	r1, r1, r0
 80235ca:	6021      	streq	r1, [r4, #0]
 80235cc:	6063      	str	r3, [r4, #4]
 80235ce:	6054      	str	r4, [r2, #4]
 80235d0:	e7cb      	b.n	802356a <_free_r+0x22>
 80235d2:	bd38      	pop	{r3, r4, r5, pc}
 80235d4:	2000c064 	.word	0x2000c064

080235d8 <malloc>:
 80235d8:	4b02      	ldr	r3, [pc, #8]	@ (80235e4 <malloc+0xc>)
 80235da:	4601      	mov	r1, r0
 80235dc:	6818      	ldr	r0, [r3, #0]
 80235de:	f000 b825 	b.w	802362c <_malloc_r>
 80235e2:	bf00      	nop
 80235e4:	20000134 	.word	0x20000134

080235e8 <sbrk_aligned>:
 80235e8:	b570      	push	{r4, r5, r6, lr}
 80235ea:	4e0f      	ldr	r6, [pc, #60]	@ (8023628 <sbrk_aligned+0x40>)
 80235ec:	460c      	mov	r4, r1
 80235ee:	6831      	ldr	r1, [r6, #0]
 80235f0:	4605      	mov	r5, r0
 80235f2:	b911      	cbnz	r1, 80235fa <sbrk_aligned+0x12>
 80235f4:	f001 fb80 	bl	8024cf8 <_sbrk_r>
 80235f8:	6030      	str	r0, [r6, #0]
 80235fa:	4621      	mov	r1, r4
 80235fc:	4628      	mov	r0, r5
 80235fe:	f001 fb7b 	bl	8024cf8 <_sbrk_r>
 8023602:	1c43      	adds	r3, r0, #1
 8023604:	d103      	bne.n	802360e <sbrk_aligned+0x26>
 8023606:	f04f 34ff 	mov.w	r4, #4294967295
 802360a:	4620      	mov	r0, r4
 802360c:	bd70      	pop	{r4, r5, r6, pc}
 802360e:	1cc4      	adds	r4, r0, #3
 8023610:	f024 0403 	bic.w	r4, r4, #3
 8023614:	42a0      	cmp	r0, r4
 8023616:	d0f8      	beq.n	802360a <sbrk_aligned+0x22>
 8023618:	1a21      	subs	r1, r4, r0
 802361a:	4628      	mov	r0, r5
 802361c:	f001 fb6c 	bl	8024cf8 <_sbrk_r>
 8023620:	3001      	adds	r0, #1
 8023622:	d1f2      	bne.n	802360a <sbrk_aligned+0x22>
 8023624:	e7ef      	b.n	8023606 <sbrk_aligned+0x1e>
 8023626:	bf00      	nop
 8023628:	2000c060 	.word	0x2000c060

0802362c <_malloc_r>:
 802362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023630:	1ccd      	adds	r5, r1, #3
 8023632:	f025 0503 	bic.w	r5, r5, #3
 8023636:	3508      	adds	r5, #8
 8023638:	2d0c      	cmp	r5, #12
 802363a:	bf38      	it	cc
 802363c:	250c      	movcc	r5, #12
 802363e:	2d00      	cmp	r5, #0
 8023640:	4606      	mov	r6, r0
 8023642:	db01      	blt.n	8023648 <_malloc_r+0x1c>
 8023644:	42a9      	cmp	r1, r5
 8023646:	d904      	bls.n	8023652 <_malloc_r+0x26>
 8023648:	230c      	movs	r3, #12
 802364a:	6033      	str	r3, [r6, #0]
 802364c:	2000      	movs	r0, #0
 802364e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023728 <_malloc_r+0xfc>
 8023656:	f000 f869 	bl	802372c <__malloc_lock>
 802365a:	f8d8 3000 	ldr.w	r3, [r8]
 802365e:	461c      	mov	r4, r3
 8023660:	bb44      	cbnz	r4, 80236b4 <_malloc_r+0x88>
 8023662:	4629      	mov	r1, r5
 8023664:	4630      	mov	r0, r6
 8023666:	f7ff ffbf 	bl	80235e8 <sbrk_aligned>
 802366a:	1c43      	adds	r3, r0, #1
 802366c:	4604      	mov	r4, r0
 802366e:	d158      	bne.n	8023722 <_malloc_r+0xf6>
 8023670:	f8d8 4000 	ldr.w	r4, [r8]
 8023674:	4627      	mov	r7, r4
 8023676:	2f00      	cmp	r7, #0
 8023678:	d143      	bne.n	8023702 <_malloc_r+0xd6>
 802367a:	2c00      	cmp	r4, #0
 802367c:	d04b      	beq.n	8023716 <_malloc_r+0xea>
 802367e:	6823      	ldr	r3, [r4, #0]
 8023680:	4639      	mov	r1, r7
 8023682:	4630      	mov	r0, r6
 8023684:	eb04 0903 	add.w	r9, r4, r3
 8023688:	f001 fb36 	bl	8024cf8 <_sbrk_r>
 802368c:	4581      	cmp	r9, r0
 802368e:	d142      	bne.n	8023716 <_malloc_r+0xea>
 8023690:	6821      	ldr	r1, [r4, #0]
 8023692:	4630      	mov	r0, r6
 8023694:	1a6d      	subs	r5, r5, r1
 8023696:	4629      	mov	r1, r5
 8023698:	f7ff ffa6 	bl	80235e8 <sbrk_aligned>
 802369c:	3001      	adds	r0, #1
 802369e:	d03a      	beq.n	8023716 <_malloc_r+0xea>
 80236a0:	6823      	ldr	r3, [r4, #0]
 80236a2:	442b      	add	r3, r5
 80236a4:	6023      	str	r3, [r4, #0]
 80236a6:	f8d8 3000 	ldr.w	r3, [r8]
 80236aa:	685a      	ldr	r2, [r3, #4]
 80236ac:	bb62      	cbnz	r2, 8023708 <_malloc_r+0xdc>
 80236ae:	f8c8 7000 	str.w	r7, [r8]
 80236b2:	e00f      	b.n	80236d4 <_malloc_r+0xa8>
 80236b4:	6822      	ldr	r2, [r4, #0]
 80236b6:	1b52      	subs	r2, r2, r5
 80236b8:	d420      	bmi.n	80236fc <_malloc_r+0xd0>
 80236ba:	2a0b      	cmp	r2, #11
 80236bc:	d917      	bls.n	80236ee <_malloc_r+0xc2>
 80236be:	1961      	adds	r1, r4, r5
 80236c0:	42a3      	cmp	r3, r4
 80236c2:	6025      	str	r5, [r4, #0]
 80236c4:	bf18      	it	ne
 80236c6:	6059      	strne	r1, [r3, #4]
 80236c8:	6863      	ldr	r3, [r4, #4]
 80236ca:	bf08      	it	eq
 80236cc:	f8c8 1000 	streq.w	r1, [r8]
 80236d0:	5162      	str	r2, [r4, r5]
 80236d2:	604b      	str	r3, [r1, #4]
 80236d4:	4630      	mov	r0, r6
 80236d6:	f000 f82f 	bl	8023738 <__malloc_unlock>
 80236da:	f104 000b 	add.w	r0, r4, #11
 80236de:	1d23      	adds	r3, r4, #4
 80236e0:	f020 0007 	bic.w	r0, r0, #7
 80236e4:	1ac2      	subs	r2, r0, r3
 80236e6:	bf1c      	itt	ne
 80236e8:	1a1b      	subne	r3, r3, r0
 80236ea:	50a3      	strne	r3, [r4, r2]
 80236ec:	e7af      	b.n	802364e <_malloc_r+0x22>
 80236ee:	6862      	ldr	r2, [r4, #4]
 80236f0:	42a3      	cmp	r3, r4
 80236f2:	bf0c      	ite	eq
 80236f4:	f8c8 2000 	streq.w	r2, [r8]
 80236f8:	605a      	strne	r2, [r3, #4]
 80236fa:	e7eb      	b.n	80236d4 <_malloc_r+0xa8>
 80236fc:	4623      	mov	r3, r4
 80236fe:	6864      	ldr	r4, [r4, #4]
 8023700:	e7ae      	b.n	8023660 <_malloc_r+0x34>
 8023702:	463c      	mov	r4, r7
 8023704:	687f      	ldr	r7, [r7, #4]
 8023706:	e7b6      	b.n	8023676 <_malloc_r+0x4a>
 8023708:	461a      	mov	r2, r3
 802370a:	685b      	ldr	r3, [r3, #4]
 802370c:	42a3      	cmp	r3, r4
 802370e:	d1fb      	bne.n	8023708 <_malloc_r+0xdc>
 8023710:	2300      	movs	r3, #0
 8023712:	6053      	str	r3, [r2, #4]
 8023714:	e7de      	b.n	80236d4 <_malloc_r+0xa8>
 8023716:	230c      	movs	r3, #12
 8023718:	4630      	mov	r0, r6
 802371a:	6033      	str	r3, [r6, #0]
 802371c:	f000 f80c 	bl	8023738 <__malloc_unlock>
 8023720:	e794      	b.n	802364c <_malloc_r+0x20>
 8023722:	6005      	str	r5, [r0, #0]
 8023724:	e7d6      	b.n	80236d4 <_malloc_r+0xa8>
 8023726:	bf00      	nop
 8023728:	2000c064 	.word	0x2000c064

0802372c <__malloc_lock>:
 802372c:	4801      	ldr	r0, [pc, #4]	@ (8023734 <__malloc_lock+0x8>)
 802372e:	f7ff b872 	b.w	8022816 <__retarget_lock_acquire_recursive>
 8023732:	bf00      	nop
 8023734:	2000c05c 	.word	0x2000c05c

08023738 <__malloc_unlock>:
 8023738:	4801      	ldr	r0, [pc, #4]	@ (8023740 <__malloc_unlock+0x8>)
 802373a:	f7ff b86d 	b.w	8022818 <__retarget_lock_release_recursive>
 802373e:	bf00      	nop
 8023740:	2000c05c 	.word	0x2000c05c

08023744 <_Balloc>:
 8023744:	b570      	push	{r4, r5, r6, lr}
 8023746:	69c6      	ldr	r6, [r0, #28]
 8023748:	4604      	mov	r4, r0
 802374a:	460d      	mov	r5, r1
 802374c:	b976      	cbnz	r6, 802376c <_Balloc+0x28>
 802374e:	2010      	movs	r0, #16
 8023750:	f7ff ff42 	bl	80235d8 <malloc>
 8023754:	4602      	mov	r2, r0
 8023756:	61e0      	str	r0, [r4, #28]
 8023758:	b920      	cbnz	r0, 8023764 <_Balloc+0x20>
 802375a:	216b      	movs	r1, #107	@ 0x6b
 802375c:	4b17      	ldr	r3, [pc, #92]	@ (80237bc <_Balloc+0x78>)
 802375e:	4818      	ldr	r0, [pc, #96]	@ (80237c0 <_Balloc+0x7c>)
 8023760:	f7ff f878 	bl	8022854 <__assert_func>
 8023764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023768:	6006      	str	r6, [r0, #0]
 802376a:	60c6      	str	r6, [r0, #12]
 802376c:	69e6      	ldr	r6, [r4, #28]
 802376e:	68f3      	ldr	r3, [r6, #12]
 8023770:	b183      	cbz	r3, 8023794 <_Balloc+0x50>
 8023772:	69e3      	ldr	r3, [r4, #28]
 8023774:	68db      	ldr	r3, [r3, #12]
 8023776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802377a:	b9b8      	cbnz	r0, 80237ac <_Balloc+0x68>
 802377c:	2101      	movs	r1, #1
 802377e:	fa01 f605 	lsl.w	r6, r1, r5
 8023782:	1d72      	adds	r2, r6, #5
 8023784:	4620      	mov	r0, r4
 8023786:	0092      	lsls	r2, r2, #2
 8023788:	f001 facd 	bl	8024d26 <_calloc_r>
 802378c:	b160      	cbz	r0, 80237a8 <_Balloc+0x64>
 802378e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023792:	e00e      	b.n	80237b2 <_Balloc+0x6e>
 8023794:	2221      	movs	r2, #33	@ 0x21
 8023796:	2104      	movs	r1, #4
 8023798:	4620      	mov	r0, r4
 802379a:	f001 fac4 	bl	8024d26 <_calloc_r>
 802379e:	69e3      	ldr	r3, [r4, #28]
 80237a0:	60f0      	str	r0, [r6, #12]
 80237a2:	68db      	ldr	r3, [r3, #12]
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d1e4      	bne.n	8023772 <_Balloc+0x2e>
 80237a8:	2000      	movs	r0, #0
 80237aa:	bd70      	pop	{r4, r5, r6, pc}
 80237ac:	6802      	ldr	r2, [r0, #0]
 80237ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80237b2:	2300      	movs	r3, #0
 80237b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80237b8:	e7f7      	b.n	80237aa <_Balloc+0x66>
 80237ba:	bf00      	nop
 80237bc:	08031672 	.word	0x08031672
 80237c0:	080317c5 	.word	0x080317c5

080237c4 <_Bfree>:
 80237c4:	b570      	push	{r4, r5, r6, lr}
 80237c6:	69c6      	ldr	r6, [r0, #28]
 80237c8:	4605      	mov	r5, r0
 80237ca:	460c      	mov	r4, r1
 80237cc:	b976      	cbnz	r6, 80237ec <_Bfree+0x28>
 80237ce:	2010      	movs	r0, #16
 80237d0:	f7ff ff02 	bl	80235d8 <malloc>
 80237d4:	4602      	mov	r2, r0
 80237d6:	61e8      	str	r0, [r5, #28]
 80237d8:	b920      	cbnz	r0, 80237e4 <_Bfree+0x20>
 80237da:	218f      	movs	r1, #143	@ 0x8f
 80237dc:	4b08      	ldr	r3, [pc, #32]	@ (8023800 <_Bfree+0x3c>)
 80237de:	4809      	ldr	r0, [pc, #36]	@ (8023804 <_Bfree+0x40>)
 80237e0:	f7ff f838 	bl	8022854 <__assert_func>
 80237e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80237e8:	6006      	str	r6, [r0, #0]
 80237ea:	60c6      	str	r6, [r0, #12]
 80237ec:	b13c      	cbz	r4, 80237fe <_Bfree+0x3a>
 80237ee:	69eb      	ldr	r3, [r5, #28]
 80237f0:	6862      	ldr	r2, [r4, #4]
 80237f2:	68db      	ldr	r3, [r3, #12]
 80237f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80237f8:	6021      	str	r1, [r4, #0]
 80237fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80237fe:	bd70      	pop	{r4, r5, r6, pc}
 8023800:	08031672 	.word	0x08031672
 8023804:	080317c5 	.word	0x080317c5

08023808 <__multadd>:
 8023808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802380c:	4607      	mov	r7, r0
 802380e:	460c      	mov	r4, r1
 8023810:	461e      	mov	r6, r3
 8023812:	2000      	movs	r0, #0
 8023814:	690d      	ldr	r5, [r1, #16]
 8023816:	f101 0c14 	add.w	ip, r1, #20
 802381a:	f8dc 3000 	ldr.w	r3, [ip]
 802381e:	3001      	adds	r0, #1
 8023820:	b299      	uxth	r1, r3
 8023822:	fb02 6101 	mla	r1, r2, r1, r6
 8023826:	0c1e      	lsrs	r6, r3, #16
 8023828:	0c0b      	lsrs	r3, r1, #16
 802382a:	fb02 3306 	mla	r3, r2, r6, r3
 802382e:	b289      	uxth	r1, r1
 8023830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023834:	4285      	cmp	r5, r0
 8023836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802383a:	f84c 1b04 	str.w	r1, [ip], #4
 802383e:	dcec      	bgt.n	802381a <__multadd+0x12>
 8023840:	b30e      	cbz	r6, 8023886 <__multadd+0x7e>
 8023842:	68a3      	ldr	r3, [r4, #8]
 8023844:	42ab      	cmp	r3, r5
 8023846:	dc19      	bgt.n	802387c <__multadd+0x74>
 8023848:	6861      	ldr	r1, [r4, #4]
 802384a:	4638      	mov	r0, r7
 802384c:	3101      	adds	r1, #1
 802384e:	f7ff ff79 	bl	8023744 <_Balloc>
 8023852:	4680      	mov	r8, r0
 8023854:	b928      	cbnz	r0, 8023862 <__multadd+0x5a>
 8023856:	4602      	mov	r2, r0
 8023858:	21ba      	movs	r1, #186	@ 0xba
 802385a:	4b0c      	ldr	r3, [pc, #48]	@ (802388c <__multadd+0x84>)
 802385c:	480c      	ldr	r0, [pc, #48]	@ (8023890 <__multadd+0x88>)
 802385e:	f7fe fff9 	bl	8022854 <__assert_func>
 8023862:	6922      	ldr	r2, [r4, #16]
 8023864:	f104 010c 	add.w	r1, r4, #12
 8023868:	3202      	adds	r2, #2
 802386a:	0092      	lsls	r2, r2, #2
 802386c:	300c      	adds	r0, #12
 802386e:	f7fe ffe2 	bl	8022836 <memcpy>
 8023872:	4621      	mov	r1, r4
 8023874:	4638      	mov	r0, r7
 8023876:	f7ff ffa5 	bl	80237c4 <_Bfree>
 802387a:	4644      	mov	r4, r8
 802387c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023880:	3501      	adds	r5, #1
 8023882:	615e      	str	r6, [r3, #20]
 8023884:	6125      	str	r5, [r4, #16]
 8023886:	4620      	mov	r0, r4
 8023888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802388c:	080317b4 	.word	0x080317b4
 8023890:	080317c5 	.word	0x080317c5

08023894 <__hi0bits>:
 8023894:	4603      	mov	r3, r0
 8023896:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802389a:	bf3a      	itte	cc
 802389c:	0403      	lslcc	r3, r0, #16
 802389e:	2010      	movcc	r0, #16
 80238a0:	2000      	movcs	r0, #0
 80238a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80238a6:	bf3c      	itt	cc
 80238a8:	021b      	lslcc	r3, r3, #8
 80238aa:	3008      	addcc	r0, #8
 80238ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80238b0:	bf3c      	itt	cc
 80238b2:	011b      	lslcc	r3, r3, #4
 80238b4:	3004      	addcc	r0, #4
 80238b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80238ba:	bf3c      	itt	cc
 80238bc:	009b      	lslcc	r3, r3, #2
 80238be:	3002      	addcc	r0, #2
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	db05      	blt.n	80238d0 <__hi0bits+0x3c>
 80238c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80238c8:	f100 0001 	add.w	r0, r0, #1
 80238cc:	bf08      	it	eq
 80238ce:	2020      	moveq	r0, #32
 80238d0:	4770      	bx	lr

080238d2 <__lo0bits>:
 80238d2:	6803      	ldr	r3, [r0, #0]
 80238d4:	4602      	mov	r2, r0
 80238d6:	f013 0007 	ands.w	r0, r3, #7
 80238da:	d00b      	beq.n	80238f4 <__lo0bits+0x22>
 80238dc:	07d9      	lsls	r1, r3, #31
 80238de:	d421      	bmi.n	8023924 <__lo0bits+0x52>
 80238e0:	0798      	lsls	r0, r3, #30
 80238e2:	bf49      	itett	mi
 80238e4:	085b      	lsrmi	r3, r3, #1
 80238e6:	089b      	lsrpl	r3, r3, #2
 80238e8:	2001      	movmi	r0, #1
 80238ea:	6013      	strmi	r3, [r2, #0]
 80238ec:	bf5c      	itt	pl
 80238ee:	2002      	movpl	r0, #2
 80238f0:	6013      	strpl	r3, [r2, #0]
 80238f2:	4770      	bx	lr
 80238f4:	b299      	uxth	r1, r3
 80238f6:	b909      	cbnz	r1, 80238fc <__lo0bits+0x2a>
 80238f8:	2010      	movs	r0, #16
 80238fa:	0c1b      	lsrs	r3, r3, #16
 80238fc:	b2d9      	uxtb	r1, r3
 80238fe:	b909      	cbnz	r1, 8023904 <__lo0bits+0x32>
 8023900:	3008      	adds	r0, #8
 8023902:	0a1b      	lsrs	r3, r3, #8
 8023904:	0719      	lsls	r1, r3, #28
 8023906:	bf04      	itt	eq
 8023908:	091b      	lsreq	r3, r3, #4
 802390a:	3004      	addeq	r0, #4
 802390c:	0799      	lsls	r1, r3, #30
 802390e:	bf04      	itt	eq
 8023910:	089b      	lsreq	r3, r3, #2
 8023912:	3002      	addeq	r0, #2
 8023914:	07d9      	lsls	r1, r3, #31
 8023916:	d403      	bmi.n	8023920 <__lo0bits+0x4e>
 8023918:	085b      	lsrs	r3, r3, #1
 802391a:	f100 0001 	add.w	r0, r0, #1
 802391e:	d003      	beq.n	8023928 <__lo0bits+0x56>
 8023920:	6013      	str	r3, [r2, #0]
 8023922:	4770      	bx	lr
 8023924:	2000      	movs	r0, #0
 8023926:	4770      	bx	lr
 8023928:	2020      	movs	r0, #32
 802392a:	4770      	bx	lr

0802392c <__i2b>:
 802392c:	b510      	push	{r4, lr}
 802392e:	460c      	mov	r4, r1
 8023930:	2101      	movs	r1, #1
 8023932:	f7ff ff07 	bl	8023744 <_Balloc>
 8023936:	4602      	mov	r2, r0
 8023938:	b928      	cbnz	r0, 8023946 <__i2b+0x1a>
 802393a:	f240 1145 	movw	r1, #325	@ 0x145
 802393e:	4b04      	ldr	r3, [pc, #16]	@ (8023950 <__i2b+0x24>)
 8023940:	4804      	ldr	r0, [pc, #16]	@ (8023954 <__i2b+0x28>)
 8023942:	f7fe ff87 	bl	8022854 <__assert_func>
 8023946:	2301      	movs	r3, #1
 8023948:	6144      	str	r4, [r0, #20]
 802394a:	6103      	str	r3, [r0, #16]
 802394c:	bd10      	pop	{r4, pc}
 802394e:	bf00      	nop
 8023950:	080317b4 	.word	0x080317b4
 8023954:	080317c5 	.word	0x080317c5

08023958 <__multiply>:
 8023958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802395c:	4617      	mov	r7, r2
 802395e:	690a      	ldr	r2, [r1, #16]
 8023960:	693b      	ldr	r3, [r7, #16]
 8023962:	4689      	mov	r9, r1
 8023964:	429a      	cmp	r2, r3
 8023966:	bfa2      	ittt	ge
 8023968:	463b      	movge	r3, r7
 802396a:	460f      	movge	r7, r1
 802396c:	4699      	movge	r9, r3
 802396e:	693d      	ldr	r5, [r7, #16]
 8023970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023974:	68bb      	ldr	r3, [r7, #8]
 8023976:	6879      	ldr	r1, [r7, #4]
 8023978:	eb05 060a 	add.w	r6, r5, sl
 802397c:	42b3      	cmp	r3, r6
 802397e:	b085      	sub	sp, #20
 8023980:	bfb8      	it	lt
 8023982:	3101      	addlt	r1, #1
 8023984:	f7ff fede 	bl	8023744 <_Balloc>
 8023988:	b930      	cbnz	r0, 8023998 <__multiply+0x40>
 802398a:	4602      	mov	r2, r0
 802398c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8023990:	4b40      	ldr	r3, [pc, #256]	@ (8023a94 <__multiply+0x13c>)
 8023992:	4841      	ldr	r0, [pc, #260]	@ (8023a98 <__multiply+0x140>)
 8023994:	f7fe ff5e 	bl	8022854 <__assert_func>
 8023998:	f100 0414 	add.w	r4, r0, #20
 802399c:	4623      	mov	r3, r4
 802399e:	2200      	movs	r2, #0
 80239a0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80239a4:	4573      	cmp	r3, lr
 80239a6:	d320      	bcc.n	80239ea <__multiply+0x92>
 80239a8:	f107 0814 	add.w	r8, r7, #20
 80239ac:	f109 0114 	add.w	r1, r9, #20
 80239b0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80239b4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80239b8:	9302      	str	r3, [sp, #8]
 80239ba:	1beb      	subs	r3, r5, r7
 80239bc:	3b15      	subs	r3, #21
 80239be:	f023 0303 	bic.w	r3, r3, #3
 80239c2:	3304      	adds	r3, #4
 80239c4:	3715      	adds	r7, #21
 80239c6:	42bd      	cmp	r5, r7
 80239c8:	bf38      	it	cc
 80239ca:	2304      	movcc	r3, #4
 80239cc:	9301      	str	r3, [sp, #4]
 80239ce:	9b02      	ldr	r3, [sp, #8]
 80239d0:	9103      	str	r1, [sp, #12]
 80239d2:	428b      	cmp	r3, r1
 80239d4:	d80c      	bhi.n	80239f0 <__multiply+0x98>
 80239d6:	2e00      	cmp	r6, #0
 80239d8:	dd03      	ble.n	80239e2 <__multiply+0x8a>
 80239da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80239de:	2b00      	cmp	r3, #0
 80239e0:	d055      	beq.n	8023a8e <__multiply+0x136>
 80239e2:	6106      	str	r6, [r0, #16]
 80239e4:	b005      	add	sp, #20
 80239e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239ea:	f843 2b04 	str.w	r2, [r3], #4
 80239ee:	e7d9      	b.n	80239a4 <__multiply+0x4c>
 80239f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80239f4:	f1ba 0f00 	cmp.w	sl, #0
 80239f8:	d01f      	beq.n	8023a3a <__multiply+0xe2>
 80239fa:	46c4      	mov	ip, r8
 80239fc:	46a1      	mov	r9, r4
 80239fe:	2700      	movs	r7, #0
 8023a00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8023a04:	f8d9 3000 	ldr.w	r3, [r9]
 8023a08:	fa1f fb82 	uxth.w	fp, r2
 8023a0c:	b29b      	uxth	r3, r3
 8023a0e:	fb0a 330b 	mla	r3, sl, fp, r3
 8023a12:	443b      	add	r3, r7
 8023a14:	f8d9 7000 	ldr.w	r7, [r9]
 8023a18:	0c12      	lsrs	r2, r2, #16
 8023a1a:	0c3f      	lsrs	r7, r7, #16
 8023a1c:	fb0a 7202 	mla	r2, sl, r2, r7
 8023a20:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8023a24:	b29b      	uxth	r3, r3
 8023a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023a2a:	4565      	cmp	r5, ip
 8023a2c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8023a30:	f849 3b04 	str.w	r3, [r9], #4
 8023a34:	d8e4      	bhi.n	8023a00 <__multiply+0xa8>
 8023a36:	9b01      	ldr	r3, [sp, #4]
 8023a38:	50e7      	str	r7, [r4, r3]
 8023a3a:	9b03      	ldr	r3, [sp, #12]
 8023a3c:	3104      	adds	r1, #4
 8023a3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8023a42:	f1b9 0f00 	cmp.w	r9, #0
 8023a46:	d020      	beq.n	8023a8a <__multiply+0x132>
 8023a48:	4647      	mov	r7, r8
 8023a4a:	46a4      	mov	ip, r4
 8023a4c:	f04f 0a00 	mov.w	sl, #0
 8023a50:	6823      	ldr	r3, [r4, #0]
 8023a52:	f8b7 b000 	ldrh.w	fp, [r7]
 8023a56:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8023a5a:	b29b      	uxth	r3, r3
 8023a5c:	fb09 220b 	mla	r2, r9, fp, r2
 8023a60:	4452      	add	r2, sl
 8023a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023a66:	f84c 3b04 	str.w	r3, [ip], #4
 8023a6a:	f857 3b04 	ldr.w	r3, [r7], #4
 8023a6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023a72:	f8bc 3000 	ldrh.w	r3, [ip]
 8023a76:	42bd      	cmp	r5, r7
 8023a78:	fb09 330a 	mla	r3, r9, sl, r3
 8023a7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8023a80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023a84:	d8e5      	bhi.n	8023a52 <__multiply+0xfa>
 8023a86:	9a01      	ldr	r2, [sp, #4]
 8023a88:	50a3      	str	r3, [r4, r2]
 8023a8a:	3404      	adds	r4, #4
 8023a8c:	e79f      	b.n	80239ce <__multiply+0x76>
 8023a8e:	3e01      	subs	r6, #1
 8023a90:	e7a1      	b.n	80239d6 <__multiply+0x7e>
 8023a92:	bf00      	nop
 8023a94:	080317b4 	.word	0x080317b4
 8023a98:	080317c5 	.word	0x080317c5

08023a9c <__pow5mult>:
 8023a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023aa0:	4615      	mov	r5, r2
 8023aa2:	f012 0203 	ands.w	r2, r2, #3
 8023aa6:	4607      	mov	r7, r0
 8023aa8:	460e      	mov	r6, r1
 8023aaa:	d007      	beq.n	8023abc <__pow5mult+0x20>
 8023aac:	4c25      	ldr	r4, [pc, #148]	@ (8023b44 <__pow5mult+0xa8>)
 8023aae:	3a01      	subs	r2, #1
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023ab6:	f7ff fea7 	bl	8023808 <__multadd>
 8023aba:	4606      	mov	r6, r0
 8023abc:	10ad      	asrs	r5, r5, #2
 8023abe:	d03d      	beq.n	8023b3c <__pow5mult+0xa0>
 8023ac0:	69fc      	ldr	r4, [r7, #28]
 8023ac2:	b97c      	cbnz	r4, 8023ae4 <__pow5mult+0x48>
 8023ac4:	2010      	movs	r0, #16
 8023ac6:	f7ff fd87 	bl	80235d8 <malloc>
 8023aca:	4602      	mov	r2, r0
 8023acc:	61f8      	str	r0, [r7, #28]
 8023ace:	b928      	cbnz	r0, 8023adc <__pow5mult+0x40>
 8023ad0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8023ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8023b48 <__pow5mult+0xac>)
 8023ad6:	481d      	ldr	r0, [pc, #116]	@ (8023b4c <__pow5mult+0xb0>)
 8023ad8:	f7fe febc 	bl	8022854 <__assert_func>
 8023adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023ae0:	6004      	str	r4, [r0, #0]
 8023ae2:	60c4      	str	r4, [r0, #12]
 8023ae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8023ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023aec:	b94c      	cbnz	r4, 8023b02 <__pow5mult+0x66>
 8023aee:	f240 2171 	movw	r1, #625	@ 0x271
 8023af2:	4638      	mov	r0, r7
 8023af4:	f7ff ff1a 	bl	802392c <__i2b>
 8023af8:	2300      	movs	r3, #0
 8023afa:	4604      	mov	r4, r0
 8023afc:	f8c8 0008 	str.w	r0, [r8, #8]
 8023b00:	6003      	str	r3, [r0, #0]
 8023b02:	f04f 0900 	mov.w	r9, #0
 8023b06:	07eb      	lsls	r3, r5, #31
 8023b08:	d50a      	bpl.n	8023b20 <__pow5mult+0x84>
 8023b0a:	4631      	mov	r1, r6
 8023b0c:	4622      	mov	r2, r4
 8023b0e:	4638      	mov	r0, r7
 8023b10:	f7ff ff22 	bl	8023958 <__multiply>
 8023b14:	4680      	mov	r8, r0
 8023b16:	4631      	mov	r1, r6
 8023b18:	4638      	mov	r0, r7
 8023b1a:	f7ff fe53 	bl	80237c4 <_Bfree>
 8023b1e:	4646      	mov	r6, r8
 8023b20:	106d      	asrs	r5, r5, #1
 8023b22:	d00b      	beq.n	8023b3c <__pow5mult+0xa0>
 8023b24:	6820      	ldr	r0, [r4, #0]
 8023b26:	b938      	cbnz	r0, 8023b38 <__pow5mult+0x9c>
 8023b28:	4622      	mov	r2, r4
 8023b2a:	4621      	mov	r1, r4
 8023b2c:	4638      	mov	r0, r7
 8023b2e:	f7ff ff13 	bl	8023958 <__multiply>
 8023b32:	6020      	str	r0, [r4, #0]
 8023b34:	f8c0 9000 	str.w	r9, [r0]
 8023b38:	4604      	mov	r4, r0
 8023b3a:	e7e4      	b.n	8023b06 <__pow5mult+0x6a>
 8023b3c:	4630      	mov	r0, r6
 8023b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023b42:	bf00      	nop
 8023b44:	08031958 	.word	0x08031958
 8023b48:	08031672 	.word	0x08031672
 8023b4c:	080317c5 	.word	0x080317c5

08023b50 <__lshift>:
 8023b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b54:	460c      	mov	r4, r1
 8023b56:	4607      	mov	r7, r0
 8023b58:	4691      	mov	r9, r2
 8023b5a:	6923      	ldr	r3, [r4, #16]
 8023b5c:	6849      	ldr	r1, [r1, #4]
 8023b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023b62:	68a3      	ldr	r3, [r4, #8]
 8023b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023b68:	f108 0601 	add.w	r6, r8, #1
 8023b6c:	42b3      	cmp	r3, r6
 8023b6e:	db0b      	blt.n	8023b88 <__lshift+0x38>
 8023b70:	4638      	mov	r0, r7
 8023b72:	f7ff fde7 	bl	8023744 <_Balloc>
 8023b76:	4605      	mov	r5, r0
 8023b78:	b948      	cbnz	r0, 8023b8e <__lshift+0x3e>
 8023b7a:	4602      	mov	r2, r0
 8023b7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023b80:	4b27      	ldr	r3, [pc, #156]	@ (8023c20 <__lshift+0xd0>)
 8023b82:	4828      	ldr	r0, [pc, #160]	@ (8023c24 <__lshift+0xd4>)
 8023b84:	f7fe fe66 	bl	8022854 <__assert_func>
 8023b88:	3101      	adds	r1, #1
 8023b8a:	005b      	lsls	r3, r3, #1
 8023b8c:	e7ee      	b.n	8023b6c <__lshift+0x1c>
 8023b8e:	2300      	movs	r3, #0
 8023b90:	f100 0114 	add.w	r1, r0, #20
 8023b94:	f100 0210 	add.w	r2, r0, #16
 8023b98:	4618      	mov	r0, r3
 8023b9a:	4553      	cmp	r3, sl
 8023b9c:	db33      	blt.n	8023c06 <__lshift+0xb6>
 8023b9e:	6920      	ldr	r0, [r4, #16]
 8023ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023ba4:	f104 0314 	add.w	r3, r4, #20
 8023ba8:	f019 091f 	ands.w	r9, r9, #31
 8023bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023bb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023bb4:	d02b      	beq.n	8023c0e <__lshift+0xbe>
 8023bb6:	468a      	mov	sl, r1
 8023bb8:	2200      	movs	r2, #0
 8023bba:	f1c9 0e20 	rsb	lr, r9, #32
 8023bbe:	6818      	ldr	r0, [r3, #0]
 8023bc0:	fa00 f009 	lsl.w	r0, r0, r9
 8023bc4:	4310      	orrs	r0, r2
 8023bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8023bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8023bce:	459c      	cmp	ip, r3
 8023bd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8023bd4:	d8f3      	bhi.n	8023bbe <__lshift+0x6e>
 8023bd6:	ebac 0304 	sub.w	r3, ip, r4
 8023bda:	3b15      	subs	r3, #21
 8023bdc:	f023 0303 	bic.w	r3, r3, #3
 8023be0:	3304      	adds	r3, #4
 8023be2:	f104 0015 	add.w	r0, r4, #21
 8023be6:	4560      	cmp	r0, ip
 8023be8:	bf88      	it	hi
 8023bea:	2304      	movhi	r3, #4
 8023bec:	50ca      	str	r2, [r1, r3]
 8023bee:	b10a      	cbz	r2, 8023bf4 <__lshift+0xa4>
 8023bf0:	f108 0602 	add.w	r6, r8, #2
 8023bf4:	3e01      	subs	r6, #1
 8023bf6:	4638      	mov	r0, r7
 8023bf8:	4621      	mov	r1, r4
 8023bfa:	612e      	str	r6, [r5, #16]
 8023bfc:	f7ff fde2 	bl	80237c4 <_Bfree>
 8023c00:	4628      	mov	r0, r5
 8023c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8023c0a:	3301      	adds	r3, #1
 8023c0c:	e7c5      	b.n	8023b9a <__lshift+0x4a>
 8023c0e:	3904      	subs	r1, #4
 8023c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8023c14:	459c      	cmp	ip, r3
 8023c16:	f841 2f04 	str.w	r2, [r1, #4]!
 8023c1a:	d8f9      	bhi.n	8023c10 <__lshift+0xc0>
 8023c1c:	e7ea      	b.n	8023bf4 <__lshift+0xa4>
 8023c1e:	bf00      	nop
 8023c20:	080317b4 	.word	0x080317b4
 8023c24:	080317c5 	.word	0x080317c5

08023c28 <__mcmp>:
 8023c28:	4603      	mov	r3, r0
 8023c2a:	690a      	ldr	r2, [r1, #16]
 8023c2c:	6900      	ldr	r0, [r0, #16]
 8023c2e:	b530      	push	{r4, r5, lr}
 8023c30:	1a80      	subs	r0, r0, r2
 8023c32:	d10e      	bne.n	8023c52 <__mcmp+0x2a>
 8023c34:	3314      	adds	r3, #20
 8023c36:	3114      	adds	r1, #20
 8023c38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023c3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023c48:	4295      	cmp	r5, r2
 8023c4a:	d003      	beq.n	8023c54 <__mcmp+0x2c>
 8023c4c:	d205      	bcs.n	8023c5a <__mcmp+0x32>
 8023c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c52:	bd30      	pop	{r4, r5, pc}
 8023c54:	42a3      	cmp	r3, r4
 8023c56:	d3f3      	bcc.n	8023c40 <__mcmp+0x18>
 8023c58:	e7fb      	b.n	8023c52 <__mcmp+0x2a>
 8023c5a:	2001      	movs	r0, #1
 8023c5c:	e7f9      	b.n	8023c52 <__mcmp+0x2a>
	...

08023c60 <__mdiff>:
 8023c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	4689      	mov	r9, r1
 8023c66:	4606      	mov	r6, r0
 8023c68:	4611      	mov	r1, r2
 8023c6a:	4648      	mov	r0, r9
 8023c6c:	4614      	mov	r4, r2
 8023c6e:	f7ff ffdb 	bl	8023c28 <__mcmp>
 8023c72:	1e05      	subs	r5, r0, #0
 8023c74:	d112      	bne.n	8023c9c <__mdiff+0x3c>
 8023c76:	4629      	mov	r1, r5
 8023c78:	4630      	mov	r0, r6
 8023c7a:	f7ff fd63 	bl	8023744 <_Balloc>
 8023c7e:	4602      	mov	r2, r0
 8023c80:	b928      	cbnz	r0, 8023c8e <__mdiff+0x2e>
 8023c82:	f240 2137 	movw	r1, #567	@ 0x237
 8023c86:	4b3e      	ldr	r3, [pc, #248]	@ (8023d80 <__mdiff+0x120>)
 8023c88:	483e      	ldr	r0, [pc, #248]	@ (8023d84 <__mdiff+0x124>)
 8023c8a:	f7fe fde3 	bl	8022854 <__assert_func>
 8023c8e:	2301      	movs	r3, #1
 8023c90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023c94:	4610      	mov	r0, r2
 8023c96:	b003      	add	sp, #12
 8023c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c9c:	bfbc      	itt	lt
 8023c9e:	464b      	movlt	r3, r9
 8023ca0:	46a1      	movlt	r9, r4
 8023ca2:	4630      	mov	r0, r6
 8023ca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023ca8:	bfba      	itte	lt
 8023caa:	461c      	movlt	r4, r3
 8023cac:	2501      	movlt	r5, #1
 8023cae:	2500      	movge	r5, #0
 8023cb0:	f7ff fd48 	bl	8023744 <_Balloc>
 8023cb4:	4602      	mov	r2, r0
 8023cb6:	b918      	cbnz	r0, 8023cc0 <__mdiff+0x60>
 8023cb8:	f240 2145 	movw	r1, #581	@ 0x245
 8023cbc:	4b30      	ldr	r3, [pc, #192]	@ (8023d80 <__mdiff+0x120>)
 8023cbe:	e7e3      	b.n	8023c88 <__mdiff+0x28>
 8023cc0:	f100 0b14 	add.w	fp, r0, #20
 8023cc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023cc8:	f109 0310 	add.w	r3, r9, #16
 8023ccc:	60c5      	str	r5, [r0, #12]
 8023cce:	f04f 0c00 	mov.w	ip, #0
 8023cd2:	f109 0514 	add.w	r5, r9, #20
 8023cd6:	46d9      	mov	r9, fp
 8023cd8:	6926      	ldr	r6, [r4, #16]
 8023cda:	f104 0e14 	add.w	lr, r4, #20
 8023cde:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8023ce2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8023ce6:	9301      	str	r3, [sp, #4]
 8023ce8:	9b01      	ldr	r3, [sp, #4]
 8023cea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8023cee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8023cf2:	b281      	uxth	r1, r0
 8023cf4:	9301      	str	r3, [sp, #4]
 8023cf6:	fa1f f38a 	uxth.w	r3, sl
 8023cfa:	1a5b      	subs	r3, r3, r1
 8023cfc:	0c00      	lsrs	r0, r0, #16
 8023cfe:	4463      	add	r3, ip
 8023d00:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8023d04:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8023d08:	b29b      	uxth	r3, r3
 8023d0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023d0e:	4576      	cmp	r6, lr
 8023d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023d14:	f849 3b04 	str.w	r3, [r9], #4
 8023d18:	d8e6      	bhi.n	8023ce8 <__mdiff+0x88>
 8023d1a:	1b33      	subs	r3, r6, r4
 8023d1c:	3b15      	subs	r3, #21
 8023d1e:	f023 0303 	bic.w	r3, r3, #3
 8023d22:	3415      	adds	r4, #21
 8023d24:	3304      	adds	r3, #4
 8023d26:	42a6      	cmp	r6, r4
 8023d28:	bf38      	it	cc
 8023d2a:	2304      	movcc	r3, #4
 8023d2c:	441d      	add	r5, r3
 8023d2e:	445b      	add	r3, fp
 8023d30:	461e      	mov	r6, r3
 8023d32:	462c      	mov	r4, r5
 8023d34:	4544      	cmp	r4, r8
 8023d36:	d30e      	bcc.n	8023d56 <__mdiff+0xf6>
 8023d38:	f108 0103 	add.w	r1, r8, #3
 8023d3c:	1b49      	subs	r1, r1, r5
 8023d3e:	f021 0103 	bic.w	r1, r1, #3
 8023d42:	3d03      	subs	r5, #3
 8023d44:	45a8      	cmp	r8, r5
 8023d46:	bf38      	it	cc
 8023d48:	2100      	movcc	r1, #0
 8023d4a:	440b      	add	r3, r1
 8023d4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023d50:	b199      	cbz	r1, 8023d7a <__mdiff+0x11a>
 8023d52:	6117      	str	r7, [r2, #16]
 8023d54:	e79e      	b.n	8023c94 <__mdiff+0x34>
 8023d56:	46e6      	mov	lr, ip
 8023d58:	f854 1b04 	ldr.w	r1, [r4], #4
 8023d5c:	fa1f fc81 	uxth.w	ip, r1
 8023d60:	44f4      	add	ip, lr
 8023d62:	0c08      	lsrs	r0, r1, #16
 8023d64:	4471      	add	r1, lr
 8023d66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8023d6a:	b289      	uxth	r1, r1
 8023d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8023d70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023d74:	f846 1b04 	str.w	r1, [r6], #4
 8023d78:	e7dc      	b.n	8023d34 <__mdiff+0xd4>
 8023d7a:	3f01      	subs	r7, #1
 8023d7c:	e7e6      	b.n	8023d4c <__mdiff+0xec>
 8023d7e:	bf00      	nop
 8023d80:	080317b4 	.word	0x080317b4
 8023d84:	080317c5 	.word	0x080317c5

08023d88 <__d2b>:
 8023d88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8023d8c:	2101      	movs	r1, #1
 8023d8e:	4690      	mov	r8, r2
 8023d90:	4699      	mov	r9, r3
 8023d92:	9e08      	ldr	r6, [sp, #32]
 8023d94:	f7ff fcd6 	bl	8023744 <_Balloc>
 8023d98:	4604      	mov	r4, r0
 8023d9a:	b930      	cbnz	r0, 8023daa <__d2b+0x22>
 8023d9c:	4602      	mov	r2, r0
 8023d9e:	f240 310f 	movw	r1, #783	@ 0x30f
 8023da2:	4b23      	ldr	r3, [pc, #140]	@ (8023e30 <__d2b+0xa8>)
 8023da4:	4823      	ldr	r0, [pc, #140]	@ (8023e34 <__d2b+0xac>)
 8023da6:	f7fe fd55 	bl	8022854 <__assert_func>
 8023daa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023db2:	b10d      	cbz	r5, 8023db8 <__d2b+0x30>
 8023db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023db8:	9301      	str	r3, [sp, #4]
 8023dba:	f1b8 0300 	subs.w	r3, r8, #0
 8023dbe:	d024      	beq.n	8023e0a <__d2b+0x82>
 8023dc0:	4668      	mov	r0, sp
 8023dc2:	9300      	str	r3, [sp, #0]
 8023dc4:	f7ff fd85 	bl	80238d2 <__lo0bits>
 8023dc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023dcc:	b1d8      	cbz	r0, 8023e06 <__d2b+0x7e>
 8023dce:	f1c0 0320 	rsb	r3, r0, #32
 8023dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8023dd6:	430b      	orrs	r3, r1
 8023dd8:	40c2      	lsrs	r2, r0
 8023dda:	6163      	str	r3, [r4, #20]
 8023ddc:	9201      	str	r2, [sp, #4]
 8023dde:	9b01      	ldr	r3, [sp, #4]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	bf0c      	ite	eq
 8023de4:	2201      	moveq	r2, #1
 8023de6:	2202      	movne	r2, #2
 8023de8:	61a3      	str	r3, [r4, #24]
 8023dea:	6122      	str	r2, [r4, #16]
 8023dec:	b1ad      	cbz	r5, 8023e1a <__d2b+0x92>
 8023dee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8023df2:	4405      	add	r5, r0
 8023df4:	6035      	str	r5, [r6, #0]
 8023df6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dfc:	6018      	str	r0, [r3, #0]
 8023dfe:	4620      	mov	r0, r4
 8023e00:	b002      	add	sp, #8
 8023e02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8023e06:	6161      	str	r1, [r4, #20]
 8023e08:	e7e9      	b.n	8023dde <__d2b+0x56>
 8023e0a:	a801      	add	r0, sp, #4
 8023e0c:	f7ff fd61 	bl	80238d2 <__lo0bits>
 8023e10:	9b01      	ldr	r3, [sp, #4]
 8023e12:	2201      	movs	r2, #1
 8023e14:	6163      	str	r3, [r4, #20]
 8023e16:	3020      	adds	r0, #32
 8023e18:	e7e7      	b.n	8023dea <__d2b+0x62>
 8023e1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8023e1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023e22:	6030      	str	r0, [r6, #0]
 8023e24:	6918      	ldr	r0, [r3, #16]
 8023e26:	f7ff fd35 	bl	8023894 <__hi0bits>
 8023e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023e2e:	e7e4      	b.n	8023dfa <__d2b+0x72>
 8023e30:	080317b4 	.word	0x080317b4
 8023e34:	080317c5 	.word	0x080317c5

08023e38 <__ssputs_r>:
 8023e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e3c:	461f      	mov	r7, r3
 8023e3e:	688e      	ldr	r6, [r1, #8]
 8023e40:	4682      	mov	sl, r0
 8023e42:	42be      	cmp	r6, r7
 8023e44:	460c      	mov	r4, r1
 8023e46:	4690      	mov	r8, r2
 8023e48:	680b      	ldr	r3, [r1, #0]
 8023e4a:	d82d      	bhi.n	8023ea8 <__ssputs_r+0x70>
 8023e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023e50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023e54:	d026      	beq.n	8023ea4 <__ssputs_r+0x6c>
 8023e56:	6965      	ldr	r5, [r4, #20]
 8023e58:	6909      	ldr	r1, [r1, #16]
 8023e5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e5e:	eba3 0901 	sub.w	r9, r3, r1
 8023e62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023e66:	1c7b      	adds	r3, r7, #1
 8023e68:	444b      	add	r3, r9
 8023e6a:	106d      	asrs	r5, r5, #1
 8023e6c:	429d      	cmp	r5, r3
 8023e6e:	bf38      	it	cc
 8023e70:	461d      	movcc	r5, r3
 8023e72:	0553      	lsls	r3, r2, #21
 8023e74:	d527      	bpl.n	8023ec6 <__ssputs_r+0x8e>
 8023e76:	4629      	mov	r1, r5
 8023e78:	f7ff fbd8 	bl	802362c <_malloc_r>
 8023e7c:	4606      	mov	r6, r0
 8023e7e:	b360      	cbz	r0, 8023eda <__ssputs_r+0xa2>
 8023e80:	464a      	mov	r2, r9
 8023e82:	6921      	ldr	r1, [r4, #16]
 8023e84:	f7fe fcd7 	bl	8022836 <memcpy>
 8023e88:	89a3      	ldrh	r3, [r4, #12]
 8023e8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8023e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023e92:	81a3      	strh	r3, [r4, #12]
 8023e94:	6126      	str	r6, [r4, #16]
 8023e96:	444e      	add	r6, r9
 8023e98:	6026      	str	r6, [r4, #0]
 8023e9a:	463e      	mov	r6, r7
 8023e9c:	6165      	str	r5, [r4, #20]
 8023e9e:	eba5 0509 	sub.w	r5, r5, r9
 8023ea2:	60a5      	str	r5, [r4, #8]
 8023ea4:	42be      	cmp	r6, r7
 8023ea6:	d900      	bls.n	8023eaa <__ssputs_r+0x72>
 8023ea8:	463e      	mov	r6, r7
 8023eaa:	4632      	mov	r2, r6
 8023eac:	4641      	mov	r1, r8
 8023eae:	6820      	ldr	r0, [r4, #0]
 8023eb0:	f7fe fb82 	bl	80225b8 <memmove>
 8023eb4:	2000      	movs	r0, #0
 8023eb6:	68a3      	ldr	r3, [r4, #8]
 8023eb8:	1b9b      	subs	r3, r3, r6
 8023eba:	60a3      	str	r3, [r4, #8]
 8023ebc:	6823      	ldr	r3, [r4, #0]
 8023ebe:	4433      	add	r3, r6
 8023ec0:	6023      	str	r3, [r4, #0]
 8023ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ec6:	462a      	mov	r2, r5
 8023ec8:	f000 ff53 	bl	8024d72 <_realloc_r>
 8023ecc:	4606      	mov	r6, r0
 8023ece:	2800      	cmp	r0, #0
 8023ed0:	d1e0      	bne.n	8023e94 <__ssputs_r+0x5c>
 8023ed2:	4650      	mov	r0, sl
 8023ed4:	6921      	ldr	r1, [r4, #16]
 8023ed6:	f7ff fb37 	bl	8023548 <_free_r>
 8023eda:	230c      	movs	r3, #12
 8023edc:	f8ca 3000 	str.w	r3, [sl]
 8023ee0:	89a3      	ldrh	r3, [r4, #12]
 8023ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8023ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023eea:	81a3      	strh	r3, [r4, #12]
 8023eec:	e7e9      	b.n	8023ec2 <__ssputs_r+0x8a>
	...

08023ef0 <_svfiprintf_r>:
 8023ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ef4:	4698      	mov	r8, r3
 8023ef6:	898b      	ldrh	r3, [r1, #12]
 8023ef8:	4607      	mov	r7, r0
 8023efa:	061b      	lsls	r3, r3, #24
 8023efc:	460d      	mov	r5, r1
 8023efe:	4614      	mov	r4, r2
 8023f00:	b09d      	sub	sp, #116	@ 0x74
 8023f02:	d510      	bpl.n	8023f26 <_svfiprintf_r+0x36>
 8023f04:	690b      	ldr	r3, [r1, #16]
 8023f06:	b973      	cbnz	r3, 8023f26 <_svfiprintf_r+0x36>
 8023f08:	2140      	movs	r1, #64	@ 0x40
 8023f0a:	f7ff fb8f 	bl	802362c <_malloc_r>
 8023f0e:	6028      	str	r0, [r5, #0]
 8023f10:	6128      	str	r0, [r5, #16]
 8023f12:	b930      	cbnz	r0, 8023f22 <_svfiprintf_r+0x32>
 8023f14:	230c      	movs	r3, #12
 8023f16:	603b      	str	r3, [r7, #0]
 8023f18:	f04f 30ff 	mov.w	r0, #4294967295
 8023f1c:	b01d      	add	sp, #116	@ 0x74
 8023f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f22:	2340      	movs	r3, #64	@ 0x40
 8023f24:	616b      	str	r3, [r5, #20]
 8023f26:	2300      	movs	r3, #0
 8023f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f2a:	2320      	movs	r3, #32
 8023f2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023f30:	2330      	movs	r3, #48	@ 0x30
 8023f32:	f04f 0901 	mov.w	r9, #1
 8023f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8023f3a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80240d4 <_svfiprintf_r+0x1e4>
 8023f3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023f42:	4623      	mov	r3, r4
 8023f44:	469a      	mov	sl, r3
 8023f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f4a:	b10a      	cbz	r2, 8023f50 <_svfiprintf_r+0x60>
 8023f4c:	2a25      	cmp	r2, #37	@ 0x25
 8023f4e:	d1f9      	bne.n	8023f44 <_svfiprintf_r+0x54>
 8023f50:	ebba 0b04 	subs.w	fp, sl, r4
 8023f54:	d00b      	beq.n	8023f6e <_svfiprintf_r+0x7e>
 8023f56:	465b      	mov	r3, fp
 8023f58:	4622      	mov	r2, r4
 8023f5a:	4629      	mov	r1, r5
 8023f5c:	4638      	mov	r0, r7
 8023f5e:	f7ff ff6b 	bl	8023e38 <__ssputs_r>
 8023f62:	3001      	adds	r0, #1
 8023f64:	f000 80a7 	beq.w	80240b6 <_svfiprintf_r+0x1c6>
 8023f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023f6a:	445a      	add	r2, fp
 8023f6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8023f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	f000 809f 	beq.w	80240b6 <_svfiprintf_r+0x1c6>
 8023f78:	2300      	movs	r3, #0
 8023f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8023f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023f82:	f10a 0a01 	add.w	sl, sl, #1
 8023f86:	9304      	str	r3, [sp, #16]
 8023f88:	9307      	str	r3, [sp, #28]
 8023f8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023f8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023f90:	4654      	mov	r4, sl
 8023f92:	2205      	movs	r2, #5
 8023f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f98:	484e      	ldr	r0, [pc, #312]	@ (80240d4 <_svfiprintf_r+0x1e4>)
 8023f9a:	f7fe fc3e 	bl	802281a <memchr>
 8023f9e:	9a04      	ldr	r2, [sp, #16]
 8023fa0:	b9d8      	cbnz	r0, 8023fda <_svfiprintf_r+0xea>
 8023fa2:	06d0      	lsls	r0, r2, #27
 8023fa4:	bf44      	itt	mi
 8023fa6:	2320      	movmi	r3, #32
 8023fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023fac:	0711      	lsls	r1, r2, #28
 8023fae:	bf44      	itt	mi
 8023fb0:	232b      	movmi	r3, #43	@ 0x2b
 8023fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8023fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8023fbc:	d015      	beq.n	8023fea <_svfiprintf_r+0xfa>
 8023fbe:	4654      	mov	r4, sl
 8023fc0:	2000      	movs	r0, #0
 8023fc2:	f04f 0c0a 	mov.w	ip, #10
 8023fc6:	9a07      	ldr	r2, [sp, #28]
 8023fc8:	4621      	mov	r1, r4
 8023fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023fce:	3b30      	subs	r3, #48	@ 0x30
 8023fd0:	2b09      	cmp	r3, #9
 8023fd2:	d94b      	bls.n	802406c <_svfiprintf_r+0x17c>
 8023fd4:	b1b0      	cbz	r0, 8024004 <_svfiprintf_r+0x114>
 8023fd6:	9207      	str	r2, [sp, #28]
 8023fd8:	e014      	b.n	8024004 <_svfiprintf_r+0x114>
 8023fda:	eba0 0308 	sub.w	r3, r0, r8
 8023fde:	fa09 f303 	lsl.w	r3, r9, r3
 8023fe2:	4313      	orrs	r3, r2
 8023fe4:	46a2      	mov	sl, r4
 8023fe6:	9304      	str	r3, [sp, #16]
 8023fe8:	e7d2      	b.n	8023f90 <_svfiprintf_r+0xa0>
 8023fea:	9b03      	ldr	r3, [sp, #12]
 8023fec:	1d19      	adds	r1, r3, #4
 8023fee:	681b      	ldr	r3, [r3, #0]
 8023ff0:	9103      	str	r1, [sp, #12]
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	bfbb      	ittet	lt
 8023ff6:	425b      	neglt	r3, r3
 8023ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8023ffc:	9307      	strge	r3, [sp, #28]
 8023ffe:	9307      	strlt	r3, [sp, #28]
 8024000:	bfb8      	it	lt
 8024002:	9204      	strlt	r2, [sp, #16]
 8024004:	7823      	ldrb	r3, [r4, #0]
 8024006:	2b2e      	cmp	r3, #46	@ 0x2e
 8024008:	d10a      	bne.n	8024020 <_svfiprintf_r+0x130>
 802400a:	7863      	ldrb	r3, [r4, #1]
 802400c:	2b2a      	cmp	r3, #42	@ 0x2a
 802400e:	d132      	bne.n	8024076 <_svfiprintf_r+0x186>
 8024010:	9b03      	ldr	r3, [sp, #12]
 8024012:	3402      	adds	r4, #2
 8024014:	1d1a      	adds	r2, r3, #4
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	9203      	str	r2, [sp, #12]
 802401a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802401e:	9305      	str	r3, [sp, #20]
 8024020:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80240d8 <_svfiprintf_r+0x1e8>
 8024024:	2203      	movs	r2, #3
 8024026:	4650      	mov	r0, sl
 8024028:	7821      	ldrb	r1, [r4, #0]
 802402a:	f7fe fbf6 	bl	802281a <memchr>
 802402e:	b138      	cbz	r0, 8024040 <_svfiprintf_r+0x150>
 8024030:	2240      	movs	r2, #64	@ 0x40
 8024032:	9b04      	ldr	r3, [sp, #16]
 8024034:	eba0 000a 	sub.w	r0, r0, sl
 8024038:	4082      	lsls	r2, r0
 802403a:	4313      	orrs	r3, r2
 802403c:	3401      	adds	r4, #1
 802403e:	9304      	str	r3, [sp, #16]
 8024040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024044:	2206      	movs	r2, #6
 8024046:	4825      	ldr	r0, [pc, #148]	@ (80240dc <_svfiprintf_r+0x1ec>)
 8024048:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802404c:	f7fe fbe5 	bl	802281a <memchr>
 8024050:	2800      	cmp	r0, #0
 8024052:	d036      	beq.n	80240c2 <_svfiprintf_r+0x1d2>
 8024054:	4b22      	ldr	r3, [pc, #136]	@ (80240e0 <_svfiprintf_r+0x1f0>)
 8024056:	bb1b      	cbnz	r3, 80240a0 <_svfiprintf_r+0x1b0>
 8024058:	9b03      	ldr	r3, [sp, #12]
 802405a:	3307      	adds	r3, #7
 802405c:	f023 0307 	bic.w	r3, r3, #7
 8024060:	3308      	adds	r3, #8
 8024062:	9303      	str	r3, [sp, #12]
 8024064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024066:	4433      	add	r3, r6
 8024068:	9309      	str	r3, [sp, #36]	@ 0x24
 802406a:	e76a      	b.n	8023f42 <_svfiprintf_r+0x52>
 802406c:	460c      	mov	r4, r1
 802406e:	2001      	movs	r0, #1
 8024070:	fb0c 3202 	mla	r2, ip, r2, r3
 8024074:	e7a8      	b.n	8023fc8 <_svfiprintf_r+0xd8>
 8024076:	2300      	movs	r3, #0
 8024078:	f04f 0c0a 	mov.w	ip, #10
 802407c:	4619      	mov	r1, r3
 802407e:	3401      	adds	r4, #1
 8024080:	9305      	str	r3, [sp, #20]
 8024082:	4620      	mov	r0, r4
 8024084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024088:	3a30      	subs	r2, #48	@ 0x30
 802408a:	2a09      	cmp	r2, #9
 802408c:	d903      	bls.n	8024096 <_svfiprintf_r+0x1a6>
 802408e:	2b00      	cmp	r3, #0
 8024090:	d0c6      	beq.n	8024020 <_svfiprintf_r+0x130>
 8024092:	9105      	str	r1, [sp, #20]
 8024094:	e7c4      	b.n	8024020 <_svfiprintf_r+0x130>
 8024096:	4604      	mov	r4, r0
 8024098:	2301      	movs	r3, #1
 802409a:	fb0c 2101 	mla	r1, ip, r1, r2
 802409e:	e7f0      	b.n	8024082 <_svfiprintf_r+0x192>
 80240a0:	ab03      	add	r3, sp, #12
 80240a2:	9300      	str	r3, [sp, #0]
 80240a4:	462a      	mov	r2, r5
 80240a6:	4638      	mov	r0, r7
 80240a8:	4b0e      	ldr	r3, [pc, #56]	@ (80240e4 <_svfiprintf_r+0x1f4>)
 80240aa:	a904      	add	r1, sp, #16
 80240ac:	f7fd fc4a 	bl	8021944 <_printf_float>
 80240b0:	1c42      	adds	r2, r0, #1
 80240b2:	4606      	mov	r6, r0
 80240b4:	d1d6      	bne.n	8024064 <_svfiprintf_r+0x174>
 80240b6:	89ab      	ldrh	r3, [r5, #12]
 80240b8:	065b      	lsls	r3, r3, #25
 80240ba:	f53f af2d 	bmi.w	8023f18 <_svfiprintf_r+0x28>
 80240be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240c0:	e72c      	b.n	8023f1c <_svfiprintf_r+0x2c>
 80240c2:	ab03      	add	r3, sp, #12
 80240c4:	9300      	str	r3, [sp, #0]
 80240c6:	462a      	mov	r2, r5
 80240c8:	4638      	mov	r0, r7
 80240ca:	4b06      	ldr	r3, [pc, #24]	@ (80240e4 <_svfiprintf_r+0x1f4>)
 80240cc:	a904      	add	r1, sp, #16
 80240ce:	f7fd fed7 	bl	8021e80 <_printf_i>
 80240d2:	e7ed      	b.n	80240b0 <_svfiprintf_r+0x1c0>
 80240d4:	0803181e 	.word	0x0803181e
 80240d8:	08031824 	.word	0x08031824
 80240dc:	08031828 	.word	0x08031828
 80240e0:	08021945 	.word	0x08021945
 80240e4:	08023e39 	.word	0x08023e39

080240e8 <_sungetc_r>:
 80240e8:	b538      	push	{r3, r4, r5, lr}
 80240ea:	1c4b      	adds	r3, r1, #1
 80240ec:	4614      	mov	r4, r2
 80240ee:	d103      	bne.n	80240f8 <_sungetc_r+0x10>
 80240f0:	f04f 35ff 	mov.w	r5, #4294967295
 80240f4:	4628      	mov	r0, r5
 80240f6:	bd38      	pop	{r3, r4, r5, pc}
 80240f8:	8993      	ldrh	r3, [r2, #12]
 80240fa:	b2cd      	uxtb	r5, r1
 80240fc:	f023 0320 	bic.w	r3, r3, #32
 8024100:	8193      	strh	r3, [r2, #12]
 8024102:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024104:	6852      	ldr	r2, [r2, #4]
 8024106:	b18b      	cbz	r3, 802412c <_sungetc_r+0x44>
 8024108:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802410a:	4293      	cmp	r3, r2
 802410c:	dd08      	ble.n	8024120 <_sungetc_r+0x38>
 802410e:	6823      	ldr	r3, [r4, #0]
 8024110:	1e5a      	subs	r2, r3, #1
 8024112:	6022      	str	r2, [r4, #0]
 8024114:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024118:	6863      	ldr	r3, [r4, #4]
 802411a:	3301      	adds	r3, #1
 802411c:	6063      	str	r3, [r4, #4]
 802411e:	e7e9      	b.n	80240f4 <_sungetc_r+0xc>
 8024120:	4621      	mov	r1, r4
 8024122:	f000 fd8f 	bl	8024c44 <__submore>
 8024126:	2800      	cmp	r0, #0
 8024128:	d0f1      	beq.n	802410e <_sungetc_r+0x26>
 802412a:	e7e1      	b.n	80240f0 <_sungetc_r+0x8>
 802412c:	6921      	ldr	r1, [r4, #16]
 802412e:	6823      	ldr	r3, [r4, #0]
 8024130:	b151      	cbz	r1, 8024148 <_sungetc_r+0x60>
 8024132:	4299      	cmp	r1, r3
 8024134:	d208      	bcs.n	8024148 <_sungetc_r+0x60>
 8024136:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802413a:	42a9      	cmp	r1, r5
 802413c:	d104      	bne.n	8024148 <_sungetc_r+0x60>
 802413e:	3b01      	subs	r3, #1
 8024140:	3201      	adds	r2, #1
 8024142:	6023      	str	r3, [r4, #0]
 8024144:	6062      	str	r2, [r4, #4]
 8024146:	e7d5      	b.n	80240f4 <_sungetc_r+0xc>
 8024148:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802414c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024150:	6363      	str	r3, [r4, #52]	@ 0x34
 8024152:	2303      	movs	r3, #3
 8024154:	63a3      	str	r3, [r4, #56]	@ 0x38
 8024156:	4623      	mov	r3, r4
 8024158:	f803 5f46 	strb.w	r5, [r3, #70]!
 802415c:	6023      	str	r3, [r4, #0]
 802415e:	2301      	movs	r3, #1
 8024160:	e7dc      	b.n	802411c <_sungetc_r+0x34>

08024162 <__ssrefill_r>:
 8024162:	b510      	push	{r4, lr}
 8024164:	460c      	mov	r4, r1
 8024166:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024168:	b169      	cbz	r1, 8024186 <__ssrefill_r+0x24>
 802416a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802416e:	4299      	cmp	r1, r3
 8024170:	d001      	beq.n	8024176 <__ssrefill_r+0x14>
 8024172:	f7ff f9e9 	bl	8023548 <_free_r>
 8024176:	2000      	movs	r0, #0
 8024178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802417a:	6360      	str	r0, [r4, #52]	@ 0x34
 802417c:	6063      	str	r3, [r4, #4]
 802417e:	b113      	cbz	r3, 8024186 <__ssrefill_r+0x24>
 8024180:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8024182:	6023      	str	r3, [r4, #0]
 8024184:	bd10      	pop	{r4, pc}
 8024186:	6923      	ldr	r3, [r4, #16]
 8024188:	f04f 30ff 	mov.w	r0, #4294967295
 802418c:	6023      	str	r3, [r4, #0]
 802418e:	2300      	movs	r3, #0
 8024190:	6063      	str	r3, [r4, #4]
 8024192:	89a3      	ldrh	r3, [r4, #12]
 8024194:	f043 0320 	orr.w	r3, r3, #32
 8024198:	81a3      	strh	r3, [r4, #12]
 802419a:	e7f3      	b.n	8024184 <__ssrefill_r+0x22>

0802419c <__ssvfiscanf_r>:
 802419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241a0:	460c      	mov	r4, r1
 80241a2:	2100      	movs	r1, #0
 80241a4:	4606      	mov	r6, r0
 80241a6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80241aa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80241ae:	49ab      	ldr	r1, [pc, #684]	@ (802445c <__ssvfiscanf_r+0x2c0>)
 80241b0:	f10d 0804 	add.w	r8, sp, #4
 80241b4:	91a0      	str	r1, [sp, #640]	@ 0x280
 80241b6:	49aa      	ldr	r1, [pc, #680]	@ (8024460 <__ssvfiscanf_r+0x2c4>)
 80241b8:	4faa      	ldr	r7, [pc, #680]	@ (8024464 <__ssvfiscanf_r+0x2c8>)
 80241ba:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80241be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80241c0:	9300      	str	r3, [sp, #0]
 80241c2:	f892 9000 	ldrb.w	r9, [r2]
 80241c6:	f1b9 0f00 	cmp.w	r9, #0
 80241ca:	f000 8159 	beq.w	8024480 <__ssvfiscanf_r+0x2e4>
 80241ce:	f817 3009 	ldrb.w	r3, [r7, r9]
 80241d2:	1c55      	adds	r5, r2, #1
 80241d4:	f013 0308 	ands.w	r3, r3, #8
 80241d8:	d019      	beq.n	802420e <__ssvfiscanf_r+0x72>
 80241da:	6863      	ldr	r3, [r4, #4]
 80241dc:	2b00      	cmp	r3, #0
 80241de:	dd0f      	ble.n	8024200 <__ssvfiscanf_r+0x64>
 80241e0:	6823      	ldr	r3, [r4, #0]
 80241e2:	781a      	ldrb	r2, [r3, #0]
 80241e4:	5cba      	ldrb	r2, [r7, r2]
 80241e6:	0712      	lsls	r2, r2, #28
 80241e8:	d401      	bmi.n	80241ee <__ssvfiscanf_r+0x52>
 80241ea:	462a      	mov	r2, r5
 80241ec:	e7e9      	b.n	80241c2 <__ssvfiscanf_r+0x26>
 80241ee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80241f0:	3301      	adds	r3, #1
 80241f2:	3201      	adds	r2, #1
 80241f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80241f6:	6862      	ldr	r2, [r4, #4]
 80241f8:	6023      	str	r3, [r4, #0]
 80241fa:	3a01      	subs	r2, #1
 80241fc:	6062      	str	r2, [r4, #4]
 80241fe:	e7ec      	b.n	80241da <__ssvfiscanf_r+0x3e>
 8024200:	4621      	mov	r1, r4
 8024202:	4630      	mov	r0, r6
 8024204:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8024206:	4798      	blx	r3
 8024208:	2800      	cmp	r0, #0
 802420a:	d0e9      	beq.n	80241e0 <__ssvfiscanf_r+0x44>
 802420c:	e7ed      	b.n	80241ea <__ssvfiscanf_r+0x4e>
 802420e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8024212:	f040 8086 	bne.w	8024322 <__ssvfiscanf_r+0x186>
 8024216:	9341      	str	r3, [sp, #260]	@ 0x104
 8024218:	9343      	str	r3, [sp, #268]	@ 0x10c
 802421a:	7853      	ldrb	r3, [r2, #1]
 802421c:	2b2a      	cmp	r3, #42	@ 0x2a
 802421e:	bf04      	itt	eq
 8024220:	2310      	moveq	r3, #16
 8024222:	1c95      	addeq	r5, r2, #2
 8024224:	f04f 020a 	mov.w	r2, #10
 8024228:	bf08      	it	eq
 802422a:	9341      	streq	r3, [sp, #260]	@ 0x104
 802422c:	46aa      	mov	sl, r5
 802422e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8024232:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8024236:	2b09      	cmp	r3, #9
 8024238:	d91e      	bls.n	8024278 <__ssvfiscanf_r+0xdc>
 802423a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8024468 <__ssvfiscanf_r+0x2cc>
 802423e:	2203      	movs	r2, #3
 8024240:	4658      	mov	r0, fp
 8024242:	f7fe faea 	bl	802281a <memchr>
 8024246:	b138      	cbz	r0, 8024258 <__ssvfiscanf_r+0xbc>
 8024248:	2301      	movs	r3, #1
 802424a:	4655      	mov	r5, sl
 802424c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802424e:	eba0 000b 	sub.w	r0, r0, fp
 8024252:	4083      	lsls	r3, r0
 8024254:	4313      	orrs	r3, r2
 8024256:	9341      	str	r3, [sp, #260]	@ 0x104
 8024258:	f815 3b01 	ldrb.w	r3, [r5], #1
 802425c:	2b78      	cmp	r3, #120	@ 0x78
 802425e:	d806      	bhi.n	802426e <__ssvfiscanf_r+0xd2>
 8024260:	2b57      	cmp	r3, #87	@ 0x57
 8024262:	d810      	bhi.n	8024286 <__ssvfiscanf_r+0xea>
 8024264:	2b25      	cmp	r3, #37	@ 0x25
 8024266:	d05c      	beq.n	8024322 <__ssvfiscanf_r+0x186>
 8024268:	d856      	bhi.n	8024318 <__ssvfiscanf_r+0x17c>
 802426a:	2b00      	cmp	r3, #0
 802426c:	d074      	beq.n	8024358 <__ssvfiscanf_r+0x1bc>
 802426e:	2303      	movs	r3, #3
 8024270:	9347      	str	r3, [sp, #284]	@ 0x11c
 8024272:	230a      	movs	r3, #10
 8024274:	9342      	str	r3, [sp, #264]	@ 0x108
 8024276:	e087      	b.n	8024388 <__ssvfiscanf_r+0x1ec>
 8024278:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802427a:	4655      	mov	r5, sl
 802427c:	fb02 1103 	mla	r1, r2, r3, r1
 8024280:	3930      	subs	r1, #48	@ 0x30
 8024282:	9143      	str	r1, [sp, #268]	@ 0x10c
 8024284:	e7d2      	b.n	802422c <__ssvfiscanf_r+0x90>
 8024286:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802428a:	2a20      	cmp	r2, #32
 802428c:	d8ef      	bhi.n	802426e <__ssvfiscanf_r+0xd2>
 802428e:	a101      	add	r1, pc, #4	@ (adr r1, 8024294 <__ssvfiscanf_r+0xf8>)
 8024290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024294:	08024367 	.word	0x08024367
 8024298:	0802426f 	.word	0x0802426f
 802429c:	0802426f 	.word	0x0802426f
 80242a0:	080243c1 	.word	0x080243c1
 80242a4:	0802426f 	.word	0x0802426f
 80242a8:	0802426f 	.word	0x0802426f
 80242ac:	0802426f 	.word	0x0802426f
 80242b0:	0802426f 	.word	0x0802426f
 80242b4:	0802426f 	.word	0x0802426f
 80242b8:	0802426f 	.word	0x0802426f
 80242bc:	0802426f 	.word	0x0802426f
 80242c0:	080243d7 	.word	0x080243d7
 80242c4:	080243bd 	.word	0x080243bd
 80242c8:	0802431f 	.word	0x0802431f
 80242cc:	0802431f 	.word	0x0802431f
 80242d0:	0802431f 	.word	0x0802431f
 80242d4:	0802426f 	.word	0x0802426f
 80242d8:	08024379 	.word	0x08024379
 80242dc:	0802426f 	.word	0x0802426f
 80242e0:	0802426f 	.word	0x0802426f
 80242e4:	0802426f 	.word	0x0802426f
 80242e8:	0802426f 	.word	0x0802426f
 80242ec:	080243e7 	.word	0x080243e7
 80242f0:	08024381 	.word	0x08024381
 80242f4:	0802435f 	.word	0x0802435f
 80242f8:	0802426f 	.word	0x0802426f
 80242fc:	0802426f 	.word	0x0802426f
 8024300:	080243e3 	.word	0x080243e3
 8024304:	0802426f 	.word	0x0802426f
 8024308:	080243bd 	.word	0x080243bd
 802430c:	0802426f 	.word	0x0802426f
 8024310:	0802426f 	.word	0x0802426f
 8024314:	08024367 	.word	0x08024367
 8024318:	3b45      	subs	r3, #69	@ 0x45
 802431a:	2b02      	cmp	r3, #2
 802431c:	d8a7      	bhi.n	802426e <__ssvfiscanf_r+0xd2>
 802431e:	2305      	movs	r3, #5
 8024320:	e031      	b.n	8024386 <__ssvfiscanf_r+0x1ea>
 8024322:	6863      	ldr	r3, [r4, #4]
 8024324:	2b00      	cmp	r3, #0
 8024326:	dd0d      	ble.n	8024344 <__ssvfiscanf_r+0x1a8>
 8024328:	6823      	ldr	r3, [r4, #0]
 802432a:	781a      	ldrb	r2, [r3, #0]
 802432c:	454a      	cmp	r2, r9
 802432e:	f040 80a7 	bne.w	8024480 <__ssvfiscanf_r+0x2e4>
 8024332:	3301      	adds	r3, #1
 8024334:	6862      	ldr	r2, [r4, #4]
 8024336:	6023      	str	r3, [r4, #0]
 8024338:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802433a:	3a01      	subs	r2, #1
 802433c:	3301      	adds	r3, #1
 802433e:	6062      	str	r2, [r4, #4]
 8024340:	9345      	str	r3, [sp, #276]	@ 0x114
 8024342:	e752      	b.n	80241ea <__ssvfiscanf_r+0x4e>
 8024344:	4621      	mov	r1, r4
 8024346:	4630      	mov	r0, r6
 8024348:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802434a:	4798      	blx	r3
 802434c:	2800      	cmp	r0, #0
 802434e:	d0eb      	beq.n	8024328 <__ssvfiscanf_r+0x18c>
 8024350:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8024352:	2800      	cmp	r0, #0
 8024354:	f040 808c 	bne.w	8024470 <__ssvfiscanf_r+0x2d4>
 8024358:	f04f 30ff 	mov.w	r0, #4294967295
 802435c:	e08c      	b.n	8024478 <__ssvfiscanf_r+0x2dc>
 802435e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8024360:	f042 0220 	orr.w	r2, r2, #32
 8024364:	9241      	str	r2, [sp, #260]	@ 0x104
 8024366:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8024368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802436c:	9241      	str	r2, [sp, #260]	@ 0x104
 802436e:	2210      	movs	r2, #16
 8024370:	2b6e      	cmp	r3, #110	@ 0x6e
 8024372:	9242      	str	r2, [sp, #264]	@ 0x108
 8024374:	d902      	bls.n	802437c <__ssvfiscanf_r+0x1e0>
 8024376:	e005      	b.n	8024384 <__ssvfiscanf_r+0x1e8>
 8024378:	2300      	movs	r3, #0
 802437a:	9342      	str	r3, [sp, #264]	@ 0x108
 802437c:	2303      	movs	r3, #3
 802437e:	e002      	b.n	8024386 <__ssvfiscanf_r+0x1ea>
 8024380:	2308      	movs	r3, #8
 8024382:	9342      	str	r3, [sp, #264]	@ 0x108
 8024384:	2304      	movs	r3, #4
 8024386:	9347      	str	r3, [sp, #284]	@ 0x11c
 8024388:	6863      	ldr	r3, [r4, #4]
 802438a:	2b00      	cmp	r3, #0
 802438c:	dd39      	ble.n	8024402 <__ssvfiscanf_r+0x266>
 802438e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8024390:	0659      	lsls	r1, r3, #25
 8024392:	d404      	bmi.n	802439e <__ssvfiscanf_r+0x202>
 8024394:	6823      	ldr	r3, [r4, #0]
 8024396:	781a      	ldrb	r2, [r3, #0]
 8024398:	5cba      	ldrb	r2, [r7, r2]
 802439a:	0712      	lsls	r2, r2, #28
 802439c:	d438      	bmi.n	8024410 <__ssvfiscanf_r+0x274>
 802439e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80243a0:	2b02      	cmp	r3, #2
 80243a2:	dc47      	bgt.n	8024434 <__ssvfiscanf_r+0x298>
 80243a4:	466b      	mov	r3, sp
 80243a6:	4622      	mov	r2, r4
 80243a8:	4630      	mov	r0, r6
 80243aa:	a941      	add	r1, sp, #260	@ 0x104
 80243ac:	f000 f9aa 	bl	8024704 <_scanf_chars>
 80243b0:	2801      	cmp	r0, #1
 80243b2:	d065      	beq.n	8024480 <__ssvfiscanf_r+0x2e4>
 80243b4:	2802      	cmp	r0, #2
 80243b6:	f47f af18 	bne.w	80241ea <__ssvfiscanf_r+0x4e>
 80243ba:	e7c9      	b.n	8024350 <__ssvfiscanf_r+0x1b4>
 80243bc:	220a      	movs	r2, #10
 80243be:	e7d7      	b.n	8024370 <__ssvfiscanf_r+0x1d4>
 80243c0:	4629      	mov	r1, r5
 80243c2:	4640      	mov	r0, r8
 80243c4:	f000 fc05 	bl	8024bd2 <__sccl>
 80243c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80243ca:	4605      	mov	r5, r0
 80243cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243d0:	9341      	str	r3, [sp, #260]	@ 0x104
 80243d2:	2301      	movs	r3, #1
 80243d4:	e7d7      	b.n	8024386 <__ssvfiscanf_r+0x1ea>
 80243d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80243d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243dc:	9341      	str	r3, [sp, #260]	@ 0x104
 80243de:	2300      	movs	r3, #0
 80243e0:	e7d1      	b.n	8024386 <__ssvfiscanf_r+0x1ea>
 80243e2:	2302      	movs	r3, #2
 80243e4:	e7cf      	b.n	8024386 <__ssvfiscanf_r+0x1ea>
 80243e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80243e8:	06c3      	lsls	r3, r0, #27
 80243ea:	f53f aefe 	bmi.w	80241ea <__ssvfiscanf_r+0x4e>
 80243ee:	9b00      	ldr	r3, [sp, #0]
 80243f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80243f2:	1d19      	adds	r1, r3, #4
 80243f4:	9100      	str	r1, [sp, #0]
 80243f6:	681b      	ldr	r3, [r3, #0]
 80243f8:	07c0      	lsls	r0, r0, #31
 80243fa:	bf4c      	ite	mi
 80243fc:	801a      	strhmi	r2, [r3, #0]
 80243fe:	601a      	strpl	r2, [r3, #0]
 8024400:	e6f3      	b.n	80241ea <__ssvfiscanf_r+0x4e>
 8024402:	4621      	mov	r1, r4
 8024404:	4630      	mov	r0, r6
 8024406:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8024408:	4798      	blx	r3
 802440a:	2800      	cmp	r0, #0
 802440c:	d0bf      	beq.n	802438e <__ssvfiscanf_r+0x1f2>
 802440e:	e79f      	b.n	8024350 <__ssvfiscanf_r+0x1b4>
 8024410:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8024412:	3201      	adds	r2, #1
 8024414:	9245      	str	r2, [sp, #276]	@ 0x114
 8024416:	6862      	ldr	r2, [r4, #4]
 8024418:	3a01      	subs	r2, #1
 802441a:	2a00      	cmp	r2, #0
 802441c:	6062      	str	r2, [r4, #4]
 802441e:	dd02      	ble.n	8024426 <__ssvfiscanf_r+0x28a>
 8024420:	3301      	adds	r3, #1
 8024422:	6023      	str	r3, [r4, #0]
 8024424:	e7b6      	b.n	8024394 <__ssvfiscanf_r+0x1f8>
 8024426:	4621      	mov	r1, r4
 8024428:	4630      	mov	r0, r6
 802442a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802442c:	4798      	blx	r3
 802442e:	2800      	cmp	r0, #0
 8024430:	d0b0      	beq.n	8024394 <__ssvfiscanf_r+0x1f8>
 8024432:	e78d      	b.n	8024350 <__ssvfiscanf_r+0x1b4>
 8024434:	2b04      	cmp	r3, #4
 8024436:	dc06      	bgt.n	8024446 <__ssvfiscanf_r+0x2aa>
 8024438:	466b      	mov	r3, sp
 802443a:	4622      	mov	r2, r4
 802443c:	4630      	mov	r0, r6
 802443e:	a941      	add	r1, sp, #260	@ 0x104
 8024440:	f000 f9ba 	bl	80247b8 <_scanf_i>
 8024444:	e7b4      	b.n	80243b0 <__ssvfiscanf_r+0x214>
 8024446:	4b09      	ldr	r3, [pc, #36]	@ (802446c <__ssvfiscanf_r+0x2d0>)
 8024448:	2b00      	cmp	r3, #0
 802444a:	f43f aece 	beq.w	80241ea <__ssvfiscanf_r+0x4e>
 802444e:	466b      	mov	r3, sp
 8024450:	4622      	mov	r2, r4
 8024452:	4630      	mov	r0, r6
 8024454:	a941      	add	r1, sp, #260	@ 0x104
 8024456:	f3af 8000 	nop.w
 802445a:	e7a9      	b.n	80243b0 <__ssvfiscanf_r+0x214>
 802445c:	080240e9 	.word	0x080240e9
 8024460:	08024163 	.word	0x08024163
 8024464:	08031855 	.word	0x08031855
 8024468:	08031824 	.word	0x08031824
 802446c:	00000000 	.word	0x00000000
 8024470:	89a3      	ldrh	r3, [r4, #12]
 8024472:	065b      	lsls	r3, r3, #25
 8024474:	f53f af70 	bmi.w	8024358 <__ssvfiscanf_r+0x1bc>
 8024478:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 802447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024480:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8024482:	e7f9      	b.n	8024478 <__ssvfiscanf_r+0x2dc>

08024484 <__sfputc_r>:
 8024484:	6893      	ldr	r3, [r2, #8]
 8024486:	b410      	push	{r4}
 8024488:	3b01      	subs	r3, #1
 802448a:	2b00      	cmp	r3, #0
 802448c:	6093      	str	r3, [r2, #8]
 802448e:	da07      	bge.n	80244a0 <__sfputc_r+0x1c>
 8024490:	6994      	ldr	r4, [r2, #24]
 8024492:	42a3      	cmp	r3, r4
 8024494:	db01      	blt.n	802449a <__sfputc_r+0x16>
 8024496:	290a      	cmp	r1, #10
 8024498:	d102      	bne.n	80244a0 <__sfputc_r+0x1c>
 802449a:	bc10      	pop	{r4}
 802449c:	f7fd bfe7 	b.w	802246e <__swbuf_r>
 80244a0:	6813      	ldr	r3, [r2, #0]
 80244a2:	1c58      	adds	r0, r3, #1
 80244a4:	6010      	str	r0, [r2, #0]
 80244a6:	7019      	strb	r1, [r3, #0]
 80244a8:	4608      	mov	r0, r1
 80244aa:	bc10      	pop	{r4}
 80244ac:	4770      	bx	lr

080244ae <__sfputs_r>:
 80244ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244b0:	4606      	mov	r6, r0
 80244b2:	460f      	mov	r7, r1
 80244b4:	4614      	mov	r4, r2
 80244b6:	18d5      	adds	r5, r2, r3
 80244b8:	42ac      	cmp	r4, r5
 80244ba:	d101      	bne.n	80244c0 <__sfputs_r+0x12>
 80244bc:	2000      	movs	r0, #0
 80244be:	e007      	b.n	80244d0 <__sfputs_r+0x22>
 80244c0:	463a      	mov	r2, r7
 80244c2:	4630      	mov	r0, r6
 80244c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80244c8:	f7ff ffdc 	bl	8024484 <__sfputc_r>
 80244cc:	1c43      	adds	r3, r0, #1
 80244ce:	d1f3      	bne.n	80244b8 <__sfputs_r+0xa>
 80244d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080244d4 <_vfiprintf_r>:
 80244d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244d8:	460d      	mov	r5, r1
 80244da:	4614      	mov	r4, r2
 80244dc:	4698      	mov	r8, r3
 80244de:	4606      	mov	r6, r0
 80244e0:	b09d      	sub	sp, #116	@ 0x74
 80244e2:	b118      	cbz	r0, 80244ec <_vfiprintf_r+0x18>
 80244e4:	6a03      	ldr	r3, [r0, #32]
 80244e6:	b90b      	cbnz	r3, 80244ec <_vfiprintf_r+0x18>
 80244e8:	f7fd fe74 	bl	80221d4 <__sinit>
 80244ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80244ee:	07d9      	lsls	r1, r3, #31
 80244f0:	d405      	bmi.n	80244fe <_vfiprintf_r+0x2a>
 80244f2:	89ab      	ldrh	r3, [r5, #12]
 80244f4:	059a      	lsls	r2, r3, #22
 80244f6:	d402      	bmi.n	80244fe <_vfiprintf_r+0x2a>
 80244f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80244fa:	f7fe f98c 	bl	8022816 <__retarget_lock_acquire_recursive>
 80244fe:	89ab      	ldrh	r3, [r5, #12]
 8024500:	071b      	lsls	r3, r3, #28
 8024502:	d501      	bpl.n	8024508 <_vfiprintf_r+0x34>
 8024504:	692b      	ldr	r3, [r5, #16]
 8024506:	b99b      	cbnz	r3, 8024530 <_vfiprintf_r+0x5c>
 8024508:	4629      	mov	r1, r5
 802450a:	4630      	mov	r0, r6
 802450c:	f7fd ffee 	bl	80224ec <__swsetup_r>
 8024510:	b170      	cbz	r0, 8024530 <_vfiprintf_r+0x5c>
 8024512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024514:	07dc      	lsls	r4, r3, #31
 8024516:	d504      	bpl.n	8024522 <_vfiprintf_r+0x4e>
 8024518:	f04f 30ff 	mov.w	r0, #4294967295
 802451c:	b01d      	add	sp, #116	@ 0x74
 802451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024522:	89ab      	ldrh	r3, [r5, #12]
 8024524:	0598      	lsls	r0, r3, #22
 8024526:	d4f7      	bmi.n	8024518 <_vfiprintf_r+0x44>
 8024528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802452a:	f7fe f975 	bl	8022818 <__retarget_lock_release_recursive>
 802452e:	e7f3      	b.n	8024518 <_vfiprintf_r+0x44>
 8024530:	2300      	movs	r3, #0
 8024532:	9309      	str	r3, [sp, #36]	@ 0x24
 8024534:	2320      	movs	r3, #32
 8024536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802453a:	2330      	movs	r3, #48	@ 0x30
 802453c:	f04f 0901 	mov.w	r9, #1
 8024540:	f8cd 800c 	str.w	r8, [sp, #12]
 8024544:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80246f0 <_vfiprintf_r+0x21c>
 8024548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802454c:	4623      	mov	r3, r4
 802454e:	469a      	mov	sl, r3
 8024550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024554:	b10a      	cbz	r2, 802455a <_vfiprintf_r+0x86>
 8024556:	2a25      	cmp	r2, #37	@ 0x25
 8024558:	d1f9      	bne.n	802454e <_vfiprintf_r+0x7a>
 802455a:	ebba 0b04 	subs.w	fp, sl, r4
 802455e:	d00b      	beq.n	8024578 <_vfiprintf_r+0xa4>
 8024560:	465b      	mov	r3, fp
 8024562:	4622      	mov	r2, r4
 8024564:	4629      	mov	r1, r5
 8024566:	4630      	mov	r0, r6
 8024568:	f7ff ffa1 	bl	80244ae <__sfputs_r>
 802456c:	3001      	adds	r0, #1
 802456e:	f000 80a7 	beq.w	80246c0 <_vfiprintf_r+0x1ec>
 8024572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024574:	445a      	add	r2, fp
 8024576:	9209      	str	r2, [sp, #36]	@ 0x24
 8024578:	f89a 3000 	ldrb.w	r3, [sl]
 802457c:	2b00      	cmp	r3, #0
 802457e:	f000 809f 	beq.w	80246c0 <_vfiprintf_r+0x1ec>
 8024582:	2300      	movs	r3, #0
 8024584:	f04f 32ff 	mov.w	r2, #4294967295
 8024588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802458c:	f10a 0a01 	add.w	sl, sl, #1
 8024590:	9304      	str	r3, [sp, #16]
 8024592:	9307      	str	r3, [sp, #28]
 8024594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024598:	931a      	str	r3, [sp, #104]	@ 0x68
 802459a:	4654      	mov	r4, sl
 802459c:	2205      	movs	r2, #5
 802459e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80245a2:	4853      	ldr	r0, [pc, #332]	@ (80246f0 <_vfiprintf_r+0x21c>)
 80245a4:	f7fe f939 	bl	802281a <memchr>
 80245a8:	9a04      	ldr	r2, [sp, #16]
 80245aa:	b9d8      	cbnz	r0, 80245e4 <_vfiprintf_r+0x110>
 80245ac:	06d1      	lsls	r1, r2, #27
 80245ae:	bf44      	itt	mi
 80245b0:	2320      	movmi	r3, #32
 80245b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80245b6:	0713      	lsls	r3, r2, #28
 80245b8:	bf44      	itt	mi
 80245ba:	232b      	movmi	r3, #43	@ 0x2b
 80245bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80245c0:	f89a 3000 	ldrb.w	r3, [sl]
 80245c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80245c6:	d015      	beq.n	80245f4 <_vfiprintf_r+0x120>
 80245c8:	4654      	mov	r4, sl
 80245ca:	2000      	movs	r0, #0
 80245cc:	f04f 0c0a 	mov.w	ip, #10
 80245d0:	9a07      	ldr	r2, [sp, #28]
 80245d2:	4621      	mov	r1, r4
 80245d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80245d8:	3b30      	subs	r3, #48	@ 0x30
 80245da:	2b09      	cmp	r3, #9
 80245dc:	d94b      	bls.n	8024676 <_vfiprintf_r+0x1a2>
 80245de:	b1b0      	cbz	r0, 802460e <_vfiprintf_r+0x13a>
 80245e0:	9207      	str	r2, [sp, #28]
 80245e2:	e014      	b.n	802460e <_vfiprintf_r+0x13a>
 80245e4:	eba0 0308 	sub.w	r3, r0, r8
 80245e8:	fa09 f303 	lsl.w	r3, r9, r3
 80245ec:	4313      	orrs	r3, r2
 80245ee:	46a2      	mov	sl, r4
 80245f0:	9304      	str	r3, [sp, #16]
 80245f2:	e7d2      	b.n	802459a <_vfiprintf_r+0xc6>
 80245f4:	9b03      	ldr	r3, [sp, #12]
 80245f6:	1d19      	adds	r1, r3, #4
 80245f8:	681b      	ldr	r3, [r3, #0]
 80245fa:	9103      	str	r1, [sp, #12]
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	bfbb      	ittet	lt
 8024600:	425b      	neglt	r3, r3
 8024602:	f042 0202 	orrlt.w	r2, r2, #2
 8024606:	9307      	strge	r3, [sp, #28]
 8024608:	9307      	strlt	r3, [sp, #28]
 802460a:	bfb8      	it	lt
 802460c:	9204      	strlt	r2, [sp, #16]
 802460e:	7823      	ldrb	r3, [r4, #0]
 8024610:	2b2e      	cmp	r3, #46	@ 0x2e
 8024612:	d10a      	bne.n	802462a <_vfiprintf_r+0x156>
 8024614:	7863      	ldrb	r3, [r4, #1]
 8024616:	2b2a      	cmp	r3, #42	@ 0x2a
 8024618:	d132      	bne.n	8024680 <_vfiprintf_r+0x1ac>
 802461a:	9b03      	ldr	r3, [sp, #12]
 802461c:	3402      	adds	r4, #2
 802461e:	1d1a      	adds	r2, r3, #4
 8024620:	681b      	ldr	r3, [r3, #0]
 8024622:	9203      	str	r2, [sp, #12]
 8024624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024628:	9305      	str	r3, [sp, #20]
 802462a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80246f4 <_vfiprintf_r+0x220>
 802462e:	2203      	movs	r2, #3
 8024630:	4650      	mov	r0, sl
 8024632:	7821      	ldrb	r1, [r4, #0]
 8024634:	f7fe f8f1 	bl	802281a <memchr>
 8024638:	b138      	cbz	r0, 802464a <_vfiprintf_r+0x176>
 802463a:	2240      	movs	r2, #64	@ 0x40
 802463c:	9b04      	ldr	r3, [sp, #16]
 802463e:	eba0 000a 	sub.w	r0, r0, sl
 8024642:	4082      	lsls	r2, r0
 8024644:	4313      	orrs	r3, r2
 8024646:	3401      	adds	r4, #1
 8024648:	9304      	str	r3, [sp, #16]
 802464a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802464e:	2206      	movs	r2, #6
 8024650:	4829      	ldr	r0, [pc, #164]	@ (80246f8 <_vfiprintf_r+0x224>)
 8024652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024656:	f7fe f8e0 	bl	802281a <memchr>
 802465a:	2800      	cmp	r0, #0
 802465c:	d03f      	beq.n	80246de <_vfiprintf_r+0x20a>
 802465e:	4b27      	ldr	r3, [pc, #156]	@ (80246fc <_vfiprintf_r+0x228>)
 8024660:	bb1b      	cbnz	r3, 80246aa <_vfiprintf_r+0x1d6>
 8024662:	9b03      	ldr	r3, [sp, #12]
 8024664:	3307      	adds	r3, #7
 8024666:	f023 0307 	bic.w	r3, r3, #7
 802466a:	3308      	adds	r3, #8
 802466c:	9303      	str	r3, [sp, #12]
 802466e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024670:	443b      	add	r3, r7
 8024672:	9309      	str	r3, [sp, #36]	@ 0x24
 8024674:	e76a      	b.n	802454c <_vfiprintf_r+0x78>
 8024676:	460c      	mov	r4, r1
 8024678:	2001      	movs	r0, #1
 802467a:	fb0c 3202 	mla	r2, ip, r2, r3
 802467e:	e7a8      	b.n	80245d2 <_vfiprintf_r+0xfe>
 8024680:	2300      	movs	r3, #0
 8024682:	f04f 0c0a 	mov.w	ip, #10
 8024686:	4619      	mov	r1, r3
 8024688:	3401      	adds	r4, #1
 802468a:	9305      	str	r3, [sp, #20]
 802468c:	4620      	mov	r0, r4
 802468e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024692:	3a30      	subs	r2, #48	@ 0x30
 8024694:	2a09      	cmp	r2, #9
 8024696:	d903      	bls.n	80246a0 <_vfiprintf_r+0x1cc>
 8024698:	2b00      	cmp	r3, #0
 802469a:	d0c6      	beq.n	802462a <_vfiprintf_r+0x156>
 802469c:	9105      	str	r1, [sp, #20]
 802469e:	e7c4      	b.n	802462a <_vfiprintf_r+0x156>
 80246a0:	4604      	mov	r4, r0
 80246a2:	2301      	movs	r3, #1
 80246a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80246a8:	e7f0      	b.n	802468c <_vfiprintf_r+0x1b8>
 80246aa:	ab03      	add	r3, sp, #12
 80246ac:	9300      	str	r3, [sp, #0]
 80246ae:	462a      	mov	r2, r5
 80246b0:	4630      	mov	r0, r6
 80246b2:	4b13      	ldr	r3, [pc, #76]	@ (8024700 <_vfiprintf_r+0x22c>)
 80246b4:	a904      	add	r1, sp, #16
 80246b6:	f7fd f945 	bl	8021944 <_printf_float>
 80246ba:	4607      	mov	r7, r0
 80246bc:	1c78      	adds	r0, r7, #1
 80246be:	d1d6      	bne.n	802466e <_vfiprintf_r+0x19a>
 80246c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80246c2:	07d9      	lsls	r1, r3, #31
 80246c4:	d405      	bmi.n	80246d2 <_vfiprintf_r+0x1fe>
 80246c6:	89ab      	ldrh	r3, [r5, #12]
 80246c8:	059a      	lsls	r2, r3, #22
 80246ca:	d402      	bmi.n	80246d2 <_vfiprintf_r+0x1fe>
 80246cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80246ce:	f7fe f8a3 	bl	8022818 <__retarget_lock_release_recursive>
 80246d2:	89ab      	ldrh	r3, [r5, #12]
 80246d4:	065b      	lsls	r3, r3, #25
 80246d6:	f53f af1f 	bmi.w	8024518 <_vfiprintf_r+0x44>
 80246da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246dc:	e71e      	b.n	802451c <_vfiprintf_r+0x48>
 80246de:	ab03      	add	r3, sp, #12
 80246e0:	9300      	str	r3, [sp, #0]
 80246e2:	462a      	mov	r2, r5
 80246e4:	4630      	mov	r0, r6
 80246e6:	4b06      	ldr	r3, [pc, #24]	@ (8024700 <_vfiprintf_r+0x22c>)
 80246e8:	a904      	add	r1, sp, #16
 80246ea:	f7fd fbc9 	bl	8021e80 <_printf_i>
 80246ee:	e7e4      	b.n	80246ba <_vfiprintf_r+0x1e6>
 80246f0:	0803181e 	.word	0x0803181e
 80246f4:	08031824 	.word	0x08031824
 80246f8:	08031828 	.word	0x08031828
 80246fc:	08021945 	.word	0x08021945
 8024700:	080244af 	.word	0x080244af

08024704 <_scanf_chars>:
 8024704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024708:	4615      	mov	r5, r2
 802470a:	688a      	ldr	r2, [r1, #8]
 802470c:	4680      	mov	r8, r0
 802470e:	460c      	mov	r4, r1
 8024710:	b932      	cbnz	r2, 8024720 <_scanf_chars+0x1c>
 8024712:	698a      	ldr	r2, [r1, #24]
 8024714:	2a00      	cmp	r2, #0
 8024716:	bf14      	ite	ne
 8024718:	f04f 32ff 	movne.w	r2, #4294967295
 802471c:	2201      	moveq	r2, #1
 802471e:	608a      	str	r2, [r1, #8]
 8024720:	2700      	movs	r7, #0
 8024722:	6822      	ldr	r2, [r4, #0]
 8024724:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80247b4 <_scanf_chars+0xb0>
 8024728:	06d1      	lsls	r1, r2, #27
 802472a:	bf5f      	itttt	pl
 802472c:	681a      	ldrpl	r2, [r3, #0]
 802472e:	1d11      	addpl	r1, r2, #4
 8024730:	6019      	strpl	r1, [r3, #0]
 8024732:	6816      	ldrpl	r6, [r2, #0]
 8024734:	69a0      	ldr	r0, [r4, #24]
 8024736:	b188      	cbz	r0, 802475c <_scanf_chars+0x58>
 8024738:	2801      	cmp	r0, #1
 802473a:	d107      	bne.n	802474c <_scanf_chars+0x48>
 802473c:	682b      	ldr	r3, [r5, #0]
 802473e:	781a      	ldrb	r2, [r3, #0]
 8024740:	6963      	ldr	r3, [r4, #20]
 8024742:	5c9b      	ldrb	r3, [r3, r2]
 8024744:	b953      	cbnz	r3, 802475c <_scanf_chars+0x58>
 8024746:	2f00      	cmp	r7, #0
 8024748:	d031      	beq.n	80247ae <_scanf_chars+0xaa>
 802474a:	e022      	b.n	8024792 <_scanf_chars+0x8e>
 802474c:	2802      	cmp	r0, #2
 802474e:	d120      	bne.n	8024792 <_scanf_chars+0x8e>
 8024750:	682b      	ldr	r3, [r5, #0]
 8024752:	781b      	ldrb	r3, [r3, #0]
 8024754:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024758:	071b      	lsls	r3, r3, #28
 802475a:	d41a      	bmi.n	8024792 <_scanf_chars+0x8e>
 802475c:	6823      	ldr	r3, [r4, #0]
 802475e:	3701      	adds	r7, #1
 8024760:	06da      	lsls	r2, r3, #27
 8024762:	bf5e      	ittt	pl
 8024764:	682b      	ldrpl	r3, [r5, #0]
 8024766:	781b      	ldrbpl	r3, [r3, #0]
 8024768:	f806 3b01 	strbpl.w	r3, [r6], #1
 802476c:	682a      	ldr	r2, [r5, #0]
 802476e:	686b      	ldr	r3, [r5, #4]
 8024770:	3201      	adds	r2, #1
 8024772:	602a      	str	r2, [r5, #0]
 8024774:	68a2      	ldr	r2, [r4, #8]
 8024776:	3b01      	subs	r3, #1
 8024778:	3a01      	subs	r2, #1
 802477a:	606b      	str	r3, [r5, #4]
 802477c:	60a2      	str	r2, [r4, #8]
 802477e:	b142      	cbz	r2, 8024792 <_scanf_chars+0x8e>
 8024780:	2b00      	cmp	r3, #0
 8024782:	dcd7      	bgt.n	8024734 <_scanf_chars+0x30>
 8024784:	4629      	mov	r1, r5
 8024786:	4640      	mov	r0, r8
 8024788:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802478c:	4798      	blx	r3
 802478e:	2800      	cmp	r0, #0
 8024790:	d0d0      	beq.n	8024734 <_scanf_chars+0x30>
 8024792:	6823      	ldr	r3, [r4, #0]
 8024794:	f013 0310 	ands.w	r3, r3, #16
 8024798:	d105      	bne.n	80247a6 <_scanf_chars+0xa2>
 802479a:	68e2      	ldr	r2, [r4, #12]
 802479c:	3201      	adds	r2, #1
 802479e:	60e2      	str	r2, [r4, #12]
 80247a0:	69a2      	ldr	r2, [r4, #24]
 80247a2:	b102      	cbz	r2, 80247a6 <_scanf_chars+0xa2>
 80247a4:	7033      	strb	r3, [r6, #0]
 80247a6:	2000      	movs	r0, #0
 80247a8:	6923      	ldr	r3, [r4, #16]
 80247aa:	443b      	add	r3, r7
 80247ac:	6123      	str	r3, [r4, #16]
 80247ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80247b2:	bf00      	nop
 80247b4:	08031855 	.word	0x08031855

080247b8 <_scanf_i>:
 80247b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247bc:	460c      	mov	r4, r1
 80247be:	4698      	mov	r8, r3
 80247c0:	4b72      	ldr	r3, [pc, #456]	@ (802498c <_scanf_i+0x1d4>)
 80247c2:	b087      	sub	sp, #28
 80247c4:	4682      	mov	sl, r0
 80247c6:	4616      	mov	r6, r2
 80247c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80247cc:	ab03      	add	r3, sp, #12
 80247ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80247d2:	4b6f      	ldr	r3, [pc, #444]	@ (8024990 <_scanf_i+0x1d8>)
 80247d4:	69a1      	ldr	r1, [r4, #24]
 80247d6:	4a6f      	ldr	r2, [pc, #444]	@ (8024994 <_scanf_i+0x1dc>)
 80247d8:	4627      	mov	r7, r4
 80247da:	2903      	cmp	r1, #3
 80247dc:	bf08      	it	eq
 80247de:	461a      	moveq	r2, r3
 80247e0:	68a3      	ldr	r3, [r4, #8]
 80247e2:	9201      	str	r2, [sp, #4]
 80247e4:	1e5a      	subs	r2, r3, #1
 80247e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80247ea:	bf81      	itttt	hi
 80247ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80247f0:	eb03 0905 	addhi.w	r9, r3, r5
 80247f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80247f8:	60a3      	strhi	r3, [r4, #8]
 80247fa:	f857 3b1c 	ldr.w	r3, [r7], #28
 80247fe:	bf98      	it	ls
 8024800:	f04f 0900 	movls.w	r9, #0
 8024804:	463d      	mov	r5, r7
 8024806:	f04f 0b00 	mov.w	fp, #0
 802480a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802480e:	6023      	str	r3, [r4, #0]
 8024810:	6831      	ldr	r1, [r6, #0]
 8024812:	ab03      	add	r3, sp, #12
 8024814:	2202      	movs	r2, #2
 8024816:	7809      	ldrb	r1, [r1, #0]
 8024818:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802481c:	f7fd fffd 	bl	802281a <memchr>
 8024820:	b328      	cbz	r0, 802486e <_scanf_i+0xb6>
 8024822:	f1bb 0f01 	cmp.w	fp, #1
 8024826:	d159      	bne.n	80248dc <_scanf_i+0x124>
 8024828:	6862      	ldr	r2, [r4, #4]
 802482a:	b92a      	cbnz	r2, 8024838 <_scanf_i+0x80>
 802482c:	2108      	movs	r1, #8
 802482e:	6822      	ldr	r2, [r4, #0]
 8024830:	6061      	str	r1, [r4, #4]
 8024832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8024836:	6022      	str	r2, [r4, #0]
 8024838:	6822      	ldr	r2, [r4, #0]
 802483a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802483e:	6022      	str	r2, [r4, #0]
 8024840:	68a2      	ldr	r2, [r4, #8]
 8024842:	1e51      	subs	r1, r2, #1
 8024844:	60a1      	str	r1, [r4, #8]
 8024846:	b192      	cbz	r2, 802486e <_scanf_i+0xb6>
 8024848:	6832      	ldr	r2, [r6, #0]
 802484a:	1c51      	adds	r1, r2, #1
 802484c:	6031      	str	r1, [r6, #0]
 802484e:	7812      	ldrb	r2, [r2, #0]
 8024850:	f805 2b01 	strb.w	r2, [r5], #1
 8024854:	6872      	ldr	r2, [r6, #4]
 8024856:	3a01      	subs	r2, #1
 8024858:	2a00      	cmp	r2, #0
 802485a:	6072      	str	r2, [r6, #4]
 802485c:	dc07      	bgt.n	802486e <_scanf_i+0xb6>
 802485e:	4631      	mov	r1, r6
 8024860:	4650      	mov	r0, sl
 8024862:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8024866:	4790      	blx	r2
 8024868:	2800      	cmp	r0, #0
 802486a:	f040 8085 	bne.w	8024978 <_scanf_i+0x1c0>
 802486e:	f10b 0b01 	add.w	fp, fp, #1
 8024872:	f1bb 0f03 	cmp.w	fp, #3
 8024876:	d1cb      	bne.n	8024810 <_scanf_i+0x58>
 8024878:	6863      	ldr	r3, [r4, #4]
 802487a:	b90b      	cbnz	r3, 8024880 <_scanf_i+0xc8>
 802487c:	230a      	movs	r3, #10
 802487e:	6063      	str	r3, [r4, #4]
 8024880:	6863      	ldr	r3, [r4, #4]
 8024882:	4945      	ldr	r1, [pc, #276]	@ (8024998 <_scanf_i+0x1e0>)
 8024884:	6960      	ldr	r0, [r4, #20]
 8024886:	1ac9      	subs	r1, r1, r3
 8024888:	f000 f9a3 	bl	8024bd2 <__sccl>
 802488c:	f04f 0b00 	mov.w	fp, #0
 8024890:	68a3      	ldr	r3, [r4, #8]
 8024892:	6822      	ldr	r2, [r4, #0]
 8024894:	2b00      	cmp	r3, #0
 8024896:	d03d      	beq.n	8024914 <_scanf_i+0x15c>
 8024898:	6831      	ldr	r1, [r6, #0]
 802489a:	6960      	ldr	r0, [r4, #20]
 802489c:	f891 c000 	ldrb.w	ip, [r1]
 80248a0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80248a4:	2800      	cmp	r0, #0
 80248a6:	d035      	beq.n	8024914 <_scanf_i+0x15c>
 80248a8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80248ac:	d124      	bne.n	80248f8 <_scanf_i+0x140>
 80248ae:	0510      	lsls	r0, r2, #20
 80248b0:	d522      	bpl.n	80248f8 <_scanf_i+0x140>
 80248b2:	f10b 0b01 	add.w	fp, fp, #1
 80248b6:	f1b9 0f00 	cmp.w	r9, #0
 80248ba:	d003      	beq.n	80248c4 <_scanf_i+0x10c>
 80248bc:	3301      	adds	r3, #1
 80248be:	f109 39ff 	add.w	r9, r9, #4294967295
 80248c2:	60a3      	str	r3, [r4, #8]
 80248c4:	6873      	ldr	r3, [r6, #4]
 80248c6:	3b01      	subs	r3, #1
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	6073      	str	r3, [r6, #4]
 80248cc:	dd1b      	ble.n	8024906 <_scanf_i+0x14e>
 80248ce:	6833      	ldr	r3, [r6, #0]
 80248d0:	3301      	adds	r3, #1
 80248d2:	6033      	str	r3, [r6, #0]
 80248d4:	68a3      	ldr	r3, [r4, #8]
 80248d6:	3b01      	subs	r3, #1
 80248d8:	60a3      	str	r3, [r4, #8]
 80248da:	e7d9      	b.n	8024890 <_scanf_i+0xd8>
 80248dc:	f1bb 0f02 	cmp.w	fp, #2
 80248e0:	d1ae      	bne.n	8024840 <_scanf_i+0x88>
 80248e2:	6822      	ldr	r2, [r4, #0]
 80248e4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80248e8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80248ec:	d1c4      	bne.n	8024878 <_scanf_i+0xc0>
 80248ee:	2110      	movs	r1, #16
 80248f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80248f4:	6061      	str	r1, [r4, #4]
 80248f6:	e7a2      	b.n	802483e <_scanf_i+0x86>
 80248f8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80248fc:	6022      	str	r2, [r4, #0]
 80248fe:	780b      	ldrb	r3, [r1, #0]
 8024900:	f805 3b01 	strb.w	r3, [r5], #1
 8024904:	e7de      	b.n	80248c4 <_scanf_i+0x10c>
 8024906:	4631      	mov	r1, r6
 8024908:	4650      	mov	r0, sl
 802490a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802490e:	4798      	blx	r3
 8024910:	2800      	cmp	r0, #0
 8024912:	d0df      	beq.n	80248d4 <_scanf_i+0x11c>
 8024914:	6823      	ldr	r3, [r4, #0]
 8024916:	05d9      	lsls	r1, r3, #23
 8024918:	d50d      	bpl.n	8024936 <_scanf_i+0x17e>
 802491a:	42bd      	cmp	r5, r7
 802491c:	d909      	bls.n	8024932 <_scanf_i+0x17a>
 802491e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024922:	4632      	mov	r2, r6
 8024924:	4650      	mov	r0, sl
 8024926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802492a:	f105 39ff 	add.w	r9, r5, #4294967295
 802492e:	4798      	blx	r3
 8024930:	464d      	mov	r5, r9
 8024932:	42bd      	cmp	r5, r7
 8024934:	d028      	beq.n	8024988 <_scanf_i+0x1d0>
 8024936:	6822      	ldr	r2, [r4, #0]
 8024938:	f012 0210 	ands.w	r2, r2, #16
 802493c:	d113      	bne.n	8024966 <_scanf_i+0x1ae>
 802493e:	702a      	strb	r2, [r5, #0]
 8024940:	4639      	mov	r1, r7
 8024942:	6863      	ldr	r3, [r4, #4]
 8024944:	4650      	mov	r0, sl
 8024946:	9e01      	ldr	r6, [sp, #4]
 8024948:	47b0      	blx	r6
 802494a:	f8d8 3000 	ldr.w	r3, [r8]
 802494e:	6821      	ldr	r1, [r4, #0]
 8024950:	1d1a      	adds	r2, r3, #4
 8024952:	f8c8 2000 	str.w	r2, [r8]
 8024956:	f011 0f20 	tst.w	r1, #32
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	d00f      	beq.n	802497e <_scanf_i+0x1c6>
 802495e:	6018      	str	r0, [r3, #0]
 8024960:	68e3      	ldr	r3, [r4, #12]
 8024962:	3301      	adds	r3, #1
 8024964:	60e3      	str	r3, [r4, #12]
 8024966:	2000      	movs	r0, #0
 8024968:	6923      	ldr	r3, [r4, #16]
 802496a:	1bed      	subs	r5, r5, r7
 802496c:	445d      	add	r5, fp
 802496e:	442b      	add	r3, r5
 8024970:	6123      	str	r3, [r4, #16]
 8024972:	b007      	add	sp, #28
 8024974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024978:	f04f 0b00 	mov.w	fp, #0
 802497c:	e7ca      	b.n	8024914 <_scanf_i+0x15c>
 802497e:	07ca      	lsls	r2, r1, #31
 8024980:	bf4c      	ite	mi
 8024982:	8018      	strhmi	r0, [r3, #0]
 8024984:	6018      	strpl	r0, [r3, #0]
 8024986:	e7eb      	b.n	8024960 <_scanf_i+0x1a8>
 8024988:	2001      	movs	r0, #1
 802498a:	e7f2      	b.n	8024972 <_scanf_i+0x1ba>
 802498c:	08027f78 	.word	0x08027f78
 8024990:	080217dd 	.word	0x080217dd
 8024994:	08024ead 	.word	0x08024ead
 8024998:	0803183f 	.word	0x0803183f

0802499c <__sflush_r>:
 802499c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80249a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249a2:	0716      	lsls	r6, r2, #28
 80249a4:	4605      	mov	r5, r0
 80249a6:	460c      	mov	r4, r1
 80249a8:	d454      	bmi.n	8024a54 <__sflush_r+0xb8>
 80249aa:	684b      	ldr	r3, [r1, #4]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	dc02      	bgt.n	80249b6 <__sflush_r+0x1a>
 80249b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	dd48      	ble.n	8024a48 <__sflush_r+0xac>
 80249b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80249b8:	2e00      	cmp	r6, #0
 80249ba:	d045      	beq.n	8024a48 <__sflush_r+0xac>
 80249bc:	2300      	movs	r3, #0
 80249be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80249c2:	682f      	ldr	r7, [r5, #0]
 80249c4:	6a21      	ldr	r1, [r4, #32]
 80249c6:	602b      	str	r3, [r5, #0]
 80249c8:	d030      	beq.n	8024a2c <__sflush_r+0x90>
 80249ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80249cc:	89a3      	ldrh	r3, [r4, #12]
 80249ce:	0759      	lsls	r1, r3, #29
 80249d0:	d505      	bpl.n	80249de <__sflush_r+0x42>
 80249d2:	6863      	ldr	r3, [r4, #4]
 80249d4:	1ad2      	subs	r2, r2, r3
 80249d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80249d8:	b10b      	cbz	r3, 80249de <__sflush_r+0x42>
 80249da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80249dc:	1ad2      	subs	r2, r2, r3
 80249de:	2300      	movs	r3, #0
 80249e0:	4628      	mov	r0, r5
 80249e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80249e4:	6a21      	ldr	r1, [r4, #32]
 80249e6:	47b0      	blx	r6
 80249e8:	1c43      	adds	r3, r0, #1
 80249ea:	89a3      	ldrh	r3, [r4, #12]
 80249ec:	d106      	bne.n	80249fc <__sflush_r+0x60>
 80249ee:	6829      	ldr	r1, [r5, #0]
 80249f0:	291d      	cmp	r1, #29
 80249f2:	d82b      	bhi.n	8024a4c <__sflush_r+0xb0>
 80249f4:	4a28      	ldr	r2, [pc, #160]	@ (8024a98 <__sflush_r+0xfc>)
 80249f6:	40ca      	lsrs	r2, r1
 80249f8:	07d6      	lsls	r6, r2, #31
 80249fa:	d527      	bpl.n	8024a4c <__sflush_r+0xb0>
 80249fc:	2200      	movs	r2, #0
 80249fe:	6062      	str	r2, [r4, #4]
 8024a00:	6922      	ldr	r2, [r4, #16]
 8024a02:	04d9      	lsls	r1, r3, #19
 8024a04:	6022      	str	r2, [r4, #0]
 8024a06:	d504      	bpl.n	8024a12 <__sflush_r+0x76>
 8024a08:	1c42      	adds	r2, r0, #1
 8024a0a:	d101      	bne.n	8024a10 <__sflush_r+0x74>
 8024a0c:	682b      	ldr	r3, [r5, #0]
 8024a0e:	b903      	cbnz	r3, 8024a12 <__sflush_r+0x76>
 8024a10:	6560      	str	r0, [r4, #84]	@ 0x54
 8024a12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024a14:	602f      	str	r7, [r5, #0]
 8024a16:	b1b9      	cbz	r1, 8024a48 <__sflush_r+0xac>
 8024a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024a1c:	4299      	cmp	r1, r3
 8024a1e:	d002      	beq.n	8024a26 <__sflush_r+0x8a>
 8024a20:	4628      	mov	r0, r5
 8024a22:	f7fe fd91 	bl	8023548 <_free_r>
 8024a26:	2300      	movs	r3, #0
 8024a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8024a2a:	e00d      	b.n	8024a48 <__sflush_r+0xac>
 8024a2c:	2301      	movs	r3, #1
 8024a2e:	4628      	mov	r0, r5
 8024a30:	47b0      	blx	r6
 8024a32:	4602      	mov	r2, r0
 8024a34:	1c50      	adds	r0, r2, #1
 8024a36:	d1c9      	bne.n	80249cc <__sflush_r+0x30>
 8024a38:	682b      	ldr	r3, [r5, #0]
 8024a3a:	2b00      	cmp	r3, #0
 8024a3c:	d0c6      	beq.n	80249cc <__sflush_r+0x30>
 8024a3e:	2b1d      	cmp	r3, #29
 8024a40:	d001      	beq.n	8024a46 <__sflush_r+0xaa>
 8024a42:	2b16      	cmp	r3, #22
 8024a44:	d11d      	bne.n	8024a82 <__sflush_r+0xe6>
 8024a46:	602f      	str	r7, [r5, #0]
 8024a48:	2000      	movs	r0, #0
 8024a4a:	e021      	b.n	8024a90 <__sflush_r+0xf4>
 8024a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024a50:	b21b      	sxth	r3, r3
 8024a52:	e01a      	b.n	8024a8a <__sflush_r+0xee>
 8024a54:	690f      	ldr	r7, [r1, #16]
 8024a56:	2f00      	cmp	r7, #0
 8024a58:	d0f6      	beq.n	8024a48 <__sflush_r+0xac>
 8024a5a:	0793      	lsls	r3, r2, #30
 8024a5c:	bf18      	it	ne
 8024a5e:	2300      	movne	r3, #0
 8024a60:	680e      	ldr	r6, [r1, #0]
 8024a62:	bf08      	it	eq
 8024a64:	694b      	ldreq	r3, [r1, #20]
 8024a66:	1bf6      	subs	r6, r6, r7
 8024a68:	600f      	str	r7, [r1, #0]
 8024a6a:	608b      	str	r3, [r1, #8]
 8024a6c:	2e00      	cmp	r6, #0
 8024a6e:	ddeb      	ble.n	8024a48 <__sflush_r+0xac>
 8024a70:	4633      	mov	r3, r6
 8024a72:	463a      	mov	r2, r7
 8024a74:	4628      	mov	r0, r5
 8024a76:	6a21      	ldr	r1, [r4, #32]
 8024a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8024a7c:	47e0      	blx	ip
 8024a7e:	2800      	cmp	r0, #0
 8024a80:	dc07      	bgt.n	8024a92 <__sflush_r+0xf6>
 8024a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8024a8e:	81a3      	strh	r3, [r4, #12]
 8024a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a92:	4407      	add	r7, r0
 8024a94:	1a36      	subs	r6, r6, r0
 8024a96:	e7e9      	b.n	8024a6c <__sflush_r+0xd0>
 8024a98:	20400001 	.word	0x20400001

08024a9c <_fflush_r>:
 8024a9c:	b538      	push	{r3, r4, r5, lr}
 8024a9e:	690b      	ldr	r3, [r1, #16]
 8024aa0:	4605      	mov	r5, r0
 8024aa2:	460c      	mov	r4, r1
 8024aa4:	b913      	cbnz	r3, 8024aac <_fflush_r+0x10>
 8024aa6:	2500      	movs	r5, #0
 8024aa8:	4628      	mov	r0, r5
 8024aaa:	bd38      	pop	{r3, r4, r5, pc}
 8024aac:	b118      	cbz	r0, 8024ab6 <_fflush_r+0x1a>
 8024aae:	6a03      	ldr	r3, [r0, #32]
 8024ab0:	b90b      	cbnz	r3, 8024ab6 <_fflush_r+0x1a>
 8024ab2:	f7fd fb8f 	bl	80221d4 <__sinit>
 8024ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d0f3      	beq.n	8024aa6 <_fflush_r+0xa>
 8024abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024ac0:	07d0      	lsls	r0, r2, #31
 8024ac2:	d404      	bmi.n	8024ace <_fflush_r+0x32>
 8024ac4:	0599      	lsls	r1, r3, #22
 8024ac6:	d402      	bmi.n	8024ace <_fflush_r+0x32>
 8024ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024aca:	f7fd fea4 	bl	8022816 <__retarget_lock_acquire_recursive>
 8024ace:	4628      	mov	r0, r5
 8024ad0:	4621      	mov	r1, r4
 8024ad2:	f7ff ff63 	bl	802499c <__sflush_r>
 8024ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024ad8:	4605      	mov	r5, r0
 8024ada:	07da      	lsls	r2, r3, #31
 8024adc:	d4e4      	bmi.n	8024aa8 <_fflush_r+0xc>
 8024ade:	89a3      	ldrh	r3, [r4, #12]
 8024ae0:	059b      	lsls	r3, r3, #22
 8024ae2:	d4e1      	bmi.n	8024aa8 <_fflush_r+0xc>
 8024ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024ae6:	f7fd fe97 	bl	8022818 <__retarget_lock_release_recursive>
 8024aea:	e7dd      	b.n	8024aa8 <_fflush_r+0xc>

08024aec <fiprintf>:
 8024aec:	b40e      	push	{r1, r2, r3}
 8024aee:	b503      	push	{r0, r1, lr}
 8024af0:	4601      	mov	r1, r0
 8024af2:	ab03      	add	r3, sp, #12
 8024af4:	4805      	ldr	r0, [pc, #20]	@ (8024b0c <fiprintf+0x20>)
 8024af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8024afa:	6800      	ldr	r0, [r0, #0]
 8024afc:	9301      	str	r3, [sp, #4]
 8024afe:	f7ff fce9 	bl	80244d4 <_vfiprintf_r>
 8024b02:	b002      	add	sp, #8
 8024b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8024b08:	b003      	add	sp, #12
 8024b0a:	4770      	bx	lr
 8024b0c:	20000134 	.word	0x20000134

08024b10 <__swhatbuf_r>:
 8024b10:	b570      	push	{r4, r5, r6, lr}
 8024b12:	460c      	mov	r4, r1
 8024b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b18:	4615      	mov	r5, r2
 8024b1a:	2900      	cmp	r1, #0
 8024b1c:	461e      	mov	r6, r3
 8024b1e:	b096      	sub	sp, #88	@ 0x58
 8024b20:	da0c      	bge.n	8024b3c <__swhatbuf_r+0x2c>
 8024b22:	89a3      	ldrh	r3, [r4, #12]
 8024b24:	2100      	movs	r1, #0
 8024b26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024b2a:	bf14      	ite	ne
 8024b2c:	2340      	movne	r3, #64	@ 0x40
 8024b2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024b32:	2000      	movs	r0, #0
 8024b34:	6031      	str	r1, [r6, #0]
 8024b36:	602b      	str	r3, [r5, #0]
 8024b38:	b016      	add	sp, #88	@ 0x58
 8024b3a:	bd70      	pop	{r4, r5, r6, pc}
 8024b3c:	466a      	mov	r2, sp
 8024b3e:	f000 f8b9 	bl	8024cb4 <_fstat_r>
 8024b42:	2800      	cmp	r0, #0
 8024b44:	dbed      	blt.n	8024b22 <__swhatbuf_r+0x12>
 8024b46:	9901      	ldr	r1, [sp, #4]
 8024b48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024b4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024b50:	4259      	negs	r1, r3
 8024b52:	4159      	adcs	r1, r3
 8024b54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024b58:	e7eb      	b.n	8024b32 <__swhatbuf_r+0x22>

08024b5a <__smakebuf_r>:
 8024b5a:	898b      	ldrh	r3, [r1, #12]
 8024b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024b5e:	079d      	lsls	r5, r3, #30
 8024b60:	4606      	mov	r6, r0
 8024b62:	460c      	mov	r4, r1
 8024b64:	d507      	bpl.n	8024b76 <__smakebuf_r+0x1c>
 8024b66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024b6a:	6023      	str	r3, [r4, #0]
 8024b6c:	6123      	str	r3, [r4, #16]
 8024b6e:	2301      	movs	r3, #1
 8024b70:	6163      	str	r3, [r4, #20]
 8024b72:	b003      	add	sp, #12
 8024b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b76:	466a      	mov	r2, sp
 8024b78:	ab01      	add	r3, sp, #4
 8024b7a:	f7ff ffc9 	bl	8024b10 <__swhatbuf_r>
 8024b7e:	9f00      	ldr	r7, [sp, #0]
 8024b80:	4605      	mov	r5, r0
 8024b82:	4639      	mov	r1, r7
 8024b84:	4630      	mov	r0, r6
 8024b86:	f7fe fd51 	bl	802362c <_malloc_r>
 8024b8a:	b948      	cbnz	r0, 8024ba0 <__smakebuf_r+0x46>
 8024b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024b90:	059a      	lsls	r2, r3, #22
 8024b92:	d4ee      	bmi.n	8024b72 <__smakebuf_r+0x18>
 8024b94:	f023 0303 	bic.w	r3, r3, #3
 8024b98:	f043 0302 	orr.w	r3, r3, #2
 8024b9c:	81a3      	strh	r3, [r4, #12]
 8024b9e:	e7e2      	b.n	8024b66 <__smakebuf_r+0xc>
 8024ba0:	89a3      	ldrh	r3, [r4, #12]
 8024ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024baa:	81a3      	strh	r3, [r4, #12]
 8024bac:	9b01      	ldr	r3, [sp, #4]
 8024bae:	6020      	str	r0, [r4, #0]
 8024bb0:	b15b      	cbz	r3, 8024bca <__smakebuf_r+0x70>
 8024bb2:	4630      	mov	r0, r6
 8024bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024bb8:	f000 f88e 	bl	8024cd8 <_isatty_r>
 8024bbc:	b128      	cbz	r0, 8024bca <__smakebuf_r+0x70>
 8024bbe:	89a3      	ldrh	r3, [r4, #12]
 8024bc0:	f023 0303 	bic.w	r3, r3, #3
 8024bc4:	f043 0301 	orr.w	r3, r3, #1
 8024bc8:	81a3      	strh	r3, [r4, #12]
 8024bca:	89a3      	ldrh	r3, [r4, #12]
 8024bcc:	431d      	orrs	r5, r3
 8024bce:	81a5      	strh	r5, [r4, #12]
 8024bd0:	e7cf      	b.n	8024b72 <__smakebuf_r+0x18>

08024bd2 <__sccl>:
 8024bd2:	b570      	push	{r4, r5, r6, lr}
 8024bd4:	780b      	ldrb	r3, [r1, #0]
 8024bd6:	4604      	mov	r4, r0
 8024bd8:	2b5e      	cmp	r3, #94	@ 0x5e
 8024bda:	bf0b      	itete	eq
 8024bdc:	784b      	ldrbeq	r3, [r1, #1]
 8024bde:	1c4a      	addne	r2, r1, #1
 8024be0:	1c8a      	addeq	r2, r1, #2
 8024be2:	2100      	movne	r1, #0
 8024be4:	bf08      	it	eq
 8024be6:	2101      	moveq	r1, #1
 8024be8:	3801      	subs	r0, #1
 8024bea:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8024bee:	f800 1f01 	strb.w	r1, [r0, #1]!
 8024bf2:	42a8      	cmp	r0, r5
 8024bf4:	d1fb      	bne.n	8024bee <__sccl+0x1c>
 8024bf6:	b90b      	cbnz	r3, 8024bfc <__sccl+0x2a>
 8024bf8:	1e50      	subs	r0, r2, #1
 8024bfa:	bd70      	pop	{r4, r5, r6, pc}
 8024bfc:	f081 0101 	eor.w	r1, r1, #1
 8024c00:	4610      	mov	r0, r2
 8024c02:	54e1      	strb	r1, [r4, r3]
 8024c04:	4602      	mov	r2, r0
 8024c06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024c0a:	2d2d      	cmp	r5, #45	@ 0x2d
 8024c0c:	d005      	beq.n	8024c1a <__sccl+0x48>
 8024c0e:	2d5d      	cmp	r5, #93	@ 0x5d
 8024c10:	d016      	beq.n	8024c40 <__sccl+0x6e>
 8024c12:	2d00      	cmp	r5, #0
 8024c14:	d0f1      	beq.n	8024bfa <__sccl+0x28>
 8024c16:	462b      	mov	r3, r5
 8024c18:	e7f2      	b.n	8024c00 <__sccl+0x2e>
 8024c1a:	7846      	ldrb	r6, [r0, #1]
 8024c1c:	2e5d      	cmp	r6, #93	@ 0x5d
 8024c1e:	d0fa      	beq.n	8024c16 <__sccl+0x44>
 8024c20:	42b3      	cmp	r3, r6
 8024c22:	dcf8      	bgt.n	8024c16 <__sccl+0x44>
 8024c24:	461a      	mov	r2, r3
 8024c26:	3002      	adds	r0, #2
 8024c28:	3201      	adds	r2, #1
 8024c2a:	4296      	cmp	r6, r2
 8024c2c:	54a1      	strb	r1, [r4, r2]
 8024c2e:	dcfb      	bgt.n	8024c28 <__sccl+0x56>
 8024c30:	1af2      	subs	r2, r6, r3
 8024c32:	3a01      	subs	r2, #1
 8024c34:	42b3      	cmp	r3, r6
 8024c36:	bfa8      	it	ge
 8024c38:	2200      	movge	r2, #0
 8024c3a:	1c5d      	adds	r5, r3, #1
 8024c3c:	18ab      	adds	r3, r5, r2
 8024c3e:	e7e1      	b.n	8024c04 <__sccl+0x32>
 8024c40:	4610      	mov	r0, r2
 8024c42:	e7da      	b.n	8024bfa <__sccl+0x28>

08024c44 <__submore>:
 8024c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c48:	460c      	mov	r4, r1
 8024c4a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024c50:	4299      	cmp	r1, r3
 8024c52:	d11b      	bne.n	8024c8c <__submore+0x48>
 8024c54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8024c58:	f7fe fce8 	bl	802362c <_malloc_r>
 8024c5c:	b918      	cbnz	r0, 8024c66 <__submore+0x22>
 8024c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8024c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024c6a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8024c6c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8024c70:	6360      	str	r0, [r4, #52]	@ 0x34
 8024c72:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8024c76:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8024c7a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8024c7e:	7043      	strb	r3, [r0, #1]
 8024c80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8024c84:	7003      	strb	r3, [r0, #0]
 8024c86:	6020      	str	r0, [r4, #0]
 8024c88:	2000      	movs	r0, #0
 8024c8a:	e7ea      	b.n	8024c62 <__submore+0x1e>
 8024c8c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8024c8e:	0077      	lsls	r7, r6, #1
 8024c90:	463a      	mov	r2, r7
 8024c92:	f000 f86e 	bl	8024d72 <_realloc_r>
 8024c96:	4605      	mov	r5, r0
 8024c98:	2800      	cmp	r0, #0
 8024c9a:	d0e0      	beq.n	8024c5e <__submore+0x1a>
 8024c9c:	eb00 0806 	add.w	r8, r0, r6
 8024ca0:	4601      	mov	r1, r0
 8024ca2:	4632      	mov	r2, r6
 8024ca4:	4640      	mov	r0, r8
 8024ca6:	f7fd fdc6 	bl	8022836 <memcpy>
 8024caa:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8024cae:	f8c4 8000 	str.w	r8, [r4]
 8024cb2:	e7e9      	b.n	8024c88 <__submore+0x44>

08024cb4 <_fstat_r>:
 8024cb4:	b538      	push	{r3, r4, r5, lr}
 8024cb6:	2300      	movs	r3, #0
 8024cb8:	4d06      	ldr	r5, [pc, #24]	@ (8024cd4 <_fstat_r+0x20>)
 8024cba:	4604      	mov	r4, r0
 8024cbc:	4608      	mov	r0, r1
 8024cbe:	4611      	mov	r1, r2
 8024cc0:	602b      	str	r3, [r5, #0]
 8024cc2:	f7de fefc 	bl	8003abe <_fstat>
 8024cc6:	1c43      	adds	r3, r0, #1
 8024cc8:	d102      	bne.n	8024cd0 <_fstat_r+0x1c>
 8024cca:	682b      	ldr	r3, [r5, #0]
 8024ccc:	b103      	cbz	r3, 8024cd0 <_fstat_r+0x1c>
 8024cce:	6023      	str	r3, [r4, #0]
 8024cd0:	bd38      	pop	{r3, r4, r5, pc}
 8024cd2:	bf00      	nop
 8024cd4:	2000c058 	.word	0x2000c058

08024cd8 <_isatty_r>:
 8024cd8:	b538      	push	{r3, r4, r5, lr}
 8024cda:	2300      	movs	r3, #0
 8024cdc:	4d05      	ldr	r5, [pc, #20]	@ (8024cf4 <_isatty_r+0x1c>)
 8024cde:	4604      	mov	r4, r0
 8024ce0:	4608      	mov	r0, r1
 8024ce2:	602b      	str	r3, [r5, #0]
 8024ce4:	f7de fefa 	bl	8003adc <_isatty>
 8024ce8:	1c43      	adds	r3, r0, #1
 8024cea:	d102      	bne.n	8024cf2 <_isatty_r+0x1a>
 8024cec:	682b      	ldr	r3, [r5, #0]
 8024cee:	b103      	cbz	r3, 8024cf2 <_isatty_r+0x1a>
 8024cf0:	6023      	str	r3, [r4, #0]
 8024cf2:	bd38      	pop	{r3, r4, r5, pc}
 8024cf4:	2000c058 	.word	0x2000c058

08024cf8 <_sbrk_r>:
 8024cf8:	b538      	push	{r3, r4, r5, lr}
 8024cfa:	2300      	movs	r3, #0
 8024cfc:	4d05      	ldr	r5, [pc, #20]	@ (8024d14 <_sbrk_r+0x1c>)
 8024cfe:	4604      	mov	r4, r0
 8024d00:	4608      	mov	r0, r1
 8024d02:	602b      	str	r3, [r5, #0]
 8024d04:	f7de ff00 	bl	8003b08 <_sbrk>
 8024d08:	1c43      	adds	r3, r0, #1
 8024d0a:	d102      	bne.n	8024d12 <_sbrk_r+0x1a>
 8024d0c:	682b      	ldr	r3, [r5, #0]
 8024d0e:	b103      	cbz	r3, 8024d12 <_sbrk_r+0x1a>
 8024d10:	6023      	str	r3, [r4, #0]
 8024d12:	bd38      	pop	{r3, r4, r5, pc}
 8024d14:	2000c058 	.word	0x2000c058

08024d18 <abort>:
 8024d18:	2006      	movs	r0, #6
 8024d1a:	b508      	push	{r3, lr}
 8024d1c:	f000 f8fe 	bl	8024f1c <raise>
 8024d20:	2001      	movs	r0, #1
 8024d22:	f7de fe7d 	bl	8003a20 <_exit>

08024d26 <_calloc_r>:
 8024d26:	b570      	push	{r4, r5, r6, lr}
 8024d28:	fba1 5402 	umull	r5, r4, r1, r2
 8024d2c:	b934      	cbnz	r4, 8024d3c <_calloc_r+0x16>
 8024d2e:	4629      	mov	r1, r5
 8024d30:	f7fe fc7c 	bl	802362c <_malloc_r>
 8024d34:	4606      	mov	r6, r0
 8024d36:	b928      	cbnz	r0, 8024d44 <_calloc_r+0x1e>
 8024d38:	4630      	mov	r0, r6
 8024d3a:	bd70      	pop	{r4, r5, r6, pc}
 8024d3c:	220c      	movs	r2, #12
 8024d3e:	2600      	movs	r6, #0
 8024d40:	6002      	str	r2, [r0, #0]
 8024d42:	e7f9      	b.n	8024d38 <_calloc_r+0x12>
 8024d44:	462a      	mov	r2, r5
 8024d46:	4621      	mov	r1, r4
 8024d48:	f7fd fc50 	bl	80225ec <memset>
 8024d4c:	e7f4      	b.n	8024d38 <_calloc_r+0x12>

08024d4e <__ascii_mbtowc>:
 8024d4e:	b082      	sub	sp, #8
 8024d50:	b901      	cbnz	r1, 8024d54 <__ascii_mbtowc+0x6>
 8024d52:	a901      	add	r1, sp, #4
 8024d54:	b142      	cbz	r2, 8024d68 <__ascii_mbtowc+0x1a>
 8024d56:	b14b      	cbz	r3, 8024d6c <__ascii_mbtowc+0x1e>
 8024d58:	7813      	ldrb	r3, [r2, #0]
 8024d5a:	600b      	str	r3, [r1, #0]
 8024d5c:	7812      	ldrb	r2, [r2, #0]
 8024d5e:	1e10      	subs	r0, r2, #0
 8024d60:	bf18      	it	ne
 8024d62:	2001      	movne	r0, #1
 8024d64:	b002      	add	sp, #8
 8024d66:	4770      	bx	lr
 8024d68:	4610      	mov	r0, r2
 8024d6a:	e7fb      	b.n	8024d64 <__ascii_mbtowc+0x16>
 8024d6c:	f06f 0001 	mvn.w	r0, #1
 8024d70:	e7f8      	b.n	8024d64 <__ascii_mbtowc+0x16>

08024d72 <_realloc_r>:
 8024d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d76:	4607      	mov	r7, r0
 8024d78:	4614      	mov	r4, r2
 8024d7a:	460d      	mov	r5, r1
 8024d7c:	b921      	cbnz	r1, 8024d88 <_realloc_r+0x16>
 8024d7e:	4611      	mov	r1, r2
 8024d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d84:	f7fe bc52 	b.w	802362c <_malloc_r>
 8024d88:	b92a      	cbnz	r2, 8024d96 <_realloc_r+0x24>
 8024d8a:	f7fe fbdd 	bl	8023548 <_free_r>
 8024d8e:	4625      	mov	r5, r4
 8024d90:	4628      	mov	r0, r5
 8024d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d96:	f000 f8dd 	bl	8024f54 <_malloc_usable_size_r>
 8024d9a:	4284      	cmp	r4, r0
 8024d9c:	4606      	mov	r6, r0
 8024d9e:	d802      	bhi.n	8024da6 <_realloc_r+0x34>
 8024da0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8024da4:	d8f4      	bhi.n	8024d90 <_realloc_r+0x1e>
 8024da6:	4621      	mov	r1, r4
 8024da8:	4638      	mov	r0, r7
 8024daa:	f7fe fc3f 	bl	802362c <_malloc_r>
 8024dae:	4680      	mov	r8, r0
 8024db0:	b908      	cbnz	r0, 8024db6 <_realloc_r+0x44>
 8024db2:	4645      	mov	r5, r8
 8024db4:	e7ec      	b.n	8024d90 <_realloc_r+0x1e>
 8024db6:	42b4      	cmp	r4, r6
 8024db8:	4622      	mov	r2, r4
 8024dba:	4629      	mov	r1, r5
 8024dbc:	bf28      	it	cs
 8024dbe:	4632      	movcs	r2, r6
 8024dc0:	f7fd fd39 	bl	8022836 <memcpy>
 8024dc4:	4629      	mov	r1, r5
 8024dc6:	4638      	mov	r0, r7
 8024dc8:	f7fe fbbe 	bl	8023548 <_free_r>
 8024dcc:	e7f1      	b.n	8024db2 <_realloc_r+0x40>
	...

08024dd0 <_strtoul_l.isra.0>:
 8024dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024dd4:	4686      	mov	lr, r0
 8024dd6:	460d      	mov	r5, r1
 8024dd8:	4e33      	ldr	r6, [pc, #204]	@ (8024ea8 <_strtoul_l.isra.0+0xd8>)
 8024dda:	4628      	mov	r0, r5
 8024ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024de0:	5d37      	ldrb	r7, [r6, r4]
 8024de2:	f017 0708 	ands.w	r7, r7, #8
 8024de6:	d1f8      	bne.n	8024dda <_strtoul_l.isra.0+0xa>
 8024de8:	2c2d      	cmp	r4, #45	@ 0x2d
 8024dea:	d110      	bne.n	8024e0e <_strtoul_l.isra.0+0x3e>
 8024dec:	2701      	movs	r7, #1
 8024dee:	782c      	ldrb	r4, [r5, #0]
 8024df0:	1c85      	adds	r5, r0, #2
 8024df2:	f033 0010 	bics.w	r0, r3, #16
 8024df6:	d115      	bne.n	8024e24 <_strtoul_l.isra.0+0x54>
 8024df8:	2c30      	cmp	r4, #48	@ 0x30
 8024dfa:	d10d      	bne.n	8024e18 <_strtoul_l.isra.0+0x48>
 8024dfc:	7828      	ldrb	r0, [r5, #0]
 8024dfe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8024e02:	2858      	cmp	r0, #88	@ 0x58
 8024e04:	d108      	bne.n	8024e18 <_strtoul_l.isra.0+0x48>
 8024e06:	786c      	ldrb	r4, [r5, #1]
 8024e08:	3502      	adds	r5, #2
 8024e0a:	2310      	movs	r3, #16
 8024e0c:	e00a      	b.n	8024e24 <_strtoul_l.isra.0+0x54>
 8024e0e:	2c2b      	cmp	r4, #43	@ 0x2b
 8024e10:	bf04      	itt	eq
 8024e12:	782c      	ldrbeq	r4, [r5, #0]
 8024e14:	1c85      	addeq	r5, r0, #2
 8024e16:	e7ec      	b.n	8024df2 <_strtoul_l.isra.0+0x22>
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	d1f6      	bne.n	8024e0a <_strtoul_l.isra.0+0x3a>
 8024e1c:	2c30      	cmp	r4, #48	@ 0x30
 8024e1e:	bf14      	ite	ne
 8024e20:	230a      	movne	r3, #10
 8024e22:	2308      	moveq	r3, #8
 8024e24:	f04f 38ff 	mov.w	r8, #4294967295
 8024e28:	fbb8 f8f3 	udiv	r8, r8, r3
 8024e2c:	2600      	movs	r6, #0
 8024e2e:	fb03 f908 	mul.w	r9, r3, r8
 8024e32:	4630      	mov	r0, r6
 8024e34:	ea6f 0909 	mvn.w	r9, r9
 8024e38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8024e3c:	f1bc 0f09 	cmp.w	ip, #9
 8024e40:	d810      	bhi.n	8024e64 <_strtoul_l.isra.0+0x94>
 8024e42:	4664      	mov	r4, ip
 8024e44:	42a3      	cmp	r3, r4
 8024e46:	dd1e      	ble.n	8024e86 <_strtoul_l.isra.0+0xb6>
 8024e48:	f1b6 3fff 	cmp.w	r6, #4294967295
 8024e4c:	d007      	beq.n	8024e5e <_strtoul_l.isra.0+0x8e>
 8024e4e:	4580      	cmp	r8, r0
 8024e50:	d316      	bcc.n	8024e80 <_strtoul_l.isra.0+0xb0>
 8024e52:	d101      	bne.n	8024e58 <_strtoul_l.isra.0+0x88>
 8024e54:	45a1      	cmp	r9, r4
 8024e56:	db13      	blt.n	8024e80 <_strtoul_l.isra.0+0xb0>
 8024e58:	2601      	movs	r6, #1
 8024e5a:	fb00 4003 	mla	r0, r0, r3, r4
 8024e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024e62:	e7e9      	b.n	8024e38 <_strtoul_l.isra.0+0x68>
 8024e64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8024e68:	f1bc 0f19 	cmp.w	ip, #25
 8024e6c:	d801      	bhi.n	8024e72 <_strtoul_l.isra.0+0xa2>
 8024e6e:	3c37      	subs	r4, #55	@ 0x37
 8024e70:	e7e8      	b.n	8024e44 <_strtoul_l.isra.0+0x74>
 8024e72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8024e76:	f1bc 0f19 	cmp.w	ip, #25
 8024e7a:	d804      	bhi.n	8024e86 <_strtoul_l.isra.0+0xb6>
 8024e7c:	3c57      	subs	r4, #87	@ 0x57
 8024e7e:	e7e1      	b.n	8024e44 <_strtoul_l.isra.0+0x74>
 8024e80:	f04f 36ff 	mov.w	r6, #4294967295
 8024e84:	e7eb      	b.n	8024e5e <_strtoul_l.isra.0+0x8e>
 8024e86:	1c73      	adds	r3, r6, #1
 8024e88:	d106      	bne.n	8024e98 <_strtoul_l.isra.0+0xc8>
 8024e8a:	2322      	movs	r3, #34	@ 0x22
 8024e8c:	4630      	mov	r0, r6
 8024e8e:	f8ce 3000 	str.w	r3, [lr]
 8024e92:	b932      	cbnz	r2, 8024ea2 <_strtoul_l.isra.0+0xd2>
 8024e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024e98:	b107      	cbz	r7, 8024e9c <_strtoul_l.isra.0+0xcc>
 8024e9a:	4240      	negs	r0, r0
 8024e9c:	2a00      	cmp	r2, #0
 8024e9e:	d0f9      	beq.n	8024e94 <_strtoul_l.isra.0+0xc4>
 8024ea0:	b106      	cbz	r6, 8024ea4 <_strtoul_l.isra.0+0xd4>
 8024ea2:	1e69      	subs	r1, r5, #1
 8024ea4:	6011      	str	r1, [r2, #0]
 8024ea6:	e7f5      	b.n	8024e94 <_strtoul_l.isra.0+0xc4>
 8024ea8:	08031855 	.word	0x08031855

08024eac <_strtoul_r>:
 8024eac:	f7ff bf90 	b.w	8024dd0 <_strtoul_l.isra.0>

08024eb0 <__ascii_wctomb>:
 8024eb0:	4603      	mov	r3, r0
 8024eb2:	4608      	mov	r0, r1
 8024eb4:	b141      	cbz	r1, 8024ec8 <__ascii_wctomb+0x18>
 8024eb6:	2aff      	cmp	r2, #255	@ 0xff
 8024eb8:	d904      	bls.n	8024ec4 <__ascii_wctomb+0x14>
 8024eba:	228a      	movs	r2, #138	@ 0x8a
 8024ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8024ec0:	601a      	str	r2, [r3, #0]
 8024ec2:	4770      	bx	lr
 8024ec4:	2001      	movs	r0, #1
 8024ec6:	700a      	strb	r2, [r1, #0]
 8024ec8:	4770      	bx	lr

08024eca <_raise_r>:
 8024eca:	291f      	cmp	r1, #31
 8024ecc:	b538      	push	{r3, r4, r5, lr}
 8024ece:	4605      	mov	r5, r0
 8024ed0:	460c      	mov	r4, r1
 8024ed2:	d904      	bls.n	8024ede <_raise_r+0x14>
 8024ed4:	2316      	movs	r3, #22
 8024ed6:	6003      	str	r3, [r0, #0]
 8024ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8024edc:	bd38      	pop	{r3, r4, r5, pc}
 8024ede:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024ee0:	b112      	cbz	r2, 8024ee8 <_raise_r+0x1e>
 8024ee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024ee6:	b94b      	cbnz	r3, 8024efc <_raise_r+0x32>
 8024ee8:	4628      	mov	r0, r5
 8024eea:	f000 f831 	bl	8024f50 <_getpid_r>
 8024eee:	4622      	mov	r2, r4
 8024ef0:	4601      	mov	r1, r0
 8024ef2:	4628      	mov	r0, r5
 8024ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024ef8:	f000 b818 	b.w	8024f2c <_kill_r>
 8024efc:	2b01      	cmp	r3, #1
 8024efe:	d00a      	beq.n	8024f16 <_raise_r+0x4c>
 8024f00:	1c59      	adds	r1, r3, #1
 8024f02:	d103      	bne.n	8024f0c <_raise_r+0x42>
 8024f04:	2316      	movs	r3, #22
 8024f06:	6003      	str	r3, [r0, #0]
 8024f08:	2001      	movs	r0, #1
 8024f0a:	e7e7      	b.n	8024edc <_raise_r+0x12>
 8024f0c:	2100      	movs	r1, #0
 8024f0e:	4620      	mov	r0, r4
 8024f10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024f14:	4798      	blx	r3
 8024f16:	2000      	movs	r0, #0
 8024f18:	e7e0      	b.n	8024edc <_raise_r+0x12>
	...

08024f1c <raise>:
 8024f1c:	4b02      	ldr	r3, [pc, #8]	@ (8024f28 <raise+0xc>)
 8024f1e:	4601      	mov	r1, r0
 8024f20:	6818      	ldr	r0, [r3, #0]
 8024f22:	f7ff bfd2 	b.w	8024eca <_raise_r>
 8024f26:	bf00      	nop
 8024f28:	20000134 	.word	0x20000134

08024f2c <_kill_r>:
 8024f2c:	b538      	push	{r3, r4, r5, lr}
 8024f2e:	2300      	movs	r3, #0
 8024f30:	4d06      	ldr	r5, [pc, #24]	@ (8024f4c <_kill_r+0x20>)
 8024f32:	4604      	mov	r4, r0
 8024f34:	4608      	mov	r0, r1
 8024f36:	4611      	mov	r1, r2
 8024f38:	602b      	str	r3, [r5, #0]
 8024f3a:	f7de fd5f 	bl	80039fc <_kill>
 8024f3e:	1c43      	adds	r3, r0, #1
 8024f40:	d102      	bne.n	8024f48 <_kill_r+0x1c>
 8024f42:	682b      	ldr	r3, [r5, #0]
 8024f44:	b103      	cbz	r3, 8024f48 <_kill_r+0x1c>
 8024f46:	6023      	str	r3, [r4, #0]
 8024f48:	bd38      	pop	{r3, r4, r5, pc}
 8024f4a:	bf00      	nop
 8024f4c:	2000c058 	.word	0x2000c058

08024f50 <_getpid_r>:
 8024f50:	f7de bd4c 	b.w	80039ec <_getpid>

08024f54 <_malloc_usable_size_r>:
 8024f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f58:	1f18      	subs	r0, r3, #4
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	bfbc      	itt	lt
 8024f5e:	580b      	ldrlt	r3, [r1, r0]
 8024f60:	18c0      	addlt	r0, r0, r3
 8024f62:	4770      	bx	lr

08024f64 <sqrtf>:
 8024f64:	b538      	push	{r3, r4, r5, lr}
 8024f66:	4605      	mov	r5, r0
 8024f68:	f000 f816 	bl	8024f98 <__ieee754_sqrtf>
 8024f6c:	4629      	mov	r1, r5
 8024f6e:	4604      	mov	r4, r0
 8024f70:	4628      	mov	r0, r5
 8024f72:	f7dc f8f3 	bl	800115c <__aeabi_fcmpun>
 8024f76:	b968      	cbnz	r0, 8024f94 <sqrtf+0x30>
 8024f78:	2100      	movs	r1, #0
 8024f7a:	4628      	mov	r0, r5
 8024f7c:	f7dc f8c6 	bl	800110c <__aeabi_fcmplt>
 8024f80:	b140      	cbz	r0, 8024f94 <sqrtf+0x30>
 8024f82:	f7fd fc1d 	bl	80227c0 <__errno>
 8024f86:	2321      	movs	r3, #33	@ 0x21
 8024f88:	2100      	movs	r1, #0
 8024f8a:	6003      	str	r3, [r0, #0]
 8024f8c:	4608      	mov	r0, r1
 8024f8e:	f7db ffd3 	bl	8000f38 <__aeabi_fdiv>
 8024f92:	4604      	mov	r4, r0
 8024f94:	4620      	mov	r0, r4
 8024f96:	bd38      	pop	{r3, r4, r5, pc}

08024f98 <__ieee754_sqrtf>:
 8024f98:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8024f9c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8024fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024fa4:	4603      	mov	r3, r0
 8024fa6:	4604      	mov	r4, r0
 8024fa8:	d30a      	bcc.n	8024fc0 <__ieee754_sqrtf+0x28>
 8024faa:	4601      	mov	r1, r0
 8024fac:	f7db ff10 	bl	8000dd0 <__aeabi_fmul>
 8024fb0:	4601      	mov	r1, r0
 8024fb2:	4620      	mov	r0, r4
 8024fb4:	f7db fe04 	bl	8000bc0 <__addsf3>
 8024fb8:	4604      	mov	r4, r0
 8024fba:	4620      	mov	r0, r4
 8024fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fc0:	2a00      	cmp	r2, #0
 8024fc2:	d0fa      	beq.n	8024fba <__ieee754_sqrtf+0x22>
 8024fc4:	2800      	cmp	r0, #0
 8024fc6:	da06      	bge.n	8024fd6 <__ieee754_sqrtf+0x3e>
 8024fc8:	4601      	mov	r1, r0
 8024fca:	f7db fdf7 	bl	8000bbc <__aeabi_fsub>
 8024fce:	4601      	mov	r1, r0
 8024fd0:	f7db ffb2 	bl	8000f38 <__aeabi_fdiv>
 8024fd4:	e7f0      	b.n	8024fb8 <__ieee754_sqrtf+0x20>
 8024fd6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8024fda:	d03c      	beq.n	8025056 <__ieee754_sqrtf+0xbe>
 8024fdc:	15c2      	asrs	r2, r0, #23
 8024fde:	2400      	movs	r4, #0
 8024fe0:	2019      	movs	r0, #25
 8024fe2:	4626      	mov	r6, r4
 8024fe4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8024fe8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024fec:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8024ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024ff4:	07d2      	lsls	r2, r2, #31
 8024ff6:	bf58      	it	pl
 8024ff8:	005b      	lslpl	r3, r3, #1
 8024ffa:	106d      	asrs	r5, r5, #1
 8024ffc:	005b      	lsls	r3, r3, #1
 8024ffe:	1872      	adds	r2, r6, r1
 8025000:	429a      	cmp	r2, r3
 8025002:	bfcf      	iteee	gt
 8025004:	461a      	movgt	r2, r3
 8025006:	1856      	addle	r6, r2, r1
 8025008:	1864      	addle	r4, r4, r1
 802500a:	1a9a      	suble	r2, r3, r2
 802500c:	3801      	subs	r0, #1
 802500e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8025012:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8025016:	d1f2      	bne.n	8024ffe <__ieee754_sqrtf+0x66>
 8025018:	b1ba      	cbz	r2, 802504a <__ieee754_sqrtf+0xb2>
 802501a:	4e15      	ldr	r6, [pc, #84]	@ (8025070 <__ieee754_sqrtf+0xd8>)
 802501c:	4f15      	ldr	r7, [pc, #84]	@ (8025074 <__ieee754_sqrtf+0xdc>)
 802501e:	6830      	ldr	r0, [r6, #0]
 8025020:	6839      	ldr	r1, [r7, #0]
 8025022:	f7db fdcb 	bl	8000bbc <__aeabi_fsub>
 8025026:	f8d6 8000 	ldr.w	r8, [r6]
 802502a:	4601      	mov	r1, r0
 802502c:	4640      	mov	r0, r8
 802502e:	f7dc f877 	bl	8001120 <__aeabi_fcmple>
 8025032:	b150      	cbz	r0, 802504a <__ieee754_sqrtf+0xb2>
 8025034:	6830      	ldr	r0, [r6, #0]
 8025036:	6839      	ldr	r1, [r7, #0]
 8025038:	f7db fdc2 	bl	8000bc0 <__addsf3>
 802503c:	6836      	ldr	r6, [r6, #0]
 802503e:	4601      	mov	r1, r0
 8025040:	4630      	mov	r0, r6
 8025042:	f7dc f863 	bl	800110c <__aeabi_fcmplt>
 8025046:	b170      	cbz	r0, 8025066 <__ieee754_sqrtf+0xce>
 8025048:	3402      	adds	r4, #2
 802504a:	1064      	asrs	r4, r4, #1
 802504c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8025050:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8025054:	e7b1      	b.n	8024fba <__ieee754_sqrtf+0x22>
 8025056:	005b      	lsls	r3, r3, #1
 8025058:	0218      	lsls	r0, r3, #8
 802505a:	460a      	mov	r2, r1
 802505c:	f101 0101 	add.w	r1, r1, #1
 8025060:	d5f9      	bpl.n	8025056 <__ieee754_sqrtf+0xbe>
 8025062:	4252      	negs	r2, r2
 8025064:	e7bb      	b.n	8024fde <__ieee754_sqrtf+0x46>
 8025066:	3401      	adds	r4, #1
 8025068:	f024 0401 	bic.w	r4, r4, #1
 802506c:	e7ed      	b.n	802504a <__ieee754_sqrtf+0xb2>
 802506e:	bf00      	nop
 8025070:	08031a5c 	.word	0x08031a5c
 8025074:	08031a58 	.word	0x08031a58

08025078 <_init>:
 8025078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802507a:	bf00      	nop
 802507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802507e:	bc08      	pop	{r3}
 8025080:	469e      	mov	lr, r3
 8025082:	4770      	bx	lr

08025084 <_fini>:
 8025084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025086:	bf00      	nop
 8025088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802508a:	bc08      	pop	{r3}
 802508c:	469e      	mov	lr, r3
 802508e:	4770      	bx	lr
