
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024f18  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e230  080250a0  080250a0  000260a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080332d0  080332d0  000352f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080332d0  080332d0  000342d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080332d8  080332d8  000352f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080332d8  080332d8  000342d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080332dc  080332dc  000342dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  080332e0  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd80  200002f0  080335d0  000352f0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000c070  080335d0  00036070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000352f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f30d  00000000  00000000  00035319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ad44  00000000  00000000  00074626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  0007f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000216d  00000000  00000000  00081e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be5d  00000000  00000000  00083f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005128f  00000000  00000000  000bfdda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea51  00000000  00000000  00111069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ffaba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c370  00000000  00000000  001ffb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0020be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002f0 	.word	0x200002f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08025088 	.word	0x08025088

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002f4 	.word	0x200002f4
 80001c4:	08025088 	.word	0x08025088

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpun>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x14>
 800116a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116e:	d108      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 8001170:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001174:	d102      	bne.n	800117c <__aeabi_fcmpun+0x20>
 8001176:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117a:	d102      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	f04f 0001 	mov.w	r0, #1
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2uiz>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	d20e      	bcs.n	80011f6 <__aeabi_f2uiz+0x22>
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011dc:	d30b      	bcc.n	80011f6 <__aeabi_f2uiz+0x22>
 80011de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d409      	bmi.n	80011fc <__aeabi_f2uiz+0x28>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f0:	fa23 f002 	lsr.w	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2uiz+0x32>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d102      	bne.n	800120c <__aeabi_f2uiz+0x38>
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	4770      	bx	lr
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__aeabi_uldivmod>:
 8001214:	b953      	cbnz	r3, 800122c <__aeabi_uldivmod+0x18>
 8001216:	b94a      	cbnz	r2, 800122c <__aeabi_uldivmod+0x18>
 8001218:	2900      	cmp	r1, #0
 800121a:	bf08      	it	eq
 800121c:	2800      	cmpeq	r0, #0
 800121e:	bf1c      	itt	ne
 8001220:	f04f 31ff 	movne.w	r1, #4294967295
 8001224:	f04f 30ff 	movne.w	r0, #4294967295
 8001228:	f000 b98c 	b.w	8001544 <__aeabi_idiv0>
 800122c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001234:	f000 f806 	bl	8001244 <__udivmoddi4>
 8001238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800123c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <__udivmoddi4>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	9d08      	ldr	r5, [sp, #32]
 800124a:	468e      	mov	lr, r1
 800124c:	4604      	mov	r4, r0
 800124e:	4688      	mov	r8, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14a      	bne.n	80012ea <__udivmoddi4+0xa6>
 8001254:	428a      	cmp	r2, r1
 8001256:	4617      	mov	r7, r2
 8001258:	d962      	bls.n	8001320 <__udivmoddi4+0xdc>
 800125a:	fab2 f682 	clz	r6, r2
 800125e:	b14e      	cbz	r6, 8001274 <__udivmoddi4+0x30>
 8001260:	f1c6 0320 	rsb	r3, r6, #32
 8001264:	fa01 f806 	lsl.w	r8, r1, r6
 8001268:	fa20 f303 	lsr.w	r3, r0, r3
 800126c:	40b7      	lsls	r7, r6
 800126e:	ea43 0808 	orr.w	r8, r3, r8
 8001272:	40b4      	lsls	r4, r6
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fbb8 f1fe 	udiv	r1, r8, lr
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb0e 8811 	mls	r8, lr, r1, r8
 8001284:	fb01 f20c 	mul.w	r2, r1, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x62>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f101 30ff 	add.w	r0, r1, #4294967295
 8001298:	f080 80eb 	bcs.w	8001472 <__udivmoddi4+0x22e>
 800129c:	429a      	cmp	r2, r3
 800129e:	f240 80e8 	bls.w	8001472 <__udivmoddi4+0x22e>
 80012a2:	3902      	subs	r1, #2
 80012a4:	443b      	add	r3, r7
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80012ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80012b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012b4:	b2a3      	uxth	r3, r4
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	459c      	cmp	ip, r3
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0x8e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c4:	f080 80d7 	bcs.w	8001476 <__udivmoddi4+0x232>
 80012c8:	459c      	cmp	ip, r3
 80012ca:	f240 80d4 	bls.w	8001476 <__udivmoddi4+0x232>
 80012ce:	443b      	add	r3, r7
 80012d0:	3802      	subs	r0, #2
 80012d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d6:	2100      	movs	r1, #0
 80012d8:	eba3 030c 	sub.w	r3, r3, ip
 80012dc:	b11d      	cbz	r5, 80012e6 <__udivmoddi4+0xa2>
 80012de:	2200      	movs	r2, #0
 80012e0:	40f3      	lsrs	r3, r6
 80012e2:	e9c5 3200 	strd	r3, r2, [r5]
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d905      	bls.n	80012fa <__udivmoddi4+0xb6>
 80012ee:	b10d      	cbz	r5, 80012f4 <__udivmoddi4+0xb0>
 80012f0:	e9c5 0100 	strd	r0, r1, [r5]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4608      	mov	r0, r1
 80012f8:	e7f5      	b.n	80012e6 <__udivmoddi4+0xa2>
 80012fa:	fab3 f183 	clz	r1, r3
 80012fe:	2900      	cmp	r1, #0
 8001300:	d146      	bne.n	8001390 <__udivmoddi4+0x14c>
 8001302:	4573      	cmp	r3, lr
 8001304:	d302      	bcc.n	800130c <__udivmoddi4+0xc8>
 8001306:	4282      	cmp	r2, r0
 8001308:	f200 8108 	bhi.w	800151c <__udivmoddi4+0x2d8>
 800130c:	1a84      	subs	r4, r0, r2
 800130e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001312:	2001      	movs	r0, #1
 8001314:	4690      	mov	r8, r2
 8001316:	2d00      	cmp	r5, #0
 8001318:	d0e5      	beq.n	80012e6 <__udivmoddi4+0xa2>
 800131a:	e9c5 4800 	strd	r4, r8, [r5]
 800131e:	e7e2      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	f000 8091 	beq.w	8001448 <__udivmoddi4+0x204>
 8001326:	fab2 f682 	clz	r6, r2
 800132a:	2e00      	cmp	r6, #0
 800132c:	f040 80a5 	bne.w	800147a <__udivmoddi4+0x236>
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c03      	lsrs	r3, r0, #16
 8001336:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800133a:	b280      	uxth	r0, r0
 800133c:	b2bc      	uxth	r4, r7
 800133e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001342:	fb0e 221c 	mls	r2, lr, ip, r2
 8001346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800134a:	fb04 f20c 	mul.w	r2, r4, ip
 800134e:	429a      	cmp	r2, r3
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x11e>
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x11c>
 800135a:	429a      	cmp	r2, r3
 800135c:	f200 80e3 	bhi.w	8001526 <__udivmoddi4+0x2e2>
 8001360:	46c4      	mov	ip, r8
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	fbb3 f2fe 	udiv	r2, r3, lr
 8001368:	fb0e 3312 	mls	r3, lr, r2, r3
 800136c:	fb02 f404 	mul.w	r4, r2, r4
 8001370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001374:	429c      	cmp	r4, r3
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x144>
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	f102 30ff 	add.w	r0, r2, #4294967295
 800137e:	d202      	bcs.n	8001386 <__udivmoddi4+0x142>
 8001380:	429c      	cmp	r4, r3
 8001382:	f200 80cd 	bhi.w	8001520 <__udivmoddi4+0x2dc>
 8001386:	4602      	mov	r2, r0
 8001388:	1b1b      	subs	r3, r3, r4
 800138a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800138e:	e7a5      	b.n	80012dc <__udivmoddi4+0x98>
 8001390:	f1c1 0620 	rsb	r6, r1, #32
 8001394:	408b      	lsls	r3, r1
 8001396:	fa22 f706 	lsr.w	r7, r2, r6
 800139a:	431f      	orrs	r7, r3
 800139c:	fa2e fa06 	lsr.w	sl, lr, r6
 80013a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013a4:	fbba f8f9 	udiv	r8, sl, r9
 80013a8:	fa0e fe01 	lsl.w	lr, lr, r1
 80013ac:	fa20 f306 	lsr.w	r3, r0, r6
 80013b0:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b4:	fa1f fc87 	uxth.w	ip, r7
 80013b8:	ea43 030e 	orr.w	r3, r3, lr
 80013bc:	fa00 fe01 	lsl.w	lr, r0, r1
 80013c0:	fb08 f00c 	mul.w	r0, r8, ip
 80013c4:	0c1c      	lsrs	r4, r3, #16
 80013c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x1a4>
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d8:	f080 809e 	bcs.w	8001518 <__udivmoddi4+0x2d4>
 80013dc:	42a0      	cmp	r0, r4
 80013de:	f240 809b 	bls.w	8001518 <__udivmoddi4+0x2d4>
 80013e2:	f1a8 0802 	sub.w	r8, r8, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	b298      	uxth	r0, r3
 80013ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f0:	fb09 4413 	mls	r4, r9, r3, r4
 80013f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013fc:	45a4      	cmp	ip, r4
 80013fe:	d909      	bls.n	8001414 <__udivmoddi4+0x1d0>
 8001400:	193c      	adds	r4, r7, r4
 8001402:	f103 30ff 	add.w	r0, r3, #4294967295
 8001406:	f080 8085 	bcs.w	8001514 <__udivmoddi4+0x2d0>
 800140a:	45a4      	cmp	ip, r4
 800140c:	f240 8082 	bls.w	8001514 <__udivmoddi4+0x2d0>
 8001410:	3b02      	subs	r3, #2
 8001412:	443c      	add	r4, r7
 8001414:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001418:	eba4 040c 	sub.w	r4, r4, ip
 800141c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001420:	4564      	cmp	r4, ip
 8001422:	4643      	mov	r3, r8
 8001424:	46e1      	mov	r9, ip
 8001426:	d364      	bcc.n	80014f2 <__udivmoddi4+0x2ae>
 8001428:	d061      	beq.n	80014ee <__udivmoddi4+0x2aa>
 800142a:	b15d      	cbz	r5, 8001444 <__udivmoddi4+0x200>
 800142c:	ebbe 0203 	subs.w	r2, lr, r3
 8001430:	eb64 0409 	sbc.w	r4, r4, r9
 8001434:	fa04 f606 	lsl.w	r6, r4, r6
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	431e      	orrs	r6, r3
 800143e:	40cc      	lsrs	r4, r1
 8001440:	e9c5 6400 	strd	r6, r4, [r5]
 8001444:	2100      	movs	r1, #0
 8001446:	e74e      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001448:	fbb1 fcf2 	udiv	ip, r1, r2
 800144c:	0c01      	lsrs	r1, r0, #16
 800144e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001452:	b280      	uxth	r0, r0
 8001454:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001458:	463b      	mov	r3, r7
 800145a:	fbb1 f1f7 	udiv	r1, r1, r7
 800145e:	4638      	mov	r0, r7
 8001460:	463c      	mov	r4, r7
 8001462:	46b8      	mov	r8, r7
 8001464:	46be      	mov	lr, r7
 8001466:	2620      	movs	r6, #32
 8001468:	eba2 0208 	sub.w	r2, r2, r8
 800146c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001470:	e765      	b.n	800133e <__udivmoddi4+0xfa>
 8001472:	4601      	mov	r1, r0
 8001474:	e717      	b.n	80012a6 <__udivmoddi4+0x62>
 8001476:	4610      	mov	r0, r2
 8001478:	e72b      	b.n	80012d2 <__udivmoddi4+0x8e>
 800147a:	f1c6 0120 	rsb	r1, r6, #32
 800147e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001482:	40b7      	lsls	r7, r6
 8001484:	fa0e fe06 	lsl.w	lr, lr, r6
 8001488:	fa20 f101 	lsr.w	r1, r0, r1
 800148c:	ea41 010e 	orr.w	r1, r1, lr
 8001490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001494:	fbbc f8fe 	udiv	r8, ip, lr
 8001498:	b2bc      	uxth	r4, r7
 800149a:	fb0e cc18 	mls	ip, lr, r8, ip
 800149e:	fb08 f904 	mul.w	r9, r8, r4
 80014a2:	0c0a      	lsrs	r2, r1, #16
 80014a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a8:	40b0      	lsls	r0, r6
 80014aa:	4591      	cmp	r9, r2
 80014ac:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014b0:	b280      	uxth	r0, r0
 80014b2:	d93e      	bls.n	8001532 <__udivmoddi4+0x2ee>
 80014b4:	18ba      	adds	r2, r7, r2
 80014b6:	f108 3cff 	add.w	ip, r8, #4294967295
 80014ba:	d201      	bcs.n	80014c0 <__udivmoddi4+0x27c>
 80014bc:	4591      	cmp	r9, r2
 80014be:	d81f      	bhi.n	8001500 <__udivmoddi4+0x2bc>
 80014c0:	eba2 0209 	sub.w	r2, r2, r9
 80014c4:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c8:	fb09 f804 	mul.w	r8, r9, r4
 80014cc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014d0:	b28a      	uxth	r2, r1
 80014d2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014d6:	4542      	cmp	r2, r8
 80014d8:	d229      	bcs.n	800152e <__udivmoddi4+0x2ea>
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	f109 31ff 	add.w	r1, r9, #4294967295
 80014e0:	d2c2      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e2:	4542      	cmp	r2, r8
 80014e4:	d2c0      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e6:	f1a9 0102 	sub.w	r1, r9, #2
 80014ea:	443a      	add	r2, r7
 80014ec:	e7bc      	b.n	8001468 <__udivmoddi4+0x224>
 80014ee:	45c6      	cmp	lr, r8
 80014f0:	d29b      	bcs.n	800142a <__udivmoddi4+0x1e6>
 80014f2:	ebb8 0302 	subs.w	r3, r8, r2
 80014f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014fa:	3801      	subs	r0, #1
 80014fc:	46e1      	mov	r9, ip
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e6>
 8001500:	eba7 0909 	sub.w	r9, r7, r9
 8001504:	444a      	add	r2, r9
 8001506:	fbb2 f9fe 	udiv	r9, r2, lr
 800150a:	f1a8 0c02 	sub.w	ip, r8, #2
 800150e:	fb09 f804 	mul.w	r8, r9, r4
 8001512:	e7db      	b.n	80014cc <__udivmoddi4+0x288>
 8001514:	4603      	mov	r3, r0
 8001516:	e77d      	b.n	8001414 <__udivmoddi4+0x1d0>
 8001518:	46d0      	mov	r8, sl
 800151a:	e765      	b.n	80013e8 <__udivmoddi4+0x1a4>
 800151c:	4608      	mov	r0, r1
 800151e:	e6fa      	b.n	8001316 <__udivmoddi4+0xd2>
 8001520:	443b      	add	r3, r7
 8001522:	3a02      	subs	r2, #2
 8001524:	e730      	b.n	8001388 <__udivmoddi4+0x144>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443b      	add	r3, r7
 800152c:	e719      	b.n	8001362 <__udivmoddi4+0x11e>
 800152e:	4649      	mov	r1, r9
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x224>
 8001532:	eba2 0209 	sub.w	r2, r2, r9
 8001536:	fbb2 f9fe 	udiv	r9, r2, lr
 800153a:	46c4      	mov	ip, r8
 800153c:	fb09 f804 	mul.w	r8, r9, r4
 8001540:	e7c4      	b.n	80014cc <__udivmoddi4+0x288>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <Auth_SetCurrentRemoteIp>:
    g_req_ip_set = false;
    g_req_cookie_sid_present = false;
    g_resp_setcookie_pending = false;
}

void Auth_SetCurrentRemoteIp(const ip_addr_t* ip) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    if (ip) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <Auth_SetCurrentRemoteIp+0x1e>
        g_req_ip = *ip;
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <Auth_SetCurrentRemoteIp+0x30>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6013      	str	r3, [r2, #0]
        g_req_ip_set = true;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <Auth_SetCurrentRemoteIp+0x34>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
    } else {
        g_req_ip_set = false;
    }
}
 8001564:	e002      	b.n	800156c <Auth_SetCurrentRemoteIp+0x24>
        g_req_ip_set = false;
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <Auth_SetCurrentRemoteIp+0x34>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000030c 	.word	0x2000030c
 800157c:	20000310 	.word	0x20000310

08001580 <Auth_BeginRequestWithCookieHeader>:

void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
    /* Parse a very simple "Cookie: SID=<sid>" header if present */
    g_req_cookie_sid_present = false;
 800158c:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <Auth_BeginRequestWithCookieHeader+0x15c>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    g_req_cookie_sid[0] = '\0';
 8001592:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    if (!headers || headers_len == 0) return;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8096 	beq.w	80016cc <Auth_BeginRequestWithCookieHeader+0x14c>
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8092 	beq.w	80016cc <Auth_BeginRequestWithCookieHeader+0x14c>
    const char* p = headers;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    const char* end = headers + headers_len;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
    while (p < end) {
 80015b4:	e084      	b.n	80016c0 <Auth_BeginRequestWithCookieHeader+0x140>
        const char* line_end = (const char*)memchr(p, '\n', (size_t)(end - p));
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	210a      	movs	r1, #10
 80015c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015c2:	f021 f930 	bl	8022826 <memchr>
 80015c6:	6178      	str	r0, [r7, #20]
        size_t line_len = line_end ? (size_t)(line_end - p) : (size_t)(end - p);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <Auth_BeginRequestWithCookieHeader+0x56>
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	e002      	b.n	80015dc <Auth_BeginRequestWithCookieHeader+0x5c>
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	613b      	str	r3, [r7, #16]
        if (line_len >= 7 && !strncasecmp(p, "Cookie:", 7)) {
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d967      	bls.n	80016b4 <Auth_BeginRequestWithCookieHeader+0x134>
 80015e4:	2207      	movs	r2, #7
 80015e6:	493f      	ldr	r1, [pc, #252]	@ (80016e4 <Auth_BeginRequestWithCookieHeader+0x164>)
 80015e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015ea:	f021 f81b 	bl	8022624 <strncasecmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d15f      	bne.n	80016b4 <Auth_BeginRequestWithCookieHeader+0x134>
            const char* v = p + 7;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	3307      	adds	r3, #7
 80015f8:	623b      	str	r3, [r7, #32]
            while (v < p + line_len && (*v == ' ' || *v == '\t')) v++;
 80015fa:	e002      	b.n	8001602 <Auth_BeginRequestWithCookieHeader+0x82>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	3301      	adds	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	429a      	cmp	r2, r3
 800160c:	d207      	bcs.n	800161e <Auth_BeginRequestWithCookieHeader+0x9e>
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b20      	cmp	r3, #32
 8001614:	d0f2      	beq.n	80015fc <Auth_BeginRequestWithCookieHeader+0x7c>
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d0ee      	beq.n	80015fc <Auth_BeginRequestWithCookieHeader+0x7c>
            const char* sid_pos = strcasestr(v, "SID=");
 800161e:	4932      	ldr	r1, [pc, #200]	@ (80016e8 <Auth_BeginRequestWithCookieHeader+0x168>)
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f021 f85b 	bl	80226dc <strcasestr>
 8001626:	4603      	mov	r3, r0
 8001628:	60fb      	str	r3, [r7, #12]
            if (sid_pos) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d04f      	beq.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
                sid_pos += 4;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3304      	adds	r3, #4
 8001634:	60fb      	str	r3, [r7, #12]
                size_t i = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 800163a:	e024      	b.n	8001686 <Auth_BeginRequestWithCookieHeader+0x106>
                    char c = sid_pos[i];
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	72fb      	strb	r3, [r7, #11]
                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) break;
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	2b2f      	cmp	r3, #47	@ 0x2f
 800164a:	d902      	bls.n	8001652 <Auth_BeginRequestWithCookieHeader+0xd2>
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	2b39      	cmp	r3, #57	@ 0x39
 8001650:	d90b      	bls.n	800166a <Auth_BeginRequestWithCookieHeader+0xea>
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	2b60      	cmp	r3, #96	@ 0x60
 8001656:	d902      	bls.n	800165e <Auth_BeginRequestWithCookieHeader+0xde>
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	2b66      	cmp	r3, #102	@ 0x66
 800165c:	d905      	bls.n	800166a <Auth_BeginRequestWithCookieHeader+0xea>
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	2b40      	cmp	r3, #64	@ 0x40
 8001662:	d91b      	bls.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	2b46      	cmp	r3, #70	@ 0x46
 8001668:	d818      	bhi.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
                    g_req_cookie_sid[i] = (char)tolower((unsigned char)c);
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	4618      	mov	r0, r3
 800166e:	f020 f8c7 	bl	8021800 <tolower>
 8001672:	4603      	mov	r3, r0
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	460a      	mov	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
                    i++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b1f      	cmp	r3, #31
 800168a:	d807      	bhi.n	800169c <Auth_BeginRequestWithCookieHeader+0x11c>
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	441a      	add	r2, r3
 8001692:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	440b      	add	r3, r1
 8001698:	429a      	cmp	r2, r3
 800169a:	d3cf      	bcc.n	800163c <Auth_BeginRequestWithCookieHeader+0xbc>
                }
                g_req_cookie_sid[i] = '\0';
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <Auth_BeginRequestWithCookieHeader+0x160>)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
                if (i == 32) g_req_cookie_sid_present = true;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d111      	bne.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <Auth_BeginRequestWithCookieHeader+0x15c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80016b2:	e00d      	b.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x150>
        }
        if (!line_end) break;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00c      	beq.n	80016d4 <Auth_BeginRequestWithCookieHeader+0x154>
        p = line_end + 1;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (p < end) {
 80016c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f4ff af76 	bcc.w	80015b6 <Auth_BeginRequestWithCookieHeader+0x36>
 80016ca:	e004      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
    if (!headers || headers_len == 0) return;
 80016cc:	bf00      	nop
 80016ce:	e002      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
            break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <Auth_BeginRequestWithCookieHeader+0x156>
        if (!line_end) break;
 80016d4:	bf00      	nop
    }
}
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000335 	.word	0x20000335
 80016e0:	20000314 	.word	0x20000314
 80016e4:	080250a0 	.word	0x080250a0
 80016e8:	080250a8 	.word	0x080250a8

080016ec <backup_write_pass>:
        }
    }
    return ~crc;
}

static void backup_write_pass(const char *pass) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    uint32_t word = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    /* password: 8 chars max packed into 2 DRs */
    for (int i = 0; i < 2; ++i) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	e031      	b.n	8001762 <backup_write_pass+0x76>
        word = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
        for (int b = 0; b < 4; ++b) {
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e01f      	b.n	8001748 <backup_write_pass+0x5c>
            int idx = i * 4 + b;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
            uint8_t ch = pass && pass[idx] ? (uint8_t)pass[idx] : 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00a      	beq.n	800172e <backup_write_pass+0x42>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <backup_write_pass+0x42>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	e000      	b.n	8001730 <backup_write_pass+0x44>
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
            word |= ((uint32_t)ch) << (8 * b);
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	4313      	orrs	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
        for (int b = 0; b < 4; ++b) {
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b03      	cmp	r3, #3
 800174c:	dddc      	ble.n	8001708 <backup_write_pass+0x1c>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t)(BKP_PASS_DR + i), word);
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	3311      	adds	r3, #17
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <backup_write_pass+0x88>)
 8001758:	f009 fc57 	bl	800b00a <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 2; ++i) {
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3301      	adds	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b01      	cmp	r3, #1
 8001766:	ddca      	ble.n	80016fe <backup_write_pass+0x12>
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200029c8 	.word	0x200029c8

08001778 <backup_read_pass>:

static void backup_read_pass(char *pass) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e020      	b.n	80017c8 <backup_read_pass+0x50>
        uint32_t w = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t)(BKP_PASS_DR + i));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3311      	adds	r3, #17
 800178a:	4619      	mov	r1, r3
 800178c:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <backup_read_pass+0x68>)
 800178e:	f009 fc55 	bl	800b03c <HAL_RTCEx_BKUPRead>
 8001792:	60f8      	str	r0, [r7, #12]
        for (int b = 0; b < 4; ++b) pass[i*4 + b] = (char)((w >> (8*b)) & 0xFF);
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e010      	b.n	80017bc <backup_read_pass+0x44>
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	fa22 f103 	lsr.w	r1, r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	009a      	lsls	r2, r3, #2
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	3301      	adds	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	ddeb      	ble.n	800179a <backup_read_pass+0x22>
    for (int i = 0; i < 2; ++i) {
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	dddb      	ble.n	8001786 <backup_read_pass+0xe>
    }
    pass[8] = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200029c8 	.word	0x200029c8

080017e4 <Creds_Init>:

// публичные функции
void Creds_Init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
    char p[9] = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	721a      	strb	r2, [r3, #8]
    backup_read_pass(p);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffbe 	bl	8001778 <backup_read_pass>
    /* Validate saved password: must be non-empty and printable ASCII */
    bool valid = false;
 80017fc:	2300      	movs	r3, #0
 80017fe:	75fb      	strb	r3, [r7, #23]
    if (p[0] != 0) {
 8001800:	793b      	ldrb	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d021      	beq.n	800184a <Creds_Init+0x66>
        valid = true;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
        for (int i = 0; i < 8 && p[i] != 0; ++i) {
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e013      	b.n	8001838 <Creds_Init+0x54>
            unsigned char c = (unsigned char)p[i];
 8001810:	1d3a      	adds	r2, r7, #4
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	73fb      	strb	r3, [r7, #15]
            if (!isprint(c)) { valid = false; break; }
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	3301      	adds	r3, #1
 800181e:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <Creds_Init+0xa0>)
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <Creds_Init+0x4e>
 800182c:	2300      	movs	r3, #0
 800182e:	75fb      	strb	r3, [r7, #23]
 8001830:	e00b      	b.n	800184a <Creds_Init+0x66>
        for (int i = 0; i < 8 && p[i] != 0; ++i) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b07      	cmp	r3, #7
 800183c:	dc05      	bgt.n	800184a <Creds_Init+0x66>
 800183e:	1d3a      	adds	r2, r7, #4
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e2      	bne.n	8001810 <Creds_Init+0x2c>
        }
    }
    if (!valid) {
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <Creds_Init+0x84>
        strncpy(creds.password, "admin", MAX_CRED_LEN-1);
 8001856:	2208      	movs	r2, #8
 8001858:	490b      	ldr	r1, [pc, #44]	@ (8001888 <Creds_Init+0xa4>)
 800185a:	480c      	ldr	r0, [pc, #48]	@ (800188c <Creds_Init+0xa8>)
 800185c:	f020 ff14 	bl	8022688 <strncpy>
        backup_write_pass(creds.password);
 8001860:	480a      	ldr	r0, [pc, #40]	@ (800188c <Creds_Init+0xa8>)
 8001862:	f7ff ff43 	bl	80016ec <backup_write_pass>
    } else {
        strncpy(creds.password, p, MAX_CRED_LEN-1);
        creds.password[MAX_CRED_LEN-1] = 0;
    }
}
 8001866:	e008      	b.n	800187a <Creds_Init+0x96>
        strncpy(creds.password, p, MAX_CRED_LEN-1);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2208      	movs	r2, #8
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <Creds_Init+0xa8>)
 8001870:	f020 ff0a 	bl	8022688 <strncpy>
        creds.password[MAX_CRED_LEN-1] = 0;
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <Creds_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	721a      	strb	r2, [r3, #8]
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	080330c8 	.word	0x080330c8
 8001888:	080250c4 	.word	0x080250c4
 800188c:	20000338 	.word	0x20000338

08001890 <Creds_CheckPassword>:

bool Creds_CheckPassword(const char *pass) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    return (pass && strncmp(pass, creds.password, MAX_CRED_LEN) == 0);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <Creds_CheckPassword+0x22>
 800189e:	2209      	movs	r2, #9
 80018a0:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <Creds_CheckPassword+0x34>)
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f020 fede 	bl	8022664 <strncmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <Creds_CheckPassword+0x22>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <Creds_CheckPassword+0x24>
 80018b2:	2300      	movs	r3, #0
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000338 	.word	0x20000338

080018c8 <Creds_UpdatePassword>:

void Creds_UpdatePassword(const char *pass) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    if (!pass) return;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <Creds_UpdatePassword+0x26>
    strncpy(creds.password, pass, MAX_CRED_LEN-1);
 80018d6:	2208      	movs	r2, #8
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <Creds_UpdatePassword+0x30>)
 80018dc:	f020 fed4 	bl	8022688 <strncpy>
    creds.password[MAX_CRED_LEN-1] = 0;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <Creds_UpdatePassword+0x30>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	721a      	strb	r2, [r3, #8]
    backup_write_pass(creds.password);
 80018e6:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <Creds_UpdatePassword+0x30>)
 80018e8:	f7ff ff00 	bl	80016ec <backup_write_pass>
 80018ec:	e000      	b.n	80018f0 <Creds_UpdatePassword+0x28>
    if (!pass) return;
 80018ee:	bf00      	nop
}
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000338 	.word	0x20000338

080018fc <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFFER_SIZE   (3 * ADC_SAMPLES)
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile uint8_t dma_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    dma_ready = 1;
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <HAL_ADC_ConvCpltCallback+0x18>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200028c8 	.word	0x200028c8

08001918 <NET_CGI_Handler>:
tCGI CREDS_CGI = {"/set_creds.cgi", CREDS_CGI_Handler};
/* Increased size to accommodate all handlers (NET, DATE, TIME, SNMP, FW, LOGIN, CREDS) */
tCGI CGI_TAB[8];

const char* NET_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
    // Reset DHCP flag; it's set only when parameter is present
    new_dhcp_enabled = 0;
 8001926:	4b42      	ldr	r3, [pc, #264]	@ (8001a30 <NET_CGI_Handler+0x118>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e071      	b.n	8001a16 <NET_CGI_Handler+0xfe>
        // Сетевые
        if (strcmp(pcParam[i], "ip") == 0 && pcValue[i][0] != '\0') new_ip.addr = ipaddr_addr(pcValue[i]);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	493d      	ldr	r1, [pc, #244]	@ (8001a34 <NET_CGI_Handler+0x11c>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc42 	bl	80001c8 <strcmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d113      	bne.n	8001972 <NET_CGI_Handler+0x5a>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <NET_CGI_Handler+0x5a>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f01e fd65 	bl	8020434 <ipaddr_addr>
 800196a:	4603      	mov	r3, r0
 800196c:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <NET_CGI_Handler+0x120>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e04e      	b.n	8001a10 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "mask") == 0 && pcValue[i][0] != '\0') new_mask.addr = ipaddr_addr(pcValue[i]);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	492f      	ldr	r1, [pc, #188]	@ (8001a3c <NET_CGI_Handler+0x124>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc22 	bl	80001c8 <strcmp>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d113      	bne.n	80019b2 <NET_CGI_Handler+0x9a>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <NET_CGI_Handler+0x9a>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f01e fd45 	bl	8020434 <ipaddr_addr>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <NET_CGI_Handler+0x128>)
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e02e      	b.n	8001a10 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "gateway") == 0 && pcValue[i][0] != '\0') new_gw.addr = ipaddr_addr(pcValue[i]);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4921      	ldr	r1, [pc, #132]	@ (8001a44 <NET_CGI_Handler+0x12c>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc02 	bl	80001c8 <strcmp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d113      	bne.n	80019f2 <NET_CGI_Handler+0xda>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <NET_CGI_Handler+0xda>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f01e fd25 	bl	8020434 <ipaddr_addr>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a16      	ldr	r2, [pc, #88]	@ (8001a48 <NET_CGI_Handler+0x130>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e00e      	b.n	8001a10 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "dhcp") == 0) new_dhcp_enabled = 1;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4913      	ldr	r1, [pc, #76]	@ (8001a4c <NET_CGI_Handler+0x134>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fbe2 	bl	80001c8 <strcmp>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <NET_CGI_Handler+0xf8>
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <NET_CGI_Handler+0x118>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	db89      	blt.n	8001932 <NET_CGI_Handler+0x1a>
    }

    apply_network_settings = 1;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <NET_CGI_Handler+0x138>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]

    return "/settings.html";  // редирект обратно
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <NET_CGI_Handler+0x13c>)
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20002a40 	.word	0x20002a40
 8001a34:	080250fc 	.word	0x080250fc
 8001a38:	20002a34 	.word	0x20002a34
 8001a3c:	08025100 	.word	0x08025100
 8001a40:	20002a38 	.word	0x20002a38
 8001a44:	08025108 	.word	0x08025108
 8001a48:	20002a3c 	.word	0x20002a3c
 8001a4c:	08025110 	.word	0x08025110
 8001a50:	20002a41 	.word	0x20002a41
 8001a54:	08025118 	.word	0x08025118

08001a58 <DATE_CGI_Handler>:

uint8_t new_year=0, new_month=0, new_day=0;
uint8_t apply_date_settings = 0;

const char* DATE_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e042      	b.n	8001af2 <DATE_CGI_Handler+0x9a>
    {
        if(strcmp(pcParam[i],"date")==0 && pcValue[i][0]!='\0')
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4923      	ldr	r1, [pc, #140]	@ (8001b04 <DATE_CGI_Handler+0xac>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fba5 	bl	80001c8 <strcmp>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d133      	bne.n	8001aec <DATE_CGI_Handler+0x94>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d02b      	beq.n	8001aec <DATE_CGI_Handler+0x94>
        {
            int y,m,d;
            if(sscanf(pcValue[i], "%d-%d-%d", &y,&m,&d)==3)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f107 0114 	add.w	r1, r7, #20
 8001aa2:	f107 0218 	add.w	r2, r7, #24
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	460b      	mov	r3, r1
 8001aae:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <DATE_CGI_Handler+0xb0>)
 8001ab0:	f020 fc72 	bl	8022398 <siscanf>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d118      	bne.n	8001aec <DATE_CGI_Handler+0x94>
            {
                new_year  = (uint8_t)(y % 100);
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <DATE_CGI_Handler+0xb4>)
 8001abe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac2:	1151      	asrs	r1, r2, #5
 8001ac4:	17da      	asrs	r2, r3, #31
 8001ac6:	1a8a      	subs	r2, r1, r2
 8001ac8:	2164      	movs	r1, #100	@ 0x64
 8001aca:	fb01 f202 	mul.w	r2, r1, r2
 8001ace:	1a9a      	subs	r2, r3, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <DATE_CGI_Handler+0xb8>)
 8001ad4:	701a      	strb	r2, [r3, #0]
                new_month = (uint8_t)m;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <DATE_CGI_Handler+0xbc>)
 8001adc:	701a      	strb	r2, [r3, #0]
                new_day   = (uint8_t)d;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <DATE_CGI_Handler+0xc0>)
 8001ae4:	701a      	strb	r2, [r3, #0]
                apply_date_settings = 1;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <DATE_CGI_Handler+0xc4>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<iNumParams; i++)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbb8      	blt.n	8001a6c <DATE_CGI_Handler+0x14>
            }
        }
    }
    // --- сразу сохраняем в backup (если RTC уже инициализирован) ---
}
 8001afa:	bf00      	nop
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08025128 	.word	0x08025128
 8001b08:	08025130 	.word	0x08025130
 8001b0c:	51eb851f 	.word	0x51eb851f
 8001b10:	20002a84 	.word	0x20002a84
 8001b14:	20002a85 	.word	0x20002a85
 8001b18:	20002a86 	.word	0x20002a86
 8001b1c:	20002a87 	.word	0x20002a87

08001b20 <TIME_CGI_Handler>:

uint8_t new_hours = 0, new_minutes = 0, new_seconds = 0;
uint8_t apply_time_settings = 0;

const char* TIME_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
    apply_time_settings = 0;
 8001b2e:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <TIME_CGI_Handler+0x110>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < iNumParams; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b38:	e071      	b.n	8001c1e <TIME_CGI_Handler+0xfe>
    {
        if(strcmp(pcParam[i], "time") == 0 && strlen(pcValue[i]) >= 5)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	493b      	ldr	r1, [pc, #236]	@ (8001c34 <TIME_CGI_Handler+0x114>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb3e 	bl	80001c8 <strcmp>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d162      	bne.n	8001c18 <TIME_CGI_Handler+0xf8>
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fb3d 	bl	80001dc <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d957      	bls.n	8001c18 <TIME_CGI_Handler+0xf8>
        {
            // Простой парсинг без sscanf
            char *colon = strchr(pcValue[i], ':');
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	213a      	movs	r1, #58	@ 0x3a
 8001b74:	4618      	mov	r0, r3
 8001b76:	f020 fd47 	bl	8022608 <strchr>
 8001b7a:	6238      	str	r0, [r7, #32]
            if(colon != NULL)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d04a      	beq.n	8001c18 <TIME_CGI_Handler+0xf8>
            {
                // Берем первые 2 символа как часы
                char hour_str[3] = {0};
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	2100      	movs	r1, #0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	709a      	strb	r2, [r3, #2]
                strncpy(hour_str, pcValue[i], 2);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f020 fd71 	bl	8022688 <strncpy>
                hour_str[2] = '\0';
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75bb      	strb	r3, [r7, #22]

                // Берем 2 символа после двоеточия как минуты
                char min_str[3] = {0};
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2100      	movs	r1, #0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	709a      	strb	r2, [r3, #2]
                strncpy(min_str, colon + 1, 2);
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	1c59      	adds	r1, r3, #1
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f020 fd60 	bl	8022688 <strncpy>
                min_str[2] = '\0';
 8001bc8:	2300      	movs	r3, #0
 8001bca:	74bb      	strb	r3, [r7, #18]

                int h = atoi(hour_str);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f01f fd4d 	bl	8021670 <atoi>
 8001bd6:	61f8      	str	r0, [r7, #28]
                int mi = atoi(min_str);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f01f fd47 	bl	8021670 <atoi>
 8001be2:	61b8      	str	r0, [r7, #24]

                if(h >= 0 && h < 24 && mi >= 0 && mi < 60)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db16      	blt.n	8001c18 <TIME_CGI_Handler+0xf8>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	2b17      	cmp	r3, #23
 8001bee:	dc13      	bgt.n	8001c18 <TIME_CGI_Handler+0xf8>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db10      	blt.n	8001c18 <TIME_CGI_Handler+0xf8>
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bfa:	dc0d      	bgt.n	8001c18 <TIME_CGI_Handler+0xf8>
                {
                    new_hours = (uint8_t)h;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <TIME_CGI_Handler+0x118>)
 8001c02:	701a      	strb	r2, [r3, #0]
                    new_minutes = (uint8_t)mi;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <TIME_CGI_Handler+0x11c>)
 8001c0a:	701a      	strb	r2, [r3, #0]
                    new_seconds = 0;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <TIME_CGI_Handler+0x120>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
                    apply_time_settings = 1;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <TIME_CGI_Handler+0x110>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < iNumParams; i++)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	db89      	blt.n	8001b3a <TIME_CGI_Handler+0x1a>
                }
            }
        }
    }
    return "/settings.html";
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <TIME_CGI_Handler+0x124>)
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3728      	adds	r7, #40	@ 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20002a8b 	.word	0x20002a8b
 8001c34:	0802514c 	.word	0x0802514c
 8001c38:	20002a88 	.word	0x20002a88
 8001c3c:	20002a89 	.word	0x20002a89
 8001c40:	20002a8a 	.word	0x20002a8a
 8001c44:	08025118 	.word	0x08025118

08001c48 <SNMP_CGI_Handler>:
char snmp_trap[32] = "public";
uint8_t apply_snmp_settings = 0;

// CGI-хэндлер для SNMP
const char* SNMP_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e067      	b.n	8001d2c <SNMP_CGI_Handler+0xe4>
    {
        if(strcmp(pcParam[i],"snmp-read")==0 && pcValue[i][0]!='\0')
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4937      	ldr	r1, [pc, #220]	@ (8001d44 <SNMP_CGI_Handler+0xfc>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe faad 	bl	80001c8 <strcmp>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d115      	bne.n	8001ca0 <SNMP_CGI_Handler+0x58>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00d      	beq.n	8001ca0 <SNMP_CGI_Handler+0x58>
        {
            strncpy(snmp_read, pcValue[i], sizeof(snmp_read)-1);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	221f      	movs	r2, #31
 8001c90:	4619      	mov	r1, r3
 8001c92:	482d      	ldr	r0, [pc, #180]	@ (8001d48 <SNMP_CGI_Handler+0x100>)
 8001c94:	f020 fcf8 	bl	8022688 <strncpy>
            snmp_read[sizeof(snmp_read)-1] = 0;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <SNMP_CGI_Handler+0x100>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	77da      	strb	r2, [r3, #31]
 8001c9e:	e042      	b.n	8001d26 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-write")==0 && pcValue[i][0]!='\0')
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4928      	ldr	r1, [pc, #160]	@ (8001d4c <SNMP_CGI_Handler+0x104>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fa8b 	bl	80001c8 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d115      	bne.n	8001ce4 <SNMP_CGI_Handler+0x9c>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <SNMP_CGI_Handler+0x9c>
        {
            strncpy(snmp_write, pcValue[i], sizeof(snmp_write)-1);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <SNMP_CGI_Handler+0x108>)
 8001cd8:	f020 fcd6 	bl	8022688 <strncpy>
            snmp_write[sizeof(snmp_write)-1] = 0;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <SNMP_CGI_Handler+0x108>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	77da      	strb	r2, [r3, #31]
 8001ce2:	e020      	b.n	8001d26 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-trap")==0 && pcValue[i][0]!='\0')
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4919      	ldr	r1, [pc, #100]	@ (8001d54 <SNMP_CGI_Handler+0x10c>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa69 	bl	80001c8 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d114      	bne.n	8001d26 <SNMP_CGI_Handler+0xde>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <SNMP_CGI_Handler+0xde>
        {
            strncpy(snmp_trap, pcValue[i], sizeof(snmp_trap)-1);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	221f      	movs	r2, #31
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480f      	ldr	r0, [pc, #60]	@ (8001d58 <SNMP_CGI_Handler+0x110>)
 8001d1c:	f020 fcb4 	bl	8022688 <strncpy>
            snmp_trap[sizeof(snmp_trap)-1] = 0;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <SNMP_CGI_Handler+0x110>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	77da      	strb	r2, [r3, #31]
    for(int i=0; i<iNumParams; i++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	db93      	blt.n	8001c5c <SNMP_CGI_Handler+0x14>
        }
    }
    apply_snmp_settings = 1; // ставим флаг применения в main()
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <SNMP_CGI_Handler+0x114>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    return "/settings.html";  // редирект обратно
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <SNMP_CGI_Handler+0x118>)
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	08025164 	.word	0x08025164
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	08025170 	.word	0x08025170
 8001d50:	20000030 	.word	0x20000030
 8001d54:	0802517c 	.word	0x0802517c
 8001d58:	20000050 	.word	0x20000050
 8001d5c:	20002a8c 	.word	0x20002a8c
 8001d60:	08025118 	.word	0x08025118

08001d64 <CREDS_CGI_Handler>:

// CGI для смены пароля (GET, pass, до 8 символов). Логин удалён.
const char * CREDS_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
    char pass[9] = {0};
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < iNumParams; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e020      	b.n	8001dc6 <CREDS_CGI_Handler+0x62>
        if (strcmp(pcParam[i], "pass") == 0 && pcValue[i]) {
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4916      	ldr	r1, [pc, #88]	@ (8001de8 <CREDS_CGI_Handler+0x84>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fa19 	bl	80001c8 <strcmp>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <CREDS_CGI_Handler+0x5c>
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <CREDS_CGI_Handler+0x5c>
            strncpy(pass, pcValue[i], sizeof(pass)-1);
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2208      	movs	r2, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f020 fc64 	bl	8022688 <strncpy>
    for (int i = 0; i < iNumParams; i++) {
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbda      	blt.n	8001d84 <CREDS_CGI_Handler+0x20>
        }
    }
    // обрежем на стороне сервера до 8 ascii-символов
    pass[8] = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	763b      	strb	r3, [r7, #24]
    Creds_UpdatePassword(pass);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fd76 	bl	80018c8 <Creds_UpdatePassword>
    return "/settings.html";
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <CREDS_CGI_Handler+0x88>)
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	08025188 	.word	0x08025188
 8001dec:	08025118 	.word	0x08025118

08001df0 <Flash_GetSector>:

FW_Update_Context fw_ctx;
static bool fw_request_active = false;   // текущий POST = fw_update?
// --- Helpers for Flash OTA ---
static uint32_t Flash_GetSector(uint32_t Address)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    if (Address < 0x08004000U) return FLASH_SECTOR_0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <Flash_GetSector+0x50>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d201      	bcs.n	8001e04 <Flash_GetSector+0x14>
 8001e00:	2300      	movs	r3, #0
 8001e02:	e018      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08008000U) return FLASH_SECTOR_1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <Flash_GetSector+0x54>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d201      	bcs.n	8001e10 <Flash_GetSector+0x20>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e012      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x0800C000U) return FLASH_SECTOR_2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <Flash_GetSector+0x58>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d201      	bcs.n	8001e1c <Flash_GetSector+0x2c>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00c      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08010000U) return FLASH_SECTOR_3;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <Flash_GetSector+0x5c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d801      	bhi.n	8001e28 <Flash_GetSector+0x38>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <Flash_GetSector+0x46>
    if (Address < 0x08020000U) return FLASH_SECTOR_4;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <Flash_GetSector+0x60>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d801      	bhi.n	8001e34 <Flash_GetSector+0x44>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e000      	b.n	8001e36 <Flash_GetSector+0x46>
    return FLASH_SECTOR_5; // up to 0x0803FFFF for 256KB devices
 8001e34:	2305      	movs	r3, #5
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	08004000 	.word	0x08004000
 8001e44:	08008000 	.word	0x08008000
 8001e48:	0800c000 	.word	0x0800c000
 8001e4c:	0800ffff 	.word	0x0800ffff
 8001e50:	0801ffff 	.word	0x0801ffff

08001e54 <Flash_IsBlank>:

static bool Flash_IsBlank(uint32_t addr, uint32_t bytes_to_check)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e00d      	b.n	8001e80 <Flash_IsBlank+0x2c>
        uint32_t v = *(volatile uint32_t *)(addr + off);
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
        if (v != 0xFFFFFFFFU) return false;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d001      	beq.n	8001e7a <Flash_IsBlank+0x26>
 8001e76:	2300      	movs	r3, #0
 8001e78:	e007      	b.n	8001e8a <Flash_IsBlank+0x36>
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3ed      	bcc.n	8001e64 <Flash_IsBlank+0x10>
    }
    return true;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <FW_ResetContext>:

static void FW_ResetContext(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    fw_ctx.active = false;
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <FW_ResetContext+0x68>)
 8001e9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	721a      	strb	r2, [r3, #8]
    fw_ctx.error = false;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <FW_ResetContext+0x68>)
 8001ea4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	725a      	strb	r2, [r3, #9]
    fw_ctx.buffer_len = 0;
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <FW_ResetContext+0x68>)
 8001eae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
    fw_ctx.total_len = 0;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <FW_ResetContext+0x68>)
 8001eba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6053      	str	r3, [r2, #4]
    fw_ctx.write_addr = FLASH_UPDATE_ADDR;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <FW_ResetContext+0x68>)
 8001ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <FW_ResetContext+0x6c>)
 8001ece:	60d3      	str	r3, [r2, #12]
    fw_ctx.word_buf_len = 0;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <FW_ResetContext+0x68>)
 8001ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	751a      	strb	r2, [r3, #20]
    fw_ctx.crc = 0xFFFFFFFFU;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <FW_ResetContext+0x68>)
 8001edc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	6193      	str	r3, [r2, #24]
    fw_ctx.erased = false;
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <FW_ResetContext+0x68>)
 8001eea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20002a90 	.word	0x20002a90
 8001f00:	08020000 	.word	0x08020000

08001f04 <FW_CrcUpdate>:

static inline void FW_CrcUpdate(const uint8_t *data, uint32_t len)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e02b      	b.n	8001f6c <FW_CrcUpdate+0x68>
        fw_ctx.crc ^= data[i];
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	440a      	add	r2, r1
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	4053      	eors	r3, r2
 8001f26:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f28:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f2c:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	72fb      	strb	r3, [r7, #11]
 8001f32:	e015      	b.n	8001f60 <FW_CrcUpdate+0x5c>
            fw_ctx.crc = (fw_ctx.crc >> 1) ^ (0xEDB88320U & (~(fw_ctx.crc & 1U) + 1U));
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	085a      	lsrs	r2, r3, #1
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	4259      	negs	r1, r3
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <FW_CrcUpdate+0x80>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	4053      	eors	r3, r2
 8001f52:	4a0b      	ldr	r2, [pc, #44]	@ (8001f80 <FW_CrcUpdate+0x7c>)
 8001f54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f58:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	72fb      	strb	r3, [r7, #11]
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d9e6      	bls.n	8001f34 <FW_CrcUpdate+0x30>
    for (uint32_t i = 0; i < len; i++) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3cf      	bcc.n	8001f14 <FW_CrcUpdate+0x10>
        }
    }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20002a90 	.word	0x20002a90
 8001f84:	edb88320 	.word	0xedb88320

08001f88 <FW_EnsureErasedForAddress>:

static HAL_StatusTypeDef FW_EnsureErasedForAddress(uint32_t address)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    if (fw_ctx.erased) return HAL_OK;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001f92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f96:	7f1b      	ldrb	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <FW_EnsureErasedForAddress+0x18>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e03a      	b.n	8002016 <FW_EnsureErasedForAddress+0x8e>
    // Проверка: область должна быть пустой, иначе это часть прошивки — отменяем OTA
    if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) { // проверим первые 1KB
 8001fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fa4:	481f      	ldr	r0, [pc, #124]	@ (8002024 <FW_EnsureErasedForAddress+0x9c>)
 8001fa6:	f7ff ff55 	bl	8001e54 <Flash_IsBlank>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <FW_EnsureErasedForAddress+0x3c>
        fw_ctx.error = true;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001fb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	725a      	strb	r2, [r3, #9]
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e028      	b.n	8002016 <FW_EnsureErasedForAddress+0x8e>
    }

    FLASH_EraseInitTypeDef erase;
    uint32_t pageError = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    erase.Sector = Flash_GetSector(address);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff0d 	bl	8001df0 <Flash_GetSector>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = 1; // стираем только сектор слота OTA
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef st = HAL_FLASHEx_Erase(&erase, &pageError);
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f007 f81d 	bl	8009028 <HAL_FLASHEx_Erase>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (st == HAL_OK) fw_ctx.erased = true;
 8001ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <FW_EnsureErasedForAddress+0x80>
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 8001ffe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002002:	2201      	movs	r2, #1
 8002004:	771a      	strb	r2, [r3, #28]
 8002006:	e004      	b.n	8002012 <FW_EnsureErasedForAddress+0x8a>
    else fw_ctx.error = true;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <FW_EnsureErasedForAddress+0x98>)
 800200a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800200e:	2201      	movs	r2, #1
 8002010:	725a      	strb	r2, [r3, #9]
    return st;
 8002012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002016:	4618      	mov	r0, r3
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20002a90 	.word	0x20002a90
 8002024:	08020000 	.word	0x08020000

08002028 <FW_FlashWriteStream>:

static HAL_StatusTypeDef FW_FlashWriteStream(const uint8_t *data, uint32_t len)
{
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
    // Обеспечиваем стирание перед первой записью
    if (!fw_ctx.erased) {
 8002034:	4b64      	ldr	r3, [pc, #400]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002036:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800203a:	7f1b      	ldrb	r3, [r3, #28]
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <FW_FlashWriteStream+0x3a>
        HAL_StatusTypeDef est = FW_EnsureErasedForAddress(fw_ctx.write_addr);
 8002046:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff9a 	bl	8001f88 <FW_EnsureErasedForAddress>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
        if (est != HAL_OK) return est;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <FW_FlashWriteStream+0x3a>
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	e0ac      	b.n	80021bc <FW_FlashWriteStream+0x194>
    }

    // Обновляем CRC по потоку
    FW_CrcUpdate(data, len);
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff4d 	bl	8001f04 <FW_CrcUpdate>

    uint32_t idx = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
    // Дополним незавершённое слово, если было
    if (fw_ctx.word_buf_len > 0) {
 800206e:	4b56      	ldr	r3, [pc, #344]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002070:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002074:	7d1b      	ldrb	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d07e      	beq.n	8002178 <FW_FlashWriteStream+0x150>
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 800207a:	e016      	b.n	80020aa <FW_FlashWriteStream+0x82>
            fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	617a      	str	r2, [r7, #20]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	441a      	add	r2, r3
 8002086:	4b50      	ldr	r3, [pc, #320]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800208c:	7d1b      	ldrb	r3, [r3, #20]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	b2c8      	uxtb	r0, r1
 8002092:	494d      	ldr	r1, [pc, #308]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002094:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002098:	7508      	strb	r0, [r1, #20]
 800209a:	4619      	mov	r1, r3
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020a6:	3310      	adds	r3, #16
 80020a8:	701a      	strb	r2, [r3, #0]
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020b0:	7d1b      	ldrb	r3, [r3, #20]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d803      	bhi.n	80020be <FW_FlashWriteStream+0x96>
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3de      	bcc.n	800207c <FW_FlashWriteStream+0x54>
        }
        if (fw_ctx.word_buf_len == 4) {
 80020be:	4b42      	ldr	r3, [pc, #264]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020c4:	7d1b      	ldrb	r3, [r3, #20]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d156      	bne.n	8002178 <FW_FlashWriteStream+0x150>
            uint32_t word;
            memcpy(&word, fw_ctx.word_buf, 4);
 80020ca:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60fb      	str	r3, [r7, #12]
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 80020d4:	4b3c      	ldr	r3, [pc, #240]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	4698      	mov	r8, r3
 80020e2:	4691      	mov	r9, r2
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	2002      	movs	r0, #2
 80020ea:	f006 fdeb 	bl	8008cc4 <HAL_FLASH_Program>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <FW_FlashWriteStream+0xd0>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e061      	b.n	80021bc <FW_FlashWriteStream+0x194>
            fw_ctx.write_addr += 4;
 80020f8:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80020fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	4a31      	ldr	r2, [pc, #196]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002104:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002108:	60d3      	str	r3, [r2, #12]
            fw_ctx.word_buf_len = 0;
 800210a:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800210c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002110:	2200      	movs	r2, #0
 8002112:	751a      	strb	r2, [r3, #20]
        }
    }

    // Пишем целыми словами напрямую из входного буфера
    while ((idx + 4) <= len) {
 8002114:	e030      	b.n	8002178 <FW_FlashWriteStream+0x150>
        uint32_t word;
        memcpy(&word, &data[idx], 4);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	461c      	mov	r4, r3
 800212e:	4615      	mov	r5, r2
 8002130:	4622      	mov	r2, r4
 8002132:	462b      	mov	r3, r5
 8002134:	2002      	movs	r0, #2
 8002136:	f006 fdc5 	bl	8008cc4 <HAL_FLASH_Program>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <FW_FlashWriteStream+0x11c>
 8002140:	2301      	movs	r3, #1
 8002142:	e03b      	b.n	80021bc <FW_FlashWriteStream+0x194>
        fw_ctx.write_addr += 4;
 8002144:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002146:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002150:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002154:	60d3      	str	r3, [r2, #12]
        idx += 4;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
        if (fw_ctx.write_addr >= FLASH_UPDATE_END) { fw_ctx.error = true; return HAL_ERROR; }
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800215e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <FW_FlashWriteStream+0x1a4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d906      	bls.n	8002178 <FW_FlashWriteStream+0x150>
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800216c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002170:	2201      	movs	r2, #1
 8002172:	725a      	strb	r2, [r3, #9]
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <FW_FlashWriteStream+0x194>
    while ((idx + 4) <= len) {
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3304      	adds	r3, #4
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d2c9      	bcs.n	8002116 <FW_FlashWriteStream+0xee>
    }

    // Остаток < 4 байт сохраняем в буфер до завершения
    while (idx < len) {
 8002182:	e016      	b.n	80021b2 <FW_FlashWriteStream+0x18a>
        fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	617a      	str	r2, [r7, #20]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	441a      	add	r2, r3
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 8002190:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002194:	7d1b      	ldrb	r3, [r3, #20]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	b2c8      	uxtb	r0, r1
 800219a:	490b      	ldr	r1, [pc, #44]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 800219c:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80021a0:	7508      	strb	r0, [r1, #20]
 80021a2:	4619      	mov	r1, r3
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <FW_FlashWriteStream+0x1a0>)
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021ae:	3310      	adds	r3, #16
 80021b0:	701a      	strb	r2, [r3, #0]
    while (idx < len) {
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3e4      	bcc.n	8002184 <FW_FlashWriteStream+0x15c>
    }
    return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021c6:	bf00      	nop
 80021c8:	20002a90 	.word	0x20002a90
 80021cc:	0803ffff 	.word	0x0803ffff

080021d0 <FW_Update_CGI_Handler>:
    return ~crc;
}

// --- CGI ---
const char* FW_Update_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
    return "/update.html";
 80021de:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <FW_Update_CGI_Handler+0x1c>)
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	080251a0 	.word	0x080251a0

080021f0 <LOGIN_CGI_Handler>:

const tCGI FW_UPDATE_CGI = {"/fw_update.cgi", FW_Update_CGI_Handler};

// GET-логин через CGI-параметры pass (без user)
const char* LOGIN_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	@ 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
    char pass[32] = {0};
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	2220      	movs	r2, #32
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f020 f9f6 	bl	80225f8 <memset>
    for (int i = 0; i < iNumParams; i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002210:	e028      	b.n	8002264 <LOGIN_CGI_Handler+0x74>
        if (strcmp(pcParam[i], "pass") == 0 && pcValue[i] && pcValue[i][0]) {
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4931      	ldr	r1, [pc, #196]	@ (80022e4 <LOGIN_CGI_Handler+0xf4>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7fd ffd2 	bl	80001c8 <strcmp>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d119      	bne.n	800225e <LOGIN_CGI_Handler+0x6e>
 800222a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <LOGIN_CGI_Handler+0x6e>
 8002238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <LOGIN_CGI_Handler+0x6e>
            strncpy(pass, pcValue[i], sizeof(pass) - 1);
 8002248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	221f      	movs	r2, #31
 8002258:	4618      	mov	r0, r3
 800225a:	f020 fa15 	bl	8022688 <strncpy>
    for (int i = 0; i < iNumParams; i++) {
 800225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002260:	3301      	adds	r3, #1
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
 8002264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbd2      	blt.n	8002212 <LOGIN_CGI_Handler+0x22>
        }
    }
    url_decode(pass, pass);
 800226c:	f107 0214 	add.w	r2, r7, #20
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f83e 	bl	80022f8 <url_decode>
    extern volatile uint8_t g_is_authenticated;
    g_is_authenticated = (pass[0] && Creds_CheckPassword(pass)) ? 1 : 0;
 800227c:	7d3b      	ldrb	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <LOGIN_CGI_Handler+0xa6>
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fb02 	bl	8001890 <Creds_CheckPassword>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <LOGIN_CGI_Handler+0xa6>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LOGIN_CGI_Handler+0xa8>
 8002296:	2300      	movs	r3, #0
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <LOGIN_CGI_Handler+0xf8>)
 800229c:	701a      	strb	r2, [r3, #0]
    if (!g_is_authenticated && pass[0] && strcmp(pass, "admin") == 0) {
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <LOGIN_CGI_Handler+0xf8>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <LOGIN_CGI_Handler+0xdc>
 80022a8:	7d3b      	ldrb	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <LOGIN_CGI_Handler+0xdc>
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	490e      	ldr	r1, [pc, #56]	@ (80022ec <LOGIN_CGI_Handler+0xfc>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fd ff87 	bl	80001c8 <strcmp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <LOGIN_CGI_Handler+0xdc>
        /* Fallback: accept default 'admin' and normalize stored password */
        Creds_UpdatePassword("admin");
 80022c0:	480a      	ldr	r0, [pc, #40]	@ (80022ec <LOGIN_CGI_Handler+0xfc>)
 80022c2:	f7ff fb01 	bl	80018c8 <Creds_UpdatePassword>
        g_is_authenticated = 1;
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <LOGIN_CGI_Handler+0xf8>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    }
    return g_is_authenticated ? "/index.html" : "/login_failed.html";
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <LOGIN_CGI_Handler+0xf8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <LOGIN_CGI_Handler+0xea>
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <LOGIN_CGI_Handler+0x100>)
 80022d8:	e000      	b.n	80022dc <LOGIN_CGI_Handler+0xec>
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <LOGIN_CGI_Handler+0x104>)
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3738      	adds	r7, #56	@ 0x38
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	08025188 	.word	0x08025188
 80022e8:	20002a30 	.word	0x20002a30
 80022ec:	080251c0 	.word	0x080251c0
 80022f0:	080251c8 	.word	0x080251c8
 80022f4:	080251d4 	.word	0x080251d4

080022f8 <url_decode>:

void url_decode(char *dst, const char *src)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    char a, b;
    while (*src)
 8002302:	e06a      	b.n	80023da <url_decode+0xe2>
    {
        if ((*src == '%') &&
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b25      	cmp	r3, #37	@ 0x25
 800230a:	d151      	bne.n	80023b0 <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	73fb      	strb	r3, [r7, #15]
        if ((*src == '%') &&
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d04a      	beq.n	80023b0 <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3302      	adds	r3, #2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	73bb      	strb	r3, [r7, #14]
 8002322:	7bbb      	ldrb	r3, [r7, #14]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d043      	beq.n	80023b0 <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	3301      	adds	r3, #1
 800232c:	4a31      	ldr	r2, [pc, #196]	@ (80023f4 <url_decode+0xfc>)
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f003 0344 	and.w	r3, r3, #68	@ 0x44
            ((a = src[1]) && (b = src[2])) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	3301      	adds	r3, #1
 800233e:	4a2d      	ldr	r2, [pc, #180]	@ (80023f4 <url_decode+0xfc>)
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d031      	beq.n	80023b0 <url_decode+0xb8>
        {
            a = (a >= 'a') ? a - 'a' + 10 : (a >= 'A') ? a - 'A' + 10 : a - '0';
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b60      	cmp	r3, #96	@ 0x60
 8002350:	d903      	bls.n	800235a <url_decode+0x62>
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	3b57      	subs	r3, #87	@ 0x57
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e009      	b.n	800236e <url_decode+0x76>
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d903      	bls.n	8002368 <url_decode+0x70>
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	3b37      	subs	r3, #55	@ 0x37
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e002      	b.n	800236e <url_decode+0x76>
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3b30      	subs	r3, #48	@ 0x30
 800236c:	b2db      	uxtb	r3, r3
 800236e:	73fb      	strb	r3, [r7, #15]
            b = (b >= 'a') ? b - 'a' + 10 : (b >= 'A') ? b - 'A' + 10 : b - '0';
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	2b60      	cmp	r3, #96	@ 0x60
 8002374:	d903      	bls.n	800237e <url_decode+0x86>
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	3b57      	subs	r3, #87	@ 0x57
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e009      	b.n	8002392 <url_decode+0x9a>
 800237e:	7bbb      	ldrb	r3, [r7, #14]
 8002380:	2b40      	cmp	r3, #64	@ 0x40
 8002382:	d903      	bls.n	800238c <url_decode+0x94>
 8002384:	7bbb      	ldrb	r3, [r7, #14]
 8002386:	3b37      	subs	r3, #55	@ 0x37
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e002      	b.n	8002392 <url_decode+0x9a>
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	3b30      	subs	r3, #48	@ 0x30
 8002390:	b2db      	uxtb	r3, r3
 8002392:	73bb      	strb	r3, [r7, #14]
            *dst++ = (char)(16 * a + b);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	b2d9      	uxtb	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	7bba      	ldrb	r2, [r7, #14]
 80023a2:	440a      	add	r2, r1
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
            src += 3;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3303      	adds	r3, #3
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	e014      	b.n	80023da <url_decode+0xe2>
        }
        else if (*src == '+')
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80023b6:	d108      	bne.n	80023ca <url_decode+0xd2>
        {
            *dst++ = ' ';
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	701a      	strb	r2, [r3, #0]
            src++;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	e007      	b.n	80023da <url_decode+0xe2>
        }
        else
        {
            *dst++ = *src++;
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	1c53      	adds	r3, r2, #1
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	6079      	str	r1, [r7, #4]
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	701a      	strb	r2, [r3, #0]
    while (*src)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d190      	bne.n	8002304 <url_decode+0xc>
        }
    }
    *dst = '\0';
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	080330c8 	.word	0x080330c8

080023f8 <httpd_post_begin>:
                       u16_t content_len,
                       int total_data_len,
                       char *post_data,
                       u16_t post_data_len,
                       u8_t *connection_status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	807b      	strh	r3, [r7, #2]
    // Сброс признаков по умолчанию
    fw_request_active = false;
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <httpd_post_begin+0x80>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]

    if(strcmp(uri, "/fw_update.cgi") == 0) {
 800240c:	491b      	ldr	r1, [pc, #108]	@ (800247c <httpd_post_begin+0x84>)
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	f7fd feda 	bl	80001c8 <strcmp>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d128      	bne.n	800246c <httpd_post_begin+0x74>
        fw_request_active = true;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <httpd_post_begin+0x80>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
        FW_ResetContext();
 8002420:	f7ff fd38 	bl	8001e94 <FW_ResetContext>
        // Если слот OTA потенциально пересекается с текущей прошивкой (не пустой) — не начинаем запись
        if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) {
 8002424:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002428:	4815      	ldr	r0, [pc, #84]	@ (8002480 <httpd_post_begin+0x88>)
 800242a:	f7ff fd13 	bl	8001e54 <Flash_IsBlank>
 800242e:	4603      	mov	r3, r0
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <httpd_post_begin+0x60>
            fw_ctx.error = true;
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <httpd_post_begin+0x8c>)
 800243c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002440:	2201      	movs	r2, #1
 8002442:	725a      	strb	r2, [r3, #9]
            fw_ctx.active = false;
 8002444:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <httpd_post_begin+0x8c>)
 8002446:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800244a:	2200      	movs	r2, #0
 800244c:	721a      	strb	r2, [r3, #8]
            *connection_status = 0; // не буферизуем лишние данные
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
            return ERR_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e00a      	b.n	800246e <httpd_post_begin+0x76>
        }
        fw_ctx.active = true;
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <httpd_post_begin+0x8c>)
 800245a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800245e:	2201      	movs	r2, #1
 8002460:	721a      	strb	r2, [r3, #8]
        *connection_status = 1; // продолжаем принимать
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 8002468:	f006 fc80 	bl	8008d6c <HAL_FLASH_Unlock>
    }
    return ERR_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20004ab0 	.word	0x20004ab0
 800247c:	080251b0 	.word	0x080251b0
 8002480:	08020000 	.word	0x08020000
 8002484:	20002a90 	.word	0x20002a90

08002488 <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    if (p == NULL) return ERR_OK;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <httpd_post_receive_data+0x14>
 8002498:	2300      	movs	r3, #0
 800249a:	e030      	b.n	80024fe <httpd_post_receive_data+0x76>

    if (fw_ctx.active) {
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <httpd_post_receive_data+0x80>)
 800249e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024a2:	7a1b      	ldrb	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d029      	beq.n	80024fc <httpd_post_receive_data+0x74>
        struct pbuf *q = p;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	60fb      	str	r3, [r7, #12]
        while(q) {
 80024ac:	e023      	b.n	80024f6 <httpd_post_receive_data+0x6e>
            if (FW_FlashWriteStream((const uint8_t*)q->payload, q->len) != HAL_OK) {
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	895b      	ldrh	r3, [r3, #10]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7ff fdb5 	bl	8002028 <FW_FlashWriteStream>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <httpd_post_receive_data+0x52>
                fw_ctx.error = true;
 80024c4:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <httpd_post_receive_data+0x80>)
 80024c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024ca:	2201      	movs	r2, #1
 80024cc:	725a      	strb	r2, [r3, #9]
                fw_ctx.active = false;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <httpd_post_receive_data+0x80>)
 80024d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024d4:	2200      	movs	r2, #0
 80024d6:	721a      	strb	r2, [r3, #8]
                break;
 80024d8:	e010      	b.n	80024fc <httpd_post_receive_data+0x74>
            }
            fw_ctx.total_len += q->len;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <httpd_post_receive_data+0x80>)
 80024dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	8952      	ldrh	r2, [r2, #10]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <httpd_post_receive_data+0x80>)
 80024ea:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80024ee:	6053      	str	r3, [r2, #4]
            q = q->next;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
        while(q) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1d8      	bne.n	80024ae <httpd_post_receive_data+0x26>
        }
    }
    return ERR_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20002a90 	.word	0x20002a90

0800250c <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
    // Если это был fw_update — завершим запись и отдадим соответствующую страницу
    if (fw_request_active) {
 800251a:	4b40      	ldr	r3, [pc, #256]	@ (800261c <httpd_post_finished+0x110>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d078      	beq.n	8002614 <httpd_post_finished+0x108>
        // Завершаем запись: дописываем неполное слово, если нужно
        if (fw_ctx.active && !fw_ctx.error) {
 8002522:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <httpd_post_finished+0x114>)
 8002524:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002528:	7a1b      	ldrb	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d04b      	beq.n	80025c6 <httpd_post_finished+0xba>
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <httpd_post_finished+0x114>)
 8002530:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002534:	7a5b      	ldrb	r3, [r3, #9]
 8002536:	f083 0301 	eor.w	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d042      	beq.n	80025c6 <httpd_post_finished+0xba>
            if (fw_ctx.word_buf_len > 0) {
 8002540:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <httpd_post_finished+0x114>)
 8002542:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002546:	7d1b      	ldrb	r3, [r3, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03c      	beq.n	80025c6 <httpd_post_finished+0xba>
                while (fw_ctx.word_buf_len < 4) fw_ctx.word_buf[fw_ctx.word_buf_len++] = 0xFF;
 800254c:	e011      	b.n	8002572 <httpd_post_finished+0x66>
 800254e:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <httpd_post_finished+0x114>)
 8002550:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002554:	7d1b      	ldrb	r3, [r3, #20]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	b2d1      	uxtb	r1, r2
 800255a:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <httpd_post_finished+0x114>)
 800255c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002560:	7511      	strb	r1, [r2, #20]
 8002562:	461a      	mov	r2, r3
 8002564:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <httpd_post_finished+0x114>)
 8002566:	4413      	add	r3, r2
 8002568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800256c:	3310      	adds	r3, #16
 800256e:	22ff      	movs	r2, #255	@ 0xff
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <httpd_post_finished+0x114>)
 8002574:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002578:	7d1b      	ldrb	r3, [r3, #20]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d9e7      	bls.n	800254e <httpd_post_finished+0x42>
                uint32_t word;
                memcpy(&word, fw_ctx.word_buf, 4);
 800257e:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <httpd_post_finished+0x114>)
 8002580:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	617b      	str	r3, [r7, #20]
                if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) {
 8002588:	4b25      	ldr	r3, [pc, #148]	@ (8002620 <httpd_post_finished+0x114>)
 800258a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2200      	movs	r2, #0
 8002594:	461c      	mov	r4, r3
 8002596:	4615      	mov	r5, r2
 8002598:	4622      	mov	r2, r4
 800259a:	462b      	mov	r3, r5
 800259c:	2002      	movs	r0, #2
 800259e:	f006 fb91 	bl	8008cc4 <HAL_FLASH_Program>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <httpd_post_finished+0xa8>
                    fw_ctx.error = true;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <httpd_post_finished+0x114>)
 80025aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025ae:	2201      	movs	r2, #1
 80025b0:	725a      	strb	r2, [r3, #9]
 80025b2:	e008      	b.n	80025c6 <httpd_post_finished+0xba>
                } else {
                    fw_ctx.write_addr += 4;
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <httpd_post_finished+0x114>)
 80025b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <httpd_post_finished+0x114>)
 80025c0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80025c4:	60d3      	str	r3, [r2, #12]
                }
            }
        }
        HAL_FLASH_Lock();
 80025c6:	f006 fbf3 	bl	8008db0 <HAL_FLASH_Lock>
        fw_ctx.active = false;
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <httpd_post_finished+0x114>)
 80025cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025d0:	2200      	movs	r2, #0
 80025d2:	721a      	strb	r2, [r3, #8]
        if (response_uri && response_uri_len) {
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01b      	beq.n	8002612 <httpd_post_finished+0x106>
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d018      	beq.n	8002612 <httpd_post_finished+0x106>
            if (fw_ctx.error || fw_ctx.total_len == 0) {
 80025e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <httpd_post_finished+0x114>)
 80025e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025e6:	7a5b      	ldrb	r3, [r3, #9]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <httpd_post_finished+0xec>
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <httpd_post_finished+0x114>)
 80025ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <httpd_post_finished+0xfa>
                strncpy(response_uri, "/update.html", response_uri_len);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4909      	ldr	r1, [pc, #36]	@ (8002624 <httpd_post_finished+0x118>)
 80025fe:	68b8      	ldr	r0, [r7, #8]
 8002600:	f020 f842 	bl	8022688 <strncpy>
            } else {
                strncpy(response_uri, "/update_complete.html", response_uri_len);
            }
        }
        return;
 8002604:	e005      	b.n	8002612 <httpd_post_finished+0x106>
                strncpy(response_uri, "/update_complete.html", response_uri_len);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	461a      	mov	r2, r3
 800260a:	4907      	ldr	r1, [pc, #28]	@ (8002628 <httpd_post_finished+0x11c>)
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	f020 f83b 	bl	8022688 <strncpy>
        return;
 8002612:	bf00      	nop
    }
}
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bdb0      	pop	{r4, r5, r7, pc}
 800261a:	bf00      	nop
 800261c:	20004ab0 	.word	0x20004ab0
 8002620:	20002a90 	.word	0x20002a90
 8002624:	080251a0 	.word	0x080251a0
 8002628:	080251e8 	.word	0x080251e8

0800262c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b0b3      	sub	sp, #204	@ 0xcc
 8002630:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002632:	f004 f967 	bl	8006904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002636:	f000 fa07 	bl	8002a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263a:	f000 fbe7 	bl	8002e0c <MX_GPIO_Init>
  MX_DMA_Init();
 800263e:	f000 fbc5 	bl	8002dcc <MX_DMA_Init>
  MX_I2C1_Init();
 8002642:	f000 fad3 	bl	8002bec <MX_I2C1_Init>
  MX_LWIP_Init();
 8002646:	f009 f847 	bl	800b6d8 <MX_LWIP_Init>
  MX_ADC1_Init();
 800264a:	f000 fa5d 	bl	8002b08 <MX_ADC1_Init>
  MX_TIM3_Init();
 800264e:	f000 fb71 	bl	8002d34 <MX_TIM3_Init>
  MX_RTC_Init();
 8002652:	f000 faf9 	bl	8002c48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация логина/пароля (admin/admin по умолчанию)
  Creds_Init();
 8002656:	f7ff f8c5 	bl	80017e4 <Creds_Init>
  Settings_Init();
 800265a:	f000 fd23 	bl	80030a4 <Settings_Init>
  // Load and apply display rotation before drawing anything
  {
    uint8_t rot180 = Settings_Load_Rotation();
 800265e:	f000 fe53 	bl	8003308 <Settings_Load_Rotation>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    ssd1306_SetRotation180(rot180);
 8002668:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fe0f 	bl	8006290 <ssd1306_SetRotation180>

  ip4_addr_t bk_ip, bk_mask, bk_gw;
  uint8_t bk_dhcp;
  char bk_snmp_read[32], bk_snmp_write[32], bk_snmp_trap[32];

  Settings_Load_From_Backup(&bk_ip, &bk_mask, &bk_gw, &bk_dhcp,
 8002672:	f107 049f 	add.w	r4, r7, #159	@ 0x9f
 8002676:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800267a:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800267e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002682:	2320      	movs	r3, #32
 8002684:	9305      	str	r3, [sp, #20]
 8002686:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	2320      	movs	r3, #32
 800268e:	9303      	str	r3, [sp, #12]
 8002690:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	2320      	movs	r3, #32
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4623      	mov	r3, r4
 80026a2:	f000 fd67 	bl	8003174 <Settings_Load_From_Backup>
                            bk_snmp_read, sizeof(bk_snmp_read),
                            bk_snmp_write, sizeof(bk_snmp_write),
                            bk_snmp_trap, sizeof(bk_snmp_trap));

  // Apply saved network settings on boot if present
  if (bk_dhcp || bk_ip.addr != 0) {
 80026a6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <main+0x8a>
 80026ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <main+0xba>
      netif_set_down(&gnetif);
 80026b6:	4869      	ldr	r0, [pc, #420]	@ (800285c <main+0x230>)
 80026b8:	f013 f976 	bl	80159a8 <netif_set_down>
      if (bk_dhcp) {
 80026bc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <main+0xa0>
          dhcp_start(&gnetif);
 80026c4:	4865      	ldr	r0, [pc, #404]	@ (800285c <main+0x230>)
 80026c6:	f01a fd01 	bl	801d0cc <dhcp_start>
 80026ca:	e008      	b.n	80026de <main+0xb2>
      } else {
          netif_set_addr(&gnetif, &bk_ip, &bk_mask, &bk_gw);
 80026cc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80026d0:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80026d4:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80026d8:	4860      	ldr	r0, [pc, #384]	@ (800285c <main+0x230>)
 80026da:	f013 f87d 	bl	80157d8 <netif_set_addr>
      }
      netif_set_up(&gnetif);
 80026de:	485f      	ldr	r0, [pc, #380]	@ (800285c <main+0x230>)
 80026e0:	f013 f912 	bl	8015908 <netif_set_up>
 80026e4:	e015      	b.n	8002712 <main+0xe6>
  } else {
      // Backup пуст — применяем заводские значения (статический IP)
      ip4_addr_t def_ip, def_mask, def_gw;
      IP4_ADDR(&def_ip, 192,168,0,254);
 80026e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <main+0x234>)
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      IP4_ADDR(&def_mask, 255,255,255,0);
 80026ea:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
      IP4_ADDR(&def_gw, 192,168,0,1);
 80026f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002864 <main+0x238>)
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
      netif_set_down(&gnetif);
 80026f4:	4859      	ldr	r0, [pc, #356]	@ (800285c <main+0x230>)
 80026f6:	f013 f957 	bl	80159a8 <netif_set_down>
      netif_set_addr(&gnetif, &def_ip, &def_mask, &def_gw);
 80026fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026fe:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002702:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002706:	4855      	ldr	r0, [pc, #340]	@ (800285c <main+0x230>)
 8002708:	f013 f866 	bl	80157d8 <netif_set_addr>
      netif_set_up(&gnetif);
 800270c:	4853      	ldr	r0, [pc, #332]	@ (800285c <main+0x230>)
 800270e:	f013 f8fb 	bl	8015908 <netif_set_up>
  }

  /* Инициализируем SNMP community из backup */
  if (bk_snmp_read[0])  strncpy(snmp_read,  bk_snmp_read,  sizeof(snmp_read)-1);
 8002712:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <main+0xfc>
 800271a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800271e:	221f      	movs	r2, #31
 8002720:	4619      	mov	r1, r3
 8002722:	4851      	ldr	r0, [pc, #324]	@ (8002868 <main+0x23c>)
 8002724:	f01f ffb0 	bl	8022688 <strncpy>
  if (bk_snmp_write[0]) strncpy(snmp_write, bk_snmp_write, sizeof(snmp_write)-1);
 8002728:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <main+0x112>
 8002730:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002734:	221f      	movs	r2, #31
 8002736:	4619      	mov	r1, r3
 8002738:	484c      	ldr	r0, [pc, #304]	@ (800286c <main+0x240>)
 800273a:	f01f ffa5 	bl	8022688 <strncpy>
  if (bk_snmp_trap[0])  strncpy(snmp_trap,  bk_snmp_trap,  sizeof(snmp_trap)-1);
 800273e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <main+0x128>
 8002746:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800274a:	221f      	movs	r2, #31
 800274c:	4619      	mov	r1, r3
 800274e:	4848      	ldr	r0, [pc, #288]	@ (8002870 <main+0x244>)
 8002750:	f01f ff9a 	bl	8022688 <strncpy>
  /* Применяем к SNMP-агенту на старте */
  snmp_community[0] = snmp_read;
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <main+0x248>)
 8002756:	4a44      	ldr	r2, [pc, #272]	@ (8002868 <main+0x23c>)
 8002758:	601a      	str	r2, [r3, #0]
  snmp_community_write[0] = snmp_write;
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <main+0x24c>)
 800275c:	4a43      	ldr	r2, [pc, #268]	@ (800286c <main+0x240>)
 800275e:	601a      	str	r2, [r3, #0]
  snmp_set_community_trap(snmp_trap);
 8002760:	4843      	ldr	r0, [pc, #268]	@ (8002870 <main+0x244>)
 8002762:	f00f f893 	bl	801188c <snmp_set_community_trap>


  httpd_init();
 8002766:	f00b fadf 	bl	800dd28 <httpd_init>

  httpd_ssi_init_custom();
 800276a:	f009 fee3 	bl	800c534 <httpd_ssi_init_custom>

  // Регистрация CGI

  CGI_TAB[0] = NET_CGI;
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <main+0x250>)
 8002770:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <main+0x254>)
 8002772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002776:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[1] = DATE_CGI;
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <main+0x250>)
 800277c:	4a41      	ldr	r2, [pc, #260]	@ (8002884 <main+0x258>)
 800277e:	3308      	adds	r3, #8
 8002780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002784:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[2] = TIME_CGI;
 8002788:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <main+0x250>)
 800278a:	4a3f      	ldr	r2, [pc, #252]	@ (8002888 <main+0x25c>)
 800278c:	3310      	adds	r3, #16
 800278e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002792:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[3] = SNMP_CGI;
 8002796:	4b39      	ldr	r3, [pc, #228]	@ (800287c <main+0x250>)
 8002798:	4a3c      	ldr	r2, [pc, #240]	@ (800288c <main+0x260>)
 800279a:	3318      	adds	r3, #24
 800279c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a0:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[4] = FW_UPDATE_CGI;
 80027a4:	4b35      	ldr	r3, [pc, #212]	@ (800287c <main+0x250>)
 80027a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002890 <main+0x264>)
 80027a8:	3320      	adds	r3, #32
 80027aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ae:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[5] = LOGIN_CGI;
 80027b2:	4b32      	ldr	r3, [pc, #200]	@ (800287c <main+0x250>)
 80027b4:	4a37      	ldr	r2, [pc, #220]	@ (8002894 <main+0x268>)
 80027b6:	3328      	adds	r3, #40	@ 0x28
 80027b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027bc:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[6] = CREDS_CGI;
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <main+0x250>)
 80027c2:	4a35      	ldr	r2, [pc, #212]	@ (8002898 <main+0x26c>)
 80027c4:	3330      	adds	r3, #48	@ 0x30
 80027c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ca:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 7); // количество зарегистрированных CGI
 80027ce:	2107      	movs	r1, #7
 80027d0:	482a      	ldr	r0, [pc, #168]	@ (800287c <main+0x250>)
 80027d2:	f00b fb37 	bl	800de44 <http_set_cgi_handlers>
  snmp_init();
 80027d6:	f011 fa81 	bl	8013cdc <snmp_init>

  snmp_set_mibs(mib_array, snmp_num_mibs);
 80027da:	2302      	movs	r3, #2
 80027dc:	4619      	mov	r1, r3
 80027de:	482f      	ldr	r0, [pc, #188]	@ (800289c <main+0x270>)
 80027e0:	f00c f8c4 	bl	800e96c <snmp_set_mibs>


  ssd1306_Init();
 80027e4:	f003 fcea 	bl	80061bc <ssd1306_Init>

  ssd1306_UpdateScreen();
 80027e8:	f003 fd8a 	bl	8006300 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f003 fd6f 	bl	80062d0 <ssd1306_Fill>

  Buttons_Init();
 80027f2:	f001 f9eb 	bl	8003bcc <Buttons_Init>


  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 80027f6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80027fa:	4929      	ldr	r1, [pc, #164]	@ (80028a0 <main+0x274>)
 80027fc:	4829      	ldr	r0, [pc, #164]	@ (80028a4 <main+0x278>)
 80027fe:	f004 f957 	bl	8006ab0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8002802:	4829      	ldr	r0, [pc, #164]	@ (80028a8 <main+0x27c>)
 8002804:	f008 fc80 	bl	800b108 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8002808:	f009 f88e 	bl	800b928 <MX_LWIP_Process>

      if (dma_ready) {
 800280c:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <main+0x280>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <main+0x1fa>
          SignalProcessor_Update(adc_buffer, ADC_SAMPLES);
 8002816:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800281a:	4821      	ldr	r0, [pc, #132]	@ (80028a0 <main+0x274>)
 800281c:	f000 fdbc 	bl	8003398 <SignalProcessor_Update>
          dma_ready = 0;
 8002820:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <main+0x280>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
      }
	    Buttons_Process();
 8002826:	f001 fb23 	bl	8003e70 <Buttons_Process>

	    OLED_Settings_TimeoutCheck();
 800282a:	f003 fba7 	bl	8005f7c <OLED_Settings_TimeoutCheck>

	    OLED_UpdateDisplay();
 800282e:	f003 fbcf 	bl	8005fd0 <OLED_UpdateDisplay>

	    if (apply_network_settings) {
 8002832:	4b1f      	ldr	r3, [pc, #124]	@ (80028b0 <main+0x284>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d057      	beq.n	80028ea <main+0x2be>
	        apply_network_settings = 0;
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <main+0x284>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]

	        netif_set_down(&gnetif);
 8002840:	4806      	ldr	r0, [pc, #24]	@ (800285c <main+0x230>)
 8002842:	f013 f8b1 	bl	80159a8 <netif_set_down>
	        dhcp_stop(&gnetif);
 8002846:	4805      	ldr	r0, [pc, #20]	@ (800285c <main+0x230>)
 8002848:	f01b f91c 	bl	801da84 <dhcp_stop>

	        if (new_dhcp_enabled) {
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <main+0x288>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d031      	beq.n	80028b8 <main+0x28c>
	            dhcp_start(&gnetif);
 8002854:	4801      	ldr	r0, [pc, #4]	@ (800285c <main+0x230>)
 8002856:	f01a fc39 	bl	801d0cc <dhcp_start>
 800285a:	e033      	b.n	80028c4 <main+0x298>
 800285c:	20004f84 	.word	0x20004f84
 8002860:	fe00a8c0 	.word	0xfe00a8c0
 8002864:	0100a8c0 	.word	0x0100a8c0
 8002868:	20000010 	.word	0x20000010
 800286c:	20000030 	.word	0x20000030
 8002870:	20000050 	.word	0x20000050
 8002874:	2000010c 	.word	0x2000010c
 8002878:	20000110 	.word	0x20000110
 800287c:	20002a44 	.word	0x20002a44
 8002880:	08027f94 	.word	0x08027f94
 8002884:	08027fa4 	.word	0x08027fa4
 8002888:	08027fac 	.word	0x08027fac
 800288c:	08027fb4 	.word	0x08027fb4
 8002890:	08027fbc 	.word	0x08027fbc
 8002894:	08027f9c 	.word	0x08027f9c
 8002898:	20000008 	.word	0x20000008
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000348 	.word	0x20000348
 80028a4:	200028cc 	.word	0x200028cc
 80028a8:	200029e8 	.word	0x200029e8
 80028ac:	200028c8 	.word	0x200028c8
 80028b0:	20002a41 	.word	0x20002a41
 80028b4:	20002a40 	.word	0x20002a40
	        } else {
	            netif_set_addr(&gnetif, &new_ip, &new_mask, &new_gw);
 80028b8:	4b4f      	ldr	r3, [pc, #316]	@ (80029f8 <main+0x3cc>)
 80028ba:	4a50      	ldr	r2, [pc, #320]	@ (80029fc <main+0x3d0>)
 80028bc:	4950      	ldr	r1, [pc, #320]	@ (8002a00 <main+0x3d4>)
 80028be:	4851      	ldr	r0, [pc, #324]	@ (8002a04 <main+0x3d8>)
 80028c0:	f012 ff8a 	bl	80157d8 <netif_set_addr>
	        }
	        netif_set_up(&gnetif);
 80028c4:	484f      	ldr	r0, [pc, #316]	@ (8002a04 <main+0x3d8>)
 80028c6:	f013 f81f 	bl	8015908 <netif_set_up>

	        Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 80028ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <main+0x3dc>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4a4a      	ldr	r2, [pc, #296]	@ (80029f8 <main+0x3cc>)
 80028d0:	494a      	ldr	r1, [pc, #296]	@ (80029fc <main+0x3d0>)
 80028d2:	484b      	ldr	r0, [pc, #300]	@ (8002a00 <main+0x3d4>)
 80028d4:	4c4d      	ldr	r4, [pc, #308]	@ (8002a0c <main+0x3e0>)
 80028d6:	9402      	str	r4, [sp, #8]
 80028d8:	4c4d      	ldr	r4, [pc, #308]	@ (8002a10 <main+0x3e4>)
 80028da:	9401      	str	r4, [sp, #4]
 80028dc:	4c4d      	ldr	r4, [pc, #308]	@ (8002a14 <main+0x3e8>)
 80028de:	9400      	str	r4, [sp, #0]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	6809      	ldr	r1, [r1, #0]
 80028e4:	6800      	ldr	r0, [r0, #0]
 80028e6:	f000 fbf7 	bl	80030d8 <Settings_Save_To_Backup>
	                                snmp_read, snmp_write, snmp_trap);
	    }


	    	// Дата
	    if(apply_date_settings)
 80028ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002a18 <main+0x3ec>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d024      	beq.n	800293c <main+0x310>
	    {
	        apply_date_settings = 0;
 80028f2:	4b49      	ldr	r3, [pc, #292]	@ (8002a18 <main+0x3ec>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]

	        RTC_DateTypeDef sDate = {0};
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        sDate.Year  = new_year;
 80028fc:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <main+0x3f0>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	        sDate.Month = new_month;
 8002904:	4b46      	ldr	r3, [pc, #280]	@ (8002a20 <main+0x3f4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	        sDate.Date  = new_day;
 800290c:	4b45      	ldr	r3, [pc, #276]	@ (8002a24 <main+0x3f8>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	        sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002914:	2302      	movs	r3, #2
 8002916:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	        if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 800291a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800291e:	2200      	movs	r2, #0
 8002920:	4619      	mov	r1, r3
 8002922:	4841      	ldr	r0, [pc, #260]	@ (8002a28 <main+0x3fc>)
 8002924:	f008 f9ea 	bl	800acfc <HAL_RTC_SetDate>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <main+0x310>
	        {
	            RTC_TimeTypeDef t;
	            HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2200      	movs	r2, #0
 8002934:	4619      	mov	r1, r3
 8002936:	483c      	ldr	r0, [pc, #240]	@ (8002a28 <main+0x3fc>)
 8002938:	f008 f98e 	bl	800ac58 <HAL_RTC_GetTime>
	        }
	    }


	    	// Обработка ВРЕМЕНИ
	    if(apply_time_settings)
 800293c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <main+0x400>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d026      	beq.n	8002992 <main+0x366>
	    {
	        apply_time_settings = 0;
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <main+0x400>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]

	        RTC_TimeTypeDef sTime = {0};
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
	        sTime.Hours   = new_hours;
 8002956:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <main+0x404>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	753b      	strb	r3, [r7, #20]
	        sTime.Minutes = new_minutes;
 800295c:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <main+0x408>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	757b      	strb	r3, [r7, #21]
	        sTime.Seconds = new_seconds;
 8002962:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <main+0x40c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	75bb      	strb	r3, [r7, #22]
	        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
	        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]

        if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	4619      	mov	r1, r3
 8002978:	482b      	ldr	r0, [pc, #172]	@ (8002a28 <main+0x3fc>)
 800297a:	f008 f8d3 	bl	800ab24 <HAL_RTC_SetTime>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <main+0x366>
	        {
	            RTC_DateTypeDef d;
	            HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	4826      	ldr	r0, [pc, #152]	@ (8002a28 <main+0x3fc>)
 800298e:	f008 fa39 	bl	800ae04 <HAL_RTC_GetDate>
	        }
	    }


	        // Проверка применения SNMP
	    	if (apply_snmp_settings) {
 8002992:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <main+0x410>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f43f af36 	beq.w	8002808 <main+0x1dc>
	    	    apply_snmp_settings = 0;
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <main+0x410>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
            snmp_community[0] = snmp_read;
 80029a2:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <main+0x414>)
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <main+0x3e8>)
 80029a6:	601a      	str	r2, [r3, #0]
            snmp_community_write[0] = snmp_write;
 80029a8:	4b26      	ldr	r3, [pc, #152]	@ (8002a44 <main+0x418>)
 80029aa:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <main+0x3e4>)
 80029ac:	601a      	str	r2, [r3, #0]
            snmp_set_community_trap(snmp_trap);
 80029ae:	4817      	ldr	r0, [pc, #92]	@ (8002a0c <main+0x3e0>)
 80029b0:	f00e ff6c 	bl	801188c <snmp_set_community_trap>

            // Preserve current network settings: reload them from backup and rewrite with new SNMP
            ip4_addr_t saved_ip, saved_mask, saved_gw;
            uint8_t saved_dhcp;
            Settings_Load_From_Backup(&saved_ip, &saved_mask, &saved_gw, &saved_dhcp,
 80029b4:	1cfb      	adds	r3, r7, #3
 80029b6:	1d3a      	adds	r2, r7, #4
 80029b8:	f107 0108 	add.w	r1, r7, #8
 80029bc:	f107 000c 	add.w	r0, r7, #12
 80029c0:	2400      	movs	r4, #0
 80029c2:	9405      	str	r4, [sp, #20]
 80029c4:	2400      	movs	r4, #0
 80029c6:	9404      	str	r4, [sp, #16]
 80029c8:	2400      	movs	r4, #0
 80029ca:	9403      	str	r4, [sp, #12]
 80029cc:	2400      	movs	r4, #0
 80029ce:	9402      	str	r4, [sp, #8]
 80029d0:	2400      	movs	r4, #0
 80029d2:	9401      	str	r4, [sp, #4]
 80029d4:	2400      	movs	r4, #0
 80029d6:	9400      	str	r4, [sp, #0]
 80029d8:	f000 fbcc 	bl	8003174 <Settings_Load_From_Backup>
                                      NULL, 0, NULL, 0, NULL, 0);
            Settings_Save_To_Backup(saved_ip, saved_mask, saved_gw, saved_dhcp,
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	4a0b      	ldr	r2, [pc, #44]	@ (8002a0c <main+0x3e0>)
 80029e0:	9202      	str	r2, [sp, #8]
 80029e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <main+0x3e4>)
 80029e4:	9201      	str	r2, [sp, #4]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <main+0x3e8>)
 80029e8:	9200      	str	r2, [sp, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb72 	bl	80030d8 <Settings_Save_To_Backup>
	  MX_LWIP_Process();
 80029f4:	e708      	b.n	8002808 <main+0x1dc>
 80029f6:	bf00      	nop
 80029f8:	20002a3c 	.word	0x20002a3c
 80029fc:	20002a38 	.word	0x20002a38
 8002a00:	20002a34 	.word	0x20002a34
 8002a04:	20004f84 	.word	0x20004f84
 8002a08:	20002a40 	.word	0x20002a40
 8002a0c:	20000050 	.word	0x20000050
 8002a10:	20000030 	.word	0x20000030
 8002a14:	20000010 	.word	0x20000010
 8002a18:	20002a87 	.word	0x20002a87
 8002a1c:	20002a84 	.word	0x20002a84
 8002a20:	20002a85 	.word	0x20002a85
 8002a24:	20002a86 	.word	0x20002a86
 8002a28:	200029c8 	.word	0x200029c8
 8002a2c:	20002a8b 	.word	0x20002a8b
 8002a30:	20002a88 	.word	0x20002a88
 8002a34:	20002a89 	.word	0x20002a89
 8002a38:	20002a8a 	.word	0x20002a8a
 8002a3c:	20002a8c 	.word	0x20002a8c
 8002a40:	2000010c 	.word	0x2000010c
 8002a44:	20000110 	.word	0x20000110

08002a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b096      	sub	sp, #88	@ 0x58
 8002a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a52:	2230      	movs	r2, #48	@ 0x30
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f01f fdce 	bl	80225f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a82:	2301      	movs	r3, #1
 8002a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a86:	2302      	movs	r3, #2
 8002a88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002a90:	2314      	movs	r3, #20
 8002a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a94:	23c0      	movs	r3, #192	@ 0xc0
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f007 fa7d 	bl	8009fa4 <HAL_RCC_OscConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002ab0:	f000 fa2a 	bl	8002f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ac0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ac4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f007 fcba 	bl	800a44c <HAL_RCC_ClockConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002ade:	f000 fa13 	bl	8002f08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aec:	463b      	mov	r3, r7
 8002aee:	4618      	mov	r0, r3
 8002af0:	f007 fe8a 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002afa:	f000 fa05 	bl	8002f08 <Error_Handler>
  }
}
 8002afe:	bf00      	nop
 8002b00:	3758      	adds	r7, #88	@ 0x58
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b0e:	463b      	mov	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b1a:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b1c:	4a32      	ldr	r2, [pc, #200]	@ (8002be8 <MX_ADC1_Init+0xe0>)
 8002b1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b20:	4b30      	ldr	r3, [pc, #192]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b26:	4b2f      	ldr	r3, [pc, #188]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b32:	4b2c      	ldr	r3, [pc, #176]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b38:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002b48:	4b26      	ldr	r3, [pc, #152]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b50:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002b56:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b58:	2203      	movs	r2, #3
 8002b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b5c:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b6a:	481e      	ldr	r0, [pc, #120]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b6c:	f003 ff5c 	bl	8006a28 <HAL_ADC_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002b76:	f000 f9c7 	bl	8002f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002b82:	2303      	movs	r3, #3
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b86:	463b      	mov	r3, r7
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4816      	ldr	r0, [pc, #88]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002b8c:	f004 f880 	bl	8006c90 <HAL_ADC_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002b96:	f000 f9b7 	bl	8002f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480e      	ldr	r0, [pc, #56]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002bac:	f004 f870 	bl	8006c90 <HAL_ADC_ConfigChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002bb6:	f000 f9a7 	bl	8002f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002bba:	230a      	movs	r3, #10
 8002bbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4806      	ldr	r0, [pc, #24]	@ (8002be4 <MX_ADC1_Init+0xdc>)
 8002bcc:	f004 f860 	bl	8006c90 <HAL_ADC_ConfigChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002bd6:	f000 f997 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200028cc 	.word	0x200028cc
 8002be8:	40012000 	.word	0x40012000

08002bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <MX_I2C1_Init+0x54>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002bf8:	4a12      	ldr	r2, [pc, #72]	@ (8002c44 <MX_I2C1_Init+0x58>)
 8002bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c28:	4804      	ldr	r0, [pc, #16]	@ (8002c3c <MX_I2C1_Init+0x50>)
 8002c2a:	f006 fcf3 	bl	8009614 <HAL_I2C_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c34:	f000 f968 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20002974 	.word	0x20002974
 8002c40:	40005400 	.word	0x40005400
 8002c44:	000186a0 	.word	0x000186a0

08002c48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
    RTC_DateTypeDef sDate = {0};
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]

    __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <MX_RTC_Init+0xdc>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	4a2f      	ldr	r2, [pc, #188]	@ (8002d24 <MX_RTC_Init+0xdc>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <MX_RTC_Init+0xdc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess(); // 🔹 доступ к backup-домену
 8002c7a:	f007 f977 	bl	8009f6c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_ENABLE();     // 🔹 включаем тактирование RTC, если ещё не включено
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d28 <MX_RTC_Init+0xe0>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

    hrtc.Instance = RTC;
 8002c84:	4b29      	ldr	r3, [pc, #164]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002c86:	4a2a      	ldr	r2, [pc, #168]	@ (8002d30 <MX_RTC_Init+0xe8>)
 8002c88:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c8a:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8002c90:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002c92:	227f      	movs	r2, #127	@ 0x7f
 8002c94:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8002c96:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002c98:	22ff      	movs	r2, #255	@ 0xff
 8002c9a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c9c:	4b23      	ldr	r3, [pc, #140]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ca8:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]

    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cae:	481f      	ldr	r0, [pc, #124]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002cb0:	f007 fea0 	bl	800a9f4 <HAL_RTC_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_RTC_Init+0x76>
    {
        Error_Handler();
 8002cba:	f000 f925 	bl	8002f08 <Error_Handler>
    }

    /* Проверяем, был ли RTC уже инициализирован */
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	481a      	ldr	r0, [pc, #104]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002cc2:	f008 f9bb 	bl	800b03c <HAL_RTCEx_BKUPRead>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d025      	beq.n	8002d1c <MX_RTC_Init+0xd4>
    {
        // --- Первый запуск ---
        sTime.Hours = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	733b      	strb	r3, [r7, #12]
        sTime.Minutes = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	737b      	strb	r3, [r7, #13]
        sTime.Seconds = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4619      	mov	r1, r3
 8002cec:	480f      	ldr	r0, [pc, #60]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002cee:	f007 ff19 	bl	800ab24 <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_JANUARY;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	727b      	strb	r3, [r7, #9]
        sDate.Date = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 8002cfe:	2319      	movs	r3, #25
 8002d00:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	2200      	movs	r2, #0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002d0c:	f007 fff6 	bl	800acfc <HAL_RTC_SetDate>

        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // 💾 флаг инициализации
 8002d10:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002d14:	2100      	movs	r1, #0
 8002d16:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <MX_RTC_Init+0xe4>)
 8002d18:	f008 f977 	bl	800b00a <HAL_RTCEx_BKUPWrite>
    }
    else
    {
        // --- RTC уже настроен, ничего не трогаем ---
    }
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470e3c 	.word	0x42470e3c
 8002d2c:	200029c8 	.word	0x200029c8
 8002d30:	40002800 	.word	0x40002800

08002d34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d50:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d52:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <MX_TIM3_Init+0x94>)
 8002d54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8002d56:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d58:	223b      	movs	r2, #59	@ 0x3b
 8002d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d64:	2263      	movs	r2, #99	@ 0x63
 8002d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d68:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d74:	4813      	ldr	r0, [pc, #76]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d76:	f008 f978 	bl	800b06a <HAL_TIM_Base_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002d80:	f000 f8c2 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480c      	ldr	r0, [pc, #48]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002d92:	f008 fa1f 	bl	800b1d4 <HAL_TIM_ConfigClockSource>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002d9c:	f000 f8b4 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002da0:	2320      	movs	r3, #32
 8002da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	4619      	mov	r1, r3
 8002dac:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <MX_TIM3_Init+0x90>)
 8002dae:	f008 fc19 	bl	800b5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002db8:	f000 f8a6 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200029e8 	.word	0x200029e8
 8002dc8:	40000400 	.word	0x40000400

08002dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <MX_DMA_Init+0x3c>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a0b      	ldr	r2, [pc, #44]	@ (8002e08 <MX_DMA_Init+0x3c>)
 8002ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <MX_DMA_Init+0x3c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2038      	movs	r0, #56	@ 0x38
 8002df4:	f004 facb 	bl	800738e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002df8:	2038      	movs	r0, #56	@ 0x38
 8002dfa:	f004 fae4 	bl	80073c6 <HAL_NVIC_EnableIRQ>

}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a35      	ldr	r2, [pc, #212]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b2f      	ldr	r3, [pc, #188]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a20      	ldr	r2, [pc, #128]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <MX_GPIO_Init+0xf4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002eae:	230e      	movs	r3, #14
 8002eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4810      	ldr	r0, [pc, #64]	@ (8002f04 <MX_GPIO_Init+0xf8>)
 8002ec4:	f006 f9d8 	bl	8009278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2105      	movs	r1, #5
 8002ecc:	2007      	movs	r0, #7
 8002ece:	f004 fa5e 	bl	800738e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ed2:	2007      	movs	r0, #7
 8002ed4:	f004 fa77 	bl	80073c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2105      	movs	r1, #5
 8002edc:	2008      	movs	r0, #8
 8002ede:	f004 fa56 	bl	800738e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ee2:	2008      	movs	r0, #8
 8002ee4:	f004 fa6f 	bl	80073c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2105      	movs	r1, #5
 8002eec:	2009      	movs	r0, #9
 8002eee:	f004 fa4e 	bl	800738e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ef2:	2009      	movs	r0, #9
 8002ef4:	f004 fa67 	bl	80073c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ef8:	bf00      	nop
 8002efa:	3728      	adds	r7, #40	@ 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020c00 	.word	0x40020c00

08002f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f0c:	b672      	cpsid	i
}
 8002f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <Error_Handler+0x8>

08002f14 <bk_write_u32>:
#define BKP_MAGIC_REG        RTC_BKP_DR19
#define BKP_ROT_REG          RTC_BKP_DR18
#define BKP_MAGIC_VALUE      0xBEEFCAFE

/* --- Вспомогательные функции --- */
static void bk_write_u32(uint32_t reg, uint32_t value) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, reg, value);
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4803      	ldr	r0, [pc, #12]	@ (8002f30 <bk_write_u32+0x1c>)
 8002f24:	f008 f871 	bl	800b00a <HAL_RTCEx_BKUPWrite>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200029c8 	.word	0x200029c8

08002f34 <bk_read_u32>:

static uint32_t bk_read_u32(uint32_t reg) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, reg);
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4804      	ldr	r0, [pc, #16]	@ (8002f50 <bk_read_u32+0x1c>)
 8002f40:	f008 f87c 	bl	800b03c <HAL_RTCEx_BKUPRead>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200029c8 	.word	0x200029c8

08002f54 <bk_write_string>:

static void bk_write_string(uint32_t start_reg, const char *s, int reg_count) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	@ 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
    int max_len = reg_count * 4 - 1; // оставляем 1 байт под '\0'
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3b01      	subs	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
    int str_len = s ? strlen(s) : 0;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <bk_write_string+0x24>
 8002f6e:	68b8      	ldr	r0, [r7, #8]
 8002f70:	f7fd f934 	bl	80001dc <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	e000      	b.n	8002f7a <bk_write_string+0x26>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (str_len > max_len) str_len = max_len;
 8002f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dd01      	ble.n	8002f88 <bk_write_string+0x34>
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < reg_count; i++) {
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8c:	e02d      	b.n	8002fea <bk_write_string+0x96>
        uint32_t word = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	e01a      	b.n	8002fce <bk_write_string+0x7a>
            int idx = i * 4 + b;
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
            uint8_t ch = (idx < str_len) ? (uint8_t)s[idx] : 0;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	da04      	bge.n	8002fb4 <bk_write_string+0x60>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	e000      	b.n	8002fb6 <bk_write_string+0x62>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
            word |= ((uint32_t)ch) << (8 * b);
 8002fb8:	7dfa      	ldrb	r2, [r7, #23]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	dde1      	ble.n	8002f98 <bk_write_string+0x44>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, start_reg + i, word);
 8002fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4807      	ldr	r0, [pc, #28]	@ (8002ffc <bk_write_string+0xa8>)
 8002fe0:	f008 f813 	bl	800b00a <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < reg_count; i++) {
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dbcd      	blt.n	8002f8e <bk_write_string+0x3a>
    }
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	3730      	adds	r7, #48	@ 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200029c8 	.word	0x200029c8

08003000 <bk_read_string>:

static void bk_read_string(uint32_t start_reg, char *out, int reg_count) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    int pos = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
    int max_len = reg_count * 4 - 1; // оставляем место для '\0'
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	3b01      	subs	r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < reg_count; i++) {
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	e034      	b.n	8003088 <bk_read_string+0x88>
        uint32_t word = HAL_RTCEx_BKUPRead(&hrtc, start_reg + i);
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	4619      	mov	r1, r3
 8003026:	481e      	ldr	r0, [pc, #120]	@ (80030a0 <bk_read_string+0xa0>)
 8003028:	f008 f808 	bl	800b03c <HAL_RTCEx_BKUPRead>
 800302c:	6178      	str	r0, [r7, #20]
        for (int b = 0; b < 4; b++) {
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e023      	b.n	800307c <bk_read_string+0x7c>
            if (pos >= max_len) { out[pos] = 0; return; }
 8003034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	429a      	cmp	r2, r3
 800303a:	db05      	blt.n	8003048 <bk_read_string+0x48>
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e028      	b.n	800309a <bk_read_string+0x9a>
            uint8_t ch = (word >> (8 * b)) & 0xFF;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	74fb      	strb	r3, [r7, #19]
            if (ch == 0) { out[pos] = 0; return; }
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <bk_read_string+0x66>
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	4413      	add	r3, r2
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e019      	b.n	800309a <bk_read_string+0x9a>
            out[pos++] = ch;
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	627a      	str	r2, [r7, #36]	@ 0x24
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	7cfa      	ldrb	r2, [r7, #19]
 8003074:	701a      	strb	r2, [r3, #0]
        for (int b = 0; b < 4; b++) {
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b03      	cmp	r3, #3
 8003080:	ddd8      	ble.n	8003034 <bk_read_string+0x34>
    for (int i = 0; i < reg_count; i++) {
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	3301      	adds	r3, #1
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbc6      	blt.n	800301e <bk_read_string+0x1e>
        }
    }
    out[pos] = 0;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4413      	add	r3, r2
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	3728      	adds	r7, #40	@ 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200029c8 	.word	0x200029c8

080030a4 <Settings_Init>:

/* --- Инициализация backup-доступа --- */
void Settings_Init(void) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
    __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <Settings_Init+0x30>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <Settings_Init+0x30>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <Settings_Init+0x30>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 80030c6:	f006 ff51 	bl	8009f6c <HAL_PWR_EnableBkUpAccess>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <Settings_Save_To_Backup>:

/* --- Сохранение всех настроек в backup --- */
void Settings_Save_To_Backup(ip4_addr_t ip, ip4_addr_t mask, ip4_addr_t gw, uint8_t dhcp,
                             const char *snmp_read, const char *snmp_write, const char *snmp_trap)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	70fb      	strb	r3, [r7, #3]
    bk_write_u32(BKP_IP_REG0, ip.addr);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2001      	movs	r0, #1
 80030ec:	f7ff ff12 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, mask.addr);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4619      	mov	r1, r3
 80030f4:	2002      	movs	r0, #2
 80030f6:	f7ff ff0d 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, gw.addr);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4619      	mov	r1, r3
 80030fe:	2003      	movs	r0, #3
 8003100:	f7ff ff08 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, dhcp ? 1 : 0);
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	2004      	movs	r0, #4
 8003114:	f7ff fefe 	bl	8002f14 <bk_write_u32>

    bk_write_string(BKP_SNMP_BASE + 0, snmp_read  ? snmp_read  : "", BKP_SNMP_REG_COUNT);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <Settings_Save_To_Backup+0x4a>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	e000      	b.n	8003124 <Settings_Save_To_Backup+0x4c>
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <Settings_Save_To_Backup+0x94>)
 8003124:	2204      	movs	r2, #4
 8003126:	4619      	mov	r1, r3
 8003128:	2005      	movs	r0, #5
 800312a:	f7ff ff13 	bl	8002f54 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, snmp_write ? snmp_write : "", BKP_SNMP_REG_COUNT);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <Settings_Save_To_Backup+0x60>
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	e000      	b.n	800313a <Settings_Save_To_Backup+0x62>
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <Settings_Save_To_Backup+0x94>)
 800313a:	2204      	movs	r2, #4
 800313c:	4619      	mov	r1, r3
 800313e:	2009      	movs	r0, #9
 8003140:	f7ff ff08 	bl	8002f54 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, snmp_trap  ? snmp_trap  : "", BKP_SNMP_REG_COUNT);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <Settings_Save_To_Backup+0x76>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	e000      	b.n	8003150 <Settings_Save_To_Backup+0x78>
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <Settings_Save_To_Backup+0x94>)
 8003150:	2204      	movs	r2, #4
 8003152:	4619      	mov	r1, r3
 8003154:	200d      	movs	r0, #13
 8003156:	f7ff fefd 	bl	8002f54 <bk_write_string>

    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE); // Обязательно ставим magic
 800315a:	4905      	ldr	r1, [pc, #20]	@ (8003170 <Settings_Save_To_Backup+0x98>)
 800315c:	2013      	movs	r0, #19
 800315e:	f7ff fed9 	bl	8002f14 <bk_write_u32>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	08025200 	.word	0x08025200
 8003170:	beefcafe 	.word	0xbeefcafe

08003174 <Settings_Load_From_Backup>:
/* --- Загрузка всех настроек из backup --- */
void Settings_Load_From_Backup(ip4_addr_t *ip, ip4_addr_t *mask, ip4_addr_t *gw, uint8_t *dhcp,
                              char *snmp_read, int snmp_read_size,
                              char *snmp_write, int snmp_write_size,
                              char *snmp_trap, int snmp_trap_size)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08e      	sub	sp, #56	@ 0x38
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) {
 8003182:	2013      	movs	r0, #19
 8003184:	f7ff fed6 	bl	8002f34 <bk_read_u32>
 8003188:	4603      	mov	r3, r0
 800318a:	4a51      	ldr	r2, [pc, #324]	@ (80032d0 <Settings_Load_From_Backup+0x15c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02a      	beq.n	80031e6 <Settings_Load_From_Backup+0x72>
        // backup пустой или некорректный
        if (ip) ip->addr = 0;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <Settings_Load_From_Backup+0x28>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
        if (mask) mask->addr = 0;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <Settings_Load_From_Backup+0x34>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
        if (gw) gw->addr = 0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <Settings_Load_From_Backup+0x40>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
        if (dhcp) *dhcp = 0;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <Settings_Load_From_Backup+0x4c>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
        if (snmp_read)  snmp_read[0]  = 0;
 80031c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <Settings_Load_From_Backup+0x58>
 80031c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
        if (snmp_write) snmp_write[0] = 0;
 80031cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <Settings_Load_From_Backup+0x64>
 80031d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
        if (snmp_trap)  snmp_trap[0]  = 0;
 80031d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d074      	beq.n	80032c8 <Settings_Load_From_Backup+0x154>
 80031de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e071      	b.n	80032ca <Settings_Load_From_Backup+0x156>
        return;
    }

    if (ip)    ip->addr   = bk_read_u32(BKP_IP_REG0);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <Settings_Load_From_Backup+0x84>
 80031ec:	2001      	movs	r0, #1
 80031ee:	f7ff fea1 	bl	8002f34 <bk_read_u32>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]
    if (mask)  mask->addr = bk_read_u32(BKP_MASK_REG1);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <Settings_Load_From_Backup+0x96>
 80031fe:	2002      	movs	r0, #2
 8003200:	f7ff fe98 	bl	8002f34 <bk_read_u32>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	601a      	str	r2, [r3, #0]
    if (gw)    gw->addr   = bk_read_u32(BKP_GW_REG2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <Settings_Load_From_Backup+0xa8>
 8003210:	2003      	movs	r0, #3
 8003212:	f7ff fe8f 	bl	8002f34 <bk_read_u32>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	601a      	str	r2, [r3, #0]
    if (dhcp)  *dhcp      = (uint8_t)(bk_read_u32(BKP_DHCP_REG3) & 0xFF);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <Settings_Load_From_Backup+0xbc>
 8003222:	2004      	movs	r0, #4
 8003224:	f7ff fe86 	bl	8002f34 <bk_read_u32>
 8003228:	4603      	mov	r3, r0
 800322a:	b2da      	uxtb	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	701a      	strb	r2, [r3, #0]

    char tmp[33];

    bk_read_string(BKP_SNMP_BASE + 0, tmp, BKP_SNMP_REG_COUNT);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	2204      	movs	r2, #4
 8003236:	4619      	mov	r1, r3
 8003238:	2005      	movs	r0, #5
 800323a:	f7ff fee1 	bl	8003000 <bk_read_string>
    if (snmp_read) { strncpy(snmp_read, tmp, snmp_read_size-1); snmp_read[snmp_read_size-1]=0; }
 800323e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <Settings_Load_From_Backup+0xee>
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	3b01      	subs	r3, #1
 8003248:	461a      	mov	r2, r3
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003252:	f01f fa19 	bl	8022688 <strncpy>
 8003256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003258:	3b01      	subs	r3, #1
 800325a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800325c:	4413      	add	r3, r2
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, tmp, BKP_SNMP_REG_COUNT);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	2204      	movs	r2, #4
 8003268:	4619      	mov	r1, r3
 800326a:	2009      	movs	r0, #9
 800326c:	f7ff fec8 	bl	8003000 <bk_read_string>
    if (snmp_write) { strncpy(snmp_write, tmp, snmp_write_size-1); snmp_write[snmp_write_size-1]=0; }
 8003270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <Settings_Load_From_Backup+0x120>
 8003276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003278:	3b01      	subs	r3, #1
 800327a:	461a      	mov	r2, r3
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4619      	mov	r1, r3
 8003282:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003284:	f01f fa00 	bl	8022688 <strncpy>
 8003288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328a:	3b01      	subs	r3, #1
 800328c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800328e:	4413      	add	r3, r2
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, tmp, BKP_SNMP_REG_COUNT);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2204      	movs	r2, #4
 800329a:	4619      	mov	r1, r3
 800329c:	200d      	movs	r0, #13
 800329e:	f7ff feaf 	bl	8003000 <bk_read_string>
    if (snmp_trap) { strncpy(snmp_trap, tmp, snmp_trap_size-1); snmp_trap[snmp_trap_size-1]=0; }
 80032a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <Settings_Load_From_Backup+0x156>
 80032a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032aa:	3b01      	subs	r3, #1
 80032ac:	461a      	mov	r2, r3
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4619      	mov	r1, r3
 80032b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80032b6:	f01f f9e7 	bl	8022688 <strncpy>
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	3b01      	subs	r3, #1
 80032be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e000      	b.n	80032ca <Settings_Load_From_Backup+0x156>
        return;
 80032c8:	bf00      	nop
}
 80032ca:	3738      	adds	r7, #56	@ 0x38
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	beefcafe 	.word	0xbeefcafe

080032d4 <Settings_Save_Rotation>:

// --- Rotation flag helpers ---
void Settings_Save_Rotation(uint8_t rot180)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
    bk_write_u32(BKP_ROT_REG, (rot180 ? 1U : 0U));
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <Settings_Save_Rotation+0x14>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <Settings_Save_Rotation+0x16>
 80032e8:	2300      	movs	r3, #0
 80032ea:	4619      	mov	r1, r3
 80032ec:	2012      	movs	r0, #18
 80032ee:	f7ff fe11 	bl	8002f14 <bk_write_u32>
    // Ensure backup domain marked as valid
    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE);
 80032f2:	4904      	ldr	r1, [pc, #16]	@ (8003304 <Settings_Save_Rotation+0x30>)
 80032f4:	2013      	movs	r0, #19
 80032f6:	f7ff fe0d 	bl	8002f14 <bk_write_u32>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	beefcafe 	.word	0xbeefcafe

08003308 <Settings_Load_Rotation>:

uint8_t Settings_Load_Rotation(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) return 0;
 800330c:	2013      	movs	r0, #19
 800330e:	f7ff fe11 	bl	8002f34 <bk_read_u32>
 8003312:	4603      	mov	r3, r0
 8003314:	4a07      	ldr	r2, [pc, #28]	@ (8003334 <Settings_Load_Rotation+0x2c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d001      	beq.n	800331e <Settings_Load_Rotation+0x16>
 800331a:	2300      	movs	r3, #0
 800331c:	e007      	b.n	800332e <Settings_Load_Rotation+0x26>
    return (uint8_t)(bk_read_u32(BKP_ROT_REG) & 0x1U);
 800331e:	2012      	movs	r0, #18
 8003320:	f7ff fe08 	bl	8002f34 <bk_read_u32>
 8003324:	4603      	mov	r3, r0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	beefcafe 	.word	0xbeefcafe

08003338 <Settings_Clear_Backup>:

// Сброс всех backup регистров (очистка домена)
void Settings_Clear_Backup(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
    // Стираем основные используемые регистры
    bk_write_u32(BKP_IP_REG0, 0);
 800333e:	2100      	movs	r1, #0
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff fde7 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, 0);
 8003346:	2100      	movs	r1, #0
 8003348:	2002      	movs	r0, #2
 800334a:	f7ff fde3 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, 0);
 800334e:	2100      	movs	r1, #0
 8003350:	2003      	movs	r0, #3
 8003352:	f7ff fddf 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, 0);
 8003356:	2100      	movs	r1, #0
 8003358:	2004      	movs	r0, #4
 800335a:	f7ff fddb 	bl	8002f14 <bk_write_u32>
    bk_write_u32(BKP_ROT_REG, 0);
 800335e:	2100      	movs	r1, #0
 8003360:	2012      	movs	r0, #18
 8003362:	f7ff fdd7 	bl	8002f14 <bk_write_u32>

    // Стираем SNMP строки
    for (int i = 0; i < BKP_SNMP_REG_COUNT * 3; ++i) {
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e008      	b.n	800337e <Settings_Clear_Backup+0x46>
        bk_write_u32(BKP_SNMP_BASE + i, 0);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3305      	adds	r3, #5
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fdce 	bl	8002f14 <bk_write_u32>
    for (int i = 0; i < BKP_SNMP_REG_COUNT * 3; ++i) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3301      	adds	r3, #1
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b0b      	cmp	r3, #11
 8003382:	ddf3      	ble.n	800336c <Settings_Clear_Backup+0x34>
    }

    // Сбрасываем magic, чтобы загрузка считала, что backup пуст
    bk_write_u32(BKP_MAGIC_REG, 0);
 8003384:	2100      	movs	r1, #0
 8003386:	2013      	movs	r0, #19
 8003388:	f7ff fdc4 	bl	8002f14 <bk_write_u32>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	0000      	movs	r0, r0
	...

08003398 <SignalProcessor_Update>:
float voltage2 = 0.0f;
float current  = 0.0f;
float selected_voltage = 0.0f;

void SignalProcessor_Update(uint32_t *adc_buf, size_t samples)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b090      	sub	sp, #64	@ 0x40
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
    double sum_v1 = 0.0;
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double sum_v2 = 0.0;
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double sum_i  = 0.0;
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    for (size_t n = 0; n < samples; n++) {
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ca:	e095      	b.n	80034f8 <SignalProcessor_Update+0x160>
        // Буфер имеет вид [ch1, ch2, ch3, ch1, ch2, ch3, ...]
        uint32_t raw1 = adc_buf[n * 3 + 0];
 80033cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	623b      	str	r3, [r7, #32]
        uint32_t raw2 = adc_buf[n * 3 + 1];
 80033e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3304      	adds	r3, #4
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61fb      	str	r3, [r7, #28]
        uint32_t raw3 = adc_buf[n * 3 + 2];
 80033f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	3308      	adds	r3, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]

        // Переводим в напряжение на пине (0…3.3 В)
        float v1 = (raw1 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003408:	6a38      	ldr	r0, [r7, #32]
 800340a:	f7fd fc89 	bl	8000d20 <__aeabi_ui2f>
 800340e:	4603      	mov	r3, r0
 8003410:	4999      	ldr	r1, [pc, #612]	@ (8003678 <SignalProcessor_Update+0x2e0>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fcdc 	bl	8000dd0 <__aeabi_fmul>
 8003418:	4603      	mov	r3, r0
 800341a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fd8a 	bl	8000f38 <__aeabi_fdiv>
 8003424:	4603      	mov	r3, r0
 8003426:	4995      	ldr	r1, [pc, #596]	@ (800367c <SignalProcessor_Update+0x2e4>)
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fbc7 	bl	8000bbc <__aeabi_fsub>
 800342e:	4603      	mov	r3, r0
 8003430:	617b      	str	r3, [r7, #20]
        float v2 = (raw2 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003432:	69f8      	ldr	r0, [r7, #28]
 8003434:	f7fd fc74 	bl	8000d20 <__aeabi_ui2f>
 8003438:	4603      	mov	r3, r0
 800343a:	498f      	ldr	r1, [pc, #572]	@ (8003678 <SignalProcessor_Update+0x2e0>)
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fcc7 	bl	8000dd0 <__aeabi_fmul>
 8003442:	4603      	mov	r3, r0
 8003444:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fd75 	bl	8000f38 <__aeabi_fdiv>
 800344e:	4603      	mov	r3, r0
 8003450:	498a      	ldr	r1, [pc, #552]	@ (800367c <SignalProcessor_Update+0x2e4>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fbb2 	bl	8000bbc <__aeabi_fsub>
 8003458:	4603      	mov	r3, r0
 800345a:	613b      	str	r3, [r7, #16]
        float i  = (raw3 * VREF / ADC_RESOLUTION) - VREF_HALF;
 800345c:	69b8      	ldr	r0, [r7, #24]
 800345e:	f7fd fc5f 	bl	8000d20 <__aeabi_ui2f>
 8003462:	4603      	mov	r3, r0
 8003464:	4984      	ldr	r1, [pc, #528]	@ (8003678 <SignalProcessor_Update+0x2e0>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fcb2 	bl	8000dd0 <__aeabi_fmul>
 800346c:	4603      	mov	r3, r0
 800346e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fd60 	bl	8000f38 <__aeabi_fdiv>
 8003478:	4603      	mov	r3, r0
 800347a:	4980      	ldr	r1, [pc, #512]	@ (800367c <SignalProcessor_Update+0x2e4>)
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fb9d 	bl	8000bbc <__aeabi_fsub>
 8003482:	4603      	mov	r3, r0
 8003484:	60fb      	str	r3, [r7, #12]

        // Суммируем квадраты
        sum_v1 += (double)(v1 * v1);
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	6978      	ldr	r0, [r7, #20]
 800348a:	f7fd fca1 	bl	8000dd0 <__aeabi_fmul>
 800348e:	4603      	mov	r3, r0
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f80f 	bl	80004b4 <__aeabi_f2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800349e:	f7fc feab 	bl	80001f8 <__adddf3>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        sum_v2 += (double)(v2 * v2);
 80034aa:	6939      	ldr	r1, [r7, #16]
 80034ac:	6938      	ldr	r0, [r7, #16]
 80034ae:	f7fd fc8f 	bl	8000dd0 <__aeabi_fmul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fc fffd 	bl	80004b4 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034c2:	f7fc fe99 	bl	80001f8 <__adddf3>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        sum_i  += (double)(i  * i);
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7fd fc7d 	bl	8000dd0 <__aeabi_fmul>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fc ffeb 	bl	80004b4 <__aeabi_f2d>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034e6:	f7fc fe87 	bl	80001f8 <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (size_t n = 0; n < samples; n++) {
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	3301      	adds	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f4ff af65 	bcc.w	80033cc <SignalProcessor_Update+0x34>
    }

    // RMS
    voltage1 = (sqrtf(sum_v1 / samples)*244.4);
 8003502:	6838      	ldr	r0, [r7, #0]
 8003504:	f7fc ffb4 	bl	8000470 <__aeabi_ui2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003510:	f7fd f952 	bl	80007b8 <__aeabi_ddiv>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fafa 	bl	8000b14 <__aeabi_d2f>
 8003520:	4603      	mov	r3, r0
 8003522:	4618      	mov	r0, r3
 8003524:	f021 fd26 	bl	8024f74 <sqrtf>
 8003528:	4603      	mov	r3, r0
 800352a:	4618      	mov	r0, r3
 800352c:	f7fc ffc2 	bl	80004b4 <__aeabi_f2d>
 8003530:	a34b      	add	r3, pc, #300	@ (adr r3, 8003660 <SignalProcessor_Update+0x2c8>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f815 	bl	8000564 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fae7 	bl	8000b14 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a4d      	ldr	r2, [pc, #308]	@ (8003680 <SignalProcessor_Update+0x2e8>)
 800354a:	6013      	str	r3, [r2, #0]
    if (voltage1 < 10.0f) {
 800354c:	4b4c      	ldr	r3, [pc, #304]	@ (8003680 <SignalProcessor_Update+0x2e8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	494c      	ldr	r1, [pc, #304]	@ (8003684 <SignalProcessor_Update+0x2ec>)
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fdda 	bl	800110c <__aeabi_fcmplt>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <SignalProcessor_Update+0x1ce>
        voltage1 = 0.0f;
 800355e:	4b48      	ldr	r3, [pc, #288]	@ (8003680 <SignalProcessor_Update+0x2e8>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
    }
    voltage2 = (sqrtf(sum_v2 / samples)*245.9);
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f7fc ff82 	bl	8000470 <__aeabi_ui2d>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003574:	f7fd f920 	bl	80007b8 <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd fac8 	bl	8000b14 <__aeabi_d2f>
 8003584:	4603      	mov	r3, r0
 8003586:	4618      	mov	r0, r3
 8003588:	f021 fcf4 	bl	8024f74 <sqrtf>
 800358c:	4603      	mov	r3, r0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fc ff90 	bl	80004b4 <__aeabi_f2d>
 8003594:	a334      	add	r3, pc, #208	@ (adr r3, 8003668 <SignalProcessor_Update+0x2d0>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fc ffe3 	bl	8000564 <__aeabi_dmul>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fd fab5 	bl	8000b14 <__aeabi_d2f>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4a36      	ldr	r2, [pc, #216]	@ (8003688 <SignalProcessor_Update+0x2f0>)
 80035ae:	6013      	str	r3, [r2, #0]
    if (voltage2 < 10.0f) {
 80035b0:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <SignalProcessor_Update+0x2f0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4933      	ldr	r1, [pc, #204]	@ (8003684 <SignalProcessor_Update+0x2ec>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fda8 	bl	800110c <__aeabi_fcmplt>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <SignalProcessor_Update+0x232>
        voltage2 = 0.0f;
 80035c2:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <SignalProcessor_Update+0x2f0>)
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    }
	current  = (sqrtf(sum_i  / samples)*4.8);
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f7fc ff50 	bl	8000470 <__aeabi_ui2d>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035d8:	f7fd f8ee 	bl	80007b8 <__aeabi_ddiv>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7fd fa96 	bl	8000b14 <__aeabi_d2f>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f021 fcc2 	bl	8024f74 <sqrtf>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ff5e 	bl	80004b4 <__aeabi_f2d>
 80035f8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003670 <SignalProcessor_Update+0x2d8>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc ffb1 	bl	8000564 <__aeabi_dmul>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	f7fd fa83 	bl	8000b14 <__aeabi_d2f>
 800360e:	4603      	mov	r3, r0
 8003610:	4a1e      	ldr	r2, [pc, #120]	@ (800368c <SignalProcessor_Update+0x2f4>)
 8003612:	6013      	str	r3, [r2, #0]
    if (current < 0.10f) {
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <SignalProcessor_Update+0x2f4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	491d      	ldr	r1, [pc, #116]	@ (8003690 <SignalProcessor_Update+0x2f8>)
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fd76 	bl	800110c <__aeabi_fcmplt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <SignalProcessor_Update+0x296>
        current = 0.0f;
 8003626:	4b19      	ldr	r3, [pc, #100]	@ (800368c <SignalProcessor_Update+0x2f4>)
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
    }

    // Выбор активного напряжения
    if (voltage1 > 50.0f) {
 800362e:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <SignalProcessor_Update+0x2e8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4918      	ldr	r1, [pc, #96]	@ (8003694 <SignalProcessor_Update+0x2fc>)
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fd87 	bl	8001148 <__aeabi_fcmpgt>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <SignalProcessor_Update+0x2b2>
        selected_voltage = voltage1;
 8003640:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <SignalProcessor_Update+0x2e8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <SignalProcessor_Update+0x300>)
 8003646:	6013      	str	r3, [r2, #0]
    } else {
        selected_voltage = voltage2;
    }
}
 8003648:	e003      	b.n	8003652 <SignalProcessor_Update+0x2ba>
        selected_voltage = voltage2;
 800364a:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <SignalProcessor_Update+0x2f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <SignalProcessor_Update+0x300>)
 8003650:	6013      	str	r3, [r2, #0]
}
 8003652:	bf00      	nop
 8003654:	3740      	adds	r7, #64	@ 0x40
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	f3af 8000 	nop.w
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	406e8ccc 	.word	0x406e8ccc
 8003668:	cccccccd 	.word	0xcccccccd
 800366c:	406ebccc 	.word	0x406ebccc
 8003670:	33333333 	.word	0x33333333
 8003674:	40133333 	.word	0x40133333
 8003678:	40533333 	.word	0x40533333
 800367c:	3fd33333 	.word	0x3fd33333
 8003680:	20004ab4 	.word	0x20004ab4
 8003684:	41200000 	.word	0x41200000
 8003688:	20004ab8 	.word	0x20004ab8
 800368c:	20004abc 	.word	0x20004abc
 8003690:	3dcccccd 	.word	0x3dcccccd
 8003694:	42480000 	.word	0x42480000
 8003698:	20004ac0 	.word	0x20004ac0

0800369c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <HAL_MspInit+0x48>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a0e      	ldr	r2, [pc, #56]	@ (80036e4 <HAL_MspInit+0x48>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <HAL_MspInit+0x48>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <HAL_MspInit+0x48>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	4a07      	ldr	r2, [pc, #28]	@ (80036e4 <HAL_MspInit+0x48>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_MspInit+0x48>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3c      	ldr	r2, [pc, #240]	@ (80037f8 <HAL_ADC_MspInit+0x110>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d172      	bne.n	80037f0 <HAL_ADC_MspInit+0x108>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	4a3a      	ldr	r2, [pc, #232]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	6453      	str	r3, [r2, #68]	@ 0x44
 800371a:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a33      	ldr	r2, [pc, #204]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <HAL_ADC_MspInit+0x114>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800375e:	2301      	movs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003762:	2303      	movs	r3, #3
 8003764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	4619      	mov	r1, r3
 8003770:	4823      	ldr	r0, [pc, #140]	@ (8003800 <HAL_ADC_MspInit+0x118>)
 8003772:	f005 fd81 	bl	8009278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003776:	2360      	movs	r3, #96	@ 0x60
 8003778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800377a:	2303      	movs	r3, #3
 800377c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4619      	mov	r1, r3
 8003788:	481e      	ldr	r0, [pc, #120]	@ (8003804 <HAL_ADC_MspInit+0x11c>)
 800378a:	f005 fd75 	bl	8009278 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 8003790:	4a1e      	ldr	r2, [pc, #120]	@ (800380c <HAL_ADC_MspInit+0x124>)
 8003792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003794:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800379a:	4b1b      	ldr	r3, [pc, #108]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037a6:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ae:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037b6:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037d4:	480c      	ldr	r0, [pc, #48]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037d6:	f003 fe11 	bl	80073fc <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80037e0:	f7ff fb92 	bl	8002f08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a08      	ldr	r2, [pc, #32]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80037ea:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <HAL_ADC_MspInit+0x120>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80037f0:	bf00      	nop
 80037f2:	3728      	adds	r7, #40	@ 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40012000 	.word	0x40012000
 80037fc:	40023800 	.word	0x40023800
 8003800:	40020800 	.word	0x40020800
 8003804:	40020000 	.word	0x40020000
 8003808:	20002914 	.word	0x20002914
 800380c:	40026410 	.word	0x40026410

08003810 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	@ 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <HAL_I2C_MspInit+0x84>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d12b      	bne.n	800388a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b18      	ldr	r3, [pc, #96]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	4a17      	ldr	r2, [pc, #92]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	6313      	str	r3, [r2, #48]	@ 0x30
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800384e:	23c0      	movs	r3, #192	@ 0xc0
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003852:	2312      	movs	r3, #18
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	2303      	movs	r3, #3
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800385e:	2304      	movs	r3, #4
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	480c      	ldr	r0, [pc, #48]	@ (800389c <HAL_I2C_MspInit+0x8c>)
 800386a:	f005 fd05 	bl	8009278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 8003878:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800387c:	6413      	str	r3, [r2, #64]	@ 0x40
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <HAL_I2C_MspInit+0x88>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800388a:	bf00      	nop
 800388c:	3728      	adds	r7, #40	@ 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40005400 	.word	0x40005400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <HAL_RTC_MspInit+0x24>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d102      	bne.n	80038b8 <HAL_RTC_MspInit+0x18>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RTC_MspInit+0x28>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40002800 	.word	0x40002800
 80038c8:	42470e3c 	.word	0x42470e3c

080038cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <HAL_TIM_Base_MspInit+0x38>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_TIM_Base_MspInit+0x3c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <HAL_TIM_Base_MspInit+0x3c>)
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_TIM_Base_MspInit+0x3c>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40000400 	.word	0x40000400
 8003908:	40023800 	.word	0x40023800

0800390c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <NMI_Handler+0x4>

08003914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <HardFault_Handler+0x4>

0800391c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <MemManage_Handler+0x4>

08003924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <BusFault_Handler+0x4>

0800392c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <UsageFault_Handler+0x4>

08003934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800395c:	f003 f824 	bl	80069a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}

08003964 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003968:	2002      	movs	r0, #2
 800396a:	f005 fe3b 	bl	80095e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}

08003972 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003976:	2004      	movs	r0, #4
 8003978:	f005 fe34 	bl	80095e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}

08003980 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003984:	2008      	movs	r0, #8
 8003986:	f005 fe2d 	bl	80095e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003994:	4802      	ldr	r0, [pc, #8]	@ (80039a0 <DMA2_Stream0_IRQHandler+0x10>)
 8003996:	f003 fe37 	bl	8007608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20002914 	.word	0x20002914

080039a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return 1;
 80039a8:	2301      	movs	r3, #1
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <_kill>:

int _kill(int pid, int sig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <_kill+0x20>)
 80039c0:	2216      	movs	r2, #22
 80039c2:	601a      	str	r2, [r3, #0]
  return -1;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000c060 	.word	0x2000c060

080039d8 <_exit>:

void _exit (int status)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ffe5 	bl	80039b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <_exit+0x12>

080039ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e00a      	b.n	8003a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a00:	f3af 8000 	nop.w
 8003a04:	4601      	mov	r1, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	60ba      	str	r2, [r7, #8]
 8003a0c:	b2ca      	uxtb	r2, r1
 8003a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	dbf0      	blt.n	8003a00 <_read+0x12>
  }

  return len;
 8003a1e:	687b      	ldr	r3, [r7, #4]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e009      	b.n	8003a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	60ba      	str	r2, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbf1      	blt.n	8003a3a <_write+0x12>
  }
  return len;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_close>:

int _close(int file)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a86:	605a      	str	r2, [r3, #4]
  return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <_isatty>:

int _isatty(int file)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac8:	4a14      	ldr	r2, [pc, #80]	@ (8003b1c <_sbrk+0x5c>)
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <_sbrk+0x60>)
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <_sbrk+0x64>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <_sbrk+0x64>)
 8003ade:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <_sbrk+0x68>)
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <_sbrk+0x64>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d205      	bcs.n	8003afc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <_sbrk+0x6c>)
 8003af2:	220c      	movs	r2, #12
 8003af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	e009      	b.n	8003b10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <_sbrk+0x64>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	4a06      	ldr	r2, [pc, #24]	@ (8003b24 <_sbrk+0x64>)
 8003b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2001c000 	.word	0x2001c000
 8003b20:	00004000 	.word	0x00004000
 8003b24:	20004ac4 	.word	0x20004ac4
 8003b28:	2000c070 	.word	0x2000c070
 8003b2c:	2000c060 	.word	0x2000c060

08003b30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <pin_to_index>:
} ButtonInfo_t;

static volatile ButtonInfo_t buttons[BTN_COUNT];

static int pin_to_index(uint16_t gpio_pin)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
    switch (gpio_pin) {
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d006      	beq.n	8003b5a <pin_to_index+0x1e>
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	dc0a      	bgt.n	8003b66 <pin_to_index+0x2a>
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d006      	beq.n	8003b62 <pin_to_index+0x26>
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d002      	beq.n	8003b5e <pin_to_index+0x22>
 8003b58:	e005      	b.n	8003b66 <pin_to_index+0x2a>
    case GPIO_PIN_3: return BTN_A;  // Изменено
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e005      	b.n	8003b6a <pin_to_index+0x2e>
    case GPIO_PIN_2: return BTN_B;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e003      	b.n	8003b6a <pin_to_index+0x2e>
    case GPIO_PIN_1: return BTN_C;  // Изменено
 8003b62:	2302      	movs	r3, #2
 8003b64:	e001      	b.n	8003b6a <pin_to_index+0x2e>
    default: return -1;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <Buttons_GetState>:

ButtonState_t Buttons_GetState(ButtonId_t id)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
    uint16_t pin;
    switch (id) {
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d00c      	beq.n	8003b9e <Buttons_GetState+0x2a>
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	dc0d      	bgt.n	8003ba4 <Buttons_GetState+0x30>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <Buttons_GetState+0x1e>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d003      	beq.n	8003b98 <Buttons_GetState+0x24>
 8003b90:	e008      	b.n	8003ba4 <Buttons_GetState+0x30>
    case BTN_A: pin = BTN_A_PIN; break;  // Теперь это правая кнопка
 8003b92:	2308      	movs	r3, #8
 8003b94:	81fb      	strh	r3, [r7, #14]
 8003b96:	e007      	b.n	8003ba8 <Buttons_GetState+0x34>
    case BTN_B: pin = BTN_B_PIN; break;  // Средняя
 8003b98:	2304      	movs	r3, #4
 8003b9a:	81fb      	strh	r3, [r7, #14]
 8003b9c:	e004      	b.n	8003ba8 <Buttons_GetState+0x34>
    case BTN_C: pin = BTN_C_PIN; break;  // Теперь это левая кнопка
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	81fb      	strh	r3, [r7, #14]
 8003ba2:	e001      	b.n	8003ba8 <Buttons_GetState+0x34>
    default: return BUTTON_RELEASED;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e00a      	b.n	8003bbe <Buttons_GetState+0x4a>
    }
    return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, pin) == GPIO_PIN_SET) ?
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	4619      	mov	r1, r3
 8003bac:	4806      	ldr	r0, [pc, #24]	@ (8003bc8 <Buttons_GetState+0x54>)
 8003bae:	f005 fd01 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003bb2:	4603      	mov	r3, r0
            BUTTON_PRESSED : BUTTON_RELEASED;
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40020c00 	.word	0x40020c00

08003bcc <Buttons_Init>:

void Buttons_SetDebounceMs(uint32_t ms) { debounce_ms = ms; }
void Buttons_SetLongPressMs(uint32_t ms) { longpress_ms = ms; }

void Buttons_Init(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	e03d      	b.n	8003c54 <Buttons_Init+0x88>
        buttons[i].last_tick = 0;
 8003bd8:	4923      	ldr	r1, [pc, #140]	@ (8003c68 <Buttons_Init+0x9c>)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
        buttons[i].press_start = 0;
 8003bea:	491f      	ldr	r1, [pc, #124]	@ (8003c68 <Buttons_Init+0x9c>)
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
        buttons[i].state = BUTTON_RELEASED;
 8003bfe:	491a      	ldr	r1, [pc, #104]	@ (8003c68 <Buttons_Init+0x9c>)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
        buttons[i].callback = NULL;
 8003c12:	4915      	ldr	r1, [pc, #84]	@ (8003c68 <Buttons_Init+0x9c>)
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	330c      	adds	r3, #12
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
        buttons[i].long30_reported = 0;
 8003c26:	4910      	ldr	r1, [pc, #64]	@ (8003c68 <Buttons_Init+0x9c>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3310      	adds	r3, #16
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
        buttons[i].long60_reported = 0;
 8003c3a:	490b      	ldr	r1, [pc, #44]	@ (8003c68 <Buttons_Init+0x9c>)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3311      	adds	r3, #17
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3301      	adds	r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	ddbe      	ble.n	8003bd8 <Buttons_Init+0xc>
    }
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20004ac8 	.word	0x20004ac8

08003c6c <Buttons_EXTI_Handle>:
        buttons[id].callback = callback;
    }
}

void Buttons_EXTI_Handle(uint16_t GPIO_Pin)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	80fb      	strh	r3, [r7, #6]
    int idx = pin_to_index(GPIO_Pin);
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5f 	bl	8003b3c <pin_to_index>
 8003c7e:	6178      	str	r0, [r7, #20]
    if (idx < 0) return;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f2c0 809f 	blt.w	8003dc6 <Buttons_EXTI_Handle+0x15a>

    uint32_t now = HAL_GetTick();
 8003c88:	f002 fea0 	bl	80069cc <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8003c8e:	4951      	ldr	r1, [pc, #324]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	1ad2      	subs	r2, r2, r3
 8003ca2:	4b4d      	ldr	r3, [pc, #308]	@ (8003dd8 <Buttons_EXTI_Handle+0x16c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f0c0 808f 	bcc.w	8003dca <Buttons_EXTI_Handle+0x15e>
    buttons[idx].last_tick = now;
 8003cac:	4949      	ldr	r1, [pc, #292]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	601a      	str	r2, [r3, #0]

    ButtonState_t cur = Buttons_GetState((ButtonId_t)idx);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff56 	bl	8003b74 <Buttons_GetState>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]

    if (cur != buttons[idx].state) {
 8003ccc:	4941      	ldr	r1, [pc, #260]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3308      	adds	r3, #8
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d072      	beq.n	8003dcc <Buttons_EXTI_Handle+0x160>
        buttons[idx].state = cur;
 8003ce6:	493b      	ldr	r1, [pc, #236]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	701a      	strb	r2, [r3, #0]

        if (cur == BUTTON_PRESSED) {
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11e      	bne.n	8003d3e <Buttons_EXTI_Handle+0xd2>
            buttons[idx].press_start = now;
 8003d00:	4934      	ldr	r1, [pc, #208]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3304      	adds	r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	601a      	str	r2, [r3, #0]
            buttons[idx].long30_reported = 0;
 8003d14:	492f      	ldr	r1, [pc, #188]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3310      	adds	r3, #16
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
            buttons[idx].long60_reported = 0;
 8003d28:	492a      	ldr	r1, [pc, #168]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3311      	adds	r3, #17
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e046      	b.n	8003dcc <Buttons_EXTI_Handle+0x160>
        } else {
            /* Отпускание */
            uint32_t dur = now - buttons[idx].press_start;
 8003d3e:	4925      	ldr	r1, [pc, #148]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	60bb      	str	r3, [r7, #8]
            if (buttons[idx].callback) {
 8003d56:	491f      	ldr	r1, [pc, #124]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	330c      	adds	r3, #12
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <Buttons_EXTI_Handle+0x160>
                if (dur >= longpress_ms && dur < LONG30_MS) {
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <Buttons_EXTI_Handle+0x170>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d313      	bcc.n	8003d9e <Buttons_EXTI_Handle+0x132>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f247 522f 	movw	r2, #29999	@ 0x752f
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d80e      	bhi.n	8003d9e <Buttons_EXTI_Handle+0x132>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_LONG);
 8003d80:	4914      	ldr	r1, [pc, #80]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	330c      	adds	r3, #12
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	2101      	movs	r1, #1
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4798      	blx	r3
 8003d9c:	e016      	b.n	8003dcc <Buttons_EXTI_Handle+0x160>
                } else if (dur < longpress_ms) {
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <Buttons_EXTI_Handle+0x170>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d211      	bcs.n	8003dcc <Buttons_EXTI_Handle+0x160>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_SHORT);
 8003da8:	490a      	ldr	r1, [pc, #40]	@ (8003dd4 <Buttons_EXTI_Handle+0x168>)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	330c      	adds	r3, #12
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
 8003dc4:	e002      	b.n	8003dcc <Buttons_EXTI_Handle+0x160>
    if (idx < 0) return;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <Buttons_EXTI_Handle+0x160>
    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8003dca:	bf00      	nop
                }
                /* Если удержали >30 или >60 — событие уже сработало в Task */
            }
        }
    }
}
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20004ac8 	.word	0x20004ac8
 8003dd8:	20000074 	.word	0x20000074
 8003ddc:	20000078 	.word	0x20000078

08003de0 <HAL_GPIO_EXTI_Callback>:
    }
}

/* вызывать из stm32f2xx_it.c */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
    Buttons_EXTI_Handle(GPIO_Pin);
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff3d 	bl	8003c6c <Buttons_EXTI_Handle>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e00:	f3bf 8f4f 	dsb	sy
}
 8003e04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <__NVIC_SystemReset+0x24>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e0e:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <__NVIC_SystemReset+0x24>)
 8003e10:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <__NVIC_SystemReset+0x28>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e16:	f3bf 8f4f 	dsb	sy
}
 8003e1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <__NVIC_SystemReset+0x20>
 8003e20:	e000ed00 	.word	0xe000ed00
 8003e24:	05fa0004 	.word	0x05fa0004

08003e28 <OLED_ShowCurrentPage>:


// Добавим глобальную переменную для текущей страницы
int current_page = 0; // 0 = AB page, 1 = NETINFO page

void OLED_ShowCurrentPage(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f002 fa4f 	bl	80062d0 <ssd1306_Fill>

    switch (current_page) {
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <OLED_ShowCurrentPage+0x40>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <OLED_ShowCurrentPage+0x18>
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d003      	beq.n	8003e46 <OLED_ShowCurrentPage+0x1e>
 8003e3e:	e008      	b.n	8003e52 <OLED_ShowCurrentPage+0x2a>
        case 0:
            OLED_DrawABPage();
 8003e40:	f000 fabe 	bl	80043c0 <OLED_DrawABPage>
            break;
 8003e44:	e00b      	b.n	8003e5e <OLED_ShowCurrentPage+0x36>
        case 1:
            OLED_DrawNetInfo(&gnetif, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4808      	ldr	r0, [pc, #32]	@ (8003e6c <OLED_ShowCurrentPage+0x44>)
 8003e4c:	f000 fcae 	bl	80047ac <OLED_DrawNetInfo>
            break;
 8003e50:	e005      	b.n	8003e5e <OLED_ShowCurrentPage+0x36>
        default:
            current_page = 0;
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <OLED_ShowCurrentPage+0x40>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
            OLED_DrawABPage();
 8003e58:	f000 fab2 	bl	80043c0 <OLED_DrawABPage>
            break;
 8003e5c:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8003e5e:	f002 fa4f 	bl	8006300 <ssd1306_UpdateScreen>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20004b10 	.word	0x20004b10
 8003e6c:	20004f84 	.word	0x20004f84

08003e70 <Buttons_Process>:

void Buttons_Process(void) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af00      	add	r7, sp, #0
    static uint32_t btn1_last_action = 0;
    static uint32_t btn3_last_action = 0;
    static uint8_t btn1_held = 0;
    static uint8_t btn3_held = 0;

    uint32_t now = HAL_GetTick();
 8003e76:	f002 fda9 	bl	80069cc <HAL_GetTick>
 8003e7a:	61b8      	str	r0, [r7, #24]

    // ---- Если меню Settings активно ----
    if (settings_active) {
 8003e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800406c <Buttons_Process+0x1fc>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8103 	beq.w	800408c <Buttons_Process+0x21c>
        int any_pressed = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24

        // Обработка кнопки 3 (ПРАВАЯ кнопка - ВВЕРХ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8003e8a:	2108      	movs	r1, #8
 8003e8c:	4878      	ldr	r0, [pc, #480]	@ (8004070 <Buttons_Process+0x200>)
 8003e8e:	f005 fb91 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d13c      	bne.n	8003f12 <Buttons_Process+0xa2>
            if (!btn3_held) {
 8003e98:	4b76      	ldr	r3, [pc, #472]	@ (8004074 <Buttons_Process+0x204>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <Buttons_Process+0x46>
                // Первое нажатие
                btn3_held = 1;
 8003ea0:	4b74      	ldr	r3, [pc, #464]	@ (8004074 <Buttons_Process+0x204>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
                btn3_last_action = now;
 8003ea6:	4a74      	ldr	r2, [pc, #464]	@ (8004078 <Buttons_Process+0x208>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveUp();
 8003eac:	f001 fdd4 	bl	8005a58 <OLED_Settings_MoveUp>
                any_pressed = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb4:	e030      	b.n	8003f18 <Buttons_Process+0xa8>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn3_last_action;
 8003eb6:	4b70      	ldr	r3, [pc, #448]	@ (8004078 <Buttons_Process+0x208>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <Buttons_Process+0x60>
                    delay_ms = 20;
 8003eca:	2314      	movs	r3, #20
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e011      	b.n	8003ef4 <Buttons_Process+0x84>
                } else if (hold_time > 3000) {
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d902      	bls.n	8003ee0 <Buttons_Process+0x70>
                    delay_ms = 50;
 8003eda:	2332      	movs	r3, #50	@ 0x32
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	e009      	b.n	8003ef4 <Buttons_Process+0x84>
                } else if (hold_time > 1000) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ee6:	d902      	bls.n	8003eee <Buttons_Process+0x7e>
                    delay_ms = 100;
 8003ee8:	2364      	movs	r3, #100	@ 0x64
 8003eea:	623b      	str	r3, [r7, #32]
 8003eec:	e002      	b.n	8003ef4 <Buttons_Process+0x84>
                } else {
                    delay_ms = 300;
 8003eee:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003ef2:	623b      	str	r3, [r7, #32]
                }

                if (now - btn3_last_action > delay_ms) {
 8003ef4:	4b60      	ldr	r3, [pc, #384]	@ (8004078 <Buttons_Process+0x208>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20a      	bcs.n	8003f18 <Buttons_Process+0xa8>
                    OLED_Settings_MoveUp();
 8003f02:	f001 fda9 	bl	8005a58 <OLED_Settings_MoveUp>
                    btn3_last_action = now;
 8003f06:	4a5c      	ldr	r2, [pc, #368]	@ (8004078 <Buttons_Process+0x208>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f10:	e002      	b.n	8003f18 <Buttons_Process+0xa8>
                }
            }
        } else {
            btn3_held = 0;
 8003f12:	4b58      	ldr	r3, [pc, #352]	@ (8004074 <Buttons_Process+0x204>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 1 (ЛЕВАЯ кнопка - ВНИЗ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4855      	ldr	r0, [pc, #340]	@ (8004070 <Buttons_Process+0x200>)
 8003f1c:	f005 fb4a 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d13c      	bne.n	8003fa0 <Buttons_Process+0x130>
            if (!btn1_held) {
 8003f26:	4b55      	ldr	r3, [pc, #340]	@ (800407c <Buttons_Process+0x20c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <Buttons_Process+0xd4>
                // Первое нажатие
                btn1_held = 1;
 8003f2e:	4b53      	ldr	r3, [pc, #332]	@ (800407c <Buttons_Process+0x20c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
                btn1_last_action = now;
 8003f34:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <Buttons_Process+0x210>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveDown();
 8003f3a:	f001 fdd1 	bl	8005ae0 <OLED_Settings_MoveDown>
                any_pressed = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	e030      	b.n	8003fa6 <Buttons_Process+0x136>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn1_last_action;
 8003f44:	4b4e      	ldr	r3, [pc, #312]	@ (8004080 <Buttons_Process+0x210>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	60bb      	str	r3, [r7, #8]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d902      	bls.n	8003f5e <Buttons_Process+0xee>
                    delay_ms = 20;
 8003f58:	2314      	movs	r3, #20
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e011      	b.n	8003f82 <Buttons_Process+0x112>
                } else if (hold_time > 3000) {
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d902      	bls.n	8003f6e <Buttons_Process+0xfe>
                    delay_ms = 50;
 8003f68:	2332      	movs	r3, #50	@ 0x32
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	e009      	b.n	8003f82 <Buttons_Process+0x112>
                } else if (hold_time > 1000) {
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f74:	d902      	bls.n	8003f7c <Buttons_Process+0x10c>
                    delay_ms = 100;
 8003f76:	2364      	movs	r3, #100	@ 0x64
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e002      	b.n	8003f82 <Buttons_Process+0x112>
                } else {
                    delay_ms = 300;
 8003f7c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f80:	61fb      	str	r3, [r7, #28]
                }

                if (now - btn1_last_action > delay_ms) {
 8003f82:	4b3f      	ldr	r3, [pc, #252]	@ (8004080 <Buttons_Process+0x210>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d20a      	bcs.n	8003fa6 <Buttons_Process+0x136>
                    OLED_Settings_MoveDown();
 8003f90:	f001 fda6 	bl	8005ae0 <OLED_Settings_MoveDown>
                    btn1_last_action = now;
 8003f94:	4a3a      	ldr	r2, [pc, #232]	@ (8004080 <Buttons_Process+0x210>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9e:	e002      	b.n	8003fa6 <Buttons_Process+0x136>
                }
            }
        } else {
            btn1_held = 0;
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <Buttons_Process+0x20c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 2 (Выбор / Долгое нажатие = Назад)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	4831      	ldr	r0, [pc, #196]	@ (8004070 <Buttons_Process+0x200>)
 8003faa:	f005 fb03 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d12c      	bne.n	800400e <Buttons_Process+0x19e>
            // фиксируем момент первого нажатия (debounce)
            if (btn2_press_time == 0) {
 8003fb4:	4b33      	ldr	r3, [pc, #204]	@ (8004084 <Buttons_Process+0x214>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <Buttons_Process+0x152>
                btn2_press_time = now;
 8003fbc:	4a31      	ldr	r2, [pc, #196]	@ (8004084 <Buttons_Process+0x214>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	6013      	str	r3, [r2, #0]
            }
            HAL_Delay(20);
 8003fc2:	2014      	movs	r0, #20
 8003fc4:	f002 fd0c 	bl	80069e0 <HAL_Delay>
            if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8003fc8:	2104      	movs	r1, #4
 8003fca:	4829      	ldr	r0, [pc, #164]	@ (8004070 <Buttons_Process+0x200>)
 8003fcc:	f005 faf2 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d134      	bne.n	8004040 <Buttons_Process+0x1d0>
                uint32_t held_ms = now - btn2_press_time;
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004084 <Buttons_Process+0x214>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	603b      	str	r3, [r7, #0]
                if (held_ms >= 1000) {
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fe6:	d32b      	bcc.n	8004040 <Buttons_Process+0x1d0>
                    // долгое нажатие → назад
                    OLED_Settings_Back();
 8003fe8:	f000 ffd6 	bl	8004f98 <OLED_Settings_Back>
                    // ждём отпускания
                    while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) HAL_Delay(10);
 8003fec:	e002      	b.n	8003ff4 <Buttons_Process+0x184>
 8003fee:	200a      	movs	r0, #10
 8003ff0:	f002 fcf6 	bl	80069e0 <HAL_Delay>
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	481e      	ldr	r0, [pc, #120]	@ (8004070 <Buttons_Process+0x200>)
 8003ff8:	f005 fadc 	bl	80095b4 <HAL_GPIO_ReadPin>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f5      	beq.n	8003fee <Buttons_Process+0x17e>
                    btn2_press_time = 0;
 8004002:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <Buttons_Process+0x214>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
                    any_pressed = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	e018      	b.n	8004040 <Buttons_Process+0x1d0>
                }
            }
        } else {
            if (btn2_press_time != 0) {
 800400e:	4b1d      	ldr	r3, [pc, #116]	@ (8004084 <Buttons_Process+0x214>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <Buttons_Process+0x1d0>
                // короткое нажатие → Select
                uint32_t press_ms = HAL_GetTick() - btn2_press_time;
 8004016:	f002 fcd9 	bl	80069cc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <Buttons_Process+0x214>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	607b      	str	r3, [r7, #4]
                if (press_ms >= 50 && press_ms < 1000) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b31      	cmp	r3, #49	@ 0x31
 8004028:	d907      	bls.n	800403a <Buttons_Process+0x1ca>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004030:	d203      	bcs.n	800403a <Buttons_Process+0x1ca>
                    OLED_Settings_Select();
 8004032:	f001 fd9b 	bl	8005b6c <OLED_Settings_Select>
                    any_pressed = 1;
 8004036:	2301      	movs	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
                }
                btn2_press_time = 0;
 800403a:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <Buttons_Process+0x214>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
            }
        }

        // Обновляем таймер последней активности
        if (any_pressed) settings_last_activity = now;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <Buttons_Process+0x1dc>
 8004046:	4a10      	ldr	r2, [pc, #64]	@ (8004088 <Buttons_Process+0x218>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6013      	str	r3, [r2, #0]

        // Если прошло 10 секунд без действий → выход из настроек
        if ((now - settings_last_activity) >= 10000) {
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <Buttons_Process+0x218>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004058:	4293      	cmp	r3, r2
 800405a:	f240 80cc 	bls.w	80041f6 <Buttons_Process+0x386>
            settings_active = 0;
 800405e:	4b03      	ldr	r3, [pc, #12]	@ (800406c <Buttons_Process+0x1fc>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
            OLED_DrawABPage();
 8004064:	f000 f9ac 	bl	80043c0 <OLED_DrawABPage>
        }

        return;
 8004068:	e0c5      	b.n	80041f6 <Buttons_Process+0x386>
 800406a:	bf00      	nop
 800406c:	20004b04 	.word	0x20004b04
 8004070:	40020c00 	.word	0x40020c00
 8004074:	20004b14 	.word	0x20004b14
 8004078:	20004b18 	.word	0x20004b18
 800407c:	20004b1c 	.word	0x20004b1c
 8004080:	20004b20 	.word	0x20004b20
 8004084:	20004b08 	.word	0x20004b08
 8004088:	20004b24 	.word	0x20004b24
    }

    // ---- Режим обычного переключения страниц ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {  // Правая кнопка = предыдущая страница
 800408c:	2108      	movs	r1, #8
 800408e:	485c      	ldr	r0, [pc, #368]	@ (8004200 <Buttons_Process+0x390>)
 8004090:	f005 fa90 	bl	80095b4 <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d11f      	bne.n	80040da <Buttons_Process+0x26a>
        HAL_Delay(200);
 800409a:	20c8      	movs	r0, #200	@ 0xc8
 800409c:	f002 fca0 	bl	80069e0 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 80040a0:	2108      	movs	r1, #8
 80040a2:	4857      	ldr	r0, [pc, #348]	@ (8004200 <Buttons_Process+0x390>)
 80040a4:	f005 fa86 	bl	80095b4 <HAL_GPIO_ReadPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d115      	bne.n	80040da <Buttons_Process+0x26a>
            current_page--;
 80040ae:	4b55      	ldr	r3, [pc, #340]	@ (8004204 <Buttons_Process+0x394>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a53      	ldr	r2, [pc, #332]	@ (8004204 <Buttons_Process+0x394>)
 80040b6:	6013      	str	r3, [r2, #0]
            if (current_page < 0) current_page = 1;
 80040b8:	4b52      	ldr	r3, [pc, #328]	@ (8004204 <Buttons_Process+0x394>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da02      	bge.n	80040c6 <Buttons_Process+0x256>
 80040c0:	4b50      	ldr	r3, [pc, #320]	@ (8004204 <Buttons_Process+0x394>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 80040c6:	f7ff feaf 	bl	8003e28 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET);
 80040ca:	bf00      	nop
 80040cc:	2108      	movs	r1, #8
 80040ce:	484c      	ldr	r0, [pc, #304]	@ (8004200 <Buttons_Process+0x390>)
 80040d0:	f005 fa70 	bl	80095b4 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f8      	beq.n	80040cc <Buttons_Process+0x25c>
        }
    }

    if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {  // Левая кнопка = следующая страница
 80040da:	2102      	movs	r1, #2
 80040dc:	4848      	ldr	r0, [pc, #288]	@ (8004200 <Buttons_Process+0x390>)
 80040de:	f005 fa69 	bl	80095b4 <HAL_GPIO_ReadPin>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11f      	bne.n	8004128 <Buttons_Process+0x2b8>
        HAL_Delay(200);
 80040e8:	20c8      	movs	r0, #200	@ 0xc8
 80040ea:	f002 fc79 	bl	80069e0 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 80040ee:	2102      	movs	r1, #2
 80040f0:	4843      	ldr	r0, [pc, #268]	@ (8004200 <Buttons_Process+0x390>)
 80040f2:	f005 fa5f 	bl	80095b4 <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d115      	bne.n	8004128 <Buttons_Process+0x2b8>
            current_page++;
 80040fc:	4b41      	ldr	r3, [pc, #260]	@ (8004204 <Buttons_Process+0x394>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a40      	ldr	r2, [pc, #256]	@ (8004204 <Buttons_Process+0x394>)
 8004104:	6013      	str	r3, [r2, #0]
            if (current_page > 1) current_page = 0;
 8004106:	4b3f      	ldr	r3, [pc, #252]	@ (8004204 <Buttons_Process+0x394>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	dd02      	ble.n	8004114 <Buttons_Process+0x2a4>
 800410e:	4b3d      	ldr	r3, [pc, #244]	@ (8004204 <Buttons_Process+0x394>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8004114:	f7ff fe88 	bl	8003e28 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET);
 8004118:	bf00      	nop
 800411a:	2102      	movs	r1, #2
 800411c:	4838      	ldr	r0, [pc, #224]	@ (8004200 <Buttons_Process+0x390>)
 800411e:	f005 fa49 	bl	80095b4 <HAL_GPIO_ReadPin>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f8      	beq.n	800411a <Buttons_Process+0x2aa>
        }
    }

    // ---- Кнопка 2 (Settings / RESET) ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004128:	2104      	movs	r1, #4
 800412a:	4835      	ldr	r0, [pc, #212]	@ (8004200 <Buttons_Process+0x390>)
 800412c:	f005 fa42 	bl	80095b4 <HAL_GPIO_ReadPin>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d132      	bne.n	800419c <Buttons_Process+0x32c>
        if (!btn2_held) {
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <Buttons_Process+0x398>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <Buttons_Process+0x2e0>
            btn2_held = 1;
 800413e:	4b32      	ldr	r3, [pc, #200]	@ (8004208 <Buttons_Process+0x398>)
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
            btn2_press_time = HAL_GetTick();
 8004144:	f002 fc42 	bl	80069cc <HAL_GetTick>
 8004148:	4603      	mov	r3, r0
 800414a:	4a30      	ldr	r2, [pc, #192]	@ (800420c <Buttons_Process+0x39c>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e053      	b.n	80041f8 <Buttons_Process+0x388>
        } else {
            uint32_t held_time = (HAL_GetTick() - btn2_press_time) / 1000;
 8004150:	f002 fc3c 	bl	80069cc <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <Buttons_Process+0x39c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	4a2c      	ldr	r2, [pc, #176]	@ (8004210 <Buttons_Process+0x3a0>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	613b      	str	r3, [r7, #16]

            if (held_time >= 60) {
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b3b      	cmp	r3, #59	@ 0x3b
 800416a:	d912      	bls.n	8004192 <Buttons_Process+0x322>
                // HARD RESET через IWDG
                IWDG->KR = 0x5555;
 800416c:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <Buttons_Process+0x3a4>)
 800416e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004172:	601a      	str	r2, [r3, #0]
                IWDG->PR = 0;
 8004174:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <Buttons_Process+0x3a4>)
 8004176:	2200      	movs	r2, #0
 8004178:	605a      	str	r2, [r3, #4]
                IWDG->RLR = 10;
 800417a:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <Buttons_Process+0x3a4>)
 800417c:	220a      	movs	r2, #10
 800417e:	609a      	str	r2, [r3, #8]
                IWDG->KR = 0xAAAA;
 8004180:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <Buttons_Process+0x3a4>)
 8004182:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004186:	601a      	str	r2, [r3, #0]
                IWDG->KR = 0xCCCC;
 8004188:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <Buttons_Process+0x3a4>)
 800418a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e032      	b.n	80041f8 <Buttons_Process+0x388>
            } else if (held_time >= 30) {
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b1d      	cmp	r3, #29
 8004196:	d92f      	bls.n	80041f8 <Buttons_Process+0x388>
                // SOFT RESET
                NVIC_SystemReset();
 8004198:	f7ff fe30 	bl	8003dfc <__NVIC_SystemReset>
            }
        }
    } else {
        if (btn2_held) {
 800419c:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <Buttons_Process+0x398>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d024      	beq.n	80041ee <Buttons_Process+0x37e>
            uint32_t press_time = (HAL_GetTick() - btn2_press_time);
 80041a4:	f002 fc12 	bl	80069cc <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b18      	ldr	r3, [pc, #96]	@ (800420c <Buttons_Process+0x39c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
            if (press_time >= 50 && press_time < 1000) {
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b31      	cmp	r3, #49	@ 0x31
 80041b6:	d917      	bls.n	80041e8 <Buttons_Process+0x378>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041be:	d213      	bcs.n	80041e8 <Buttons_Process+0x378>
                // Короткое нажатие → открыть/закрыть Settings
                if (!settings_active) {
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <Buttons_Process+0x3a8>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <Buttons_Process+0x36e>
                    settings_active = 1;
 80041c8:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <Buttons_Process+0x3a8>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
                    OLED_Settings_Init();
 80041ce:	f000 fbd9 	bl	8004984 <OLED_Settings_Init>
                    settings_last_activity = HAL_GetTick();
 80041d2:	f002 fbfb 	bl	80069cc <HAL_GetTick>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a10      	ldr	r2, [pc, #64]	@ (800421c <Buttons_Process+0x3ac>)
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e004      	b.n	80041e8 <Buttons_Process+0x378>
                } else {
                    settings_active = 0;
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <Buttons_Process+0x3a8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
                    OLED_DrawABPage();
 80041e4:	f000 f8ec 	bl	80043c0 <OLED_DrawABPage>
                }
            }
            // Сбросим время нажатия, чтобы избежать двойной обработки при входе в Settings
            btn2_press_time = 0;
 80041e8:	4b08      	ldr	r3, [pc, #32]	@ (800420c <Buttons_Process+0x39c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
        }
        btn2_held = 0;
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <Buttons_Process+0x398>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e000      	b.n	80041f8 <Buttons_Process+0x388>
        return;
 80041f6:	bf00      	nop
    }
}
 80041f8:	3728      	adds	r7, #40	@ 0x28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40020c00 	.word	0x40020c00
 8004204:	20004b10 	.word	0x20004b10
 8004208:	20004b0c 	.word	0x20004b0c
 800420c:	20004b08 	.word	0x20004b08
 8004210:	10624dd3 	.word	0x10624dd3
 8004214:	40003000 	.word	0x40003000
 8004218:	20004b04 	.word	0x20004b04
 800421c:	20004b24 	.word	0x20004b24

08004220 <draw_cross>:
extern float current;

/* --- Вспомогательные функции --- */

/* Рисует крест поверх круга */
static void draw_cross(int cx, int cy, int r) {
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
    int d = (int)(r * 0.65f);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fc fd7b 	bl	8000d28 <__aeabi_i2f>
 8004232:	4603      	mov	r3, r0
 8004234:	4923      	ldr	r1, [pc, #140]	@ (80042c4 <draw_cross+0xa4>)
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc fdca 	bl	8000dd0 <__aeabi_fmul>
 800423c:	4603      	mov	r3, r0
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc ffa2 	bl	8001188 <__aeabi_f2iz>
 8004244:	4603      	mov	r3, r0
 8004246:	617b      	str	r3, [r7, #20]
    ssd1306_Line(cx - d, cy - d, cx + d, cy + d, White);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	b2d8      	uxtb	r0, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	b2d9      	uxtb	r1, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4413      	add	r3, r2
 800426a:	b2dc      	uxtb	r4, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	4413      	add	r3, r2
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2201      	movs	r2, #1
 800427a:	9200      	str	r2, [sp, #0]
 800427c:	4622      	mov	r2, r4
 800427e:	f002 f987 	bl	8006590 <ssd1306_Line>
    ssd1306_Line(cx - d, cy + d, cx + d, cy - d, White);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b2d8      	uxtb	r0, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	4413      	add	r3, r2
 8004298:	b2d9      	uxtb	r1, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	b2dc      	uxtb	r4, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2201      	movs	r2, #1
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	4622      	mov	r2, r4
 80042b8:	f002 f96a 	bl	8006590 <ssd1306_Line>
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	3f266666 	.word	0x3f266666

080042c8 <draw_centered_char>:

/* Центрированный символ */
static void draw_centered_char(int cx, int cy, char ch, const SSD1306_Font_t *font) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	@ 0x30
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
    char s[2] = { ch, '\0' };
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	753b      	strb	r3, [r7, #20]
 80042dc:	2300      	movs	r3, #0
 80042de:	757b      	strb	r3, [r7, #21]
    int fw = font->width;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	61fb      	str	r3, [r7, #28]
    int fh = font->height;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	61bb      	str	r3, [r7, #24]
    int x = cx - fw / 2;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	0fda      	lsrs	r2, r3, #31
 80042f0:	4413      	add	r3, r2
 80042f2:	105b      	asrs	r3, r3, #1
 80042f4:	425b      	negs	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = cy - fh / 2;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	0fda      	lsrs	r2, r3, #31
 8004302:	4413      	add	r3, r2
 8004304:	105b      	asrs	r3, r3, #1
 8004306:	425b      	negs	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	623b      	str	r3, [r7, #32]
    if (x < 0) x = 0;
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	da01      	bge.n	800431a <draw_centered_char+0x52>
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) y = 0;
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	da01      	bge.n	8004324 <draw_centered_char+0x5c>
 8004320:	2300      	movs	r3, #0
 8004322:	623b      	str	r3, [r7, #32]
    ssd1306_SetCursor((uint8_t)x, (uint8_t)y);
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	b2db      	uxtb	r3, r3
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f002 f916 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(s, *font, White);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f107 0014 	add.w	r0, r7, #20
 800433a:	2201      	movs	r2, #1
 800433c:	9200      	str	r2, [sp, #0]
 800433e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004340:	f002 f8e8 	bl	8006514 <ssd1306_WriteString>
}
 8004344:	bf00      	nop
 8004346:	3728      	adds	r7, #40	@ 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <draw_input_circle>:

/* Кружок с буквой. Если нет входа — крест. Если активный — двойной круг */
static void draw_input_circle(int cx, int cy, char label, uint8_t hasInput, uint8_t isActive) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	460b      	mov	r3, r1
 800435c:	71fb      	strb	r3, [r7, #7]
 800435e:	4613      	mov	r3, r2
 8004360:	71bb      	strb	r3, [r7, #6]
    const int r = 12;
 8004362:	230c      	movs	r3, #12
 8004364:	617b      	str	r3, [r7, #20]
    ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)r, White);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	b2d8      	uxtb	r0, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	b2d9      	uxtb	r1, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	2301      	movs	r3, #1
 8004374:	f002 f978 	bl	8006668 <ssd1306_DrawCircle>

    // буква всегда рисуется
    draw_centered_char(cx, cy, label, &Font_11x18);
 8004378:	79fa      	ldrb	r2, [r7, #7]
 800437a:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <draw_input_circle+0x70>)
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff ffa2 	bl	80042c8 <draw_centered_char>

    if (!hasInput) {
 8004384:	79bb      	ldrb	r3, [r7, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <draw_input_circle+0x4a>
        draw_cross(cx, cy, r);
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff46 	bl	8004220 <draw_cross>
    } else if (isActive) {
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
    }
}
 8004394:	e00e      	b.n	80043b4 <draw_input_circle+0x68>
    } else if (isActive) {
 8004396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <draw_input_circle+0x68>
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	b2d8      	uxtb	r0, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	b2d9      	uxtb	r1, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	3303      	adds	r3, #3
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	2301      	movs	r3, #1
 80043b0:	f002 f95a 	bl	8006668 <ssd1306_DrawCircle>
}
 80043b4:	bf00      	nop
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	080295a0 	.word	0x080295a0

080043c0 <OLED_DrawABPage>:

/* --- Главная функция --- */
void OLED_DrawABPage(void) {
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b0a5      	sub	sp, #148	@ 0x94
 80043c4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f001 ff82 	bl	80062d0 <ssd1306_Fill>

    const int SW = SSD1306_ROTATED_WIDTH;   // 64
 80043cc:	2340      	movs	r3, #64	@ 0x40
 80043ce:	677b      	str	r3, [r7, #116]	@ 0x74
    const int SH = SSD1306_ROTATED_HEIGHT;  // 128
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	673b      	str	r3, [r7, #112]	@ 0x70

    // Заголовок сверху - БОЛЬШИМИ БУКВАМИ ДЛЯ ТЕСТА
    const char title[] = "BONCH-ATS";
 80043d4:	4a72      	ldr	r2, [pc, #456]	@ (80045a0 <OLED_DrawABPage+0x1e0>)
 80043d6:	f107 0320 	add.w	r3, r7, #32
 80043da:	ca07      	ldmia	r2, {r0, r1, r2}
 80043dc:	c303      	stmia	r3!, {r0, r1}
 80043de:	801a      	strh	r2, [r3, #0]
    const SSD1306_Font_t *title_font = &Font_7x10;
 80043e0:	4b70      	ldr	r3, [pc, #448]	@ (80045a4 <OLED_DrawABPage+0x1e4>)
 80043e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int title_x = (SW / 2) - ((int)strlen(title) * title_font->width / 2);
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	0fda      	lsrs	r2, r3, #31
 80043e8:	4413      	add	r3, r2
 80043ea:	105b      	asrs	r3, r3, #1
 80043ec:	4619      	mov	r1, r3
 80043ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	0fda      	lsrs	r2, r3, #31
 80043fc:	4413      	add	r3, r2
 80043fe:	105b      	asrs	r3, r3, #1
 8004400:	425b      	negs	r3, r3
 8004402:	440b      	add	r3, r1
 8004404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (title_x < 0) title_x = 0;
 8004408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800440c:	2b00      	cmp	r3, #0
 800440e:	da02      	bge.n	8004416 <OLED_DrawABPage+0x56>
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ssd1306_SetCursor(title_x, 2);
 8004416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f002 f89e 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *title_font, White);
 8004424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004426:	f107 0020 	add.w	r0, r7, #32
 800442a:	2201      	movs	r2, #1
 800442c:	9200      	str	r2, [sp, #0]
 800442e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004430:	f002 f870 	bl	8006514 <ssd1306_WriteString>
    int title_bottom = 2 + title_font->height;
 8004434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	3302      	adds	r3, #2
 800443a:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Нижний блок (U/I/P)
    const SSD1306_Font_t *fval = &Font_7x10;
 800443c:	4b59      	ldr	r3, [pc, #356]	@ (80045a4 <OLED_DrawABPage+0x1e4>)
 800443e:	667b      	str	r3, [r7, #100]	@ 0x64
    const int fh = fval->height;   // ~10
 8004440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	663b      	str	r3, [r7, #96]	@ 0x60
    const int vpad = 4;
 8004446:	2304      	movs	r3, #4
 8004448:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int box_x = 2;
 800444a:	2302      	movs	r3, #2
 800444c:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int lines = 3;
 800444e:	2303      	movs	r3, #3
 8004450:	657b      	str	r3, [r7, #84]	@ 0x54
    const int box_h = (fh * lines) + (vpad * (lines + 1));
 8004452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004454:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004456:	fb03 f202 	mul.w	r2, r3, r2
 800445a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445c:	3301      	adds	r3, #1
 800445e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	653b      	str	r3, [r7, #80]	@ 0x50
    const int box_w = SW - 4;
 8004468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446a:	3b04      	subs	r3, #4
 800446c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int box_y = SH - box_h - 4;
 800446e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	3b04      	subs	r3, #4
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
    int data_top = box_y;
 8004478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800447a:	647b      	str	r3, [r7, #68]	@ 0x44

    // Параметры входов
    uint8_t hasA = (voltage1 > ABPAGE_VOLTAGE_THRESHOLD);
 800447c:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <OLED_DrawABPage+0x1e8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	4614      	mov	r4, r2
 8004484:	4949      	ldr	r1, [pc, #292]	@ (80045ac <OLED_DrawABPage+0x1ec>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fe5e 	bl	8001148 <__aeabi_fcmpgt>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <OLED_DrawABPage+0xd6>
 8004492:	2300      	movs	r3, #0
 8004494:	461c      	mov	r4, r3
 8004496:	b2e3      	uxtb	r3, r4
 8004498:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t hasB = (voltage2 > ABPAGE_VOLTAGE_THRESHOLD);
 800449c:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <OLED_DrawABPage+0x1f0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	4614      	mov	r4, r2
 80044a4:	4941      	ldr	r1, [pc, #260]	@ (80045ac <OLED_DrawABPage+0x1ec>)
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc fe4e 	bl	8001148 <__aeabi_fcmpgt>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <OLED_DrawABPage+0xf6>
 80044b2:	2300      	movs	r3, #0
 80044b4:	461c      	mov	r4, r3
 80044b6:	b2e3      	uxtb	r3, r4
 80044b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    uint8_t activeA = 0, activeB = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    if (hasA && hasB) activeA = 1;     // A приоритет
 80044c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <OLED_DrawABPage+0x120>
 80044d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <OLED_DrawABPage+0x120>
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80044de:	e00e      	b.n	80044fe <OLED_DrawABPage+0x13e>
    else if (hasA) activeA = 1;
 80044e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <OLED_DrawABPage+0x130>
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80044ee:	e006      	b.n	80044fe <OLED_DrawABPage+0x13e>
    else if (hasB) activeB = 1;
 80044f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <OLED_DrawABPage+0x13e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

    // Кружки A и B — по центру между заголовком и блоком данных
    // ЯВНО СДВИГАЕМ ВНИЗ НА 10 ПИКСЕЛЕЙ ДЛЯ ТЕСТА
    int center_y = title_bottom + 10 + ((data_top - title_bottom - 10) / 2);
 80044fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004500:	f103 020a 	add.w	r2, r3, #10
 8004504:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004508:	1acb      	subs	r3, r1, r3
 800450a:	3b0a      	subs	r3, #10
 800450c:	0fd9      	lsrs	r1, r3, #31
 800450e:	440b      	add	r3, r1
 8004510:	105b      	asrs	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int ax = SW / 4;
 8004516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004518:	2b00      	cmp	r3, #0
 800451a:	da00      	bge.n	800451e <OLED_DrawABPage+0x15e>
 800451c:	3303      	adds	r3, #3
 800451e:	109b      	asrs	r3, r3, #2
 8004520:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int bx = (SW * 3) / 4;
 8004522:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	da00      	bge.n	8004530 <OLED_DrawABPage+0x170>
 800452e:	3303      	adds	r3, #3
 8004530:	109b      	asrs	r3, r3, #2
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34

    draw_input_circle(ax, center_y, 'A', hasA, activeA);
 8004534:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004538:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	2241      	movs	r2, #65	@ 0x41
 8004542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004544:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004546:	f7ff ff01 	bl	800434c <draw_input_circle>
    draw_input_circle(bx, center_y, 'B', hasB, activeB);
 800454a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800454e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	2242      	movs	r2, #66	@ 0x42
 8004558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800455a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800455c:	f7ff fef6 	bl	800434c <draw_input_circle>

    // Рисуем нижний блок
    ssd1306_DrawRectangle(box_x, box_y, box_x + box_w, box_y + box_h, White);
 8004560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004562:	b2d8      	uxtb	r0, r3
 8004564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800456a:	b2da      	uxtb	r2, r3
 800456c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4413      	add	r3, r2
 8004572:	b2dc      	uxtb	r4, r3
 8004574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004576:	b2da      	uxtb	r2, r3
 8004578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4413      	add	r3, r2
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2201      	movs	r2, #1
 8004582:	9200      	str	r2, [sp, #0]
 8004584:	4622      	mov	r2, r4
 8004586:	f002 f8f6 	bl	8006776 <ssd1306_DrawRectangle>

    // Значения
    float u_work = 0.0f;
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (activeA) u_work = voltage1;
 8004590:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <OLED_DrawABPage+0x1f4>
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <OLED_DrawABPage+0x1e8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800459e:	e010      	b.n	80045c2 <OLED_DrawABPage+0x202>
 80045a0:	08025220 	.word	0x08025220
 80045a4:	08029594 	.word	0x08029594
 80045a8:	20004ab4 	.word	0x20004ab4
 80045ac:	41a00000 	.word	0x41a00000
 80045b0:	20004ab8 	.word	0x20004ab8
    else if (activeB) u_work = voltage2;
 80045b4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <OLED_DrawABPage+0x202>
 80045bc:	4b48      	ldr	r3, [pc, #288]	@ (80046e0 <OLED_DrawABPage+0x320>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Округление мощности до целых - ТЕПЕРЬ ТОЧНО БЕЗ ДРОБНОЙ ЧАСТИ
    int power_int = (int)(current * u_work);
 80045c2:	4b48      	ldr	r3, [pc, #288]	@ (80046e4 <OLED_DrawABPage+0x324>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fc01 	bl	8000dd0 <__aeabi_fmul>
 80045ce:	4603      	mov	r3, r0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fc fdd9 	bl	8001188 <__aeabi_f2iz>
 80045d6:	4603      	mov	r3, r0
 80045d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (current * u_work - power_int >= 0.5) power_int++; // Правильное округление
 80045da:	4b42      	ldr	r3, [pc, #264]	@ (80046e4 <OLED_DrawABPage+0x324>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc fbf5 	bl	8000dd0 <__aeabi_fmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461c      	mov	r4, r3
 80045ea:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80045ec:	f7fc fb9c 	bl	8000d28 <__aeabi_i2f>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4619      	mov	r1, r3
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7fc fae1 	bl	8000bbc <__aeabi_fsub>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fd97 	bl	8001134 <__aeabi_fcmpge>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <OLED_DrawABPage+0x252>
 800460c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800460e:	3301      	adds	r3, #1
 8004610:	67bb      	str	r3, [r7, #120]	@ 0x78

    char buf[32];
    int text_x = box_x + 4;
 8004612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004614:	3304      	adds	r3, #4
 8004616:	633b      	str	r3, [r7, #48]	@ 0x30
    int y = box_y + vpad;
 8004618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800461a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461c:	4413      	add	r3, r2
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // ИЗМЕНИЛ ФОРМАТ ДЛЯ ТЕСТА - БОЛЬШИЕ БУКВЫ
    snprintf(buf, sizeof(buf), "U=%.1fV", u_work);
 8004620:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004622:	f7fb ff47 	bl	80004b4 <__aeabi_f2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4638      	mov	r0, r7
 800462c:	e9cd 2300 	strd	r2, r3, [sp]
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <OLED_DrawABPage+0x328>)
 8004632:	2120      	movs	r1, #32
 8004634:	f01d fe7a 	bl	802232c <sniprintf>
    ssd1306_SetCursor(text_x, y);
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	b2db      	uxtb	r3, r3
 800463c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 ff8c 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8004648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464a:	4638      	mov	r0, r7
 800464c:	2201      	movs	r2, #1
 800464e:	9200      	str	r2, [sp, #0]
 8004650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004652:	f001 ff5f 	bl	8006514 <ssd1306_WriteString>

    y += fh + vpad;
 8004656:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800465a:	4413      	add	r3, r2
 800465c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465e:	4413      	add	r3, r2
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buf, sizeof(buf), "I=%.1f A", current);
 8004662:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <OLED_DrawABPage+0x324>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb ff24 	bl	80004b4 <__aeabi_f2d>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4638      	mov	r0, r7
 8004672:	e9cd 2300 	strd	r2, r3, [sp]
 8004676:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <OLED_DrawABPage+0x32c>)
 8004678:	2120      	movs	r1, #32
 800467a:	f01d fe57 	bl	802232c <sniprintf>
    ssd1306_SetCursor(text_x, y);
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	b2db      	uxtb	r3, r3
 8004682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f001 ff69 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 800468e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004690:	4638      	mov	r0, r7
 8004692:	2201      	movs	r2, #1
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004698:	f001 ff3c 	bl	8006514 <ssd1306_WriteString>

    y += fh + vpad;
 800469c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800469e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a0:	4413      	add	r3, r2
 80046a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a4:	4413      	add	r3, r2
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // ЯВНОЕ ИЗМЕНЕНИЕ - ЦЕЛОЕ ЧИСЛО БЕЗ ТОЧКИ
    snprintf(buf, sizeof(buf), "P=%d W", power_int);
 80046a8:	4638      	mov	r0, r7
 80046aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ac:	4a10      	ldr	r2, [pc, #64]	@ (80046f0 <OLED_DrawABPage+0x330>)
 80046ae:	2120      	movs	r1, #32
 80046b0:	f01d fe3c 	bl	802232c <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 ff4e 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80046c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c6:	4638      	mov	r0, r7
 80046c8:	2201      	movs	r2, #1
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ce:	f001 ff21 	bl	8006514 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80046d2:	f001 fe15 	bl	8006300 <ssd1306_UpdateScreen>
}
 80046d6:	bf00      	nop
 80046d8:	378c      	adds	r7, #140	@ 0x8c
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd90      	pop	{r4, r7, pc}
 80046de:	bf00      	nop
 80046e0:	20004ab8 	.word	0x20004ab8
 80046e4:	20004abc 	.word	0x20004abc
 80046e8:	08025204 	.word	0x08025204
 80046ec:	0802520c 	.word	0x0802520c
 80046f0:	08025218 	.word	0x08025218

080046f4 <OLED_DrawIP_Split>:
 *
 * @param x   позиция курсора X
 * @param y   позиция курсора Y
 * @param addr указатель на ip4_addr_t
 */
void OLED_DrawIP_Split(uint8_t x, uint8_t y, const ip4_addr_t *addr) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	4603      	mov	r3, r0
 80046fc:	603a      	str	r2, [r7, #0]
 80046fe:	71fb      	strb	r3, [r7, #7]
 8004700:	460b      	mov	r3, r1
 8004702:	71bb      	strb	r3, [r7, #6]
    char line[20];

    if (!addr) return;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d045      	beq.n	8004796 <OLED_DrawIP_Split+0xa2>

    uint8_t o1 = ip4_addr1_16(addr);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	77fb      	strb	r3, [r7, #31]
    uint8_t o2 = ip4_addr2_16(addr);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	77bb      	strb	r3, [r7, #30]
    uint8_t o3 = ip4_addr3_16(addr);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	3302      	adds	r3, #2
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	777b      	strb	r3, [r7, #29]
    uint8_t o4 = ip4_addr4_16(addr);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	3303      	adds	r3, #3
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	773b      	strb	r3, [r7, #28]

    // Вторая строка: первые два октета
    snprintf(line, sizeof(line), "%u.%u.", o1, o2);
 8004728:	7ffa      	ldrb	r2, [r7, #31]
 800472a:	7fbb      	ldrb	r3, [r7, #30]
 800472c:	f107 0008 	add.w	r0, r7, #8
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <OLED_DrawIP_Split+0xac>)
 8004736:	2114      	movs	r1, #20
 8004738:	f01d fdf8 	bl	802232c <sniprintf>
    ssd1306_SetCursor(x, y);
 800473c:	79ba      	ldrb	r2, [r7, #6]
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f001 ff0c 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8004748:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <OLED_DrawIP_Split+0xb0>)
 800474a:	f107 0008 	add.w	r0, r7, #8
 800474e:	2201      	movs	r2, #1
 8004750:	9200      	str	r2, [sp, #0]
 8004752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004754:	f001 fede 	bl	8006514 <ssd1306_WriteString>

    // Третья строка: последние два октета
    snprintf(line, sizeof(line), "%u.%u", o3, o4);
 8004758:	7f7a      	ldrb	r2, [r7, #29]
 800475a:	7f3b      	ldrb	r3, [r7, #28]
 800475c:	f107 0008 	add.w	r0, r7, #8
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <OLED_DrawIP_Split+0xb4>)
 8004766:	2114      	movs	r1, #20
 8004768:	f01d fde0 	bl	802232c <sniprintf>
    ssd1306_SetCursor(x, y + Font_7x10.height + 2);
 800476c:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <OLED_DrawIP_Split+0xb0>)
 800476e:	785a      	ldrb	r2, [r3, #1]
 8004770:	79bb      	ldrb	r3, [r7, #6]
 8004772:	4413      	add	r3, r2
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3302      	adds	r3, #2
 8004778:	b2da      	uxtb	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f001 feee 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8004784:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <OLED_DrawIP_Split+0xb0>)
 8004786:	f107 0008 	add.w	r0, r7, #8
 800478a:	2201      	movs	r2, #1
 800478c:	9200      	str	r2, [sp, #0]
 800478e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004790:	f001 fec0 	bl	8006514 <ssd1306_WriteString>
 8004794:	e000      	b.n	8004798 <OLED_DrawIP_Split+0xa4>
    if (!addr) return;
 8004796:	bf00      	nop
}
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	0802522c 	.word	0x0802522c
 80047a4:	08029594 	.word	0x08029594
 80047a8:	08025234 	.word	0x08025234

080047ac <OLED_DrawNetInfo>:
 *
 * @param netif  структура сетевого интерфейса LwIP
 * @param startX начальная позиция X
 * @param startY начальная позиция Y
 */
void OLED_DrawNetInfo(struct netif *netif, uint8_t startX, uint8_t startY) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b096      	sub	sp, #88	@ 0x58
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
 80047b8:	4613      	mov	r3, r2
 80047ba:	70bb      	strb	r3, [r7, #2]
	char buffer[64];
	uint8_t lineY = startY;
 80047bc:	78bb      	ldrb	r3, [r7, #2]
 80047be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ssd1306_Fill(Black);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f001 fd84 	bl	80062d0 <ssd1306_Fill>

    ssd1306_SetCursor(startX, startY);
 80047c8:	78ba      	ldrb	r2, [r7, #2]
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fec6 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("NETINF", Font_7x10, White);
 80047d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	9200      	str	r2, [sp, #0]
 80047da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047dc:	485a      	ldr	r0, [pc, #360]	@ (8004948 <OLED_DrawNetInfo+0x19c>)
 80047de:	f001 fe99 	bl	8006514 <ssd1306_WriteString>

    // Полоса под заголовком
    ssd1306_DrawRectangle(0, startY + Font_7x10.height + 1, SSD1306_ROTATED_WIDTH-1, startY + Font_7x10.height + 2, White);
 80047e2:	4b58      	ldr	r3, [pc, #352]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 80047e4:	785a      	ldrb	r2, [r3, #1]
 80047e6:	78bb      	ldrb	r3, [r7, #2]
 80047e8:	4413      	add	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	b2d9      	uxtb	r1, r3
 80047f0:	4b54      	ldr	r3, [pc, #336]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 80047f2:	785a      	ldrb	r2, [r3, #1]
 80047f4:	78bb      	ldrb	r3, [r7, #2]
 80047f6:	4413      	add	r3, r2
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3302      	adds	r3, #2
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	9200      	str	r2, [sp, #0]
 8004802:	223f      	movs	r2, #63	@ 0x3f
 8004804:	2000      	movs	r0, #0
 8004806:	f001 ffb6 	bl	8006776 <ssd1306_DrawRectangle>

    // IP
    lineY = startY + Font_7x10.height + 6;
 800480a:	4b4e      	ldr	r3, [pc, #312]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 800480c:	785a      	ldrb	r2, [r3, #1]
 800480e:	78bb      	ldrb	r3, [r7, #2]
 8004810:	4413      	add	r3, r2
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3306      	adds	r3, #6
 8004816:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 800481a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f001 fe9c 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", Font_7x10, White);
 8004828:	4b46      	ldr	r3, [pc, #280]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 800482a:	2201      	movs	r2, #1
 800482c:	9200      	str	r2, [sp, #0]
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	4846      	ldr	r0, [pc, #280]	@ (800494c <OLED_DrawNetInfo+0x1a0>)
 8004832:	f001 fe6f 	bl	8006514 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX , lineY + Font_7x10.height + 2, netif_ip4_addr(netif));
 8004836:	4b43      	ldr	r3, [pc, #268]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 8004838:	785a      	ldrb	r2, [r3, #1]
 800483a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800483e:	4413      	add	r3, r2
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3302      	adds	r3, #2
 8004844:	b2d9      	uxtb	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff51 	bl	80046f4 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 8004852:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	3301      	adds	r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	0052      	lsls	r2, r2, #1
 800485e:	4413      	add	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004866:	4413      	add	r3, r2
 8004868:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 800486c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004870:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8004874:	2201      	movs	r2, #1
 8004876:	9200      	str	r2, [sp, #0]
 8004878:	223f      	movs	r2, #63	@ 0x3f
 800487a:	2000      	movs	r0, #0
 800487c:	f001 ff7b 	bl	8006776 <ssd1306_DrawRectangle>

    // MASK
    lineY += 4;
 8004880:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004884:	3304      	adds	r3, #4
 8004886:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 800488a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fe64 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("MASK:", Font_7x10, White);
 8004898:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 800489a:	2201      	movs	r2, #1
 800489c:	9200      	str	r2, [sp, #0]
 800489e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048a0:	482b      	ldr	r0, [pc, #172]	@ (8004950 <OLED_DrawNetInfo+0x1a4>)
 80048a2:	f001 fe37 	bl	8006514 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_netmask(netif));
 80048a6:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 80048a8:	785a      	ldrb	r2, [r3, #1]
 80048aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048ae:	4413      	add	r3, r2
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	3302      	adds	r3, #2
 80048b4:	b2d9      	uxtb	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 0208 	add.w	r2, r3, #8
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff18 	bl	80046f4 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 80048c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	3301      	adds	r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	0052      	lsls	r2, r2, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048d8:	4413      	add	r3, r2
 80048da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 80048de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048e2:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80048e6:	2201      	movs	r2, #1
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	223f      	movs	r2, #63	@ 0x3f
 80048ec:	2000      	movs	r0, #0
 80048ee:	f001 ff42 	bl	8006776 <ssd1306_DrawRectangle>

    // GW
    lineY += 4;
 80048f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048f6:	3304      	adds	r3, #4
 80048f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 80048fc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fe2b 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("GW:", Font_7x10, White);
 800490a:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 800490c:	2201      	movs	r2, #1
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004912:	4810      	ldr	r0, [pc, #64]	@ (8004954 <OLED_DrawNetInfo+0x1a8>)
 8004914:	f001 fdfe 	bl	8006514 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_gw(netif));
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <OLED_DrawNetInfo+0x198>)
 800491a:	785a      	ldrb	r2, [r3, #1]
 800491c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004920:	4413      	add	r3, r2
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3302      	adds	r3, #2
 8004926:	b2d9      	uxtb	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f103 020c 	add.w	r2, r3, #12
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fedf 	bl	80046f4 <OLED_DrawIP_Split>
    // отправить буфер на дисплей
    ssd1306_UpdateScreen();
 8004936:	f001 fce3 	bl	8006300 <ssd1306_UpdateScreen>
}
 800493a:	bf00      	nop
 800493c:	3750      	adds	r7, #80	@ 0x50
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08029594 	.word	0x08029594
 8004948:	0802523c 	.word	0x0802523c
 800494c:	08025244 	.word	0x08025244
 8004950:	08025248 	.word	0x08025248
 8004954:	08025250 	.word	0x08025250

08004958 <__NVIC_SystemReset>:
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800495c:	f3bf 8f4f 	dsb	sy
}
 8004960:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004962:	4b06      	ldr	r3, [pc, #24]	@ (800497c <__NVIC_SystemReset+0x24>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800496a:	4904      	ldr	r1, [pc, #16]	@ (800497c <__NVIC_SystemReset+0x24>)
 800496c:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <__NVIC_SystemReset+0x28>)
 800496e:	4313      	orrs	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004972:	f3bf 8f4f 	dsb	sy
}
 8004976:	bf00      	nop
    __NOP();
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <__NVIC_SystemReset+0x20>
 800497c:	e000ed00 	.word	0xe000ed00
 8004980:	05fa0004 	.word	0x05fa0004

08004984 <OLED_Settings_Init>:
static ConfirmType confirm_type = CONFIRM_NONE;
// Pending values to apply after confirmation

// Инициализация меню
void OLED_Settings_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
    selected_index = 0;
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <OLED_Settings_Init+0x40>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    editing_active = false;
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <OLED_Settings_Init+0x44>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8004994:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <OLED_Settings_Init+0x48>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
    settings_active = true;
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <OLED_Settings_Init+0x4c>)
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 80049a0:	f002 f814 	bl	80069cc <HAL_GetTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4a0b      	ldr	r2, [pc, #44]	@ (80049d4 <OLED_Settings_Init+0x50>)
 80049a8:	6013      	str	r3, [r2, #0]
    submenu_active = false;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <OLED_Settings_Init+0x54>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
    submenu_type = SUBMENU_NONE;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <OLED_Settings_Init+0x58>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
    // Подтягиваем актуальные IP/Mask/GW из сетевого интерфейса
    Sync_From_Netif();
 80049b6:	f000 fa29 	bl	8004e0c <Sync_From_Netif>
    OLED_Settings_Draw();
 80049ba:	f000 fe73 	bl	80056a4 <OLED_Settings_Draw>
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20004b28 	.word	0x20004b28
 80049c8:	20004b30 	.word	0x20004b30
 80049cc:	20004b39 	.word	0x20004b39
 80049d0:	20004b04 	.word	0x20004b04
 80049d4:	20004b34 	.word	0x20004b34
 80049d8:	20004b41 	.word	0x20004b41
 80049dc:	20004b40 	.word	0x20004b40

080049e0 <OLED_Draw_Confirm>:

// --- Отображение меню подтверждения ---
static void OLED_Draw_Confirm(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80049e6:	2000      	movs	r0, #0
 80049e8:	f001 fc72 	bl	80062d0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80049ec:	2340      	movs	r3, #64	@ 0x40
 80049ee:	617b      	str	r3, [r7, #20]

    // Заголовок
    ssd1306_SetCursor(0, 2);
 80049f0:	2102      	movs	r1, #2
 80049f2:	2000      	movs	r0, #0
 80049f4:	f001 fdb4 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("Confirm", *menu_font, White);
 80049f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2201      	movs	r2, #1
 80049fe:	9200      	str	r2, [sp, #0]
 8004a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a02:	489a      	ldr	r0, [pc, #616]	@ (8004c6c <OLED_Draw_Confirm+0x28c>)
 8004a04:	f001 fd86 	bl	8006514 <ssd1306_WriteString>

    // Подзаголовок и содержимое в зависимости от типа подтверждения
    char line[16];
    switch (confirm_type) {
 8004a08:	4b99      	ldr	r3, [pc, #612]	@ (8004c70 <OLED_Draw_Confirm+0x290>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	f200 8121 	bhi.w	8004c56 <OLED_Draw_Confirm+0x276>
 8004a14:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <OLED_Draw_Confirm+0x3c>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a39 	.word	0x08004a39
 8004a20:	08004ab3 	.word	0x08004ab3
 8004a24:	08004b2d 	.word	0x08004b2d
 8004a28:	08004ba7 	.word	0x08004ba7
 8004a2c:	08004bc1 	.word	0x08004bc1
 8004a30:	08004bdb 	.word	0x08004bdb
 8004a34:	08004c0d 	.word	0x08004c0d
        case CONFIRM_APPLY_IP: {
            ssd1306_SetCursor(0, 14);
 8004a38:	210e      	movs	r1, #14
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f001 fd90 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply IP", *menu_font, White);
 8004a40:	4b89      	ldr	r3, [pc, #548]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	9200      	str	r2, [sp, #0]
 8004a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a4a:	488a      	ldr	r0, [pc, #552]	@ (8004c74 <OLED_Draw_Confirm+0x294>)
 8004a4c:	f001 fd62 	bl	8006514 <ssd1306_WriteString>

            // Показ значения IP в две строки (192.168. / x.y)
            snprintf(line, sizeof(line), "%d.%d.", last_ip[0], last_ip[1]);
 8004a50:	4b89      	ldr	r3, [pc, #548]	@ (8004c78 <OLED_Draw_Confirm+0x298>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b88      	ldr	r3, [pc, #544]	@ (8004c78 <OLED_Draw_Confirm+0x298>)
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	1d38      	adds	r0, r7, #4
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	4a86      	ldr	r2, [pc, #536]	@ (8004c7c <OLED_Draw_Confirm+0x29c>)
 8004a62:	2110      	movs	r1, #16
 8004a64:	f01d fc62 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004a68:	211c      	movs	r1, #28
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f001 fd78 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004a70:	4b7d      	ldr	r3, [pc, #500]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1d38      	adds	r0, r7, #4
 8004a76:	2201      	movs	r2, #1
 8004a78:	9200      	str	r2, [sp, #0]
 8004a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a7c:	f001 fd4a 	bl	8006514 <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_ip[2], last_ip[3]);
 8004a80:	4b7d      	ldr	r3, [pc, #500]	@ (8004c78 <OLED_Draw_Confirm+0x298>)
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b7c      	ldr	r3, [pc, #496]	@ (8004c78 <OLED_Draw_Confirm+0x298>)
 8004a88:	78db      	ldrb	r3, [r3, #3]
 8004a8a:	1d38      	adds	r0, r7, #4
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	4a7b      	ldr	r2, [pc, #492]	@ (8004c80 <OLED_Draw_Confirm+0x2a0>)
 8004a92:	2110      	movs	r1, #16
 8004a94:	f01d fc4a 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004a98:	2128      	movs	r1, #40	@ 0x28
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f001 fd60 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004aa0:	4b71      	ldr	r3, [pc, #452]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1d38      	adds	r0, r7, #4
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	9200      	str	r2, [sp, #0]
 8004aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aac:	f001 fd32 	bl	8006514 <ssd1306_WriteString>
            break;
 8004ab0:	e0d2      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_APPLY_MASK: {
            ssd1306_SetCursor(0, 14);
 8004ab2:	210e      	movs	r1, #14
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f001 fd53 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply msk", *menu_font, White);
 8004aba:	4b6b      	ldr	r3, [pc, #428]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac4:	486f      	ldr	r0, [pc, #444]	@ (8004c84 <OLED_Draw_Confirm+0x2a4>)
 8004ac6:	f001 fd25 	bl	8006514 <ssd1306_WriteString>

            snprintf(line, sizeof(line), "%d.%d.", last_mask[0], last_mask[1]);
 8004aca:	4b6f      	ldr	r3, [pc, #444]	@ (8004c88 <OLED_Draw_Confirm+0x2a8>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <OLED_Draw_Confirm+0x2a8>)
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	1d38      	adds	r0, r7, #4
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	4a68      	ldr	r2, [pc, #416]	@ (8004c7c <OLED_Draw_Confirm+0x29c>)
 8004adc:	2110      	movs	r1, #16
 8004ade:	f01d fc25 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004ae2:	211c      	movs	r1, #28
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f001 fd3b 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004aea:	4b5f      	ldr	r3, [pc, #380]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1d38      	adds	r0, r7, #4
 8004af0:	2201      	movs	r2, #1
 8004af2:	9200      	str	r2, [sp, #0]
 8004af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af6:	f001 fd0d 	bl	8006514 <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_mask[2], last_mask[3]);
 8004afa:	4b63      	ldr	r3, [pc, #396]	@ (8004c88 <OLED_Draw_Confirm+0x2a8>)
 8004afc:	789b      	ldrb	r3, [r3, #2]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b61      	ldr	r3, [pc, #388]	@ (8004c88 <OLED_Draw_Confirm+0x2a8>)
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	1d38      	adds	r0, r7, #4
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004c80 <OLED_Draw_Confirm+0x2a0>)
 8004b0c:	2110      	movs	r1, #16
 8004b0e:	f01d fc0d 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004b12:	2128      	movs	r1, #40	@ 0x28
 8004b14:	2000      	movs	r0, #0
 8004b16:	f001 fd23 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	1d38      	adds	r0, r7, #4
 8004b20:	2201      	movs	r2, #1
 8004b22:	9200      	str	r2, [sp, #0]
 8004b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b26:	f001 fcf5 	bl	8006514 <ssd1306_WriteString>
            break;
 8004b2a:	e095      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_APPLY_GW: {
            ssd1306_SetCursor(0, 14);
 8004b2c:	210e      	movs	r1, #14
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f001 fd16 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("Apply GW", *menu_font, White);
 8004b34:	4b4c      	ldr	r3, [pc, #304]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	9200      	str	r2, [sp, #0]
 8004b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b3e:	4853      	ldr	r0, [pc, #332]	@ (8004c8c <OLED_Draw_Confirm+0x2ac>)
 8004b40:	f001 fce8 	bl	8006514 <ssd1306_WriteString>

            snprintf(line, sizeof(line), "%d.%d.", last_gw[0], last_gw[1]);
 8004b44:	4b52      	ldr	r3, [pc, #328]	@ (8004c90 <OLED_Draw_Confirm+0x2b0>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b51      	ldr	r3, [pc, #324]	@ (8004c90 <OLED_Draw_Confirm+0x2b0>)
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	1d38      	adds	r0, r7, #4
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	4a49      	ldr	r2, [pc, #292]	@ (8004c7c <OLED_Draw_Confirm+0x29c>)
 8004b56:	2110      	movs	r1, #16
 8004b58:	f01d fbe8 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 28);
 8004b5c:	211c      	movs	r1, #28
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f001 fcfe 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004b64:	4b40      	ldr	r3, [pc, #256]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	1d38      	adds	r0, r7, #4
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	9200      	str	r2, [sp, #0]
 8004b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b70:	f001 fcd0 	bl	8006514 <ssd1306_WriteString>
            snprintf(line, sizeof(line), "%d.%d", last_gw[2], last_gw[3]);
 8004b74:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <OLED_Draw_Confirm+0x2b0>)
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <OLED_Draw_Confirm+0x2b0>)
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	1d38      	adds	r0, r7, #4
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	4a3e      	ldr	r2, [pc, #248]	@ (8004c80 <OLED_Draw_Confirm+0x2a0>)
 8004b86:	2110      	movs	r1, #16
 8004b88:	f01d fbd0 	bl	802232c <sniprintf>
            ssd1306_SetCursor(0, 40);
 8004b8c:	2128      	movs	r1, #40	@ 0x28
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f001 fce6 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(line, *menu_font, White);
 8004b94:	4b34      	ldr	r3, [pc, #208]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1d38      	adds	r0, r7, #4
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	9200      	str	r2, [sp, #0]
 8004b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ba0:	f001 fcb8 	bl	8006514 <ssd1306_WriteString>
            break;
 8004ba4:	e058      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_DHCP_ENABLE: {
            ssd1306_SetCursor(0, 14);
 8004ba6:	210e      	movs	r1, #14
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f001 fcd9 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("DHCP on", *menu_font, White);
 8004bae:	4b2e      	ldr	r3, [pc, #184]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb8:	4836      	ldr	r0, [pc, #216]	@ (8004c94 <OLED_Draw_Confirm+0x2b4>)
 8004bba:	f001 fcab 	bl	8006514 <ssd1306_WriteString>
            break;
 8004bbe:	e04b      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_DHCP_DISABLE: {
            ssd1306_SetCursor(0, 14);
 8004bc0:	210e      	movs	r1, #14
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f001 fccc 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("DHCP off", *menu_font, White);
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	9200      	str	r2, [sp, #0]
 8004bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bd2:	4831      	ldr	r0, [pc, #196]	@ (8004c98 <OLED_Draw_Confirm+0x2b8>)
 8004bd4:	f001 fc9e 	bl	8006514 <ssd1306_WriteString>
            break;
 8004bd8:	e03e      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_RESET_MCU: {
            ssd1306_SetCursor(0, 14);
 8004bda:	210e      	movs	r1, #14
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f001 fcbf 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("MCU will", *menu_font, White);
 8004be2:	4b21      	ldr	r3, [pc, #132]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2201      	movs	r2, #1
 8004be8:	9200      	str	r2, [sp, #0]
 8004bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bec:	482b      	ldr	r0, [pc, #172]	@ (8004c9c <OLED_Draw_Confirm+0x2bc>)
 8004bee:	f001 fc91 	bl	8006514 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 28);
 8004bf2:	211c      	movs	r1, #28
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f001 fcb3 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("reboot", *menu_font, White);
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c04:	4826      	ldr	r0, [pc, #152]	@ (8004ca0 <OLED_Draw_Confirm+0x2c0>)
 8004c06:	f001 fc85 	bl	8006514 <ssd1306_WriteString>
            break;
 8004c0a:	e025      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        case CONFIRM_FACTORY_RESET: {
            ssd1306_SetCursor(0, 14);
 8004c0c:	210e      	movs	r1, #14
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f001 fca6 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("Reset to", *menu_font, White);
 8004c14:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	9200      	str	r2, [sp, #0]
 8004c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1e:	4821      	ldr	r0, [pc, #132]	@ (8004ca4 <OLED_Draw_Confirm+0x2c4>)
 8004c20:	f001 fc78 	bl	8006514 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 28);
 8004c24:	211c      	movs	r1, #28
 8004c26:	2000      	movs	r0, #0
 8004c28:	f001 fc9a 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("factory", *menu_font, White);
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2201      	movs	r2, #1
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c36:	481c      	ldr	r0, [pc, #112]	@ (8004ca8 <OLED_Draw_Confirm+0x2c8>)
 8004c38:	f001 fc6c 	bl	8006514 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 40);
 8004c3c:	2128      	movs	r1, #40	@ 0x28
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f001 fc8e 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString("settings", *menu_font, White);
 8004c44:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <OLED_Draw_Confirm+0x288>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	9200      	str	r2, [sp, #0]
 8004c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c4e:	4817      	ldr	r0, [pc, #92]	@ (8004cac <OLED_Draw_Confirm+0x2cc>)
 8004c50:	f001 fc60 	bl	8006514 <ssd1306_WriteString>
            break;
 8004c54:	e000      	b.n	8004c58 <OLED_Draw_Confirm+0x278>
        }
        default:
            break;
 8004c56:	bf00      	nop
    }

    OLED_Draw_YesNo();
 8004c58:	f000 f940 	bl	8004edc <OLED_Draw_YesNo>

    ssd1306_UpdateScreen();
 8004c5c:	f001 fb50 	bl	8006300 <ssd1306_UpdateScreen>
}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200000a4 	.word	0x200000a4
 8004c6c:	0802528c 	.word	0x0802528c
 8004c70:	20004b48 	.word	0x20004b48
 8004c74:	08025294 	.word	0x08025294
 8004c78:	2000007c 	.word	0x2000007c
 8004c7c:	080252a0 	.word	0x080252a0
 8004c80:	080252a8 	.word	0x080252a8
 8004c84:	080252b0 	.word	0x080252b0
 8004c88:	20000080 	.word	0x20000080
 8004c8c:	080252bc 	.word	0x080252bc
 8004c90:	20000084 	.word	0x20000084
 8004c94:	080252c8 	.word	0x080252c8
 8004c98:	080252d0 	.word	0x080252d0
 8004c9c:	080252dc 	.word	0x080252dc
 8004ca0:	080252e8 	.word	0x080252e8
 8004ca4:	080252f0 	.word	0x080252f0
 8004ca8:	080252fc 	.word	0x080252fc
 8004cac:	08025304 	.word	0x08025304

08004cb0 <OLED_Draw_Submenu>:

// --- Рисование подменю (2 варианта) ---
static void OLED_Draw_Submenu(void)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b08b      	sub	sp, #44	@ 0x2c
 8004cb4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f001 fb0a 	bl	80062d0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8004cbc:	2340      	movs	r3, #64	@ 0x40
 8004cbe:	613b      	str	r3, [r7, #16]

    const char *title = (submenu_type == SUBMENU_DHCP) ? "DHCP" : "Rotation";
 8004cc0:	4b49      	ldr	r3, [pc, #292]	@ (8004de8 <OLED_Draw_Submenu+0x138>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <OLED_Draw_Submenu+0x1c>
 8004cc8:	4b48      	ldr	r3, [pc, #288]	@ (8004dec <OLED_Draw_Submenu+0x13c>)
 8004cca:	e000      	b.n	8004cce <OLED_Draw_Submenu+0x1e>
 8004ccc:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <OLED_Draw_Submenu+0x140>)
 8004cce:	60fb      	str	r3, [r7, #12]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	0fda      	lsrs	r2, r3, #31
 8004cd4:	4413      	add	r3, r2
 8004cd6:	105b      	asrs	r3, r3, #1
 8004cd8:	461c      	mov	r4, r3
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7fb fa7e 	bl	80001dc <strlen>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	0fda      	lsrs	r2, r3, #31
 8004cf0:	4413      	add	r3, r2
 8004cf2:	105b      	asrs	r3, r3, #1
 8004cf4:	425b      	negs	r3, r3
 8004cf6:	4423      	add	r3, r4
 8004cf8:	61fb      	str	r3, [r7, #28]
    if (title_x < 0) title_x = 0;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da01      	bge.n	8004d04 <OLED_Draw_Submenu+0x54>
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2102      	movs	r1, #2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 fc28 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 8004d10:	4b38      	ldr	r3, [pc, #224]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	9200      	str	r2, [sp, #0]
 8004d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f001 fbfa 	bl	8006514 <ssd1306_WriteString>

    const char *opt0 = (submenu_type == SUBMENU_DHCP) ? "Enable" : "0 deg";
 8004d20:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <OLED_Draw_Submenu+0x138>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <OLED_Draw_Submenu+0x7c>
 8004d28:	4b33      	ldr	r3, [pc, #204]	@ (8004df8 <OLED_Draw_Submenu+0x148>)
 8004d2a:	e000      	b.n	8004d2e <OLED_Draw_Submenu+0x7e>
 8004d2c:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <OLED_Draw_Submenu+0x14c>)
 8004d2e:	60bb      	str	r3, [r7, #8]
    const char *opt1 = (submenu_type == SUBMENU_DHCP) ? "Disable" : "180 deg";
 8004d30:	4b2d      	ldr	r3, [pc, #180]	@ (8004de8 <OLED_Draw_Submenu+0x138>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <OLED_Draw_Submenu+0x8c>
 8004d38:	4b31      	ldr	r3, [pc, #196]	@ (8004e00 <OLED_Draw_Submenu+0x150>)
 8004d3a:	e000      	b.n	8004d3e <OLED_Draw_Submenu+0x8e>
 8004d3c:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <OLED_Draw_Submenu+0x154>)
 8004d3e:	607b      	str	r3, [r7, #4]

    int y = 20;
 8004d40:	2314      	movs	r3, #20
 8004d42:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 2; i++) {
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e044      	b.n	8004dd4 <OLED_Draw_Submenu+0x124>
        const char *label = (i == 0) ? opt0 : opt1;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <OLED_Draw_Submenu+0xa4>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	e000      	b.n	8004d56 <OLED_Draw_Submenu+0xa6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
        if (i == submenu_index) {
 8004d58:	4b2b      	ldr	r3, [pc, #172]	@ (8004e08 <OLED_Draw_Submenu+0x158>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11e      	bne.n	8004da0 <OLED_Draw_Submenu+0xf0>
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b2d9      	uxtb	r1, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4b21      	ldr	r3, [pc, #132]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	3302      	adds	r3, #2
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2001      	movs	r0, #1
 8004d7a:	9000      	str	r0, [sp, #0]
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f001 fd63 	bl	8006848 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	4619      	mov	r1, r3
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f001 fbe9 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)label, *menu_font, Black);
 8004d8e:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	9200      	str	r2, [sp, #0]
 8004d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f001 fbbb 	bl	8006514 <ssd1306_WriteString>
 8004d9e:	e00d      	b.n	8004dbc <OLED_Draw_Submenu+0x10c>
        } else {
            ssd1306_SetCursor(2, y);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	2002      	movs	r0, #2
 8004da8:	f001 fbda 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)label, *menu_font, White);
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	9200      	str	r2, [sp, #0]
 8004db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db6:	6838      	ldr	r0, [r7, #0]
 8004db8:	f001 fbac 	bl	8006514 <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <OLED_Draw_Submenu+0x144>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4413      	add	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 2; i++) {
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	ddb7      	ble.n	8004d4a <OLED_Draw_Submenu+0x9a>
    }


    ssd1306_UpdateScreen();
 8004dda:	f001 fa91 	bl	8006300 <ssd1306_UpdateScreen>
}
 8004dde:	bf00      	nop
 8004de0:	3724      	adds	r7, #36	@ 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20004b40 	.word	0x20004b40
 8004dec:	08025268 	.word	0x08025268
 8004df0:	08025310 	.word	0x08025310
 8004df4:	200000a4 	.word	0x200000a4
 8004df8:	0802531c 	.word	0x0802531c
 8004dfc:	08025324 	.word	0x08025324
 8004e00:	0802532c 	.word	0x0802532c
 8004e04:	08025334 	.word	0x08025334
 8004e08:	20004b44 	.word	0x20004b44

08004e0c <Sync_From_Netif>:

// Синхронизация last_ip/mask/gw из текущего состояния netif
static void Sync_From_Netif(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
    const ip4_addr_t *a_ip = netif_ip4_addr(&gnetif);
 8004e12:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec4 <Sync_From_Netif+0xb8>)
 8004e14:	60fb      	str	r3, [r7, #12]
    const ip4_addr_t *a_mask = netif_ip4_netmask(&gnetif);
 8004e16:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec8 <Sync_From_Netif+0xbc>)
 8004e18:	60bb      	str	r3, [r7, #8]
    const ip4_addr_t *a_gw = netif_ip4_gw(&gnetif);
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ecc <Sync_From_Netif+0xc0>)
 8004e1c:	607b      	str	r3, [r7, #4]

    if (a_ip && a_ip->addr != 0) {
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d016      	beq.n	8004e52 <Sync_From_Netif+0x46>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <Sync_From_Netif+0x46>
        last_ip[0] = ip4_addr1_16(a_ip);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <Sync_From_Netif+0xc4>)
 8004e32:	701a      	strb	r2, [r3, #0]
        last_ip[1] = ip4_addr2_16(a_ip);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <Sync_From_Netif+0xc4>)
 8004e3c:	705a      	strb	r2, [r3, #1]
        last_ip[2] = ip4_addr3_16(a_ip);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3302      	adds	r3, #2
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	4b22      	ldr	r3, [pc, #136]	@ (8004ed0 <Sync_From_Netif+0xc4>)
 8004e46:	709a      	strb	r2, [r3, #2]
        last_ip[3] = ip4_addr4_16(a_ip);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3303      	adds	r3, #3
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <Sync_From_Netif+0xc4>)
 8004e50:	70da      	strb	r2, [r3, #3]
    }
    if (a_mask && a_mask->addr != 0) {
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d016      	beq.n	8004e86 <Sync_From_Netif+0x7a>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <Sync_From_Netif+0x7a>
        last_mask[0] = ip4_addr1_16(a_mask);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <Sync_From_Netif+0xc8>)
 8004e66:	701a      	strb	r2, [r3, #0]
        last_mask[1] = ip4_addr2_16(a_mask);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <Sync_From_Netif+0xc8>)
 8004e70:	705a      	strb	r2, [r3, #1]
        last_mask[2] = ip4_addr3_16(a_mask);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3302      	adds	r3, #2
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <Sync_From_Netif+0xc8>)
 8004e7a:	709a      	strb	r2, [r3, #2]
        last_mask[3] = ip4_addr4_16(a_mask);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3303      	adds	r3, #3
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <Sync_From_Netif+0xc8>)
 8004e84:	70da      	strb	r2, [r3, #3]
    }
    if (a_gw && a_gw->addr != 0) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d016      	beq.n	8004eba <Sync_From_Netif+0xae>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <Sync_From_Netif+0xae>
        last_gw[0] = ip4_addr1_16(a_gw);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed8 <Sync_From_Netif+0xcc>)
 8004e9a:	701a      	strb	r2, [r3, #0]
        last_gw[1] = ip4_addr2_16(a_gw);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	781a      	ldrb	r2, [r3, #0]
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <Sync_From_Netif+0xcc>)
 8004ea4:	705a      	strb	r2, [r3, #1]
        last_gw[2] = ip4_addr3_16(a_gw);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <Sync_From_Netif+0xcc>)
 8004eae:	709a      	strb	r2, [r3, #2]
        last_gw[3] = ip4_addr4_16(a_gw);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <Sync_From_Netif+0xcc>)
 8004eb8:	70da      	strb	r2, [r3, #3]
    }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	20004f88 	.word	0x20004f88
 8004ec8:	20004f8c 	.word	0x20004f8c
 8004ecc:	20004f90 	.word	0x20004f90
 8004ed0:	2000007c 	.word	0x2000007c
 8004ed4:	20000080 	.word	0x20000080
 8004ed8:	20000084 	.word	0x20000084

08004edc <OLED_Draw_YesNo>:

// Общий рендер для кнопок Да/Нет внизу
static void OLED_Draw_YesNo(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af02      	add	r7, sp, #8
    const uint8_t y = 53;
 8004ee2:	2335      	movs	r3, #53	@ 0x35
 8004ee4:	71fb      	strb	r3, [r7, #7]
    const uint8_t h = (uint8_t)(menu_font->height);
 8004ee6:	4b28      	ldr	r3, [pc, #160]	@ (8004f88 <OLED_Draw_YesNo+0xac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	71bb      	strb	r3, [r7, #6]
    // Убрали рамку, чтобы не перекрывать текст
    if (confirm_selection == 0) {
 8004eee:	4b27      	ldr	r3, [pc, #156]	@ (8004f8c <OLED_Draw_YesNo+0xb0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d122      	bne.n	8004f3c <OLED_Draw_YesNo+0x60>
        // Yes выделено
        ssd1306_FillRect(0, y, 30, h, White);
 8004ef6:	79bb      	ldrb	r3, [r7, #6]
 8004ef8:	79f9      	ldrb	r1, [r7, #7]
 8004efa:	2201      	movs	r2, #1
 8004efc:	9200      	str	r2, [sp, #0]
 8004efe:	221e      	movs	r2, #30
 8004f00:	2000      	movs	r0, #0
 8004f02:	f001 fca1 	bl	8006848 <ssd1306_FillRect>
        ssd1306_SetCursor(2, y);
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	f001 fb28 	bl	8006560 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, Black);
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <OLED_Draw_YesNo+0xac>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	9200      	str	r2, [sp, #0]
 8004f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f1a:	481d      	ldr	r0, [pc, #116]	@ (8004f90 <OLED_Draw_YesNo+0xb4>)
 8004f1c:	f001 fafa 	bl	8006514 <ssd1306_WriteString>

        ssd1306_SetCursor(34, y);
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	4619      	mov	r1, r3
 8004f24:	2022      	movs	r0, #34	@ 0x22
 8004f26:	f001 fb1b 	bl	8006560 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, White);
 8004f2a:	4b17      	ldr	r3, [pc, #92]	@ (8004f88 <OLED_Draw_YesNo+0xac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	9200      	str	r2, [sp, #0]
 8004f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f34:	4817      	ldr	r0, [pc, #92]	@ (8004f94 <OLED_Draw_YesNo+0xb8>)
 8004f36:	f001 faed 	bl	8006514 <ssd1306_WriteString>

        ssd1306_FillRect(32, y, 26, h, White);
        ssd1306_SetCursor(34, y);
        ssd1306_WriteString("No", *menu_font, Black);
    }
}
 8004f3a:	e021      	b.n	8004f80 <OLED_Draw_YesNo+0xa4>
        ssd1306_SetCursor(2, y);
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	2002      	movs	r0, #2
 8004f42:	f001 fb0d 	bl	8006560 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, White);
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <OLED_Draw_YesNo+0xac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	9200      	str	r2, [sp, #0]
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	480f      	ldr	r0, [pc, #60]	@ (8004f90 <OLED_Draw_YesNo+0xb4>)
 8004f52:	f001 fadf 	bl	8006514 <ssd1306_WriteString>
        ssd1306_FillRect(32, y, 26, h, White);
 8004f56:	79bb      	ldrb	r3, [r7, #6]
 8004f58:	79f9      	ldrb	r1, [r7, #7]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	221a      	movs	r2, #26
 8004f60:	2020      	movs	r0, #32
 8004f62:	f001 fc71 	bl	8006848 <ssd1306_FillRect>
        ssd1306_SetCursor(34, y);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2022      	movs	r0, #34	@ 0x22
 8004f6c:	f001 faf8 	bl	8006560 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, Black);
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <OLED_Draw_YesNo+0xac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2200      	movs	r2, #0
 8004f76:	9200      	str	r2, [sp, #0]
 8004f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7a:	4806      	ldr	r0, [pc, #24]	@ (8004f94 <OLED_Draw_YesNo+0xb8>)
 8004f7c:	f001 faca 	bl	8006514 <ssd1306_WriteString>
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200000a4 	.word	0x200000a4
 8004f8c:	20004b3c 	.word	0x20004b3c
 8004f90:	0802533c 	.word	0x0802533c
 8004f94:	08025340 	.word	0x08025340

08004f98 <OLED_Settings_Back>:

void OLED_Settings_Back(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <OLED_Settings_Back+0x64>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d028      	beq.n	8004ff6 <OLED_Settings_Back+0x5e>
    if (confirm_active) {
 8004fa4:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <OLED_Settings_Back+0x68>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <OLED_Settings_Back+0x26>
        confirm_active = false;
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <OLED_Settings_Back+0x68>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
        confirm_type = CONFIRM_NONE;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <OLED_Settings_Back+0x6c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8004fb8:	f000 fb74 	bl	80056a4 <OLED_Settings_Draw>
        return;
 8004fbc:	e01c      	b.n	8004ff8 <OLED_Settings_Back+0x60>
    }
    if (submenu_active) {
 8004fbe:	4b12      	ldr	r3, [pc, #72]	@ (8005008 <OLED_Settings_Back+0x70>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <OLED_Settings_Back+0x40>
        submenu_active = false;
 8004fc6:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <OLED_Settings_Back+0x70>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
        submenu_type = SUBMENU_NONE;
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <OLED_Settings_Back+0x74>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8004fd2:	f000 fb67 	bl	80056a4 <OLED_Settings_Draw>
        return;
 8004fd6:	e00f      	b.n	8004ff8 <OLED_Settings_Back+0x60>
    }
    if (editing_active) {
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <OLED_Settings_Back+0x78>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <OLED_Settings_Back+0x54>
        editing_active = false;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <OLED_Settings_Back+0x78>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8004fe6:	f000 fb5d 	bl	80056a4 <OLED_Settings_Draw>
        return;
 8004fea:	e005      	b.n	8004ff8 <OLED_Settings_Back+0x60>
    }
    // Если мы в корневом меню — выходим на главную страницу
    OLED_Settings_Exit();
 8004fec:	f000 ffb0 	bl	8005f50 <OLED_Settings_Exit>
    OLED_ShowCurrentPage();
 8004ff0:	f7fe ff1a 	bl	8003e28 <OLED_ShowCurrentPage>
 8004ff4:	e000      	b.n	8004ff8 <OLED_Settings_Back+0x60>
    if (!settings_active) return;
 8004ff6:	bf00      	nop
}
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20004b04 	.word	0x20004b04
 8005000:	20004b39 	.word	0x20004b39
 8005004:	20004b48 	.word	0x20004b48
 8005008:	20004b41 	.word	0x20004b41
 800500c:	20004b40 	.word	0x20004b40
 8005010:	20004b30 	.word	0x20004b30

08005014 <Apply_Network_Settings>:

// --- Применение сетевых настроек в LwIP ---
void Apply_Network_Settings(void)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b089      	sub	sp, #36	@ 0x24
 8005018:	af04      	add	r7, sp, #16
    ip_addr_t ip_addr, netmask, gw;

    IP4_ADDR(&ip_addr, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 800501a:	4baa      	ldr	r3, [pc, #680]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	061a      	lsls	r2, r3, #24
 8005020:	4ba8      	ldr	r3, [pc, #672]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	4ba6      	ldr	r3, [pc, #664]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800502a:	789b      	ldrb	r3, [r3, #2]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4313      	orrs	r3, r2
 8005030:	4aa4      	ldr	r2, [pc, #656]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005032:	78d2      	ldrb	r2, [r2, #3]
 8005034:	4313      	orrs	r3, r2
 8005036:	061a      	lsls	r2, r3, #24
 8005038:	4ba2      	ldr	r3, [pc, #648]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	0619      	lsls	r1, r3, #24
 800503e:	4ba1      	ldr	r3, [pc, #644]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	4319      	orrs	r1, r3
 8005046:	4b9f      	ldr	r3, [pc, #636]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005048:	789b      	ldrb	r3, [r3, #2]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	430b      	orrs	r3, r1
 800504e:	499d      	ldr	r1, [pc, #628]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005050:	78c9      	ldrb	r1, [r1, #3]
 8005052:	430b      	orrs	r3, r1
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800505a:	431a      	orrs	r2, r3
 800505c:	4b99      	ldr	r3, [pc, #612]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	0619      	lsls	r1, r3, #24
 8005062:	4b98      	ldr	r3, [pc, #608]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	4319      	orrs	r1, r3
 800506a:	4b96      	ldr	r3, [pc, #600]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800506c:	789b      	ldrb	r3, [r3, #2]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	430b      	orrs	r3, r1
 8005072:	4994      	ldr	r1, [pc, #592]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005074:	78c9      	ldrb	r1, [r1, #3]
 8005076:	430b      	orrs	r3, r1
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800507e:	431a      	orrs	r2, r3
 8005080:	4b90      	ldr	r3, [pc, #576]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	0619      	lsls	r1, r3, #24
 8005086:	4b8f      	ldr	r3, [pc, #572]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	4319      	orrs	r1, r3
 800508e:	4b8d      	ldr	r3, [pc, #564]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005090:	789b      	ldrb	r3, [r3, #2]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	430b      	orrs	r3, r1
 8005096:	498b      	ldr	r1, [pc, #556]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005098:	78c9      	ldrb	r1, [r1, #3]
 800509a:	430b      	orrs	r3, r1
 800509c:	0e1b      	lsrs	r3, r3, #24
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 80050a2:	4b89      	ldr	r3, [pc, #548]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	061a      	lsls	r2, r3, #24
 80050a8:	4b87      	ldr	r3, [pc, #540]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	431a      	orrs	r2, r3
 80050b0:	4b85      	ldr	r3, [pc, #532]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	4313      	orrs	r3, r2
 80050b8:	4a83      	ldr	r2, [pc, #524]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050ba:	78d2      	ldrb	r2, [r2, #3]
 80050bc:	4313      	orrs	r3, r2
 80050be:	061a      	lsls	r2, r3, #24
 80050c0:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	0619      	lsls	r1, r3, #24
 80050c6:	4b80      	ldr	r3, [pc, #512]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	4319      	orrs	r1, r3
 80050ce:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050d0:	789b      	ldrb	r3, [r3, #2]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	430b      	orrs	r3, r1
 80050d6:	497c      	ldr	r1, [pc, #496]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050d8:	78c9      	ldrb	r1, [r1, #3]
 80050da:	430b      	orrs	r3, r1
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	4b78      	ldr	r3, [pc, #480]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	0619      	lsls	r1, r3, #24
 80050ea:	4b77      	ldr	r3, [pc, #476]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	4319      	orrs	r1, r3
 80050f2:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050f4:	789b      	ldrb	r3, [r3, #2]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	430b      	orrs	r3, r1
 80050fa:	4973      	ldr	r1, [pc, #460]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80050fc:	78c9      	ldrb	r1, [r1, #3]
 80050fe:	430b      	orrs	r3, r1
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005106:	431a      	orrs	r2, r3
 8005108:	4b6f      	ldr	r3, [pc, #444]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	0619      	lsls	r1, r3, #24
 800510e:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4319      	orrs	r1, r3
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	430b      	orrs	r3, r1
 800511e:	496a      	ldr	r1, [pc, #424]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 8005120:	78c9      	ldrb	r1, [r1, #3]
 8005122:	430b      	orrs	r3, r1
 8005124:	0e1b      	lsrs	r3, r3, #24
 8005126:	4313      	orrs	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 800512a:	4b68      	ldr	r3, [pc, #416]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	061a      	lsls	r2, r3, #24
 8005130:	4b66      	ldr	r3, [pc, #408]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	4b64      	ldr	r3, [pc, #400]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800513a:	789b      	ldrb	r3, [r3, #2]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	4313      	orrs	r3, r2
 8005140:	4a62      	ldr	r2, [pc, #392]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005142:	78d2      	ldrb	r2, [r2, #3]
 8005144:	4313      	orrs	r3, r2
 8005146:	061a      	lsls	r2, r3, #24
 8005148:	4b60      	ldr	r3, [pc, #384]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	0619      	lsls	r1, r3, #24
 800514e:	4b5f      	ldr	r3, [pc, #380]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	4319      	orrs	r1, r3
 8005156:	4b5d      	ldr	r3, [pc, #372]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005158:	789b      	ldrb	r3, [r3, #2]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	430b      	orrs	r3, r1
 800515e:	495b      	ldr	r1, [pc, #364]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005160:	78c9      	ldrb	r1, [r1, #3]
 8005162:	430b      	orrs	r3, r1
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800516a:	431a      	orrs	r2, r3
 800516c:	4b57      	ldr	r3, [pc, #348]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	0619      	lsls	r1, r3, #24
 8005172:	4b56      	ldr	r3, [pc, #344]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	4319      	orrs	r1, r3
 800517a:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800517c:	789b      	ldrb	r3, [r3, #2]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	430b      	orrs	r3, r1
 8005182:	4952      	ldr	r1, [pc, #328]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005184:	78c9      	ldrb	r1, [r1, #3]
 8005186:	430b      	orrs	r3, r1
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800518e:	431a      	orrs	r2, r3
 8005190:	4b4e      	ldr	r3, [pc, #312]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	0619      	lsls	r1, r3, #24
 8005196:	4b4d      	ldr	r3, [pc, #308]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	4319      	orrs	r1, r3
 800519e:	4b4b      	ldr	r3, [pc, #300]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	430b      	orrs	r3, r1
 80051a6:	4949      	ldr	r1, [pc, #292]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 80051a8:	78c9      	ldrb	r1, [r1, #3]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	0e1b      	lsrs	r3, r3, #24
 80051ae:	4313      	orrs	r3, r2
 80051b0:	607b      	str	r3, [r7, #4]

    netif_set_addr(&gnetif, &ip_addr, &netmask, &gw);
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	f107 0208 	add.w	r2, r7, #8
 80051b8:	f107 010c 	add.w	r1, r7, #12
 80051bc:	4844      	ldr	r0, [pc, #272]	@ (80052d0 <Apply_Network_Settings+0x2bc>)
 80051be:	f010 fb0b 	bl	80157d8 <netif_set_addr>

    printf("Network settings applied:\n");
 80051c2:	4844      	ldr	r0, [pc, #272]	@ (80052d4 <Apply_Network_Settings+0x2c0>)
 80051c4:	f01d f8aa 	bl	802231c <puts>
    printf("IP: %d.%d.%d.%d\n", last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 80051c8:	4b3e      	ldr	r3, [pc, #248]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	4b3d      	ldr	r3, [pc, #244]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 80051d6:	789b      	ldrb	r3, [r3, #2]
 80051d8:	4618      	mov	r0, r3
 80051da:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4603      	mov	r3, r0
 80051e2:	483d      	ldr	r0, [pc, #244]	@ (80052d8 <Apply_Network_Settings+0x2c4>)
 80051e4:	f01d f832 	bl	802224c <iprintf>
    printf("Mask: %d.%d.%d.%d\n", last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 80051e8:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	4618      	mov	r0, r3
 80051fa:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80051fc:	78db      	ldrb	r3, [r3, #3]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4603      	mov	r3, r0
 8005202:	4836      	ldr	r0, [pc, #216]	@ (80052dc <Apply_Network_Settings+0x2c8>)
 8005204:	f01d f822 	bl	802224c <iprintf>
    printf("GW: %d.%d.%d.%d\n", last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8005208:	4b30      	ldr	r3, [pc, #192]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	4b2f      	ldr	r3, [pc, #188]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	461a      	mov	r2, r3
 8005214:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 8005216:	789b      	ldrb	r3, [r3, #2]
 8005218:	4618      	mov	r0, r3
 800521a:	4b2c      	ldr	r3, [pc, #176]	@ (80052cc <Apply_Network_Settings+0x2b8>)
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	4603      	mov	r3, r0
 8005222:	482f      	ldr	r0, [pc, #188]	@ (80052e0 <Apply_Network_Settings+0x2cc>)
 8005224:	f01d f812 	bl	802224c <iprintf>

    /* --- сохраняем в backup-регистры --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8005228:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	061a      	lsls	r2, r3, #24
 800522e:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	431a      	orrs	r2, r3
 8005236:	4b23      	ldr	r3, [pc, #140]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005238:	789b      	ldrb	r3, [r3, #2]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	4313      	orrs	r3, r2
 800523e:	4a21      	ldr	r2, [pc, #132]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005240:	78d2      	ldrb	r2, [r2, #3]
 8005242:	4313      	orrs	r3, r2
 8005244:	061a      	lsls	r2, r3, #24
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	0619      	lsls	r1, r3, #24
 800524c:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	4319      	orrs	r1, r3
 8005254:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005256:	789b      	ldrb	r3, [r3, #2]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	430b      	orrs	r3, r1
 800525c:	4919      	ldr	r1, [pc, #100]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800525e:	78c9      	ldrb	r1, [r1, #3]
 8005260:	430b      	orrs	r3, r1
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005268:	431a      	orrs	r2, r3
 800526a:	4b16      	ldr	r3, [pc, #88]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	0619      	lsls	r1, r3, #24
 8005270:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	4319      	orrs	r1, r3
 8005278:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800527a:	789b      	ldrb	r3, [r3, #2]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	430b      	orrs	r3, r1
 8005280:	4910      	ldr	r1, [pc, #64]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005282:	78c9      	ldrb	r1, [r1, #3]
 8005284:	430b      	orrs	r3, r1
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800528c:	431a      	orrs	r2, r3
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	0619      	lsls	r1, r3, #24
 8005294:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4319      	orrs	r1, r3
 800529c:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 800529e:	789b      	ldrb	r3, [r3, #2]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	430b      	orrs	r3, r1
 80052a4:	4907      	ldr	r1, [pc, #28]	@ (80052c4 <Apply_Network_Settings+0x2b0>)
 80052a6:	78c9      	ldrb	r1, [r1, #3]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	0e1b      	lsrs	r3, r3, #24
 80052ac:	4313      	orrs	r3, r2
 80052ae:	4a0d      	ldr	r2, [pc, #52]	@ (80052e4 <Apply_Network_Settings+0x2d0>)
 80052b0:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	061a      	lsls	r2, r3, #24
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <Apply_Network_Settings+0x2b4>)
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	e012      	b.n	80052e8 <Apply_Network_Settings+0x2d4>
 80052c2:	bf00      	nop
 80052c4:	2000007c 	.word	0x2000007c
 80052c8:	20000080 	.word	0x20000080
 80052cc:	20000084 	.word	0x20000084
 80052d0:	20004f84 	.word	0x20004f84
 80052d4:	08025344 	.word	0x08025344
 80052d8:	08025360 	.word	0x08025360
 80052dc:	08025374 	.word	0x08025374
 80052e0:	08025388 	.word	0x08025388
 80052e4:	20002a34 	.word	0x20002a34
 80052e8:	4b51      	ldr	r3, [pc, #324]	@ (8005430 <Apply_Network_Settings+0x41c>)
 80052ea:	789b      	ldrb	r3, [r3, #2]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	4313      	orrs	r3, r2
 80052f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005430 <Apply_Network_Settings+0x41c>)
 80052f2:	78d2      	ldrb	r2, [r2, #3]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	061a      	lsls	r2, r3, #24
 80052f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005430 <Apply_Network_Settings+0x41c>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	0619      	lsls	r1, r3, #24
 80052fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	4319      	orrs	r1, r3
 8005306:	4b4a      	ldr	r3, [pc, #296]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005308:	789b      	ldrb	r3, [r3, #2]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	430b      	orrs	r3, r1
 800530e:	4948      	ldr	r1, [pc, #288]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005310:	78c9      	ldrb	r1, [r1, #3]
 8005312:	430b      	orrs	r3, r1
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800531a:	431a      	orrs	r2, r3
 800531c:	4b44      	ldr	r3, [pc, #272]	@ (8005430 <Apply_Network_Settings+0x41c>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	0619      	lsls	r1, r3, #24
 8005322:	4b43      	ldr	r3, [pc, #268]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	4319      	orrs	r1, r3
 800532a:	4b41      	ldr	r3, [pc, #260]	@ (8005430 <Apply_Network_Settings+0x41c>)
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	430b      	orrs	r3, r1
 8005332:	493f      	ldr	r1, [pc, #252]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005334:	78c9      	ldrb	r1, [r1, #3]
 8005336:	430b      	orrs	r3, r1
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800533e:	431a      	orrs	r2, r3
 8005340:	4b3b      	ldr	r3, [pc, #236]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	0619      	lsls	r1, r3, #24
 8005346:	4b3a      	ldr	r3, [pc, #232]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	4319      	orrs	r1, r3
 800534e:	4b38      	ldr	r3, [pc, #224]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005350:	789b      	ldrb	r3, [r3, #2]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	430b      	orrs	r3, r1
 8005356:	4936      	ldr	r1, [pc, #216]	@ (8005430 <Apply_Network_Settings+0x41c>)
 8005358:	78c9      	ldrb	r1, [r1, #3]
 800535a:	430b      	orrs	r3, r1
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	4313      	orrs	r3, r2
 8005360:	4a34      	ldr	r2, [pc, #208]	@ (8005434 <Apply_Network_Settings+0x420>)
 8005362:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8005364:	4b34      	ldr	r3, [pc, #208]	@ (8005438 <Apply_Network_Settings+0x424>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	061a      	lsls	r2, r3, #24
 800536a:	4b33      	ldr	r3, [pc, #204]	@ (8005438 <Apply_Network_Settings+0x424>)
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	431a      	orrs	r2, r3
 8005372:	4b31      	ldr	r3, [pc, #196]	@ (8005438 <Apply_Network_Settings+0x424>)
 8005374:	789b      	ldrb	r3, [r3, #2]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4313      	orrs	r3, r2
 800537a:	4a2f      	ldr	r2, [pc, #188]	@ (8005438 <Apply_Network_Settings+0x424>)
 800537c:	78d2      	ldrb	r2, [r2, #3]
 800537e:	4313      	orrs	r3, r2
 8005380:	061a      	lsls	r2, r3, #24
 8005382:	4b2d      	ldr	r3, [pc, #180]	@ (8005438 <Apply_Network_Settings+0x424>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	0619      	lsls	r1, r3, #24
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <Apply_Network_Settings+0x424>)
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	4319      	orrs	r1, r3
 8005390:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <Apply_Network_Settings+0x424>)
 8005392:	789b      	ldrb	r3, [r3, #2]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	430b      	orrs	r3, r1
 8005398:	4927      	ldr	r1, [pc, #156]	@ (8005438 <Apply_Network_Settings+0x424>)
 800539a:	78c9      	ldrb	r1, [r1, #3]
 800539c:	430b      	orrs	r3, r1
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80053a4:	431a      	orrs	r2, r3
 80053a6:	4b24      	ldr	r3, [pc, #144]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	0619      	lsls	r1, r3, #24
 80053ac:	4b22      	ldr	r3, [pc, #136]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	4319      	orrs	r1, r3
 80053b4:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	430b      	orrs	r3, r1
 80053bc:	491e      	ldr	r1, [pc, #120]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053be:	78c9      	ldrb	r1, [r1, #3]
 80053c0:	430b      	orrs	r3, r1
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053c8:	431a      	orrs	r2, r3
 80053ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	0619      	lsls	r1, r3, #24
 80053d0:	4b19      	ldr	r3, [pc, #100]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	4319      	orrs	r1, r3
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	430b      	orrs	r3, r1
 80053e0:	4915      	ldr	r1, [pc, #84]	@ (8005438 <Apply_Network_Settings+0x424>)
 80053e2:	78c9      	ldrb	r1, [r1, #3]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	0e1b      	lsrs	r3, r3, #24
 80053e8:	4313      	orrs	r3, r2
 80053ea:	4a14      	ldr	r2, [pc, #80]	@ (800543c <Apply_Network_Settings+0x428>)
 80053ec:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 80053ee:	4b14      	ldr	r3, [pc, #80]	@ (8005440 <Apply_Network_Settings+0x42c>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <Apply_Network_Settings+0x430>)
 8005400:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;  // чтобы main тоже увидел изменение
 8005402:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <Apply_Network_Settings+0x434>)
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]

    /* Сохраняем в backup (используем текущие SNMP community из main) */
    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <Apply_Network_Settings+0x430>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	4a0b      	ldr	r2, [pc, #44]	@ (800543c <Apply_Network_Settings+0x428>)
 800540e:	4909      	ldr	r1, [pc, #36]	@ (8005434 <Apply_Network_Settings+0x420>)
 8005410:	480e      	ldr	r0, [pc, #56]	@ (800544c <Apply_Network_Settings+0x438>)
 8005412:	4c0f      	ldr	r4, [pc, #60]	@ (8005450 <Apply_Network_Settings+0x43c>)
 8005414:	9402      	str	r4, [sp, #8]
 8005416:	4c0f      	ldr	r4, [pc, #60]	@ (8005454 <Apply_Network_Settings+0x440>)
 8005418:	9401      	str	r4, [sp, #4]
 800541a:	4c0f      	ldr	r4, [pc, #60]	@ (8005458 <Apply_Network_Settings+0x444>)
 800541c:	9400      	str	r4, [sp, #0]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	6809      	ldr	r1, [r1, #0]
 8005422:	6800      	ldr	r0, [r0, #0]
 8005424:	f7fd fe58 	bl	80030d8 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	20000080 	.word	0x20000080
 8005434:	20002a38 	.word	0x20002a38
 8005438:	20000084 	.word	0x20000084
 800543c:	20002a3c 	.word	0x20002a3c
 8005440:	200000c0 	.word	0x200000c0
 8005444:	20002a40 	.word	0x20002a40
 8005448:	20002a41 	.word	0x20002a41
 800544c:	20002a34 	.word	0x20002a34
 8005450:	20000050 	.word	0x20000050
 8005454:	20000030 	.word	0x20000030
 8005458:	20000010 	.word	0x20000010

0800545c <DHCP_Apply>:


// --- Применение DHCP ---
static void DHCP_Apply()
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af04      	add	r7, sp, #16
    if (dhcp_on)
 8005462:	4b81      	ldr	r3, [pc, #516]	@ (8005668 <DHCP_Apply+0x20c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d006      	beq.n	8005478 <DHCP_Apply+0x1c>
    {
        dhcp_start(&gnetif);
 800546a:	4880      	ldr	r0, [pc, #512]	@ (800566c <DHCP_Apply+0x210>)
 800546c:	f017 fe2e 	bl	801d0cc <dhcp_start>
        printf("DHCP enabled\n");
 8005470:	487f      	ldr	r0, [pc, #508]	@ (8005670 <DHCP_Apply+0x214>)
 8005472:	f01c ff53 	bl	802231c <puts>
 8005476:	e007      	b.n	8005488 <DHCP_Apply+0x2c>
    }
    else
    {
        dhcp_stop(&gnetif);
 8005478:	487c      	ldr	r0, [pc, #496]	@ (800566c <DHCP_Apply+0x210>)
 800547a:	f018 fb03 	bl	801da84 <dhcp_stop>
        Apply_Network_Settings();
 800547e:	f7ff fdc9 	bl	8005014 <Apply_Network_Settings>
        printf("DHCP disabled, static IP applied\n");
 8005482:	487c      	ldr	r0, [pc, #496]	@ (8005674 <DHCP_Apply+0x218>)
 8005484:	f01c ff4a 	bl	802231c <puts>
    }

    /* --- сохраняем флаг DHCP в backup --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8005488:	4b7b      	ldr	r3, [pc, #492]	@ (8005678 <DHCP_Apply+0x21c>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	061a      	lsls	r2, r3, #24
 800548e:	4b7a      	ldr	r3, [pc, #488]	@ (8005678 <DHCP_Apply+0x21c>)
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	431a      	orrs	r2, r3
 8005496:	4b78      	ldr	r3, [pc, #480]	@ (8005678 <DHCP_Apply+0x21c>)
 8005498:	789b      	ldrb	r3, [r3, #2]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	4313      	orrs	r3, r2
 800549e:	4a76      	ldr	r2, [pc, #472]	@ (8005678 <DHCP_Apply+0x21c>)
 80054a0:	78d2      	ldrb	r2, [r2, #3]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	061a      	lsls	r2, r3, #24
 80054a6:	4b74      	ldr	r3, [pc, #464]	@ (8005678 <DHCP_Apply+0x21c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	0619      	lsls	r1, r3, #24
 80054ac:	4b72      	ldr	r3, [pc, #456]	@ (8005678 <DHCP_Apply+0x21c>)
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4319      	orrs	r1, r3
 80054b4:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <DHCP_Apply+0x21c>)
 80054b6:	789b      	ldrb	r3, [r3, #2]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	430b      	orrs	r3, r1
 80054bc:	496e      	ldr	r1, [pc, #440]	@ (8005678 <DHCP_Apply+0x21c>)
 80054be:	78c9      	ldrb	r1, [r1, #3]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054c8:	431a      	orrs	r2, r3
 80054ca:	4b6b      	ldr	r3, [pc, #428]	@ (8005678 <DHCP_Apply+0x21c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	0619      	lsls	r1, r3, #24
 80054d0:	4b69      	ldr	r3, [pc, #420]	@ (8005678 <DHCP_Apply+0x21c>)
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	4319      	orrs	r1, r3
 80054d8:	4b67      	ldr	r3, [pc, #412]	@ (8005678 <DHCP_Apply+0x21c>)
 80054da:	789b      	ldrb	r3, [r3, #2]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	430b      	orrs	r3, r1
 80054e0:	4965      	ldr	r1, [pc, #404]	@ (8005678 <DHCP_Apply+0x21c>)
 80054e2:	78c9      	ldrb	r1, [r1, #3]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054ec:	431a      	orrs	r2, r3
 80054ee:	4b62      	ldr	r3, [pc, #392]	@ (8005678 <DHCP_Apply+0x21c>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	0619      	lsls	r1, r3, #24
 80054f4:	4b60      	ldr	r3, [pc, #384]	@ (8005678 <DHCP_Apply+0x21c>)
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	4319      	orrs	r1, r3
 80054fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005678 <DHCP_Apply+0x21c>)
 80054fe:	789b      	ldrb	r3, [r3, #2]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	430b      	orrs	r3, r1
 8005504:	495c      	ldr	r1, [pc, #368]	@ (8005678 <DHCP_Apply+0x21c>)
 8005506:	78c9      	ldrb	r1, [r1, #3]
 8005508:	430b      	orrs	r3, r1
 800550a:	0e1b      	lsrs	r3, r3, #24
 800550c:	4313      	orrs	r3, r2
 800550e:	4a5b      	ldr	r2, [pc, #364]	@ (800567c <DHCP_Apply+0x220>)
 8005510:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8005512:	4b5b      	ldr	r3, [pc, #364]	@ (8005680 <DHCP_Apply+0x224>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	061a      	lsls	r2, r3, #24
 8005518:	4b59      	ldr	r3, [pc, #356]	@ (8005680 <DHCP_Apply+0x224>)
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	431a      	orrs	r2, r3
 8005520:	4b57      	ldr	r3, [pc, #348]	@ (8005680 <DHCP_Apply+0x224>)
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	4313      	orrs	r3, r2
 8005528:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <DHCP_Apply+0x224>)
 800552a:	78d2      	ldrb	r2, [r2, #3]
 800552c:	4313      	orrs	r3, r2
 800552e:	061a      	lsls	r2, r3, #24
 8005530:	4b53      	ldr	r3, [pc, #332]	@ (8005680 <DHCP_Apply+0x224>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	0619      	lsls	r1, r3, #24
 8005536:	4b52      	ldr	r3, [pc, #328]	@ (8005680 <DHCP_Apply+0x224>)
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	4319      	orrs	r1, r3
 800553e:	4b50      	ldr	r3, [pc, #320]	@ (8005680 <DHCP_Apply+0x224>)
 8005540:	789b      	ldrb	r3, [r3, #2]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	430b      	orrs	r3, r1
 8005546:	494e      	ldr	r1, [pc, #312]	@ (8005680 <DHCP_Apply+0x224>)
 8005548:	78c9      	ldrb	r1, [r1, #3]
 800554a:	430b      	orrs	r3, r1
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005552:	431a      	orrs	r2, r3
 8005554:	4b4a      	ldr	r3, [pc, #296]	@ (8005680 <DHCP_Apply+0x224>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	0619      	lsls	r1, r3, #24
 800555a:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <DHCP_Apply+0x224>)
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	041b      	lsls	r3, r3, #16
 8005560:	4319      	orrs	r1, r3
 8005562:	4b47      	ldr	r3, [pc, #284]	@ (8005680 <DHCP_Apply+0x224>)
 8005564:	789b      	ldrb	r3, [r3, #2]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	430b      	orrs	r3, r1
 800556a:	4945      	ldr	r1, [pc, #276]	@ (8005680 <DHCP_Apply+0x224>)
 800556c:	78c9      	ldrb	r1, [r1, #3]
 800556e:	430b      	orrs	r3, r1
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005576:	431a      	orrs	r2, r3
 8005578:	4b41      	ldr	r3, [pc, #260]	@ (8005680 <DHCP_Apply+0x224>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	0619      	lsls	r1, r3, #24
 800557e:	4b40      	ldr	r3, [pc, #256]	@ (8005680 <DHCP_Apply+0x224>)
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	4319      	orrs	r1, r3
 8005586:	4b3e      	ldr	r3, [pc, #248]	@ (8005680 <DHCP_Apply+0x224>)
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	430b      	orrs	r3, r1
 800558e:	493c      	ldr	r1, [pc, #240]	@ (8005680 <DHCP_Apply+0x224>)
 8005590:	78c9      	ldrb	r1, [r1, #3]
 8005592:	430b      	orrs	r3, r1
 8005594:	0e1b      	lsrs	r3, r3, #24
 8005596:	4313      	orrs	r3, r2
 8005598:	4a3a      	ldr	r2, [pc, #232]	@ (8005684 <DHCP_Apply+0x228>)
 800559a:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 800559c:	4b3a      	ldr	r3, [pc, #232]	@ (8005688 <DHCP_Apply+0x22c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	061a      	lsls	r2, r3, #24
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <DHCP_Apply+0x22c>)
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	4b37      	ldr	r3, [pc, #220]	@ (8005688 <DHCP_Apply+0x22c>)
 80055ac:	789b      	ldrb	r3, [r3, #2]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	4313      	orrs	r3, r2
 80055b2:	4a35      	ldr	r2, [pc, #212]	@ (8005688 <DHCP_Apply+0x22c>)
 80055b4:	78d2      	ldrb	r2, [r2, #3]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	4b33      	ldr	r3, [pc, #204]	@ (8005688 <DHCP_Apply+0x22c>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	0619      	lsls	r1, r3, #24
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <DHCP_Apply+0x22c>)
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	4319      	orrs	r1, r3
 80055c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <DHCP_Apply+0x22c>)
 80055ca:	789b      	ldrb	r3, [r3, #2]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	430b      	orrs	r3, r1
 80055d0:	492d      	ldr	r1, [pc, #180]	@ (8005688 <DHCP_Apply+0x22c>)
 80055d2:	78c9      	ldrb	r1, [r1, #3]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055dc:	431a      	orrs	r2, r3
 80055de:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <DHCP_Apply+0x22c>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	0619      	lsls	r1, r3, #24
 80055e4:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <DHCP_Apply+0x22c>)
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	4319      	orrs	r1, r3
 80055ec:	4b26      	ldr	r3, [pc, #152]	@ (8005688 <DHCP_Apply+0x22c>)
 80055ee:	789b      	ldrb	r3, [r3, #2]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	430b      	orrs	r3, r1
 80055f4:	4924      	ldr	r1, [pc, #144]	@ (8005688 <DHCP_Apply+0x22c>)
 80055f6:	78c9      	ldrb	r1, [r1, #3]
 80055f8:	430b      	orrs	r3, r1
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005600:	431a      	orrs	r2, r3
 8005602:	4b21      	ldr	r3, [pc, #132]	@ (8005688 <DHCP_Apply+0x22c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	0619      	lsls	r1, r3, #24
 8005608:	4b1f      	ldr	r3, [pc, #124]	@ (8005688 <DHCP_Apply+0x22c>)
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	4319      	orrs	r1, r3
 8005610:	4b1d      	ldr	r3, [pc, #116]	@ (8005688 <DHCP_Apply+0x22c>)
 8005612:	789b      	ldrb	r3, [r3, #2]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	430b      	orrs	r3, r1
 8005618:	491b      	ldr	r1, [pc, #108]	@ (8005688 <DHCP_Apply+0x22c>)
 800561a:	78c9      	ldrb	r1, [r1, #3]
 800561c:	430b      	orrs	r3, r1
 800561e:	0e1b      	lsrs	r3, r3, #24
 8005620:	4313      	orrs	r3, r2
 8005622:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <DHCP_Apply+0x230>)
 8005624:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 8005626:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <DHCP_Apply+0x20c>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <DHCP_Apply+0x234>)
 8005638:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;
 800563a:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <DHCP_Apply+0x238>)
 800563c:	2201      	movs	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]

    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <DHCP_Apply+0x234>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4a11      	ldr	r2, [pc, #68]	@ (800568c <DHCP_Apply+0x230>)
 8005646:	490f      	ldr	r1, [pc, #60]	@ (8005684 <DHCP_Apply+0x228>)
 8005648:	480c      	ldr	r0, [pc, #48]	@ (800567c <DHCP_Apply+0x220>)
 800564a:	4c13      	ldr	r4, [pc, #76]	@ (8005698 <DHCP_Apply+0x23c>)
 800564c:	9402      	str	r4, [sp, #8]
 800564e:	4c13      	ldr	r4, [pc, #76]	@ (800569c <DHCP_Apply+0x240>)
 8005650:	9401      	str	r4, [sp, #4]
 8005652:	4c13      	ldr	r4, [pc, #76]	@ (80056a0 <DHCP_Apply+0x244>)
 8005654:	9400      	str	r4, [sp, #0]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	6809      	ldr	r1, [r1, #0]
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	f7fd fd3c 	bl	80030d8 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8005660:	bf00      	nop
 8005662:	3704      	adds	r7, #4
 8005664:	46bd      	mov	sp, r7
 8005666:	bd90      	pop	{r4, r7, pc}
 8005668:	200000c0 	.word	0x200000c0
 800566c:	20004f84 	.word	0x20004f84
 8005670:	0802539c 	.word	0x0802539c
 8005674:	080253ac 	.word	0x080253ac
 8005678:	2000007c 	.word	0x2000007c
 800567c:	20002a34 	.word	0x20002a34
 8005680:	20000080 	.word	0x20000080
 8005684:	20002a38 	.word	0x20002a38
 8005688:	20000084 	.word	0x20000084
 800568c:	20002a3c 	.word	0x20002a3c
 8005690:	20002a40 	.word	0x20002a40
 8005694:	20002a41 	.word	0x20002a41
 8005698:	20000050 	.word	0x20000050
 800569c:	20000030 	.word	0x20000030
 80056a0:	20000010 	.word	0x20000010

080056a4 <OLED_Settings_Draw>:
    }
}

// Рисуем меню
void OLED_Settings_Draw(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	@ 0x28
 80056a8:	af02      	add	r7, sp, #8
    if(confirm_active) {
 80056aa:	4b43      	ldr	r3, [pc, #268]	@ (80057b8 <OLED_Settings_Draw+0x114>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <OLED_Settings_Draw+0x14>
        OLED_Draw_Confirm();
 80056b2:	f7ff f995 	bl	80049e0 <OLED_Draw_Confirm>
        return;
 80056b6:	e07c      	b.n	80057b2 <OLED_Settings_Draw+0x10e>
    }
    if (submenu_active) {
 80056b8:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <OLED_Settings_Draw+0x118>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <OLED_Settings_Draw+0x22>
        OLED_Draw_Submenu();
 80056c0:	f7ff faf6 	bl	8004cb0 <OLED_Draw_Submenu>
        return;
 80056c4:	e075      	b.n	80057b2 <OLED_Settings_Draw+0x10e>
    }

    ssd1306_Fill(Black);
 80056c6:	2000      	movs	r0, #0
 80056c8:	f000 fe02 	bl	80062d0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80056cc:	2340      	movs	r3, #64	@ 0x40
 80056ce:	613b      	str	r3, [r7, #16]

    // Заголовок
    const char title[] = "Settings";
 80056d0:	4a3b      	ldr	r2, [pc, #236]	@ (80057c0 <OLED_Settings_Draw+0x11c>)
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80056d6:	c303      	stmia	r3!, {r0, r1}
 80056d8:	701a      	strb	r2, [r3, #0]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	0fda      	lsrs	r2, r3, #31
 80056de:	4413      	add	r3, r2
 80056e0:	105b      	asrs	r3, r3, #1
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	61fb      	str	r3, [r7, #28]
    if(title_x < 0) title_x = 0;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	da01      	bge.n	80056fa <OLED_Settings_Draw+0x56>
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 ff2d 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 8005706:	4b2f      	ldr	r3, [pc, #188]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1d38      	adds	r0, r7, #4
 800570c:	2201      	movs	r2, #1
 800570e:	9200      	str	r2, [sp, #0]
 8005710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005712:	f000 feff 	bl	8006514 <ssd1306_WriteString>

    // Список пунктов
    int y = 16;
 8005716:	2310      	movs	r3, #16
 8005718:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	e043      	b.n	80057a8 <OLED_Settings_Draw+0x104>
    {
        if(i == selected_index)
 8005720:	4b29      	ldr	r3, [pc, #164]	@ (80057c8 <OLED_Settings_Draw+0x124>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d121      	bne.n	800576e <OLED_Settings_Draw+0xca>
        {
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b2d9      	uxtb	r1, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b23      	ldr	r3, [pc, #140]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	3302      	adds	r3, #2
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2001      	movs	r0, #1
 8005742:	9000      	str	r0, [sp, #0]
 8005744:	2000      	movs	r0, #0
 8005746:	f001 f87f 	bl	8006848 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	2002      	movs	r0, #2
 8005752:	f000 ff05 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, Black);
 8005756:	4a1d      	ldr	r2, [pc, #116]	@ (80057cc <OLED_Settings_Draw+0x128>)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800575e:	4b19      	ldr	r3, [pc, #100]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	9200      	str	r2, [sp, #0]
 8005766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005768:	f000 fed4 	bl	8006514 <ssd1306_WriteString>
 800576c:	e010      	b.n	8005790 <OLED_Settings_Draw+0xec>
        }
        else
        {
            ssd1306_SetCursor(2, y);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	2002      	movs	r0, #2
 8005776:	f000 fef3 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, White);
 800577a:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <OLED_Settings_Draw+0x128>)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005782:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	9200      	str	r2, [sp, #0]
 800578a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800578c:	f000 fec2 	bl	8006514 <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <OLED_Settings_Draw+0x120>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	461a      	mov	r2, r3
 8005798:	2303      	movs	r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4413      	add	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d9b8      	bls.n	8005720 <OLED_Settings_Draw+0x7c>
    }

    ssd1306_UpdateScreen();
 80057ae:	f000 fda7 	bl	8006300 <ssd1306_UpdateScreen>
}
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20004b39 	.word	0x20004b39
 80057bc:	20004b41 	.word	0x20004b41
 80057c0:	080253dc 	.word	0x080253dc
 80057c4:	200000a4 	.word	0x200000a4
 80057c8:	20004b28 	.word	0x20004b28
 80057cc:	20000088 	.word	0x20000088

080057d0 <OLED_Draw_Edit>:

// --- Отображение IP/Mask/GW при редактировании ---
static void OLED_Draw_Edit()
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08d      	sub	sp, #52	@ 0x34
 80057d4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80057d6:	2000      	movs	r0, #0
 80057d8:	f000 fd7a 	bl	80062d0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80057dc:	2340      	movs	r3, #64	@ 0x40
 80057de:	617b      	str	r3, [r7, #20]
    const int SH = SSD1306_ROTATED_HEIGHT;
 80057e0:	2380      	movs	r3, #128	@ 0x80
 80057e2:	613b      	str	r3, [r7, #16]

    // Заголовок по центру
    int title_x = (SW / 2) - ((int)strlen(edit_title) * menu_font->width / 2);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	0fda      	lsrs	r2, r3, #31
 80057e8:	4413      	add	r3, r2
 80057ea:	105b      	asrs	r3, r3, #1
 80057ec:	461c      	mov	r4, r3
 80057ee:	4866      	ldr	r0, [pc, #408]	@ (8005988 <OLED_Draw_Edit+0x1b8>)
 80057f0:	f7fa fcf4 	bl	80001dc <strlen>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b64      	ldr	r3, [pc, #400]	@ (800598c <OLED_Draw_Edit+0x1bc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	0fda      	lsrs	r2, r3, #31
 8005804:	4413      	add	r3, r2
 8005806:	105b      	asrs	r3, r3, #1
 8005808:	425b      	negs	r3, r3
 800580a:	4423      	add	r3, r4
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
    if(title_x < 0) title_x = 0;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	da01      	bge.n	8005818 <OLED_Draw_Edit+0x48>
 8005814:	2300      	movs	r3, #0
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
    ssd1306_SetCursor(title_x, 2);
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fe9e 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString(edit_title, *menu_font, White);
 8005824:	4b59      	ldr	r3, [pc, #356]	@ (800598c <OLED_Draw_Edit+0x1bc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2201      	movs	r2, #1
 800582a:	9200      	str	r2, [sp, #0]
 800582c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800582e:	4856      	ldr	r0, [pc, #344]	@ (8005988 <OLED_Draw_Edit+0x1b8>)
 8005830:	f000 fe70 	bl	8006514 <ssd1306_WriteString>

    // Отображение IP адреса в столбик по центру
    int start_y = 15;
 8005834:	230f      	movs	r3, #15
 8005836:	623b      	str	r3, [r7, #32]
    int part_spacing = edit_font->height + 2;
 8005838:	4b55      	ldr	r3, [pc, #340]	@ (8005990 <OLED_Draw_Edit+0x1c0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	3302      	adds	r3, #2
 8005840:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 4; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e066      	b.n	8005916 <OLED_Draw_Edit+0x146>
    {
        char part_str[4];
        snprintf(part_str, sizeof(part_str), "%d", edit_parts[i]);
 8005848:	4a52      	ldr	r2, [pc, #328]	@ (8005994 <OLED_Draw_Edit+0x1c4>)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	1d38      	adds	r0, r7, #4
 8005852:	4a51      	ldr	r2, [pc, #324]	@ (8005998 <OLED_Draw_Edit+0x1c8>)
 8005854:	2104      	movs	r1, #4
 8005856:	f01c fd69 	bl	802232c <sniprintf>

        // Центрирование по горизонтали
        int part_width = strlen(part_str) * edit_font->width;
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f7fa fcbd 	bl	80001dc <strlen>
 8005862:	4602      	mov	r2, r0
 8005864:	4b4a      	ldr	r3, [pc, #296]	@ (8005990 <OLED_Draw_Edit+0x1c0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	60bb      	str	r3, [r7, #8]
        int part_x = (SW / 2) - (part_width / 2);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	0fda      	lsrs	r2, r3, #31
 8005874:	4413      	add	r3, r2
 8005876:	105b      	asrs	r3, r3, #1
 8005878:	4619      	mov	r1, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0fda      	lsrs	r2, r3, #31
 800587e:	4413      	add	r3, r2
 8005880:	105b      	asrs	r3, r3, #1
 8005882:	425b      	negs	r3, r3
 8005884:	440b      	add	r3, r1
 8005886:	61bb      	str	r3, [r7, #24]
        if(part_x < 0) part_x = 0;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da01      	bge.n	8005892 <OLED_Draw_Edit+0xc2>
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]

        // Подсветка текущей части
        if(i == edit_digit)
 8005892:	4b42      	ldr	r3, [pc, #264]	@ (800599c <OLED_Draw_Edit+0x1cc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	429a      	cmp	r2, r3
 800589a:	d125      	bne.n	80058e8 <OLED_Draw_Edit+0x118>
        {
            ssd1306_FillRect(part_x - 2, start_y - 1, part_width + 4, edit_font->height + 2, White);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	3b02      	subs	r3, #2
 80058a2:	b2d8      	uxtb	r0, r3
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b2d9      	uxtb	r1, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	3304      	adds	r3, #4
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <OLED_Draw_Edit+0x1c0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	3302      	adds	r3, #2
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2401      	movs	r4, #1
 80058c0:	9400      	str	r4, [sp, #0]
 80058c2:	f000 ffc1 	bl	8006848 <ssd1306_FillRect>
            ssd1306_SetCursor(part_x, start_y);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fe45 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, Black);
 80058d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005990 <OLED_Draw_Edit+0x1c0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1d38      	adds	r0, r7, #4
 80058dc:	2200      	movs	r2, #0
 80058de:	9200      	str	r2, [sp, #0]
 80058e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e2:	f000 fe17 	bl	8006514 <ssd1306_WriteString>
 80058e6:	e00f      	b.n	8005908 <OLED_Draw_Edit+0x138>
        }
        else
        {
            ssd1306_SetCursor(part_x, start_y);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fe34 	bl	8006560 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, White);
 80058f8:	4b25      	ldr	r3, [pc, #148]	@ (8005990 <OLED_Draw_Edit+0x1c0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	1d38      	adds	r0, r7, #4
 80058fe:	2201      	movs	r2, #1
 8005900:	9200      	str	r2, [sp, #0]
 8005902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005904:	f000 fe06 	bl	8006514 <ssd1306_WriteString>
        }

        start_y += part_spacing;
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < 4; i++)
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b03      	cmp	r3, #3
 800591a:	dd95      	ble.n	8005848 <OLED_Draw_Edit+0x78>
    }

    // Инструкция внизу
    ssd1306_SetCursor(0, SH - 30);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	3b1e      	subs	r3, #30
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	2000      	movs	r0, #0
 8005928:	f000 fe1a 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("Up/Dn:", *menu_font, White);
 800592c:	4b17      	ldr	r3, [pc, #92]	@ (800598c <OLED_Draw_Edit+0x1bc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	9200      	str	r2, [sp, #0]
 8005934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005936:	481a      	ldr	r0, [pc, #104]	@ (80059a0 <OLED_Draw_Edit+0x1d0>)
 8005938:	f000 fdec 	bl	8006514 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 20);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3b14      	subs	r3, #20
 8005942:	b2db      	uxtb	r3, r3
 8005944:	4619      	mov	r1, r3
 8005946:	2000      	movs	r0, #0
 8005948:	f000 fe0a 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("Change", *menu_font, White);
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <OLED_Draw_Edit+0x1bc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	9200      	str	r2, [sp, #0]
 8005954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005956:	4813      	ldr	r0, [pc, #76]	@ (80059a4 <OLED_Draw_Edit+0x1d4>)
 8005958:	f000 fddc 	bl	8006514 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 10);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	3b0a      	subs	r3, #10
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	2000      	movs	r0, #0
 8005968:	f000 fdfa 	bl	8006560 <ssd1306_SetCursor>
    ssd1306_WriteString("Mid- Next", *menu_font, White);
 800596c:	4b07      	ldr	r3, [pc, #28]	@ (800598c <OLED_Draw_Edit+0x1bc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	9200      	str	r2, [sp, #0]
 8005974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005976:	480c      	ldr	r0, [pc, #48]	@ (80059a8 <OLED_Draw_Edit+0x1d8>)
 8005978:	f000 fdcc 	bl	8006514 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800597c:	f000 fcc0 	bl	8006300 <ssd1306_UpdateScreen>
}
 8005980:	bf00      	nop
 8005982:	372c      	adds	r7, #44	@ 0x2c
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	200000b0 	.word	0x200000b0
 800598c:	200000a4 	.word	0x200000a4
 8005990:	200000a8 	.word	0x200000a8
 8005994:	200000ac 	.word	0x200000ac
 8005998:	080253e8 	.word	0x080253e8
 800599c:	20004b2c 	.word	0x20004b2c
 80059a0:	080253ec 	.word	0x080253ec
 80059a4:	080253f4 	.word	0x080253f4
 80059a8:	080253fc 	.word	0x080253fc

080059ac <update_activity_time>:

// Обновление времени активности
static void update_activity_time(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
    last_activity_time = HAL_GetTick();
 80059b0:	f001 f80c 	bl	80069cc <HAL_GetTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a02      	ldr	r2, [pc, #8]	@ (80059c0 <update_activity_time+0x14>)
 80059b8:	6013      	str	r3, [r2, #0]
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20004b34 	.word	0x20004b34

080059c4 <change_edit_value>:

// Изменение значения с учетом удержания
static void change_edit_value(int delta)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80059cc:	f000 fffe 	bl	80069cc <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]
    static uint32_t last_change_time = 0;
    static uint32_t change_delay = 300;

    if(!button_held)
 80059d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <change_edit_value+0x80>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <change_edit_value+0x34>
    {
        edit_parts[edit_digit] += delta;
 80059da:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <change_edit_value+0x84>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <change_edit_value+0x88>)
 80059e0:	5cd1      	ldrb	r1, [r2, r3]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b18      	ldr	r3, [pc, #96]	@ (8005a48 <change_edit_value+0x84>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	440a      	add	r2, r1
 80059ec:	b2d1      	uxtb	r1, r2
 80059ee:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <change_edit_value+0x88>)
 80059f0:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;
        OLED_Draw_Edit();
 80059f2:	f7ff feed 	bl	80057d0 <OLED_Draw_Edit>
        return;
 80059f6:	e021      	b.n	8005a3c <change_edit_value+0x78>
    }

    if(now - last_change_time > change_delay)
 80059f8:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <change_edit_value+0x8c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <change_edit_value+0x90>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d919      	bls.n	8005a3c <change_edit_value+0x78>
    {
        edit_parts[edit_digit] += delta;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <change_edit_value+0x84>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a4c <change_edit_value+0x88>)
 8005a0e:	5cd1      	ldrb	r1, [r2, r3]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <change_edit_value+0x84>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	440a      	add	r2, r1
 8005a1a:	b2d1      	uxtb	r1, r2
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a4c <change_edit_value+0x88>)
 8005a1e:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;

        if(change_delay > 50) change_delay -= 10;
 8005a20:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <change_edit_value+0x90>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b32      	cmp	r3, #50	@ 0x32
 8005a26:	d904      	bls.n	8005a32 <change_edit_value+0x6e>
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <change_edit_value+0x90>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3b0a      	subs	r3, #10
 8005a2e:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <change_edit_value+0x90>)
 8005a30:	6013      	str	r3, [r2, #0]

        last_change_time = now;
 8005a32:	4a07      	ldr	r2, [pc, #28]	@ (8005a50 <change_edit_value+0x8c>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6013      	str	r3, [r2, #0]
        OLED_Draw_Edit();
 8005a38:	f7ff feca 	bl	80057d0 <OLED_Draw_Edit>
    }
}
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20004b38 	.word	0x20004b38
 8005a48:	20004b2c 	.word	0x20004b2c
 8005a4c:	200000ac 	.word	0x200000ac
 8005a50:	20004b4c 	.word	0x20004b4c
 8005a54:	200000c4 	.word	0x200000c4

08005a58 <OLED_Settings_MoveUp>:

// --- Навигация меню ---
void OLED_Settings_MoveUp(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005a5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ac4 <OLED_Settings_MoveUp+0x6c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02d      	beq.n	8005ac0 <OLED_Settings_MoveUp+0x68>

    update_activity_time();
 8005a64:	f7ff ffa2 	bl	80059ac <update_activity_time>

    if(confirm_active) {
 8005a68:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <OLED_Settings_MoveUp+0x70>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <OLED_Settings_MoveUp+0x24>
        confirm_selection = 0; // Yes (слева)
 8005a70:	4b16      	ldr	r3, [pc, #88]	@ (8005acc <OLED_Settings_MoveUp+0x74>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 8005a76:	f7fe ffb3 	bl	80049e0 <OLED_Draw_Confirm>
        return;
 8005a7a:	e022      	b.n	8005ac2 <OLED_Settings_MoveUp+0x6a>
    }

    if (submenu_active) {
 8005a7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <OLED_Settings_MoveUp+0x78>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <OLED_Settings_MoveUp+0x38>
        submenu_index = 0; // всегда 0/1
 8005a84:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <OLED_Settings_MoveUp+0x7c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
        OLED_Draw_Submenu();
 8005a8a:	f7ff f911 	bl	8004cb0 <OLED_Draw_Submenu>
        return;
 8005a8e:	e018      	b.n	8005ac2 <OLED_Settings_MoveUp+0x6a>
    }

    if(editing_active)
 8005a90:	4b11      	ldr	r3, [pc, #68]	@ (8005ad8 <OLED_Settings_MoveUp+0x80>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <OLED_Settings_MoveUp+0x48>
    {
        change_edit_value(1);
 8005a98:	2001      	movs	r0, #1
 8005a9a:	f7ff ff93 	bl	80059c4 <change_edit_value>
        return;
 8005a9e:	e010      	b.n	8005ac2 <OLED_Settings_MoveUp+0x6a>
    }

    if(selected_index > 0)
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8005adc <OLED_Settings_MoveUp+0x84>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd05      	ble.n	8005ab4 <OLED_Settings_MoveUp+0x5c>
        selected_index--;
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <OLED_Settings_MoveUp+0x84>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a0b      	ldr	r2, [pc, #44]	@ (8005adc <OLED_Settings_MoveUp+0x84>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e002      	b.n	8005aba <OLED_Settings_MoveUp+0x62>
    else
        selected_index = MENU_ITEMS_COUNT - 1;
 8005ab4:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <OLED_Settings_MoveUp+0x84>)
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 8005aba:	f7ff fdf3 	bl	80056a4 <OLED_Settings_Draw>
 8005abe:	e000      	b.n	8005ac2 <OLED_Settings_MoveUp+0x6a>
    if(!settings_active) return;
 8005ac0:	bf00      	nop
}
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20004b04 	.word	0x20004b04
 8005ac8:	20004b39 	.word	0x20004b39
 8005acc:	20004b3c 	.word	0x20004b3c
 8005ad0:	20004b41 	.word	0x20004b41
 8005ad4:	20004b44 	.word	0x20004b44
 8005ad8:	20004b30 	.word	0x20004b30
 8005adc:	20004b28 	.word	0x20004b28

08005ae0 <OLED_Settings_MoveDown>:

void OLED_Settings_MoveDown(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b50 <OLED_Settings_MoveDown+0x70>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02e      	beq.n	8005b4a <OLED_Settings_MoveDown+0x6a>

    update_activity_time();
 8005aec:	f7ff ff5e 	bl	80059ac <update_activity_time>

    if(confirm_active) {
 8005af0:	4b18      	ldr	r3, [pc, #96]	@ (8005b54 <OLED_Settings_MoveDown+0x74>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <OLED_Settings_MoveDown+0x24>
        confirm_selection = 1; // No (справа)
 8005af8:	4b17      	ldr	r3, [pc, #92]	@ (8005b58 <OLED_Settings_MoveDown+0x78>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 8005afe:	f7fe ff6f 	bl	80049e0 <OLED_Draw_Confirm>
        return;
 8005b02:	e023      	b.n	8005b4c <OLED_Settings_MoveDown+0x6c>
    }

    if (submenu_active) {
 8005b04:	4b15      	ldr	r3, [pc, #84]	@ (8005b5c <OLED_Settings_MoveDown+0x7c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <OLED_Settings_MoveDown+0x38>
        submenu_index = 1; // всегда 0/1
 8005b0c:	4b14      	ldr	r3, [pc, #80]	@ (8005b60 <OLED_Settings_MoveDown+0x80>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
        OLED_Draw_Submenu();
 8005b12:	f7ff f8cd 	bl	8004cb0 <OLED_Draw_Submenu>
        return;
 8005b16:	e019      	b.n	8005b4c <OLED_Settings_MoveDown+0x6c>
    }

    if(editing_active)
 8005b18:	4b12      	ldr	r3, [pc, #72]	@ (8005b64 <OLED_Settings_MoveDown+0x84>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <OLED_Settings_MoveDown+0x4a>
    {
        change_edit_value(-1);
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	f7ff ff4e 	bl	80059c4 <change_edit_value>
        return;
 8005b28:	e010      	b.n	8005b4c <OLED_Settings_MoveDown+0x6c>
    }

    if(selected_index < MENU_ITEMS_COUNT - 1)
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b68 <OLED_Settings_MoveDown+0x88>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d805      	bhi.n	8005b3e <OLED_Settings_MoveDown+0x5e>
        selected_index++;
 8005b32:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <OLED_Settings_MoveDown+0x88>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a0b      	ldr	r2, [pc, #44]	@ (8005b68 <OLED_Settings_MoveDown+0x88>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e002      	b.n	8005b44 <OLED_Settings_MoveDown+0x64>
    else
        selected_index = 0;
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <OLED_Settings_MoveDown+0x88>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 8005b44:	f7ff fdae 	bl	80056a4 <OLED_Settings_Draw>
 8005b48:	e000      	b.n	8005b4c <OLED_Settings_MoveDown+0x6c>
    if(!settings_active) return;
 8005b4a:	bf00      	nop
}
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20004b04 	.word	0x20004b04
 8005b54:	20004b39 	.word	0x20004b39
 8005b58:	20004b3c 	.word	0x20004b3c
 8005b5c:	20004b41 	.word	0x20004b41
 8005b60:	20004b44 	.word	0x20004b44
 8005b64:	20004b30 	.word	0x20004b30
 8005b68:	20004b28 	.word	0x20004b28

08005b6c <OLED_Settings_Select>:
// --- Выбор пункта меню ---
void OLED_Settings_Select(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005b72:	4ba8      	ldr	r3, [pc, #672]	@ (8005e14 <OLED_Settings_Select+0x2a8>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 81ca 	beq.w	8005f10 <OLED_Settings_Select+0x3a4>

    update_activity_time();
 8005b7c:	f7ff ff16 	bl	80059ac <update_activity_time>

    if(confirm_active) {
 8005b80:	4ba5      	ldr	r3, [pc, #660]	@ (8005e18 <OLED_Settings_Select+0x2ac>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8087 	beq.w	8005c98 <OLED_Settings_Select+0x12c>
        if(confirm_selection == 0) {
 8005b8a:	4ba4      	ldr	r3, [pc, #656]	@ (8005e1c <OLED_Settings_Select+0x2b0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d173      	bne.n	8005c7a <OLED_Settings_Select+0x10e>
            // Yes - применяем/выполняем действие в зависимости от типа
            switch (confirm_type) {
 8005b92:	4ba3      	ldr	r3, [pc, #652]	@ (8005e20 <OLED_Settings_Select+0x2b4>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d86d      	bhi.n	8005c78 <OLED_Settings_Select+0x10c>
 8005b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <OLED_Settings_Select+0x38>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bc1 	.word	0x08005bc1
 8005bac:	08005bc1 	.word	0x08005bc1
 8005bb0:	08005bc7 	.word	0x08005bc7
 8005bb4:	08005bc7 	.word	0x08005bc7
 8005bb8:	08005bcd 	.word	0x08005bcd
 8005bbc:	08005bd1 	.word	0x08005bd1
                case CONFIRM_APPLY_IP:
                case CONFIRM_APPLY_MASK:
                case CONFIRM_APPLY_GW:
                    Apply_Network_Settings();
 8005bc0:	f7ff fa28 	bl	8005014 <Apply_Network_Settings>
                    break;
 8005bc4:	e059      	b.n	8005c7a <OLED_Settings_Select+0x10e>
                case CONFIRM_DHCP_ENABLE:
                case CONFIRM_DHCP_DISABLE:
                    DHCP_Apply();
 8005bc6:	f7ff fc49 	bl	800545c <DHCP_Apply>
                    break;
 8005bca:	e056      	b.n	8005c7a <OLED_Settings_Select+0x10e>
                case CONFIRM_RESET_MCU:
                    NVIC_SystemReset();
 8005bcc:	f7fe fec4 	bl	8004958 <__NVIC_SystemReset>
                    break;
                case CONFIRM_FACTORY_RESET: {
                    // Устанавливаем заводские сетевые настройки
                    last_ip[0] = 192; last_ip[1] = 168; last_ip[2] = 0; last_ip[3] = 254;
 8005bd0:	4b94      	ldr	r3, [pc, #592]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005bd2:	22c0      	movs	r2, #192	@ 0xc0
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	4b93      	ldr	r3, [pc, #588]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005bd8:	22a8      	movs	r2, #168	@ 0xa8
 8005bda:	705a      	strb	r2, [r3, #1]
 8005bdc:	4b91      	ldr	r3, [pc, #580]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	709a      	strb	r2, [r3, #2]
 8005be2:	4b90      	ldr	r3, [pc, #576]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005be4:	22fe      	movs	r2, #254	@ 0xfe
 8005be6:	70da      	strb	r2, [r3, #3]
                    last_mask[0] = 255; last_mask[1] = 255; last_mask[2] = 255; last_mask[3] = 0;
 8005be8:	4b8f      	ldr	r3, [pc, #572]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	4b8e      	ldr	r3, [pc, #568]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005bf0:	22ff      	movs	r2, #255	@ 0xff
 8005bf2:	705a      	strb	r2, [r3, #1]
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005bf6:	22ff      	movs	r2, #255	@ 0xff
 8005bf8:	709a      	strb	r2, [r3, #2]
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	70da      	strb	r2, [r3, #3]
                    last_gw[0] = 192; last_gw[1] = 168; last_gw[2] = 0; last_gw[3] = 1;
 8005c00:	4b8a      	ldr	r3, [pc, #552]	@ (8005e2c <OLED_Settings_Select+0x2c0>)
 8005c02:	22c0      	movs	r2, #192	@ 0xc0
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	4b89      	ldr	r3, [pc, #548]	@ (8005e2c <OLED_Settings_Select+0x2c0>)
 8005c08:	22a8      	movs	r2, #168	@ 0xa8
 8005c0a:	705a      	strb	r2, [r3, #1]
 8005c0c:	4b87      	ldr	r3, [pc, #540]	@ (8005e2c <OLED_Settings_Select+0x2c0>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	709a      	strb	r2, [r3, #2]
 8005c12:	4b86      	ldr	r3, [pc, #536]	@ (8005e2c <OLED_Settings_Select+0x2c0>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	70da      	strb	r2, [r3, #3]
                    dhcp_on = false;
 8005c18:	4b85      	ldr	r3, [pc, #532]	@ (8005e30 <OLED_Settings_Select+0x2c4>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
                    Apply_Network_Settings();
 8005c1e:	f7ff f9f9 	bl	8005014 <Apply_Network_Settings>

                    // Обнуляем RTC
                    RTC_TimeTypeDef t = {0};
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	609a      	str	r2, [r3, #8]
                    t.Hours = 0; t.Minutes = 0; t.Seconds = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	723b      	strb	r3, [r7, #8]
 8005c32:	2300      	movs	r3, #0
 8005c34:	727b      	strb	r3, [r7, #9]
 8005c36:	2300      	movs	r3, #0
 8005c38:	72bb      	strb	r3, [r7, #10]
                    t.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
                    t.StoreOperation = RTC_STOREOPERATION_RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
                    HAL_RTC_SetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	2200      	movs	r2, #0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	487a      	ldr	r0, [pc, #488]	@ (8005e34 <OLED_Settings_Select+0x2c8>)
 8005c4c:	f004 ff6a 	bl	800ab24 <HAL_RTC_SetTime>
                    RTC_DateTypeDef d = {0};
 8005c50:	2300      	movs	r3, #0
 8005c52:	607b      	str	r3, [r7, #4]
                    d.Year = 0; d.Month = RTC_MONTH_JANUARY; d.Date = 1; d.WeekDay = RTC_WEEKDAY_MONDAY;
 8005c54:	2300      	movs	r3, #0
 8005c56:	71fb      	strb	r3, [r7, #7]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	717b      	strb	r3, [r7, #5]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	71bb      	strb	r3, [r7, #6]
 8005c60:	2301      	movs	r3, #1
 8005c62:	713b      	strb	r3, [r7, #4]
                    HAL_RTC_SetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	2200      	movs	r2, #0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4872      	ldr	r0, [pc, #456]	@ (8005e34 <OLED_Settings_Select+0x2c8>)
 8005c6c:	f005 f846 	bl	800acfc <HAL_RTC_SetDate>

                    // Чистим backup-регистры
                    Settings_Clear_Backup();
 8005c70:	f7fd fb62 	bl	8003338 <Settings_Clear_Backup>

                    // Полная перезагрузка
                    NVIC_SystemReset();
 8005c74:	f7fe fe70 	bl	8004958 <__NVIC_SystemReset>
                    break;
                }
                default:
                    break;
 8005c78:	bf00      	nop
            }
        }
        confirm_active = false;
 8005c7a:	4b67      	ldr	r3, [pc, #412]	@ (8005e18 <OLED_Settings_Select+0x2ac>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
        confirm_type = CONFIRM_NONE;
 8005c80:	4b67      	ldr	r3, [pc, #412]	@ (8005e20 <OLED_Settings_Select+0x2b4>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
        submenu_active = false;
 8005c86:	4b6c      	ldr	r3, [pc, #432]	@ (8005e38 <OLED_Settings_Select+0x2cc>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
        submenu_type = SUBMENU_NONE;
 8005c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8005e3c <OLED_Settings_Select+0x2d0>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8005c92:	f7ff fd07 	bl	80056a4 <OLED_Settings_Draw>
        return;
 8005c96:	e13e      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
    }

    if (submenu_active) {
 8005c98:	4b67      	ldr	r3, [pc, #412]	@ (8005e38 <OLED_Settings_Select+0x2cc>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d036      	beq.n	8005d0e <OLED_Settings_Select+0x1a2>
        if (submenu_type == SUBMENU_DHCP) {
 8005ca0:	4b66      	ldr	r3, [pc, #408]	@ (8005e3c <OLED_Settings_Select+0x2d0>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d114      	bne.n	8005cd2 <OLED_Settings_Select+0x166>
            dhcp_on = (submenu_index == 0);
 8005ca8:	4b65      	ldr	r3, [pc, #404]	@ (8005e40 <OLED_Settings_Select+0x2d4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8005e30 <OLED_Settings_Select+0x2c4>)
 8005cba:	701a      	strb	r2, [r3, #0]
            // Применяем без подтверждения
            DHCP_Apply();
 8005cbc:	f7ff fbce 	bl	800545c <DHCP_Apply>
            submenu_active = false;
 8005cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8005e38 <OLED_Settings_Select+0x2cc>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_NONE;
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e3c <OLED_Settings_Select+0x2d0>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
            OLED_Settings_Draw();
 8005ccc:	f7ff fcea 	bl	80056a4 <OLED_Settings_Draw>
            Settings_Save_Rotation(rot180);
            submenu_active = false;
            submenu_type = SUBMENU_NONE;
            OLED_Settings_Draw();
        }
        return;
 8005cd0:	e120      	b.n	8005f14 <OLED_Settings_Select+0x3a8>
        } else if (submenu_type == SUBMENU_ROTATION) {
 8005cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005e3c <OLED_Settings_Select+0x2d0>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	f040 811c 	bne.w	8005f14 <OLED_Settings_Select+0x3a8>
            uint8_t rot180 = (submenu_index == 1) ? 1 : 0;
 8005cdc:	4b58      	ldr	r3, [pc, #352]	@ (8005e40 <OLED_Settings_Select+0x2d4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	75fb      	strb	r3, [r7, #23]
            ssd1306_SetRotation180(rot180);
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 face 	bl	8006290 <ssd1306_SetRotation180>
            Settings_Save_Rotation(rot180);
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fd faec 	bl	80032d4 <Settings_Save_Rotation>
            submenu_active = false;
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e38 <OLED_Settings_Select+0x2cc>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_NONE;
 8005d02:	4b4e      	ldr	r3, [pc, #312]	@ (8005e3c <OLED_Settings_Select+0x2d0>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
            OLED_Settings_Draw();
 8005d08:	f7ff fccc 	bl	80056a4 <OLED_Settings_Draw>
        return;
 8005d0c:	e102      	b.n	8005f14 <OLED_Settings_Select+0x3a8>
    }

    if(editing_active)
 8005d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e44 <OLED_Settings_Select+0x2d8>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03a      	beq.n	8005d8c <OLED_Settings_Select+0x220>
    {
        edit_digit++;
 8005d16:	4b4c      	ldr	r3, [pc, #304]	@ (8005e48 <OLED_Settings_Select+0x2dc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e48 <OLED_Settings_Select+0x2dc>)
 8005d1e:	6013      	str	r3, [r2, #0]
        if(edit_digit > 3)
 8005d20:	4b49      	ldr	r3, [pc, #292]	@ (8005e48 <OLED_Settings_Select+0x2dc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	dd2e      	ble.n	8005d86 <OLED_Settings_Select+0x21a>
        {
            editing_active = false;
 8005d28:	4b46      	ldr	r3, [pc, #280]	@ (8005e44 <OLED_Settings_Select+0x2d8>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]

            // Сохраняем изменения и показываем подтверждение
            switch(selected_index)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	@ (8005e4c <OLED_Settings_Select+0x2e0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d016      	beq.n	8005d64 <OLED_Settings_Select+0x1f8>
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	dc1c      	bgt.n	8005d74 <OLED_Settings_Select+0x208>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <OLED_Settings_Select+0x1d8>
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d008      	beq.n	8005d54 <OLED_Settings_Select+0x1e8>
 8005d42:	e017      	b.n	8005d74 <OLED_Settings_Select+0x208>
            {
                case 0:
                    memcpy(last_ip, edit_parts, 4);
 8005d44:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <OLED_Settings_Select+0x2e4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a36      	ldr	r2, [pc, #216]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005d4a:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_IP;
 8005d4c:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <OLED_Settings_Select+0x2b4>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
                    break;
 8005d52:	e00f      	b.n	8005d74 <OLED_Settings_Select+0x208>
                case 1:
                    memcpy(last_mask, edit_parts, 4);
 8005d54:	4b3e      	ldr	r3, [pc, #248]	@ (8005e50 <OLED_Settings_Select+0x2e4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005d5a:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_MASK;
 8005d5c:	4b30      	ldr	r3, [pc, #192]	@ (8005e20 <OLED_Settings_Select+0x2b4>)
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
                    break;
 8005d62:	e007      	b.n	8005d74 <OLED_Settings_Select+0x208>
                case 2:
                    memcpy(last_gw, edit_parts, 4);
 8005d64:	4b3a      	ldr	r3, [pc, #232]	@ (8005e50 <OLED_Settings_Select+0x2e4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a30      	ldr	r2, [pc, #192]	@ (8005e2c <OLED_Settings_Select+0x2c0>)
 8005d6a:	6013      	str	r3, [r2, #0]
                    confirm_type = CONFIRM_APPLY_GW;
 8005d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005e20 <OLED_Settings_Select+0x2b4>)
 8005d6e:	2203      	movs	r2, #3
 8005d70:	701a      	strb	r2, [r3, #0]
                    break;
 8005d72:	bf00      	nop
            }

            confirm_active = true;
 8005d74:	4b28      	ldr	r3, [pc, #160]	@ (8005e18 <OLED_Settings_Select+0x2ac>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005d7a:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <OLED_Settings_Select+0x2b0>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005d80:	f7fe fe2e 	bl	80049e0 <OLED_Draw_Confirm>
        }
        else
            OLED_Draw_Edit();
        return;
 8005d84:	e0c7      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
            OLED_Draw_Edit();
 8005d86:	f7ff fd23 	bl	80057d0 <OLED_Draw_Edit>
        return;
 8005d8a:	e0c4      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
    }

    switch(selected_index)
 8005d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <OLED_Settings_Select+0x2e0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b06      	cmp	r3, #6
 8005d92:	f200 80c0 	bhi.w	8005f16 <OLED_Settings_Select+0x3aa>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <OLED_Settings_Select+0x230>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db9 	.word	0x08005db9
 8005da0:	08005deb 	.word	0x08005deb
 8005da4:	08005e61 	.word	0x08005e61
 8005da8:	08005e93 	.word	0x08005e93
 8005dac:	08005eb9 	.word	0x08005eb9
 8005db0:	08005ed1 	.word	0x08005ed1
 8005db4:	08005ee9 	.word	0x08005ee9
    {
        case 0: // IP
            editing_active = true;
 8005db8:	4b22      	ldr	r3, [pc, #136]	@ (8005e44 <OLED_Settings_Select+0x2d8>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005dbe:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <OLED_Settings_Select+0x2dc>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set IP");
 8005dc4:	4b23      	ldr	r3, [pc, #140]	@ (8005e54 <OLED_Settings_Select+0x2e8>)
 8005dc6:	4a24      	ldr	r2, [pc, #144]	@ (8005e58 <OLED_Settings_Select+0x2ec>)
 8005dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dcc:	6018      	str	r0, [r3, #0]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	8019      	strh	r1, [r3, #0]
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	0c0a      	lsrs	r2, r1, #16
 8005dd6:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005dd8:	f7ff f818 	bl	8004e0c <Sync_From_Netif>
            memcpy(edit_parts, last_ip, 4);
 8005ddc:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <OLED_Settings_Select+0x2b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <OLED_Settings_Select+0x2e4>)
 8005de2:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005de4:	f7ff fcf4 	bl	80057d0 <OLED_Draw_Edit>
            break;
 8005de8:	e095      	b.n	8005f16 <OLED_Settings_Select+0x3aa>

        case 1: // Mask
            editing_active = true;
 8005dea:	4b16      	ldr	r3, [pc, #88]	@ (8005e44 <OLED_Settings_Select+0x2d8>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005df0:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <OLED_Settings_Select+0x2dc>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set Mask");
 8005df6:	4b17      	ldr	r3, [pc, #92]	@ (8005e54 <OLED_Settings_Select+0x2e8>)
 8005df8:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <OLED_Settings_Select+0x2f0>)
 8005dfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dfc:	c303      	stmia	r3!, {r0, r1}
 8005dfe:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005e00:	f7ff f804 	bl	8004e0c <Sync_From_Netif>
            memcpy(edit_parts, last_mask, 4);
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <OLED_Settings_Select+0x2bc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <OLED_Settings_Select+0x2e4>)
 8005e0a:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005e0c:	f7ff fce0 	bl	80057d0 <OLED_Draw_Edit>
            break;
 8005e10:	e081      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
 8005e12:	bf00      	nop
 8005e14:	20004b04 	.word	0x20004b04
 8005e18:	20004b39 	.word	0x20004b39
 8005e1c:	20004b3c 	.word	0x20004b3c
 8005e20:	20004b48 	.word	0x20004b48
 8005e24:	2000007c 	.word	0x2000007c
 8005e28:	20000080 	.word	0x20000080
 8005e2c:	20000084 	.word	0x20000084
 8005e30:	200000c0 	.word	0x200000c0
 8005e34:	200029c8 	.word	0x200029c8
 8005e38:	20004b41 	.word	0x20004b41
 8005e3c:	20004b40 	.word	0x20004b40
 8005e40:	20004b44 	.word	0x20004b44
 8005e44:	20004b30 	.word	0x20004b30
 8005e48:	20004b2c 	.word	0x20004b2c
 8005e4c:	20004b28 	.word	0x20004b28
 8005e50:	200000ac 	.word	0x200000ac
 8005e54:	200000b0 	.word	0x200000b0
 8005e58:	08025408 	.word	0x08025408
 8005e5c:	08025410 	.word	0x08025410

        case 2: // Gateway
            editing_active = true;
 8005e60:	4b2e      	ldr	r3, [pc, #184]	@ (8005f1c <OLED_Settings_Select+0x3b0>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005e66:	4b2e      	ldr	r3, [pc, #184]	@ (8005f20 <OLED_Settings_Select+0x3b4>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set GW");
 8005e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f24 <OLED_Settings_Select+0x3b8>)
 8005e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8005f28 <OLED_Settings_Select+0x3bc>)
 8005e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e74:	6018      	str	r0, [r3, #0]
 8005e76:	3304      	adds	r3, #4
 8005e78:	8019      	strh	r1, [r3, #0]
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	0c0a      	lsrs	r2, r1, #16
 8005e7e:	701a      	strb	r2, [r3, #0]
            Sync_From_Netif();
 8005e80:	f7fe ffc4 	bl	8004e0c <Sync_From_Netif>
            memcpy(edit_parts, last_gw, 4);
 8005e84:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <OLED_Settings_Select+0x3c0>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a29      	ldr	r2, [pc, #164]	@ (8005f30 <OLED_Settings_Select+0x3c4>)
 8005e8a:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005e8c:	f7ff fca0 	bl	80057d0 <OLED_Draw_Edit>
            break;
 8005e90:	e041      	b.n	8005f16 <OLED_Settings_Select+0x3aa>

        case 3: // DHCP
            submenu_active = true;
 8005e92:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <OLED_Settings_Select+0x3c8>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_DHCP;
 8005e98:	4b27      	ldr	r3, [pc, #156]	@ (8005f38 <OLED_Settings_Select+0x3cc>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
            submenu_index = dhcp_on ? 0 : 1;
 8005e9e:	4b27      	ldr	r3, [pc, #156]	@ (8005f3c <OLED_Settings_Select+0x3d0>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <OLED_Settings_Select+0x3d4>)
 8005eb0:	601a      	str	r2, [r3, #0]
            OLED_Draw_Submenu();
 8005eb2:	f7fe fefd 	bl	8004cb0 <OLED_Draw_Submenu>
            break;
 8005eb6:	e02e      	b.n	8005f16 <OLED_Settings_Select+0x3aa>

        case 4: // Reboot -> Программная перезагрузка MCU (без доп. действий)
            confirm_active = true;
 8005eb8:	4b22      	ldr	r3, [pc, #136]	@ (8005f44 <OLED_Settings_Select+0x3d8>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <OLED_Settings_Select+0x3dc>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
            confirm_type = CONFIRM_RESET_MCU;
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <OLED_Settings_Select+0x3e0>)
 8005ec6:	2206      	movs	r2, #6
 8005ec8:	701a      	strb	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005eca:	f7fe fd89 	bl	80049e0 <OLED_Draw_Confirm>
            break;
 8005ece:	e022      	b.n	8005f16 <OLED_Settings_Select+0x3aa>

        case 5: // Reset -> Factory Reset (заводские настройки)
            confirm_active = true;
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f44 <OLED_Settings_Select+0x3d8>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f48 <OLED_Settings_Select+0x3dc>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
            confirm_type = CONFIRM_FACTORY_RESET;
 8005edc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <OLED_Settings_Select+0x3e0>)
 8005ede:	2207      	movs	r2, #7
 8005ee0:	701a      	strb	r2, [r3, #0]
            OLED_Draw_Confirm();
 8005ee2:	f7fe fd7d 	bl	80049e0 <OLED_Draw_Confirm>
            break;
 8005ee6:	e016      	b.n	8005f16 <OLED_Settings_Select+0x3aa>

        case 6: // Set rotation
            submenu_active = true;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <OLED_Settings_Select+0x3c8>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
            submenu_type = SUBMENU_ROTATION;
 8005eee:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <OLED_Settings_Select+0x3cc>)
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	701a      	strb	r2, [r3, #0]
            submenu_index = ssd1306_GetRotation180() ? 1 : 0;
 8005ef4:	f000 f9e2 	bl	80062bc <ssd1306_GetRotation180>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b0e      	ldr	r3, [pc, #56]	@ (8005f40 <OLED_Settings_Select+0x3d4>)
 8005f08:	601a      	str	r2, [r3, #0]
            OLED_Draw_Submenu();
 8005f0a:	f7fe fed1 	bl	8004cb0 <OLED_Draw_Submenu>
            break;
 8005f0e:	e002      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
    if(!settings_active) return;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <OLED_Settings_Select+0x3aa>
        return;
 8005f14:	bf00      	nop
    }
}
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20004b30 	.word	0x20004b30
 8005f20:	20004b2c 	.word	0x20004b2c
 8005f24:	200000b0 	.word	0x200000b0
 8005f28:	0802541c 	.word	0x0802541c
 8005f2c:	20000084 	.word	0x20000084
 8005f30:	200000ac 	.word	0x200000ac
 8005f34:	20004b41 	.word	0x20004b41
 8005f38:	20004b40 	.word	0x20004b40
 8005f3c:	200000c0 	.word	0x200000c0
 8005f40:	20004b44 	.word	0x20004b44
 8005f44:	20004b39 	.word	0x20004b39
 8005f48:	20004b3c 	.word	0x20004b3c
 8005f4c:	20004b48 	.word	0x20004b48

08005f50 <OLED_Settings_Exit>:

// Выход из меню настроек
void OLED_Settings_Exit(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
    settings_active = false;
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <OLED_Settings_Exit+0x20>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
    editing_active = false;
 8005f5a:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <OLED_Settings_Exit+0x24>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <OLED_Settings_Exit+0x28>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20004b04 	.word	0x20004b04
 8005f74:	20004b30 	.word	0x20004b30
 8005f78:	20004b39 	.word	0x20004b39

08005f7c <OLED_Settings_TimeoutCheck>:

// Проверка таймаута бездействия
void OLED_Settings_TimeoutCheck(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 8005f82:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc0 <OLED_Settings_TimeoutCheck+0x44>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d015      	beq.n	8005fb6 <OLED_Settings_TimeoutCheck+0x3a>

    uint32_t now = HAL_GetTick();
 8005f8a:	f000 fd1f 	bl	80069cc <HAL_GetTick>
 8005f8e:	6078      	str	r0, [r7, #4]

    // Таймаут работает ТОЛЬКО если мы не в режиме редактирования и не в подтверждении
    if (!editing_active && !confirm_active && (now - last_activity_time) >= 10000)
 8005f90:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <OLED_Settings_TimeoutCheck+0x48>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <OLED_Settings_TimeoutCheck+0x3c>
 8005f98:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <OLED_Settings_TimeoutCheck+0x4c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <OLED_Settings_TimeoutCheck+0x3c>
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <OLED_Settings_TimeoutCheck+0x50>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d903      	bls.n	8005fb8 <OLED_Settings_TimeoutCheck+0x3c>
    {
        OLED_Settings_Exit();
 8005fb0:	f7ff ffce 	bl	8005f50 <OLED_Settings_Exit>
 8005fb4:	e000      	b.n	8005fb8 <OLED_Settings_TimeoutCheck+0x3c>
    if (!settings_active) return;
 8005fb6:	bf00      	nop
    }
}
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20004b04 	.word	0x20004b04
 8005fc4:	20004b30 	.word	0x20004b30
 8005fc8:	20004b39 	.word	0x20004b39
 8005fcc:	20004b34 	.word	0x20004b34

08005fd0 <OLED_UpdateDisplay>:
    button_held = held;
    if(!held) button_press_time = 0;
}

void OLED_UpdateDisplay(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
    static uint32_t last_display_update = 0;
    uint32_t now = HAL_GetTick();
 8005fd6:	f000 fcf9 	bl	80069cc <HAL_GetTick>
 8005fda:	6078      	str	r0, [r7, #4]

    if (now - last_display_update < 500) {
 8005fdc:	4b16      	ldr	r3, [pc, #88]	@ (8006038 <OLED_UpdateDisplay+0x68>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005fe8:	d321      	bcc.n	800602e <OLED_UpdateDisplay+0x5e>
        return;
    }
    last_display_update = now;
 8005fea:	4a13      	ldr	r2, [pc, #76]	@ (8006038 <OLED_UpdateDisplay+0x68>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6013      	str	r3, [r2, #0]

    if (settings_active) {
 8005ff0:	4b12      	ldr	r3, [pc, #72]	@ (800603c <OLED_UpdateDisplay+0x6c>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d017      	beq.n	8006028 <OLED_UpdateDisplay+0x58>
        if (confirm_active) {
 8005ff8:	4b11      	ldr	r3, [pc, #68]	@ (8006040 <OLED_UpdateDisplay+0x70>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <OLED_UpdateDisplay+0x36>
            OLED_Draw_Confirm();
 8006000:	f7fe fcee 	bl	80049e0 <OLED_Draw_Confirm>
 8006004:	e014      	b.n	8006030 <OLED_UpdateDisplay+0x60>
        }
        else if (editing_active) {
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <OLED_UpdateDisplay+0x74>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <OLED_UpdateDisplay+0x44>
            OLED_Draw_Edit();
 800600e:	f7ff fbdf 	bl	80057d0 <OLED_Draw_Edit>
 8006012:	e00d      	b.n	8006030 <OLED_UpdateDisplay+0x60>
        }
        else if (submenu_active) {
 8006014:	4b0c      	ldr	r3, [pc, #48]	@ (8006048 <OLED_UpdateDisplay+0x78>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <OLED_UpdateDisplay+0x52>
            OLED_Draw_Submenu();
 800601c:	f7fe fe48 	bl	8004cb0 <OLED_Draw_Submenu>
 8006020:	e006      	b.n	8006030 <OLED_UpdateDisplay+0x60>
        }
        else {
            OLED_Settings_Draw();
 8006022:	f7ff fb3f 	bl	80056a4 <OLED_Settings_Draw>
 8006026:	e003      	b.n	8006030 <OLED_UpdateDisplay+0x60>
        }
    }
    else {
        OLED_ShowCurrentPage();
 8006028:	f7fd fefe 	bl	8003e28 <OLED_ShowCurrentPage>
 800602c:	e000      	b.n	8006030 <OLED_UpdateDisplay+0x60>
        return;
 800602e:	bf00      	nop
    }
}
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20004b50 	.word	0x20004b50
 800603c:	20004b04 	.word	0x20004b04
 8006040:	20004b39 	.word	0x20004b39
 8006044:	20004b30 	.word	0x20004b30
 8006048:	20004b41 	.word	0x20004b41

0800604c <custom_get_value>:
static const u32_t custom_base_oid[] = { 1,3,6,1,4,1,62283,1 };



/* Колбэки для чтения переменных */
static s16_t custom_get_value(struct snmp_node_instance* instance, void* value) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage1;
 8006056:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <custom_get_value+0x24>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fb f8ba 	bl	80011d4 <__aeabi_f2uiz>
 8006060:	4602      	mov	r2, r0
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8006066:	2304      	movs	r3, #4
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20004ab4 	.word	0x20004ab4

08006074 <custom_get_var1>:

static s16_t custom_get_var1(struct snmp_node_instance* instance, void* value) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage2;
 800607e:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <custom_get_var1+0x24>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fb f8a6 	bl	80011d4 <__aeabi_f2uiz>
 8006088:	4602      	mov	r2, r0
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 800608e:	2304      	movs	r3, #4
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20004ab8 	.word	0x20004ab8

0800609c <custom_get_var2>:

static s16_t custom_get_var2(struct snmp_node_instance* instance, void* value) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = current;
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <custom_get_var2+0x24>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fb f892 	bl	80011d4 <__aeabi_f2uiz>
 80060b0:	4602      	mov	r2, r0
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060b6:	2304      	movs	r3, #4
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20004abc 	.word	0x20004abc

080060c4 <custom_get_var3>:

static s16_t custom_get_var3(struct snmp_node_instance* instance, void* value) {
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 123;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	227b      	movs	r2, #123	@ 0x7b
 80060d2:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060d4:	2304      	movs	r3, #4
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <custom_get_var4>:

static s16_t custom_get_var4(struct snmp_node_instance* instance, void* value) {
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 228;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	22e4      	movs	r2, #228	@ 0xe4
 80060ee:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80060f0:	2304      	movs	r3, #4
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <ssd1306_map_logical_to_physical>:
 */
// Optional 180° flip flag (in addition to the base 90° layout)
static uint8_t g_rotation_180 = 0;

// Map logical to physical with base 90° rotation plus optional 180° flip
static inline void ssd1306_map_logical_to_physical(uint8_t lx, uint8_t ly, uint8_t *px, uint8_t *py) {
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60ba      	str	r2, [r7, #8]
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	460b      	mov	r3, r1
 800610c:	73bb      	strb	r3, [r7, #14]
    if (!g_rotation_180) {
 800610e:	4b0e      	ldr	r3, [pc, #56]	@ (8006148 <ssd1306_map_logical_to_physical+0x4c>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <ssd1306_map_logical_to_physical+0x2e>
        *px = ly;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	7bba      	ldrb	r2, [r7, #14]
 800611a:	701a      	strb	r2, [r3, #0]
        *py = (uint8_t)(SSD1306_HEIGHT - 1 - lx);
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	701a      	strb	r2, [r3, #0]
    } else {
        // Additional 180° flip: mirror both axes relative to the 90° mapping
        *px = (uint8_t)(SSD1306_WIDTH - 1 - ly);
        *py = lx;
    }
}
 8006128:	e008      	b.n	800613c <ssd1306_map_logical_to_physical+0x40>
        *px = (uint8_t)(SSD1306_WIDTH - 1 - ly);
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	701a      	strb	r2, [r3, #0]
        *py = lx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	701a      	strb	r2, [r3, #0]
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20004b54 	.word	0x20004b54

0800614c <ssd1306_Reset>:


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af04      	add	r7, sp, #16
 800615e:	4603      	mov	r3, r0
 8006160:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	9302      	str	r3, [sp, #8]
 8006168:	2301      	movs	r3, #1
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2301      	movs	r3, #1
 8006172:	2200      	movs	r2, #0
 8006174:	2178      	movs	r1, #120	@ 0x78
 8006176:	4803      	ldr	r0, [pc, #12]	@ (8006184 <ssd1306_WriteCommand+0x2c>)
 8006178:	f003 fb90 	bl	800989c <HAL_I2C_Mem_Write>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20002974 	.word	0x20002974

08006188 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af04      	add	r7, sp, #16
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	2301      	movs	r3, #1
 80061a4:	2240      	movs	r2, #64	@ 0x40
 80061a6:	2178      	movs	r1, #120	@ 0x78
 80061a8:	4803      	ldr	r0, [pc, #12]	@ (80061b8 <ssd1306_WriteData+0x30>)
 80061aa:	f003 fb77 	bl	800989c <HAL_I2C_Mem_Write>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20002974 	.word	0x20002974

080061bc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80061c0:	f7ff ffc4 	bl	800614c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80061c4:	2064      	movs	r0, #100	@ 0x64
 80061c6:	f000 fc0b 	bl	80069e0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80061ca:	2000      	movs	r0, #0
 80061cc:	f000 fb1e 	bl	800680c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80061d0:	2020      	movs	r0, #32
 80061d2:	f7ff ffc1 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80061d6:	2000      	movs	r0, #0
 80061d8:	f7ff ffbe 	bl	8006158 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80061dc:	20b0      	movs	r0, #176	@ 0xb0
 80061de:	f7ff ffbb 	bl	8006158 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80061e2:	20c8      	movs	r0, #200	@ 0xc8
 80061e4:	f7ff ffb8 	bl	8006158 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7ff ffb5 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80061ee:	2010      	movs	r0, #16
 80061f0:	f7ff ffb2 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80061f4:	2040      	movs	r0, #64	@ 0x40
 80061f6:	f7ff ffaf 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80061fa:	20ff      	movs	r0, #255	@ 0xff
 80061fc:	f000 faf2 	bl	80067e4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006200:	20a1      	movs	r0, #161	@ 0xa1
 8006202:	f7ff ffa9 	bl	8006158 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006206:	20a6      	movs	r0, #166	@ 0xa6
 8006208:	f7ff ffa6 	bl	8006158 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800620c:	20a8      	movs	r0, #168	@ 0xa8
 800620e:	f7ff ffa3 	bl	8006158 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006212:	203f      	movs	r0, #63	@ 0x3f
 8006214:	f7ff ffa0 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006218:	20a4      	movs	r0, #164	@ 0xa4
 800621a:	f7ff ff9d 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800621e:	20d3      	movs	r0, #211	@ 0xd3
 8006220:	f7ff ff9a 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006224:	2000      	movs	r0, #0
 8006226:	f7ff ff97 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800622a:	20d5      	movs	r0, #213	@ 0xd5
 800622c:	f7ff ff94 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006230:	20f0      	movs	r0, #240	@ 0xf0
 8006232:	f7ff ff91 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006236:	20d9      	movs	r0, #217	@ 0xd9
 8006238:	f7ff ff8e 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800623c:	2022      	movs	r0, #34	@ 0x22
 800623e:	f7ff ff8b 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006242:	20da      	movs	r0, #218	@ 0xda
 8006244:	f7ff ff88 	bl	8006158 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006248:	2012      	movs	r0, #18
 800624a:	f7ff ff85 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800624e:	20db      	movs	r0, #219	@ 0xdb
 8006250:	f7ff ff82 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006254:	2020      	movs	r0, #32
 8006256:	f7ff ff7f 	bl	8006158 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800625a:	208d      	movs	r0, #141	@ 0x8d
 800625c:	f7ff ff7c 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006260:	2014      	movs	r0, #20
 8006262:	f7ff ff79 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006266:	2001      	movs	r0, #1
 8006268:	f000 fad0 	bl	800680c <ssd1306_SetDisplayOn>

    // Clear screen (logical)
    ssd1306_Fill(Black);
 800626c:	2000      	movs	r0, #0
 800626e:	f000 f82f 	bl	80062d0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006272:	f000 f845 	bl	8006300 <ssd1306_UpdateScreen>

    // Set default values for screen object (logical coords)
    SSD1306.CurrentX = 0;
 8006276:	4b05      	ldr	r3, [pc, #20]	@ (800628c <ssd1306_Init+0xd0>)
 8006278:	2200      	movs	r2, #0
 800627a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <ssd1306_Init+0xd0>)
 800627e:	2200      	movs	r2, #0
 8006280:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8006282:	4b02      	ldr	r3, [pc, #8]	@ (800628c <ssd1306_Init+0xd0>)
 8006284:	2201      	movs	r2, #1
 8006286:	711a      	strb	r2, [r3, #4]
}
 8006288:	bf00      	nop
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20004f58 	.word	0x20004f58

08006290 <ssd1306_SetRotation180>:

void ssd1306_SetRotation180(uint8_t enable) {
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
    g_rotation_180 = (enable ? 1 : 0);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <ssd1306_SetRotation180+0x28>)
 80062aa:	701a      	strb	r2, [r3, #0]
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20004b54 	.word	0x20004b54

080062bc <ssd1306_GetRotation180>:

uint8_t ssd1306_GetRotation180(void) {
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
    return g_rotation_180;
 80062c0:	4b02      	ldr	r3, [pc, #8]	@ (80062cc <ssd1306_GetRotation180+0x10>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	20004b54 	.word	0x20004b54

080062d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color (physical buffer fill) */
void ssd1306_Fill(SSD1306_COLOR color) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <ssd1306_Fill+0x14>
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <ssd1306_Fill+0x16>
 80062e4:	23ff      	movs	r3, #255	@ 0xff
 80062e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062ea:	4619      	mov	r1, r3
 80062ec:	4803      	ldr	r0, [pc, #12]	@ (80062fc <ssd1306_Fill+0x2c>)
 80062ee:	f01c f983 	bl	80225f8 <memset>
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20004b58 	.word	0x20004b58

08006300 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen (physical pages) */
void ssd1306_UpdateScreen(void) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
    // depends on the screen height (physical):
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006306:	2300      	movs	r3, #0
 8006308:	71fb      	strb	r3, [r7, #7]
 800630a:	e016      	b.n	800633a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	3b50      	subs	r3, #80	@ 0x50
 8006310:	b2db      	uxtb	r3, r3
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff20 	bl	8006158 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006318:	2000      	movs	r0, #0
 800631a:	f7ff ff1d 	bl	8006158 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800631e:	2010      	movs	r0, #16
 8006320:	f7ff ff1a 	bl	8006158 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	01db      	lsls	r3, r3, #7
 8006328:	4a08      	ldr	r2, [pc, #32]	@ (800634c <ssd1306_UpdateScreen+0x4c>)
 800632a:	4413      	add	r3, r2
 800632c:	2180      	movs	r1, #128	@ 0x80
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff2a 	bl	8006188 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	3301      	adds	r3, #1
 8006338:	71fb      	strb	r3, [r7, #7]
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b07      	cmp	r3, #7
 800633e:	d9e5      	bls.n	800630c <ssd1306_UpdateScreen+0xc>
    }
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20004b58 	.word	0x20004b58

08006350 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer (logical coords)
 * X => X Logical Coordinate (0..SSD1306_ROTATED_WIDTH-1)
 * Y => Y Logical Coordinate (0..SSD1306_ROTATED_HEIGHT-1)
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
 800635a:	460b      	mov	r3, r1
 800635c:	71bb      	strb	r3, [r7, #6]
 800635e:	4613      	mov	r3, r2
 8006360:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_ROTATED_WIDTH || y >= SSD1306_ROTATED_HEIGHT) {
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b3f      	cmp	r3, #63	@ 0x3f
 8006366:	d83c      	bhi.n	80063e2 <ssd1306_DrawPixel+0x92>
 8006368:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800636c:	2b00      	cmp	r3, #0
 800636e:	db38      	blt.n	80063e2 <ssd1306_DrawPixel+0x92>
        // Don't write outside the logical buffer
        return;
    }

    uint8_t px, py;
    ssd1306_map_logical_to_physical(x, y, &px, &py);
 8006370:	f107 0309 	add.w	r3, r7, #9
 8006374:	f107 020a 	add.w	r2, r7, #10
 8006378:	79b9      	ldrb	r1, [r7, #6]
 800637a:	79f8      	ldrb	r0, [r7, #7]
 800637c:	f7ff febe 	bl	80060fc <ssd1306_map_logical_to_physical>

    uint32_t index = (uint32_t)px + ((uint32_t)(py / 8) * SSD1306_WIDTH);
 8006380:	7abb      	ldrb	r3, [r7, #10]
 8006382:	461a      	mov	r2, r3
 8006384:	7a7b      	ldrb	r3, [r7, #9]
 8006386:	08db      	lsrs	r3, r3, #3
 8006388:	b2db      	uxtb	r3, r3
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
    uint8_t mask = (uint8_t)(1 << (py % 8));
 8006390:	7a7b      	ldrb	r3, [r7, #9]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2201      	movs	r2, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	72fb      	strb	r3, [r7, #11]

    if (color == White) {
 800639e:	797b      	ldrb	r3, [r7, #5]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d10c      	bne.n	80063be <ssd1306_DrawPixel+0x6e>
        SSD1306_Buffer[index] |= mask;
 80063a4:	4a11      	ldr	r2, [pc, #68]	@ (80063ec <ssd1306_DrawPixel+0x9c>)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b2d9      	uxtb	r1, r3
 80063b2:	4a0e      	ldr	r2, [pc, #56]	@ (80063ec <ssd1306_DrawPixel+0x9c>)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	460a      	mov	r2, r1
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e012      	b.n	80063e4 <ssd1306_DrawPixel+0x94>
    } else {
        SSD1306_Buffer[index] &= ~mask;
 80063be:	4a0b      	ldr	r2, [pc, #44]	@ (80063ec <ssd1306_DrawPixel+0x9c>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b25a      	sxtb	r2, r3
 80063c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	4013      	ands	r3, r2
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	4a05      	ldr	r2, [pc, #20]	@ (80063ec <ssd1306_DrawPixel+0x9c>)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	460a      	mov	r2, r1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e000      	b.n	80063e4 <ssd1306_DrawPixel+0x94>
        return;
 80063e2:	bf00      	nop
    }
}
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20004b58 	.word	0x20004b58

080063f0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer (logical coords)
 * ch       => char to write
 * Font     => Font to use
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b089      	sub	sp, #36	@ 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4638      	mov	r0, r7
 80063fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80063fe:	4623      	mov	r3, r4
 8006400:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b1f      	cmp	r3, #31
 8006406:	d902      	bls.n	800640e <ssd1306_WriteChar+0x1e>
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b7e      	cmp	r3, #126	@ 0x7e
 800640c:	d901      	bls.n	8006412 <ssd1306_WriteChar+0x22>
        return 0;
 800640e:	2300      	movs	r3, #0
 8006410:	e079      	b.n	8006506 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <ssd1306_WriteChar+0x34>
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	3b20      	subs	r3, #32
 800641e:	4413      	add	r3, r2
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	e000      	b.n	8006426 <ssd1306_WriteChar+0x36>
 8006424:	783b      	ldrb	r3, [r7, #0]
 8006426:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line (logical)
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006428:	4b39      	ldr	r3, [pc, #228]	@ (8006510 <ssd1306_WriteChar+0x120>)
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	4413      	add	r3, r2
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	dc06      	bgt.n	8006444 <ssd1306_WriteChar+0x54>
        SSD1306_ROTATED_HEIGHT < (SSD1306.CurrentY + Font.height))
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <ssd1306_WriteChar+0x120>)
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	461a      	mov	r2, r3
 800643c:	787b      	ldrb	r3, [r7, #1]
 800643e:	4413      	add	r3, r2
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006440:	2b80      	cmp	r3, #128	@ 0x80
 8006442:	dd01      	ble.n	8006448 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8006444:	2300      	movs	r3, #0
 8006446:	e05e      	b.n	8006506 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write (font expected to be in conventional orientation;
    // since DrawPixel maps logical->physical, characters will be rotated accordingly)
    for(i = 0; i < Font.height; i++) {
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e04d      	b.n	80064ea <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	3b20      	subs	r3, #32
 8006454:	7879      	ldrb	r1, [r7, #1]
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4619      	mov	r1, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	440b      	add	r3, r1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e036      	b.n	80064dc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800647e:	4b24      	ldr	r3, [pc, #144]	@ (8006510 <ssd1306_WriteChar+0x120>)
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4413      	add	r3, r2
 800648a:	b2d8      	uxtb	r0, r3
 800648c:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <ssd1306_WriteChar+0x120>)
 800648e:	885b      	ldrh	r3, [r3, #2]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4413      	add	r3, r2
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800649e:	4619      	mov	r1, r3
 80064a0:	f7ff ff56 	bl	8006350 <ssd1306_DrawPixel>
 80064a4:	e017      	b.n	80064d6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80064a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <ssd1306_WriteChar+0x120>)
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	b2d8      	uxtb	r0, r3
 80064b4:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <ssd1306_WriteChar+0x120>)
 80064b6:	885b      	ldrh	r3, [r3, #2]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4413      	add	r3, r2
 80064c0:	b2d9      	uxtb	r1, r3
 80064c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	f7ff ff3d 	bl	8006350 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	3301      	adds	r3, #1
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d3c4      	bcc.n	800646e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	787b      	ldrb	r3, [r7, #1]
 80064ec:	461a      	mov	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d3ac      	bcc.n	800644e <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80064f4:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <ssd1306_WriteChar+0x120>)
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	4413      	add	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <ssd1306_WriteChar+0x120>)
 8006502:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3724      	adds	r7, #36	@ 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}
 800650e:	bf00      	nop
 8006510:	20004f58 	.word	0x20004f58

08006514 <ssd1306_WriteString>:

/* Write full string to screenbuffer (logical) */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	4638      	mov	r0, r7
 800651e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006522:	e013      	b.n	800654c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	7818      	ldrb	r0, [r3, #0]
 8006528:	7e3b      	ldrb	r3, [r7, #24]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	463b      	mov	r3, r7
 800652e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006530:	f7ff ff5e 	bl	80063f0 <ssd1306_WriteChar>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d002      	beq.n	8006546 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	e008      	b.n	8006558 <ssd1306_WriteString+0x44>
        }
        str++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e7      	bne.n	8006524 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	781b      	ldrb	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <ssd1306_SetCursor>:

/* Position the cursor (logical) */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	460a      	mov	r2, r1
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	4613      	mov	r3, r2
 800656e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	b29a      	uxth	r2, r3
 8006574:	4b05      	ldr	r3, [pc, #20]	@ (800658c <ssd1306_SetCursor+0x2c>)
 8006576:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006578:	79bb      	ldrb	r3, [r7, #6]
 800657a:	b29a      	uxth	r2, r3
 800657c:	4b03      	ldr	r3, [pc, #12]	@ (800658c <ssd1306_SetCursor+0x2c>)
 800657e:	805a      	strh	r2, [r3, #2]
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20004f58 	.word	0x20004f58

08006590 <ssd1306_Line>:

/* Draw line by Bresenham's algorithm (logical coords) */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	71fb      	strb	r3, [r7, #7]
 80065a2:	4603      	mov	r3, r0
 80065a4:	71bb      	strb	r3, [r7, #6]
 80065a6:	460b      	mov	r3, r1
 80065a8:	717b      	strb	r3, [r7, #5]
 80065aa:	4613      	mov	r3, r2
 80065ac:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs((int32_t)x2 - (int32_t)x1);
 80065ae:	797a      	ldrb	r2, [r7, #5]
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bfb8      	it	lt
 80065b8:	425b      	neglt	r3, r3
 80065ba:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs((int32_t)y2 - (int32_t)y1);
 80065bc:	793a      	ldrb	r2, [r7, #4]
 80065be:	79bb      	ldrb	r3, [r7, #6]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfb8      	it	lt
 80065c6:	425b      	neglt	r3, r3
 80065c8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80065ca:	79fa      	ldrb	r2, [r7, #7]
 80065cc:	797b      	ldrb	r3, [r7, #5]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d201      	bcs.n	80065d6 <ssd1306_Line+0x46>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e001      	b.n	80065da <ssd1306_Line+0x4a>
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80065dc:	79ba      	ldrb	r2, [r7, #6]
 80065de:	793b      	ldrb	r3, [r7, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d201      	bcs.n	80065e8 <ssd1306_Line+0x58>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e001      	b.n	80065ec <ssd1306_Line+0x5c>
 80065e8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ec:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 80065f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80065fa:	7939      	ldrb	r1, [r7, #4]
 80065fc:	797b      	ldrb	r3, [r7, #5]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fea6 	bl	8006350 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006604:	e024      	b.n	8006650 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8006606:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800660a:	79b9      	ldrb	r1, [r7, #6]
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fe9e 	bl	8006350 <ssd1306_DrawPixel>
        error2 = error * 2;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	425b      	negs	r3, r3
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	dd08      	ble.n	8006636 <ssd1306_Line+0xa6>
            error -= deltaY;
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	4413      	add	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	429a      	cmp	r2, r3
 800663c:	da08      	bge.n	8006650 <ssd1306_Line+0xc0>
            error += deltaX;
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	4413      	add	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	79bb      	ldrb	r3, [r7, #6]
 800664c:	4413      	add	r3, r2
 800664e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006650:	79fa      	ldrb	r2, [r7, #7]
 8006652:	797b      	ldrb	r3, [r7, #5]
 8006654:	429a      	cmp	r2, r3
 8006656:	d1d6      	bne.n	8006606 <ssd1306_Line+0x76>
 8006658:	79ba      	ldrb	r2, [r7, #6]
 800665a:	793b      	ldrb	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d1d2      	bne.n	8006606 <ssd1306_Line+0x76>
        }
    }
    return;
 8006660:	bf00      	nop
}
 8006662:	3724      	adds	r7, #36	@ 0x24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}

08006668 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenham's algorithm (logical) */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4623      	mov	r3, r4
 8006678:	71fb      	strb	r3, [r7, #7]
 800667a:	4603      	mov	r3, r0
 800667c:	71bb      	strb	r3, [r7, #6]
 800667e:	460b      	mov	r3, r1
 8006680:	717b      	strb	r3, [r7, #5]
 8006682:	4613      	mov	r3, r2
 8006684:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8006686:	797b      	ldrb	r3, [r7, #5]
 8006688:	425b      	negs	r3, r3
 800668a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8006690:	797b      	ldrb	r3, [r7, #5]
 8006692:	f1c3 0301 	rsb	r3, r3, #1
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_ROTATED_WIDTH || par_y >= SSD1306_ROTATED_HEIGHT) {
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b3f      	cmp	r3, #63	@ 0x3f
 800669e:	d866      	bhi.n	800676e <ssd1306_DrawCircle+0x106>
 80066a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	db62      	blt.n	800676e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	79fa      	ldrb	r2, [r7, #7]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b2d8      	uxtb	r0, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	79bb      	ldrb	r3, [r7, #6]
 80066b8:	4413      	add	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	793a      	ldrb	r2, [r7, #4]
 80066be:	4619      	mov	r1, r3
 80066c0:	f7ff fe46 	bl	8006350 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	4413      	add	r3, r2
 80066cc:	b2d8      	uxtb	r0, r3
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	79bb      	ldrb	r3, [r7, #6]
 80066d4:	4413      	add	r3, r2
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	793a      	ldrb	r2, [r7, #4]
 80066da:	4619      	mov	r1, r3
 80066dc:	f7ff fe38 	bl	8006350 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	4413      	add	r3, r2
 80066e8:	b2d8      	uxtb	r0, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	79ba      	ldrb	r2, [r7, #6]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	793a      	ldrb	r2, [r7, #4]
 80066f6:	4619      	mov	r1, r3
 80066f8:	f7ff fe2a 	bl	8006350 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	79fa      	ldrb	r2, [r7, #7]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	b2d8      	uxtb	r0, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	79ba      	ldrb	r2, [r7, #6]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	793a      	ldrb	r2, [r7, #4]
 8006712:	4619      	mov	r1, r3
 8006714:	f7ff fe1c 	bl	8006350 <ssd1306_DrawPixel>
        e2 = err;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	429a      	cmp	r2, r3
 8006722:	dc13      	bgt.n	800674c <ssd1306_DrawCircle+0xe4>
            y++;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	3301      	adds	r3, #1
 8006728:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	3301      	adds	r3, #1
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	425b      	negs	r3, r3
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d105      	bne.n	800674c <ssd1306_DrawCircle+0xe4>
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	429a      	cmp	r2, r3
 8006746:	dc01      	bgt.n	800674c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	dd08      	ble.n	8006766 <ssd1306_DrawCircle+0xfe>
            x++;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	3301      	adds	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	3301      	adds	r3, #1
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dd9d      	ble.n	80066a8 <ssd1306_DrawCircle+0x40>

    return;
 800676c:	e000      	b.n	8006770 <ssd1306_DrawCircle+0x108>
        return;
 800676e:	bf00      	nop
}
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd90      	pop	{r4, r7, pc}

08006776 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle (logical) */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006776:	b590      	push	{r4, r7, lr}
 8006778:	b085      	sub	sp, #20
 800677a:	af02      	add	r7, sp, #8
 800677c:	4604      	mov	r4, r0
 800677e:	4608      	mov	r0, r1
 8006780:	4611      	mov	r1, r2
 8006782:	461a      	mov	r2, r3
 8006784:	4623      	mov	r3, r4
 8006786:	71fb      	strb	r3, [r7, #7]
 8006788:	4603      	mov	r3, r0
 800678a:	71bb      	strb	r3, [r7, #6]
 800678c:	460b      	mov	r3, r1
 800678e:	717b      	strb	r3, [r7, #5]
 8006790:	4613      	mov	r3, r2
 8006792:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8006794:	79bc      	ldrb	r4, [r7, #6]
 8006796:	797a      	ldrb	r2, [r7, #5]
 8006798:	79b9      	ldrb	r1, [r7, #6]
 800679a:	79f8      	ldrb	r0, [r7, #7]
 800679c:	7e3b      	ldrb	r3, [r7, #24]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4623      	mov	r3, r4
 80067a2:	f7ff fef5 	bl	8006590 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80067a6:	793c      	ldrb	r4, [r7, #4]
 80067a8:	797a      	ldrb	r2, [r7, #5]
 80067aa:	79b9      	ldrb	r1, [r7, #6]
 80067ac:	7978      	ldrb	r0, [r7, #5]
 80067ae:	7e3b      	ldrb	r3, [r7, #24]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	4623      	mov	r3, r4
 80067b4:	f7ff feec 	bl	8006590 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80067b8:	793c      	ldrb	r4, [r7, #4]
 80067ba:	79fa      	ldrb	r2, [r7, #7]
 80067bc:	7939      	ldrb	r1, [r7, #4]
 80067be:	7978      	ldrb	r0, [r7, #5]
 80067c0:	7e3b      	ldrb	r3, [r7, #24]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4623      	mov	r3, r4
 80067c6:	f7ff fee3 	bl	8006590 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80067ca:	79bc      	ldrb	r4, [r7, #6]
 80067cc:	79fa      	ldrb	r2, [r7, #7]
 80067ce:	7939      	ldrb	r1, [r7, #4]
 80067d0:	79f8      	ldrb	r0, [r7, #7]
 80067d2:	7e3b      	ldrb	r3, [r7, #24]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4623      	mov	r3, r4
 80067d8:	f7ff feda 	bl	8006590 <ssd1306_Line>

    return;
 80067dc:	bf00      	nop
}
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd90      	pop	{r4, r7, pc}

080067e4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80067ee:	2381      	movs	r3, #129	@ 0x81
 80067f0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fcaf 	bl	8006158 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fcab 	bl	8006158 <ssd1306_WriteCommand>
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800681c:	23af      	movs	r3, #175	@ 0xaf
 800681e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006820:	4b08      	ldr	r3, [pc, #32]	@ (8006844 <ssd1306_SetDisplayOn+0x38>)
 8006822:	2201      	movs	r2, #1
 8006824:	715a      	strb	r2, [r3, #5]
 8006826:	e004      	b.n	8006832 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006828:	23ae      	movs	r3, #174	@ 0xae
 800682a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <ssd1306_SetDisplayOn+0x38>)
 800682e:	2200      	movs	r2, #0
 8006830:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fc8f 	bl	8006158 <ssd1306_WriteCommand>
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20004f58 	.word	0x20004f58

08006848 <ssd1306_FillRect>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	461a      	mov	r2, r3
 8006856:	4623      	mov	r3, r4
 8006858:	71fb      	strb	r3, [r7, #7]
 800685a:	4603      	mov	r3, r0
 800685c:	71bb      	strb	r3, [r7, #6]
 800685e:	460b      	mov	r3, r1
 8006860:	717b      	strb	r3, [r7, #5]
 8006862:	4613      	mov	r3, r2
 8006864:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = y; i < y + h; i++) {
 8006866:	79bb      	ldrb	r3, [r7, #6]
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	e015      	b.n	8006898 <ssd1306_FillRect+0x50>
        for (uint8_t j = x; j < x + w; j++) {
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	73bb      	strb	r3, [r7, #14]
 8006870:	e009      	b.n	8006886 <ssd1306_FillRect+0x3e>
            ssd1306_DrawPixel(j, i, color);
 8006872:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006876:	7bf9      	ldrb	r1, [r7, #15]
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fd68 	bl	8006350 <ssd1306_DrawPixel>
        for (uint8_t j = x; j < x + w; j++) {
 8006880:	7bbb      	ldrb	r3, [r7, #14]
 8006882:	3301      	adds	r3, #1
 8006884:	73bb      	strb	r3, [r7, #14]
 8006886:	7bba      	ldrb	r2, [r7, #14]
 8006888:	79f9      	ldrb	r1, [r7, #7]
 800688a:	797b      	ldrb	r3, [r7, #5]
 800688c:	440b      	add	r3, r1
 800688e:	429a      	cmp	r2, r3
 8006890:	dbef      	blt.n	8006872 <ssd1306_FillRect+0x2a>
    for (uint8_t i = y; i < y + h; i++) {
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	3301      	adds	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	7bfa      	ldrb	r2, [r7, #15]
 800689a:	79b9      	ldrb	r1, [r7, #6]
 800689c:	793b      	ldrb	r3, [r7, #4]
 800689e:	440b      	add	r3, r1
 80068a0:	429a      	cmp	r2, r3
 80068a2:	dbe3      	blt.n	800686c <ssd1306_FillRect+0x24>
        }
    }
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}
	...

080068b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80068b4:	f7fd f93c 	bl	8003b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068b8:	480c      	ldr	r0, [pc, #48]	@ (80068ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068ba:	490d      	ldr	r1, [pc, #52]	@ (80068f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068bc:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068c0:	e002      	b.n	80068c8 <LoopCopyDataInit>

080068c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068c6:	3304      	adds	r3, #4

080068c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068cc:	d3f9      	bcc.n	80068c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068d0:	4c0a      	ldr	r4, [pc, #40]	@ (80068fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80068d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068d4:	e001      	b.n	80068da <LoopFillZerobss>

080068d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068d8:	3204      	adds	r2, #4

080068da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068dc:	d3fb      	bcc.n	80068d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068de:	f01b ff7b 	bl	80227d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068e2:	f7fb fea3 	bl	800262c <main>
  bx  lr
 80068e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068e8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80068ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068f0:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80068f4:	080332e0 	.word	0x080332e0
  ldr r2, =_sbss
 80068f8:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80068fc:	2000c070 	.word	0x2000c070

08006900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006900:	e7fe      	b.n	8006900 <ADC_IRQHandler>
	...

08006904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006908:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <HAL_Init+0x40>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0d      	ldr	r2, [pc, #52]	@ (8006944 <HAL_Init+0x40>)
 800690e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006914:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <HAL_Init+0x40>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_Init+0x40>)
 800691a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800691e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006920:	4b08      	ldr	r3, [pc, #32]	@ (8006944 <HAL_Init+0x40>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a07      	ldr	r2, [pc, #28]	@ (8006944 <HAL_Init+0x40>)
 8006926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800692a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800692c:	2003      	movs	r0, #3
 800692e:	f000 fd23 	bl	8007378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006932:	200f      	movs	r0, #15
 8006934:	f000 f808 	bl	8006948 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006938:	f7fc feb0 	bl	800369c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40023c00 	.word	0x40023c00

08006948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006950:	4b12      	ldr	r3, [pc, #72]	@ (800699c <HAL_InitTick+0x54>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_InitTick+0x58>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	4619      	mov	r1, r3
 800695a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800695e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006962:	fbb2 f3f3 	udiv	r3, r2, r3
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fd3b 	bl	80073e2 <HAL_SYSTICK_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e00e      	b.n	8006994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b0f      	cmp	r3, #15
 800697a:	d80a      	bhi.n	8006992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800697c:	2200      	movs	r2, #0
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	f000 fd03 	bl	800738e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006988:	4a06      	ldr	r2, [pc, #24]	@ (80069a4 <HAL_InitTick+0x5c>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20000070 	.word	0x20000070
 80069a0:	200000cc 	.word	0x200000cc
 80069a4:	200000c8 	.word	0x200000c8

080069a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069ac:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <HAL_IncTick+0x1c>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_IncTick+0x20>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	4a03      	ldr	r2, [pc, #12]	@ (80069c8 <HAL_IncTick+0x20>)
 80069ba:	6013      	str	r3, [r2, #0]
}
 80069bc:	bf00      	nop
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	200000cc 	.word	0x200000cc
 80069c8:	20004f60 	.word	0x20004f60

080069cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return uwTick;
 80069d0:	4b02      	ldr	r3, [pc, #8]	@ (80069dc <HAL_GetTick+0x10>)
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	20004f60 	.word	0x20004f60

080069e0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7ff fff0 	bl	80069cc <HAL_GetTick>
 80069ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d005      	beq.n	8006a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <HAL_Delay+0x44>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a06:	bf00      	nop
 8006a08:	f7ff ffe0 	bl	80069cc <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d8f7      	bhi.n	8006a08 <HAL_Delay+0x28>
  {
  }
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200000cc 	.word	0x200000cc

08006a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e033      	b.n	8006aa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fc fe4e 	bl	80036e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d118      	bne.n	8006a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006a6e:	f023 0302 	bic.w	r3, r3, #2
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa28 	bl	8006ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a96:	e001      	b.n	8006a9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_ADC_Start_DMA+0x1e>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e0bc      	b.n	8006c48 <HAL_ADC_Start_DMA+0x198>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d018      	beq.n	8006b16 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006af4:	4b56      	ldr	r3, [pc, #344]	@ (8006c50 <HAL_ADC_Start_DMA+0x1a0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a56      	ldr	r2, [pc, #344]	@ (8006c54 <HAL_ADC_Start_DMA+0x1a4>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	0c9a      	lsrs	r2, r3, #18
 8006b00:	4613      	mov	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4413      	add	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006b08:	e002      	b.n	8006b10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f9      	bne.n	8006b0a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	f040 8084 	bne.w	8006c2e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b50:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d106      	bne.n	8006b74 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	f023 0206 	bic.w	r2, r3, #6
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b72:	e002      	b.n	8006b7a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b86:	4a34      	ldr	r2, [pc, #208]	@ (8006c58 <HAL_ADC_Start_DMA+0x1a8>)
 8006b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8e:	4a33      	ldr	r2, [pc, #204]	@ (8006c5c <HAL_ADC_Start_DMA+0x1ac>)
 8006b90:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	4a32      	ldr	r2, [pc, #200]	@ (8006c60 <HAL_ADC_Start_DMA+0x1b0>)
 8006b98:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006ba2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006bb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	334c      	adds	r3, #76	@ 0x4c
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f000 fcc0 	bl	8007558 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006bd8:	4b22      	ldr	r3, [pc, #136]	@ (8006c64 <HAL_ADC_Start_DMA+0x1b4>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10f      	bne.n	8006c04 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d129      	bne.n	8006c46 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006c00:	609a      	str	r2, [r3, #8]
 8006c02:	e020      	b.n	8006c46 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <HAL_ADC_Start_DMA+0x1b8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d11b      	bne.n	8006c46 <HAL_ADC_Start_DMA+0x196>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d114      	bne.n	8006c46 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	e00b      	b.n	8006c46 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	f043 0210 	orr.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000070 	.word	0x20000070
 8006c54:	431bde83 	.word	0x431bde83
 8006c58:	080070dd 	.word	0x080070dd
 8006c5c:	08007197 	.word	0x08007197
 8006c60:	080071b3 	.word	0x080071b3
 8006c64:	40012300 	.word	0x40012300
 8006c68:	40012000 	.word	0x40012000

08006c6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x1c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e103      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x224>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d925      	bls.n	8006d08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68d9      	ldr	r1, [r3, #12]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	3b1e      	subs	r3, #30
 8006cd2:	2207      	movs	r2, #7
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43da      	mvns	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	400a      	ands	r2, r1
 8006ce0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68d9      	ldr	r1, [r3, #12]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4403      	add	r3, r0
 8006cfa:	3b1e      	subs	r3, #30
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	60da      	str	r2, [r3, #12]
 8006d06:	e022      	b.n	8006d4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6919      	ldr	r1, [r3, #16]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43da      	mvns	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	400a      	ands	r2, r1
 8006d2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6919      	ldr	r1, [r3, #16]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4403      	add	r3, r0
 8006d44:	409a      	lsls	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d824      	bhi.n	8006da0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	3b05      	subs	r3, #5
 8006d68:	221f      	movs	r2, #31
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	43da      	mvns	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	400a      	ands	r2, r1
 8006d76:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4618      	mov	r0, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	3b05      	subs	r3, #5
 8006d92:	fa00 f203 	lsl.w	r2, r0, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d9e:	e04c      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d824      	bhi.n	8006df2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	3b23      	subs	r3, #35	@ 0x23
 8006dba:	221f      	movs	r2, #31
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	43da      	mvns	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	3b23      	subs	r3, #35	@ 0x23
 8006de4:	fa00 f203 	lsl.w	r2, r0, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8006df0:	e023      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	3b41      	subs	r3, #65	@ 0x41
 8006e04:	221f      	movs	r2, #31
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	43da      	mvns	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	400a      	ands	r2, r1
 8006e12:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4618      	mov	r0, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3b41      	subs	r3, #65	@ 0x41
 8006e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a20      	ldr	r2, [pc, #128]	@ (8006ec0 <HAL_ADC_ConfigChannel+0x230>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d109      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x1c8>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b12      	cmp	r3, #18
 8006e4a:	d105      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec4 <HAL_ADC_ConfigChannel+0x234>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec4 <HAL_ADC_ConfigChannel+0x234>)
 8006e52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e56:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	@ (8006ec0 <HAL_ADC_ConfigChannel+0x230>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d123      	bne.n	8006eaa <HAL_ADC_ConfigChannel+0x21a>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d003      	beq.n	8006e72 <HAL_ADC_ConfigChannel+0x1e2>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b11      	cmp	r3, #17
 8006e70:	d11b      	bne.n	8006eaa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006e72:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <HAL_ADC_ConfigChannel+0x234>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4a13      	ldr	r2, [pc, #76]	@ (8006ec4 <HAL_ADC_ConfigChannel+0x234>)
 8006e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e7c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d111      	bne.n	8006eaa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e86:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <HAL_ADC_ConfigChannel+0x238>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a10      	ldr	r2, [pc, #64]	@ (8006ecc <HAL_ADC_ConfigChannel+0x23c>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	0c9a      	lsrs	r2, r3, #18
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006e9c:	e002      	b.n	8006ea4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f9      	bne.n	8006e9e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012000 	.word	0x40012000
 8006ec4:	40012300 	.word	0x40012300
 8006ec8:	20000070 	.word	0x20000070
 8006ecc:	431bde83 	.word	0x431bde83

08006ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80070d4 <ADC_Init+0x204>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4a7d      	ldr	r2, [pc, #500]	@ (80070d4 <ADC_Init+0x204>)
 8006ede:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006ee2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80070d4 <ADC_Init+0x204>)
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4979      	ldr	r1, [pc, #484]	@ (80070d4 <ADC_Init+0x204>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	021a      	lsls	r2, r3, #8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6899      	ldr	r1, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80070d8 <ADC_Init+0x208>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d022      	beq.n	8006faa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6899      	ldr	r1, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	e00f      	b.n	8006fca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0202 	bic.w	r2, r2, #2
 8006fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6899      	ldr	r1, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7e1b      	ldrb	r3, [r3, #24]
 8006fe4:	005a      	lsls	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d027      	beq.n	8007048 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	3b01      	subs	r3, #1
 800701e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8007022:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	fa92 f2a2 	rbit	r2, r2
 800702a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	fab2 f282 	clz	r2, r2
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	fa03 f102 	lsl.w	r1, r3, r2
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	e007      	b.n	8007058 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007056:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	3b01      	subs	r3, #1
 8007074:	051a      	lsls	r2, r3, #20
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800708c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800709a:	025a      	lsls	r2, r3, #9
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6899      	ldr	r1, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	029a      	lsls	r2, r3, #10
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	609a      	str	r2, [r3, #8]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40012300 	.word	0x40012300
 80070d8:	0f000001 	.word	0x0f000001

080070dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d13c      	bne.n	8007170 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d12b      	bne.n	8007168 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007114:	2b00      	cmp	r3, #0
 8007116:	d127      	bne.n	8007168 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007122:	2b00      	cmp	r3, #0
 8007124:	d006      	beq.n	8007134 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007130:	2b00      	cmp	r3, #0
 8007132:	d119      	bne.n	8007168 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0220 	bic.w	r2, r2, #32
 8007142:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	f043 0201 	orr.w	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7fa fbc7 	bl	80018fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800716e:	e00e      	b.n	800718e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff fd7e 	bl	8006c7e <HAL_ADC_ErrorCallback>
}
 8007182:	e004      	b.n	800718e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fd61 	bl	8006c6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2240      	movs	r2, #64	@ 0x40
 80071c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	f043 0204 	orr.w	r2, r3, #4
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fd53 	bl	8006c7e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071d8:	bf00      	nop
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <__NVIC_SetPriorityGrouping>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80071fc:	4013      	ands	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800720c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007212:	4a04      	ldr	r2, [pc, #16]	@ (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	60d3      	str	r3, [r2, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <__NVIC_GetPriorityGrouping>:
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800722c:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <__NVIC_GetPriorityGrouping+0x18>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f003 0307 	and.w	r3, r3, #7
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <__NVIC_EnableIRQ>:
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800724e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007252:	2b00      	cmp	r3, #0
 8007254:	db0b      	blt.n	800726e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	f003 021f 	and.w	r2, r3, #31
 800725c:	4906      	ldr	r1, [pc, #24]	@ (8007278 <__NVIC_EnableIRQ+0x34>)
 800725e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	2001      	movs	r0, #1
 8007266:	fa00 f202 	lsl.w	r2, r0, r2
 800726a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	e000e100 	.word	0xe000e100

0800727c <__NVIC_SetPriority>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728c:	2b00      	cmp	r3, #0
 800728e:	db0a      	blt.n	80072a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	490c      	ldr	r1, [pc, #48]	@ (80072c8 <__NVIC_SetPriority+0x4c>)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	0112      	lsls	r2, r2, #4
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	440b      	add	r3, r1
 80072a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072a4:	e00a      	b.n	80072bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4908      	ldr	r1, [pc, #32]	@ (80072cc <__NVIC_SetPriority+0x50>)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	3b04      	subs	r3, #4
 80072b4:	0112      	lsls	r2, r2, #4
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	440b      	add	r3, r1
 80072ba:	761a      	strb	r2, [r3, #24]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	e000e100 	.word	0xe000e100
 80072cc:	e000ed00 	.word	0xe000ed00

080072d0 <NVIC_EncodePriority>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	@ 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f1c3 0307 	rsb	r3, r3, #7
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	bf28      	it	cs
 80072ee:	2304      	movcs	r3, #4
 80072f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2b06      	cmp	r3, #6
 80072f8:	d902      	bls.n	8007300 <NVIC_EncodePriority+0x30>
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3b03      	subs	r3, #3
 80072fe:	e000      	b.n	8007302 <NVIC_EncodePriority+0x32>
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43da      	mvns	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	401a      	ands	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007318:	f04f 31ff 	mov.w	r1, #4294967295
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	fa01 f303 	lsl.w	r3, r1, r3
 8007322:	43d9      	mvns	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007328:	4313      	orrs	r3, r2
}
 800732a:	4618      	mov	r0, r3
 800732c:	3724      	adds	r7, #36	@ 0x24
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3b01      	subs	r3, #1
 8007340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007344:	d301      	bcc.n	800734a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007346:	2301      	movs	r3, #1
 8007348:	e00f      	b.n	800736a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800734a:	4a0a      	ldr	r2, [pc, #40]	@ (8007374 <SysTick_Config+0x40>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007352:	210f      	movs	r1, #15
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	f7ff ff90 	bl	800727c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800735c:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <SysTick_Config+0x40>)
 800735e:	2200      	movs	r2, #0
 8007360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007362:	4b04      	ldr	r3, [pc, #16]	@ (8007374 <SysTick_Config+0x40>)
 8007364:	2207      	movs	r2, #7
 8007366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	e000e010 	.word	0xe000e010

08007378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff2d 	bl	80071e0 <__NVIC_SetPriorityGrouping>
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	4603      	mov	r3, r0
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073a0:	f7ff ff42 	bl	8007228 <__NVIC_GetPriorityGrouping>
 80073a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f7ff ff90 	bl	80072d0 <NVIC_EncodePriority>
 80073b0:	4602      	mov	r2, r0
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ff5f 	bl	800727c <__NVIC_SetPriority>
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	4603      	mov	r3, r0
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff ff35 	bl	8007244 <__NVIC_EnableIRQ>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ffa2 	bl	8007334 <SysTick_Config>
 80073f0:	4603      	mov	r3, r0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007408:	f7ff fae0 	bl	80069cc <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e099      	b.n	800754c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007438:	e00f      	b.n	800745a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800743a:	f7ff fac7 	bl	80069cc <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b05      	cmp	r3, #5
 8007446:	d908      	bls.n	800745a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2203      	movs	r2, #3
 8007452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e078      	b.n	800754c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e8      	bne.n	800743a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4b38      	ldr	r3, [pc, #224]	@ (8007554 <HAL_DMA_Init+0x158>)
 8007474:	4013      	ands	r3, r2
 8007476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800749e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d107      	bne.n	80074c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074bc:	4313      	orrs	r3, r2
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0307 	bic.w	r3, r3, #7
 80074da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d117      	bne.n	800751e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa6d 	bl	80079e0 <DMA_CheckFifoParam>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2240      	movs	r2, #64	@ 0x40
 8007510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800751a:	2301      	movs	r3, #1
 800751c:	e016      	b.n	800754c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa26 	bl	8007978 <DMA_CalcBaseAndBitshift>
 800752c:	4603      	mov	r3, r0
 800752e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007534:	223f      	movs	r2, #63	@ 0x3f
 8007536:	409a      	lsls	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	f010803f 	.word	0xf010803f

08007558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_DMA_Start_IT+0x26>
 800757a:	2302      	movs	r3, #2
 800757c:	e040      	b.n	8007600 <HAL_DMA_Start_IT+0xa8>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d12f      	bne.n	80075f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f9b8 	bl	800791c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075b0:	223f      	movs	r2, #63	@ 0x3f
 80075b2:	409a      	lsls	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0216 	orr.w	r2, r2, #22
 80075c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e005      	b.n	80075fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
 80075fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007614:	4b8e      	ldr	r3, [pc, #568]	@ (8007850 <HAL_DMA_IRQHandler+0x248>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a8e      	ldr	r2, [pc, #568]	@ (8007854 <HAL_DMA_IRQHandler+0x24c>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	0a9b      	lsrs	r3, r3, #10
 8007620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007632:	2208      	movs	r2, #8
 8007634:	409a      	lsls	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4013      	ands	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01a      	beq.n	8007674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d013      	beq.n	8007674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0204 	bic.w	r2, r2, #4
 800765a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007660:	2208      	movs	r2, #8
 8007662:	409a      	lsls	r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	f043 0201 	orr.w	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4013      	ands	r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d012      	beq.n	80076aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007696:	2201      	movs	r2, #1
 8007698:	409a      	lsls	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ae:	2204      	movs	r2, #4
 80076b0:	409a      	lsls	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d012      	beq.n	80076e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076cc:	2204      	movs	r2, #4
 80076ce:	409a      	lsls	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d8:	f043 0204 	orr.w	r2, r3, #4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e4:	2210      	movs	r2, #16
 80076e6:	409a      	lsls	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d043      	beq.n	8007778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d03c      	beq.n	8007778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007702:	2210      	movs	r2, #16
 8007704:	409a      	lsls	r2, r3
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d018      	beq.n	800774a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d024      	beq.n	8007778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
 8007736:	e01f      	b.n	8007778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01b      	beq.n	8007778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
 8007748:	e016      	b.n	8007778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d107      	bne.n	8007768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0208 	bic.w	r2, r2, #8
 8007766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800777c:	2220      	movs	r2, #32
 800777e:	409a      	lsls	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 808f 	beq.w	80078a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8087 	beq.w	80078a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779e:	2220      	movs	r2, #32
 80077a0:	409a      	lsls	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d136      	bne.n	8007820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0216 	bic.w	r2, r2, #22
 80077c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <HAL_DMA_IRQHandler+0x1da>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0208 	bic.w	r2, r2, #8
 80077f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077f6:	223f      	movs	r2, #63	@ 0x3f
 80077f8:	409a      	lsls	r2, r3
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007812:	2b00      	cmp	r3, #0
 8007814:	d07e      	beq.n	8007914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
        }
        return;
 800781e:	e079      	b.n	8007914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01d      	beq.n	800786a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10d      	bne.n	8007858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007840:	2b00      	cmp	r3, #0
 8007842:	d031      	beq.n	80078a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
 800784c:	e02c      	b.n	80078a8 <HAL_DMA_IRQHandler+0x2a0>
 800784e:	bf00      	nop
 8007850:	20000070 	.word	0x20000070
 8007854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d023      	beq.n	80078a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
 8007868:	e01e      	b.n	80078a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10f      	bne.n	8007898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0210 	bic.w	r2, r2, #16
 8007886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d032      	beq.n	8007916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d022      	beq.n	8007902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2205      	movs	r2, #5
 80078c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d307      	bcc.n	80078f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f2      	bne.n	80078d4 <HAL_DMA_IRQHandler+0x2cc>
 80078ee:	e000      	b.n	80078f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80078f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
 8007912:	e000      	b.n	8007916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007914:	bf00      	nop
    }
  }
}
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b40      	cmp	r3, #64	@ 0x40
 8007948:	d108      	bne.n	800795c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800795a:	e007      	b.n	800796c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]
}
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
	...

08007978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	3b10      	subs	r3, #16
 8007988:	4a13      	ldr	r2, [pc, #76]	@ (80079d8 <DMA_CalcBaseAndBitshift+0x60>)
 800798a:	fba2 2303 	umull	r2, r3, r2, r3
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007992:	4a12      	ldr	r2, [pc, #72]	@ (80079dc <DMA_CalcBaseAndBitshift+0x64>)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d909      	bls.n	80079ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80079ae:	f023 0303 	bic.w	r3, r3, #3
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80079b8:	e007      	b.n	80079ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr
 80079d8:	aaaaaaab 	.word	0xaaaaaaab
 80079dc:	080295ac 	.word	0x080295ac

080079e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11f      	bne.n	8007a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d856      	bhi.n	8007aae <DMA_CheckFifoParam+0xce>
 8007a00:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <DMA_CheckFifoParam+0x28>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a2b 	.word	0x08007a2b
 8007a10:	08007a19 	.word	0x08007a19
 8007a14:	08007aaf 	.word	0x08007aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d046      	beq.n	8007ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a28:	e043      	b.n	8007ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a32:	d140      	bne.n	8007ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a38:	e03d      	b.n	8007ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a42:	d121      	bne.n	8007a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d837      	bhi.n	8007aba <DMA_CheckFifoParam+0xda>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <DMA_CheckFifoParam+0x70>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a67 	.word	0x08007a67
 8007a58:	08007a61 	.word	0x08007a61
 8007a5c:	08007a79 	.word	0x08007a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e030      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d025      	beq.n	8007abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a76:	e022      	b.n	8007abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a80:	d11f      	bne.n	8007ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a86:	e01c      	b.n	8007ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d903      	bls.n	8007a96 <DMA_CheckFifoParam+0xb6>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d003      	beq.n	8007a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a94:	e018      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9a:	e015      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e00b      	b.n	8007ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e00a      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ab2:	bf00      	nop
 8007ab4:	e008      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ab6:	bf00      	nop
 8007ab8:	e006      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8007aba:	bf00      	nop
 8007abc:	e004      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e002      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8007ae4:	4ba3      	ldr	r3, [pc, #652]	@ (8007d74 <HAL_ETH_Init+0x2a0>)
 8007ae6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e173      	b.n	8007de2 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 ff16 	bl	800b940 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b14:	2300      	movs	r3, #0
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	4b97      	ldr	r3, [pc, #604]	@ (8007d78 <HAL_ETH_Init+0x2a4>)
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1c:	4a96      	ldr	r2, [pc, #600]	@ (8007d78 <HAL_ETH_Init+0x2a4>)
 8007b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b22:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b24:	4b94      	ldr	r3, [pc, #592]	@ (8007d78 <HAL_ETH_Init+0x2a4>)
 8007b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007b30:	4b92      	ldr	r3, [pc, #584]	@ (8007d7c <HAL_ETH_Init+0x2a8>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4a91      	ldr	r2, [pc, #580]	@ (8007d7c <HAL_ETH_Init+0x2a8>)
 8007b36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b3a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8007d7c <HAL_ETH_Init+0x2a8>)
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	498d      	ldr	r1, [pc, #564]	@ (8007d7c <HAL_ETH_Init+0x2a8>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b62:	f7fe ff33 	bl	80069cc <HAL_GetTick>
 8007b66:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007b68:	e011      	b.n	8007b8e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8007b6a:	f7fe ff2f 	bl	80069cc <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007b78:	d909      	bls.n	8007b8e <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e129      	b.n	8007de2 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e4      	bne.n	8007b6a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f023 031c 	bic.w	r3, r3, #28
 8007bae:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007bb0:	f002 fdfe 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 8007bb4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	4a71      	ldr	r2, [pc, #452]	@ (8007d80 <HAL_ETH_Init+0x2ac>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d908      	bls.n	8007bd0 <HAL_ETH_Init+0xfc>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	4a70      	ldr	r2, [pc, #448]	@ (8007d84 <HAL_ETH_Init+0x2b0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d804      	bhi.n	8007bd0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	f043 0308 	orr.w	r3, r3, #8
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	e01a      	b.n	8007c06 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d84 <HAL_ETH_Init+0x2b0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d908      	bls.n	8007bea <HAL_ETH_Init+0x116>
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4a66      	ldr	r2, [pc, #408]	@ (8007d74 <HAL_ETH_Init+0x2a0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d204      	bcs.n	8007bea <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f043 030c 	orr.w	r3, r3, #12
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e00d      	b.n	8007c06 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	4a61      	ldr	r2, [pc, #388]	@ (8007d74 <HAL_ETH_Init+0x2a0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d303      	bcc.n	8007bfa <HAL_ETH_Init+0x126>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	4a64      	ldr	r2, [pc, #400]	@ (8007d88 <HAL_ETH_Init+0x2b4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d904      	bls.n	8007c04 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f043 0304 	orr.w	r3, r3, #4
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	e000      	b.n	8007c06 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8007c04:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007c0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007c12:	2100      	movs	r1, #0
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fb8e 	bl	8008336 <HAL_ETH_WritePHYRegister>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8007c24:	6939      	ldr	r1, [r7, #16]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd44 	bl	80086b4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0d4      	b.n	8007de2 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8007c38:	20ff      	movs	r0, #255	@ 0xff
 8007c3a:	f7fe fed1 	bl	80069e0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a2 	beq.w	8007d8c <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c48:	f7fe fec0 	bl	80069cc <HAL_GetTick>
 8007c4c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	461a      	mov	r2, r3
 8007c54:	2101      	movs	r1, #1
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb05 	bl	8008266 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8007c5c:	f7fe feb6 	bl	80069cc <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d90f      	bls.n	8007c8e <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007c72:	6939      	ldr	r1, [r7, #16]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fd1d 	bl	80086b4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e0a9      	b.n	8007de2 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0da      	beq.n	8007c4e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007c98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb49 	bl	8008336 <HAL_ETH_WritePHYRegister>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007cae:	6939      	ldr	r1, [r7, #16]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fcff 	bl	80086b4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e08f      	b.n	8007de2 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cc2:	f7fe fe83 	bl	80069cc <HAL_GetTick>
 8007cc6:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2101      	movs	r1, #1
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fac8 	bl	8008266 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007cd6:	f7fe fe79 	bl	80069cc <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d90f      	bls.n	8007d08 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007cec:	6939      	ldr	r1, [r7, #16]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fce0 	bl	80086b4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e06c      	b.n	8007de2 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0da      	beq.n	8007cc8 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007d12:	f107 030c 	add.w	r3, r7, #12
 8007d16:	461a      	mov	r2, r3
 8007d18:	2110      	movs	r1, #16
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 faa3 	bl	8008266 <HAL_ETH_ReadPHYRegister>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007d2a:	6939      	ldr	r1, [r7, #16]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcc1 	bl	80086b4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e051      	b.n	8007de2 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	e002      	b.n	8007d58 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	609a      	str	r2, [r3, #8]
 8007d68:	e032      	b.n	8007dd0 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007d70:	609a      	str	r2, [r3, #8]
 8007d72:	e02d      	b.n	8007dd0 <HAL_ETH_Init+0x2fc>
 8007d74:	03938700 	.word	0x03938700
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	01312cff 	.word	0x01312cff
 8007d84:	02160ebf 	.word	0x02160ebf
 8007d88:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	08db      	lsrs	r3, r3, #3
 8007d92:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fac6 	bl	8008336 <HAL_ETH_WritePHYRegister>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007db4:	6939      	ldr	r1, [r7, #16]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc7c 	bl	80086b4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e00c      	b.n	8007de2 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8007dc8:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8007dcc:	f7fe fe08 	bl	80069e0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8007dd0:	6939      	ldr	r1, [r7, #16]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc6e 	bl	80086b4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3720      	adds	r7, #32
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_ETH_DMATxDescListInit+0x20>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e051      	b.n	8007eb0 <HAL_ETH_DMATxDescListInit+0xc4>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	e030      	b.n	8007e8a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	015b      	lsls	r3, r3, #5
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007e40:	fb02 f303 	mul.w	r3, r2, r3
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d208      	bcs.n	8007e7e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	015b      	lsls	r3, r3, #5
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4413      	add	r3, r2
 8007e76:	461a      	mov	r2, r3
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	60da      	str	r2, [r3, #12]
 8007e7c:	e002      	b.n	8007e84 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	3301      	adds	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d3ca      	bcc.n	8007e28 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e9c:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_ETH_DMARxDescListInit+0x20>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e055      	b.n	8007f86 <HAL_ETH_DMARxDescListInit+0xcc>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e034      	b.n	8007f60 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	015b      	lsls	r3, r3, #5
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	4413      	add	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f06:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8007f0e:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d208      	bcs.n	8007f54 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	3301      	adds	r3, #1
 8007f46:	015b      	lsls	r3, r3, #5
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	60da      	str	r2, [r3, #12]
 8007f52:	e002      	b.n	8007f5a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d3c6      	bcc.n	8007ef6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f72:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr

08007f90 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_ETH_TransmitFrame+0x24>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e0cc      	b.n	800814e <HAL_ETH_TransmitFrame+0x1be>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0b7      	b.n	800814e <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da09      	bge.n	8007ffc <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2212      	movs	r2, #18
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0a8      	b.n	800814e <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8008002:	4293      	cmp	r3, r2
 8008004:	d915      	bls.n	8008032 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	4a53      	ldr	r2, [pc, #332]	@ (8008158 <HAL_ETH_TransmitFrame+0x1c8>)
 800800a:	fba2 2303 	umull	r2, r3, r2, r3
 800800e:	0a9b      	lsrs	r3, r3, #10
 8008010:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4b50      	ldr	r3, [pc, #320]	@ (8008158 <HAL_ETH_TransmitFrame+0x1c8>)
 8008016:	fba3 1302 	umull	r1, r3, r3, r2
 800801a:	0a9b      	lsrs	r3, r3, #10
 800801c:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	3301      	adds	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e001      	b.n	8008036 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d11c      	bne.n	8008076 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008046:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800804a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008056:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008062:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008066:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008074:	e04b      	b.n	800810e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	e044      	b.n	8008106 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008086:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800808a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d107      	bne.n	80080a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80080a0:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80080aa:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d116      	bne.n	80080e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80080c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4a24      	ldr	r2, [pc, #144]	@ (800815c <HAL_ETH_TransmitFrame+0x1cc>)
 80080ca:	fb03 f202 	mul.w	r2, r3, r2
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80080d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80080e2:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3b6      	bcc.n	800807c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008128:	461a      	mov	r2, r3
 800812a:	2304      	movs	r3, #4
 800812c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr
 8008158:	ac02b00b 	.word	0xac02b00b
 800815c:	fffffa0c 	.word	0xfffffa0c

08008160 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_ETH_GetReceivedFrame+0x1a>
 8008176:	2302      	movs	r3, #2
 8008178:	e070      	b.n	800825c <HAL_ETH_GetReceivedFrame+0xfc>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db5a      	blt.n	800824a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d030      	beq.n	8008204 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d103      	bne.n	80081bc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80081d0:	3b04      	subs	r3, #4
 80081d2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e02b      	b.n	800825c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	629a      	str	r2, [r3, #40]	@ 0x28
 8008232:	e00a      	b.n	800824a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	460b      	mov	r3, r1
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b82      	cmp	r3, #130	@ 0x82
 8008286:	d101      	bne.n	800828c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	e050      	b.n	800832e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2282      	movs	r2, #130	@ 0x82
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f003 031c 	and.w	r3, r3, #28
 80082a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8a1b      	ldrh	r3, [r3, #16]
 80082a8:	02db      	lsls	r3, r3, #11
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80082b2:	897b      	ldrh	r3, [r7, #10]
 80082b4:	019b      	lsls	r3, r3, #6
 80082b6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0302 	bic.w	r3, r3, #2
 80082c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082d8:	f7fe fb78 	bl	80069cc <HAL_GetTick>
 80082dc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80082de:	e015      	b.n	800830c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80082e0:	f7fe fb74 	bl	80069cc <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ee:	d309      	bcc.n	8008304 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e014      	b.n	800832e <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e4      	bne.n	80082e0 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	b29b      	uxth	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	460b      	mov	r3, r1
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b42      	cmp	r3, #66	@ 0x42
 8008356:	d101      	bne.n	800835c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008358:	2302      	movs	r3, #2
 800835a:	e04e      	b.n	80083fa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2242      	movs	r2, #66	@ 0x42
 8008360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 031c 	and.w	r3, r3, #28
 8008372:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8a1b      	ldrh	r3, [r3, #16]
 8008378:	02db      	lsls	r3, r3, #11
 800837a:	b29b      	uxth	r3, r3
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8008382:	897b      	ldrh	r3, [r7, #10]
 8008384:	019b      	lsls	r3, r3, #6
 8008386:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f043 0302 	orr.w	r3, r3, #2
 8008396:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083b2:	f7fe fb0b 	bl	80069cc <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80083b8:	e015      	b.n	80083e6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80083ba:	f7fe fb07 	bl	80069cc <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c8:	d309      	bcc.n	80083de <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e00d      	b.n	80083fa <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_ETH_Start+0x16>
 8008414:	2302      	movs	r3, #2
 8008416:	e01f      	b.n	8008458 <HAL_ETH_Start+0x56>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fb3f 	bl	8008aac <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fb76 	bl	8008b20 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc01 	bl	8008c3c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fbaa 	bl	8008b94 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fbd1 	bl	8008be8 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_ETH_Stop+0x16>
 8008472:	2302      	movs	r3, #2
 8008474:	e01f      	b.n	80084b6 <HAL_ETH_Stop+0x56>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb99 	bl	8008bbe <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fbc0 	bl	8008c12 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fb61 	bl	8008b5a <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fbcf 	bl	8008c3c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb21 	bl	8008ae6 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_ETH_ConfigMAC+0x1c>
 80084d8:	2302      	movs	r3, #2
 80084da:	e0e4      	b.n	80086a6 <HAL_ETH_ConfigMAC+0x1e6>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80b1 	beq.w	8008656 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4b6c      	ldr	r3, [pc, #432]	@ (80086b0 <HAL_ETH_ConfigMAC+0x1f0>)
 8008500:	4013      	ands	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800850c:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8008512:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8008518:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 800851e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8008524:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 800852a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8008530:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8008536:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 800853c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8008542:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8008548:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 800854e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008566:	2001      	movs	r0, #1
 8008568:	f7fe fa3a 	bl	80069e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800857c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8008582:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8008588:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 800858e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8008594:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800859a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80085a6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80085a8:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80085b2:	2001      	movs	r0, #1
 80085b4:	f7fe fa14 	bl	80069e0 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80085c8:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80085d2:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80085e2:	4013      	ands	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80085f0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 80085f6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 80085fc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8008602:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8008608:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008620:	2001      	movs	r0, #1
 8008622:	f7fe f9dd 	bl	80069e0 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008646:	2001      	movs	r0, #1
 8008648:	f7fe f9ca 	bl	80069e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	61da      	str	r2, [r3, #28]
 8008654:	e01e      	b.n	8008694 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8008664:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008686:	2001      	movs	r0, #1
 8008688:	f7fe f9aa 	bl	80069e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	ff20810f 	.word	0xff20810f

080086b4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b0b0      	sub	sp, #192	@ 0xc0
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086d0:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80086d8:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80086da:	2300      	movs	r3, #0
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80086de:	2300      	movs	r3, #0
 80086e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80086e2:	2300      	movs	r3, #0
 80086e4:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80086fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008700:	e001      	b.n	8008706 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8008702:	2300      	movs	r3, #0
 8008704:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8008706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800870a:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800870c:	2300      	movs	r3, #0
 800870e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008710:	2300      	movs	r3, #0
 8008712:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8008714:	2300      	movs	r3, #0
 8008716:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8008718:	2300      	movs	r3, #0
 800871a:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800871c:	2300      	movs	r3, #0
 800871e:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8008720:	2340      	movs	r3, #64	@ 0x40
 8008722:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800872a:	2300      	movs	r3, #0
 800872c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8008730:	2300      	movs	r3, #0
 8008732:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8008736:	2300      	movs	r3, #0
 8008738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800873c:	2300      	movs	r3, #0
 800873e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8008742:	2300      	movs	r3, #0
 8008744:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 800874e:	2300      	movs	r3, #0
 8008750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8008754:	2380      	movs	r3, #128	@ 0x80
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800875a:	2300      	movs	r3, #0
 800875c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8008760:	2300      	movs	r3, #0
 8008762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008788:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800878c:	4baa      	ldr	r3, [pc, #680]	@ (8008a38 <ETH_MACDMAConfig+0x384>)
 800878e:	4013      	ands	r3, r2
 8008790:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8008796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008798:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800879a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 800879c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800879e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 80087a0:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80087a6:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80087a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 80087aa:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80087ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 80087ae:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80087b4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80087b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 80087b8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80087ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 80087bc:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80087be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 80087c0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80087c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 80087c4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80087c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 80087c8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80087ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80087dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80087e8:	2001      	movs	r0, #1
 80087ea:	f7fe f8f9 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80087f6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80087f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80087fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80087fc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80087fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8008800:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8008802:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8008806:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008808:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 800880c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800880e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8008812:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8008818:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800881c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008824:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008826:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008832:	2001      	movs	r0, #1
 8008834:	f7fe f8d4 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008840:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800884a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008854:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008860:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008864:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8008868:	4013      	ands	r3, r2
 800886a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800886e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008872:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8008878:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800887a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 800887e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8008880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8008884:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 800888a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 800888c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8008890:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8008892:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008896:	4313      	orrs	r3, r2
 8008898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088a4:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80088b0:	2001      	movs	r0, #1
 80088b2:	f7fe f895 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088be:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80088c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 80088c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80088da:	2001      	movs	r0, #1
 80088dc:	f7fe f880 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80088e8:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80088ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088f2:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80088f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80088fc:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80088fe:	2300      	movs	r3, #0
 8008900:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800890e:	2304      	movs	r3, #4
 8008910:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008912:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008918:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800891c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800891e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008928:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800892a:	2380      	movs	r3, #128	@ 0x80
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800892e:	2300      	movs	r3, #0
 8008930:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008932:	2300      	movs	r3, #0
 8008934:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008948:	4b3c      	ldr	r3, [pc, #240]	@ (8008a3c <ETH_MACDMAConfig+0x388>)
 800894a:	4013      	ands	r3, r2
 800894c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008950:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8008952:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008954:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8008956:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8008958:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800895a:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 800895c:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800895e:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8008960:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8008962:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8008964:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8008966:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8008968:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800896c:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8008970:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008984:	461a      	mov	r2, r3
 8008986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800898a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800899a:	2001      	movs	r0, #1
 800899c:	f7fe f820 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a8:	461a      	mov	r2, r3
 80089aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089ae:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80089b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80089b4:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80089b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 80089b8:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80089bc:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80089be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 80089c0:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80089c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c4:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80089c6:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80089c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80089ca:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089d8:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80089e8:	2001      	movs	r0, #1
 80089ea:	f7fd fff9 	bl	80069e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089f6:	461a      	mov	r2, r3
 80089f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089fc:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d10d      	bne.n	8008a22 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a20:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	461a      	mov	r2, r3
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f808 	bl	8008a40 <ETH_MACAddressConfig>
}
 8008a30:	bf00      	nop
 8008a32:	37c0      	adds	r7, #192	@ 0xc0
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	ff20810f 	.word	0xff20810f
 8008a3c:	f8de3f23 	.word	0xf8de3f23

08008a40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3305      	adds	r3, #5
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	3204      	adds	r2, #4
 8008a58:	7812      	ldrb	r2, [r2, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	4b10      	ldr	r3, [pc, #64]	@ (8008aa4 <ETH_MACAddressConfig+0x64>)
 8008a62:	4413      	add	r3, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3303      	adds	r3, #3
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	061a      	lsls	r2, r3, #24
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3302      	adds	r3, #2
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	4313      	orrs	r3, r2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <ETH_MACAddressConfig+0x68>)
 8008a92:	4413      	add	r3, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	6013      	str	r3, [r2, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr
 8008aa4:	40028040 	.word	0x40028040
 8008aa8:	40028044 	.word	0x40028044

08008aac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f000 f8d9 	bl	8008c88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0208 	bic.w	r2, r2, #8
 8008b00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	f000 f8bc 	bl	8008c88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0204 	orr.w	r2, r2, #4
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b44:	2001      	movs	r0, #1
 8008b46:	f000 f89f 	bl	8008c88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0204 	bic.w	r2, r2, #4
 8008b74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f000 f882 	bl	8008c88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	601a      	str	r2, [r3, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008bae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008bb2:	6193      	str	r3, [r2, #24]
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008bdc:	6193      	str	r3, [r2, #24]
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	f043 0302 	orr.w	r3, r3, #2
 8008c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c06:	6193      	str	r3, [r2, #24]
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	f023 0302 	bic.w	r3, r3, #2
 8008c2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c30:	6193      	str	r3, [r2, #24]
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c5e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f000 f80b 	bl	8008c88 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c7c:	6193      	str	r3, [r2, #24]
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c90:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <ETH_Delay+0x34>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc0 <ETH_Delay+0x38>)
 8008c96:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9a:	0a5b      	lsrs	r3, r3, #9
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008ca4:	bf00      	nop
  }
  while (Delay --);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1e5a      	subs	r2, r3, #1
 8008caa:	60fa      	str	r2, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f9      	bne.n	8008ca4 <ETH_Delay+0x1c>
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr
 8008cbc:	20000070 	.word	0x20000070
 8008cc0:	10624dd3 	.word	0x10624dd3

08008cc4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008cd6:	4b23      	ldr	r3, [pc, #140]	@ (8008d64 <HAL_FLASH_Program+0xa0>)
 8008cd8:	7e1b      	ldrb	r3, [r3, #24]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_FLASH_Program+0x1e>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e03b      	b.n	8008d5a <HAL_FLASH_Program+0x96>
 8008ce2:	4b20      	ldr	r3, [pc, #128]	@ (8008d64 <HAL_FLASH_Program+0xa0>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ce8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008cec:	f000 f870 	bl	8008dd0 <FLASH_WaitForLastOperation>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d12b      	bne.n	8008d52 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d105      	bne.n	8008d0c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008d00:	783b      	ldrb	r3, [r7, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	68b8      	ldr	r0, [r7, #8]
 8008d06:	f000 f919 	bl	8008f3c <FLASH_Program_Byte>
 8008d0a:	e016      	b.n	8008d3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008d12:	883b      	ldrh	r3, [r7, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	68b8      	ldr	r0, [r7, #8]
 8008d18:	f000 f8ee 	bl	8008ef8 <FLASH_Program_HalfWord>
 8008d1c:	e00d      	b.n	8008d3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d105      	bne.n	8008d30 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	68b8      	ldr	r0, [r7, #8]
 8008d2a:	f000 f8c3 	bl	8008eb4 <FLASH_Program_Word>
 8008d2e:	e004      	b.n	8008d3a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d34:	68b8      	ldr	r0, [r7, #8]
 8008d36:	f000 f88b 	bl	8008e50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d3a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008d3e:	f000 f847 	bl	8008dd0 <FLASH_WaitForLastOperation>
 8008d42:	4603      	mov	r3, r0
 8008d44:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8008d46:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <HAL_FLASH_Program+0xa4>)
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	4a07      	ldr	r2, [pc, #28]	@ (8008d68 <HAL_FLASH_Program+0xa4>)
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d52:	4b04      	ldr	r3, [pc, #16]	@ (8008d64 <HAL_FLASH_Program+0xa0>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20004f64 	.word	0x20004f64
 8008d68:	40023c00 	.word	0x40023c00

08008d6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008d76:	4b0b      	ldr	r3, [pc, #44]	@ (8008da4 <HAL_FLASH_Unlock+0x38>)
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da0b      	bge.n	8008d96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <HAL_FLASH_Unlock+0x38>)
 8008d80:	4a09      	ldr	r2, [pc, #36]	@ (8008da8 <HAL_FLASH_Unlock+0x3c>)
 8008d82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <HAL_FLASH_Unlock+0x38>)
 8008d86:	4a09      	ldr	r2, [pc, #36]	@ (8008dac <HAL_FLASH_Unlock+0x40>)
 8008d88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_FLASH_Unlock+0x38>)
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da01      	bge.n	8008d96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008d96:	79fb      	ldrb	r3, [r7, #7]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40023c00 	.word	0x40023c00
 8008da8:	45670123 	.word	0x45670123
 8008dac:	cdef89ab 	.word	0xcdef89ab

08008db0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <HAL_FLASH_Lock+0x1c>)
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	4a04      	ldr	r2, [pc, #16]	@ (8008dcc <HAL_FLASH_Lock+0x1c>)
 8008dba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dbe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40023c00 	.word	0x40023c00

08008dd0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e48 <FLASH_WaitForLastOperation+0x78>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008de2:	f7fd fdf3 	bl	80069cc <HAL_GetTick>
 8008de6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008de8:	e010      	b.n	8008e0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d00c      	beq.n	8008e0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d007      	beq.n	8008e08 <FLASH_WaitForLastOperation+0x38>
 8008df8:	f7fd fde8 	bl	80069cc <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d201      	bcs.n	8008e0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e019      	b.n	8008e40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e4c <FLASH_WaitForLastOperation+0x7c>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e8      	bne.n	8008dea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008e18:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <FLASH_WaitForLastOperation+0x7c>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008e24:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <FLASH_WaitForLastOperation+0x7c>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008e2a:	4b08      	ldr	r3, [pc, #32]	@ (8008e4c <FLASH_WaitForLastOperation+0x7c>)
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008e36:	f000 f8a1 	bl	8008f7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
  
}  
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20004f64 	.word	0x20004f64
 8008e4c:	40023c00 	.word	0x40023c00

08008e50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008e5c:	4b14      	ldr	r3, [pc, #80]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4a13      	ldr	r2, [pc, #76]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008e68:	4b11      	ldr	r3, [pc, #68]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	4a10      	ldr	r2, [pc, #64]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e6e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008e72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008e74:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb0 <FLASH_Program_DoubleWord+0x60>)
 8008e7a:	f043 0301 	orr.w	r3, r3, #1
 8008e7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008e86:	f3bf 8f6f 	isb	sy
}
 8008e8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	000a      	movs	r2, r1
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	68f9      	ldr	r1, [r7, #12]
 8008e9e:	3104      	adds	r1, #4
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	600b      	str	r3, [r1, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40023c00 	.word	0x40023c00

08008eb4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ec8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	4a09      	ldr	r2, [pc, #36]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ed4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008ed6:	4b07      	ldr	r3, [pc, #28]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	4a06      	ldr	r2, [pc, #24]	@ (8008ef4 <FLASH_Program_Word+0x40>)
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	601a      	str	r2, [r3, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40023c00 	.word	0x40023c00

08008ef8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f04:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4a0b      	ldr	r2, [pc, #44]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008f10:	4b09      	ldr	r3, [pc, #36]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	4a08      	ldr	r2, [pc, #32]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	4a05      	ldr	r2, [pc, #20]	@ (8008f38 <FLASH_Program_HalfWord+0x40>)
 8008f22:	f043 0301 	orr.w	r3, r3, #1
 8008f26:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	801a      	strh	r2, [r3, #0]
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	40023c00 	.word	0x40023c00

08008f3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f48:	4b0b      	ldr	r3, [pc, #44]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008f54:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f56:	4a08      	ldr	r2, [pc, #32]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f5c:	4b06      	ldr	r3, [pc, #24]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	4a05      	ldr	r2, [pc, #20]	@ (8008f78 <FLASH_Program_Byte+0x3c>)
 8008f62:	f043 0301 	orr.w	r3, r3, #1
 8008f66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	701a      	strb	r2, [r3, #0]
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr
 8008f78:	40023c00 	.word	0x40023c00

08008f7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008f80:	4b27      	ldr	r3, [pc, #156]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d008      	beq.n	8008f9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008f8c:	4b25      	ldr	r3, [pc, #148]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f043 0308 	orr.w	r3, r3, #8
 8008f94:	4a23      	ldr	r2, [pc, #140]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008f96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008f98:	4b21      	ldr	r3, [pc, #132]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008f9e:	4b20      	ldr	r3, [pc, #128]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008faa:	4b1e      	ldr	r3, [pc, #120]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008fb4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008fb8:	2220      	movs	r2, #32
 8008fba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008fbc:	4b18      	ldr	r3, [pc, #96]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d008      	beq.n	8008fda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008fc8:	4b16      	ldr	r3, [pc, #88]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	4a14      	ldr	r2, [pc, #80]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008fd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008fd4:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008fd6:	2240      	movs	r2, #64	@ 0x40
 8008fd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008fda:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f043 0301 	orr.w	r3, r3, #1
 8008fee:	4a0d      	ldr	r2, [pc, #52]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8008ff0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008ff4:	2280      	movs	r2, #128	@ 0x80
 8008ff6:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008ff8:	4b09      	ldr	r3, [pc, #36]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d008      	beq.n	8009016 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009004:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f043 0310 	orr.w	r3, r3, #16
 800900c:	4a05      	ldr	r2, [pc, #20]	@ (8009024 <FLASH_SetErrorCode+0xa8>)
 800900e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009010:	4b03      	ldr	r3, [pc, #12]	@ (8009020 <FLASH_SetErrorCode+0xa4>)
 8009012:	2202      	movs	r2, #2
 8009014:	60da      	str	r2, [r3, #12]
  }
}
 8009016:	bf00      	nop
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40023c00 	.word	0x40023c00
 8009024:	20004f64 	.word	0x20004f64

08009028 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800903a:	4b31      	ldr	r3, [pc, #196]	@ (8009100 <HAL_FLASHEx_Erase+0xd8>)
 800903c:	7e1b      	ldrb	r3, [r3, #24]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_FLASHEx_Erase+0x1e>
 8009042:	2302      	movs	r3, #2
 8009044:	e058      	b.n	80090f8 <HAL_FLASHEx_Erase+0xd0>
 8009046:	4b2e      	ldr	r3, [pc, #184]	@ (8009100 <HAL_FLASHEx_Erase+0xd8>)
 8009048:	2201      	movs	r2, #1
 800904a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800904c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009050:	f7ff febe 	bl	8008dd0 <FLASH_WaitForLastOperation>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d148      	bne.n	80090f0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f04f 32ff 	mov.w	r2, #4294967295
 8009064:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d115      	bne.n	800909a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f000 f8da 	bl	8009234 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009080:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009084:	f7ff fea4 	bl	8008dd0 <FLASH_WaitForLastOperation>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800908c:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <HAL_FLASHEx_Erase+0xdc>)
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	4a1c      	ldr	r2, [pc, #112]	@ (8009104 <HAL_FLASHEx_Erase+0xdc>)
 8009092:	f023 0304 	bic.w	r3, r3, #4
 8009096:	6113      	str	r3, [r2, #16]
 8009098:	e028      	b.n	80090ec <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	e01c      	b.n	80090dc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4619      	mov	r1, r3
 80090aa:	68b8      	ldr	r0, [r7, #8]
 80090ac:	f000 f82c 	bl	8009108 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80090b4:	f7ff fe8c 	bl	8008dd0 <FLASH_WaitForLastOperation>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80090bc:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <HAL_FLASHEx_Erase+0xdc>)
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4a10      	ldr	r2, [pc, #64]	@ (8009104 <HAL_FLASHEx_Erase+0xdc>)
 80090c2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80090c6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	601a      	str	r2, [r3, #0]
          break;
 80090d4:	e00a      	b.n	80090ec <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	3301      	adds	r3, #1
 80090da:	60bb      	str	r3, [r7, #8]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d3da      	bcc.n	80090a2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80090ec:	f000 f85e 	bl	80091ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80090f0:	4b03      	ldr	r3, [pc, #12]	@ (8009100 <HAL_FLASHEx_Erase+0xd8>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	761a      	strb	r2, [r3, #24]

  return status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20004f64 	.word	0x20004f64
 8009104:	40023c00 	.word	0x40023c00

08009108 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e010      	b.n	8009146 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009124:	78fb      	ldrb	r3, [r7, #3]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d103      	bne.n	8009132 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800912a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e009      	b.n	8009146 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d103      	bne.n	8009140 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e002      	b.n	8009146 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009140:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009144:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009146:	4b18      	ldr	r3, [pc, #96]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	4a17      	ldr	r2, [pc, #92]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 800914c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009150:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009152:	4b15      	ldr	r3, [pc, #84]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009154:	691a      	ldr	r2, [r3, #16]
 8009156:	4914      	ldr	r1, [pc, #80]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800915e:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	4a11      	ldr	r2, [pc, #68]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009164:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009168:	6113      	str	r3, [r2, #16]
 800916a:	23f8      	movs	r3, #248	@ 0xf8
 800916c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	fa93 f3a3 	rbit	r3, r3
 8009174:	60fb      	str	r3, [r7, #12]
  return result;
 8009176:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8009178:	fab3 f383 	clz	r3, r3
 800917c:	b2db      	uxtb	r3, r3
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4093      	lsls	r3, r2
 8009184:	f043 0202 	orr.w	r2, r3, #2
 8009188:	4b07      	ldr	r3, [pc, #28]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	4906      	ldr	r1, [pc, #24]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 800918e:	4313      	orrs	r3, r2
 8009190:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009192:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	4a04      	ldr	r2, [pc, #16]	@ (80091a8 <FLASH_Erase_Sector+0xa0>)
 8009198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800919c:	6113      	str	r3, [r2, #16]
}
 800919e:	bf00      	nop
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	40023c00 	.word	0x40023c00

080091ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80091b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d017      	beq.n	80091ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80091bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80091c8:	4b19      	ldr	r3, [pc, #100]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a18      	ldr	r2, [pc, #96]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	4b16      	ldr	r3, [pc, #88]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a15      	ldr	r2, [pc, #84]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80091e0:	4b13      	ldr	r3, [pc, #76]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a12      	ldr	r2, [pc, #72]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091ea:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80091ec:	4b10      	ldr	r3, [pc, #64]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d017      	beq.n	8009228 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80091f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <FLASH_FlushCaches+0x84>)
 80091fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009202:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009204:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <FLASH_FlushCaches+0x84>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a09      	ldr	r2, [pc, #36]	@ (8009230 <FLASH_FlushCaches+0x84>)
 800920a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	4b07      	ldr	r3, [pc, #28]	@ (8009230 <FLASH_FlushCaches+0x84>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a06      	ldr	r2, [pc, #24]	@ (8009230 <FLASH_FlushCaches+0x84>)
 8009216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800921a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800921c:	4b04      	ldr	r3, [pc, #16]	@ (8009230 <FLASH_FlushCaches+0x84>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a03      	ldr	r2, [pc, #12]	@ (8009230 <FLASH_FlushCaches+0x84>)
 8009222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009226:	6013      	str	r3, [r2, #0]
  }
}
 8009228:	bf00      	nop
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	40023c00 	.word	0x40023c00

08009234 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009240:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <FLASH_MassErase+0x40>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	4a0b      	ldr	r2, [pc, #44]	@ (8009274 <FLASH_MassErase+0x40>)
 8009246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800924a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800924c:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <FLASH_MassErase+0x40>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	4a08      	ldr	r2, [pc, #32]	@ (8009274 <FLASH_MassErase+0x40>)
 8009252:	f043 0304 	orr.w	r3, r3, #4
 8009256:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8009258:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <FLASH_MassErase+0x40>)
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	4313      	orrs	r3, r2
 8009262:	4a04      	ldr	r2, [pc, #16]	@ (8009274 <FLASH_MassErase+0x40>)
 8009264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009268:	6113      	str	r3, [r2, #16]
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr
 8009274:	40023c00 	.word	0x40023c00

08009278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009286:	e16f      	b.n	8009568 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	2101      	movs	r1, #1
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	fa01 f303 	lsl.w	r3, r1, r3
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8161 	beq.w	8009562 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d005      	beq.n	80092b8 <HAL_GPIO_Init+0x40>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f003 0303 	and.w	r3, r3, #3
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d130      	bne.n	800931a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	2203      	movs	r2, #3
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4013      	ands	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4313      	orrs	r3, r2
 80092e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80092ee:	2201      	movs	r2, #1
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	fa02 f303 	lsl.w	r3, r2, r3
 80092f6:	43db      	mvns	r3, r3
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4013      	ands	r3, r2
 80092fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	091b      	lsrs	r3, r3, #4
 8009304:	f003 0201 	and.w	r2, r3, #1
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d017      	beq.n	8009356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	2203      	movs	r2, #3
 8009332:	fa02 f303 	lsl.w	r3, r2, r3
 8009336:	43db      	mvns	r3, r3
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4013      	ands	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	fa02 f303 	lsl.w	r3, r2, r3
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d123      	bne.n	80093aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	08da      	lsrs	r2, r3, #3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3208      	adds	r2, #8
 800936a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	220f      	movs	r2, #15
 800937a:	fa02 f303 	lsl.w	r3, r2, r3
 800937e:	43db      	mvns	r3, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4013      	ands	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	fa02 f303 	lsl.w	r3, r2, r3
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	08da      	lsrs	r2, r3, #3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3208      	adds	r2, #8
 80093a4:	6939      	ldr	r1, [r7, #16]
 80093a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	2203      	movs	r2, #3
 80093b6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ba:	43db      	mvns	r3, r3
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4013      	ands	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f003 0203 	and.w	r2, r3, #3
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	005b      	lsls	r3, r3, #1
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 80bb 	beq.w	8009562 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093ec:	2300      	movs	r3, #0
 80093ee:	60bb      	str	r3, [r7, #8]
 80093f0:	4b64      	ldr	r3, [pc, #400]	@ (8009584 <HAL_GPIO_Init+0x30c>)
 80093f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f4:	4a63      	ldr	r2, [pc, #396]	@ (8009584 <HAL_GPIO_Init+0x30c>)
 80093f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80093fc:	4b61      	ldr	r3, [pc, #388]	@ (8009584 <HAL_GPIO_Init+0x30c>)
 80093fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009404:	60bb      	str	r3, [r7, #8]
 8009406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009408:	4a5f      	ldr	r2, [pc, #380]	@ (8009588 <HAL_GPIO_Init+0x310>)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	089b      	lsrs	r3, r3, #2
 800940e:	3302      	adds	r3, #2
 8009410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f003 0303 	and.w	r3, r3, #3
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	220f      	movs	r2, #15
 8009420:	fa02 f303 	lsl.w	r3, r2, r3
 8009424:	43db      	mvns	r3, r3
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	4013      	ands	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a57      	ldr	r2, [pc, #348]	@ (800958c <HAL_GPIO_Init+0x314>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d031      	beq.n	8009498 <HAL_GPIO_Init+0x220>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a56      	ldr	r2, [pc, #344]	@ (8009590 <HAL_GPIO_Init+0x318>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d02b      	beq.n	8009494 <HAL_GPIO_Init+0x21c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a55      	ldr	r2, [pc, #340]	@ (8009594 <HAL_GPIO_Init+0x31c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d025      	beq.n	8009490 <HAL_GPIO_Init+0x218>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a54      	ldr	r2, [pc, #336]	@ (8009598 <HAL_GPIO_Init+0x320>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d01f      	beq.n	800948c <HAL_GPIO_Init+0x214>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a53      	ldr	r2, [pc, #332]	@ (800959c <HAL_GPIO_Init+0x324>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d019      	beq.n	8009488 <HAL_GPIO_Init+0x210>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a52      	ldr	r2, [pc, #328]	@ (80095a0 <HAL_GPIO_Init+0x328>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d013      	beq.n	8009484 <HAL_GPIO_Init+0x20c>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a51      	ldr	r2, [pc, #324]	@ (80095a4 <HAL_GPIO_Init+0x32c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d00d      	beq.n	8009480 <HAL_GPIO_Init+0x208>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a50      	ldr	r2, [pc, #320]	@ (80095a8 <HAL_GPIO_Init+0x330>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d007      	beq.n	800947c <HAL_GPIO_Init+0x204>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a4f      	ldr	r2, [pc, #316]	@ (80095ac <HAL_GPIO_Init+0x334>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d101      	bne.n	8009478 <HAL_GPIO_Init+0x200>
 8009474:	2308      	movs	r3, #8
 8009476:	e010      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009478:	2309      	movs	r3, #9
 800947a:	e00e      	b.n	800949a <HAL_GPIO_Init+0x222>
 800947c:	2307      	movs	r3, #7
 800947e:	e00c      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009480:	2306      	movs	r3, #6
 8009482:	e00a      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009484:	2305      	movs	r3, #5
 8009486:	e008      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009488:	2304      	movs	r3, #4
 800948a:	e006      	b.n	800949a <HAL_GPIO_Init+0x222>
 800948c:	2303      	movs	r3, #3
 800948e:	e004      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009490:	2302      	movs	r3, #2
 8009492:	e002      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <HAL_GPIO_Init+0x222>
 8009498:	2300      	movs	r3, #0
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	f002 0203 	and.w	r2, r2, #3
 80094a0:	0092      	lsls	r2, r2, #2
 80094a2:	4093      	lsls	r3, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80094ac:	4936      	ldr	r1, [pc, #216]	@ (8009588 <HAL_GPIO_Init+0x310>)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	089b      	lsrs	r3, r3, #2
 80094b2:	3302      	adds	r3, #2
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80094ba:	4b3d      	ldr	r3, [pc, #244]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	43db      	mvns	r3, r3
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4013      	ands	r3, r2
 80094c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80094de:	4a34      	ldr	r2, [pc, #208]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094e4:	4b32      	ldr	r3, [pc, #200]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	43db      	mvns	r3, r3
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4013      	ands	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009508:	4a29      	ldr	r2, [pc, #164]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800950e:	4b28      	ldr	r3, [pc, #160]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	43db      	mvns	r3, r3
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	4013      	ands	r3, r2
 800951c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009532:	4a1f      	ldr	r2, [pc, #124]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009538:	4b1d      	ldr	r3, [pc, #116]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	43db      	mvns	r3, r3
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4013      	ands	r3, r2
 8009546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800955c:	4a14      	ldr	r2, [pc, #80]	@ (80095b0 <HAL_GPIO_Init+0x338>)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	3301      	adds	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	f47f ae88 	bne.w	8009288 <HAL_GPIO_Init+0x10>
  }
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr
 8009584:	40023800 	.word	0x40023800
 8009588:	40013800 	.word	0x40013800
 800958c:	40020000 	.word	0x40020000
 8009590:	40020400 	.word	0x40020400
 8009594:	40020800 	.word	0x40020800
 8009598:	40020c00 	.word	0x40020c00
 800959c:	40021000 	.word	0x40021000
 80095a0:	40021400 	.word	0x40021400
 80095a4:	40021800 	.word	0x40021800
 80095a8:	40021c00 	.word	0x40021c00
 80095ac:	40022000 	.word	0x40022000
 80095b0:	40013c00 	.word	0x40013c00

080095b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	887b      	ldrh	r3, [r7, #2]
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
 80095d0:	e001      	b.n	80095d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
	...

080095e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80095ee:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095f0:	695a      	ldr	r2, [r3, #20]
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	4013      	ands	r3, r2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095fa:	4a05      	ldr	r2, [pc, #20]	@ (8009610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	4618      	mov	r0, r3
 8009604:	f7fa fbec 	bl	8003de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	40013c00 	.word	0x40013c00

08009614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e12b      	b.n	800987e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7fa f8e8 	bl	8003810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2224      	movs	r2, #36	@ 0x24
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0201 	bic.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009678:	f001 f8a4 	bl	800a7c4 <HAL_RCC_GetPCLK1Freq>
 800967c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4a81      	ldr	r2, [pc, #516]	@ (8009888 <HAL_I2C_Init+0x274>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d807      	bhi.n	8009698 <HAL_I2C_Init+0x84>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a80      	ldr	r2, [pc, #512]	@ (800988c <HAL_I2C_Init+0x278>)
 800968c:	4293      	cmp	r3, r2
 800968e:	bf94      	ite	ls
 8009690:	2301      	movls	r3, #1
 8009692:	2300      	movhi	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	e006      	b.n	80096a6 <HAL_I2C_Init+0x92>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a7d      	ldr	r2, [pc, #500]	@ (8009890 <HAL_I2C_Init+0x27c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	bf94      	ite	ls
 80096a0:	2301      	movls	r3, #1
 80096a2:	2300      	movhi	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e0e7      	b.n	800987e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4a78      	ldr	r2, [pc, #480]	@ (8009894 <HAL_I2C_Init+0x280>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	0c9b      	lsrs	r3, r3, #18
 80096b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4a6a      	ldr	r2, [pc, #424]	@ (8009888 <HAL_I2C_Init+0x274>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d802      	bhi.n	80096e8 <HAL_I2C_Init+0xd4>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3301      	adds	r3, #1
 80096e6:	e009      	b.n	80096fc <HAL_I2C_Init+0xe8>
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	4a69      	ldr	r2, [pc, #420]	@ (8009898 <HAL_I2C_Init+0x284>)
 80096f4:	fba2 2303 	umull	r2, r3, r2, r3
 80096f8:	099b      	lsrs	r3, r3, #6
 80096fa:	3301      	adds	r3, #1
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6812      	ldr	r2, [r2, #0]
 8009700:	430b      	orrs	r3, r1
 8009702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800970e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	495c      	ldr	r1, [pc, #368]	@ (8009888 <HAL_I2C_Init+0x274>)
 8009718:	428b      	cmp	r3, r1
 800971a:	d819      	bhi.n	8009750 <HAL_I2C_Init+0x13c>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	1e59      	subs	r1, r3, #1
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	fbb1 f3f3 	udiv	r3, r1, r3
 800972a:	1c59      	adds	r1, r3, #1
 800972c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009730:	400b      	ands	r3, r1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <HAL_I2C_Init+0x138>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1e59      	subs	r1, r3, #1
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	fbb1 f3f3 	udiv	r3, r1, r3
 8009744:	3301      	adds	r3, #1
 8009746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974a:	e051      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 800974c:	2304      	movs	r3, #4
 800974e:	e04f      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d111      	bne.n	800977c <HAL_I2C_Init+0x168>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	1e58      	subs	r0, r3, #1
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6859      	ldr	r1, [r3, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	440b      	add	r3, r1
 8009766:	fbb0 f3f3 	udiv	r3, r0, r3
 800976a:	3301      	adds	r3, #1
 800976c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009770:	2b00      	cmp	r3, #0
 8009772:	bf0c      	ite	eq
 8009774:	2301      	moveq	r3, #1
 8009776:	2300      	movne	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	e012      	b.n	80097a2 <HAL_I2C_Init+0x18e>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	1e58      	subs	r0, r3, #1
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6859      	ldr	r1, [r3, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	0099      	lsls	r1, r3, #2
 800978c:	440b      	add	r3, r1
 800978e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009792:	3301      	adds	r3, #1
 8009794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009798:	2b00      	cmp	r3, #0
 800979a:	bf0c      	ite	eq
 800979c:	2301      	moveq	r3, #1
 800979e:	2300      	movne	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <HAL_I2C_Init+0x196>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e022      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10e      	bne.n	80097d0 <HAL_I2C_Init+0x1bc>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1e58      	subs	r0, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6859      	ldr	r1, [r3, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	440b      	add	r3, r1
 80097c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80097c4:	3301      	adds	r3, #1
 80097c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ce:	e00f      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	1e58      	subs	r0, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6859      	ldr	r1, [r3, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	0099      	lsls	r1, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80097e6:	3301      	adds	r3, #1
 80097e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	6809      	ldr	r1, [r1, #0]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69da      	ldr	r2, [r3, #28]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800981e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6911      	ldr	r1, [r2, #16]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68d2      	ldr	r2, [r2, #12]
 800982a:	4311      	orrs	r1, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	430b      	orrs	r3, r1
 8009832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	000186a0 	.word	0x000186a0
 800988c:	001e847f 	.word	0x001e847f
 8009890:	003d08ff 	.word	0x003d08ff
 8009894:	431bde83 	.word	0x431bde83
 8009898:	10624dd3 	.word	0x10624dd3

0800989c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	817b      	strh	r3, [r7, #10]
 80098ae:	460b      	mov	r3, r1
 80098b0:	813b      	strh	r3, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098b6:	f7fd f889 	bl	80069cc <HAL_GetTick>
 80098ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	f040 80d9 	bne.w	8009a7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	2319      	movs	r3, #25
 80098d0:	2201      	movs	r2, #1
 80098d2:	496d      	ldr	r1, [pc, #436]	@ (8009a88 <HAL_I2C_Mem_Write+0x1ec>)
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 f971 	bl	8009bbc <I2C_WaitOnFlagUntilTimeout>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e0cc      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_I2C_Mem_Write+0x56>
 80098ee:	2302      	movs	r3, #2
 80098f0:	e0c5      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b01      	cmp	r3, #1
 8009906:	d007      	beq.n	8009918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2221      	movs	r2, #33	@ 0x21
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2240      	movs	r2, #64	@ 0x40
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a3a      	ldr	r2, [r7, #32]
 8009942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4a4d      	ldr	r2, [pc, #308]	@ (8009a8c <HAL_I2C_Mem_Write+0x1f0>)
 8009958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800995a:	88f8      	ldrh	r0, [r7, #6]
 800995c:	893a      	ldrh	r2, [r7, #8]
 800995e:	8979      	ldrh	r1, [r7, #10]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4603      	mov	r3, r0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f890 	bl	8009a90 <I2C_RequestMemoryWrite>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d052      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e081      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fa36 	bl	8009df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00d      	beq.n	80099a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998e:	2b04      	cmp	r3, #4
 8009990:	d107      	bne.n	80099a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e06b      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d11b      	bne.n	8009a1c <HAL_I2C_Mem_Write+0x180>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1aa      	bne.n	800997a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fa29 	bl	8009e80 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d107      	bne.n	8009a4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e016      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	00100002 	.word	0x00100002
 8009a8c:	ffff0000 	.word	0xffff0000

08009a90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	817b      	strh	r3, [r7, #10]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	813b      	strh	r3, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f878 	bl	8009bbc <I2C_WaitOnFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae0:	d103      	bne.n	8009aea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e05f      	b.n	8009bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009aee:	897b      	ldrh	r3, [r7, #10]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	492d      	ldr	r1, [pc, #180]	@ (8009bb8 <I2C_RequestMemoryWrite+0x128>)
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f8d3 	bl	8009cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e04c      	b.n	8009bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b2c:	6a39      	ldr	r1, [r7, #32]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f95e 	bl	8009df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00d      	beq.n	8009b56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d107      	bne.n	8009b52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e02b      	b.n	8009bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d105      	bne.n	8009b68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b5c:	893b      	ldrh	r3, [r7, #8]
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	611a      	str	r2, [r3, #16]
 8009b66:	e021      	b.n	8009bac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b68:	893b      	ldrh	r3, [r7, #8]
 8009b6a:	0a1b      	lsrs	r3, r3, #8
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b78:	6a39      	ldr	r1, [r7, #32]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f938 	bl	8009df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00d      	beq.n	8009ba2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d107      	bne.n	8009b9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e005      	b.n	8009bae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ba2:	893b      	ldrh	r3, [r7, #8]
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	00010002 	.word	0x00010002

08009bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bcc:	e048      	b.n	8009c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d044      	beq.n	8009c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd6:	f7fc fef9 	bl	80069cc <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d302      	bcc.n	8009bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d139      	bne.n	8009c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d10d      	bne.n	8009c12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	43da      	mvns	r2, r3
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	4013      	ands	r3, r2
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bf0c      	ite	eq
 8009c08:	2301      	moveq	r3, #1
 8009c0a:	2300      	movne	r3, #0
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	e00c      	b.n	8009c2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	43da      	mvns	r2, r3
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bf0c      	ite	eq
 8009c24:	2301      	moveq	r3, #1
 8009c26:	2300      	movne	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d116      	bne.n	8009c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2220      	movs	r2, #32
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4c:	f043 0220 	orr.w	r2, r3, #32
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e023      	b.n	8009ca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	0c1b      	lsrs	r3, r3, #16
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d10d      	bne.n	8009c86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	43da      	mvns	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	4013      	ands	r3, r2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2301      	moveq	r3, #1
 8009c7e:	2300      	movne	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	e00c      	b.n	8009ca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	43da      	mvns	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4013      	ands	r3, r2
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bf0c      	ite	eq
 8009c98:	2301      	moveq	r3, #1
 8009c9a:	2300      	movne	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d093      	beq.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cbe:	e071      	b.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cce:	d123      	bne.n	8009d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d04:	f043 0204 	orr.w	r2, r3, #4
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e067      	b.n	8009de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1e:	d041      	beq.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d20:	f7fc fe54 	bl	80069cc <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d136      	bne.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d10c      	bne.n	8009d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	43da      	mvns	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e00b      	b.n	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	43da      	mvns	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4013      	ands	r3, r2
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d016      	beq.n	8009da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d90:	f043 0220 	orr.w	r2, r3, #32
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e021      	b.n	8009de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	0c1b      	lsrs	r3, r3, #16
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d10c      	bne.n	8009dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	43da      	mvns	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4013      	ands	r3, r2
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bf14      	ite	ne
 8009dc0:	2301      	movne	r3, #1
 8009dc2:	2300      	moveq	r3, #0
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	e00b      	b.n	8009de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	43da      	mvns	r2, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bf14      	ite	ne
 8009dda:	2301      	movne	r3, #1
 8009ddc:	2300      	moveq	r3, #0
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f47f af6d 	bne.w	8009cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dfc:	e034      	b.n	8009e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f886 	bl	8009f10 <I2C_IsAcknowledgeFailed>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e034      	b.n	8009e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e14:	d028      	beq.n	8009e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e16:	f7fc fdd9 	bl	80069cc <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d302      	bcc.n	8009e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d11d      	bne.n	8009e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d016      	beq.n	8009e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2220      	movs	r2, #32
 8009e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e54:	f043 0220 	orr.w	r2, r3, #32
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e007      	b.n	8009e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e72:	2b80      	cmp	r3, #128	@ 0x80
 8009e74:	d1c3      	bne.n	8009dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e8c:	e034      	b.n	8009ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f83e 	bl	8009f10 <I2C_IsAcknowledgeFailed>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e034      	b.n	8009f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d028      	beq.n	8009ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea6:	f7fc fd91 	bl	80069cc <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11d      	bne.n	8009ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d016      	beq.n	8009ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	f043 0220 	orr.w	r2, r3, #32
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e007      	b.n	8009f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d1c3      	bne.n	8009e8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f26:	d11b      	bne.n	8009f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4c:	f043 0204 	orr.w	r2, r3, #4
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f76:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	fa93 f3a3 	rbit	r3, r3
 8009f7e:	603b      	str	r3, [r7, #0]
  return result;
 8009f80:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009f82:	fab3 f383 	clz	r3, r3
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009f8c:	f503 3360 	add.w	r3, r3, #229376	@ 0x38000
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	461a      	mov	r2, r3
 8009f94:	2301      	movs	r3, #1
 8009f96:	6013      	str	r3, [r2, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr
	...

08009fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e23b      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d050      	beq.n	800a064 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f003 030c 	and.w	r3, r3, #12
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d00c      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fce:	4b9b      	ldr	r3, [pc, #620]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d112      	bne.n	800a000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fda:	4b98      	ldr	r3, [pc, #608]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fe6:	d10b      	bne.n	800a000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fe8:	4b94      	ldr	r3, [pc, #592]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d036      	beq.n	800a062 <HAL_RCC_OscConfig+0xbe>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d132      	bne.n	800a062 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e216      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	4b8e      	ldr	r3, [pc, #568]	@ (800a240 <HAL_RCC_OscConfig+0x29c>)
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d013      	beq.n	800a03a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a012:	f7fc fcdb 	bl	80069cc <HAL_GetTick>
 800a016:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a018:	e008      	b.n	800a02c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a01a:	f7fc fcd7 	bl	80069cc <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b64      	cmp	r3, #100	@ 0x64
 800a026:	d901      	bls.n	800a02c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e200      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a02c:	4b83      	ldr	r3, [pc, #524]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0f0      	beq.n	800a01a <HAL_RCC_OscConfig+0x76>
 800a038:	e014      	b.n	800a064 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a03a:	f7fc fcc7 	bl	80069cc <HAL_GetTick>
 800a03e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a040:	e008      	b.n	800a054 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a042:	f7fc fcc3 	bl	80069cc <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	2b64      	cmp	r3, #100	@ 0x64
 800a04e:	d901      	bls.n	800a054 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e1ec      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a054:	4b79      	ldr	r3, [pc, #484]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1f0      	bne.n	800a042 <HAL_RCC_OscConfig+0x9e>
 800a060:	e000      	b.n	800a064 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a062:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d077      	beq.n	800a160 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a070:	4b72      	ldr	r3, [pc, #456]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f003 030c 	and.w	r3, r3, #12
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a07c:	4b6f      	ldr	r3, [pc, #444]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a084:	2b08      	cmp	r3, #8
 800a086:	d126      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a088:	4b6c      	ldr	r3, [pc, #432]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d120      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a094:	4b69      	ldr	r3, [pc, #420]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0302 	and.w	r3, r3, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <HAL_RCC_OscConfig+0x108>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d001      	beq.n	800a0ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e1c0      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0ac:	4b63      	ldr	r3, [pc, #396]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	21f8      	movs	r1, #248	@ 0xf8
 800a0ba:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0bc:	68f9      	ldr	r1, [r7, #12]
 800a0be:	fa91 f1a1 	rbit	r1, r1
 800a0c2:	6139      	str	r1, [r7, #16]
  return result;
 800a0c4:	6939      	ldr	r1, [r7, #16]
 800a0c6:	fab1 f181 	clz	r1, r1
 800a0ca:	b2c9      	uxtb	r1, r1
 800a0cc:	408b      	lsls	r3, r1
 800a0ce:	495b      	ldr	r1, [pc, #364]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0d4:	e044      	b.n	800a160 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d02a      	beq.n	800a134 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0de:	4b59      	ldr	r3, [pc, #356]	@ (800a244 <HAL_RCC_OscConfig+0x2a0>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0e4:	f7fc fc72 	bl	80069cc <HAL_GetTick>
 800a0e8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0ea:	e008      	b.n	800a0fe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0ec:	f7fc fc6e 	bl	80069cc <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d901      	bls.n	800a0fe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e197      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f0      	beq.n	800a0ec <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a10a:	4b4c      	ldr	r3, [pc, #304]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	21f8      	movs	r1, #248	@ 0xf8
 800a118:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a11a:	6979      	ldr	r1, [r7, #20]
 800a11c:	fa91 f1a1 	rbit	r1, r1
 800a120:	61b9      	str	r1, [r7, #24]
  return result;
 800a122:	69b9      	ldr	r1, [r7, #24]
 800a124:	fab1 f181 	clz	r1, r1
 800a128:	b2c9      	uxtb	r1, r1
 800a12a:	408b      	lsls	r3, r1
 800a12c:	4943      	ldr	r1, [pc, #268]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	600b      	str	r3, [r1, #0]
 800a132:	e015      	b.n	800a160 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a134:	4b43      	ldr	r3, [pc, #268]	@ (800a244 <HAL_RCC_OscConfig+0x2a0>)
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a13a:	f7fc fc47 	bl	80069cc <HAL_GetTick>
 800a13e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a140:	e008      	b.n	800a154 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a142:	f7fc fc43 	bl	80069cc <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e16c      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a154:	4b39      	ldr	r3, [pc, #228]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1f0      	bne.n	800a142 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0308 	and.w	r3, r3, #8
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d030      	beq.n	800a1ce <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d016      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a174:	4b34      	ldr	r3, [pc, #208]	@ (800a248 <HAL_RCC_OscConfig+0x2a4>)
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a17a:	f7fc fc27 	bl	80069cc <HAL_GetTick>
 800a17e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a180:	e008      	b.n	800a194 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a182:	f7fc fc23 	bl	80069cc <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e14c      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a194:	4b29      	ldr	r3, [pc, #164]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0f0      	beq.n	800a182 <HAL_RCC_OscConfig+0x1de>
 800a1a0:	e015      	b.n	800a1ce <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1a2:	4b29      	ldr	r3, [pc, #164]	@ (800a248 <HAL_RCC_OscConfig+0x2a4>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1a8:	f7fc fc10 	bl	80069cc <HAL_GetTick>
 800a1ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1b0:	f7fc fc0c 	bl	80069cc <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e135      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1c2:	4b1e      	ldr	r3, [pc, #120]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a1c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f0      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8087 	beq.w	800a2ea <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1e2:	4b16      	ldr	r3, [pc, #88]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d110      	bne.n	800a210 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60bb      	str	r3, [r7, #8]
 800a1f2:	4b12      	ldr	r3, [pc, #72]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f6:	4a11      	ldr	r2, [pc, #68]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a1f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a23c <HAL_RCC_OscConfig+0x298>)
 800a200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a206:	60bb      	str	r3, [r7, #8]
 800a208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a20a:	2301      	movs	r3, #1
 800a20c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a210:	4b0e      	ldr	r3, [pc, #56]	@ (800a24c <HAL_RCC_OscConfig+0x2a8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a0d      	ldr	r2, [pc, #52]	@ (800a24c <HAL_RCC_OscConfig+0x2a8>)
 800a216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a21a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a21c:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <HAL_RCC_OscConfig+0x2a8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a224:	2b00      	cmp	r3, #0
 800a226:	d122      	bne.n	800a26e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a228:	4b08      	ldr	r3, [pc, #32]	@ (800a24c <HAL_RCC_OscConfig+0x2a8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a07      	ldr	r2, [pc, #28]	@ (800a24c <HAL_RCC_OscConfig+0x2a8>)
 800a22e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a234:	f7fc fbca 	bl	80069cc <HAL_GetTick>
 800a238:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a23a:	e012      	b.n	800a262 <HAL_RCC_OscConfig+0x2be>
 800a23c:	40023800 	.word	0x40023800
 800a240:	40023802 	.word	0x40023802
 800a244:	42470000 	.word	0x42470000
 800a248:	42470e80 	.word	0x42470e80
 800a24c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a250:	f7fc fbbc 	bl	80069cc <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e0e5      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a262:	4b75      	ldr	r3, [pc, #468]	@ (800a438 <HAL_RCC_OscConfig+0x494>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	4b72      	ldr	r3, [pc, #456]	@ (800a43c <HAL_RCC_OscConfig+0x498>)
 800a274:	b2d2      	uxtb	r2, r2
 800a276:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d015      	beq.n	800a2ac <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a280:	f7fc fba4 	bl	80069cc <HAL_GetTick>
 800a284:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a286:	e00a      	b.n	800a29e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a288:	f7fc fba0 	bl	80069cc <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e0c7      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a29e:	4b68      	ldr	r3, [pc, #416]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0ee      	beq.n	800a288 <HAL_RCC_OscConfig+0x2e4>
 800a2aa:	e014      	b.n	800a2d6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2ac:	f7fc fb8e 	bl	80069cc <HAL_GetTick>
 800a2b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b2:	e00a      	b.n	800a2ca <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2b4:	f7fc fb8a 	bl	80069cc <HAL_GetTick>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e0b1      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1ee      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d105      	bne.n	800a2ea <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2de:	4b58      	ldr	r3, [pc, #352]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e2:	4a57      	ldr	r2, [pc, #348]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a2e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f000 809c 	beq.w	800a42c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2f4:	4b52      	ldr	r3, [pc, #328]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 030c 	and.w	r3, r3, #12
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d061      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d146      	bne.n	800a396 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a308:	4b4e      	ldr	r3, [pc, #312]	@ (800a444 <HAL_RCC_OscConfig+0x4a0>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a30e:	f7fc fb5d 	bl	80069cc <HAL_GetTick>
 800a312:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a314:	e008      	b.n	800a328 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a316:	f7fc fb59 	bl	80069cc <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b64      	cmp	r3, #100	@ 0x64
 800a322:	d901      	bls.n	800a328 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e082      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a328:	4b45      	ldr	r3, [pc, #276]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1f0      	bne.n	800a316 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a334:	4b42      	ldr	r3, [pc, #264]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	4b43      	ldr	r3, [pc, #268]	@ (800a448 <HAL_RCC_OscConfig+0x4a4>)
 800a33a:	4013      	ands	r3, r2
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	69d1      	ldr	r1, [r2, #28]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6a12      	ldr	r2, [r2, #32]
 800a344:	4311      	orrs	r1, r2
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a34a:	0192      	lsls	r2, r2, #6
 800a34c:	4311      	orrs	r1, r2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a352:	0612      	lsls	r2, r2, #24
 800a354:	4311      	orrs	r1, r2
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a35a:	0852      	lsrs	r2, r2, #1
 800a35c:	3a01      	subs	r2, #1
 800a35e:	0412      	lsls	r2, r2, #16
 800a360:	430a      	orrs	r2, r1
 800a362:	4937      	ldr	r1, [pc, #220]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a364:	4313      	orrs	r3, r2
 800a366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a368:	4b36      	ldr	r3, [pc, #216]	@ (800a444 <HAL_RCC_OscConfig+0x4a0>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a36e:	f7fc fb2d 	bl	80069cc <HAL_GetTick>
 800a372:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a376:	f7fc fb29 	bl	80069cc <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b64      	cmp	r3, #100	@ 0x64
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e052      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a388:	4b2d      	ldr	r3, [pc, #180]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCC_OscConfig+0x3d2>
 800a394:	e04a      	b.n	800a42c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a396:	4b2b      	ldr	r3, [pc, #172]	@ (800a444 <HAL_RCC_OscConfig+0x4a0>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a39c:	f7fc fb16 	bl	80069cc <HAL_GetTick>
 800a3a0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3a4:	f7fc fb12 	bl	80069cc <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b64      	cmp	r3, #100	@ 0x64
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e03b      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3b6:	4b22      	ldr	r3, [pc, #136]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f0      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x400>
 800a3c2:	e033      	b.n	800a42c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e02e      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a3d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a440 <HAL_RCC_OscConfig+0x49c>)
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d121      	bne.n	800a428 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d11a      	bne.n	800a428 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3f2:	69fa      	ldr	r2, [r7, #28]
 800a3f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a3fe:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a400:	4293      	cmp	r3, r2
 800a402:	d111      	bne.n	800a428 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	085b      	lsrs	r3, r3, #1
 800a410:	3b01      	subs	r3, #1
 800a412:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a414:	429a      	cmp	r2, r3
 800a416:	d107      	bne.n	800a428 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a424:	429a      	cmp	r2, r3
 800a426:	d001      	beq.n	800a42c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e000      	b.n	800a42e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3728      	adds	r7, #40	@ 0x28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	40007000 	.word	0x40007000
 800a43c:	40023870 	.word	0x40023870
 800a440:	40023800 	.word	0x40023800
 800a444:	42470060 	.word	0x42470060
 800a448:	f0bc8000 	.word	0xf0bc8000

0800a44c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e0d2      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a460:	4b6b      	ldr	r3, [pc, #428]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 030f 	and.w	r3, r3, #15
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d90c      	bls.n	800a488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a46e:	4b68      	ldr	r3, [pc, #416]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a476:	4b66      	ldr	r3, [pc, #408]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 030f 	and.w	r3, r3, #15
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	d001      	beq.n	800a488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0be      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d020      	beq.n	800a4d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d005      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4a0:	4b5c      	ldr	r3, [pc, #368]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	4a5b      	ldr	r2, [pc, #364]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a4aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0308 	and.w	r3, r3, #8
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800a4b8:	4b56      	ldr	r3, [pc, #344]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	4a55      	ldr	r2, [pc, #340]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a4c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4c4:	4b53      	ldr	r3, [pc, #332]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	4950      	ldr	r1, [pc, #320]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d040      	beq.n	800a564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d107      	bne.n	800a4fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d115      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e085      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d107      	bne.n	800a512 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a502:	4b44      	ldr	r3, [pc, #272]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e079      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a512:	4b40      	ldr	r3, [pc, #256]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e071      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a522:	4b3c      	ldr	r3, [pc, #240]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f023 0203 	bic.w	r2, r3, #3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	4939      	ldr	r1, [pc, #228]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a530:	4313      	orrs	r3, r2
 800a532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a534:	f7fc fa4a 	bl	80069cc <HAL_GetTick>
 800a538:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a53c:	f7fc fa46 	bl	80069cc <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e059      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a552:	4b30      	ldr	r3, [pc, #192]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f003 020c 	and.w	r2, r3, #12
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	429a      	cmp	r2, r3
 800a562:	d1eb      	bne.n	800a53c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a564:	4b2a      	ldr	r3, [pc, #168]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 030f 	and.w	r3, r3, #15
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d20c      	bcs.n	800a58c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a572:	4b27      	ldr	r3, [pc, #156]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a57a:	4b25      	ldr	r3, [pc, #148]	@ (800a610 <HAL_RCC_ClockConfig+0x1c4>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d001      	beq.n	800a58c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e03c      	b.n	800a606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d008      	beq.n	800a5aa <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a598:	4b1e      	ldr	r3, [pc, #120]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	491b      	ldr	r1, [pc, #108]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5b6:	4b17      	ldr	r3, [pc, #92]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	4913      	ldr	r1, [pc, #76]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800a5ca:	f000 f82b 	bl	800a624 <HAL_RCC_GetSysClockFreq>
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	4b10      	ldr	r3, [pc, #64]	@ (800a614 <HAL_RCC_ClockConfig+0x1c8>)
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5d8:	22f0      	movs	r2, #240	@ 0xf0
 800a5da:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	fa92 f2a2 	rbit	r2, r2
 800a5e2:	613a      	str	r2, [r7, #16]
  return result;
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	fab2 f282 	clz	r2, r2
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	40d3      	lsrs	r3, r2
 800a5ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a618 <HAL_RCC_ClockConfig+0x1cc>)
 800a5f0:	5cd3      	ldrb	r3, [r2, r3]
 800a5f2:	fa21 f303 	lsr.w	r3, r1, r3
 800a5f6:	4a09      	ldr	r2, [pc, #36]	@ (800a61c <HAL_RCC_ClockConfig+0x1d0>)
 800a5f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a5fa:	4b09      	ldr	r3, [pc, #36]	@ (800a620 <HAL_RCC_ClockConfig+0x1d4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fc f9a2 	bl	8006948 <HAL_InitTick>

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	40023c00 	.word	0x40023c00
 800a614:	40023800 	.word	0x40023800
 800a618:	08027fc4 	.word	0x08027fc4
 800a61c:	20000070 	.word	0x20000070
 800a620:	200000c8 	.word	0x200000c8

0800a624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a628:	b090      	sub	sp, #64	@ 0x40
 800a62a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a634:	2300      	movs	r3, #0
 800a636:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a63c:	4b59      	ldr	r3, [pc, #356]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 030c 	and.w	r3, r3, #12
 800a644:	2b08      	cmp	r3, #8
 800a646:	d00d      	beq.n	800a664 <HAL_RCC_GetSysClockFreq+0x40>
 800a648:	2b08      	cmp	r3, #8
 800a64a:	f200 80a2 	bhi.w	800a792 <HAL_RCC_GetSysClockFreq+0x16e>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <HAL_RCC_GetSysClockFreq+0x34>
 800a652:	2b04      	cmp	r3, #4
 800a654:	d003      	beq.n	800a65e <HAL_RCC_GetSysClockFreq+0x3a>
 800a656:	e09c      	b.n	800a792 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a658:	4b53      	ldr	r3, [pc, #332]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a65a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a65c:	e09c      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a65e:	4b53      	ldr	r3, [pc, #332]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a660:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a662:	e099      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a664:	4b4f      	ldr	r3, [pc, #316]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a66c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a66e:	4b4d      	ldr	r3, [pc, #308]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d027      	beq.n	800a6ca <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a67a:	4b4a      	ldr	r3, [pc, #296]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	099b      	lsrs	r3, r3, #6
 800a680:	2200      	movs	r2, #0
 800a682:	623b      	str	r3, [r7, #32]
 800a684:	627a      	str	r2, [r7, #36]	@ 0x24
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a68c:	2100      	movs	r1, #0
 800a68e:	4b47      	ldr	r3, [pc, #284]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a690:	fb03 f201 	mul.w	r2, r3, r1
 800a694:	2300      	movs	r3, #0
 800a696:	fb00 f303 	mul.w	r3, r0, r3
 800a69a:	4413      	add	r3, r2
 800a69c:	4a43      	ldr	r2, [pc, #268]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a69e:	fba0 2102 	umull	r2, r1, r0, r2
 800a6a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a6a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6a8:	4413      	add	r3, r2
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	61bb      	str	r3, [r7, #24]
 800a6b2:	61fa      	str	r2, [r7, #28]
 800a6b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a6bc:	f7f6 fdaa 	bl	8001214 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c8:	e055      	b.n	800a776 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6ca:	4b36      	ldr	r3, [pc, #216]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	099b      	lsrs	r3, r3, #6
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	617a      	str	r2, [r7, #20]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6dc:	f04f 0b00 	mov.w	fp, #0
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	f04f 0000 	mov.w	r0, #0
 800a6e8:	f04f 0100 	mov.w	r1, #0
 800a6ec:	0159      	lsls	r1, r3, #5
 800a6ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6f2:	0150      	lsls	r0, r2, #5
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	ebb2 080a 	subs.w	r8, r2, sl
 800a6fc:	eb63 090b 	sbc.w	r9, r3, fp
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a70c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a710:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a714:	ebb2 0408 	subs.w	r4, r2, r8
 800a718:	eb63 0509 	sbc.w	r5, r3, r9
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	00eb      	lsls	r3, r5, #3
 800a726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a72a:	00e2      	lsls	r2, r4, #3
 800a72c:	4614      	mov	r4, r2
 800a72e:	461d      	mov	r5, r3
 800a730:	eb14 030a 	adds.w	r3, r4, sl
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	eb45 030b 	adc.w	r3, r5, fp
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a748:	4629      	mov	r1, r5
 800a74a:	028b      	lsls	r3, r1, #10
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	4604      	mov	r4, r0
 800a752:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a756:	4601      	mov	r1, r0
 800a758:	028a      	lsls	r2, r1, #10
 800a75a:	4610      	mov	r0, r2
 800a75c:	4619      	mov	r1, r3
 800a75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a760:	2200      	movs	r2, #0
 800a762:	60bb      	str	r3, [r7, #8]
 800a764:	60fa      	str	r2, [r7, #12]
 800a766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a76a:	f7f6 fd53 	bl	8001214 <__aeabi_uldivmod>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4613      	mov	r3, r2
 800a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a776:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	3301      	adds	r3, #1
 800a782:	005b      	lsls	r3, r3, #1
 800a784:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a786:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a790:	e002      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a792:	4b05      	ldr	r3, [pc, #20]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a794:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a796:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3740      	adds	r7, #64	@ 0x40
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	00f42400 	.word	0x00f42400
 800a7ac:	017d7840 	.word	0x017d7840

0800a7b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	@ (800a7c0 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bc80      	pop	{r7}
 800a7be:	4770      	bx	lr
 800a7c0:	20000070 	.word	0x20000070

0800a7c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800a7ca:	f7ff fff1 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a800 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800a7d8:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800a7dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	fa92 f2a2 	rbit	r2, r2
 800a7e4:	603a      	str	r2, [r7, #0]
  return result;
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	fab2 f282 	clz	r2, r2
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	40d3      	lsrs	r3, r2
 800a7f0:	4a04      	ldr	r2, [pc, #16]	@ (800a804 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a7f2:	5cd3      	ldrb	r3, [r2, r3]
 800a7f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40023800 	.word	0x40023800
 800a804:	08027fd4 	.word	0x08027fd4

0800a808 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	@ 0x28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a828:	2b08      	cmp	r3, #8
 800a82a:	d14c      	bne.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a82c:	4b6d      	ldr	r3, [pc, #436]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a832:	f7fc f8cb 	bl	80069cc <HAL_GetTick>
 800a836:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a838:	e008      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a83a:	f7fc f8c7 	bl	80069cc <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	2b02      	cmp	r3, #2
 800a846:	d901      	bls.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e0c7      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a84c:	4b66      	ldr	r3, [pc, #408]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f0      	bne.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800a860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	fa92 f2a2 	rbit	r2, r2
 800a868:	613a      	str	r2, [r7, #16]
  return result;
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	fab2 f282 	clz	r2, r2
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	fa03 f202 	lsl.w	r2, r3, r2
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a87e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a880:	69f9      	ldr	r1, [r7, #28]
 800a882:	fa91 f1a1 	rbit	r1, r1
 800a886:	61b9      	str	r1, [r7, #24]
  return result;
 800a888:	69b9      	ldr	r1, [r7, #24]
 800a88a:	fab1 f181 	clz	r1, r1
 800a88e:	b2c9      	uxtb	r1, r1
 800a890:	408b      	lsls	r3, r1
 800a892:	4955      	ldr	r1, [pc, #340]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a894:	4313      	orrs	r3, r2
 800a896:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a89a:	4b52      	ldr	r3, [pc, #328]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a89c:	2201      	movs	r2, #1
 800a89e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8a0:	f7fc f894 	bl	80069cc <HAL_GetTick>
 800a8a4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8a8:	f7fc f890 	bl	80069cc <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e090      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0f0      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8083 	beq.w	800a9da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	4b43      	ldr	r3, [pc, #268]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8dc:	4a42      	ldr	r2, [pc, #264]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8e2:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8e4:	4b40      	ldr	r3, [pc, #256]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a8f0:	4b3e      	ldr	r3, [pc, #248]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a3d      	ldr	r2, [pc, #244]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a8f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8fa:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8fc:	f7fc f866 	bl	80069cc <HAL_GetTick>
 800a900:	6278      	str	r0, [r7, #36]	@ 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a902:	e008      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a904:	f7fc f862 	bl	80069cc <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d901      	bls.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e062      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a916:	4b35      	ldr	r3, [pc, #212]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d0f0      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a922:	4b31      	ldr	r3, [pc, #196]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a92a:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d02f      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a93a:	6a3a      	ldr	r2, [r7, #32]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d028      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a940:	4b29      	ldr	r3, [pc, #164]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a948:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a94a:	4b29      	ldr	r3, [pc, #164]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a94c:	2201      	movs	r2, #1
 800a94e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a950:	4b27      	ldr	r3, [pc, #156]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a956:	4a24      	ldr	r2, [pc, #144]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a95c:	4b22      	ldr	r3, [pc, #136]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a95e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b01      	cmp	r3, #1
 800a966:	d114      	bne.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a968:	f7fc f830 	bl	80069cc <HAL_GetTick>
 800a96c:	6278      	str	r0, [r7, #36]	@ 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a96e:	e00a      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a970:	f7fc f82c 	bl	80069cc <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a97e:	4293      	cmp	r3, r2
 800a980:	d901      	bls.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e02a      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a986:	4b18      	ldr	r3, [pc, #96]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0ee      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a99a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a99e:	d10d      	bne.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a9a0:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a9b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9b4:	490c      	ldr	r1, [pc, #48]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	608b      	str	r3, [r1, #8]
 800a9ba:	e005      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	4a09      	ldr	r2, [pc, #36]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a9c6:	6093      	str	r3, [r2, #8]
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9d4:	4904      	ldr	r1, [pc, #16]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3728      	adds	r7, #40	@ 0x28
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	42470068 	.word	0x42470068
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	40007000 	.word	0x40007000
 800a9f0:	42470e40 	.word	0x42470e40

0800a9f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e085      	b.n	800ab16 <HAL_RTC_Init+0x122>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7f5b      	ldrb	r3, [r3, #29]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d105      	bne.n	800aa20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7f8 ff40 	bl	80038a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b10      	cmp	r3, #16
 800aa32:	d055      	beq.n	800aae0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	22ca      	movs	r2, #202	@ 0xca
 800aa3a:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2253      	movs	r2, #83	@ 0x53
 800aa42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fa51 	bl	800aeec <RTC_EnterInitMode>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d12c      	bne.n	800aaae <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa66:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6899      	ldr	r1, [r3, #8]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	68d2      	ldr	r2, [r2, #12]
 800aa8e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6919      	ldr	r1, [r3, #16]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	041a      	lsls	r2, r3, #16
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fa58 	bl	800af5a <RTC_ExitInitMode>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d110      	bne.n	800aad6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800aac2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	699a      	ldr	r2, [r3, #24]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	22ff      	movs	r2, #255	@ 0xff
 800aadc:	625a      	str	r2, [r3, #36]	@ 0x24
 800aade:	e001      	b.n	800aae4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d102      	bne.n	800aaf0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	775a      	strb	r2, [r3, #29]
  }
  /* USER CODE BEGIN RTC_Init 0 */
  __HAL_RCC_PWR_CLK_ENABLE();
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60bb      	str	r3, [r7, #8]
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <HAL_RTC_Init+0x12c>)
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf8:	4a09      	ldr	r2, [pc, #36]	@ (800ab20 <HAL_RTC_Init+0x12c>)
 800aafa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aafe:	6413      	str	r3, [r2, #64]	@ 0x40
 800ab00:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <HAL_RTC_Init+0x12c>)
 800ab02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab08:	60bb      	str	r3, [r7, #8]
 800ab0a:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess(); // Разрешаем доступ к backup-домену
 800ab0c:	f7ff fa2e 	bl	8009f6c <HAL_PWR_EnableBkUpAccess>

  // Проверяем, инициализирован ли уже RTC (если нет — включаем его)
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == RESET) {
 800ab10:	4b03      	ldr	r3, [pc, #12]	@ (800ab20 <HAL_RTC_Init+0x12c>)
 800ab12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  }

  // Важно: не вызывать Reset backup domain здесь!
  /* USER CODE END RTC_Init 0 */

  return status;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	40023800 	.word	0x40023800

0800ab24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ab30:	2300      	movs	r3, #0
 800ab32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	7f1b      	ldrb	r3, [r3, #28]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_RTC_SetTime+0x1c>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e087      	b.n	800ac50 <HAL_RTC_SetTime+0x12c>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2201      	movs	r2, #1
 800ab44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2202      	movs	r2, #2
 800ab4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d126      	bne.n	800aba0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2200      	movs	r2, #0
 800ab64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fa13 	bl	800af96 <RTC_ByteToBcd2>
 800ab70:	4603      	mov	r3, r0
 800ab72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	785b      	ldrb	r3, [r3, #1]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fa0c 	bl	800af96 <RTC_ByteToBcd2>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ab82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fa04 	bl	800af96 <RTC_ByteToBcd2>
 800ab8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	78db      	ldrb	r3, [r3, #3]
 800ab98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]
 800ab9e:	e018      	b.n	800abd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2200      	movs	r2, #0
 800abb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800abc0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800abc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	78db      	ldrb	r3, [r3, #3]
 800abcc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	22ca      	movs	r2, #202	@ 0xca
 800abd8:	625a      	str	r2, [r3, #36]	@ 0x24
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2253      	movs	r2, #83	@ 0x53
 800abe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f982 	bl	800aeec <RTC_EnterInitMode>
 800abe8:	4603      	mov	r3, r0
 800abea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800abec:	7cfb      	ldrb	r3, [r7, #19]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d120      	bne.n	800ac34 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800abfc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac00:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ac10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6899      	ldr	r1, [r3, #8]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	431a      	orrs	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 f995 	bl	800af5a <RTC_ExitInitMode>
 800ac30:	4603      	mov	r3, r0
 800ac32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	22ff      	movs	r2, #255	@ 0xff
 800ac46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	771a      	strb	r2, [r3, #28]

  return status;
 800ac4e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd90      	pop	{r4, r7, pc}

0800ac58 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ac72:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	0c1b      	lsrs	r3, r3, #16
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	0d9b      	lsrs	r3, r3, #22
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d11a      	bne.n	800acf2 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 f985 	bl	800afd0 <RTC_Bcd2ToByte>
 800acc6:	4603      	mov	r3, r0
 800acc8:	461a      	mov	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 f97c 	bl	800afd0 <RTC_Bcd2ToByte>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	789b      	ldrb	r3, [r3, #2]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f973 	bl	800afd0 <RTC_Bcd2ToByte>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7f1b      	ldrb	r3, [r3, #28]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_RTC_SetDate+0x1c>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e071      	b.n	800adfc <HAL_RTC_SetDate+0x100>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2202      	movs	r2, #2
 800ad22:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10e      	bne.n	800ad48 <HAL_RTC_SetDate+0x4c>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	f003 0310 	and.w	r3, r3, #16
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d008      	beq.n	800ad48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	785b      	ldrb	r3, [r3, #1]
 800ad3a:	f023 0310 	bic.w	r3, r3, #16
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	330a      	adds	r3, #10
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d11c      	bne.n	800ad88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	78db      	ldrb	r3, [r3, #3]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f91f 	bl	800af96 <RTC_ByteToBcd2>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 f918 	bl	800af96 <RTC_ByteToBcd2>
 800ad66:	4603      	mov	r3, r0
 800ad68:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ad6a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	789b      	ldrb	r3, [r3, #2]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f910 	bl	800af96 <RTC_ByteToBcd2>
 800ad76:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad78:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ad82:	4313      	orrs	r3, r2
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	e00e      	b.n	800ada6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	78db      	ldrb	r3, [r3, #3]
 800ad8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ad94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ad9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	22ca      	movs	r2, #202	@ 0xca
 800adac:	625a      	str	r2, [r3, #36]	@ 0x24
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2253      	movs	r2, #83	@ 0x53
 800adb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f000 f898 	bl	800aeec <RTC_EnterInitMode>
 800adbc:	4603      	mov	r3, r0
 800adbe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800adc0:	7cfb      	ldrb	r3, [r7, #19]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10c      	bne.n	800ade0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800add0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800add4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f8bf 	bl	800af5a <RTC_ExitInitMode>
 800addc:	4603      	mov	r3, r0
 800adde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ade0:	7cfb      	ldrb	r3, [r7, #19]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2201      	movs	r2, #1
 800adea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	22ff      	movs	r2, #255	@ 0xff
 800adf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	771a      	strb	r2, [r3, #28]

  return status;
 800adfa:	7cfb      	ldrb	r3, [r7, #19]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd90      	pop	{r4, r7, pc}

0800ae04 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	0c1b      	lsrs	r3, r3, #16
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	0a1b      	lsrs	r3, r3, #8
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	0b5b      	lsrs	r3, r3, #13
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d11a      	bne.n	800ae98 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	78db      	ldrb	r3, [r3, #3]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f8b2 	bl	800afd0 <RTC_Bcd2ToByte>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 f8a9 	bl	800afd0 <RTC_Bcd2ToByte>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	461a      	mov	r2, r3
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f8a0 	bl	800afd0 <RTC_Bcd2ToByte>
 800ae90:	4603      	mov	r3, r0
 800ae92:	461a      	mov	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800aeb6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aeb8:	f7fb fd88 	bl	80069cc <HAL_GetTick>
 800aebc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aebe:	e009      	b.n	800aed4 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aec0:	f7fb fd84 	bl	80069cc <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aece:	d901      	bls.n	800aed4 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e007      	b.n	800aee4 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	f003 0320 	and.w	r3, r3, #32
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0ee      	beq.n	800aec0 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d122      	bne.n	800af50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af1a:	f7fb fd57 	bl	80069cc <HAL_GetTick>
 800af1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af20:	e00c      	b.n	800af3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af22:	f7fb fd53 	bl	80069cc <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af30:	d904      	bls.n	800af3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <RTC_EnterInitMode+0x64>
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d1e8      	bne.n	800af22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af74:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff ff93 	bl	800aea2 <HAL_RTC_WaitForSynchro>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d004      	beq.n	800af8c <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2204      	movs	r2, #4
 800af86:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800af96:	b480      	push	{r7}
 800af98:	b085      	sub	sp, #20
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	4603      	mov	r3, r0
 800af9e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800afa4:	e005      	b.n	800afb2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3301      	adds	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	3b0a      	subs	r3, #10
 800afb0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800afb2:	79fb      	ldrb	r3, [r7, #7]
 800afb4:	2b09      	cmp	r3, #9
 800afb6:	d8f6      	bhi.n	800afa6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	b2db      	uxtb	r3, r3
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	bc80      	pop	{r7}
 800afce:	4770      	bx	lr

0800afd0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	091b      	lsrs	r3, r3, #4
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	f003 030f 	and.w	r3, r3, #15
 800affa:	b2db      	uxtb	r3, r3
 800affc:	4413      	add	r3, r2
 800affe:	b2db      	uxtb	r3, r3
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	bc80      	pop	{r7}
 800b008:	4770      	bx	lr

0800b00a <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b087      	sub	sp, #28
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3350      	adds	r3, #80	@ 0x50
 800b020:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	4413      	add	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	601a      	str	r2, [r3, #0]
}
 800b032:	bf00      	nop
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr

0800b03c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3350      	adds	r3, #80	@ 0x50
 800b050:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4413      	add	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	bc80      	pop	{r7}
 800b068:	4770      	bx	lr

0800b06a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e041      	b.n	800b100 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d106      	bne.n	800b096 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7f8 fc1b 	bl	80038cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2202      	movs	r2, #2
 800b09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f000 f95b 	bl	800b364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d001      	beq.n	800b120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e046      	b.n	800b1ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a22      	ldr	r2, [pc, #136]	@ (800b1b8 <HAL_TIM_Base_Start+0xb0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d022      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b13a:	d01d      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a1e      	ldr	r2, [pc, #120]	@ (800b1bc <HAL_TIM_Base_Start+0xb4>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d018      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1c0 <HAL_TIM_Base_Start+0xb8>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d013      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1b      	ldr	r2, [pc, #108]	@ (800b1c4 <HAL_TIM_Base_Start+0xbc>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00e      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1a      	ldr	r2, [pc, #104]	@ (800b1c8 <HAL_TIM_Base_Start+0xc0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d009      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a18      	ldr	r2, [pc, #96]	@ (800b1cc <HAL_TIM_Base_Start+0xc4>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d004      	beq.n	800b178 <HAL_TIM_Base_Start+0x70>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a17      	ldr	r2, [pc, #92]	@ (800b1d0 <HAL_TIM_Base_Start+0xc8>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d111      	bne.n	800b19c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b06      	cmp	r3, #6
 800b188:	d010      	beq.n	800b1ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0201 	orr.w	r2, r2, #1
 800b198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19a:	e007      	b.n	800b1ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bc80      	pop	{r7}
 800b1b6:	4770      	bx	lr
 800b1b8:	40010000 	.word	0x40010000
 800b1bc:	40000400 	.word	0x40000400
 800b1c0:	40000800 	.word	0x40000800
 800b1c4:	40000c00 	.word	0x40000c00
 800b1c8:	40010400 	.word	0x40010400
 800b1cc:	40014000 	.word	0x40014000
 800b1d0:	40001800 	.word	0x40001800

0800b1d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e0b4      	b.n	800b35a <HAL_TIM_ConfigClockSource+0x186>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b20e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b228:	d03e      	beq.n	800b2a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b22a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b22e:	f200 8087 	bhi.w	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b236:	f000 8086 	beq.w	800b346 <HAL_TIM_ConfigClockSource+0x172>
 800b23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b23e:	d87f      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b240:	2b70      	cmp	r3, #112	@ 0x70
 800b242:	d01a      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0xa6>
 800b244:	2b70      	cmp	r3, #112	@ 0x70
 800b246:	d87b      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b248:	2b60      	cmp	r3, #96	@ 0x60
 800b24a:	d050      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x11a>
 800b24c:	2b60      	cmp	r3, #96	@ 0x60
 800b24e:	d877      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b250:	2b50      	cmp	r3, #80	@ 0x50
 800b252:	d03c      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0xfa>
 800b254:	2b50      	cmp	r3, #80	@ 0x50
 800b256:	d873      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	d058      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x13a>
 800b25c:	2b40      	cmp	r3, #64	@ 0x40
 800b25e:	d86f      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b260:	2b30      	cmp	r3, #48	@ 0x30
 800b262:	d064      	beq.n	800b32e <HAL_TIM_ConfigClockSource+0x15a>
 800b264:	2b30      	cmp	r3, #48	@ 0x30
 800b266:	d86b      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b268:	2b20      	cmp	r3, #32
 800b26a:	d060      	beq.n	800b32e <HAL_TIM_ConfigClockSource+0x15a>
 800b26c:	2b20      	cmp	r3, #32
 800b26e:	d867      	bhi.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
 800b270:	2b00      	cmp	r3, #0
 800b272:	d05c      	beq.n	800b32e <HAL_TIM_ConfigClockSource+0x15a>
 800b274:	2b10      	cmp	r3, #16
 800b276:	d05a      	beq.n	800b32e <HAL_TIM_ConfigClockSource+0x15a>
 800b278:	e062      	b.n	800b340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b28a:	f000 f98c 	bl	800b5a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b29c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	609a      	str	r2, [r3, #8]
      break;
 800b2a6:	e04f      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2b8:	f000 f975 	bl	800b5a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2ca:	609a      	str	r2, [r3, #8]
      break;
 800b2cc:	e03c      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f000 f8ec 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2150      	movs	r1, #80	@ 0x50
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 f943 	bl	800b572 <TIM_ITRx_SetConfig>
      break;
 800b2ec:	e02c      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f000 f90a 	bl	800b514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2160      	movs	r1, #96	@ 0x60
 800b306:	4618      	mov	r0, r3
 800b308:	f000 f933 	bl	800b572 <TIM_ITRx_SetConfig>
      break;
 800b30c:	e01c      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b31a:	461a      	mov	r2, r3
 800b31c:	f000 f8cc 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2140      	movs	r1, #64	@ 0x40
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f923 	bl	800b572 <TIM_ITRx_SetConfig>
      break;
 800b32c:	e00c      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4619      	mov	r1, r3
 800b338:	4610      	mov	r0, r2
 800b33a:	f000 f91a 	bl	800b572 <TIM_ITRx_SetConfig>
      break;
 800b33e:	e003      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]
      break;
 800b344:	e000      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a45      	ldr	r2, [pc, #276]	@ (800b48c <TIM_Base_SetConfig+0x128>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d013      	beq.n	800b3a4 <TIM_Base_SetConfig+0x40>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b382:	d00f      	beq.n	800b3a4 <TIM_Base_SetConfig+0x40>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a42      	ldr	r2, [pc, #264]	@ (800b490 <TIM_Base_SetConfig+0x12c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d00b      	beq.n	800b3a4 <TIM_Base_SetConfig+0x40>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a41      	ldr	r2, [pc, #260]	@ (800b494 <TIM_Base_SetConfig+0x130>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d007      	beq.n	800b3a4 <TIM_Base_SetConfig+0x40>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a40      	ldr	r2, [pc, #256]	@ (800b498 <TIM_Base_SetConfig+0x134>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d003      	beq.n	800b3a4 <TIM_Base_SetConfig+0x40>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a3f      	ldr	r2, [pc, #252]	@ (800b49c <TIM_Base_SetConfig+0x138>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d108      	bne.n	800b3b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a34      	ldr	r2, [pc, #208]	@ (800b48c <TIM_Base_SetConfig+0x128>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d02b      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3c4:	d027      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a31      	ldr	r2, [pc, #196]	@ (800b490 <TIM_Base_SetConfig+0x12c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d023      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a30      	ldr	r2, [pc, #192]	@ (800b494 <TIM_Base_SetConfig+0x130>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d01f      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a2f      	ldr	r2, [pc, #188]	@ (800b498 <TIM_Base_SetConfig+0x134>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d01b      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a2e      	ldr	r2, [pc, #184]	@ (800b49c <TIM_Base_SetConfig+0x138>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d017      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a2d      	ldr	r2, [pc, #180]	@ (800b4a0 <TIM_Base_SetConfig+0x13c>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d013      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a2c      	ldr	r2, [pc, #176]	@ (800b4a4 <TIM_Base_SetConfig+0x140>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d00f      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a2b      	ldr	r2, [pc, #172]	@ (800b4a8 <TIM_Base_SetConfig+0x144>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d00b      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a2a      	ldr	r2, [pc, #168]	@ (800b4ac <TIM_Base_SetConfig+0x148>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d007      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a29      	ldr	r2, [pc, #164]	@ (800b4b0 <TIM_Base_SetConfig+0x14c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d003      	beq.n	800b416 <TIM_Base_SetConfig+0xb2>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a28      	ldr	r2, [pc, #160]	@ (800b4b4 <TIM_Base_SetConfig+0x150>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d108      	bne.n	800b428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b41c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4313      	orrs	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	4313      	orrs	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a0f      	ldr	r2, [pc, #60]	@ (800b48c <TIM_Base_SetConfig+0x128>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d003      	beq.n	800b45c <TIM_Base_SetConfig+0xf8>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a11      	ldr	r2, [pc, #68]	@ (800b49c <TIM_Base_SetConfig+0x138>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d103      	bne.n	800b464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	691a      	ldr	r2, [r3, #16]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b01      	cmp	r3, #1
 800b474:	d105      	bne.n	800b482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	f023 0201 	bic.w	r2, r3, #1
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	611a      	str	r2, [r3, #16]
  }
}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	bc80      	pop	{r7}
 800b48a:	4770      	bx	lr
 800b48c:	40010000 	.word	0x40010000
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40010400 	.word	0x40010400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40014400 	.word	0x40014400
 800b4a8:	40014800 	.word	0x40014800
 800b4ac:	40001800 	.word	0x40001800
 800b4b0:	40001c00 	.word	0x40001c00
 800b4b4:	40002000 	.word	0x40002000

0800b4b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f023 0201 	bic.w	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f023 030a 	bic.w	r3, r3, #10
 800b4f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	621a      	str	r2, [r3, #32]
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	bc80      	pop	{r7}
 800b512:	4770      	bx	lr

0800b514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b514:	b480      	push	{r7}
 800b516:	b087      	sub	sp, #28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	f023 0210 	bic.w	r2, r3, #16
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b53e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	031b      	lsls	r3, r3, #12
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	4313      	orrs	r3, r2
 800b548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	011b      	lsls	r3, r3, #4
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	4313      	orrs	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	621a      	str	r2, [r3, #32]
}
 800b568:	bf00      	nop
 800b56a:	371c      	adds	r7, #28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bc80      	pop	{r7}
 800b570:	4770      	bx	lr

0800b572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b572:	b480      	push	{r7}
 800b574:	b085      	sub	sp, #20
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4313      	orrs	r3, r2
 800b590:	f043 0307 	orr.w	r3, r3, #7
 800b594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	609a      	str	r2, [r3, #8]
}
 800b59c:	bf00      	nop
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bc80      	pop	{r7}
 800b5a4:	4770      	bx	lr

0800b5a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b087      	sub	sp, #28
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	021a      	lsls	r2, r3, #8
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	431a      	orrs	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	609a      	str	r2, [r3, #8]
}
 800b5da:	bf00      	nop
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bc80      	pop	{r7}
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e05a      	b.n	800b6b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a20      	ldr	r2, [pc, #128]	@ (800b6bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d022      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b648:	d01d      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a1c      	ldr	r2, [pc, #112]	@ (800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d018      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d013      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a19      	ldr	r2, [pc, #100]	@ (800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d00e      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a17      	ldr	r2, [pc, #92]	@ (800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d009      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a16      	ldr	r2, [pc, #88]	@ (800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d004      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a14      	ldr	r2, [pc, #80]	@ (800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d10c      	bne.n	800b6a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b68c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	4313      	orrs	r3, r2
 800b696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bc80      	pop	{r7}
 800b6ba:	4770      	bx	lr
 800b6bc:	40010000 	.word	0x40010000
 800b6c0:	40000400 	.word	0x40000400
 800b6c4:	40000800 	.word	0x40000800
 800b6c8:	40000c00 	.word	0x40000c00
 800b6cc:	40010400 	.word	0x40010400
 800b6d0:	40014000 	.word	0x40014000
 800b6d4:	40001800 	.word	0x40001800

0800b6d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b6de:	4b88      	ldr	r3, [pc, #544]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b6e0:	22c0      	movs	r2, #192	@ 0xc0
 800b6e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b6e4:	4b86      	ldr	r3, [pc, #536]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b6e6:	22a8      	movs	r2, #168	@ 0xa8
 800b6e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b6ea:	4b85      	ldr	r3, [pc, #532]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 800b6f0:	4b83      	ldr	r3, [pc, #524]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b6f2:	22b2      	movs	r2, #178	@ 0xb2
 800b6f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b6f6:	4b83      	ldr	r3, [pc, #524]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b6f8:	22ff      	movs	r2, #255	@ 0xff
 800b6fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b6fc:	4b81      	ldr	r3, [pc, #516]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b6fe:	22ff      	movs	r2, #255	@ 0xff
 800b700:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b702:	4b80      	ldr	r3, [pc, #512]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b704:	22ff      	movs	r2, #255	@ 0xff
 800b706:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b708:	4b7e      	ldr	r3, [pc, #504]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b70e:	4b7e      	ldr	r3, [pc, #504]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b710:	22c0      	movs	r2, #192	@ 0xc0
 800b712:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b714:	4b7c      	ldr	r3, [pc, #496]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b716:	22a8      	movs	r2, #168	@ 0xa8
 800b718:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b71a:	4b7b      	ldr	r3, [pc, #492]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b720:	4b79      	ldr	r3, [pc, #484]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b722:	2201      	movs	r2, #1
 800b724:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b726:	f009 fb5b 	bl	8014de0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b72a:	4b75      	ldr	r3, [pc, #468]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	061a      	lsls	r2, r3, #24
 800b730:	4b73      	ldr	r3, [pc, #460]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	041b      	lsls	r3, r3, #16
 800b736:	431a      	orrs	r2, r3
 800b738:	4b71      	ldr	r3, [pc, #452]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b73a:	789b      	ldrb	r3, [r3, #2]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	4313      	orrs	r3, r2
 800b740:	4a6f      	ldr	r2, [pc, #444]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b742:	78d2      	ldrb	r2, [r2, #3]
 800b744:	4313      	orrs	r3, r2
 800b746:	061a      	lsls	r2, r3, #24
 800b748:	4b6d      	ldr	r3, [pc, #436]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	0619      	lsls	r1, r3, #24
 800b74e:	4b6c      	ldr	r3, [pc, #432]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b750:	785b      	ldrb	r3, [r3, #1]
 800b752:	041b      	lsls	r3, r3, #16
 800b754:	4319      	orrs	r1, r3
 800b756:	4b6a      	ldr	r3, [pc, #424]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b758:	789b      	ldrb	r3, [r3, #2]
 800b75a:	021b      	lsls	r3, r3, #8
 800b75c:	430b      	orrs	r3, r1
 800b75e:	4968      	ldr	r1, [pc, #416]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b760:	78c9      	ldrb	r1, [r1, #3]
 800b762:	430b      	orrs	r3, r1
 800b764:	021b      	lsls	r3, r3, #8
 800b766:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b76a:	431a      	orrs	r2, r3
 800b76c:	4b64      	ldr	r3, [pc, #400]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	0619      	lsls	r1, r3, #24
 800b772:	4b63      	ldr	r3, [pc, #396]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	041b      	lsls	r3, r3, #16
 800b778:	4319      	orrs	r1, r3
 800b77a:	4b61      	ldr	r3, [pc, #388]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b77c:	789b      	ldrb	r3, [r3, #2]
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	430b      	orrs	r3, r1
 800b782:	495f      	ldr	r1, [pc, #380]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b784:	78c9      	ldrb	r1, [r1, #3]
 800b786:	430b      	orrs	r3, r1
 800b788:	0a1b      	lsrs	r3, r3, #8
 800b78a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b78e:	431a      	orrs	r2, r3
 800b790:	4b5b      	ldr	r3, [pc, #364]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	0619      	lsls	r1, r3, #24
 800b796:	4b5a      	ldr	r3, [pc, #360]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	041b      	lsls	r3, r3, #16
 800b79c:	4319      	orrs	r1, r3
 800b79e:	4b58      	ldr	r3, [pc, #352]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b7a0:	789b      	ldrb	r3, [r3, #2]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	430b      	orrs	r3, r1
 800b7a6:	4956      	ldr	r1, [pc, #344]	@ (800b900 <MX_LWIP_Init+0x228>)
 800b7a8:	78c9      	ldrb	r1, [r1, #3]
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	0e1b      	lsrs	r3, r3, #24
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	4a56      	ldr	r2, [pc, #344]	@ (800b90c <MX_LWIP_Init+0x234>)
 800b7b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b7b4:	4b53      	ldr	r3, [pc, #332]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	061a      	lsls	r2, r3, #24
 800b7ba:	4b52      	ldr	r3, [pc, #328]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	041b      	lsls	r3, r3, #16
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	4b50      	ldr	r3, [pc, #320]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7c4:	789b      	ldrb	r3, [r3, #2]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	4a4e      	ldr	r2, [pc, #312]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7cc:	78d2      	ldrb	r2, [r2, #3]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	061a      	lsls	r2, r3, #24
 800b7d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	0619      	lsls	r1, r3, #24
 800b7d8:	4b4a      	ldr	r3, [pc, #296]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	041b      	lsls	r3, r3, #16
 800b7de:	4319      	orrs	r1, r3
 800b7e0:	4b48      	ldr	r3, [pc, #288]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7e2:	789b      	ldrb	r3, [r3, #2]
 800b7e4:	021b      	lsls	r3, r3, #8
 800b7e6:	430b      	orrs	r3, r1
 800b7e8:	4946      	ldr	r1, [pc, #280]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7ea:	78c9      	ldrb	r1, [r1, #3]
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	021b      	lsls	r3, r3, #8
 800b7f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	4b43      	ldr	r3, [pc, #268]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	0619      	lsls	r1, r3, #24
 800b7fc:	4b41      	ldr	r3, [pc, #260]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	4319      	orrs	r1, r3
 800b804:	4b3f      	ldr	r3, [pc, #252]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b806:	789b      	ldrb	r3, [r3, #2]
 800b808:	021b      	lsls	r3, r3, #8
 800b80a:	430b      	orrs	r3, r1
 800b80c:	493d      	ldr	r1, [pc, #244]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b80e:	78c9      	ldrb	r1, [r1, #3]
 800b810:	430b      	orrs	r3, r1
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b818:	431a      	orrs	r2, r3
 800b81a:	4b3a      	ldr	r3, [pc, #232]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	0619      	lsls	r1, r3, #24
 800b820:	4b38      	ldr	r3, [pc, #224]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	4319      	orrs	r1, r3
 800b828:	4b36      	ldr	r3, [pc, #216]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b82a:	789b      	ldrb	r3, [r3, #2]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	430b      	orrs	r3, r1
 800b830:	4934      	ldr	r1, [pc, #208]	@ (800b904 <MX_LWIP_Init+0x22c>)
 800b832:	78c9      	ldrb	r1, [r1, #3]
 800b834:	430b      	orrs	r3, r1
 800b836:	0e1b      	lsrs	r3, r3, #24
 800b838:	4313      	orrs	r3, r2
 800b83a:	4a35      	ldr	r2, [pc, #212]	@ (800b910 <MX_LWIP_Init+0x238>)
 800b83c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b83e:	4b32      	ldr	r3, [pc, #200]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	061a      	lsls	r2, r3, #24
 800b844:	4b30      	ldr	r3, [pc, #192]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	041b      	lsls	r3, r3, #16
 800b84a:	431a      	orrs	r2, r3
 800b84c:	4b2e      	ldr	r3, [pc, #184]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b84e:	789b      	ldrb	r3, [r3, #2]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	4313      	orrs	r3, r2
 800b854:	4a2c      	ldr	r2, [pc, #176]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b856:	78d2      	ldrb	r2, [r2, #3]
 800b858:	4313      	orrs	r3, r2
 800b85a:	061a      	lsls	r2, r3, #24
 800b85c:	4b2a      	ldr	r3, [pc, #168]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	0619      	lsls	r1, r3, #24
 800b862:	4b29      	ldr	r3, [pc, #164]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b864:	785b      	ldrb	r3, [r3, #1]
 800b866:	041b      	lsls	r3, r3, #16
 800b868:	4319      	orrs	r1, r3
 800b86a:	4b27      	ldr	r3, [pc, #156]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b86c:	789b      	ldrb	r3, [r3, #2]
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	430b      	orrs	r3, r1
 800b872:	4925      	ldr	r1, [pc, #148]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b874:	78c9      	ldrb	r1, [r1, #3]
 800b876:	430b      	orrs	r3, r1
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b87e:	431a      	orrs	r2, r3
 800b880:	4b21      	ldr	r3, [pc, #132]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	0619      	lsls	r1, r3, #24
 800b886:	4b20      	ldr	r3, [pc, #128]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b888:	785b      	ldrb	r3, [r3, #1]
 800b88a:	041b      	lsls	r3, r3, #16
 800b88c:	4319      	orrs	r1, r3
 800b88e:	4b1e      	ldr	r3, [pc, #120]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b890:	789b      	ldrb	r3, [r3, #2]
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	430b      	orrs	r3, r1
 800b896:	491c      	ldr	r1, [pc, #112]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b898:	78c9      	ldrb	r1, [r1, #3]
 800b89a:	430b      	orrs	r3, r1
 800b89c:	0a1b      	lsrs	r3, r3, #8
 800b89e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	4b18      	ldr	r3, [pc, #96]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	0619      	lsls	r1, r3, #24
 800b8aa:	4b17      	ldr	r3, [pc, #92]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	4319      	orrs	r1, r3
 800b8b2:	4b15      	ldr	r3, [pc, #84]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b8b4:	789b      	ldrb	r3, [r3, #2]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	4913      	ldr	r1, [pc, #76]	@ (800b908 <MX_LWIP_Init+0x230>)
 800b8bc:	78c9      	ldrb	r1, [r1, #3]
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	0e1b      	lsrs	r3, r3, #24
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	4a13      	ldr	r2, [pc, #76]	@ (800b914 <MX_LWIP_Init+0x23c>)
 800b8c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b8c8:	4b13      	ldr	r3, [pc, #76]	@ (800b918 <MX_LWIP_Init+0x240>)
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	4b13      	ldr	r3, [pc, #76]	@ (800b91c <MX_LWIP_Init+0x244>)
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b914 <MX_LWIP_Init+0x23c>)
 800b8d6:	4a0e      	ldr	r2, [pc, #56]	@ (800b910 <MX_LWIP_Init+0x238>)
 800b8d8:	490c      	ldr	r1, [pc, #48]	@ (800b90c <MX_LWIP_Init+0x234>)
 800b8da:	4811      	ldr	r0, [pc, #68]	@ (800b920 <MX_LWIP_Init+0x248>)
 800b8dc:	f009 ff1e 	bl	801571c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b8e0:	480f      	ldr	r0, [pc, #60]	@ (800b920 <MX_LWIP_Init+0x248>)
 800b8e2:	f00a f803 	bl	80158ec <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b8e6:	480e      	ldr	r0, [pc, #56]	@ (800b920 <MX_LWIP_Init+0x248>)
 800b8e8:	f00a f80e 	bl	8015908 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b8ec:	490d      	ldr	r1, [pc, #52]	@ (800b924 <MX_LWIP_Init+0x24c>)
 800b8ee:	480c      	ldr	r0, [pc, #48]	@ (800b920 <MX_LWIP_Init+0x248>)
 800b8f0:	f00a f8d6 	bl	8015aa0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */
  /* Force an initial link poll to catch late cable insertions right after boot */
  ethernetif_set_link(&gnetif);
 800b8f4:	480a      	ldr	r0, [pc, #40]	@ (800b920 <MX_LWIP_Init+0x248>)
 800b8f6:	f000 fb1d 	bl	800bf34 <ethernetif_set_link>
/* USER CODE END 3 */
}
 800b8fa:	bf00      	nop
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20004ffc 	.word	0x20004ffc
 800b904:	20005000 	.word	0x20005000
 800b908:	20005004 	.word	0x20005004
 800b90c:	20004ff0 	.word	0x20004ff0
 800b910:	20004ff4 	.word	0x20004ff4
 800b914:	20004ff8 	.word	0x20004ff8
 800b918:	08021445 	.word	0x08021445
 800b91c:	0800bec9 	.word	0x0800bec9
 800b920:	20004f84 	.word	0x20004f84
 800b924:	0800bfbd 	.word	0x0800bfbd

0800b928 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b92c:	4803      	ldr	r0, [pc, #12]	@ (800b93c <MX_LWIP_Process+0x14>)
 800b92e:	f000 faab 	bl	800be88 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b932:	f010 fc29 	bl	801c188 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b936:	bf00      	nop
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20004f84 	.word	0x20004f84

0800b940 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08e      	sub	sp, #56	@ 0x38
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	605a      	str	r2, [r3, #4]
 800b952:	609a      	str	r2, [r3, #8]
 800b954:	60da      	str	r2, [r3, #12]
 800b956:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a46      	ldr	r2, [pc, #280]	@ (800ba78 <HAL_ETH_MspInit+0x138>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	f040 8085 	bne.w	800ba6e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b964:	2300      	movs	r3, #0
 800b966:	623b      	str	r3, [r7, #32]
 800b968:	4b44      	ldr	r3, [pc, #272]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96c:	4a43      	ldr	r2, [pc, #268]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b96e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b972:	6313      	str	r3, [r2, #48]	@ 0x30
 800b974:	4b41      	ldr	r3, [pc, #260]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b97c:	623b      	str	r3, [r7, #32]
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	2300      	movs	r3, #0
 800b982:	61fb      	str	r3, [r7, #28]
 800b984:	4b3d      	ldr	r3, [pc, #244]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b988:	4a3c      	ldr	r2, [pc, #240]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b98a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b98e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b990:	4b3a      	ldr	r3, [pc, #232]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b994:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b998:	61fb      	str	r3, [r7, #28]
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	2300      	movs	r3, #0
 800b99e:	61bb      	str	r3, [r7, #24]
 800b9a0:	4b36      	ldr	r3, [pc, #216]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	4a35      	ldr	r2, [pc, #212]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9ac:	4b33      	ldr	r3, [pc, #204]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9b4:	61bb      	str	r3, [r7, #24]
 800b9b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	4b2f      	ldr	r3, [pc, #188]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c0:	4a2e      	ldr	r2, [pc, #184]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9c2:	f043 0304 	orr.w	r3, r3, #4
 800b9c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9c8:	4b2c      	ldr	r3, [pc, #176]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	4b28      	ldr	r3, [pc, #160]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9dc:	4a27      	ldr	r2, [pc, #156]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9de:	f043 0301 	orr.w	r3, r3, #1
 800b9e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9e4:	4b25      	ldr	r3, [pc, #148]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	613b      	str	r3, [r7, #16]
 800b9ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	4b21      	ldr	r3, [pc, #132]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f8:	4a20      	ldr	r2, [pc, #128]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800b9fa:	f043 0302 	orr.w	r3, r3, #2
 800b9fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba00:	4b1e      	ldr	r3, [pc, #120]	@ (800ba7c <HAL_ETH_MspInit+0x13c>)
 800ba02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ba0c:	2332      	movs	r3, #50	@ 0x32
 800ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba10:	2302      	movs	r3, #2
 800ba12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba1c:	230b      	movs	r3, #11
 800ba1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba24:	4619      	mov	r1, r3
 800ba26:	4816      	ldr	r0, [pc, #88]	@ (800ba80 <HAL_ETH_MspInit+0x140>)
 800ba28:	f7fd fc26 	bl	8009278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ba2c:	2386      	movs	r3, #134	@ 0x86
 800ba2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba30:	2302      	movs	r3, #2
 800ba32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba3c:	230b      	movs	r3, #11
 800ba3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba44:	4619      	mov	r1, r3
 800ba46:	480f      	ldr	r0, [pc, #60]	@ (800ba84 <HAL_ETH_MspInit+0x144>)
 800ba48:	f7fd fc16 	bl	8009278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ba4c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba52:	2302      	movs	r3, #2
 800ba54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba5e:	230b      	movs	r3, #11
 800ba60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba66:	4619      	mov	r1, r3
 800ba68:	4807      	ldr	r0, [pc, #28]	@ (800ba88 <HAL_ETH_MspInit+0x148>)
 800ba6a:	f7fd fc05 	bl	8009278 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ba6e:	bf00      	nop
 800ba70:	3738      	adds	r7, #56	@ 0x38
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	40028000 	.word	0x40028000
 800ba7c:	40023800 	.word	0x40023800
 800ba80:	40020800 	.word	0x40020800
 800ba84:	40020000 	.word	0x40020000
 800ba88:	40020400 	.word	0x40020400

0800ba8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ba98:	4b4d      	ldr	r3, [pc, #308]	@ (800bbd0 <low_level_init+0x144>)
 800ba9a:	4a4e      	ldr	r2, [pc, #312]	@ (800bbd4 <low_level_init+0x148>)
 800ba9c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ba9e:	4b4c      	ldr	r3, [pc, #304]	@ (800bbd0 <low_level_init+0x144>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800baa4:	4b4a      	ldr	r3, [pc, #296]	@ (800bbd0 <low_level_init+0x144>)
 800baa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800baaa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800baac:	4b48      	ldr	r3, [pc, #288]	@ (800bbd0 <low_level_init+0x144>)
 800baae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bab2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bab4:	4b46      	ldr	r3, [pc, #280]	@ (800bbd0 <low_level_init+0x144>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800baba:	2300      	movs	r3, #0
 800babc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800babe:	2380      	movs	r3, #128	@ 0x80
 800bac0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bac2:	23e1      	movs	r3, #225	@ 0xe1
 800bac4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bac6:	2300      	movs	r3, #0
 800bac8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800baca:	2300      	movs	r3, #0
 800bacc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bace:	2300      	movs	r3, #0
 800bad0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bad2:	4a3f      	ldr	r2, [pc, #252]	@ (800bbd0 <low_level_init+0x144>)
 800bad4:	f107 0308 	add.w	r3, r7, #8
 800bad8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800bada:	4b3d      	ldr	r3, [pc, #244]	@ (800bbd0 <low_level_init+0x144>)
 800badc:	2200      	movs	r2, #0
 800bade:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bae0:	4b3b      	ldr	r3, [pc, #236]	@ (800bbd0 <low_level_init+0x144>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bae6:	4b3a      	ldr	r3, [pc, #232]	@ (800bbd0 <low_level_init+0x144>)
 800bae8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800baec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800baee:	4838      	ldr	r0, [pc, #224]	@ (800bbd0 <low_level_init+0x144>)
 800baf0:	f7fb fff0 	bl	8007ad4 <HAL_ETH_Init>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d108      	bne.n	800bb10 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bb04:	f043 0304 	orr.w	r3, r3, #4
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bb10:	2304      	movs	r3, #4
 800bb12:	4a31      	ldr	r2, [pc, #196]	@ (800bbd8 <low_level_init+0x14c>)
 800bb14:	4931      	ldr	r1, [pc, #196]	@ (800bbdc <low_level_init+0x150>)
 800bb16:	482e      	ldr	r0, [pc, #184]	@ (800bbd0 <low_level_init+0x144>)
 800bb18:	f7fc f968 	bl	8007dec <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	4a30      	ldr	r2, [pc, #192]	@ (800bbe0 <low_level_init+0x154>)
 800bb20:	4930      	ldr	r1, [pc, #192]	@ (800bbe4 <low_level_init+0x158>)
 800bb22:	482b      	ldr	r0, [pc, #172]	@ (800bbd0 <low_level_init+0x144>)
 800bb24:	f7fc f9c9 	bl	8007eba <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2206      	movs	r2, #6
 800bb2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bb30:	4b27      	ldr	r3, [pc, #156]	@ (800bbd0 <low_level_init+0x144>)
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	781a      	ldrb	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bb3c:	4b24      	ldr	r3, [pc, #144]	@ (800bbd0 <low_level_init+0x144>)
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	785a      	ldrb	r2, [r3, #1]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bb48:	4b21      	ldr	r3, [pc, #132]	@ (800bbd0 <low_level_init+0x144>)
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	789a      	ldrb	r2, [r3, #2]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bb54:	4b1e      	ldr	r3, [pc, #120]	@ (800bbd0 <low_level_init+0x144>)
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	78da      	ldrb	r2, [r3, #3]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bb60:	4b1b      	ldr	r3, [pc, #108]	@ (800bbd0 <low_level_init+0x144>)
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	791a      	ldrb	r2, [r3, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bb6c:	4b18      	ldr	r3, [pc, #96]	@ (800bbd0 <low_level_init+0x144>)
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	795a      	ldrb	r2, [r3, #5]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bb7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bb86:	f043 030a 	orr.w	r3, r3, #10
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800bb92:	480f      	ldr	r0, [pc, #60]	@ (800bbd0 <low_level_init+0x144>)
 800bb94:	f7fc fc35 	bl	8008402 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	211d      	movs	r1, #29
 800bba0:	480b      	ldr	r0, [pc, #44]	@ (800bbd0 <low_level_init+0x144>)
 800bba2:	f7fc fb60 	bl	8008266 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f043 030b 	orr.w	r3, r3, #11
 800bbac:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	211d      	movs	r1, #29
 800bbb4:	4806      	ldr	r0, [pc, #24]	@ (800bbd0 <low_level_init+0x144>)
 800bbb6:	f7fc fbbe 	bl	8008336 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bbba:	f107 0310 	add.w	r3, r7, #16
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	211d      	movs	r1, #29
 800bbc2:	4803      	ldr	r0, [pc, #12]	@ (800bbd0 <low_level_init+0x144>)
 800bbc4:	f7fc fb4f 	bl	8008266 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bbc8:	bf00      	nop
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	200080a8 	.word	0x200080a8
 800bbd4:	40028000 	.word	0x40028000
 800bbd8:	200068d8 	.word	0x200068d8
 800bbdc:	20005088 	.word	0x20005088
 800bbe0:	20005108 	.word	0x20005108
 800bbe4:	20005008 	.word	0x20005008

0800bbe8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	@ 0x28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bbf2:	4b4b      	ldr	r3, [pc, #300]	@ (800bd20 <low_level_output+0x138>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800bc0a:	4b45      	ldr	r3, [pc, #276]	@ (800bd20 <low_level_output+0x138>)
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	623b      	str	r3, [r7, #32]
 800bc18:	e05a      	b.n	800bcd0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	da03      	bge.n	800bc2a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800bc22:	23f8      	movs	r3, #248	@ 0xf8
 800bc24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800bc28:	e05c      	b.n	800bce4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	895b      	ldrh	r3, [r3, #10]
 800bc2e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc34:	e02f      	b.n	800bc96 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bc36:	69fa      	ldr	r2, [r7, #28]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	18d0      	adds	r0, r2, r3
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	18d1      	adds	r1, r2, r3
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	f016 fdf8 	bl	8022842 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da03      	bge.n	800bc68 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800bc60:	23f8      	movs	r3, #248	@ 0xf8
 800bc62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800bc66:	e03d      	b.n	800bce4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800bc78:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800bc84:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800bc90:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d8c8      	bhi.n	800bc36 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	18d0      	adds	r0, r2, r3
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f016 fdc4 	bl	8022842 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	623b      	str	r3, [r7, #32]
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1a1      	bne.n	800bc1a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bcd6:	6979      	ldr	r1, [r7, #20]
 800bcd8:	4811      	ldr	r0, [pc, #68]	@ (800bd20 <low_level_output+0x138>)
 800bcda:	f7fc f959 	bl	8007f90 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bce4:	4b0e      	ldr	r3, [pc, #56]	@ (800bd20 <low_level_output+0x138>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00d      	beq.n	800bd12 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <low_level_output+0x138>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcfe:	461a      	mov	r2, r3
 800bd00:	2320      	movs	r3, #32
 800bd02:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bd04:	4b06      	ldr	r3, [pc, #24]	@ (800bd20 <low_level_output+0x138>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800bd12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3728      	adds	r7, #40	@ 0x28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	200080a8 	.word	0x200080a8

0800bd24 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08c      	sub	sp, #48	@ 0x30
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bd48:	484e      	ldr	r0, [pc, #312]	@ (800be84 <low_level_input+0x160>)
 800bd4a:	f7fc fa09 	bl	8008160 <HAL_ETH_GetReceivedFrame>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <low_level_input+0x34>

    return NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	e090      	b.n	800be7a <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800bd58:	4b4a      	ldr	r3, [pc, #296]	@ (800be84 <low_level_input+0x160>)
 800bd5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd5c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bd5e:	4b49      	ldr	r3, [pc, #292]	@ (800be84 <low_level_input+0x160>)
 800bd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800bd64:	89fb      	ldrh	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d006      	beq.n	800bd78 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bd6a:	89fb      	ldrh	r3, [r7, #14]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	2004      	movs	r0, #4
 800bd72:	f009 fed5 	bl	8015b20 <pbuf_alloc>
 800bd76:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800bd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d04b      	beq.n	800be16 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bd7e:	4b41      	ldr	r3, [pc, #260]	@ (800be84 <low_level_input+0x160>)
 800bd80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd82:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd8c:	e040      	b.n	800be10 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd90:	895b      	ldrh	r3, [r3, #10]
 800bd92:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bd98:	e021      	b.n	800bdde <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	18d0      	adds	r0, r2, r3
 800bda2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800bdae:	3304      	adds	r3, #4
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	f016 fd46 	bl	8022842 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800bdc2:	69fa      	ldr	r2, [r7, #28]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800bdcc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800bdd8:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d8d6      	bhi.n	800bd9a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	18d0      	adds	r0, r2, r3
 800bdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	f016 fd20 	bl	8022842 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800be02:	69fa      	ldr	r2, [r7, #28]
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	4413      	add	r3, r2
 800be08:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800be0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1bb      	bne.n	800bd8e <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800be16:	4b1b      	ldr	r3, [pc, #108]	@ (800be84 <low_level_input+0x160>)
 800be18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be1c:	2300      	movs	r3, #0
 800be1e:	613b      	str	r3, [r7, #16]
 800be20:	e00b      	b.n	800be3a <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	3301      	adds	r3, #1
 800be38:	613b      	str	r3, [r7, #16]
 800be3a:	4b12      	ldr	r3, [pc, #72]	@ (800be84 <low_level_input+0x160>)
 800be3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	429a      	cmp	r2, r3
 800be42:	d3ee      	bcc.n	800be22 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800be44:	4b0f      	ldr	r3, [pc, #60]	@ (800be84 <low_level_input+0x160>)
 800be46:	2200      	movs	r2, #0
 800be48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800be4a:	4b0e      	ldr	r3, [pc, #56]	@ (800be84 <low_level_input+0x160>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00d      	beq.n	800be78 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800be5c:	4b09      	ldr	r3, [pc, #36]	@ (800be84 <low_level_input+0x160>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be64:	461a      	mov	r2, r3
 800be66:	2380      	movs	r3, #128	@ 0x80
 800be68:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800be6a:	4b06      	ldr	r3, [pc, #24]	@ (800be84 <low_level_input+0x160>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be72:	461a      	mov	r2, r3
 800be74:	2300      	movs	r3, #0
 800be76:	6093      	str	r3, [r2, #8]
  }
  return p;
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3730      	adds	r7, #48	@ 0x30
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200080a8 	.word	0x200080a8

0800be88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff47 	bl	800bd24 <low_level_input>
 800be96:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d010      	beq.n	800bec0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800beac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f00a f9ab 	bl	8016210 <pbuf_free>
    p = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e000      	b.n	800bec2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800bec0:	bf00      	nop
  }
}
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <ethernetif_init+0x1c>
 800bed6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf10 <ethernetif_init+0x48>)
 800bed8:	f240 220a 	movw	r2, #522	@ 0x20a
 800bedc:	490d      	ldr	r1, [pc, #52]	@ (800bf14 <ethernetif_init+0x4c>)
 800bede:	480e      	ldr	r0, [pc, #56]	@ (800bf18 <ethernetif_init+0x50>)
 800bee0:	f016 f9b4 	bl	802224c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2273      	movs	r2, #115	@ 0x73
 800bee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->name[1] = IFNAME1;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2274      	movs	r2, #116	@ 0x74
 800bef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a09      	ldr	r2, [pc, #36]	@ (800bf1c <ethernetif_init+0x54>)
 800bef8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a08      	ldr	r2, [pc, #32]	@ (800bf20 <ethernetif_init+0x58>)
 800befe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff fdc3 	bl	800ba8c <low_level_init>

  return ERR_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	08025424 	.word	0x08025424
 800bf14:	08025440 	.word	0x08025440
 800bf18:	08025450 	.word	0x08025450
 800bf1c:	0801f19d 	.word	0x0801f19d
 800bf20:	0800bbe9 	.word	0x0800bbe9

0800bf24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bf28:	f7fa fd50 	bl	80069cc <HAL_GetTick>
 800bf2c:	4603      	mov	r3, r0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 800bf40:	f7fa fd44 	bl	80069cc <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb4 <ethernetif_set_link+0x80>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf4e:	d92c      	bls.n	800bfaa <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bf50:	f7fa fd3c 	bl	80069cc <HAL_GetTick>
 800bf54:	4603      	mov	r3, r0
 800bf56:	4a17      	ldr	r2, [pc, #92]	@ (800bfb4 <ethernetif_set_link+0x80>)
 800bf58:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bf5a:	f107 030c 	add.w	r3, r7, #12
 800bf5e:	461a      	mov	r2, r3
 800bf60:	2101      	movs	r1, #1
 800bf62:	4815      	ldr	r0, [pc, #84]	@ (800bfb8 <ethernetif_set_link+0x84>)
 800bf64:	f7fc f97f 	bl	8008266 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bf76:	f003 0304 	and.w	r3, r3, #4
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <ethernetif_set_link+0x58>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d003      	beq.n	800bf8c <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f009 fd3d 	bl	8015a04 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 800bf8a:	e00e      	b.n	800bfaa <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bf92:	089b      	lsrs	r3, r3, #2
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <ethernetif_set_link+0x76>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d102      	bne.n	800bfaa <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f009 fd5b 	bl	8015a60 <netif_set_link_down>
}
 800bfaa:	bf00      	nop
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	200080f0 	.word	0x200080f0
 800bfb8:	200080a8 	.word	0x200080a8

0800bfbc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bfd2:	089b      	lsrs	r3, r3, #2
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d066      	beq.n	800c0ac <ethernetif_update_config+0xf0>
  {
	  /* Жёсткий перезапуск PHY при появлении линка для LAN8742 */
	      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_RESET);
 800bfde:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	4836      	ldr	r0, [pc, #216]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800bfe6:	f7fc f9a6 	bl	8008336 <HAL_ETH_WritePHYRegister>
	      HAL_Delay(2);
 800bfea:	2002      	movs	r0, #2
 800bfec:	f7fa fcf8 	bl	80069e0 <HAL_Delay>
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800bff0:	4b33      	ldr	r3, [pc, #204]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d03f      	beq.n	800c078 <ethernetif_update_config+0xbc>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800bff8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bffc:	2100      	movs	r1, #0
 800bffe:	4830      	ldr	r0, [pc, #192]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c000:	f7fc f999 	bl	8008336 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c004:	f7fa fce2 	bl	80069cc <HAL_GetTick>
 800c008:	4603      	mov	r3, r0
 800c00a:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c00c:	f107 0308 	add.w	r3, r7, #8
 800c010:	461a      	mov	r2, r3
 800c012:	2101      	movs	r1, #1
 800c014:	482a      	ldr	r0, [pc, #168]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c016:	f7fc f926 	bl	8008266 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c01a:	f7fa fcd7 	bl	80069cc <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c028:	d828      	bhi.n	800c07c <ethernetif_update_config+0xc0>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f003 0320 	and.w	r3, r3, #32
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0eb      	beq.n	800c00c <ethernetif_update_config+0x50>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c034:	f107 0308 	add.w	r3, r7, #8
 800c038:	461a      	mov	r2, r3
 800c03a:	2110      	movs	r1, #16
 800c03c:	4820      	ldr	r0, [pc, #128]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c03e:	f7fc f912 	bl	8008266 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d004      	beq.n	800c056 <ethernetif_update_config+0x9a>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c04c:	4b1c      	ldr	r3, [pc, #112]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c04e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c052:	60da      	str	r2, [r3, #12]
 800c054:	e002      	b.n	800c05c <ethernetif_update_config+0xa0>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c056:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c058:	2200      	movs	r2, #0
 800c05a:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <ethernetif_update_config+0xb2>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c066:	4b16      	ldr	r3, [pc, #88]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c068:	2200      	movs	r2, #0
 800c06a:	609a      	str	r2, [r3, #8]
 800c06c:	e016      	b.n	800c09c <ethernetif_update_config+0xe0>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c06e:	4b14      	ldr	r3, [pc, #80]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c070:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800c074:	609a      	str	r2, [r3, #8]
 800c076:	e011      	b.n	800c09c <ethernetif_update_config+0xe0>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c078:	bf00      	nop
 800c07a:	e000      	b.n	800c07e <ethernetif_update_config+0xc2>
          goto error;
 800c07c:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c07e:	4b10      	ldr	r3, [pc, #64]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	08db      	lsrs	r3, r3, #3
 800c084:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c086:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	085b      	lsrs	r3, r3, #1
 800c08c:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c08e:	4313      	orrs	r3, r2
 800c090:	b29b      	uxth	r3, r3
 800c092:	461a      	mov	r2, r3
 800c094:	2100      	movs	r1, #0
 800c096:	480a      	ldr	r0, [pc, #40]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c098:	f7fc f94d 	bl	8008336 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c09c:	2100      	movs	r1, #0
 800c09e:	4808      	ldr	r0, [pc, #32]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c0a0:	f7fc fa0e 	bl	80084c0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c0a4:	4806      	ldr	r0, [pc, #24]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c0a6:	f7fc f9ac 	bl	8008402 <HAL_ETH_Start>
 800c0aa:	e002      	b.n	800c0b2 <ethernetif_update_config+0xf6>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c0ac:	4804      	ldr	r0, [pc, #16]	@ (800c0c0 <ethernetif_update_config+0x104>)
 800c0ae:	f7fc f9d7 	bl	8008460 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f806 	bl	800c0c4 <ethernetif_notify_conn_changed>
}
 800c0b8:	bf00      	nop
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	200080a8 	.word	0x200080a8

0800c0c4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <fs_open+0x16>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <fs_open+0x1c>
     return ERR_ARG;
 800c0ee:	f06f 030f 	mvn.w	r3, #15
 800c0f2:	e037      	b.n	800c164 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 f858 	bl	800c1ac <fs_open_custom>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d004      	beq.n	800c10c <fs_open+0x34>
    file->is_custom_file = 1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	e02b      	b.n	800c164 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c112:	4b16      	ldr	r3, [pc, #88]	@ (800c16c <fs_open+0x94>)
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	e020      	b.n	800c15a <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	4619      	mov	r1, r3
 800c11e:	6838      	ldr	r0, [r7, #0]
 800c120:	f7f4 f852 	bl	80001c8 <strcmp>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d114      	bne.n	800c154 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	7c1a      	ldrb	r2, [r3, #16]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	e007      	b.n	800c164 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1db      	bne.n	800c118 <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800c160:	f06f 0305 	mvn.w	r3, #5
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	080301e4 	.word	0x080301e4

0800c170 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	7c5b      	ldrb	r3, [r3, #17]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <fs_close+0x16>
    fs_close_custom(file);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f8f3 	bl	800c36c <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	1ad3      	subs	r3, r2, r3
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bc80      	pop	{r7}
 800c1a8:	4770      	bx	lr
	...

0800c1ac <fs_open_custom>:
  "const datetimeForm=document.getElementById('datetime-form');const statusDatetime=document.getElementById('status-datetime');datetimeForm.addEventListener('submit',ev=>{ev.preventDefault();const fd=new FormData(datetimeForm);const d=fd.get('date');const t=fd.get('time');statusDatetime.textContent='Сохранение...';if(d){new Image().src='set_date.cgi?date='+d;}if(t){new Image().src='set_time.cgi?time='+t;}statusDatetime.textContent='Дата и время сохранены!';setTimeout(()=>location.reload(),1000);});"
  "async function loadSettings(){try{const resp=await fetch('/table.shtml',{cache:'no-store'});if(!resp.ok)throw new Error('HTTP '+resp.status);const html=await resp.text();const ip=html.match(/<!--#netip-->(.*?)<\/td>/s);const mask=html.match(/<!--#netmask-->(.*?)<\/td>/s);const gw=html.match(/<!--#netgw-->(.*?)<\/td>/s);const dhcp=html.match(/<!--#netdhcp-->(.*?)<\/td>/s);if(ip)document.getElementById('ip').placeholder=ip[1].trim();if(mask)document.getElementById('mask').placeholder=mask[1].trim();if(gw)document.getElementById('gateway').placeholder=gw[1].trim();if(dhcp)document.getElementById('dhcp').checked=(dhcp[1].trim()==='on');const d=html.match(/<!--#date-->(.*?)<\/td>/s);const tt=html.match(/<!--#time-->(.*?)<\/td>/s);if(d)document.getElementById('date').value=d[1].trim();if(tt)document.getElementById('time').value=tt[1].trim();}catch(e){console.error(e);}}loadSettings();})();</script>\n"
  "</body></html>\n";

int fs_open_custom(struct fs_file *file, const char *name)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  if (file == NULL || name == NULL) return 0;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <fs_open_custom+0x16>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <fs_open_custom+0x1a>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e0b0      	b.n	800c328 <fs_open_custom+0x17c>

  /* Отдаём переопределённые версии страниц */
  if (!strcmp(name, "/login.html")) {
 800c1c6:	495a      	ldr	r1, [pc, #360]	@ (800c330 <fs_open_custom+0x184>)
 800c1c8:	6838      	ldr	r0, [r7, #0]
 800c1ca:	f7f3 fffd 	bl	80001c8 <strcmp>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10f      	bne.n	800c1f4 <fs_open_custom+0x48>
    file->data = login_html_override;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a57      	ldr	r2, [pc, #348]	@ (800c334 <fs_open_custom+0x188>)
 800c1d8:	601a      	str	r2, [r3, #0]
    file->len = strlen(login_html_override);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800c1e0:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	741a      	strb	r2, [r3, #16]
    return 1;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e099      	b.n	800c328 <fs_open_custom+0x17c>
  }
  if (!strcmp(name, "/settings.html")) {
 800c1f4:	4950      	ldr	r1, [pc, #320]	@ (800c338 <fs_open_custom+0x18c>)
 800c1f6:	6838      	ldr	r0, [r7, #0]
 800c1f8:	f7f3 ffe6 	bl	80001c8 <strcmp>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10f      	bne.n	800c222 <fs_open_custom+0x76>
    file->data = settings_html_override;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a4d      	ldr	r2, [pc, #308]	@ (800c33c <fs_open_custom+0x190>)
 800c206:	601a      	str	r2, [r3, #0]
    file->len = strlen(settings_html_override);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f241 6292 	movw	r2, #5778	@ 0x1692
 800c20e:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	741a      	strb	r2, [r3, #16]
    return 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	e082      	b.n	800c328 <fs_open_custom+0x17c>
  }
  /* Разрешаем страницу ошибки всегда */
  if (!strcmp(name, "/login_failed.html")) {
 800c222:	4947      	ldr	r1, [pc, #284]	@ (800c340 <fs_open_custom+0x194>)
 800c224:	6838      	ldr	r0, [r7, #0]
 800c226:	f7f3 ffcf 	bl	80001c8 <strcmp>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <fs_open_custom+0x88>
    return 0; /* обычная отдача */
 800c230:	2300      	movs	r3, #0
 800c232:	e079      	b.n	800c328 <fs_open_custom+0x17c>
  }

  /* /login.cgi обрабатывается через CGI handler в main.c */
  if (!strncmp(name, "/login.cgi", 10)) {
 800c234:	220a      	movs	r2, #10
 800c236:	4943      	ldr	r1, [pc, #268]	@ (800c344 <fs_open_custom+0x198>)
 800c238:	6838      	ldr	r0, [r7, #0]
 800c23a:	f016 fa13 	bl	8022664 <strncmp>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <fs_open_custom+0x9c>
    return 0; /* для GET-логина параметры парсит CGI */
 800c244:	2300      	movs	r3, #0
 800c246:	e06f      	b.n	800c328 <fs_open_custom+0x17c>
  }

  /* Logout */
  if (!strncmp(name, "/logout.cgi", 11)) {
 800c248:	220b      	movs	r2, #11
 800c24a:	493f      	ldr	r1, [pc, #252]	@ (800c348 <fs_open_custom+0x19c>)
 800c24c:	6838      	ldr	r0, [r7, #0]
 800c24e:	f016 fa09 	bl	8022664 <strncmp>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d117      	bne.n	800c288 <fs_open_custom+0xdc>
    g_is_authenticated = 0;
 800c258:	4b3c      	ldr	r3, [pc, #240]	@ (800c34c <fs_open_custom+0x1a0>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	701a      	strb	r2, [r3, #0]
    file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a3b      	ldr	r2, [pc, #236]	@ (800c350 <fs_open_custom+0x1a4>)
 800c262:	601a      	str	r2, [r3, #0]
    file->len = strlen(file->data);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f3 ffb7 	bl	80001dc <strlen>
 800c26e:	4603      	mov	r3, r0
 800c270:	461a      	mov	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	741a      	strb	r2, [r3, #16]
    return 1;
 800c284:	2301      	movs	r3, #1
 800c286:	e04f      	b.n	800c328 <fs_open_custom+0x17c>
  }

  /* Для остальных страниц — пропускаем, если авторизован; иначе редирект на login */
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800c288:	4932      	ldr	r1, [pc, #200]	@ (800c354 <fs_open_custom+0x1a8>)
 800c28a:	6838      	ldr	r0, [r7, #0]
 800c28c:	f7f3 ff9c 	bl	80001c8 <strcmp>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d022      	beq.n	800c2dc <fs_open_custom+0x130>
 800c296:	4930      	ldr	r1, [pc, #192]	@ (800c358 <fs_open_custom+0x1ac>)
 800c298:	6838      	ldr	r0, [r7, #0]
 800c29a:	f7f3 ff95 	bl	80001c8 <strcmp>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d01b      	beq.n	800c2dc <fs_open_custom+0x130>
 800c2a4:	4924      	ldr	r1, [pc, #144]	@ (800c338 <fs_open_custom+0x18c>)
 800c2a6:	6838      	ldr	r0, [r7, #0]
 800c2a8:	f7f3 ff8e 	bl	80001c8 <strcmp>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d014      	beq.n	800c2dc <fs_open_custom+0x130>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800c2b2:	492a      	ldr	r1, [pc, #168]	@ (800c35c <fs_open_custom+0x1b0>)
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f7f3 ff87 	bl	80001c8 <strcmp>
 800c2ba:	4603      	mov	r3, r0
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00d      	beq.n	800c2dc <fs_open_custom+0x130>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800c2c0:	4927      	ldr	r1, [pc, #156]	@ (800c360 <fs_open_custom+0x1b4>)
 800c2c2:	6838      	ldr	r0, [r7, #0]
 800c2c4:	f7f3 ff80 	bl	80001c8 <strcmp>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d006      	beq.n	800c2dc <fs_open_custom+0x130>
 800c2ce:	4925      	ldr	r1, [pc, #148]	@ (800c364 <fs_open_custom+0x1b8>)
 800c2d0:	6838      	ldr	r0, [r7, #0]
 800c2d2:	f016 f9ec 	bl	80226ae <strstr>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01b      	beq.n	800c314 <fs_open_custom+0x168>
    if (g_is_authenticated) {
 800c2dc:	4b1b      	ldr	r3, [pc, #108]	@ (800c34c <fs_open_custom+0x1a0>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <fs_open_custom+0x13e>
      return 0; /* отдать страницу обычно */
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e01e      	b.n	800c328 <fs_open_custom+0x17c>
    } else {
      file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a18      	ldr	r2, [pc, #96]	@ (800c350 <fs_open_custom+0x1a4>)
 800c2ee:	601a      	str	r2, [r3, #0]
      file->len = strlen(file->data);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f3 ff71 	bl	80001dc <strlen>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	605a      	str	r2, [r3, #4]
      file->index = file->len;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	609a      	str	r2, [r3, #8]
      file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	741a      	strb	r2, [r3, #16]
      return 1;
 800c310:	2301      	movs	r3, #1
 800c312:	e009      	b.n	800c328 <fs_open_custom+0x17c>
    }
  }

  /* Разрешаем прямой доступ к CGI-скриптам (в т.ч. /login.cgi) без авторизации
     иначе браузер может уйти в цикл редиректов при GET-логине */
  if (strstr(name, ".cgi") != NULL) {
 800c314:	4914      	ldr	r1, [pc, #80]	@ (800c368 <fs_open_custom+0x1bc>)
 800c316:	6838      	ldr	r0, [r7, #0]
 800c318:	f016 f9c9 	bl	80226ae <strstr>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <fs_open_custom+0x17a>
    return 0;
 800c322:	2300      	movs	r3, #0
 800c324:	e000      	b.n	800c328 <fs_open_custom+0x17c>
  }
  return 0;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	08025478 	.word	0x08025478
 800c334:	080301f8 	.word	0x080301f8
 800c338:	08025484 	.word	0x08025484
 800c33c:	080307f8 	.word	0x080307f8
 800c340:	08025494 	.word	0x08025494
 800c344:	080254a8 	.word	0x080254a8
 800c348:	080254b4 	.word	0x080254b4
 800c34c:	20002a30 	.word	0x20002a30
 800c350:	080254c0 	.word	0x080254c0
 800c354:	080254f0 	.word	0x080254f0
 800c358:	080254f4 	.word	0x080254f4
 800c35c:	08025500 	.word	0x08025500
 800c360:	0802550c 	.word	0x0802550c
 800c364:	0802551c 	.word	0x0802551c
 800c368:	08025524 	.word	0x08025524

0800c36c <fs_close_custom>:

void fs_close_custom(struct fs_file *file)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(file);
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	bc80      	pop	{r7}
 800c37c:	4770      	bx	lr
	...

0800c380 <ssi_handler>:
#include "clock/clock.h"

const char *ssi_tags[] = { "voltage1", "voltage2", "current", "spower", "netip", "netmask", "netgw", "datetime" };

u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 800c380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c382:	b091      	sub	sp, #68	@ 0x44
 800c384:	af06      	add	r7, sp, #24
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
    int len = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	627b      	str	r3, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    switch (iIndex)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b07      	cmp	r3, #7
 800c394:	f200 80a8 	bhi.w	800c4e8 <ssi_handler+0x168>
 800c398:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a0 <ssi_handler+0x20>)
 800c39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39e:	bf00      	nop
 800c3a0:	0800c3c1 	.word	0x0800c3c1
 800c3a4:	0800c3e3 	.word	0x0800c3e3
 800c3a8:	0800c405 	.word	0x0800c405
 800c3ac:	0800c427 	.word	0x0800c427
 800c3b0:	0800c457 	.word	0x0800c457
 800c3b4:	0800c46f 	.word	0x0800c46f
 800c3b8:	0800c487 	.word	0x0800c487
 800c3bc:	0800c49f 	.word	0x0800c49f
    {
        case 0:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage1);
 800c3c0:	687c      	ldr	r4, [r7, #4]
 800c3c2:	4b50      	ldr	r3, [pc, #320]	@ (800c504 <ssi_handler+0x184>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f4 f874 	bl	80004b4 <__aeabi_f2d>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c3d4:	4a4c      	ldr	r2, [pc, #304]	@ (800c508 <ssi_handler+0x188>)
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	68b8      	ldr	r0, [r7, #8]
 800c3da:	f015 ffa7 	bl	802232c <sniprintf>
 800c3de:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c3e0:	e089      	b.n	800c4f6 <ssi_handler+0x176>
        case 1:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage2);
 800c3e2:	687c      	ldr	r4, [r7, #4]
 800c3e4:	4b49      	ldr	r3, [pc, #292]	@ (800c50c <ssi_handler+0x18c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f4 f863 	bl	80004b4 <__aeabi_f2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	e9cd 2300 	strd	r2, r3, [sp]
 800c3f6:	4a44      	ldr	r2, [pc, #272]	@ (800c508 <ssi_handler+0x188>)
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	68b8      	ldr	r0, [r7, #8]
 800c3fc:	f015 ff96 	bl	802232c <sniprintf>
 800c400:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c402:	e078      	b.n	800c4f6 <ssi_handler+0x176>
        case 2:
            len = snprintf(pcInsert, iInsertLen, "%.2f", current);
 800c404:	687c      	ldr	r4, [r7, #4]
 800c406:	4b42      	ldr	r3, [pc, #264]	@ (800c510 <ssi_handler+0x190>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f4 f852 	bl	80004b4 <__aeabi_f2d>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	e9cd 2300 	strd	r2, r3, [sp]
 800c418:	4a3b      	ldr	r2, [pc, #236]	@ (800c508 <ssi_handler+0x188>)
 800c41a:	4621      	mov	r1, r4
 800c41c:	68b8      	ldr	r0, [r7, #8]
 800c41e:	f015 ff85 	bl	802232c <sniprintf>
 800c422:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c424:	e067      	b.n	800c4f6 <ssi_handler+0x176>
        case 3:
            len = snprintf(pcInsert, iInsertLen, "%.2f", selected_voltage * current);
 800c426:	687c      	ldr	r4, [r7, #4]
 800c428:	4b3a      	ldr	r3, [pc, #232]	@ (800c514 <ssi_handler+0x194>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a38      	ldr	r2, [pc, #224]	@ (800c510 <ssi_handler+0x190>)
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	4611      	mov	r1, r2
 800c432:	4618      	mov	r0, r3
 800c434:	f7f4 fccc 	bl	8000dd0 <__aeabi_fmul>
 800c438:	4603      	mov	r3, r0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f4 f83a 	bl	80004b4 <__aeabi_f2d>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	e9cd 2300 	strd	r2, r3, [sp]
 800c448:	4a2f      	ldr	r2, [pc, #188]	@ (800c508 <ssi_handler+0x188>)
 800c44a:	4621      	mov	r1, r4
 800c44c:	68b8      	ldr	r0, [r7, #8]
 800c44e:	f015 ff6d 	bl	802232c <sniprintf>
 800c452:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c454:	e04f      	b.n	800c4f6 <ssi_handler+0x176>
        case 4:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.ip_addr));
 800c456:	687c      	ldr	r4, [r7, #4]
 800c458:	482f      	ldr	r0, [pc, #188]	@ (800c518 <ssi_handler+0x198>)
 800c45a:	f014 f941 	bl	80206e0 <ip4addr_ntoa>
 800c45e:	4603      	mov	r3, r0
 800c460:	4a2e      	ldr	r2, [pc, #184]	@ (800c51c <ssi_handler+0x19c>)
 800c462:	4621      	mov	r1, r4
 800c464:	68b8      	ldr	r0, [r7, #8]
 800c466:	f015 ff61 	bl	802232c <sniprintf>
 800c46a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c46c:	e043      	b.n	800c4f6 <ssi_handler+0x176>
        case 5:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.netmask));
 800c46e:	687c      	ldr	r4, [r7, #4]
 800c470:	482b      	ldr	r0, [pc, #172]	@ (800c520 <ssi_handler+0x1a0>)
 800c472:	f014 f935 	bl	80206e0 <ip4addr_ntoa>
 800c476:	4603      	mov	r3, r0
 800c478:	4a28      	ldr	r2, [pc, #160]	@ (800c51c <ssi_handler+0x19c>)
 800c47a:	4621      	mov	r1, r4
 800c47c:	68b8      	ldr	r0, [r7, #8]
 800c47e:	f015 ff55 	bl	802232c <sniprintf>
 800c482:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c484:	e037      	b.n	800c4f6 <ssi_handler+0x176>
        case 6:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.gw));
 800c486:	687c      	ldr	r4, [r7, #4]
 800c488:	4826      	ldr	r0, [pc, #152]	@ (800c524 <ssi_handler+0x1a4>)
 800c48a:	f014 f929 	bl	80206e0 <ip4addr_ntoa>
 800c48e:	4603      	mov	r3, r0
 800c490:	4a22      	ldr	r2, [pc, #136]	@ (800c51c <ssi_handler+0x19c>)
 800c492:	4621      	mov	r1, r4
 800c494:	68b8      	ldr	r0, [r7, #8]
 800c496:	f015 ff49 	bl	802232c <sniprintf>
 800c49a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c49c:	e02b      	b.n	800c4f6 <ssi_handler+0x176>
        case 7:
            // Получаем текущие дату и время
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c49e:	f107 0318 	add.w	r3, r7, #24
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4820      	ldr	r0, [pc, #128]	@ (800c528 <ssi_handler+0x1a8>)
 800c4a8:	f7fe fbd6 	bl	800ac58 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c4ac:	f107 0314 	add.w	r3, r7, #20
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	481c      	ldr	r0, [pc, #112]	@ (800c528 <ssi_handler+0x1a8>)
 800c4b6:	f7fe fca5 	bl	800ae04 <HAL_RTC_GetDate>
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4ba:	6879      	ldr	r1, [r7, #4]
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4bc:	7dbb      	ldrb	r3, [r7, #22]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4be:	461e      	mov	r6, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4c0:	7d7b      	ldrb	r3, [r7, #21]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4c2:	461a      	mov	r2, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4c6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                           sTime.Hours, sTime.Minutes, sTime.Seconds);
 800c4ca:	7e38      	ldrb	r0, [r7, #24]
 800c4cc:	7e7c      	ldrb	r4, [r7, #25]
 800c4ce:	7ebd      	ldrb	r5, [r7, #26]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c4d0:	9504      	str	r5, [sp, #16]
 800c4d2:	9403      	str	r4, [sp, #12]
 800c4d4:	9002      	str	r0, [sp, #8]
 800c4d6:	9301      	str	r3, [sp, #4]
 800c4d8:	9200      	str	r2, [sp, #0]
 800c4da:	4633      	mov	r3, r6
 800c4dc:	4a13      	ldr	r2, [pc, #76]	@ (800c52c <ssi_handler+0x1ac>)
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	f015 ff24 	bl	802232c <sniprintf>
 800c4e4:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c4e6:	e006      	b.n	800c4f6 <ssi_handler+0x176>
        default:
            len = snprintf(pcInsert, iInsertLen, "---");
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a11      	ldr	r2, [pc, #68]	@ (800c530 <ssi_handler+0x1b0>)
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	68b8      	ldr	r0, [r7, #8]
 800c4f0:	f015 ff1c 	bl	802232c <sniprintf>
 800c4f4:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    return (u16_t)len;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	b29b      	uxth	r3, r3
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	372c      	adds	r7, #44	@ 0x2c
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c502:	bf00      	nop
 800c504:	20004ab4 	.word	0x20004ab4
 800c508:	08025598 	.word	0x08025598
 800c50c:	20004ab8 	.word	0x20004ab8
 800c510:	20004abc 	.word	0x20004abc
 800c514:	20004ac0 	.word	0x20004ac0
 800c518:	20004f88 	.word	0x20004f88
 800c51c:	080255a0 	.word	0x080255a0
 800c520:	20004f8c 	.word	0x20004f8c
 800c524:	20004f90 	.word	0x20004f90
 800c528:	200029c8 	.word	0x200029c8
 800c52c:	080255a4 	.word	0x080255a4
 800c530:	080255c4 	.word	0x080255c4

0800c534 <httpd_ssi_init_custom>:

void httpd_ssi_init_custom(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
    http_set_ssi_handler(ssi_handler, ssi_tags, sizeof(ssi_tags) / sizeof(char*));
 800c538:	2208      	movs	r2, #8
 800c53a:	4903      	ldr	r1, [pc, #12]	@ (800c548 <httpd_ssi_init_custom+0x14>)
 800c53c:	4803      	ldr	r0, [pc, #12]	@ (800c54c <httpd_ssi_init_custom+0x18>)
 800c53e:	f001 fc3f 	bl	800ddc0 <http_set_ssi_handler>
}
 800c542:	bf00      	nop
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200000d0 	.word	0x200000d0
 800c54c:	0800c381 	.word	0x0800c381

0800c550 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800c556:	20dc      	movs	r0, #220	@ 0xdc
 800c558:	f008 feb0 	bl	80152bc <mem_malloc>
 800c55c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d004      	beq.n	800c56e <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800c564:	22dc      	movs	r2, #220	@ 0xdc
 800c566:	2100      	movs	r1, #0
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f016 f845 	bl	80225f8 <memset>
  }
  return ret;
 800c56e:	687b      	ldr	r3, [r7, #4]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f008 fd1e 	bl	8014fc8 <mem_free>
  }
}
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800c59c:	22b4      	movs	r2, #180	@ 0xb4
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f016 f829 	bl	80225f8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800c5b4:	20b4      	movs	r0, #180	@ 0xb4
 800c5b6:	f008 fe81 	bl	80152bc <mem_malloc>
 800c5ba:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <http_state_alloc+0x1a>
    http_state_init(ret);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff ffe6 	bl	800c594 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800c5c8:	687b      	ldr	r3, [r7, #4]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d007      	beq.n	800c5f2 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff fdc2 	bl	800c170 <fs_close>
    hs->handle = NULL;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff ffba 	bl	800c578 <http_ssi_state_free>
    hs->ssi = NULL;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d007      	beq.n	800c622 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	4618      	mov	r0, r3
 800c618:	f009 fdfa 	bl	8016210 <pbuf_free>
    hs->req = NULL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d005      	beq.n	800c644 <http_state_free+0x1a>
    http_state_eof(hs);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff ffca 	bl	800c5d2 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f008 fcc2 	bl	8014fc8 <mem_free>
  }
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d106      	bne.n	800c66e <http_write+0x22>
 800c660:	4b2c      	ldr	r3, [pc, #176]	@ (800c714 <http_write+0xc8>)
 800c662:	f240 2252 	movw	r2, #594	@ 0x252
 800c666:	492c      	ldr	r1, [pc, #176]	@ (800c718 <http_write+0xcc>)
 800c668:	482c      	ldr	r0, [pc, #176]	@ (800c71c <http_write+0xd0>)
 800c66a:	f015 fdef 	bl	802224c <iprintf>
  len = *length;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800c674:	8afb      	ldrh	r3, [r7, #22]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <http_write+0x32>
    return ERR_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	e045      	b.n	800c70a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c684:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800c686:	8aba      	ldrh	r2, [r7, #20]
 800c688:	8afb      	ldrh	r3, [r7, #22]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d201      	bcs.n	800c692 <http_write+0x46>
    len = max_len;
 800c68e:	8abb      	ldrh	r3, [r7, #20]
 800c690:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800c69a:	8afa      	ldrh	r2, [r7, #22]
 800c69c:	8abb      	ldrh	r3, [r7, #20]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d901      	bls.n	800c6a6 <http_write+0x5a>
    len = max_len;
 800c6a2:	8abb      	ldrh	r3, [r7, #20]
 800c6a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	8afa      	ldrh	r2, [r7, #22]
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f00e fa83 	bl	801abb8 <tcp_write>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800c6b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6be:	d10f      	bne.n	800c6e0 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d902      	bls.n	800c6da <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	82fb      	strh	r3, [r7, #22]
 800c6d8:	e002      	b.n	800c6e0 <http_write+0x94>
      } else {
        len /= 2;
 800c6da:	8afb      	ldrh	r3, [r7, #22]
 800c6dc:	085b      	lsrs	r3, r3, #1
 800c6de:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800c6e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e8:	d102      	bne.n	800c6f0 <http_write+0xa4>
 800c6ea:	8afb      	ldrh	r3, [r7, #22]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d8da      	bhi.n	800c6a6 <http_write+0x5a>

  if (err == ERR_OK) {
 800c6f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8afa      	ldrh	r2, [r7, #22]
 800c6fc:	801a      	strh	r2, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800c706:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	08025614 	.word	0x08025614
 800c718:	0802564c 	.word	0x0802564c
 800c71c:	0802565c 	.word	0x0802565c

0800c720 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void*)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00c      	beq.n	800c74e <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d007      	beq.n	800c74e <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
       || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800c73e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <http_close_or_abort_conn+0x9c>)
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c744:	223f      	movs	r2, #63	@ 0x3f
 800c746:	491d      	ldr	r1, [pc, #116]	@ (800c7bc <http_close_or_abort_conn+0x9c>)
 800c748:	68b8      	ldr	r0, [r7, #8]
 800c74a:	f7f5 fedf 	bl	800250c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800c74e:	2100      	movs	r1, #0
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f00b fb6b 	bl	8017e2c <tcp_arg>
  tcp_recv(pcb, NULL);
 800c756:	2100      	movs	r1, #0
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f00b fb77 	bl	8017e4c <tcp_recv>
  tcp_err(pcb, NULL);
 800c75e:	2100      	movs	r1, #0
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f00b fbb5 	bl	8017ed0 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f00b fbe8 	bl	8017f40 <tcp_poll>
  tcp_sent(pcb, NULL);
 800c770:	2100      	movs	r1, #0
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f00b fb8c 	bl	8017e90 <tcp_sent>
  if (hs != NULL) {
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800c77e:	68b8      	ldr	r0, [r7, #8]
 800c780:	f7ff ff53 	bl	800c62a <http_state_free>
  }

  if (abort_conn) {
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d004      	beq.n	800c794 <http_close_or_abort_conn+0x74>
    tcp_abort(pcb);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f00a fb8a 	bl	8016ea4 <tcp_abort>
    return ERR_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	e00f      	b.n	800c7b4 <http_close_or_abort_conn+0x94>
  }
  err = tcp_close(pcb);
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f00a fabb 	bl	8016d10 <tcp_close>
 800c79a:	4603      	mov	r3, r0
 800c79c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800c79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d004      	beq.n	800c7b0 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c7a6:	2204      	movs	r2, #4
 800c7a8:	4905      	ldr	r1, [pc, #20]	@ (800c7c0 <http_close_or_abort_conn+0xa0>)
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f00b fbc8 	bl	8017f40 <tcp_poll>
  }
  return err;
 800c7b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	200084f4 	.word	0x200084f4
 800c7c0:	0800dae7 	.word	0x0800dae7

0800c7c4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff ffa4 	bl	800c720 <http_close_or_abort_conn>
 800c7d8:	4603      	mov	r3, r0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff ffe8 	bl	800c7c4 <http_close_conn>
  }
}
 800c7f4:	bf00      	nop
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <extract_uri_parameters+0x18>
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <extract_uri_parameters+0x1c>
      return(0);
 800c814:	2300      	movs	r3, #0
 800c816:	e04b      	b.n	800c8b0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c81c:	2300      	movs	r3, #0
 800c81e:	613b      	str	r3, [r7, #16]
 800c820:	e03f      	b.n	800c8a2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	320c      	adds	r2, #12
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800c832:	2126      	movs	r1, #38	@ 0x26
 800c834:	6978      	ldr	r0, [r7, #20]
 800c836:	f015 fee7 	bl	8022608 <strchr>
 800c83a:	6178      	str	r0, [r7, #20]
    if(pair) {
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d006      	beq.n	800c850 <extract_uri_parameters+0x54>
      *pair = '\0';
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2200      	movs	r2, #0
 800c846:	701a      	strb	r2, [r3, #0]
      pair++;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	3301      	adds	r3, #1
 800c84c:	617b      	str	r3, [r7, #20]
 800c84e:	e00c      	b.n	800c86a <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800c850:	2120      	movs	r1, #32
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f015 fed8 	bl	8022608 <strchr>
 800c858:	6178      	str	r0, [r7, #20]
        if(pair) {
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <extract_uri_parameters+0x6a>
            *pair = '\0';
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800c86a:	213d      	movs	r1, #61	@ 0x3d
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f015 fecb 	bl	8022608 <strchr>
 800c872:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <extract_uri_parameters+0x94>
      *equals = '\0';
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	1c59      	adds	r1, r3, #1
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	321c      	adds	r2, #28
 800c88a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c88e:	e005      	b.n	800c89c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	321c      	adds	r2, #28
 800c896:	2100      	movs	r1, #0
 800c898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	613b      	str	r3, [r7, #16]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2b0f      	cmp	r3, #15
 800c8a6:	dc02      	bgt.n	800c8ae <extract_uri_parameters+0xb2>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1b9      	bne.n	800c822 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800c8ae:	693b      	ldr	r3, [r7, #16]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <get_tag_insert+0x1c>
 800c8c6:	4b51      	ldr	r3, [pc, #324]	@ (800ca0c <get_tag_insert+0x154>)
 800c8c8:	f240 323d 	movw	r2, #829	@ 0x33d
 800c8cc:	4950      	ldr	r1, [pc, #320]	@ (800ca10 <get_tag_insert+0x158>)
 800c8ce:	4851      	ldr	r0, [pc, #324]	@ (800ca14 <get_tag_insert+0x15c>)
 800c8d0:	f015 fcbc 	bl	802224c <iprintf>
  ssi = hs->ssi;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <get_tag_insert+0x36>
 800c8e0:	4b4a      	ldr	r3, [pc, #296]	@ (800ca0c <get_tag_insert+0x154>)
 800c8e2:	f240 323f 	movw	r2, #831	@ 0x33f
 800c8e6:	494c      	ldr	r1, [pc, #304]	@ (800ca18 <get_tag_insert+0x160>)
 800c8e8:	484a      	ldr	r0, [pc, #296]	@ (800ca14 <get_tag_insert+0x15c>)
 800c8ea:	f015 fcaf 	bl	802224c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800c8ee:	4b4b      	ldr	r3, [pc, #300]	@ (800ca1c <get_tag_insert+0x164>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d02e      	beq.n	800c954 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800c8f6:	4b4a      	ldr	r3, [pc, #296]	@ (800ca20 <get_tag_insert+0x168>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d02a      	beq.n	800c954 <get_tag_insert+0x9c>
 800c8fe:	4b49      	ldr	r3, [pc, #292]	@ (800ca24 <get_tag_insert+0x16c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d026      	beq.n	800c954 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e01e      	b.n	800c94a <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f103 0011 	add.w	r0, r3, #17
 800c912:	4b43      	ldr	r3, [pc, #268]	@ (800ca20 <get_tag_insert+0x168>)
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4619      	mov	r1, r3
 800c920:	f7f3 fc52 	bl	80001c8 <strcmp>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10c      	bne.n	800c944 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800c92a:	4b3c      	ldr	r3, [pc, #240]	@ (800ca1c <get_tag_insert+0x164>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	f102 011a 	add.w	r1, r2, #26
 800c934:	22c0      	movs	r2, #192	@ 0xc0
 800c936:	6978      	ldr	r0, [r7, #20]
 800c938:	4798      	blx	r3
 800c93a:	4603      	mov	r3, r0
 800c93c:	461a      	mov	r2, r3
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800c942:	e060      	b.n	800ca06 <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	3301      	adds	r3, #1
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	4b36      	ldr	r3, [pc, #216]	@ (800ca24 <get_tag_insert+0x16c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	429a      	cmp	r2, r3
 800c952:	dbdb      	blt.n	800c90c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	3311      	adds	r3, #17
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f3 fc3f 	bl	80001dc <strlen>
 800c95e:	4603      	mov	r3, r0
 800c960:	2ba6      	cmp	r3, #166	@ 0xa6
 800c962:	d818      	bhi.n	800c996 <get_tag_insert+0xde>
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	3311      	adds	r3, #17
 800c968:	4618      	mov	r0, r3
 800c96a:	f7f3 fc37 	bl	80001dc <strlen>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b09      	cmp	r3, #9
 800c972:	d810      	bhi.n	800c996 <get_tag_insert+0xde>
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	3311      	adds	r3, #17
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f3 fc2f 	bl	80001dc <strlen>
 800c97e:	4603      	mov	r3, r0
 800c980:	2ba6      	cmp	r3, #166	@ 0xa6
 800c982:	d806      	bhi.n	800c992 <get_tag_insert+0xda>
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	3311      	adds	r3, #17
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f3 fc27 	bl	80001dc <strlen>
 800c98e:	4603      	mov	r3, r0
 800c990:	e002      	b.n	800c998 <get_tag_insert+0xe0>
 800c992:	23a7      	movs	r3, #167	@ 0xa7
 800c994:	e000      	b.n	800c998 <get_tag_insert+0xe0>
 800c996:	2309      	movs	r3, #9
 800c998:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	331a      	adds	r3, #26
 800c99e:	2212      	movs	r2, #18
 800c9a0:	4921      	ldr	r1, [pc, #132]	@ (800ca28 <get_tag_insert+0x170>)
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f015 ff4d 	bl	8022842 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	3311      	adds	r3, #17
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f015 ff44 	bl	8022842 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	3312      	adds	r3, #18
 800c9be:	3318      	adds	r3, #24
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3302      	adds	r3, #2
 800c9c6:	2207      	movs	r2, #7
 800c9c8:	4918      	ldr	r1, [pc, #96]	@ (800ca2c <get_tag_insert+0x174>)
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f015 ff39 	bl	8022842 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3319      	adds	r3, #25
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	2200      	movs	r2, #0
 800c9da:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	331a      	adds	r3, #26
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f3 fbfb 	bl	80001dc <strlen>
 800c9e6:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ee:	d306      	bcc.n	800c9fe <get_tag_insert+0x146>
 800c9f0:	4b06      	ldr	r3, [pc, #24]	@ (800ca0c <get_tag_insert+0x154>)
 800c9f2:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800c9f6:	490e      	ldr	r1, [pc, #56]	@ (800ca30 <get_tag_insert+0x178>)
 800c9f8:	4806      	ldr	r0, [pc, #24]	@ (800ca14 <get_tag_insert+0x15c>)
 800c9fa:	f015 fc27 	bl	802224c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	81da      	strh	r2, [r3, #14]
}
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	08025614 	.word	0x08025614
 800ca10:	08025684 	.word	0x08025684
 800ca14:	0802565c 	.word	0x0802565c
 800ca18:	08025690 	.word	0x08025690
 800ca1c:	20008534 	.word	0x20008534
 800ca20:	2000853c 	.word	0x2000853c
 800ca24:	20008538 	.word	0x20008538
 800ca28:	0802569c 	.word	0x0802569c
 800ca2c:	080256b0 	.word	0x080256b0
 800ca30:	080256b8 	.word	0x080256b8

0800ca34 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d105      	bne.n	800ca52 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff feca 	bl	800c7e2 <http_eof>
    return 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e016      	b.n	800ca80 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff fb99 	bl	800c18e <fs_bytes_left>
 800ca5c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	dc05      	bgt.n	800ca70 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff febb 	bl	800c7e2 <http_eof>
    return 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e007      	b.n	800ca80 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ca70:	4b05      	ldr	r3, [pc, #20]	@ (800ca88 <http_check_eof+0x54>)
 800ca72:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 800ca76:	4905      	ldr	r1, [pc, #20]	@ (800ca8c <http_check_eof+0x58>)
 800ca78:	4805      	ldr	r0, [pc, #20]	@ (800ca90 <http_check_eof+0x5c>)
 800ca7a:	f015 fbe7 	bl	802224c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ca7e:	2301      	movs	r3, #1
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	08025614 	.word	0x08025614
 800ca8c:	080256c8 	.word	0x080256c8
 800ca90:	0802565c 	.word	0x0802565c

0800ca94 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800caaa:	4293      	cmp	r3, r2
 800caac:	d803      	bhi.n	800cab6 <http_send_data_nonssi+0x22>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	e001      	b.n	800caba <http_send_data_nonssi+0x26>
 800cab6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800caba:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	6999      	ldr	r1, [r3, #24]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bf14      	ite	ne
 800cac8:	2301      	movne	r3, #1
 800caca:	2300      	moveq	r3, #0
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f107 020c 	add.w	r2, r7, #12
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff fdba 	bl	800c64c <http_write>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800cadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10d      	bne.n	800cb00 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800cae4:	2301      	movs	r3, #1
 800cae6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	89ba      	ldrh	r2, [r7, #12]
 800caee:	441a      	add	r2, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf8:	89ba      	ldrh	r2, [r7, #12]
 800cafa:	1a9a      	subs	r2, r3, r2
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb22:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <http_send_data_ssi+0x2c>
 800cb2a:	4b8e      	ldr	r3, [pc, #568]	@ (800cd64 <http_send_data_ssi+0x258>)
 800cb2c:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 800cb30:	498d      	ldr	r1, [pc, #564]	@ (800cd68 <http_send_data_ssi+0x25c>)
 800cb32:	488e      	ldr	r0, [pc, #568]	@ (800cd6c <http_send_data_ssi+0x260>)
 800cb34:	f015 fb8a 	bl	802224c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb3e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	f240 824d 	bls.w	800cfe8 <http_send_data_ssi+0x4dc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	dc06      	bgt.n	800cb6e <http_send_data_ssi+0x62>
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	e001      	b.n	800cb72 <http_send_data_ssi+0x66>
 800cb6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb72:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	6999      	ldr	r1, [r3, #24]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bf14      	ite	ne
 800cb80:	2301      	movne	r3, #1
 800cb82:	2300      	moveq	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f107 020e 	add.w	r2, r7, #14
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fd5e 	bl	800c64c <http_write>
 800cb90:	4603      	mov	r3, r0
 800cb92:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800cb94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10d      	bne.n	800cbb8 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	89fa      	ldrh	r2, [r7, #14]
 800cba6:	441a      	add	r2, r3
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb0:	89fa      	ldrh	r2, [r7, #14]
 800cbb2:	1a9a      	subs	r2, r3, r2
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f040 8212 	bne.w	800cfe8 <http_send_data_ssi+0x4dc>
      return data_to_send;
 800cbc4:	7dbb      	ldrb	r3, [r7, #22]
 800cbc6:	e25b      	b.n	800d080 <http_send_data_ssi+0x574>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800cbc8:	89fb      	ldrh	r3, [r7, #14]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <http_send_data_ssi+0xc6>
      return data_to_send;
 800cbce:	7dbb      	ldrb	r3, [r7, #22]
 800cbd0:	e256      	b.n	800d080 <http_send_data_ssi+0x574>
    }
    switch(ssi->tag_state) {
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	f200 8200 	bhi.w	800cfde <http_send_data_ssi+0x4d2>
 800cbde:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe4 <http_send_data_ssi+0xd8>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cbf9 	.word	0x0800cbf9
 800cbe8:	0800cc2b 	.word	0x0800cc2b
 800cbec:	0800cc83 	.word	0x0800cc83
 800cbf0:	0800cdbf 	.word	0x0800cdbf
 800cbf4:	0800cef9 	.word	0x0800cef9
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	781a      	ldrb	r2, [r3, #0]
 800cbfe:	4b5c      	ldr	r3, [pc, #368]	@ (800cd70 <http_send_data_ssi+0x264>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d106      	bne.n	800cc14 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->tag_index = 1;
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2201      	movs	r2, #1
 800cc12:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	1e5a      	subs	r2, r3, #1
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	601a      	str	r2, [r3, #0]
        break;
 800cc28:	e1de      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	899b      	ldrh	r3, [r3, #12]
 800cc2e:	2b05      	cmp	r3, #5
 800cc30:	d107      	bne.n	800cc42 <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2200      	movs	r2, #0
 800cc36:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800cc40:	e1d2      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	4949      	ldr	r1, [pc, #292]	@ (800cd70 <http_send_data_ssi+0x264>)
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	899b      	ldrh	r3, [r3, #12]
 800cc4e:	440b      	add	r3, r1
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d106      	bne.n	800cc64 <http_send_data_ssi+0x158>
            ssi->tag_index++;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	899b      	ldrh	r3, [r3, #12]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	819a      	strh	r2, [r3, #12]
 800cc62:	e003      	b.n	800cc6c <http_send_data_ssi+0x160>
            ssi->tag_state = TAG_NONE;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->parse_left--;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	1e5a      	subs	r2, r3, #1
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	601a      	str	r2, [r3, #0]
        break;
 800cc80:	e1b2      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	899b      	ldrh	r3, [r3, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d11e      	bne.n	800ccc8 <http_send_data_ssi+0x1bc>
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b20      	cmp	r3, #32
 800cc92:	d00e      	beq.n	800ccb2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	d009      	beq.n	800ccb2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b0a      	cmp	r3, #10
 800cca6:	d004      	beq.n	800ccb2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ccae:	2b0d      	cmp	r3, #13
 800ccb0:	d10a      	bne.n	800ccc8 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	1e5a      	subs	r2, r3, #1
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	601a      	str	r2, [r3, #0]
          break;
 800ccc6:	e18f      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	781a      	ldrb	r2, [r3, #0]
 800ccce:	4b29      	ldr	r3, [pc, #164]	@ (800cd74 <http_send_data_ssi+0x268>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d013      	beq.n	800ccfe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	d00e      	beq.n	800ccfe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b09      	cmp	r3, #9
 800cce8:	d009      	beq.n	800ccfe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ccf0:	2b0a      	cmp	r3, #10
 800ccf2:	d004      	beq.n	800ccfe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b0d      	cmp	r3, #13
 800ccfc:	d13e      	bne.n	800cd7c <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	899b      	ldrh	r3, [r3, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d104      	bne.n	800cd10 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          if(ssi->tag_index == 0) {
 800cd0e:	e04b      	b.n	800cda8 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2203      	movs	r2, #3
 800cd14:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	899b      	ldrh	r3, [r3, #12]
 800cd1c:	2bff      	cmp	r3, #255	@ 0xff
 800cd1e:	d906      	bls.n	800cd2e <http_send_data_ssi+0x222>
 800cd20:	4b10      	ldr	r3, [pc, #64]	@ (800cd64 <http_send_data_ssi+0x258>)
 800cd22:	f240 525d 	movw	r2, #1373	@ 0x55d
 800cd26:	4914      	ldr	r1, [pc, #80]	@ (800cd78 <http_send_data_ssi+0x26c>)
 800cd28:	4810      	ldr	r0, [pc, #64]	@ (800cd6c <http_send_data_ssi+0x260>)
 800cd2a:	f015 fa8f 	bl	802224c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	899b      	ldrh	r3, [r3, #12]
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	899b      	ldrh	r3, [r3, #12]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	4413      	add	r3, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	781a      	ldrb	r2, [r3, #0]
 800cd4c:	4b09      	ldr	r3, [pc, #36]	@ (800cd74 <http_send_data_ssi+0x268>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d103      	bne.n	800cd5c <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2201      	movs	r2, #1
 800cd58:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800cd5a:	e025      	b.n	800cda8 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800cd62:	e021      	b.n	800cda8 <http_send_data_ssi+0x29c>
 800cd64:	08025614 	.word	0x08025614
 800cd68:	08025690 	.word	0x08025690
 800cd6c:	0802565c 	.word	0x0802565c
 800cd70:	08025608 	.word	0x08025608
 800cd74:	08025610 	.word	0x08025610
 800cd78:	08025700 	.word	0x08025700
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	899b      	ldrh	r3, [r3, #12]
 800cd80:	2b07      	cmp	r3, #7
 800cd82:	d80d      	bhi.n	800cda0 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	1c59      	adds	r1, r3, #1
 800cd8e:	b288      	uxth	r0, r1
 800cd90:	6939      	ldr	r1, [r7, #16]
 800cd92:	8188      	strh	r0, [r1, #12]
 800cd94:	4619      	mov	r1, r3
 800cd96:	7812      	ldrb	r2, [r2, #0]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	440b      	add	r3, r1
 800cd9c:	745a      	strb	r2, [r3, #17]
 800cd9e:	e003      	b.n	800cda8 <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	1e5a      	subs	r2, r3, #1
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	601a      	str	r2, [r3, #0]

        break;
 800cdbc:	e114      	b.n	800cfe8 <http_send_data_ssi+0x4dc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	899b      	ldrh	r3, [r3, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11e      	bne.n	800ce04 <http_send_data_ssi+0x2f8>
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d00e      	beq.n	800cdee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800cdd6:	2b09      	cmp	r3, #9
 800cdd8:	d009      	beq.n	800cdee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b0a      	cmp	r3, #10
 800cde2:	d004      	beq.n	800cdee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800cdea:	2b0d      	cmp	r3, #13
 800cdec:	d10a      	bne.n	800ce04 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	601a      	str	r2, [r3, #0]
          break;
 800ce02:	e0f1      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	781a      	ldrb	r2, [r3, #0]
 800ce0a:	4989      	ldr	r1, [pc, #548]	@ (800d030 <http_send_data_ssi+0x524>)
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	899b      	ldrh	r3, [r3, #12]
 800ce10:	440b      	add	r3, r1
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d160      	bne.n	800ceda <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	1e5a      	subs	r2, r3, #1
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	899b      	ldrh	r3, [r3, #12]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d14b      	bne.n	800cecc <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800ce34:	6838      	ldr	r0, [r7, #0]
 800ce36:	f7ff fd3f 	bl	800c8b8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	2204      	movs	r2, #4
 800ce44:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            ssi->tag_end = ssi->parsed;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	f240 80c2 	bls.w	800cfe2 <http_send_data_ssi+0x4d6>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	dc06      	bgt.n	800ce7e <http_send_data_ssi+0x372>
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	e001      	b.n	800ce82 <http_send_data_ssi+0x376>
 800ce7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce82:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	6999      	ldr	r1, [r3, #24]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bf14      	ite	ne
 800ce90:	2301      	movne	r3, #1
 800ce92:	2300      	moveq	r3, #0
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	f107 020e 	add.w	r2, r7, #14
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff fbd6 	bl	800c64c <http_write>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800cea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 809a 	bne.w	800cfe2 <http_send_data_ssi+0x4d6>
                data_to_send = 1;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	89fa      	ldrh	r2, [r7, #14]
 800ceb8:	441a      	add	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec2:	89fa      	ldrh	r2, [r7, #14]
 800cec4:	1a9a      	subs	r2, r3, r2
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800ceca:	e08a      	b.n	800cfe2 <http_send_data_ssi+0x4d6>
            ssi->tag_index++;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	899b      	ldrh	r3, [r3, #12]
 800ced0:	3301      	adds	r3, #1
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	819a      	strh	r2, [r3, #12]
        break;
 800ced8:	e083      	b.n	800cfe2 <http_send_data_ssi+0x4d6>
          ssi->parse_left--;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	1e5a      	subs	r2, r3, #1
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        break;
 800cef6:	e074      	b.n	800cfe2 <http_send_data_ssi+0x4d6>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d93b      	bls.n	800cf7c <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cf12:	4293      	cmp	r3, r2
 800cf14:	dc06      	bgt.n	800cf24 <http_send_data_ssi+0x418>
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	e001      	b.n	800cf28 <http_send_data_ssi+0x41c>
 800cf24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf28:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800cf2a:	89fb      	ldrh	r3, [r7, #14]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d010      	beq.n	800cf52 <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	6999      	ldr	r1, [r3, #24]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	bf14      	ite	ne
 800cf3c:	2301      	movne	r3, #1
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	f107 020e 	add.w	r2, r7, #14
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff fb80 	bl	800c64c <http_write>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	75fb      	strb	r3, [r7, #23]
 800cf50:	e001      	b.n	800cf56 <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800cf56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d144      	bne.n	800cfe8 <http_send_data_ssi+0x4dc>
            data_to_send = 1;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	89fa      	ldrh	r2, [r7, #14]
 800cf68:	441a      	add	r2, r3
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf72:	89fa      	ldrh	r2, [r7, #14]
 800cf74:	1a9a      	subs	r2, r3, r2
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf7a:	e035      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	899a      	ldrh	r2, [r3, #12]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	89db      	ldrh	r3, [r3, #14]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d222      	bcs.n	800cfce <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	89da      	ldrh	r2, [r3, #14]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	899b      	ldrh	r3, [r3, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	899b      	ldrh	r3, [r3, #12]
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	1c99      	adds	r1, r3, #2
 800cfa2:	f107 020e 	add.w	r2, r7, #14
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fb4f 	bl	800c64c <http_write>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800cfb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d115      	bne.n	800cfe6 <http_send_data_ssi+0x4da>
              data_to_send = 1;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	899a      	ldrh	r2, [r3, #12]
 800cfc2:	89fb      	ldrh	r3, [r7, #14]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800cfcc:	e00b      	b.n	800cfe6 <http_send_data_ssi+0x4da>
              ssi->tag_index = 0;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          break;
 800cfdc:	e003      	b.n	800cfe6 <http_send_data_ssi+0x4da>
        default:
          break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
        break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <http_send_data_ssi+0x4dc>
          break;
 800cfe6:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <http_send_data_ssi+0x4ee>
 800cff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f43f ade7 	beq.w	800cbc8 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800d000:	2b04      	cmp	r3, #4
 800d002:	d03c      	beq.n	800d07e <http_send_data_ssi+0x572>
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d936      	bls.n	800d07e <http_send_data_ssi+0x572>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d01e:	4293      	cmp	r3, r2
 800d020:	dc08      	bgt.n	800d034 <http_send_data_ssi+0x528>
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	e003      	b.n	800d038 <http_send_data_ssi+0x52c>
 800d030:	08025610 	.word	0x08025610
 800d034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d038:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	6999      	ldr	r1, [r3, #24]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d042:	2b00      	cmp	r3, #0
 800d044:	bf14      	ite	ne
 800d046:	2301      	movne	r3, #1
 800d048:	2300      	moveq	r3, #0
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f107 020e 	add.w	r2, r7, #14
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff fafb 	bl	800c64c <http_write>
 800d056:	4603      	mov	r3, r0
 800d058:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10d      	bne.n	800d07e <http_send_data_ssi+0x572>
      data_to_send = 1;
 800d062:	2301      	movs	r3, #1
 800d064:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	89fa      	ldrh	r2, [r7, #14]
 800d06c:	441a      	add	r2, r3
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d076:	89fa      	ldrh	r2, [r7, #14]
 800d078:	1a9a      	subs	r2, r3, r2
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800d07e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <http_send+0x18>
    return 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	e030      	b.n	800d102 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d108      	bne.n	800d0ba <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7ff fcc2 	bl	800ca34 <http_check_eof>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <http_send+0x32>
      return 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e023      	b.n	800d102 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d006      	beq.n	800d0d0 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff fd21 	bl	800cb0c <http_send_data_ssi>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]
 800d0ce:	e005      	b.n	800d0dc <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff fcde 	bl	800ca94 <http_send_data_nonssi>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10d      	bne.n	800d100 <http_send+0x78>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff f850 	bl	800c18e <fs_bytes_left>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dc05      	bgt.n	800d100 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fb73 	bl	800c7e2 <http_eof>
    return 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e000      	b.n	800d102 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
	...

0800d10c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	4a1c      	ldr	r2, [pc, #112]	@ (800d18c <http_get_404_file+0x80>)
 800d11a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fe ffd7 	bl	800c0d8 <fs_open>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d12e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d024      	beq.n	800d180 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	4a15      	ldr	r2, [pc, #84]	@ (800d190 <http_get_404_file+0x84>)
 800d13a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fe ffc7 	bl	800c0d8 <fs_open>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d014      	beq.n	800d180 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	4a0e      	ldr	r2, [pc, #56]	@ (800d194 <http_get_404_file+0x88>)
 800d15a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe ffb7 	bl	800c0d8 <fs_open>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800d16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d004      	beq.n	800d180 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
        return NULL;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e000      	b.n	800d182 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800d180:	687b      	ldr	r3, [r7, #4]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	08025718 	.word	0x08025718
 800d190:	08025724 	.word	0x08025724
 800d194:	08025730 	.word	0x08025730

0800d198 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800d1a0:	4b08      	ldr	r3, [pc, #32]	@ (800d1c4 <http_handle_post_finished+0x2c>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800d1a6:	223f      	movs	r2, #63	@ 0x3f
 800d1a8:	4906      	ldr	r1, [pc, #24]	@ (800d1c4 <http_handle_post_finished+0x2c>)
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7f5 f9ae 	bl	800250c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4904      	ldr	r1, [pc, #16]	@ (800d1c4 <http_handle_post_finished+0x2c>)
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fa6b 	bl	800d690 <http_find_file>
 800d1ba:	4603      	mov	r3, r0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	200084f4 	.word	0x200084f4

0800d1c8 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d014      	beq.n	800d202 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	8912      	ldrh	r2, [r2, #8]
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d204      	bcs.n	800d1f0 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800d1ee:	e008      	b.n	800d202 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	8912      	ldrh	r2, [r2, #8]
 800d1fa:	1a9a      	subs	r2, r3, r2
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  err = httpd_post_receive_data(hs, p);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7f5 f93f 	bl	8002488 <httpd_post_receive_data>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800d20e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <http_post_rxpbuf+0x56>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  if (hs->post_content_len_left == 0) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d104      	bne.n	800d232 <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
       return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff ffb5 	bl	800d198 <http_handle_post_finished>
 800d22e:	4603      	mov	r3, r0
 800d230:	e000      	b.n	800d234 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b092      	sub	sp, #72	@ 0x48
 800d240:	af04      	add	r7, sp, #16
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800d24a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24c:	1c58      	adds	r0, r3, #1
 800d24e:	887a      	ldrh	r2, [r7, #2]
 800d250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d252:	1c59      	adds	r1, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	1acb      	subs	r3, r1, r3
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	461a      	mov	r2, r3
 800d25c:	4967      	ldr	r1, [pc, #412]	@ (800d3fc <http_post_request+0x1c0>)
 800d25e:	f007 fd56 	bl	8014d0e <lwip_strnstr>
 800d262:	62b8      	str	r0, [r7, #40]	@ 0x28

  if (crlfcrlf != NULL) {
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	f000 80c1 	beq.w	800d3ee <http_post_request+0x1b2>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800d26c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d26e:	1c58      	adds	r0, r3, #1
 800d270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d272:	3301      	adds	r3, #1
 800d274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	461a      	mov	r2, r3
 800d27a:	4961      	ldr	r1, [pc, #388]	@ (800d400 <http_post_request+0x1c4>)
 800d27c:	f007 fd47 	bl	8014d0e <lwip_strnstr>
 800d280:	6278      	str	r0, [r7, #36]	@ 0x24
    if (scontent_len != NULL) {
 800d282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 80af 	beq.w	800d3e8 <http_post_request+0x1ac>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28c:	3310      	adds	r3, #16
 800d28e:	220a      	movs	r2, #10
 800d290:	495c      	ldr	r1, [pc, #368]	@ (800d404 <http_post_request+0x1c8>)
 800d292:	4618      	mov	r0, r3
 800d294:	f007 fd3b 	bl	8014d0e <lwip_strnstr>
 800d298:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 80a3 	beq.w	800d3e8 <http_post_request+0x1ac>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a4:	3310      	adds	r3, #16
 800d2a6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800d2a8:	69f8      	ldr	r0, [r7, #28]
 800d2aa:	f014 f9e1 	bl	8021670 <atoi>
 800d2ae:	6378      	str	r0, [r7, #52]	@ 0x34
        if (content_len == 0) {
 800d2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b30      	cmp	r3, #48	@ 0x30
 800d2bc:	d104      	bne.n	800d2c8 <http_post_request+0x8c>
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b0d      	cmp	r3, #13
 800d2c6:	d002      	beq.n	800d2ce <http_post_request+0x92>
            content_len = -1;
 800d2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2cc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        if (content_len >= 0) {
 800d2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f2c0 8086 	blt.w	800d3e2 <http_post_request+0x1a6>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800d2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2d8:	3301      	adds	r3, #1
 800d2da:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800d2dc:	887a      	ldrh	r2, [r7, #2]
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	1d19      	adds	r1, r3, #4
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	1acb      	subs	r3, r1, r3
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	db05      	blt.n	800d2f6 <http_post_request+0xba>
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	1d1a      	adds	r2, r3, #4
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	e000      	b.n	800d2f8 <http_post_request+0xbc>
 800d2f6:	887b      	ldrh	r3, [r7, #2]
 800d2f8:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800d2fa:	887a      	ldrh	r2, [r7, #2]
 800d2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fe:	1d19      	adds	r1, r3, #4
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	1acb      	subs	r3, r1, r3
 800d304:	429a      	cmp	r2, r3
 800d306:	db05      	blt.n	800d314 <http_post_request+0xd8>
 800d308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30a:	1d1a      	adds	r2, r3, #4
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	b29b      	uxth	r3, r3
 800d312:	e000      	b.n	800d316 <http_post_request+0xda>
 800d314:	887b      	ldrh	r3, [r7, #2]
 800d316:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800d318:	2301      	movs	r3, #1
 800d31a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800d31c:	4b3a      	ldr	r3, [pc, #232]	@ (800d408 <http_post_request+0x1cc>)
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800d322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800d328:	8aba      	ldrh	r2, [r7, #20]
 800d32a:	f107 0312 	add.w	r3, r7, #18
 800d32e:	9303      	str	r3, [sp, #12]
 800d330:	233f      	movs	r3, #63	@ 0x3f
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	4b34      	ldr	r3, [pc, #208]	@ (800d408 <http_post_request+0x1cc>)
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	4613      	mov	r3, r2
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d342:	68b8      	ldr	r0, [r7, #8]
 800d344:	f7f5 f858 	bl	80023f8 <httpd_post_begin>
 800d348:	4603      	mov	r3, r0
 800d34a:	74fb      	strb	r3, [r7, #19]
            http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800d34c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d13f      	bne.n	800d3d4 <http_post_request+0x198>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	633b      	str	r3, [r7, #48]	@ 0x30
            u16_t start_offset = hdr_len;
 800d358:	8afb      	ldrh	r3, [r7, #22]
 800d35a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800d35c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* get to the pbuf where the body starts */
            while((q != NULL) && (q->len <= start_offset)) {
 800d364:	e007      	b.n	800d376 <http_post_request+0x13a>
              start_offset -= q->len;
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	895b      	ldrh	r3, [r3, #10]
 800d36a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
              q = q->next;
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	633b      	str	r3, [r7, #48]	@ 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <http_post_request+0x14a>
 800d37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37e:	895b      	ldrh	r3, [r3, #10]
 800d380:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d382:	429a      	cmp	r2, r3
 800d384:	d2ef      	bcs.n	800d366 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <http_post_request+0x172>
              /* hide the remaining HTTP header */
              pbuf_header(q, -(s16_t)start_offset);
 800d38c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d38e:	425b      	negs	r3, r3
 800d390:	b29b      	uxth	r3, r3
 800d392:	b21b      	sxth	r3, r3
 800d394:	4619      	mov	r1, r3
 800d396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d398:	f008 ff16 	bl	80161c8 <pbuf_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800d39c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d39e:	f008 ffe1 	bl	8016364 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800d3a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3a4:	68b8      	ldr	r0, [r7, #8]
 800d3a6:	f7ff ff0f 	bl	800d1c8 <http_post_rxpbuf>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	e021      	b.n	800d3f2 <http_post_request+0x1b6>
            } else if (hs->post_content_len_left == 0) {
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10b      	bne.n	800d3d0 <http_post_request+0x194>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	2004      	movs	r0, #4
 800d3be:	f008 fbaf 	bl	8015b20 <pbuf_alloc>
 800d3c2:	6338      	str	r0, [r7, #48]	@ 0x30
              return http_post_rxpbuf(hs, q);
 800d3c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3c6:	68b8      	ldr	r0, [r7, #8]
 800d3c8:	f7ff fefe 	bl	800d1c8 <http_post_rxpbuf>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	e010      	b.n	800d3f2 <http_post_request+0x1b6>
            } else {
              return ERR_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e00e      	b.n	800d3f2 <http_post_request+0x1b6>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	490c      	ldr	r1, [pc, #48]	@ (800d408 <http_post_request+0x1cc>)
 800d3d8:	68b8      	ldr	r0, [r7, #8]
 800d3da:	f000 f959 	bl	800d690 <http_find_file>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	e007      	b.n	800d3f2 <http_post_request+0x1b6>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
            content_len_num));
          return ERR_ARG;
 800d3e2:	f06f 030f 	mvn.w	r3, #15
 800d3e6:	e004      	b.n	800d3f2 <http_post_request+0x1b6>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800d3e8:	f06f 030f 	mvn.w	r3, #15
 800d3ec:	e001      	b.n	800d3f2 <http_post_request+0x1b6>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800d3ee:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3738      	adds	r7, #56	@ 0x38
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0802573c 	.word	0x0802573c
 800d400:	08025744 	.word	0x08025744
 800d404:	08025758 	.word	0x08025758
 800d408:	200084f4 	.word	0x200084f4

0800d40c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b092      	sub	sp, #72	@ 0x48
 800d410:	af02      	add	r7, sp, #8
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <http_parse_request+0x24>
 800d422:	4b91      	ldr	r3, [pc, #580]	@ (800d668 <http_parse_request+0x25c>)
 800d424:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800d428:	4990      	ldr	r1, [pc, #576]	@ (800d66c <http_parse_request+0x260>)
 800d42a:	4891      	ldr	r0, [pc, #580]	@ (800d670 <http_parse_request+0x264>)
 800d42c:	f014 ff0e 	bl	802224c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <http_parse_request+0x38>
 800d436:	4b8c      	ldr	r3, [pc, #560]	@ (800d668 <http_parse_request+0x25c>)
 800d438:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800d43c:	498d      	ldr	r1, [pc, #564]	@ (800d674 <http_parse_request+0x268>)
 800d43e:	488c      	ldr	r0, [pc, #560]	@ (800d670 <http_parse_request+0x264>)
 800d440:	f014 ff04 	bl	802224c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <http_parse_request+0x48>
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800d454:	f06f 0307 	mvn.w	r3, #7
 800d458:	e102      	b.n	800d660 <http_parse_request+0x254>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d466:	621a      	str	r2, [r3, #32]
 800d468:	e005      	b.n	800d476 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d470:	4618      	mov	r0, r3
 800d472:	f008 ff99 	bl	80163a8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800d476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d478:	f008 ff74 	bl	8016364 <pbuf_ref>

  if (hs->req->next != NULL) {
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	6a1b      	ldr	r3, [r3, #32]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d012      	beq.n	800d4ac <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	891b      	ldrh	r3, [r3, #8]
 800d48c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800d490:	4293      	cmp	r3, r2
 800d492:	bf28      	it	cs
 800d494:	4613      	movcs	r3, r2
 800d496:	877b      	strh	r3, [r7, #58]	@ 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	6a18      	ldr	r0, [r3, #32]
 800d49c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4975      	ldr	r1, [pc, #468]	@ (800d678 <http_parse_request+0x26c>)
 800d4a2:	f009 f8b3 	bl	801660c <pbuf_copy_partial>
    data = httpd_req_buf;
 800d4a6:	4b74      	ldr	r3, [pc, #464]	@ (800d678 <http_parse_request+0x26c>)
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4aa:	e005      	b.n	800d4b8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    data_len = p->len;
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b4:	895b      	ldrh	r3, [r3, #10]
 800d4b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800d4b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4ba:	2b06      	cmp	r3, #6
 800d4bc:	f240 80b6 	bls.w	800d62c <http_parse_request+0x220>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800d4c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	496d      	ldr	r1, [pc, #436]	@ (800d67c <http_parse_request+0x270>)
 800d4c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4c8:	f007 fc21 	bl	8014d0e <lwip_strnstr>
 800d4cc:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 80ab 	beq.w	800d62c <http_parse_request+0x220>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	633b      	str	r3, [r7, #48]	@ 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800d4de:	2204      	movs	r2, #4
 800d4e0:	4967      	ldr	r1, [pc, #412]	@ (800d680 <http_parse_request+0x274>)
 800d4e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4e4:	f015 f8be 	bl	8022664 <strncmp>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d103      	bne.n	800d4f6 <http_parse_request+0xea>
        sp1 = data + 3;
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f0:	3303      	adds	r3, #3
 800d4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f4:	e014      	b.n	800d520 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800d4f6:	2205      	movs	r2, #5
 800d4f8:	4962      	ldr	r1, [pc, #392]	@ (800d684 <http_parse_request+0x278>)
 800d4fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d4fc:	f015 f8b2 	bl	8022664 <strncmp>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d105      	bne.n	800d512 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800d506:	2301      	movs	r3, #1
 800d508:	637b      	str	r3, [r7, #52]	@ 0x34
        sp1 = data + 4;
 800d50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d50c:	3304      	adds	r3, #4
 800d50e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d510:	e006      	b.n	800d520 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800d512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d514:	3304      	adds	r3, #4
 800d516:	2200      	movs	r2, #0
 800d518:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
 800d51a:	f06f 030f 	mvn.w	r3, #15
 800d51e:	e09f      	b.n	800d660 <http_parse_request+0x254>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	b29b      	uxth	r3, r3
 800d52a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800d530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d532:	3301      	adds	r3, #1
 800d534:	8bfa      	ldrh	r2, [r7, #30]
 800d536:	4954      	ldr	r1, [pc, #336]	@ (800d688 <http_parse_request+0x27c>)
 800d538:	4618      	mov	r0, r3
 800d53a:	f007 fbe8 	bl	8014d0e <lwip_strnstr>
 800d53e:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800d540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10c      	bne.n	800d560 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	3301      	adds	r3, #1
 800d54a:	8bfa      	ldrh	r2, [r7, #30]
 800d54c:	494b      	ldr	r1, [pc, #300]	@ (800d67c <http_parse_request+0x270>)
 800d54e:	4618      	mov	r0, r3
 800d550:	f007 fbdd 	bl	8014d0e <lwip_strnstr>
 800d554:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800d556:	2301      	movs	r3, #1
 800d558:	633b      	str	r3, [r7, #48]	@ 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800d55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d178      	bne.n	800d652 <http_parse_request+0x246>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d562:	3301      	adds	r3, #1
 800d564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800d56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d05d      	beq.n	800d62c <http_parse_request+0x220>
 800d570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d574:	429a      	cmp	r2, r3
 800d576:	d959      	bls.n	800d62c <http_parse_request+0x220>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800d578:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d57a:	461a      	mov	r2, r3
 800d57c:	4943      	ldr	r1, [pc, #268]	@ (800d68c <http_parse_request+0x280>)
 800d57e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d580:	f007 fbc5 	bl	8014d0e <lwip_strnstr>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d050      	beq.n	800d62c <http_parse_request+0x220>
          char *uri = sp1 + 1;
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	3301      	adds	r3, #1
 800d58e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800d596:	8bbb      	ldrh	r3, [r7, #28]
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	4413      	add	r3, r2
 800d59c:	2200      	movs	r2, #0
 800d59e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                      data, uri));
          /* Track request (IP + Cookie) for per-session auth */
          extern void Auth_SetCurrentRemoteIp(const ip_addr_t* ip);
          extern void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len);
          Auth_SetCurrentRemoteIp(&pcb->remote_ip);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7f3 ffcf 	bl	8001548 <Auth_SetCurrentRemoteIp>
          /* Headers are in 'data' up to CRLFCRLF */
          Auth_BeginRequestWithCookieHeader(data, (u16_t)(lwip_strnstr(data, CRLF CRLF, data_len) - data + 4));
 800d5aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4937      	ldr	r1, [pc, #220]	@ (800d68c <http_parse_request+0x280>)
 800d5b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d5b2:	f007 fbac 	bl	8014d0e <lwip_strnstr>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	3304      	adds	r3, #4
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d5c6:	f7f3 ffdb 	bl	8001580 <Auth_BeginRequestWithCookieHeader>
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d026      	beq.n	800d61e <http_parse_request+0x212>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800d5d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	f7ff fe28 	bl	800d23c <http_post_request>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800d5f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00a      	beq.n	800d60e <http_parse_request+0x202>
              /* restore header for next try */
              *sp1 = ' ';
 800d5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fa:	2220      	movs	r2, #32
 800d5fc:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800d5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d600:	2220      	movs	r2, #32
 800d602:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800d604:	8bbb      	ldrh	r3, [r7, #28]
 800d606:	69ba      	ldr	r2, [r7, #24]
 800d608:	4413      	add	r3, r2
 800d60a:	2220      	movs	r2, #32
 800d60c:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800d60e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d612:	f113 0f10 	cmn.w	r3, #16
 800d616:	d01e      	beq.n	800d656 <http_parse_request+0x24a>
              goto badrequest;
            }
            return err;
 800d618:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d61c:	e020      	b.n	800d660 <http_parse_request+0x254>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800d61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d620:	69b9      	ldr	r1, [r7, #24]
 800d622:	68b8      	ldr	r0, [r7, #8]
 800d624:	f000 f834 	bl	800d690 <http_find_file>
 800d628:	4603      	mov	r3, r0
 800d62a:	e019      	b.n	800d660 <http_parse_request+0x254>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	4618      	mov	r0, r3
 800d632:	f008 fe81 	bl	8016338 <pbuf_clen>
 800d636:	4603      	mov	r3, r0
 800d638:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	891b      	ldrh	r3, [r3, #8]
 800d640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d644:	d209      	bcs.n	800d65a <http_parse_request+0x24e>
 800d646:	8a3b      	ldrh	r3, [r7, #16]
 800d648:	2b05      	cmp	r3, #5
 800d64a:	d806      	bhi.n	800d65a <http_parse_request+0x24e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800d64c:	f06f 0304 	mvn.w	r3, #4
 800d650:	e006      	b.n	800d660 <http_parse_request+0x254>
          goto badrequest;
 800d652:	bf00      	nop
 800d654:	e002      	b.n	800d65c <http_parse_request+0x250>
              goto badrequest;
 800d656:	bf00      	nop
 800d658:	e000      	b.n	800d65c <http_parse_request+0x250>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800d65a:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800d65c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800d660:	4618      	mov	r0, r3
 800d662:	3740      	adds	r7, #64	@ 0x40
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	08025614 	.word	0x08025614
 800d66c:	0802575c 	.word	0x0802575c
 800d670:	0802565c 	.word	0x0802565c
 800d674:	08025684 	.word	0x08025684
 800d678:	200080f4 	.word	0x200080f4
 800d67c:	08025758 	.word	0x08025758
 800d680:	08025768 	.word	0x08025768
 800d684:	08025770 	.word	0x08025770
 800d688:	08025778 	.word	0x08025778
 800d68c:	0802573c 	.word	0x0802573c

0800d690 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b097      	sub	sp, #92	@ 0x5c
 800d694:	af02      	add	r7, sp, #8
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800d69c:	2300      	movs	r3, #0
 800d69e:	64bb      	str	r3, [r7, #72]	@ 0x48
  char *params = NULL;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f2 fd95 	bl	80001dc <strlen>
 800d6b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d06c      	beq.n	800d794 <http_find_file+0x104>
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	4413      	add	r3, r2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6c6:	d165      	bne.n	800d794 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d6c8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d6ca:	4a97      	ldr	r2, [pc, #604]	@ (800d928 <http_find_file+0x298>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d102      	bne.n	800d6d6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d15e      	bne.n	800d794 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800d6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	2b3f      	cmp	r3, #63	@ 0x3f
 800d6dc:	bf28      	it	cs
 800d6de:	233f      	movcs	r3, #63	@ 0x3f
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (copy_len > 0) {
 800d6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00a      	beq.n	800d6fe <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	488e      	ldr	r0, [pc, #568]	@ (800d928 <http_find_file+0x298>)
 800d6f0:	f015 f8a7 	bl	8022842 <memcpy>
      http_uri_buf[copy_len] = 0;
 800d6f4:	4a8c      	ldr	r2, [pc, #560]	@ (800d928 <http_find_file+0x298>)
 800d6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f8:	4413      	add	r3, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d6fe:	2300      	movs	r3, #0
 800d700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d702:	e044      	b.n	800d78e <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800d704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d706:	2b00      	cmp	r3, #0
 800d708:	d022      	beq.n	800d750 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800d70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24
        if (len_left > 0) {
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	2b00      	cmp	r3, #0
 800d716:	d018      	beq.n	800d74a <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800d718:	4a84      	ldr	r2, [pc, #528]	@ (800d92c <http_find_file+0x29c>)
 800d71a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d71c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d720:	4618      	mov	r0, r3
 800d722:	f7f2 fd5b 	bl	80001dc <strlen>
 800d726:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800d728:	6a3a      	ldr	r2, [r7, #32]
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72c:	4293      	cmp	r3, r2
 800d72e:	bf28      	it	cs
 800d730:	4613      	movcs	r3, r2
 800d732:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800d734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d736:	4a7c      	ldr	r2, [pc, #496]	@ (800d928 <http_find_file+0x298>)
 800d738:	1898      	adds	r0, r3, r2
 800d73a:	4a7c      	ldr	r2, [pc, #496]	@ (800d92c <http_find_file+0x29c>)
 800d73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d73e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d742:	69fa      	ldr	r2, [r7, #28]
 800d744:	4619      	mov	r1, r3
 800d746:	f015 f87c 	bl	8022842 <memcpy>
        }
        file_name = http_uri_buf;
 800d74a:	4b77      	ldr	r3, [pc, #476]	@ (800d928 <http_find_file+0x298>)
 800d74c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d74e:	e004      	b.n	800d75a <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800d750:	4a76      	ldr	r2, [pc, #472]	@ (800d92c <http_find_file+0x29c>)
 800d752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d758:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fcba 	bl	800c0d8 <fs_open>
 800d764:	4603      	mov	r3, r0
 800d766:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800d768:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10b      	bne.n	800d788 <http_find_file+0xf8>
        uri = file_name;
 800d770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d772:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	64bb      	str	r3, [r7, #72]	@ 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800d778:	4a6c      	ldr	r2, [pc, #432]	@ (800d92c <http_find_file+0x29c>)
 800d77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	4413      	add	r3, r2
 800d780:	791b      	ldrb	r3, [r3, #4]
 800d782:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800d786:	e005      	b.n	800d794 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d78a:	3301      	adds	r3, #1
 800d78c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d78e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d790:	2b04      	cmp	r3, #4
 800d792:	d9b7      	bls.n	800d704 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800d794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d796:	2b00      	cmp	r3, #0
 800d798:	f040 80ab 	bne.w	800d8f2 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	213f      	movs	r1, #63	@ 0x3f
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f014 ff31 	bl	8022608 <strchr>
 800d7a6:	6478      	str	r0, [r7, #68]	@ 0x44
    if (params != NULL) {
 800d7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800d7ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	701a      	strb	r2, [r3, #0]
      params++;
 800d7b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	647b      	str	r3, [r7, #68]	@ 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800d7ba:	4b5d      	ldr	r3, [pc, #372]	@ (800d930 <http_find_file+0x2a0>)
 800d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c0:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800d7c2:	4b5c      	ldr	r3, [pc, #368]	@ (800d934 <http_find_file+0x2a4>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d034      	beq.n	800d834 <http_find_file+0x1a4>
 800d7ca:	4b5b      	ldr	r3, [pc, #364]	@ (800d938 <http_find_file+0x2a8>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d030      	beq.n	800d834 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7d6:	e028      	b.n	800d82a <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800d7d8:	68b8      	ldr	r0, [r7, #8]
 800d7da:	4b57      	ldr	r3, [pc, #348]	@ (800d938 <http_find_file+0x2a8>)
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	4413      	add	r3, r2
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	f7f2 fcee 	bl	80001c8 <strcmp>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d118      	bne.n	800d824 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800d7f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff f801 	bl	800c7fc <extract_uri_parameters>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	4a4c      	ldr	r2, [pc, #304]	@ (800d930 <http_find_file+0x2a0>)
 800d7fe:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d800:	4b4d      	ldr	r3, [pc, #308]	@ (800d938 <http_find_file+0x2a8>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	4413      	add	r3, r2
 800d80a:	685c      	ldr	r4, [r3, #4]
 800d80c:	4b48      	ldr	r3, [pc, #288]	@ (800d930 <http_find_file+0x2a0>)
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                          hs->param_vals);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3370      	adds	r3, #112	@ 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d81a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d81c:	47a0      	blx	r4
 800d81e:	4603      	mov	r3, r0
 800d820:	60bb      	str	r3, [r7, #8]
           break;
 800d822:	e007      	b.n	800d834 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d826:	3301      	adds	r3, #1
 800d828:	643b      	str	r3, [r7, #64]	@ 0x40
 800d82a:	4b42      	ldr	r3, [pc, #264]	@ (800d934 <http_find_file+0x2a4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d830:	429a      	cmp	r2, r3
 800d832:	dbd1      	blt.n	800d7d8 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fe fc4c 	bl	800c0d8 <fs_open>
 800d840:	4603      	mov	r3, r0
 800d842:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800d844:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d850:	e006      	b.n	800d860 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	4619      	mov	r1, r3
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f7ff fc57 	bl	800d10c <http_get_404_file>
 800d85e:	64b8      	str	r0, [r7, #72]	@ 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800d860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d862:	2b00      	cmp	r3, #0
 800d864:	d045      	beq.n	800d8f2 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800d866:	2300      	movs	r3, #0
 800d868:	637b      	str	r3, [r7, #52]	@ 0x34
      char* param = (char*)strstr(uri, "?");
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	213f      	movs	r1, #63	@ 0x3f
 800d86e:	4618      	mov	r0, r3
 800d870:	f014 feca 	bl	8022608 <strchr>
 800d874:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2200      	movs	r2, #0
 800d880:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	633b      	str	r3, [r7, #48]	@ 0x30
      ext = uri;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	637b      	str	r3, [r7, #52]	@ 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d88a:	212e      	movs	r1, #46	@ 0x2e
 800d88c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d88e:	f014 febb 	bl	8022608 <strchr>
 800d892:	6338      	str	r0, [r7, #48]	@ 0x30
 800d894:	e009      	b.n	800d8aa <http_find_file+0x21a>
      {
         ext = sub;
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	637b      	str	r3, [r7, #52]	@ 0x34
         sub++;
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	3301      	adds	r3, #1
 800d89e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d8a0:	212e      	movs	r1, #46	@ 0x2e
 800d8a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8a4:	f014 feb0 	bl	8022608 <strchr>
 800d8a8:	6338      	str	r0, [r7, #48]	@ 0x30
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1f2      	bne.n	800d896 <http_find_file+0x206>
      }
      tag_check = 0;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8ba:	e011      	b.n	800d8e0 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800d8bc:	4a1f      	ldr	r2, [pc, #124]	@ (800d93c <http_find_file+0x2ac>)
 800d8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d8c8:	f007 fa57 	bl	8014d7a <lwip_stricmp>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d103      	bne.n	800d8da <http_find_file+0x24a>
          tag_check = 1;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          break;
 800d8d8:	e005      	b.n	800d8e6 <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d8da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8dc:	3301      	adds	r3, #1
 800d8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d9ea      	bls.n	800d8bc <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <http_find_file+0x262>
         *param = '?';
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	223f      	movs	r2, #63	@ 0x3f
 800d8f0:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800d8f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d106      	bne.n	800d906 <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800d8f8:	f107 0308 	add.w	r3, r7, #8
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff fc04 	bl	800d10c <http_get_404_file>
 800d904:	64b8      	str	r0, [r7, #72]	@ 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	4613      	mov	r3, r2
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f000 f811 	bl	800d940 <http_init_file>
 800d91e:	4603      	mov	r3, r0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3754      	adds	r7, #84	@ 0x54
 800d924:	46bd      	mov	sp, r7
 800d926:	bd90      	pop	{r4, r7, pc}
 800d928:	200084f4 	.word	0x200084f4
 800d92c:	08031e9c 	.word	0x08031e9c
 800d930:	20008548 	.word	0x20008548
 800d934:	20008544 	.word	0x20008544
 800d938:	20008540 	.word	0x20008540
 800d93c:	08031e8c 	.word	0x08031e8c

0800d940 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b088      	sub	sp, #32
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d07e      	beq.n	800da52 <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800d954:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01c      	beq.n	800d996 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800d95c:	f7fe fdf8 	bl	800c550 <http_ssi_state_alloc>
 800d960:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d016      	beq.n	800d996 <http_init_file+0x56>
        ssi->tag_index = 0;
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	2200      	movs	r2, #0
 800d96c:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        ssi->parsed = file->data;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	461a      	mov	r2, r3
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	69fa      	ldr	r2, [r7, #28]
 800d994:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	da06      	bge.n	800d9ba <http_init_file+0x7a>
 800d9ac:	4b32      	ldr	r3, [pc, #200]	@ (800da78 <http_init_file+0x138>)
 800d9ae:	f640 1217 	movw	r2, #2327	@ 0x917
 800d9b2:	4932      	ldr	r1, [pc, #200]	@ (800da7c <http_init_file+0x13c>)
 800d9b4:	4832      	ldr	r0, [pc, #200]	@ (800da80 <http_init_file+0x140>)
 800d9b6:	f014 fc49 	bl	802224c <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	7c5b      	ldrb	r3, [r3, #17]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d007      	beq.n	800d9d2 <http_init_file+0x92>
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <http_init_file+0x92>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9d0:	e004      	b.n	800d9dc <http_init_file+0x9c>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <http_init_file+0xc0>
 800d9f2:	4b21      	ldr	r3, [pc, #132]	@ (800da78 <http_init_file+0x138>)
 800d9f4:	f640 1226 	movw	r2, #2342	@ 0x926
 800d9f8:	4922      	ldr	r1, [pc, #136]	@ (800da84 <http_init_file+0x144>)
 800d9fa:	4821      	ldr	r0, [pc, #132]	@ (800da80 <http_init_file+0x140>)
 800d9fc:	f014 fc26 	bl	802224c <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d032      	beq.n	800da6c <http_init_file+0x12c>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	695b      	ldr	r3, [r3, #20]
 800da0a:	7c1b      	ldrb	r3, [r3, #16]
 800da0c:	f003 0301 	and.w	r3, r3, #1
 800da10:	2b00      	cmp	r3, #0
 800da12:	d02b      	beq.n	800da6c <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6998      	ldr	r0, [r3, #24]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1c:	461a      	mov	r2, r3
 800da1e:	491a      	ldr	r1, [pc, #104]	@ (800da88 <http_init_file+0x148>)
 800da20:	f007 f975 	bl	8014d0e <lwip_strnstr>
 800da24:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d01f      	beq.n	800da6c <http_init_file+0x12c>
        size_t diff = file_start + 4 - hs->file;
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	1d1a      	adds	r2, r3, #4
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	699a      	ldr	r2, [r3, #24]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	441a      	add	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	1ad2      	subs	r2, r2, r3
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	625a      	str	r2, [r3, #36]	@ 0x24
 800da50:	e00c      	b.n	800da6c <http_init_file+0x12c>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	08025614 	.word	0x08025614
 800da7c:	0802577c 	.word	0x0802577c
 800da80:	0802565c 	.word	0x0802565c
 800da84:	0802579c 	.word	0x0802579c
 800da88:	0802573c 	.word	0x0802573c

0800da8c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <http_err+0x1c>
    http_state_free(hs);
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7fe fdc1 	bl	800c62a <http_state_free>
  }
}
 800daa8:	bf00      	nop
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	4613      	mov	r3, r2
 800dabc:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <http_sent+0x1c>
    return ERR_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	e008      	b.n	800dade <http_sent+0x2e>
  }

  hs->retries = 0;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800dad4:	6979      	ldr	r1, [r7, #20]
 800dad6:	68b8      	ldr	r0, [r7, #8]
 800dad8:	f7ff fad6 	bl	800d088 <http_send>

  return ERR_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d107      	bne.n	800db0a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800dafa:	2100      	movs	r1, #0
 800dafc:	6838      	ldr	r0, [r7, #0]
 800dafe:	f7fe fe61 	bl	800c7c4 <http_close_conn>
 800db02:	4603      	mov	r3, r0
 800db04:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	e024      	b.n	800db54 <http_poll+0x6e>
  } else {
    hs->retries++;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db10:	3301      	adds	r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db20:	2b04      	cmp	r3, #4
 800db22:	d105      	bne.n	800db30 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800db24:	68f9      	ldr	r1, [r7, #12]
 800db26:	6838      	ldr	r0, [r7, #0]
 800db28:	f7fe fe4c 	bl	800c7c4 <http_close_conn>
      return ERR_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e011      	b.n	800db54 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00d      	beq.n	800db52 <http_poll+0x6c>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d009      	beq.n	800db52 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800db3e:	68f9      	ldr	r1, [r7, #12]
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f7ff faa1 	bl	800d088 <http_send>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800db4c:	6838      	ldr	r0, [r7, #0]
 800db4e:	f00d fd09 	bl	801b564 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800db6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d105      	bne.n	800db82 <http_recv+0x26>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d002      	beq.n	800db82 <http_recv+0x26>
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d111      	bne.n	800dba6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d008      	beq.n	800db9a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	891b      	ldrh	r3, [r3, #8]
 800db8c:	4619      	mov	r1, r3
 800db8e:	68b8      	ldr	r0, [r7, #8]
 800db90:	f009 fb2e 	bl	80171f0 <tcp_recved>
      pbuf_free(p);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f008 fb3b 	bl	8016210 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800db9a:	6979      	ldr	r1, [r7, #20]
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f7fe fe11 	bl	800c7c4 <http_close_conn>
    return ERR_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	e072      	b.n	800dc8c <http_recv+0x130>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	891b      	ldrh	r3, [r3, #8]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	68b8      	ldr	r0, [r7, #8]
 800dbae:	f009 fb1f 	bl	80171f0 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d012      	beq.n	800dbe2 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800dbc4:	6879      	ldr	r1, [r7, #4]
 800dbc6:	6978      	ldr	r0, [r7, #20]
 800dbc8:	f7ff fafe 	bl	800d1c8 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800dbd6:	6979      	ldr	r1, [r7, #20]
 800dbd8:	68b8      	ldr	r0, [r7, #8]
 800dbda:	f7ff fa55 	bl	800d088 <http_send>
    }
    return ERR_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	e054      	b.n	800dc8c <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	695b      	ldr	r3, [r3, #20]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d14c      	bne.n	800dc84 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	6979      	ldr	r1, [r7, #20]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff fc0c 	bl	800d40c <http_parse_request>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800dbf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d015      	beq.n	800dc2c <http_recv+0xd0>
 800dc00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc04:	f113 0f05 	cmn.w	r3, #5
 800dc08:	d010      	beq.n	800dc2c <http_recv+0xd0>
 800dc0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc0e:	f113 0f10 	cmn.w	r3, #16
 800dc12:	d00b      	beq.n	800dc2c <http_recv+0xd0>
 800dc14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc18:	f113 0f08 	cmn.w	r3, #8
 800dc1c:	d006      	beq.n	800dc2c <http_recv+0xd0>
 800dc1e:	4b1d      	ldr	r3, [pc, #116]	@ (800dc94 <http_recv+0x138>)
 800dc20:	f640 12fc 	movw	r2, #2556	@ 0x9fc
 800dc24:	491c      	ldr	r1, [pc, #112]	@ (800dc98 <http_recv+0x13c>)
 800dc26:	481d      	ldr	r0, [pc, #116]	@ (800dc9c <http_recv+0x140>)
 800dc28:	f014 fb10 	bl	802224c <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800dc2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc30:	f113 0f05 	cmn.w	r3, #5
 800dc34:	d00b      	beq.n	800dc4e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d007      	beq.n	800dc4e <http_recv+0xf2>
          pbuf_free(hs->req);
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f008 fae4 	bl	8016210 <pbuf_free>
          hs->req = NULL;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f008 fade 	bl	8016210 <pbuf_free>
      if (parsed == ERR_OK) {
 800dc54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d109      	bne.n	800dc70 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d111      	bne.n	800dc8a <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800dc66:	6979      	ldr	r1, [r7, #20]
 800dc68:	68b8      	ldr	r0, [r7, #8]
 800dc6a:	f7ff fa0d 	bl	800d088 <http_send>
 800dc6e:	e00c      	b.n	800dc8a <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800dc70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc74:	f113 0f10 	cmn.w	r3, #16
 800dc78:	d107      	bne.n	800dc8a <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800dc7a:	6979      	ldr	r1, [r7, #20]
 800dc7c:	68b8      	ldr	r0, [r7, #8]
 800dc7e:	f7fe fda1 	bl	800c7c4 <http_close_conn>
 800dc82:	e002      	b.n	800dc8a <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f008 fac3 	bl	8016210 <pbuf_free>
    }
  }
  return ERR_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	08025614 	.word	0x08025614
 800dc98:	080257c8 	.word	0x080257c8
 800dc9c:	0802565c 	.word	0x0802565c

0800dca0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800dcae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <http_accept+0x1c>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <http_accept+0x22>
    return ERR_VAL;
 800dcbc:	f06f 0305 	mvn.w	r3, #5
 800dcc0:	e025      	b.n	800dd0e <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f009 feef 	bl	8017aa8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800dcca:	f7fe fc70 	bl	800c5ae <http_state_alloc>
 800dcce:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcda:	e018      	b.n	800dd0e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800dce2:	6979      	ldr	r1, [r7, #20]
 800dce4:	68b8      	ldr	r0, [r7, #8]
 800dce6:	f00a f8a1 	bl	8017e2c <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800dcea:	490b      	ldr	r1, [pc, #44]	@ (800dd18 <http_accept+0x78>)
 800dcec:	68b8      	ldr	r0, [r7, #8]
 800dcee:	f00a f8ad 	bl	8017e4c <tcp_recv>
  tcp_err(pcb, http_err);
 800dcf2:	490a      	ldr	r1, [pc, #40]	@ (800dd1c <http_accept+0x7c>)
 800dcf4:	68b8      	ldr	r0, [r7, #8]
 800dcf6:	f00a f8eb 	bl	8017ed0 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800dcfa:	2204      	movs	r2, #4
 800dcfc:	4908      	ldr	r1, [pc, #32]	@ (800dd20 <http_accept+0x80>)
 800dcfe:	68b8      	ldr	r0, [r7, #8]
 800dd00:	f00a f91e 	bl	8017f40 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800dd04:	4907      	ldr	r1, [pc, #28]	@ (800dd24 <http_accept+0x84>)
 800dd06:	68b8      	ldr	r0, [r7, #8]
 800dd08:	f00a f8c2 	bl	8017e90 <tcp_sent>

  return ERR_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	0800db5d 	.word	0x0800db5d
 800dd1c:	0800da8d 	.word	0x0800da8d
 800dd20:	0800dae7 	.word	0x0800dae7
 800dd24:	0800dab1 	.word	0x0800dab1

0800dd28 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800dd2e:	202e      	movs	r0, #46	@ 0x2e
 800dd30:	f00a f86e 	bl	8017e10 <tcp_new_ip_type>
 800dd34:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d106      	bne.n	800dd4a <httpd_init+0x22>
 800dd3c:	4b19      	ldr	r3, [pc, #100]	@ (800dda4 <httpd_init+0x7c>)
 800dd3e:	f640 2258 	movw	r2, #2648	@ 0xa58
 800dd42:	4919      	ldr	r1, [pc, #100]	@ (800dda8 <httpd_init+0x80>)
 800dd44:	4819      	ldr	r0, [pc, #100]	@ (800ddac <httpd_init+0x84>)
 800dd46:	f014 fa81 	bl	802224c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f009 feab 	bl	8017aa8 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800dd52:	2250      	movs	r2, #80	@ 0x50
 800dd54:	4916      	ldr	r1, [pc, #88]	@ (800ddb0 <httpd_init+0x88>)
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f009 f8b0 	bl	8016ebc <tcp_bind>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800dd60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d006      	beq.n	800dd76 <httpd_init+0x4e>
 800dd68:	4b0e      	ldr	r3, [pc, #56]	@ (800dda4 <httpd_init+0x7c>)
 800dd6a:	f640 225d 	movw	r2, #2653	@ 0xa5d
 800dd6e:	4911      	ldr	r1, [pc, #68]	@ (800ddb4 <httpd_init+0x8c>)
 800dd70:	480e      	ldr	r0, [pc, #56]	@ (800ddac <httpd_init+0x84>)
 800dd72:	f014 fa6b 	bl	802224c <iprintf>
  pcb = tcp_listen(pcb);
 800dd76:	21ff      	movs	r1, #255	@ 0xff
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f009 f941 	bl	8017000 <tcp_listen_with_backlog>
 800dd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <httpd_init+0x6c>
 800dd86:	4b07      	ldr	r3, [pc, #28]	@ (800dda4 <httpd_init+0x7c>)
 800dd88:	f640 225f 	movw	r2, #2655	@ 0xa5f
 800dd8c:	490a      	ldr	r1, [pc, #40]	@ (800ddb8 <httpd_init+0x90>)
 800dd8e:	4807      	ldr	r0, [pc, #28]	@ (800ddac <httpd_init+0x84>)
 800dd90:	f014 fa5c 	bl	802224c <iprintf>
  tcp_accept(pcb, http_accept);
 800dd94:	4909      	ldr	r1, [pc, #36]	@ (800ddbc <httpd_init+0x94>)
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f00a f8bc 	bl	8017f14 <tcp_accept>
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	08025614 	.word	0x08025614
 800dda8:	080257f4 	.word	0x080257f4
 800ddac:	0802565c 	.word	0x0802565c
 800ddb0:	08032ed0 	.word	0x08032ed0
 800ddb4:	08025810 	.word	0x08025810
 800ddb8:	0802582c 	.word	0x0802582c
 800ddbc:	0800dca1 	.word	0x0800dca1

0800ddc0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <http_set_ssi_handler+0x20>
 800ddd2:	4b14      	ldr	r3, [pc, #80]	@ (800de24 <http_set_ssi_handler+0x64>)
 800ddd4:	f44f 6227 	mov.w	r2, #2672	@ 0xa70
 800ddd8:	4913      	ldr	r1, [pc, #76]	@ (800de28 <http_set_ssi_handler+0x68>)
 800ddda:	4814      	ldr	r0, [pc, #80]	@ (800de2c <http_set_ssi_handler+0x6c>)
 800dddc:	f014 fa36 	bl	802224c <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800dde0:	4a13      	ldr	r2, [pc, #76]	@ (800de30 <http_set_ssi_handler+0x70>)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d106      	bne.n	800ddfa <http_set_ssi_handler+0x3a>
 800ddec:	4b0d      	ldr	r3, [pc, #52]	@ (800de24 <http_set_ssi_handler+0x64>)
 800ddee:	f640 2277 	movw	r2, #2679	@ 0xa77
 800ddf2:	4910      	ldr	r1, [pc, #64]	@ (800de34 <http_set_ssi_handler+0x74>)
 800ddf4:	480d      	ldr	r0, [pc, #52]	@ (800de2c <http_set_ssi_handler+0x6c>)
 800ddf6:	f014 fa29 	bl	802224c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dc06      	bgt.n	800de0e <http_set_ssi_handler+0x4e>
 800de00:	4b08      	ldr	r3, [pc, #32]	@ (800de24 <http_set_ssi_handler+0x64>)
 800de02:	f640 2278 	movw	r2, #2680	@ 0xa78
 800de06:	490c      	ldr	r1, [pc, #48]	@ (800de38 <http_set_ssi_handler+0x78>)
 800de08:	4808      	ldr	r0, [pc, #32]	@ (800de2c <http_set_ssi_handler+0x6c>)
 800de0a:	f014 fa1f 	bl	802224c <iprintf>

  g_ppcTags = tags;
 800de0e:	4a0b      	ldr	r2, [pc, #44]	@ (800de3c <http_set_ssi_handler+0x7c>)
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800de14:	4a0a      	ldr	r2, [pc, #40]	@ (800de40 <http_set_ssi_handler+0x80>)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800de1a:	bf00      	nop
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	08025614 	.word	0x08025614
 800de28:	0802584c 	.word	0x0802584c
 800de2c:	0802565c 	.word	0x0802565c
 800de30:	20008534 	.word	0x20008534
 800de34:	08025864 	.word	0x08025864
 800de38:	08025874 	.word	0x08025874
 800de3c:	2000853c 	.word	0x2000853c
 800de40:	20008538 	.word	0x20008538

0800de44 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d106      	bne.n	800de62 <http_set_cgi_handlers+0x1e>
 800de54:	4b0d      	ldr	r3, [pc, #52]	@ (800de8c <http_set_cgi_handlers+0x48>)
 800de56:	f640 228a 	movw	r2, #2698	@ 0xa8a
 800de5a:	490d      	ldr	r1, [pc, #52]	@ (800de90 <http_set_cgi_handlers+0x4c>)
 800de5c:	480d      	ldr	r0, [pc, #52]	@ (800de94 <http_set_cgi_handlers+0x50>)
 800de5e:	f014 f9f5 	bl	802224c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	dc06      	bgt.n	800de76 <http_set_cgi_handlers+0x32>
 800de68:	4b08      	ldr	r3, [pc, #32]	@ (800de8c <http_set_cgi_handlers+0x48>)
 800de6a:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800de6e:	490a      	ldr	r1, [pc, #40]	@ (800de98 <http_set_cgi_handlers+0x54>)
 800de70:	4808      	ldr	r0, [pc, #32]	@ (800de94 <http_set_cgi_handlers+0x50>)
 800de72:	f014 f9eb 	bl	802224c <iprintf>

  g_pCGIs = cgis;
 800de76:	4a09      	ldr	r2, [pc, #36]	@ (800de9c <http_set_cgi_handlers+0x58>)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800de7c:	4a08      	ldr	r2, [pc, #32]	@ (800dea0 <http_set_cgi_handlers+0x5c>)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	6013      	str	r3, [r2, #0]
}
 800de82:	bf00      	nop
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	08025614 	.word	0x08025614
 800de90:	0802588c 	.word	0x0802588c
 800de94:	0802565c 	.word	0x0802565c
 800de98:	0802589c 	.word	0x0802589c
 800de9c:	20008540 	.word	0x20008540
 800dea0:	20008544 	.word	0x20008544

0800dea4 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	f003 031f 	and.w	r3, r3, #31
 800deb6:	2b1f      	cmp	r3, #31
 800deb8:	d102      	bne.n	800dec0 <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 800deba:	f06f 030f 	mvn.w	r3, #15
 800debe:	e078      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	785b      	ldrb	r3, [r3, #1]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 800dec8:	f06f 030f 	mvn.w	r3, #15
 800decc:	e071      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f005 fdca 	bl	8013a6e <snmp_pbuf_stream_write>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <snmp_ans1_enc_tlv+0x42>
 800dee0:	f06f 0301 	mvn.w	r3, #1
 800dee4:	e065      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2201      	movs	r2, #1
 800deea:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	889b      	ldrh	r3, [r3, #4]
 800def0:	2b7f      	cmp	r3, #127	@ 0x7f
 800def2:	d802      	bhi.n	800defa <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 800def4:	2301      	movs	r3, #1
 800def6:	73bb      	strb	r3, [r7, #14]
 800def8:	e008      	b.n	800df0c <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	889b      	ldrh	r3, [r3, #4]
 800defe:	2bff      	cmp	r3, #255	@ 0xff
 800df00:	d802      	bhi.n	800df08 <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 800df02:	2302      	movs	r3, #2
 800df04:	73bb      	strb	r3, [r7, #14]
 800df06:	e001      	b.n	800df0c <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 800df08:	2303      	movs	r3, #3
 800df0a:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	789b      	ldrb	r3, [r3, #2]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	789b      	ldrb	r3, [r3, #2]
 800df18:	7bba      	ldrb	r2, [r7, #14]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d902      	bls.n	800df24 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 800df1e:	f06f 030f 	mvn.w	r3, #15
 800df22:	e046      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	789b      	ldrb	r3, [r3, #2]
 800df28:	73bb      	strb	r3, [r7, #14]
 800df2a:	e002      	b.n	800df32 <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	7bba      	ldrb	r2, [r7, #14]
 800df30:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 800df32:	7bbb      	ldrb	r3, [r7, #14]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d92d      	bls.n	800df94 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800df44:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df46:	7bfb      	ldrb	r3, [r7, #15]
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f005 fd8f 	bl	8013a6e <snmp_pbuf_stream_write>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d01b      	beq.n	800df8e <snmp_ans1_enc_tlv+0xea>
 800df56:	f06f 0301 	mvn.w	r3, #1
 800df5a:	e02a      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d105      	bne.n	800df6e <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	889b      	ldrh	r3, [r3, #4]
 800df66:	0a1b      	lsrs	r3, r3, #8
 800df68:	b29b      	uxth	r3, r3
 800df6a:	73fb      	strb	r3, [r7, #15]
 800df6c:	e001      	b.n	800df72 <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800df6e:	2300      	movs	r3, #0
 800df70:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f005 fd79 	bl	8013a6e <snmp_pbuf_stream_write>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <snmp_ans1_enc_tlv+0xe4>
 800df82:	f06f 0301 	mvn.w	r3, #1
 800df86:	e014      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d8e3      	bhi.n	800df5c <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	889b      	ldrh	r3, [r3, #4]
 800df98:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f005 fd65 	bl	8013a6e <snmp_pbuf_stream_write>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <snmp_ans1_enc_tlv+0x10c>
 800dfaa:	f06f 0301 	mvn.w	r3, #1
 800dfae:	e000      	b.n	800dfb2 <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream* pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 800dfc8:	88fb      	ldrh	r3, [r7, #6]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	68b9      	ldr	r1, [r7, #8]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f005 fd5e 	bl	8013a90 <snmp_pbuf_stream_writebuf>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d002      	beq.n	800dfe0 <snmp_asn1_enc_raw+0x26>
 800dfda:	f06f 0301 	mvn.w	r3, #1
 800dfde:	e000      	b.n	800dfe2 <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, u32_t value)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	60f8      	str	r0, [r7, #12]
 800dff2:	460b      	mov	r3, r1
 800dff4:	607a      	str	r2, [r7, #4]
 800dff6:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 800dff8:	897b      	ldrh	r3, [r7, #10]
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	d902      	bls.n	800e004 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 800dffe:	f06f 030f 	mvn.w	r3, #15
 800e002:	e033      	b.n	800e06c <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 800e004:	897b      	ldrh	r3, [r7, #10]
 800e006:	2b05      	cmp	r3, #5
 800e008:	d120      	bne.n	800e04c <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800e00a:	2100      	movs	r1, #0
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f005 fd2e 	bl	8013a6e <snmp_pbuf_stream_write>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <snmp_asn1_enc_u32t+0x34>
 800e018:	f06f 0301 	mvn.w	r3, #1
 800e01c:	e026      	b.n	800e06c <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 800e01e:	897b      	ldrh	r3, [r7, #10]
 800e020:	3b01      	subs	r3, #1
 800e022:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 800e024:	e012      	b.n	800e04c <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 800e026:	897b      	ldrh	r3, [r7, #10]
 800e028:	3b01      	subs	r3, #1
 800e02a:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800e02c:	897b      	ldrh	r3, [r7, #10]
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	fa22 f303 	lsr.w	r3, r2, r3
 800e036:	b2db      	uxtb	r3, r3
 800e038:	4619      	mov	r1, r3
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f005 fd17 	bl	8013a6e <snmp_pbuf_stream_write>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <snmp_asn1_enc_u32t+0x62>
 800e046:	f06f 0301 	mvn.w	r3, #1
 800e04a:	e00f      	b.n	800e06c <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 800e04c:	897b      	ldrh	r3, [r7, #10]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d8e9      	bhi.n	800e026 <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	b2db      	uxtb	r3, r3
 800e056:	4619      	mov	r1, r3
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f005 fd08 	bl	8013a6e <snmp_pbuf_stream_write>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <snmp_asn1_enc_u32t+0x80>
 800e064:	f06f 0301 	mvn.w	r3, #1
 800e068:	e000      	b.n	800e06c <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, const u32_t* value)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	460b      	mov	r3, r1
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 800e082:	897b      	ldrh	r3, [r7, #10]
 800e084:	2b09      	cmp	r3, #9
 800e086:	d902      	bls.n	800e08e <snmp_asn1_enc_u64t+0x1a>
    return ERR_ARG;
 800e088:	f06f 030f 	mvn.w	r3, #15
 800e08c:	e051      	b.n	800e132 <snmp_asn1_enc_u64t+0xbe>
  }
  if (octets_needed == 9) {
 800e08e:	897b      	ldrh	r3, [r7, #10]
 800e090:	2b09      	cmp	r3, #9
 800e092:	d122      	bne.n	800e0da <snmp_asn1_enc_u64t+0x66>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800e094:	2100      	movs	r1, #0
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f005 fce9 	bl	8013a6e <snmp_pbuf_stream_write>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <snmp_asn1_enc_u64t+0x34>
 800e0a2:	f06f 0301 	mvn.w	r3, #1
 800e0a6:	e044      	b.n	800e132 <snmp_asn1_enc_u64t+0xbe>
    octets_needed--;
 800e0a8:	897b      	ldrh	r3, [r7, #10]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 4) {
 800e0ae:	e014      	b.n	800e0da <snmp_asn1_enc_u64t+0x66>
    octets_needed--;
 800e0b0:	897b      	ldrh	r3, [r7, #10]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> ((octets_needed-4) << 3))));
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	897b      	ldrh	r3, [r7, #10]
 800e0bc:	3b04      	subs	r3, #4
 800e0be:	00db      	lsls	r3, r3, #3
 800e0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f005 fcd0 	bl	8013a6e <snmp_pbuf_stream_write>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <snmp_asn1_enc_u64t+0x66>
 800e0d4:	f06f 0301 	mvn.w	r3, #1
 800e0d8:	e02b      	b.n	800e132 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 4) {
 800e0da:	897b      	ldrh	r3, [r7, #10]
 800e0dc:	2b04      	cmp	r3, #4
 800e0de:	d8e7      	bhi.n	800e0b0 <snmp_asn1_enc_u64t+0x3c>
  }

  /* skip to low u32 */
  value++;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	607b      	str	r3, [r7, #4]

  while (octets_needed > 1) {
 800e0e6:	e013      	b.n	800e110 <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 800e0e8:	897b      	ldrh	r3, [r7, #10]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> (octets_needed << 3))));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	897b      	ldrh	r3, [r7, #10]
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f005 fcb5 	bl	8013a6e <snmp_pbuf_stream_write>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <snmp_asn1_enc_u64t+0x9c>
 800e10a:	f06f 0301 	mvn.w	r3, #1
 800e10e:	e010      	b.n	800e132 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 1) {
 800e110:	897b      	ldrh	r3, [r7, #10]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d8e8      	bhi.n	800e0e8 <snmp_asn1_enc_u64t+0x74>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value)));
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	4619      	mov	r1, r3
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f005 fca5 	bl	8013a6e <snmp_pbuf_stream_write>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <snmp_asn1_enc_u64t+0xbc>
 800e12a:	f06f 0301 	mvn.w	r3, #1
 800e12e:	e000      	b.n	800e132 <snmp_asn1_enc_u64t+0xbe>

  return ERR_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, s32_t value)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	60f8      	str	r0, [r7, #12]
 800e142:	460b      	mov	r3, r1
 800e144:	607a      	str	r2, [r7, #4]
 800e146:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800e148:	e012      	b.n	800e170 <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 800e14a:	897b      	ldrh	r3, [r7, #10]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800e150:	897b      	ldrh	r3, [r7, #10]
 800e152:	00db      	lsls	r3, r3, #3
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	fa42 f303 	asr.w	r3, r2, r3
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	4619      	mov	r1, r3
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f005 fc85 	bl	8013a6e <snmp_pbuf_stream_write>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <snmp_asn1_enc_s32t+0x36>
 800e16a:	f06f 0301 	mvn.w	r3, #1
 800e16e:	e00f      	b.n	800e190 <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 800e170:	897b      	ldrh	r3, [r7, #10]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d8e9      	bhi.n	800e14a <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	4619      	mov	r1, r3
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f005 fc76 	bl	8013a6e <snmp_pbuf_stream_write>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <snmp_asn1_enc_s32t+0x54>
 800e188:	f06f 0301 	mvn.w	r3, #1
 800e18c:	e000      	b.n	800e190 <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream* pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 800e1a6:	88fb      	ldrh	r3, [r7, #6]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d91e      	bls.n	800e1ea <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f005 fc4f 	bl	8013a6e <snmp_pbuf_stream_write>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <snmp_asn1_enc_oid+0x44>
 800e1d6:	f06f 0301 	mvn.w	r3, #1
 800e1da:	e04b      	b.n	800e274 <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 800e1dc:	88fb      	ldrh	r3, [r7, #6]
 800e1de:	3b02      	subs	r3, #2
 800e1e0:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 800e1e8:	e040      	b.n	800e26c <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 800e1ea:	f06f 030f 	mvn.w	r3, #15
 800e1ee:	e041      	b.n	800e274 <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	617b      	str	r3, [r7, #20]
    tail = 0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 800e200:	231c      	movs	r3, #28
 800e202:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800e204:	e01d      	b.n	800e242 <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800e206:	7ffb      	ldrb	r3, [r7, #31]
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	fa22 f303 	lsr.w	r3, r2, r3
 800e20e:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 800e210:	7cfb      	ldrb	r3, [r7, #19]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d102      	bne.n	800e21c <snmp_asn1_enc_oid+0x84>
 800e216:	7fbb      	ldrb	r3, [r7, #30]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00f      	beq.n	800e23c <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 800e21c:	2301      	movs	r3, #1
 800e21e:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 800e220:	7cfb      	ldrb	r3, [r7, #19]
 800e222:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e226:	b2db      	uxtb	r3, r3
 800e228:	4619      	mov	r1, r3
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f005 fc1f 	bl	8013a6e <snmp_pbuf_stream_write>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d002      	beq.n	800e23c <snmp_asn1_enc_oid+0xa4>
 800e236:	f06f 0301 	mvn.w	r3, #1
 800e23a:	e01b      	b.n	800e274 <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 800e23c:	7ffb      	ldrb	r3, [r7, #31]
 800e23e:	3b07      	subs	r3, #7
 800e240:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800e242:	7ffb      	ldrb	r3, [r7, #31]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1de      	bne.n	800e206 <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e250:	b2db      	uxtb	r3, r3
 800e252:	4619      	mov	r1, r3
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f005 fc0a 	bl	8013a6e <snmp_pbuf_stream_write>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <snmp_asn1_enc_oid+0xce>
 800e260:	f06f 0301 	mvn.w	r3, #1
 800e264:	e006      	b.n	800e274 <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	3304      	adds	r3, #4
 800e26a:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 800e26c:	88fb      	ldrh	r3, [r7, #6]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1be      	bne.n	800e1f0 <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3720      	adds	r7, #32
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	6039      	str	r1, [r7, #0]
 800e286:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800e288:	88fb      	ldrh	r3, [r7, #6]
 800e28a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e28c:	d803      	bhi.n	800e296 <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2201      	movs	r2, #1
 800e292:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800e294:	e009      	b.n	800e2aa <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800e296:	88fb      	ldrh	r3, [r7, #6]
 800e298:	2bff      	cmp	r3, #255	@ 0xff
 800e29a:	d803      	bhi.n	800e2a4 <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2202      	movs	r2, #2
 800e2a0:	701a      	strb	r2, [r3, #0]
}
 800e2a2:	e002      	b.n	800e2aa <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	701a      	strb	r2, [r3, #0]
}
 800e2aa:	bf00      	nop
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bc80      	pop	{r7}
 800e2b2:	4770      	bx	lr

0800e2b4 <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2c2:	d803      	bhi.n	800e2cc <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 800e2ca:	e019      	b.n	800e300 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e2d2:	d203      	bcs.n	800e2dc <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	801a      	strh	r2, [r3, #0]
}
 800e2da:	e011      	b.n	800e300 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2e2:	d203      	bcs.n	800e2ec <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2203      	movs	r2, #3
 800e2e8:	801a      	strh	r2, [r3, #0]
}
 800e2ea:	e009      	b.n	800e300 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	db03      	blt.n	800e2fa <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2204      	movs	r2, #4
 800e2f6:	801a      	strh	r2, [r3, #0]
}
 800e2f8:	e002      	b.n	800e300 <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2205      	movs	r2, #5
 800e2fe:	801a      	strh	r2, [r3, #0]
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	bc80      	pop	{r7}
 800e308:	4770      	bx	lr

0800e30a <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(const u32_t *value, u16_t *octets_needed)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b082      	sub	sp, #8
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
  /* check if high u32 is 0 */
  if (*value == 0x00) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <snmp_asn1_enc_u64t_cnt+0x26>
    /* only low u32 is important */
    value++;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3304      	adds	r3, #4
 800e320:	607b      	str	r3, [r7, #4]
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	4618      	mov	r0, r3
 800e32a:	f7ff ffc3 	bl	800e2b4 <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 800e32e:	e00b      	b.n	800e348 <snmp_asn1_enc_u64t_cnt+0x3e>
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff ffbc 	bl	800e2b4 <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	3304      	adds	r3, #4
 800e342:	b29a      	uxth	r2, r3
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	801a      	strh	r2, [r3, #0]
}
 800e348:	bf00      	nop
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	da02      	bge.n	800e366 <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	43db      	mvns	r3, r3
 800e364:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b7f      	cmp	r3, #127	@ 0x7f
 800e36a:	dc03      	bgt.n	800e374 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2201      	movs	r2, #1
 800e370:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 800e372:	e012      	b.n	800e39a <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e37a:	da03      	bge.n	800e384 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2202      	movs	r2, #2
 800e380:	801a      	strh	r2, [r3, #0]
}
 800e382:	e00a      	b.n	800e39a <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e38a:	da03      	bge.n	800e394 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2203      	movs	r2, #3
 800e390:	801a      	strh	r2, [r3, #0]
}
 800e392:	e002      	b.n	800e39a <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2204      	movs	r2, #4
 800e398:	801a      	strh	r2, [r3, #0]
}
 800e39a:	bf00      	nop
 800e39c:	370c      	adds	r7, #12
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bc80      	pop	{r7}
 800e3a2:	4770      	bx	lr

0800e3a4 <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b087      	sub	sp, #28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800e3b8:	897b      	ldrh	r3, [r7, #10]
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d92b      	bls.n	800e416 <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 800e3ca:	897b      	ldrh	r3, [r7, #10]
 800e3cc:	3b02      	subs	r3, #2
 800e3ce:	817b      	strh	r3, [r7, #10]
    oid += 2;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800e3d6:	e01e      	b.n	800e416 <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800e3d8:	897b      	ldrh	r3, [r7, #10]
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	09db      	lsrs	r3, r3, #7
 800e3e8:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800e3f6:	e008      	b.n	800e40a <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	09db      	lsrs	r3, r3, #7
 800e3fc:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	3301      	adds	r3, #1
 800e404:	b29a      	uxth	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1f3      	bne.n	800e3f8 <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3304      	adds	r3, #4
 800e414:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 800e416:	897b      	ldrh	r3, [r7, #10]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1dd      	bne.n	800e3d8 <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	371c      	adds	r7, #28
 800e422:	46bd      	mov	sp, r7
 800e424:	bc80      	pop	{r7}
 800e426:	4770      	bx	lr

0800e428 <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e432:	f107 030e 	add.w	r3, r7, #14
 800e436:	4619      	mov	r1, r3
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f005 faed 	bl	8013a18 <snmp_pbuf_stream_read>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <snmp_asn1_dec_tlv+0x22>
 800e444:	f06f 0301 	mvn.w	r3, #1
 800e448:	e069      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
  tlv->type = data;
 800e44a:	7bba      	ldrb	r2, [r7, #14]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	f003 031f 	and.w	r3, r3, #31
 800e458:	2b1f      	cmp	r3, #31
 800e45a:	d102      	bne.n	800e462 <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 800e45c:	f06f 0305 	mvn.w	r3, #5
 800e460:	e05d      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
  }
  tlv->type_len = 1;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2201      	movs	r2, #1
 800e466:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e468:	f107 030e 	add.w	r3, r7, #14
 800e46c:	4619      	mov	r1, r3
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f005 fad2 	bl	8013a18 <snmp_pbuf_stream_read>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <snmp_asn1_dec_tlv+0x58>
 800e47a:	f06f 0301 	mvn.w	r3, #1
 800e47e:	e04e      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>

  if (data < 0x80) { /* short form */
 800e480:	7bbb      	ldrb	r3, [r7, #14]
 800e482:	b25b      	sxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	db07      	blt.n	800e498 <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2201      	movs	r2, #1
 800e48c:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 800e48e:	7bbb      	ldrb	r3, [r7, #14]
 800e490:	461a      	mov	r2, r3
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	809a      	strh	r2, [r3, #4]
 800e496:	e041      	b.n	800e51c <snmp_asn1_dec_tlv+0xf4>
  } else if (data > 0x80) { /* long form */
 800e498:	7bbb      	ldrb	r3, [r7, #14]
 800e49a:	2b80      	cmp	r3, #128	@ 0x80
 800e49c:	d93b      	bls.n	800e516 <snmp_asn1_dec_tlv+0xee>
    u8_t length_bytes = data - 0x80;
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	3b80      	subs	r3, #128	@ 0x80
 800e4a2:	73fb      	strb	r3, [r7, #15]
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800e4b4:	e02b      	b.n	800e50e <snmp_asn1_dec_tlv+0xe6>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	889b      	ldrh	r3, [r3, #4]
 800e4ba:	2bff      	cmp	r3, #255	@ 0xff
 800e4bc:	d902      	bls.n	800e4c4 <snmp_asn1_dec_tlv+0x9c>
        return ERR_VAL;
 800e4be:	f06f 0305 	mvn.w	r3, #5
 800e4c2:	e02c      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e4c4:	f107 030e 	add.w	r3, r7, #14
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f005 faa4 	bl	8013a18 <snmp_pbuf_stream_read>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d002      	beq.n	800e4dc <snmp_asn1_dec_tlv+0xb4>
 800e4d6:	f06f 0301 	mvn.w	r3, #1
 800e4da:	e020      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
      tlv->value_len <<= 8;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	889b      	ldrh	r3, [r3, #4]
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	889b      	ldrh	r3, [r3, #4]
 800e4ec:	7bba      	ldrb	r2, [r7, #14]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	889b      	ldrh	r3, [r3, #4]
 800e4fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d102      	bne.n	800e508 <snmp_asn1_dec_tlv+0xe0>
        return ERR_VAL;
 800e502:	f06f 0305 	mvn.w	r3, #5
 800e506:	e00a      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
      }

      length_bytes--;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1d0      	bne.n	800e4b6 <snmp_asn1_dec_tlv+0x8e>
 800e514:	e002      	b.n	800e51c <snmp_asn1_dec_tlv+0xf4>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 800e516:	f06f 0305 	mvn.w	r3, #5
 800e51a:	e000      	b.n	800e51e <snmp_asn1_dec_tlv+0xf6>
  }

  return ERR_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b086      	sub	sp, #24
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	60f8      	str	r0, [r7, #12]
 800e52e:	460b      	mov	r3, r1
 800e530:	607a      	str	r2, [r7, #4]
 800e532:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 800e534:	897b      	ldrh	r3, [r7, #10]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d042      	beq.n	800e5c0 <snmp_asn1_dec_u32t+0x9a>
 800e53a:	897b      	ldrh	r3, [r7, #10]
 800e53c:	2b05      	cmp	r3, #5
 800e53e:	d83f      	bhi.n	800e5c0 <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e540:	f107 0317 	add.w	r3, r7, #23
 800e544:	4619      	mov	r1, r3
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f005 fa66 	bl	8013a18 <snmp_pbuf_stream_read>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <snmp_asn1_dec_u32t+0x32>
 800e552:	f06f 0301 	mvn.w	r3, #1
 800e556:	e035      	b.n	800e5c4 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 800e558:	897b      	ldrh	r3, [r7, #10]
 800e55a:	2b05      	cmp	r3, #5
 800e55c:	d102      	bne.n	800e564 <snmp_asn1_dec_u32t+0x3e>
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d006      	beq.n	800e572 <snmp_asn1_dec_u32t+0x4c>
 800e564:	897b      	ldrh	r3, [r7, #10]
 800e566:	2b04      	cmp	r3, #4
 800e568:	d82a      	bhi.n	800e5c0 <snmp_asn1_dec_u32t+0x9a>
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	b25b      	sxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	db26      	blt.n	800e5c0 <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800e572:	7dfb      	ldrb	r3, [r7, #23]
 800e574:	461a      	mov	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	601a      	str	r2, [r3, #0]
      len--;
 800e57a:	897b      	ldrh	r3, [r7, #10]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e580:	e019      	b.n	800e5b6 <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e582:	f107 0317 	add.w	r3, r7, #23
 800e586:	4619      	mov	r1, r3
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f005 fa45 	bl	8013a18 <snmp_pbuf_stream_read>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <snmp_asn1_dec_u32t+0x74>
 800e594:	f06f 0301 	mvn.w	r3, #1
 800e598:	e014      	b.n	800e5c4 <snmp_asn1_dec_u32t+0x9e>
        len--;
 800e59a:	897b      	ldrh	r3, [r7, #10]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	021a      	lsls	r2, r3, #8
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
        *value |= data;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	7dfa      	ldrb	r2, [r7, #23]
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 800e5b6:	897b      	ldrh	r3, [r7, #10]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e2      	bne.n	800e582 <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e001      	b.n	800e5c4 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800e5c0:	f06f 0305 	mvn.w	r3, #5
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if (len <= 4) {
 800e5da:	897b      	ldrh	r3, [r7, #10]
 800e5dc:	2b04      	cmp	r3, #4
 800e5de:	d805      	bhi.n	800e5ec <snmp_asn1_dec_u64t+0x20>
    /* high u32 is 0 */
    *value = 0;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
    /* directly skip to low u32 */
    value++;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	607b      	str	r3, [r7, #4]
  }

  if ((len > 0) && (len <= 9)) {
 800e5ec:	897b      	ldrh	r3, [r7, #10]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d04c      	beq.n	800e68c <snmp_asn1_dec_u64t+0xc0>
 800e5f2:	897b      	ldrh	r3, [r7, #10]
 800e5f4:	2b09      	cmp	r3, #9
 800e5f6:	d849      	bhi.n	800e68c <snmp_asn1_dec_u64t+0xc0>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e5f8:	f107 0317 	add.w	r3, r7, #23
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f005 fa0a 	bl	8013a18 <snmp_pbuf_stream_read>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <snmp_asn1_dec_u64t+0x44>
 800e60a:	f06f 0301 	mvn.w	r3, #1
 800e60e:	e03f      	b.n	800e690 <snmp_asn1_dec_u64t+0xc4>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 800e610:	897b      	ldrh	r3, [r7, #10]
 800e612:	2b09      	cmp	r3, #9
 800e614:	d102      	bne.n	800e61c <snmp_asn1_dec_u64t+0x50>
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d006      	beq.n	800e62a <snmp_asn1_dec_u64t+0x5e>
 800e61c:	897b      	ldrh	r3, [r7, #10]
 800e61e:	2b08      	cmp	r3, #8
 800e620:	d834      	bhi.n	800e68c <snmp_asn1_dec_u64t+0xc0>
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	b25b      	sxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	db30      	blt.n	800e68c <snmp_asn1_dec_u64t+0xc0>
      *value = data;
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
 800e62c:	461a      	mov	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	601a      	str	r2, [r3, #0]
      len--;
 800e632:	897b      	ldrh	r3, [r7, #10]
 800e634:	3b01      	subs	r3, #1
 800e636:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e638:	e023      	b.n	800e682 <snmp_asn1_dec_u64t+0xb6>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e63a:	f107 0317 	add.w	r3, r7, #23
 800e63e:	4619      	mov	r1, r3
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f005 f9e9 	bl	8013a18 <snmp_pbuf_stream_read>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <snmp_asn1_dec_u64t+0x86>
 800e64c:	f06f 0301 	mvn.w	r3, #1
 800e650:	e01e      	b.n	800e690 <snmp_asn1_dec_u64t+0xc4>

        if (len == 4) {
 800e652:	897b      	ldrh	r3, [r7, #10]
 800e654:	2b04      	cmp	r3, #4
 800e656:	d106      	bne.n	800e666 <snmp_asn1_dec_u64t+0x9a>
          /* skip to low u32 */
          value++;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3304      	adds	r3, #4
 800e65c:	607b      	str	r3, [r7, #4]
          *value = 0;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	e004      	b.n	800e670 <snmp_asn1_dec_u64t+0xa4>
        } else {
          *value <<= 8;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	021a      	lsls	r2, r3, #8
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	601a      	str	r2, [r3, #0]
        }

        *value |= data;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	7dfa      	ldrb	r2, [r7, #23]
 800e676:	431a      	orrs	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	601a      	str	r2, [r3, #0]
        len--;
 800e67c:	897b      	ldrh	r3, [r7, #10]
 800e67e:	3b01      	subs	r3, #1
 800e680:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 800e682:	897b      	ldrh	r3, [r7, #10]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1d8      	bne.n	800e63a <snmp_asn1_dec_u64t+0x6e>
      }

      return ERR_OK;
 800e688:	2300      	movs	r3, #0
 800e68a:	e001      	b.n	800e690 <snmp_asn1_dec_u64t+0xc4>
    }
  }

  return ERR_VAL;
 800e68c:	f06f 0305 	mvn.w	r3, #5
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	817b      	strh	r3, [r7, #10]
#if BYTE_ORDER == LITTLE_ENDIAN
  u8_t *lsb_ptr = (u8_t*)value;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	61bb      	str	r3, [r7, #24]
  u8_t *lsb_ptr = (u8_t*)value + sizeof(s32_t) - 1;
#endif
  u8_t sign;
  u8_t data;

  if ((len > 0) && (len < 5)) {
 800e6aa:	897b      	ldrh	r3, [r7, #10]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d05e      	beq.n	800e76e <snmp_asn1_dec_s32t+0xd6>
 800e6b0:	897b      	ldrh	r3, [r7, #10]
 800e6b2:	2b04      	cmp	r3, #4
 800e6b4:	d85b      	bhi.n	800e76e <snmp_asn1_dec_s32t+0xd6>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e6b6:	f107 0317 	add.w	r3, r7, #23
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f005 f9ab 	bl	8013a18 <snmp_pbuf_stream_read>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <snmp_asn1_dec_s32t+0x36>
 800e6c8:	f06f 0301 	mvn.w	r3, #1
 800e6cc:	e051      	b.n	800e772 <snmp_asn1_dec_s32t+0xda>
    len--;
 800e6ce:	897b      	ldrh	r3, [r7, #10]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	817b      	strh	r3, [r7, #10]

    if (data & 0x80) {
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
 800e6d6:	b25b      	sxtb	r3, r3
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	da0d      	bge.n	800e6f8 <snmp_asn1_dec_s32t+0x60>
      /* negative, start from -1 */
      *value = -1;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e2:	601a      	str	r2, [r3, #0]
      sign = 1;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr &= data;
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	781a      	ldrb	r2, [r3, #0]
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	e035      	b.n	800e764 <snmp_asn1_dec_s32t+0xcc>
    } else {
      /* positive, start from 0 */
      *value = 0;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
      sign = 0;
 800e6fe:	2300      	movs	r3, #0
 800e700:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr |= data;
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	781a      	ldrb	r2, [r3, #0]
 800e706:	7dfb      	ldrb	r3, [r7, #23]
 800e708:	4313      	orrs	r3, r2
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	701a      	strb	r2, [r3, #0]
    }

    /* OR/AND octets with value */
    while (len > 0) {
 800e710:	e028      	b.n	800e764 <snmp_asn1_dec_s32t+0xcc>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e712:	f107 0317 	add.w	r3, r7, #23
 800e716:	4619      	mov	r1, r3
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f005 f97d 	bl	8013a18 <snmp_pbuf_stream_read>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d002      	beq.n	800e72a <snmp_asn1_dec_s32t+0x92>
 800e724:	f06f 0301 	mvn.w	r3, #1
 800e728:	e023      	b.n	800e772 <snmp_asn1_dec_s32t+0xda>
      len--;
 800e72a:	897b      	ldrh	r3, [r7, #10]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	817b      	strh	r3, [r7, #10]

#if BYTE_ORDER == LITTLE_ENDIAN
      *value <<= 8;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	021a      	lsls	r2, r3, #8
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	601a      	str	r2, [r3, #0]
#endif
#if BYTE_ORDER == BIG_ENDIAN
      *value >>= 8;
#endif

      if (sign) {
 800e73a:	7ffb      	ldrb	r3, [r7, #31]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00a      	beq.n	800e756 <snmp_asn1_dec_s32t+0xbe>
        *lsb_ptr |= 255;
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	22ff      	movs	r2, #255	@ 0xff
 800e744:	701a      	strb	r2, [r3, #0]
        *lsb_ptr &= data;
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	781a      	ldrb	r2, [r3, #0]
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
 800e74c:	4013      	ands	r3, r2
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	701a      	strb	r2, [r3, #0]
 800e754:	e006      	b.n	800e764 <snmp_asn1_dec_s32t+0xcc>
      } else {
        *lsb_ptr |= data;
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	781a      	ldrb	r2, [r3, #0]
 800e75a:	7dfb      	ldrb	r3, [r7, #23]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	701a      	strb	r2, [r3, #0]
    while (len > 0) {
 800e764:	897b      	ldrh	r3, [r7, #10]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1d3      	bne.n	800e712 <snmp_asn1_dec_s32t+0x7a>
      }
    }

    return ERR_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	e001      	b.n	800e772 <snmp_asn1_dec_s32t+0xda>
  }

  return ERR_VAL;
 800e76e:	f06f 0305 	mvn.w	r3, #5
}
 800e772:	4618      	mov	r0, r3
 800e774:	3720      	adds	r7, #32
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t* oid, u8_t* oid_len, u8_t oid_max_len)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b088      	sub	sp, #32
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
 800e786:	460b      	mov	r3, r1
 800e788:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2200      	movs	r2, #0
 800e78e:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 800e794:	897b      	ldrh	r3, [r7, #10]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d05a      	beq.n	800e850 <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 800e79a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d802      	bhi.n	800e7a8 <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 800e7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a6:	e0b2      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e7a8:	f107 0317 	add.w	r3, r7, #23
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f005 f932 	bl	8013a18 <snmp_pbuf_stream_read>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <snmp_asn1_dec_oid+0x46>
 800e7ba:	f06f 0301 	mvn.w	r3, #1
 800e7be:	e0a6      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
    len--;
 800e7c0:	897b      	ldrh	r3, [r7, #10]
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 800e7c6:	7dfb      	ldrb	r3, [r7, #23]
 800e7c8:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7ca:	d10c      	bne.n	800e7e6 <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2203      	movs	r2, #3
 800e7dc:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	61fb      	str	r3, [r7, #28]
 800e7e4:	e030      	b.n	800e848 <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
 800e7e8:	2b27      	cmp	r3, #39	@ 0x27
 800e7ea:	d80d      	bhi.n	800e808 <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	3304      	adds	r3, #4
 800e804:	61fb      	str	r3, [r7, #28]
 800e806:	e01f      	b.n	800e848 <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 800e808:	7dfb      	ldrb	r3, [r7, #23]
 800e80a:	2b4f      	cmp	r3, #79	@ 0x4f
 800e80c:	d80e      	bhi.n	800e82c <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	2201      	movs	r2, #1
 800e812:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	3304      	adds	r3, #4
 800e818:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	3b28      	subs	r3, #40	@ 0x28
 800e81e:	461a      	mov	r2, r3
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	3304      	adds	r3, #4
 800e828:	61fb      	str	r3, [r7, #28]
 800e82a:	e00d      	b.n	800e848 <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	2202      	movs	r2, #2
 800e830:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	3304      	adds	r3, #4
 800e836:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 800e838:	7dfb      	ldrb	r3, [r7, #23]
 800e83a:	3b50      	subs	r3, #80	@ 0x50
 800e83c:	461a      	mov	r2, r3
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	3304      	adds	r3, #4
 800e846:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2202      	movs	r2, #2
 800e84c:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e84e:	e04e      	b.n	800e8ee <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	e05c      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e854:	f107 0317 	add.w	r3, r7, #23
 800e858:	4619      	mov	r1, r3
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f005 f8dc 	bl	8013a18 <snmp_pbuf_stream_read>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d002      	beq.n	800e86c <snmp_asn1_dec_oid+0xf2>
 800e866:	f06f 0301 	mvn.w	r3, #1
 800e86a:	e050      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
    len--;
 800e86c:	897b      	ldrh	r3, [r7, #10]
 800e86e:	3b01      	subs	r3, #1
 800e870:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	b25b      	sxtb	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	db04      	blt.n	800e884 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
 800e87c:	461a      	mov	r2, r3
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	601a      	str	r2, [r3, #0]
 800e882:	e02b      	b.n	800e8dc <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 800e884:	7dfb      	ldrb	r3, [r7, #23]
 800e886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e88a:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e88c:	e015      	b.n	800e8ba <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e88e:	f107 0317 	add.w	r3, r7, #23
 800e892:	4619      	mov	r1, r3
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f005 f8bf 	bl	8013a18 <snmp_pbuf_stream_read>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <snmp_asn1_dec_oid+0x12c>
 800e8a0:	f06f 0301 	mvn.w	r3, #1
 800e8a4:	e033      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
        len--;
 800e8a6:	897b      	ldrh	r3, [r7, #10]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	01da      	lsls	r2, r3, #7
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
 800e8b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8b6:	4413      	add	r3, r2
 800e8b8:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e8ba:	897b      	ldrh	r3, [r7, #10]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d003      	beq.n	800e8c8 <snmp_asn1_dec_oid+0x14e>
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
 800e8c2:	b25b      	sxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dbe2      	blt.n	800e88e <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	b25b      	sxtb	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	da02      	bge.n	800e8d6 <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 800e8d0:	f06f 0305 	mvn.w	r3, #5
 800e8d4:	e01b      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e8ee:	897b      	ldrh	r3, [r7, #10]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <snmp_asn1_dec_oid+0x186>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d8a9      	bhi.n	800e854 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 800e900:	897b      	ldrh	r3, [r7, #10]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 800e906:	f04f 33ff 	mov.w	r3, #4294967295
 800e90a:	e000      	b.n	800e90e <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t* buf_len, u16_t buf_max_len)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	60f8      	str	r0, [r7, #12]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	603b      	str	r3, [r7, #0]
 800e922:	460b      	mov	r3, r1
 800e924:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 800e926:	897a      	ldrh	r2, [r7, #10]
 800e928:	8b3b      	ldrh	r3, [r7, #24]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d902      	bls.n	800e934 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295
 800e932:	e017      	b.n	800e964 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	897a      	ldrh	r2, [r7, #10]
 800e938:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 800e93a:	e00f      	b.n	800e95c <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f005 f86a 	bl	8013a18 <snmp_pbuf_stream_read>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <snmp_asn1_dec_raw+0x3a>
 800e94a:	f06f 0301 	mvn.w	r3, #1
 800e94e:	e009      	b.n	800e964 <snmp_asn1_dec_raw+0x4e>
    buf++;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	3301      	adds	r3, #1
 800e954:	607b      	str	r3, [r7, #4]
    len--;
 800e956:	897b      	ldrh	r3, [r7, #10]
 800e958:	3b01      	subs	r3, #1
 800e95a:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 800e95c:	897b      	ldrh	r3, [r7, #10]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1ec      	bne.n	800e93c <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d105      	bne.n	800e98a <snmp_set_mibs+0x1e>
 800e97e:	4b0c      	ldr	r3, [pc, #48]	@ (800e9b0 <snmp_set_mibs+0x44>)
 800e980:	22de      	movs	r2, #222	@ 0xde
 800e982:	490c      	ldr	r1, [pc, #48]	@ (800e9b4 <snmp_set_mibs+0x48>)
 800e984:	480c      	ldr	r0, [pc, #48]	@ (800e9b8 <snmp_set_mibs+0x4c>)
 800e986:	f013 fc61 	bl	802224c <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 800e98a:	78fb      	ldrb	r3, [r7, #3]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d105      	bne.n	800e99c <snmp_set_mibs+0x30>
 800e990:	4b07      	ldr	r3, [pc, #28]	@ (800e9b0 <snmp_set_mibs+0x44>)
 800e992:	22df      	movs	r2, #223	@ 0xdf
 800e994:	4909      	ldr	r1, [pc, #36]	@ (800e9bc <snmp_set_mibs+0x50>)
 800e996:	4808      	ldr	r0, [pc, #32]	@ (800e9b8 <snmp_set_mibs+0x4c>)
 800e998:	f013 fc58 	bl	802224c <iprintf>
  snmp_mibs     = mibs;
 800e99c:	4a08      	ldr	r2, [pc, #32]	@ (800e9c0 <snmp_set_mibs+0x54>)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 800e9a2:	4a08      	ldr	r2, [pc, #32]	@ (800e9c4 <snmp_set_mibs+0x58>)
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	7013      	strb	r3, [r2, #0]
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	080258b8 	.word	0x080258b8
 800e9b4:	080258f4 	.word	0x080258f4
 800e9b8:	08025914 	.word	0x08025914
 800e9bc:	0802593c 	.word	0x0802593c
 800e9c0:	200000f8 	.word	0x200000f8
 800e9c4:	200000f4 	.word	0x200000f4

0800e9c8 <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid' 
 */
const struct snmp_obj_id* snmp_get_device_enterprise_oid(void)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	af00      	add	r7, sp, #0
  return snmp_device_enterprise_oid;
 800e9cc:	4b02      	ldr	r3, [pc, #8]	@ (800e9d8 <snmp_get_device_enterprise_oid+0x10>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bc80      	pop	{r7}
 800e9d6:	4770      	bx	lr
 800e9d8:	200000f0 	.word	0x200000f0

0800e9dc <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2bff      	cmp	r3, #255	@ 0xff
 800e9ec:	d80e      	bhi.n	800ea0c <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 800e9f4:	2bff      	cmp	r3, #255	@ 0xff
 800e9f6:	d809      	bhi.n	800ea0c <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 800e9fe:	2bff      	cmp	r3, #255	@ 0xff
 800ea00:	d804      	bhi.n	800ea0c <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	330c      	adds	r3, #12
 800ea06:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 800ea08:	2bff      	cmp	r3, #255	@ 0xff
 800ea0a:	d905      	bls.n	800ea18 <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 800ea0c:	4b36      	ldr	r3, [pc, #216]	@ (800eae8 <snmp_oid_to_ip4+0x10c>)
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	601a      	str	r2, [r3, #0]
    return 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	e061      	b.n	800eadc <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	061a      	lsls	r2, r3, #24
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3304      	adds	r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	041b      	lsls	r3, r3, #16
 800ea26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3308      	adds	r3, #8
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	021b      	lsls	r3, r3, #8
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	431a      	orrs	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	330c      	adds	r3, #12
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	4313      	orrs	r3, r2
 800ea42:	061a      	lsls	r2, r3, #24
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	0619      	lsls	r1, r3, #24
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	041b      	lsls	r3, r3, #16
 800ea52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea56:	4319      	orrs	r1, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	021b      	lsls	r3, r3, #8
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	4319      	orrs	r1, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	330c      	adds	r3, #12
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	430b      	orrs	r3, r1
 800ea6e:	021b      	lsls	r3, r3, #8
 800ea70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea74:	431a      	orrs	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	0619      	lsls	r1, r3, #24
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	041b      	lsls	r3, r3, #16
 800ea84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea88:	4319      	orrs	r1, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4319      	orrs	r1, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	330c      	adds	r3, #12
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	430b      	orrs	r3, r1
 800eaa0:	0a1b      	lsrs	r3, r3, #8
 800eaa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eaa6:	431a      	orrs	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	0619      	lsls	r1, r3, #24
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3304      	adds	r3, #4
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	041b      	lsls	r3, r3, #16
 800eab6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eaba:	4319      	orrs	r1, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3308      	adds	r3, #8
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	021b      	lsls	r3, r3, #8
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	4319      	orrs	r1, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	330c      	adds	r3, #12
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	430b      	orrs	r3, r1
 800ead2:	0e1b      	lsrs	r3, r3, #24
 800ead4:	431a      	orrs	r2, r3
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	601a      	str	r2, [r3, #0]
  return 1;
 800eada:	2301      	movs	r3, #1
}
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bc80      	pop	{r7}
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	08032ed0 	.word	0x08032ed0

0800eaec <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	781a      	ldrb	r2, [r3, #0]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3302      	adds	r3, #2
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	3308      	adds	r3, #8
 800eb16:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3303      	adds	r3, #3
 800eb1c:	781a      	ldrb	r2, [r3, #0]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	330c      	adds	r3, #12
 800eb22:	601a      	str	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bc80      	pop	{r7}
 800eb2c:	4770      	bx	lr

0800eb2e <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b086      	sub	sp, #24
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	460b      	mov	r3, r1
 800eb38:	607a      	str	r2, [r7, #4]
 800eb3a:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f000 f810 	bl	800eb64 <snmp_ip_to_oid>
 800eb44:	4603      	mov	r3, r0
 800eb46:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	4413      	add	r3, r2
 800eb50:	897a      	ldrh	r2, [r7, #10]
 800eb52:	601a      	str	r2, [r3, #0]
  idx++;
 800eb54:	7dfb      	ldrb	r3, [r7, #23]
 800eb56:	3301      	adds	r3, #1
 800eb58:	75fb      	strb	r3, [r7, #23]

  return idx;
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2201      	movs	r2, #1
 800eb72:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	3304      	adds	r3, #4
 800eb78:	2204      	movs	r2, #4
 800eb7a:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	4619      	mov	r1, r3
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7ff ffb2 	bl	800eaec <snmp_ip4_to_oid>
    return 6;
 800eb88:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	607a      	str	r2, [r7, #4]
 800eb9e:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800eba0:	7afb      	ldrb	r3, [r7, #11]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <snmp_oid_to_ip+0x18>
    return 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	e03a      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d112      	bne.n	800ebd8 <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 800ebb2:	7afb      	ldrb	r3, [r7, #11]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d801      	bhi.n	800ebbc <snmp_oid_to_ip+0x2a>
      return 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e031      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3304      	adds	r3, #4
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <snmp_oid_to_ip+0x38>
      return 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e02a      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 800ebca:	2204      	movs	r2, #4
 800ebcc:	2100      	movs	r1, #0
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f013 fd12 	bl	80225f8 <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 800ebd4:	2302      	movs	r3, #2
 800ebd6:	e023      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d118      	bne.n	800ec12 <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800ebe0:	7afb      	ldrb	r3, [r7, #11]
 800ebe2:	2b05      	cmp	r3, #5
 800ebe4:	d801      	bhi.n	800ebea <snmp_oid_to_ip+0x58>
      return 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e01a      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3304      	adds	r3, #4
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d001      	beq.n	800ebf8 <snmp_oid_to_ip+0x66>
      return 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e013      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	6879      	ldr	r1, [r7, #4]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff feec 	bl	800e9dc <snmp_oid_to_ip4>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <snmp_oid_to_ip+0x7c>
      return 0;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	e008      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
    }

    return 6;
 800ec0e:	2306      	movs	r3, #6
 800ec10:	e006      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d101      	bne.n	800ec1e <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e000      	b.n	800ec20 <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 800ec1e:	2300      	movs	r3, #0
  }
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	607a      	str	r2, [r7, #4]
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	460b      	mov	r3, r1
 800ec36:	72fb      	strb	r3, [r7, #11]
  u8_t idx = 0;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	75fb      	strb	r3, [r7, #23]

  /* InetAddressType + InetAddress */
  idx += snmp_oid_to_ip(&oid[idx], oid_len-idx, ip);
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	18d0      	adds	r0, r2, r3
 800ec44:	7afa      	ldrb	r2, [r7, #11]
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	4619      	mov	r1, r3
 800ec50:	f7ff ff9f 	bl	800eb92 <snmp_oid_to_ip>
 800ec54:	4603      	mov	r3, r0
 800ec56:	461a      	mov	r2, r3
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <snmp_oid_to_ip_port+0x40>
    return 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	e01b      	b.n	800eca0 <snmp_oid_to_ip_port+0x78>
  }

  /* InetPortNumber */
  if (oid_len < (idx+1)) {
 800ec68:	7dfa      	ldrb	r2, [r7, #23]
 800ec6a:	7afb      	ldrb	r3, [r7, #11]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d301      	bcc.n	800ec74 <snmp_oid_to_ip_port+0x4c>
    return 0;
 800ec70:	2300      	movs	r3, #0
 800ec72:	e015      	b.n	800eca0 <snmp_oid_to_ip_port+0x78>
  }
  if (oid[idx] > 0xffff) {
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec82:	d301      	bcc.n	800ec88 <snmp_oid_to_ip_port+0x60>
    return 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	e00b      	b.n	800eca0 <snmp_oid_to_ip_port+0x78>
  }
  *port = (u16_t)oid[idx];
 800ec88:	7dfb      	ldrb	r3, [r7, #23]
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	4413      	add	r3, r2
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	801a      	strh	r2, [r3, #0]
  idx++;
 800ec98:	7dfb      	ldrb	r3, [r7, #23]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	75fb      	strb	r3, [r7, #23]

  return idx;
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= LWIP_SNMP_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	2b32      	cmp	r3, #50	@ 0x32
 800ecba:	d906      	bls.n	800ecca <snmp_oid_assign+0x22>
 800ecbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ecf0 <snmp_oid_assign+0x48>)
 800ecbe:	f240 2213 	movw	r2, #531	@ 0x213
 800ecc2:	490c      	ldr	r1, [pc, #48]	@ (800ecf4 <snmp_oid_assign+0x4c>)
 800ecc4:	480c      	ldr	r0, [pc, #48]	@ (800ecf8 <snmp_oid_assign+0x50>)
 800ecc6:	f013 fac1 	bl	802224c <iprintf>

  target->len = oid_len;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	79fa      	ldrb	r2, [r7, #7]
 800ecce:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 800ecd0:	79fb      	ldrb	r3, [r7, #7]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d007      	beq.n	800ece6 <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	1d18      	adds	r0, r3, #4
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	461a      	mov	r2, r3
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	f013 fdae 	bl	8022842 <memcpy>
  }
}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	080258b8 	.word	0x080258b8
 800ecf4:	0802595c 	.word	0x0802595c
 800ecf8:	08025914 	.word	0x08025914

0800ecfc <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	4613      	mov	r3, r2
 800ed08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= LWIP_SNMP_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	79fb      	ldrb	r3, [r7, #7]
 800ed12:	4413      	add	r3, r2
 800ed14:	2b32      	cmp	r3, #50	@ 0x32
 800ed16:	dd06      	ble.n	800ed26 <snmp_oid_append+0x2a>
 800ed18:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <snmp_oid_append+0x60>)
 800ed1a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ed1e:	4910      	ldr	r1, [pc, #64]	@ (800ed60 <snmp_oid_append+0x64>)
 800ed20:	4810      	ldr	r0, [pc, #64]	@ (800ed64 <snmp_oid_append+0x68>)
 800ed22:	f013 fa93 	bl	802224c <iprintf>

  if (oid_len > 0) {
 800ed26:	79fb      	ldrb	r3, [r7, #7]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d012      	beq.n	800ed52 <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	4413      	add	r3, r2
 800ed36:	1d18      	adds	r0, r3, #4
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	f013 fd7f 	bl	8022842 <memcpy>
    target->len += oid_len;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	781a      	ldrb	r2, [r3, #0]
 800ed48:	79fb      	ldrb	r3, [r7, #7]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	701a      	strb	r2, [r3, #0]
  }
}
 800ed52:	bf00      	nop
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	080258b8 	.word	0x080258b8
 800ed60:	080259ac 	.word	0x080259ac
 800ed64:	08025914 	.word	0x08025914

0800ed68 <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	607a      	str	r2, [r7, #4]
 800ed72:	461a      	mov	r2, r3
 800ed74:	460b      	mov	r3, r1
 800ed76:	72fb      	strb	r3, [r7, #11]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d109      	bne.n	800ed9a <snmp_oid_compare+0x32>
 800ed86:	7afb      	ldrb	r3, [r7, #11]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <snmp_oid_compare+0x32>
 800ed8c:	4b24      	ldr	r3, [pc, #144]	@ (800ee20 <snmp_oid_compare+0xb8>)
 800ed8e:	f240 225f 	movw	r2, #607	@ 0x25f
 800ed92:	4924      	ldr	r1, [pc, #144]	@ (800ee24 <snmp_oid_compare+0xbc>)
 800ed94:	4824      	ldr	r0, [pc, #144]	@ (800ee28 <snmp_oid_compare+0xc0>)
 800ed96:	f013 fa59 	bl	802224c <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d124      	bne.n	800edea <snmp_oid_compare+0x82>
 800eda0:	7abb      	ldrb	r3, [r7, #10]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d021      	beq.n	800edea <snmp_oid_compare+0x82>
 800eda6:	4b1e      	ldr	r3, [pc, #120]	@ (800ee20 <snmp_oid_compare+0xb8>)
 800eda8:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800edac:	491f      	ldr	r1, [pc, #124]	@ (800ee2c <snmp_oid_compare+0xc4>)
 800edae:	481e      	ldr	r0, [pc, #120]	@ (800ee28 <snmp_oid_compare+0xc0>)
 800edb0:	f013 fa4c 	bl	802224c <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800edb4:	e019      	b.n	800edea <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d202      	bcs.n	800edc8 <snmp_oid_compare+0x60>
      return -1;
 800edc2:	f04f 33ff 	mov.w	r3, #4294967295
 800edc6:	e026      	b.n	800ee16 <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d901      	bls.n	800edd8 <snmp_oid_compare+0x70>
      return 1;
 800edd4:	2301      	movs	r3, #1
 800edd6:	e01e      	b.n	800ee16 <snmp_oid_compare+0xae>
    }

    level++;
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	3301      	adds	r3, #1
 800eddc:	75fb      	strb	r3, [r7, #23]
    oid1++;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	3304      	adds	r3, #4
 800ede2:	60fb      	str	r3, [r7, #12]
    oid2++;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3304      	adds	r3, #4
 800ede8:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 800edea:	7dfa      	ldrb	r2, [r7, #23]
 800edec:	7afb      	ldrb	r3, [r7, #11]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d203      	bcs.n	800edfa <snmp_oid_compare+0x92>
 800edf2:	7dfa      	ldrb	r2, [r7, #23]
 800edf4:	7abb      	ldrb	r3, [r7, #10]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d3dd      	bcc.n	800edb6 <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 800edfa:	7afa      	ldrb	r2, [r7, #11]
 800edfc:	7abb      	ldrb	r3, [r7, #10]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d202      	bcs.n	800ee08 <snmp_oid_compare+0xa0>
    return -1;
 800ee02:	f04f 33ff 	mov.w	r3, #4294967295
 800ee06:	e006      	b.n	800ee16 <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 800ee08:	7afa      	ldrb	r2, [r7, #11]
 800ee0a:	7abb      	ldrb	r3, [r7, #10]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d901      	bls.n	800ee14 <snmp_oid_compare+0xac>
    return 1;
 800ee10:	2301      	movs	r3, #1
 800ee12:	e000      	b.n	800ee16 <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	080258b8 	.word	0x080258b8
 800ee24:	080259d8 	.word	0x080259d8
 800ee28:	08025914 	.word	0x08025914
 800ee2c:	08025a10 	.word	0x08025a10

0800ee30 <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  u8_t result = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73fb      	strb	r3, [r7, #15]
  struct netif *netif_iterator = netif_list;
 800ee3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ee7c <netif_to_num+0x4c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	60bb      	str	r3, [r7, #8]

  while (netif_iterator != NULL) {
 800ee42:	e00b      	b.n	800ee5c <netif_to_num+0x2c>
    result++;
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	3301      	adds	r3, #1
 800ee48:	73fb      	strb	r3, [r7, #15]

    if (netif_iterator == netif) {
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d101      	bne.n	800ee56 <netif_to_num+0x26>
      return result;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	e00d      	b.n	800ee72 <netif_to_num+0x42>
    }

    netif_iterator = netif_iterator->next;
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	60bb      	str	r3, [r7, #8]
  while (netif_iterator != NULL) {
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1f0      	bne.n	800ee44 <netif_to_num+0x14>
  }

  LWIP_ASSERT("netif not found in netif_list", 0);
 800ee62:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <netif_to_num+0x50>)
 800ee64:	f240 229f 	movw	r2, #671	@ 0x29f
 800ee68:	4906      	ldr	r1, [pc, #24]	@ (800ee84 <netif_to_num+0x54>)
 800ee6a:	4807      	ldr	r0, [pc, #28]	@ (800ee88 <netif_to_num+0x58>)
 800ee6c:	f013 f9ee 	bl	802224c <iprintf>
  return 0;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	2000bbe0 	.word	0x2000bbe0
 800ee80:	080258b8 	.word	0x080258b8
 800ee84:	08025a48 	.word	0x08025a48
 800ee88:	08025914 	.word	0x08025914

0800ee8c <snmp_get_mib_from_oid>:

static const struct snmp_mib*
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	70fb      	strb	r3, [r7, #3]
  const u32_t* list_oid;
  const u32_t* searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib* matched_mib = NULL;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <snmp_get_mib_from_oid+0x28>
 800eea6:	4b44      	ldr	r3, [pc, #272]	@ (800efb8 <snmp_get_mib_from_oid+0x12c>)
 800eea8:	f240 22ad 	movw	r2, #685	@ 0x2ad
 800eeac:	4943      	ldr	r1, [pc, #268]	@ (800efbc <snmp_get_mib_from_oid+0x130>)
 800eeae:	4844      	ldr	r0, [pc, #272]	@ (800efc0 <snmp_get_mib_from_oid+0x134>)
 800eeb0:	f013 f9cc 	bl	802224c <iprintf>

  if (oid_len == 0) {
 800eeb4:	78fb      	ldrb	r3, [r7, #3]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <snmp_get_mib_from_oid+0x32>
    return NULL;
 800eeba:	2300      	movs	r3, #0
 800eebc:	e077      	b.n	800efae <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800eebe:	2300      	movs	r3, #0
 800eec0:	73fb      	strb	r3, [r7, #15]
 800eec2:	e06e      	b.n	800efa2 <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 800eec4:	4b3f      	ldr	r3, [pc, #252]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d106      	bne.n	800eee2 <snmp_get_mib_from_oid+0x56>
 800eed4:	4b38      	ldr	r3, [pc, #224]	@ (800efb8 <snmp_get_mib_from_oid+0x12c>)
 800eed6:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 800eeda:	493b      	ldr	r1, [pc, #236]	@ (800efc8 <snmp_get_mib_from_oid+0x13c>)
 800eedc:	4838      	ldr	r0, [pc, #224]	@ (800efc0 <snmp_get_mib_from_oid+0x134>)
 800eede:	f013 f9b5 	bl	802224c <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800eee2:	4b38      	ldr	r3, [pc, #224]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d106      	bne.n	800ef02 <snmp_get_mib_from_oid+0x76>
 800eef4:	4b30      	ldr	r3, [pc, #192]	@ (800efb8 <snmp_get_mib_from_oid+0x12c>)
 800eef6:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800eefa:	4934      	ldr	r1, [pc, #208]	@ (800efcc <snmp_get_mib_from_oid+0x140>)
 800eefc:	4830      	ldr	r0, [pc, #192]	@ (800efc0 <snmp_get_mib_from_oid+0x134>)
 800eefe:	f013 f9a5 	bl	802224c <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800ef02:	4b30      	ldr	r3, [pc, #192]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4413      	add	r3, r2
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	791b      	ldrb	r3, [r3, #4]
 800ef10:	78fa      	ldrb	r2, [r7, #3]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d342      	bcc.n	800ef9c <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 800ef16:	4b2b      	ldr	r3, [pc, #172]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4413      	add	r3, r2
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	791b      	ldrb	r3, [r3, #4]
 800ef24:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 800ef26:	4b27      	ldr	r3, [pc, #156]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	7bfb      	ldrb	r3, [r7, #15]
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4413      	add	r3, r2
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 800ef3a:	e00e      	b.n	800ef5a <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d10c      	bne.n	800ef62 <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	3304      	adds	r3, #4
 800ef52:	617b      	str	r3, [r7, #20]
        searched_oid++;
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	3304      	adds	r3, #4
 800ef58:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 800ef5a:	7bbb      	ldrb	r3, [r7, #14]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1ed      	bne.n	800ef3c <snmp_get_mib_from_oid+0xb0>
 800ef60:	e000      	b.n	800ef64 <snmp_get_mib_from_oid+0xd8>
          break;
 800ef62:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 800ef64:	7bbb      	ldrb	r3, [r7, #14]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d118      	bne.n	800ef9c <snmp_get_mib_from_oid+0x110>
 800ef6a:	4b16      	ldr	r3, [pc, #88]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4413      	add	r3, r2
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	791b      	ldrb	r3, [r3, #4]
 800ef78:	7b7a      	ldrb	r2, [r7, #13]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d20e      	bcs.n	800ef9c <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 800ef7e:	4b11      	ldr	r3, [pc, #68]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	791b      	ldrb	r3, [r3, #4]
 800ef8c:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <snmp_get_mib_from_oid+0x138>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	7bfb      	ldrb	r3, [r7, #15]
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	73fb      	strb	r3, [r7, #15]
 800efa2:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <snmp_get_mib_from_oid+0x144>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	7bfa      	ldrb	r2, [r7, #15]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d38b      	bcc.n	800eec4 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 800efac:	68bb      	ldr	r3, [r7, #8]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	080258b8 	.word	0x080258b8
 800efbc:	08025a68 	.word	0x08025a68
 800efc0:	08025914 	.word	0x08025914
 800efc4:	200000f8 	.word	0x200000f8
 800efc8:	08025a88 	.word	0x08025a88
 800efcc:	08025aac 	.word	0x08025aac
 800efd0:	200000f4 	.word	0x200000f4

0800efd4 <snmp_get_next_mib>:

static const struct snmp_mib*
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	460b      	mov	r3, r1
 800efde:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib* next_mib = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d106      	bne.n	800eff8 <snmp_get_next_mib+0x24>
 800efea:	4b2d      	ldr	r3, [pc, #180]	@ (800f0a0 <snmp_get_next_mib+0xcc>)
 800efec:	f240 22d6 	movw	r2, #726	@ 0x2d6
 800eff0:	492c      	ldr	r1, [pc, #176]	@ (800f0a4 <snmp_get_next_mib+0xd0>)
 800eff2:	482d      	ldr	r0, [pc, #180]	@ (800f0a8 <snmp_get_next_mib+0xd4>)
 800eff4:	f013 f92a 	bl	802224c <iprintf>

  if (oid_len == 0) {
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <snmp_get_next_mib+0x2e>
    return NULL;
 800effe:	2300      	movs	r3, #0
 800f000:	e04a      	b.n	800f098 <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800f002:	2300      	movs	r3, #0
 800f004:	73fb      	strb	r3, [r7, #15]
 800f006:	e041      	b.n	800f08c <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 800f008:	4b28      	ldr	r3, [pc, #160]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	4413      	add	r3, r2
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d035      	beq.n	800f086 <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 800f01a:	4b24      	ldr	r3, [pc, #144]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	4b20      	ldr	r3, [pc, #128]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4413      	add	r3, r2
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	7919      	ldrb	r1, [r3, #4]
 800f036:	78fb      	ldrb	r3, [r7, #3]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	f7ff fe95 	bl	800ed68 <snmp_oid_compare>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	dd20      	ble.n	800f086 <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d016      	beq.n	800f078 <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800f04a:	4b18      	ldr	r3, [pc, #96]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	6818      	ldr	r0, [r3, #0]
 800f058:	4b14      	ldr	r3, [pc, #80]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	7bfb      	ldrb	r3, [r7, #15]
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4413      	add	r3, r2
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	7919      	ldrb	r1, [r3, #4]
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	791b      	ldrb	r3, [r3, #4]
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800f06e:	f7ff fe7b 	bl	800ed68 <snmp_oid_compare>
 800f072:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 800f074:	2b00      	cmp	r3, #0
 800f076:	da06      	bge.n	800f086 <snmp_get_next_mib+0xb2>
          next_mib = snmp_mibs[i];
 800f078:	4b0c      	ldr	r3, [pc, #48]	@ (800f0ac <snmp_get_next_mib+0xd8>)
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800f086:	7bfb      	ldrb	r3, [r7, #15]
 800f088:	3301      	adds	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]
 800f08c:	4b08      	ldr	r3, [pc, #32]	@ (800f0b0 <snmp_get_next_mib+0xdc>)
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	7bfa      	ldrb	r2, [r7, #15]
 800f092:	429a      	cmp	r2, r3
 800f094:	d3b8      	bcc.n	800f008 <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 800f096:	68bb      	ldr	r3, [r7, #8]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	080258b8 	.word	0x080258b8
 800f0a4:	08025a68 	.word	0x08025a68
 800f0a8:	08025914 	.word	0x08025914
 800f0ac:	200000f8 	.word	0x200000f8
 800f0b0:	200000f4 	.word	0x200000f4

0800f0b4 <snmp_get_mib_between>:

static const struct snmp_mib*
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	607a      	str	r2, [r7, #4]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	72fb      	strb	r3, [r7, #11]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib* next_mib = snmp_get_next_mib(oid1, oid1_len);
 800f0c8:	7afb      	ldrb	r3, [r7, #11]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f7ff ff81 	bl	800efd4 <snmp_get_next_mib>
 800f0d2:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <snmp_get_mib_between+0x34>
 800f0da:	4b13      	ldr	r3, [pc, #76]	@ (800f128 <snmp_get_mib_between+0x74>)
 800f0dc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f0e0:	4912      	ldr	r1, [pc, #72]	@ (800f12c <snmp_get_mib_between+0x78>)
 800f0e2:	4813      	ldr	r0, [pc, #76]	@ (800f130 <snmp_get_mib_between+0x7c>)
 800f0e4:	f013 f8b2 	bl	802224c <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 800f0e8:	7abb      	ldrb	r3, [r7, #10]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <snmp_get_mib_between+0x48>
 800f0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f128 <snmp_get_mib_between+0x74>)
 800f0f0:	f240 22f2 	movw	r2, #754	@ 0x2f2
 800f0f4:	490f      	ldr	r1, [pc, #60]	@ (800f134 <snmp_get_mib_between+0x80>)
 800f0f6:	480e      	ldr	r0, [pc, #56]	@ (800f130 <snmp_get_mib_between+0x7c>)
 800f0f8:	f013 f8a8 	bl	802224c <iprintf>

  if (next_mib != NULL) {
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00c      	beq.n	800f11c <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	6818      	ldr	r0, [r3, #0]
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	7919      	ldrb	r1, [r3, #4]
 800f10a:	7abb      	ldrb	r3, [r7, #10]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	f7ff fe2b 	bl	800ed68 <snmp_oid_compare>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	da01      	bge.n	800f11c <snmp_get_mib_between+0x68>
      return next_mib;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	e000      	b.n	800f11e <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	080258b8 	.word	0x080258b8
 800f12c:	08025ae4 	.word	0x08025ae4
 800f130:	08025914 	.word	0x08025914
 800f134:	08025b04 	.word	0x08025b04

0800f138 <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance* node_instance)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08a      	sub	sp, #40	@ 0x28
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	460b      	mov	r3, r1
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 800f146:	23f0      	movs	r3, #240	@ 0xf0
 800f148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 800f150:	7afb      	ldrb	r3, [r7, #11]
 800f152:	4619      	mov	r1, r3
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f7ff fe99 	bl	800ee8c <snmp_get_mib_from_oid>
 800f15a:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d02b      	beq.n	800f1ba <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 800f162:	f107 0317 	add.w	r3, r7, #23
 800f166:	7afa      	ldrb	r2, [r7, #11]
 800f168:	68f9      	ldr	r1, [r7, #12]
 800f16a:	69f8      	ldr	r0, [r7, #28]
 800f16c:	f000 f981 	bl	800f472 <snmp_mib_tree_resolve_exact>
 800f170:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d020      	beq.n	800f1ba <snmp_get_node_instance_from_oid+0x82>
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01c      	beq.n	800f1ba <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node* leaf_node = (const struct snmp_leaf_node*)(const void*)mn;
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a3a      	ldr	r2, [r7, #32]
 800f188:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	1d18      	adds	r0, r3, #4
 800f18e:	7afb      	ldrb	r3, [r7, #11]
 800f190:	7dfa      	ldrb	r2, [r7, #23]
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	4413      	add	r3, r2
 800f19a:	7dfa      	ldrb	r2, [r7, #23]
 800f19c:	4619      	mov	r1, r3
 800f19e:	f7ff fd83 	bl	800eca8 <snmp_oid_assign>

      result = leaf_node->get_instance(
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	7dfa      	ldrb	r2, [r7, #23]
 800f1a8:	7af9      	ldrb	r1, [r7, #11]
 800f1aa:	1a8a      	subs	r2, r1, r2
 800f1ac:	b2d1      	uxtb	r1, r2
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	4798      	blx	r3
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
#endif
    }
  }

  return result;
 800f1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3728      	adds	r7, #40	@ 0x28
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void* validate_node_instance_arg, struct snmp_obj_id* node_oid, struct snmp_node_instance* node_instance)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b08c      	sub	sp, #48	@ 0x30
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	60f8      	str	r0, [r7, #12]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  const u32_t* start_oid     = NULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	627b      	str	r3, [r7, #36]	@ 0x24
  u8_t         start_oid_len = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 800f1e4:	7afb      	ldrb	r3, [r7, #11]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7ff fe4f 	bl	800ee8c <snmp_get_mib_from_oid>
 800f1ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (mib == NULL) {
 800f1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d111      	bne.n	800f21a <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 800f1f6:	7afb      	ldrb	r3, [r7, #11]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7ff feea 	bl	800efd4 <snmp_get_next_mib>
 800f200:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (mib != NULL) {
 800f202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 8123 	beq.w	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 800f20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	627b      	str	r3, [r7, #36]	@ 0x24
      start_oid_len = mib->base_oid_len;
 800f210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f212:	791b      	ldrb	r3, [r3, #4]
 800f214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f218:	e11a      	b.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	627b      	str	r3, [r7, #36]	@ 0x24
    start_oid_len = oid_len;
 800f21e:	7afb      	ldrb	r3, [r7, #11]
 800f220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 800f224:	e114      	b.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 800f226:	f107 0317 	add.w	r3, r7, #23
 800f22a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f22e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f232:	f000 f91e 	bl	800f472 <snmp_mib_tree_resolve_exact>
 800f236:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (mn != NULL) {
 800f238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d017      	beq.n	800f26e <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800f23e:	7dfb      	ldrb	r3, [r7, #23]
 800f240:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f244:	1ad3      	subs	r3, r2, r3
 800f246:	b2db      	uxtb	r3, r3
 800f248:	461a      	mov	r2, r3
 800f24a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f24c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f24e:	f7ff fd2b 	bl	800eca8 <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 800f252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f254:	1d18      	adds	r0, r3, #4
 800f256:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f25a:	7dfa      	ldrb	r2, [r7, #23]
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f262:	4413      	add	r3, r2
 800f264:	7dfa      	ldrb	r2, [r7, #23]
 800f266:	4619      	mov	r1, r3
 800f268:	f7ff fd1e 	bl	800eca8 <snmp_oid_assign>
 800f26c:	e00a      	b.n	800f284 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 800f26e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f278:	f000 f94d 	bl	800f516 <snmp_mib_tree_resolve_next>
 800f27c:	62b8      	str	r0, [r7, #40]	@ 0x28
      node_instance->instance_oid.len = 0;
 800f27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f280:	2200      	movs	r2, #0
 800f282:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 800f284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f288:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800f28a:	e073      	b.n	800f374 <snmp_get_next_node_instance_from_oid+0x1ae>
       u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 800f28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 800f294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f296:	2200      	movs	r2, #0
 800f298:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      node_instance->get_value        = NULL;
 800f29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      node_instance->set_test         = NULL;
 800f2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      node_instance->set_value        = NULL;
 800f2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      node_instance->release_instance = NULL;
 800f2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
      node_instance->reference.ptr    = NULL;
 800f2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      node_instance->reference_len    = 0;
 800f2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800f2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ce:	68db      	ldr	r3, [r3, #12]
        node_oid->id,
 800f2d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2d2:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800f2d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2d6:	7811      	ldrb	r1, [r2, #0]
 800f2d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2da:	4798      	blx	r3
 800f2dc:	4603      	mov	r3, r0
 800f2de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        node_oid->len,
        node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800f2e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d11e      	bne.n	800f328 <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d006      	beq.n	800f2fe <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6839      	ldr	r1, [r7, #0]
 800f2f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f2f6:	4798      	blx	r3
 800f2f8:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d109      	bne.n	800f312 <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800f2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f300:	f103 0108 	add.w	r1, r3, #8
 800f304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f306:	791b      	ldrb	r3, [r3, #4]
 800f308:	461a      	mov	r2, r3
 800f30a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f30c:	f7ff fcf6 	bl	800ecfc <snmp_oid_append>
          break;
 800f310:	e033      	b.n	800f37a <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800f312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d02b      	beq.n	800f374 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 800f31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f31e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f322:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f324:	4798      	blx	r3
 800f326:	e025      	b.n	800f374 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 800f328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f32a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d004      	beq.n	800f33c <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800f332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f338:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f33a:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 800f33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33e:	1d19      	adds	r1, r3, #4
 800f340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f342:	781a      	ldrb	r2, [r3, #0]
 800f344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f346:	3304      	adds	r3, #4
 800f348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f34a:	f000 f8e4 	bl	800f516 <snmp_mib_tree_resolve_next>
 800f34e:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (mn != NULL) {
 800f350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00e      	beq.n	800f374 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800f356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f358:	f103 0108 	add.w	r1, r3, #8
 800f35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f35e:	791b      	ldrb	r3, [r3, #4]
 800f360:	461a      	mov	r2, r3
 800f362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f364:	f7ff fca0 	bl	800eca8 <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 800f368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f36a:	2200      	movs	r2, #0
 800f36c:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 800f36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f372:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800f374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f376:	2b00      	cmp	r3, #0
 800f378:	d188      	bne.n	800f28c <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 800f37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d022      	beq.n	800f3c6 <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in 
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 800f380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f382:	1d1a      	adds	r2, r3, #4
 800f384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800f38c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f38e:	f7ff fe91 	bl	800f0b4 <snmp_get_mib_between>
 800f392:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d05a      	beq.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 800f39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 800f3a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f3ac:	4798      	blx	r3
        }

        mn            = NULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        mib           = intermediate_mib;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800f3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800f3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3be:	791b      	ldrb	r3, [r3, #4]
 800f3c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f3c4:	e044      	b.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 800f3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3ce:	f7ff fe01 	bl	800efd4 <snmp_get_next_mib>
 800f3d2:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d01c      	beq.n	800f414 <snmp_get_next_node_instance_from_oid+0x24e>
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	791a      	ldrb	r2, [r3, #4]
 800f3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e0:	791b      	ldrb	r3, [r3, #4]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d916      	bls.n	800f414 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ec:	7919      	ldrb	r1, [r3, #4]
 800f3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f4:	791b      	ldrb	r3, [r3, #4]
 800f3f6:	f7ff fcb7 	bl	800ed68 <snmp_oid_compare>
 800f3fa:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800f404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800f40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40c:	791b      	ldrb	r3, [r3, #4]
 800f40e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f412:	e01d      	b.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 800f414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f416:	791b      	ldrb	r3, [r3, #4]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d919      	bls.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 800f41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f422:	791b      	ldrb	r3, [r3, #4]
 800f424:	3b01      	subs	r3, #1
 800f426:	b2db      	uxtb	r3, r3
 800f428:	4619      	mov	r1, r3
 800f42a:	4610      	mov	r0, r2
 800f42c:	f7ff fd2e 	bl	800ee8c <snmp_get_mib_from_oid>
 800f430:	62f8      	str	r0, [r7, #44]	@ 0x2c

          if (mib == NULL) {
 800f432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10b      	bne.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (mib != NULL) {
 800f43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d006      	beq.n	800f450 <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800f442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	627b      	str	r3, [r7, #36]	@ 0x24
              start_oid_len = mib->base_oid_len;
 800f448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f44a:	791b      	ldrb	r3, [r3, #4]
 800f44c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while ((mib != NULL) && (mn == NULL)) {
 800f450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <snmp_get_next_node_instance_from_oid+0x298>
 800f456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f43f aee4 	beq.w	800f226 <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 800f45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f460:	2b00      	cmp	r3, #0
 800f462:	d101      	bne.n	800f468 <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 800f464:	23f2      	movs	r3, #242	@ 0xf2
 800f466:	e000      	b.n	800f46a <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 800f468:	2300      	movs	r3, #0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3730      	adds	r7, #48	@ 0x30
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t* oid_instance_len)
{
 800f472:	b480      	push	{r7}
 800f474:	b089      	sub	sp, #36	@ 0x24
 800f476:	af00      	add	r7, sp, #0
 800f478:	60f8      	str	r0, [r7, #12]
 800f47a:	60b9      	str	r1, [r7, #8]
 800f47c:	603b      	str	r3, [r7, #0]
 800f47e:	4613      	mov	r3, r2
 800f480:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node* const* node = &mib->root_node;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	3308      	adds	r3, #8
 800f486:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	791b      	ldrb	r3, [r3, #4]
 800f48c:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800f48e:	e025      	b.n	800f4dc <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 800f490:	7efb      	ldrb	r3, [r7, #27]
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	4413      	add	r3, r2
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node* const*)node)->subnode_count;
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	891b      	ldrh	r3, [r3, #8]
 800f4a2:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node* const*)node)->subnodes;
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f4ac:	e005      	b.n	800f4ba <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	61fb      	str	r3, [r7, #28]
      i--;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <snmp_mib_tree_resolve_exact+0x5a>
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	693a      	ldr	r2, [r7, #16]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d1f0      	bne.n	800f4ae <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e01a      	b.n	800f50c <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 800f4d6:	7efb      	ldrb	r3, [r7, #27]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800f4dc:	7efa      	ldrb	r2, [r7, #27]
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d204      	bcs.n	800f4ee <snmp_mib_tree_resolve_exact+0x7c>
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d0d0      	beq.n	800f490 <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d008      	beq.n	800f50a <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 800f4f8:	79fa      	ldrb	r2, [r7, #7]
 800f4fa:	7efb      	ldrb	r3, [r7, #27]
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	701a      	strb	r2, [r3, #0]
    return (*node);
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	e000      	b.n	800f50c <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3724      	adds	r7, #36	@ 0x24
 800f510:	46bd      	mov	sp, r7
 800f512:	bc80      	pop	{r7}
 800f514:	4770      	bx	lr

0800f516 <snmp_mib_tree_resolve_next>:

const struct snmp_node*
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id* oidret)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b0be      	sub	sp, #248	@ 0xf8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	60b9      	str	r1, [r7, #8]
 800f520:	603b      	str	r3, [r7, #0]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	791b      	ldrb	r3, [r3, #4]
 800f52a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  const struct snmp_node* const* node;
  const struct snmp_tree_node* node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800f52e:	2300      	movs	r3, #0
 800f530:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800f53e:	2300      	movs	r3, #0
 800f540:	e131      	b.n	800f7a6 <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node*)(const void*)mib->root_node;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	689a      	ldr	r2, [r3, #8]
 800f546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	33f8      	adds	r3, #248	@ 0xf8
 800f54e:	443b      	add	r3, r7
 800f550:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 800f554:	e050      	b.n	800f5f8 <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 800f556:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	33f8      	adds	r3, #248	@ 0xf8
 800f55e:	443b      	add	r3, r7
 800f560:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f564:	891b      	ldrh	r3, [r3, #8]
 800f566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    node    = node_stack[nsi]->subnodes;
 800f56a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	33f8      	adds	r3, #248	@ 0xf8
 800f572:	443b      	add	r3, r7
 800f574:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    subnode_oid = *(oid + oid_offset);
 800f57e:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	4413      	add	r3, r2
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f58e:	e009      	b.n	800f5a4 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 800f590:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f594:	3304      	adds	r3, #4
 800f596:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d007      	beq.n	800f5bc <snmp_mib_tree_resolve_next+0xa6>
 800f5ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d1e9      	bne.n	800f590 <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 800f5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d01e      	beq.n	800f602 <snmp_mib_tree_resolve_next+0xec>
 800f5c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d118      	bne.n	800f602 <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 800f5d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    node_stack[nsi] = (const struct snmp_tree_node*)(const void*)(*node);
 800f5da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	33f8      	adds	r3, #248	@ 0xf8
 800f5e8:	443b      	add	r3, r7
 800f5ea:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 800f5ee:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  while (oid_offset < oid_len) {
 800f5f8:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d3a9      	bcc.n	800f556 <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 800f602:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f606:	79fb      	ldrb	r3, [r7, #7]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d303      	bcc.n	800f614 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f612:	e0c2      	b.n	800f79a <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 800f614:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	4413      	add	r3, r2
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3301      	adds	r3, #1
 800f622:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  }

  while (nsi >= 0) {
 800f626:	e0b8      	b.n	800f79a <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node* subnode = NULL;
 800f628:	2300      	movs	r3, #0
 800f62a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 800f62e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	33f8      	adds	r3, #248	@ 0xf8
 800f636:	443b      	add	r3, r7
 800f638:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f63c:	891b      	ldrh	r3, [r3, #8]
 800f63e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    node           = node_stack[nsi]->subnodes;
 800f642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	33f8      	adds	r3, #248	@ 0xf8
 800f64a:	443b      	add	r3, r7
 800f64c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    while (i > 0) {
 800f656:	e031      	b.n	800f6bc <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 800f658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f664:	429a      	cmp	r2, r3
 800f666:	d105      	bne.n	800f674 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 800f668:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        break;
 800f672:	e027      	b.n	800f6c4 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 800f674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f680:	429a      	cmp	r2, r3
 800f682:	d211      	bcs.n	800f6a8 <snmp_mib_tree_resolve_next+0x192>
 800f684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d008      	beq.n	800f69e <snmp_mib_tree_resolve_next+0x188>
 800f68c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d204      	bcs.n	800f6a8 <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 800f69e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      }

      node++;
 800f6a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (i > 0) {
 800f6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	dcc9      	bgt.n	800f658 <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 800f6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d110      	bne.n	800f6ee <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 800f6cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	33f8      	adds	r3, #248	@ 0xf8
 800f6d4:	443b      	add	r3, r7
 800f6d6:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      nsi--;
 800f6e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6e6:	3b01      	subs	r3, #1
 800f6e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f6ec:	e055      	b.n	800f79a <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 800f6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d111      	bne.n	800f71c <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 800f6f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        node_stack[nsi] = (const struct snmp_tree_node*)(const void*)subnode;
 800f702:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	33f8      	adds	r3, #248	@ 0xf8
 800f70a:	443b      	add	r3, r7
 800f70c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f710:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 800f714:	2300      	movs	r3, #0
 800f716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f71a:	e03e      	b.n	800f79a <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6819      	ldr	r1, [r3, #0]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	791b      	ldrb	r3, [r3, #4]
 800f724:	461a      	mov	r2, r3
 800f726:	6838      	ldr	r0, [r7, #0]
 800f728:	f7ff fabe 	bl	800eca8 <snmp_oid_assign>
        i = 1;
 800f72c:	2301      	movs	r3, #1
 800f72e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f732:	e019      	b.n	800f768 <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 800f734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	33f8      	adds	r3, #248	@ 0xf8
 800f73c:	443b      	add	r3, r7
 800f73e:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	7812      	ldrb	r2, [r2, #0]
 800f746:	4610      	mov	r0, r2
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	0083      	lsls	r3, r0, #2
 800f74e:	440b      	add	r3, r1
 800f750:	605a      	str	r2, [r3, #4]
          oidret->len++;
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	3301      	adds	r3, #1
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	701a      	strb	r2, [r3, #0]
          i++;
 800f75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f762:	3301      	adds	r3, #1
 800f764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f768:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f76c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f770:	429a      	cmp	r2, r3
 800f772:	dddf      	ble.n	800f734 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	4618      	mov	r0, r3
 800f77a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	0083      	lsls	r3, r0, #2
 800f784:	440b      	add	r3, r1
 800f786:	605a      	str	r2, [r3, #4]
        oidret->len++;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	3301      	adds	r3, #1
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	701a      	strb	r2, [r3, #0]

        return subnode;
 800f794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f798:	e005      	b.n	800f7a6 <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 800f79a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f6bf af42 	bge.w	800f628 <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	37f8      	adds	r7, #248	@ 0xf8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
  const u32_t *start_oid, u8_t start_oid_len,
  u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b085      	sub	sp, #20
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	60f8      	str	r0, [r7, #12]
 800f7b6:	60b9      	str	r1, [r7, #8]
 800f7b8:	603b      	str	r3, [r7, #0]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	79fa      	ldrb	r2, [r7, #7]
 800f7c8:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	7e3a      	ldrb	r2, [r7, #24]
 800f7da:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	739a      	strb	r2, [r3, #14]
}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bc80      	pop	{r7}
 800f7ea:	4770      	bx	lr

0800f7ec <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, const u8_t oid_len, void* reference)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	603b      	str	r3, [r7, #0]
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	7b9b      	ldrb	r3, [r3, #14]
 800f800:	2b02      	cmp	r3, #2
 800f802:	d034      	beq.n	800f86e <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	791b      	ldrb	r3, [r3, #4]
 800f80c:	79f9      	ldrb	r1, [r7, #7]
 800f80e:	68b8      	ldr	r0, [r7, #8]
 800f810:	f7ff faaa 	bl	800ed68 <snmp_oid_compare>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	dd29      	ble.n	800f86e <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	7b9b      	ldrb	r3, [r3, #14]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d00a      	beq.n	800f838 <snmp_next_oid_check+0x4c>
        (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	689a      	ldr	r2, [r3, #8]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	7b1b      	ldrb	r3, [r3, #12]
 800f82a:	79f9      	ldrb	r1, [r7, #7]
 800f82c:	68b8      	ldr	r0, [r7, #8]
 800f82e:	f7ff fa9b 	bl	800ed68 <snmp_oid_compare>
 800f832:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f834:	2b00      	cmp	r3, #0
 800f836:	da1a      	bge.n	800f86e <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	7b5b      	ldrb	r3, [r3, #13]
 800f83c:	79fa      	ldrb	r2, [r7, #7]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d812      	bhi.n	800f868 <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6898      	ldr	r0, [r3, #8]
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	461a      	mov	r2, r3
 800f84c:	68b9      	ldr	r1, [r7, #8]
 800f84e:	f012 fff8 	bl	8022842 <memcpy>
          state->next_oid_len = oid_len;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	79fa      	ldrb	r2, [r7, #7]
 800f856:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2200      	movs	r2, #0
 800f85c:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	611a      	str	r2, [r3, #16]
          return 1;
 800f864:	2301      	movs	r3, #1
 800f866:	e003      	b.n	800f870 <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2202      	movs	r2, #2
 800f86c:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	607a      	str	r2, [r7, #4]
 800f882:	461a      	mov	r2, r3
 800f884:	460b      	mov	r3, r1
 800f886:	72fb      	strb	r3, [r7, #11]
 800f888:	4613      	mov	r3, r2
 800f88a:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 800f88c:	7afa      	ldrb	r2, [r7, #11]
 800f88e:	7abb      	ldrb	r3, [r7, #10]
 800f890:	429a      	cmp	r2, r3
 800f892:	d001      	beq.n	800f898 <snmp_oid_in_range+0x20>
    return 0;
 800f894:	2300      	movs	r3, #0
 800f896:	e024      	b.n	800f8e2 <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 800f898:	2300      	movs	r3, #0
 800f89a:	75fb      	strb	r3, [r7, #23]
 800f89c:	e01c      	b.n	800f8d8 <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 800f89e:	7dfb      	ldrb	r3, [r7, #23]
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	440b      	add	r3, r1
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d30b      	bcc.n	800f8ce <snmp_oid_in_range+0x56>
 800f8b6:	7dfb      	ldrb	r3, [r7, #23]
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	4413      	add	r3, r2
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	7dfb      	ldrb	r3, [r7, #23]
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	440b      	add	r3, r1
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d901      	bls.n	800f8d2 <snmp_oid_in_range+0x5a>
      return 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e007      	b.n	800f8e2 <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	75fb      	strb	r3, [r7, #23]
 800f8d8:	7dfa      	ldrb	r2, [r7, #23]
 800f8da:	7abb      	ldrb	r3, [r7, #10]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d3de      	bcc.n	800f89e <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 800f8e0:	2301      	movs	r3, #1
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	371c      	adds	r7, #28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bc80      	pop	{r7}
 800f8ea:	4770      	bx	lr

0800f8ec <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3b01      	subs	r3, #1
 800f900:	2b19      	cmp	r3, #25
 800f902:	f200 80df 	bhi.w	800fac4 <icmp_get_value+0x1d8>
 800f906:	a201      	add	r2, pc, #4	@ (adr r2, 800f90c <icmp_get_value+0x20>)
 800f908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90c:	0800f975 	.word	0x0800f975
 800f910:	0800f983 	.word	0x0800f983
 800f914:	0800f991 	.word	0x0800f991
 800f918:	0800f99f 	.word	0x0800f99f
 800f91c:	0800f9ad 	.word	0x0800f9ad
 800f920:	0800f9bb 	.word	0x0800f9bb
 800f924:	0800f9c9 	.word	0x0800f9c9
 800f928:	0800f9d7 	.word	0x0800f9d7
 800f92c:	0800f9e5 	.word	0x0800f9e5
 800f930:	0800f9f3 	.word	0x0800f9f3
 800f934:	0800fa01 	.word	0x0800fa01
 800f938:	0800fa0f 	.word	0x0800fa0f
 800f93c:	0800fa1d 	.word	0x0800fa1d
 800f940:	0800fa2b 	.word	0x0800fa2b
 800f944:	0800fa39 	.word	0x0800fa39
 800f948:	0800fa47 	.word	0x0800fa47
 800f94c:	0800fa55 	.word	0x0800fa55
 800f950:	0800fa63 	.word	0x0800fa63
 800f954:	0800fa6d 	.word	0x0800fa6d
 800f958:	0800fa77 	.word	0x0800fa77
 800f95c:	0800fa81 	.word	0x0800fa81
 800f960:	0800fa8f 	.word	0x0800fa8f
 800f964:	0800fa9d 	.word	0x0800fa9d
 800f968:	0800faa7 	.word	0x0800faa7
 800f96c:	0800fab1 	.word	0x0800fab1
 800f970:	0800fabb 	.word	0x0800fabb
  case 1: /* icmpInMsgs */
    *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 800f974:	4b57      	ldr	r3, [pc, #348]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f976:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f97e:	2304      	movs	r3, #4
 800f980:	e0a2      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 2: /* icmpInErrors */
    *uint_ptr = STATS_GET(mib2.icmpinerrors);
 800f982:	4b54      	ldr	r3, [pc, #336]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f984:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f98c:	2304      	movs	r3, #4
 800f98e:	e09b      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 3: /* icmpInDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 800f990:	4b50      	ldr	r3, [pc, #320]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f992:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f99a:	2304      	movs	r3, #4
 800f99c:	e094      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 4: /* icmpInTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 800f99e:	4b4d      	ldr	r3, [pc, #308]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9a0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9a8:	2304      	movs	r3, #4
 800f9aa:	e08d      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 5: /* icmpInParmProbs */
    *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 800f9ac:	4b49      	ldr	r3, [pc, #292]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9ae:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9b6:	2304      	movs	r3, #4
 800f9b8:	e086      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 6: /* icmpInSrcQuenchs */
    *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 800f9ba:	4b46      	ldr	r3, [pc, #280]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9bc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9c4:	2304      	movs	r3, #4
 800f9c6:	e07f      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 7: /* icmpInRedirects */
    *uint_ptr = STATS_GET(mib2.icmpinredirects);
 800f9c8:	4b42      	ldr	r3, [pc, #264]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9ca:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9d2:	2304      	movs	r3, #4
 800f9d4:	e078      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 8: /* icmpInEchos */
    *uint_ptr = STATS_GET(mib2.icmpinechos);
 800f9d6:	4b3f      	ldr	r3, [pc, #252]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9d8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9e0:	2304      	movs	r3, #4
 800f9e2:	e071      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 9: /* icmpInEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 800f9e4:	4b3b      	ldr	r3, [pc, #236]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9e6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9ee:	2304      	movs	r3, #4
 800f9f0:	e06a      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 10: /* icmpInTimestamps */
    *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 800f9f2:	4b38      	ldr	r3, [pc, #224]	@ (800fad4 <icmp_get_value+0x1e8>)
 800f9f4:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f9fc:	2304      	movs	r3, #4
 800f9fe:	e063      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 11: /* icmpInTimestampReps */
    *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 800fa00:	4b34      	ldr	r3, [pc, #208]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa02:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa0a:	2304      	movs	r3, #4
 800fa0c:	e05c      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 12: /* icmpInAddrMasks */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 800fa0e:	4b31      	ldr	r3, [pc, #196]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa10:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa18:	2304      	movs	r3, #4
 800fa1a:	e055      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 13: /* icmpInAddrMaskReps */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 800fa1c:	4b2d      	ldr	r3, [pc, #180]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa1e:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa26:	2304      	movs	r3, #4
 800fa28:	e04e      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 14: /* icmpOutMsgs */
    *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 800fa2a:	4b2a      	ldr	r3, [pc, #168]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa2c:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa34:	2304      	movs	r3, #4
 800fa36:	e047      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 15: /* icmpOutErrors */
    *uint_ptr = STATS_GET(mib2.icmpouterrors);
 800fa38:	4b26      	ldr	r3, [pc, #152]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa3a:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa42:	2304      	movs	r3, #4
 800fa44:	e040      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 16: /* icmpOutDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 800fa46:	4b23      	ldr	r3, [pc, #140]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa48:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa50:	2304      	movs	r3, #4
 800fa52:	e039      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 17: /* icmpOutTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 800fa54:	4b1f      	ldr	r3, [pc, #124]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa56:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa5e:	2304      	movs	r3, #4
 800fa60:	e032      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 18: /* icmpOutParmProbs: not supported -> always 0 */
    *uint_ptr = 0;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa68:	2304      	movs	r3, #4
 800fa6a:	e02d      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
    *uint_ptr = 0;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa72:	2304      	movs	r3, #4
 800fa74:	e028      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 20: /* icmpOutRedirects: not supported -> always 0 */
    *uint_ptr = 0;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	e023      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 21: /* icmpOutEchos */
    *uint_ptr = STATS_GET(mib2.icmpoutechos);
 800fa80:	4b14      	ldr	r3, [pc, #80]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa82:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa8a:	2304      	movs	r3, #4
 800fa8c:	e01c      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 22: /* icmpOutEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 800fa8e:	4b11      	ldr	r3, [pc, #68]	@ (800fad4 <icmp_get_value+0x1e8>)
 800fa90:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa98:	2304      	movs	r3, #4
 800fa9a:	e015      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 23: /* icmpOutTimestamps: not supported -> always 0 */
    *uint_ptr = 0;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faa2:	2304      	movs	r3, #4
 800faa4:	e010      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 24: /* icmpOutTimestampReps: not supported -> always 0 */
    *uint_ptr = 0;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faac:	2304      	movs	r3, #4
 800faae:	e00b      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 25: /* icmpOutAddrMasks: not supported -> always 0 */
    *uint_ptr = 0;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fab6:	2304      	movs	r3, #4
 800fab8:	e006      	b.n	800fac8 <icmp_get_value+0x1dc>
  case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
    *uint_ptr = 0;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fac0:	2304      	movs	r3, #4
 800fac2:	e001      	b.n	800fac8 <icmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    break;
 800fac4:	bf00      	nop
  }

  return 0;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	bc80      	pop	{r7}
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	2000bbec 	.word	0x2000bbec

0800fad8 <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance* instance, void* value)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d115      	bne.n	800fb18 <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t*)value;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	617b      	str	r3, [r7, #20]

    struct netif *netif = netif_list;
 800faf4:	4b0b      	ldr	r3, [pc, #44]	@ (800fb24 <interfaces_get_value+0x4c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800fafa:	e005      	b.n	800fb08 <interfaces_get_value+0x30>
      num_netifs++;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	3301      	adds	r3, #1
 800fb00:	617b      	str	r3, [r7, #20]
      netif = netif->next;
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1f6      	bne.n	800fafc <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800fb14:	2304      	movs	r3, #4
 800fb16:	e000      	b.n	800fb1a <interfaces_get_value+0x42>
  }

  return 0;
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	371c      	adds	r7, #28
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bc80      	pop	{r7}
 800fb22:	4770      	bx	lr
 800fb24:	2000bbe0 	.word	0x2000bbe0

0800fb28 <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, struct snmp_node_instance* cell_instance)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	4613      	mov	r3, r2
 800fb36:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 800fb38:	79f9      	ldrb	r1, [r7, #7]
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	4a14      	ldr	r2, [pc, #80]	@ (800fb90 <interfaces_Table_get_cell_instance+0x68>)
 800fb3e:	68b8      	ldr	r0, [r7, #8]
 800fb40:	f7ff fe9a 	bl	800f878 <snmp_oid_in_range>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d101      	bne.n	800fb4e <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fb4a:	23f1      	movs	r3, #241	@ 0xf1
 800fb4c:	e01b      	b.n	800fb86 <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  netif = netif_list;
 800fb54:	4b0f      	ldr	r3, [pc, #60]	@ (800fb94 <interfaces_Table_get_cell_instance+0x6c>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fb5a:	e010      	b.n	800fb7e <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 800fb5c:	6978      	ldr	r0, [r7, #20]
 800fb5e:	f7ff f967 	bl	800ee30 <netif_to_num>
 800fb62:	4603      	mov	r3, r0
 800fb64:	461a      	mov	r2, r3
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d105      	bne.n	800fb78 <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      return SNMP_ERR_NOERROR;
 800fb74:	2300      	movs	r3, #0
 800fb76:	e006      	b.n	800fb86 <interfaces_Table_get_cell_instance+0x5e>
    }
    netif = netif->next;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1eb      	bne.n	800fb5c <interfaces_Table_get_cell_instance+0x34>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fb84:	23f1      	movs	r3, #241	@ 0xf1
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	080320ec 	.word	0x080320ec
 800fb94:	2000bbe0 	.word	0x2000bbe0

0800fb98 <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t* column, struct snmp_obj_id* row_oid, struct snmp_node_instance* cell_instance)
{
 800fb98:	b590      	push	{r4, r7, lr}
 800fb9a:	b08f      	sub	sp, #60	@ 0x3c
 800fb9c:	af02      	add	r7, sp, #8
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	1d19      	adds	r1, r3, #4
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	781a      	ldrb	r2, [r3, #0]
 800fbac:	f107 0314 	add.w	r3, r7, #20
 800fbb0:	f107 0018 	add.w	r0, r7, #24
 800fbb4:	2401      	movs	r4, #1
 800fbb6:	9400      	str	r4, [sp, #0]
 800fbb8:	f7ff fdf9 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800fbbc:	4b16      	ldr	r3, [pc, #88]	@ (800fc18 <interfaces_Table_get_next_cell_instance+0x80>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800fbc2:	e00f      	b.n	800fbe4 <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800fbc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbc6:	f7ff f933 	bl	800ee30 <netif_to_num>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 800fbce:	f107 0110 	add.w	r1, r7, #16
 800fbd2:	f107 0018 	add.w	r0, r7, #24
 800fbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd8:	2201      	movs	r2, #1
 800fbda:	f7ff fe07 	bl	800f7ec <snmp_next_oid_check>

    netif = netif->next;
 800fbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800fbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1ec      	bne.n	800fbc4 <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fbea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10c      	bne.n	800fc0c <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fbf2:	6a3b      	ldr	r3, [r7, #32]
 800fbf4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	68b8      	ldr	r0, [r7, #8]
 800fbfc:	f7ff f854 	bl	800eca8 <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 800fc00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    return SNMP_ERR_NOERROR;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	e000      	b.n	800fc0e <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fc0c:	23f1      	movs	r3, #241	@ 0xf1
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3734      	adds	r7, #52	@ 0x34
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd90      	pop	{r4, r7, pc}
 800fc16:	bf00      	nop
 800fc18:	2000bbe0 	.word	0x2000bbe0

0800fc1c <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance* instance, void* value)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif*)instance->reference.ptr;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc2c:	613b      	str	r3, [r7, #16]
  u32_t* value_u32 = (u32_t*)value;
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	60fb      	str	r3, [r7, #12]
  s32_t* value_s32 = (s32_t*)value;
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	2b15      	cmp	r3, #21
 800fc3e:	f200 8102 	bhi.w	800fe46 <interfaces_Table_get_value+0x22a>
 800fc42:	a201      	add	r2, pc, #4	@ (adr r2, 800fc48 <interfaces_Table_get_value+0x2c>)
 800fc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc48:	0800fca1 	.word	0x0800fca1
 800fc4c:	0800fcb5 	.word	0x0800fcb5
 800fc50:	0800fcc9 	.word	0x0800fcc9
 800fc54:	0800fcdb 	.word	0x0800fcdb
 800fc58:	0800fceb 	.word	0x0800fceb
 800fc5c:	0800fcf9 	.word	0x0800fcf9
 800fc60:	0800fd0d 	.word	0x0800fd0d
 800fc64:	0800fd35 	.word	0x0800fd35
 800fc68:	0800fd79 	.word	0x0800fd79
 800fc6c:	0800fd87 	.word	0x0800fd87
 800fc70:	0800fd95 	.word	0x0800fd95
 800fc74:	0800fda3 	.word	0x0800fda3
 800fc78:	0800fdb1 	.word	0x0800fdb1
 800fc7c:	0800fdbf 	.word	0x0800fdbf
 800fc80:	0800fdcd 	.word	0x0800fdcd
 800fc84:	0800fddb 	.word	0x0800fddb
 800fc88:	0800fde9 	.word	0x0800fde9
 800fc8c:	0800fdf7 	.word	0x0800fdf7
 800fc90:	0800fe05 	.word	0x0800fe05
 800fc94:	0800fe13 	.word	0x0800fe13
 800fc98:	0800fe21 	.word	0x0800fe21
 800fc9c:	0800fe2f 	.word	0x0800fe2f
  {
  case 1: /* ifIndex */
    *value_s32 = netif_to_num(netif);
 800fca0:	6938      	ldr	r0, [r7, #16]
 800fca2:	f7ff f8c5 	bl	800ee30 <netif_to_num>
 800fca6:	4603      	mov	r3, r0
 800fca8:	461a      	mov	r2, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fcae:	2304      	movs	r3, #4
 800fcb0:	82fb      	strh	r3, [r7, #22]
    break;
 800fcb2:	e0ca      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 2: /* ifDescr */
    value_len = sizeof(netif->name);
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, netif->name, value_len);
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	3334      	adds	r3, #52	@ 0x34
 800fcbc:	8afa      	ldrh	r2, [r7, #22]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	6838      	ldr	r0, [r7, #0]
 800fcc2:	f012 fdbe 	bl	8022842 <memcpy>
    break;
 800fcc6:	e0c0      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 3: /* ifType */
    *value_s32 = netif->link_type;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800fcce:	461a      	mov	r2, r3
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fcd4:	2304      	movs	r3, #4
 800fcd6:	82fb      	strh	r3, [r7, #22]
    break;
 800fcd8:	e0b7      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 4: /* ifMtu */
    *value_s32 = netif->mtu;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcde:	461a      	mov	r2, r3
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800fce4:	2304      	movs	r3, #4
 800fce6:	82fb      	strh	r3, [r7, #22]
    break;
 800fce8:	e0af      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 5: /* ifSpeed */
    *value_u32 = netif->link_speed;
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fcf2:	2304      	movs	r3, #4
 800fcf4:	82fb      	strh	r3, [r7, #22]
    break;
 800fcf6:	e0a8      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 6: /* ifPhysAddress */
    value_len = sizeof(netif->hwaddr);
 800fcf8:	2306      	movs	r3, #6
 800fcfa:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, &netif->hwaddr, value_len);
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	332d      	adds	r3, #45	@ 0x2d
 800fd00:	8afa      	ldrh	r2, [r7, #22]
 800fd02:	4619      	mov	r1, r3
 800fd04:	6838      	ldr	r0, [r7, #0]
 800fd06:	f012 fd9c 	bl	8022842 <memcpy>
    break;
 800fd0a:	e09e      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 7: /* ifAdminStatus */
    if (netif_is_up(netif)) {
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d004      	beq.n	800fd26 <interfaces_Table_get_value+0x10a>
      *value_s32 = iftable_ifOperStatus_up;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	461a      	mov	r2, r3
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	e003      	b.n	800fd2e <interfaces_Table_get_value+0x112>
    } else {
      *value_s32 = iftable_ifOperStatus_down;
 800fd26:	2302      	movs	r3, #2
 800fd28:	461a      	mov	r2, r3
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800fd2e:	2304      	movs	r3, #4
 800fd30:	82fb      	strh	r3, [r7, #22]
    break;
 800fd32:	e08a      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 8: /* ifOperStatus */
    if (netif_is_up(netif)) {
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d012      	beq.n	800fd6a <interfaces_Table_get_value+0x14e>
      if (netif_is_link_up(netif)) {
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800fd4a:	089b      	lsrs	r3, r3, #2
 800fd4c:	f003 0301 	and.w	r3, r3, #1
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d004      	beq.n	800fd60 <interfaces_Table_get_value+0x144>
        *value_s32 = iftable_ifAdminStatus_up;
 800fd56:	2301      	movs	r3, #1
 800fd58:	461a      	mov	r2, r3
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	e008      	b.n	800fd72 <interfaces_Table_get_value+0x156>
      } else {
        *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 800fd60:	2307      	movs	r3, #7
 800fd62:	461a      	mov	r2, r3
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	601a      	str	r2, [r3, #0]
 800fd68:	e003      	b.n	800fd72 <interfaces_Table_get_value+0x156>
      }
    } else {
      *value_s32 = iftable_ifAdminStatus_down;
 800fd6a:	2302      	movs	r3, #2
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800fd72:	2304      	movs	r3, #4
 800fd74:	82fb      	strh	r3, [r7, #22]
    break;
 800fd76:	e068      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 9: /* ifLastChange */
    *value_u32 = netif->ts;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd80:	2304      	movs	r3, #4
 800fd82:	82fb      	strh	r3, [r7, #22]
    break;
 800fd84:	e061      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 10: /* ifInOctets */
    *value_u32 = netif->mib2_counters.ifinoctets;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd8e:	2304      	movs	r3, #4
 800fd90:	82fb      	strh	r3, [r7, #22]
    break;
 800fd92:	e05a      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 11: /* ifInUcastPkts */
    *value_u32 = netif->mib2_counters.ifinucastpkts;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fd9c:	2304      	movs	r3, #4
 800fd9e:	82fb      	strh	r3, [r7, #22]
    break;
 800fda0:	e053      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 12: /* ifInNUcastPkts */
    *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdaa:	2304      	movs	r3, #4
 800fdac:	82fb      	strh	r3, [r7, #22]
    break;
 800fdae:	e04c      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 13: /* ifInDiscards */
    *value_u32 = netif->mib2_counters.ifindiscards;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdb8:	2304      	movs	r3, #4
 800fdba:	82fb      	strh	r3, [r7, #22]
    break;
 800fdbc:	e045      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 14: /* ifInErrors */
    *value_u32 = netif->mib2_counters.ifinerrors;
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdc6:	2304      	movs	r3, #4
 800fdc8:	82fb      	strh	r3, [r7, #22]
    break;
 800fdca:	e03e      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 15: /* ifInUnkownProtos */
    *value_u32 = netif->mib2_counters.ifinunknownprotos;
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdd4:	2304      	movs	r3, #4
 800fdd6:	82fb      	strh	r3, [r7, #22]
    break;
 800fdd8:	e037      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 16: /* ifOutOctets */
    *value_u32 = netif->mib2_counters.ifoutoctets;
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fde2:	2304      	movs	r3, #4
 800fde4:	82fb      	strh	r3, [r7, #22]
    break;
 800fde6:	e030      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 17: /* ifOutUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutucastpkts;
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdf0:	2304      	movs	r3, #4
 800fdf2:	82fb      	strh	r3, [r7, #22]
    break;
 800fdf4:	e029      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 18: /* ifOutNUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fdfe:	2304      	movs	r3, #4
 800fe00:	82fb      	strh	r3, [r7, #22]
    break;
 800fe02:	e022      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 19: /* ifOutDiscarts */
    *value_u32 = netif->mib2_counters.ifoutdiscards;
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe0c:	2304      	movs	r3, #4
 800fe0e:	82fb      	strh	r3, [r7, #22]
    break;
 800fe10:	e01b      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 20: /* ifOutErrors */
    *value_u32 = netif->mib2_counters.ifouterrors;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe1a:	2304      	movs	r3, #4
 800fe1c:	82fb      	strh	r3, [r7, #22]
    break;
 800fe1e:	e014      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  case 21: /* ifOutQLen */
    *value_u32 = iftable_ifOutQLen;
 800fe20:	2300      	movs	r3, #0
 800fe22:	461a      	mov	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800fe28:	2304      	movs	r3, #4
 800fe2a:	82fb      	strh	r3, [r7, #22]
    break;
 800fe2c:	e00d      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  /** @note returning zeroDotZero (0.0) no media specific MIB support */
  case 22: /* ifSpecific */
    value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800fe2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe58 <interfaces_Table_get_value+0x23c>)
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 800fe36:	4b08      	ldr	r3, [pc, #32]	@ (800fe58 <interfaces_Table_get_value+0x23c>)
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	8afa      	ldrh	r2, [r7, #22]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	6838      	ldr	r0, [r7, #0]
 800fe40:	f012 fcff 	bl	8022842 <memcpy>
    break;
 800fe44:	e001      	b.n	800fe4a <interfaces_Table_get_value+0x22e>
  default:
    return 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	e001      	b.n	800fe4e <interfaces_Table_get_value+0x232>
  }

  return value_len;
 800fe4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3718      	adds	r7, #24
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	08031f98 	.word	0x08031f98

0800fe5c <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance* instance, void* value)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  s32_t* sint_ptr = (s32_t*)value;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	60fb      	str	r3, [r7, #12]
  u32_t* uint_ptr = (u32_t*)value;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	3b01      	subs	r3, #1
 800fe76:	2b16      	cmp	r3, #22
 800fe78:	f200 80b6 	bhi.w	800ffe8 <ip_get_value+0x18c>
 800fe7c:	a201      	add	r2, pc, #4	@ (adr r2, 800fe84 <ip_get_value+0x28>)
 800fe7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe82:	bf00      	nop
 800fe84:	0800fee1 	.word	0x0800fee1
 800fe88:	0800feeb 	.word	0x0800feeb
 800fe8c:	0800fef5 	.word	0x0800fef5
 800fe90:	0800ff03 	.word	0x0800ff03
 800fe94:	0800ff11 	.word	0x0800ff11
 800fe98:	0800ff1f 	.word	0x0800ff1f
 800fe9c:	0800ff2d 	.word	0x0800ff2d
 800fea0:	0800ff3b 	.word	0x0800ff3b
 800fea4:	0800ff49 	.word	0x0800ff49
 800fea8:	0800ff57 	.word	0x0800ff57
 800feac:	0800ff65 	.word	0x0800ff65
 800feb0:	0800ff73 	.word	0x0800ff73
 800feb4:	0800ff81 	.word	0x0800ff81
 800feb8:	0800ff8b 	.word	0x0800ff8b
 800febc:	0800ff99 	.word	0x0800ff99
 800fec0:	0800ffa7 	.word	0x0800ffa7
 800fec4:	0800ffb5 	.word	0x0800ffb5
 800fec8:	0800ffc3 	.word	0x0800ffc3
 800fecc:	0800ffd1 	.word	0x0800ffd1
 800fed0:	0800ffe9 	.word	0x0800ffe9
 800fed4:	0800ffe9 	.word	0x0800ffe9
 800fed8:	0800ffe9 	.word	0x0800ffe9
 800fedc:	0800ffdf 	.word	0x0800ffdf
#if IP_FORWARD
    /* forwarding */
    *sint_ptr = 1;
#else
    /* not-forwarding */
    *sint_ptr = 2;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2202      	movs	r2, #2
 800fee4:	601a      	str	r2, [r3, #0]
#endif
    return sizeof(*sint_ptr);
 800fee6:	2304      	movs	r3, #4
 800fee8:	e080      	b.n	800ffec <ip_get_value+0x190>
  case 2: /* ipDefaultTTL */
    *sint_ptr = IP_DEFAULT_TTL;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	22ff      	movs	r2, #255	@ 0xff
 800feee:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800fef0:	2304      	movs	r3, #4
 800fef2:	e07b      	b.n	800ffec <ip_get_value+0x190>
  case 3: /* ipInReceives */
    *uint_ptr = STATS_GET(mib2.ipinreceives);
 800fef4:	4b40      	ldr	r3, [pc, #256]	@ (800fff8 <ip_get_value+0x19c>)
 800fef6:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fefe:	2304      	movs	r3, #4
 800ff00:	e074      	b.n	800ffec <ip_get_value+0x190>
  case 4: /* ipInHdrErrors */
    *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800ff02:	4b3d      	ldr	r3, [pc, #244]	@ (800fff8 <ip_get_value+0x19c>)
 800ff04:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff0c:	2304      	movs	r3, #4
 800ff0e:	e06d      	b.n	800ffec <ip_get_value+0x190>
  case 5: /* ipInAddrErrors */
    *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 800ff10:	4b39      	ldr	r3, [pc, #228]	@ (800fff8 <ip_get_value+0x19c>)
 800ff12:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff1a:	2304      	movs	r3, #4
 800ff1c:	e066      	b.n	800ffec <ip_get_value+0x190>
  case 6: /* ipForwDatagrams */
    *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 800ff1e:	4b36      	ldr	r3, [pc, #216]	@ (800fff8 <ip_get_value+0x19c>)
 800ff20:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff28:	2304      	movs	r3, #4
 800ff2a:	e05f      	b.n	800ffec <ip_get_value+0x190>
  case 7: /* ipInUnknownProtos */
    *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 800ff2c:	4b32      	ldr	r3, [pc, #200]	@ (800fff8 <ip_get_value+0x19c>)
 800ff2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff36:	2304      	movs	r3, #4
 800ff38:	e058      	b.n	800ffec <ip_get_value+0x190>
  case 8: /* ipInDiscards */
    *uint_ptr = STATS_GET(mib2.ipindiscards);
 800ff3a:	4b2f      	ldr	r3, [pc, #188]	@ (800fff8 <ip_get_value+0x19c>)
 800ff3c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff44:	2304      	movs	r3, #4
 800ff46:	e051      	b.n	800ffec <ip_get_value+0x190>
  case 9: /* ipInDelivers */
    *uint_ptr = STATS_GET(mib2.ipindelivers);
 800ff48:	4b2b      	ldr	r3, [pc, #172]	@ (800fff8 <ip_get_value+0x19c>)
 800ff4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff52:	2304      	movs	r3, #4
 800ff54:	e04a      	b.n	800ffec <ip_get_value+0x190>
  case 10: /* ipOutRequests */
    *uint_ptr = STATS_GET(mib2.ipoutrequests);
 800ff56:	4b28      	ldr	r3, [pc, #160]	@ (800fff8 <ip_get_value+0x19c>)
 800ff58:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff60:	2304      	movs	r3, #4
 800ff62:	e043      	b.n	800ffec <ip_get_value+0x190>
  case 11: /* ipOutDiscards */
    *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 800ff64:	4b24      	ldr	r3, [pc, #144]	@ (800fff8 <ip_get_value+0x19c>)
 800ff66:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff6e:	2304      	movs	r3, #4
 800ff70:	e03c      	b.n	800ffec <ip_get_value+0x190>
  case 12: /* ipOutNoRoutes */
    *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 800ff72:	4b21      	ldr	r3, [pc, #132]	@ (800fff8 <ip_get_value+0x19c>)
 800ff74:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff7c:	2304      	movs	r3, #4
 800ff7e:	e035      	b.n	800ffec <ip_get_value+0x190>
  case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
    *sint_ptr = IP_REASS_MAXAGE;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2203      	movs	r2, #3
 800ff84:	601a      	str	r2, [r3, #0]
#else
    *sint_ptr = 0;
#endif
    return sizeof(*sint_ptr);
 800ff86:	2304      	movs	r3, #4
 800ff88:	e030      	b.n	800ffec <ip_get_value+0x190>
  case 14: /* ipReasmReqds */
    *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 800ff8a:	4b1b      	ldr	r3, [pc, #108]	@ (800fff8 <ip_get_value+0x19c>)
 800ff8c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ff94:	2304      	movs	r3, #4
 800ff96:	e029      	b.n	800ffec <ip_get_value+0x190>
  case 15: /* ipReasmOKs */
    *uint_ptr = STATS_GET(mib2.ipreasmoks);
 800ff98:	4b17      	ldr	r3, [pc, #92]	@ (800fff8 <ip_get_value+0x19c>)
 800ff9a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffa2:	2304      	movs	r3, #4
 800ffa4:	e022      	b.n	800ffec <ip_get_value+0x190>
  case 16: /* ipReasmFails */
    *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800ffa6:	4b14      	ldr	r3, [pc, #80]	@ (800fff8 <ip_get_value+0x19c>)
 800ffa8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffb0:	2304      	movs	r3, #4
 800ffb2:	e01b      	b.n	800ffec <ip_get_value+0x190>
  case 17: /* ipFragOKs */
    *uint_ptr = STATS_GET(mib2.ipfragoks);
 800ffb4:	4b10      	ldr	r3, [pc, #64]	@ (800fff8 <ip_get_value+0x19c>)
 800ffb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffbe:	2304      	movs	r3, #4
 800ffc0:	e014      	b.n	800ffec <ip_get_value+0x190>
  case 18: /* ipFragFails */
    *uint_ptr = STATS_GET(mib2.ipfragfails);
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fff8 <ip_get_value+0x19c>)
 800ffc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffcc:	2304      	movs	r3, #4
 800ffce:	e00d      	b.n	800ffec <ip_get_value+0x190>
  case 19: /* ipFragCreates */
    *uint_ptr = STATS_GET(mib2.ipfragcreates);
 800ffd0:	4b09      	ldr	r3, [pc, #36]	@ (800fff8 <ip_get_value+0x19c>)
 800ffd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffda:	2304      	movs	r3, #4
 800ffdc:	e006      	b.n	800ffec <ip_get_value+0x190>
  case 23: /* ipRoutingDiscards: not supported -> always 0 */
    *uint_ptr = 0;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ffe4:	2304      	movs	r3, #4
 800ffe6:	e001      	b.n	800ffec <ip_get_value+0x190>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800ffe8:	bf00      	nop
  }

  return 0;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3714      	adds	r7, #20
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bc80      	pop	{r7}
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	2000bbec 	.word	0x2000bbec

0800fffc <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b087      	sub	sp, #28
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	460b      	mov	r3, r1
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 801000a:	230a      	movs	r3, #10
 801000c:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t*)value;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d002      	beq.n	8010022 <ip_set_test+0x26>
 801001c:	2b02      	cmp	r3, #2
 801001e:	d007      	beq.n	8010030 <ip_set_test+0x34>
      ret = SNMP_ERR_NOERROR;
    }
    break;
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010020:	e010      	b.n	8010044 <ip_set_test+0x48>
    if (*sint_ptr == 2)
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b02      	cmp	r3, #2
 8010028:	d109      	bne.n	801003e <ip_set_test+0x42>
      ret = SNMP_ERR_NOERROR;
 801002a:	2300      	movs	r3, #0
 801002c:	75fb      	strb	r3, [r7, #23]
    break;
 801002e:	e006      	b.n	801003e <ip_set_test+0x42>
    if (*sint_ptr == IP_DEFAULT_TTL) {
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2bff      	cmp	r3, #255	@ 0xff
 8010036:	d104      	bne.n	8010042 <ip_set_test+0x46>
      ret = SNMP_ERR_NOERROR;
 8010038:	2300      	movs	r3, #0
 801003a:	75fb      	strb	r3, [r7, #23]
    break;
 801003c:	e001      	b.n	8010042 <ip_set_test+0x46>
    break;
 801003e:	bf00      	nop
 8010040:	e000      	b.n	8010044 <ip_set_test+0x48>
    break;
 8010042:	bf00      	nop
  }

  return ret;
 8010044:	7dfb      	ldrb	r3, [r7, #23]
}
 8010046:	4618      	mov	r0, r3
 8010048:	371c      	adds	r7, #28
 801004a:	46bd      	mov	sp, r7
 801004c:	bc80      	pop	{r7}
 801004e:	4770      	bx	lr

08010050 <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance* instance, u16_t len, void *value)
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	460b      	mov	r3, r1
 801005a:	607a      	str	r2, [r7, #4]
 801005c:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	bc80      	pop	{r7}
 8010068:	4770      	bx	lr
	...

0801006c <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3b01      	subs	r3, #1
 8010080:	2b04      	cmp	r3, #4
 8010082:	d82a      	bhi.n	80100da <ip_AddrTable_get_cell_value_core+0x6e>
 8010084:	a201      	add	r2, pc, #4	@ (adr r2, 801008c <ip_AddrTable_get_cell_value_core+0x20>)
 8010086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801008a:	bf00      	nop
 801008c:	080100a1 	.word	0x080100a1
 8010090:	080100ad 	.word	0x080100ad
 8010094:	080100bd 	.word	0x080100bd
 8010098:	080100c9 	.word	0x080100c9
 801009c:	080100d1 	.word	0x080100d1
  case 1: /* ipAdEntAddr */
    value->u32 = netif_ip4_addr(netif)->addr;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	3304      	adds	r3, #4
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	601a      	str	r2, [r3, #0]
    break;
 80100aa:	e018      	b.n	80100de <ip_AddrTable_get_cell_value_core+0x72>
  case 2: /* ipAdEntIfIndex */
    value->u32 = netif_to_num(netif);
 80100ac:	68f8      	ldr	r0, [r7, #12]
 80100ae:	f7fe febf 	bl	800ee30 <netif_to_num>
 80100b2:	4603      	mov	r3, r0
 80100b4:	461a      	mov	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
    break;
 80100ba:	e010      	b.n	80100de <ip_AddrTable_get_cell_value_core+0x72>
  case 3: /* ipAdEntNetMask */
    value->u32 = netif_ip4_netmask(netif)->addr;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3308      	adds	r3, #8
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	601a      	str	r2, [r3, #0]
    break;
 80100c6:	e00a      	b.n	80100de <ip_AddrTable_get_cell_value_core+0x72>
  case 4: /* ipAdEntBcastAddr */
    /* lwIP oddity, there's no broadcast
       address in the netif we can rely on */
    value->u32 = IPADDR_BROADCAST & 1;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2201      	movs	r2, #1
 80100cc:	601a      	str	r2, [r3, #0]
    break;
 80100ce:	e006      	b.n	80100de <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
    /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
     * but only if receiving one fragmented packet at a time.
     * The current solution is to calculate for 2 simultaneous packets...
     */
    value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS/2) *
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f640 22fa 	movw	r2, #2810	@ 0xafa
 80100d6:	601a      	str	r2, [r3, #0]
#else
    /** @todo returning MTU would be a bad thing and
        returning a wild guess like '576' isn't good either */
    value->u32 = 0;
#endif
    break;
 80100d8:	e001      	b.n	80100de <ip_AddrTable_get_cell_value_core+0x72>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 80100da:	23f1      	movs	r3, #241	@ 0xf1
 80100dc:	e000      	b.n	80100e0 <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	4613      	mov	r3, r2
 80100f6:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 80100f8:	79f9      	ldrb	r1, [r7, #7]
 80100fa:	2304      	movs	r3, #4
 80100fc:	4a15      	ldr	r2, [pc, #84]	@ (8010154 <ip_AddrTable_get_cell_value+0x6c>)
 80100fe:	68b8      	ldr	r0, [r7, #8]
 8010100:	f7ff fbba 	bl	800f878 <snmp_oid_in_range>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 801010a:	23f1      	movs	r3, #241	@ 0xf1
 801010c:	e01e      	b.n	801014c <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 801010e:	f107 0310 	add.w	r3, r7, #16
 8010112:	4619      	mov	r1, r3
 8010114:	68b8      	ldr	r0, [r7, #8]
 8010116:	f7fe fc61 	bl	800e9dc <snmp_oid_to_ip4>

  /* find netif with requested ip */
  netif = netif_list;
 801011a:	4b0f      	ldr	r3, [pc, #60]	@ (8010158 <ip_AddrTable_get_cell_value+0x70>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 8010120:	e010      	b.n	8010144 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 8010122:	693a      	ldr	r2, [r7, #16]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	3304      	adds	r3, #4
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	429a      	cmp	r2, r3
 801012c:	d107      	bne.n	801013e <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	68f9      	ldr	r1, [r7, #12]
 8010134:	6978      	ldr	r0, [r7, #20]
 8010136:	f7ff ff99 	bl	801006c <ip_AddrTable_get_cell_value_core>
 801013a:	4603      	mov	r3, r0
 801013c:	e006      	b.n	801014c <ip_AddrTable_get_cell_value+0x64>
    }

    netif = netif->next;
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1eb      	bne.n	8010122 <ip_AddrTable_get_cell_value+0x3a>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 801014a:	23f1      	movs	r3, #241	@ 0xf1
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	08032208 	.word	0x08032208
 8010158:	2000bbe0 	.word	0x2000bbe0

0801015c <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 801015c:	b590      	push	{r4, r7, lr}
 801015e:	b095      	sub	sp, #84	@ 0x54
 8010160:	af02      	add	r7, sp, #8
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	1d19      	adds	r1, r3, #4
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	781a      	ldrb	r2, [r3, #0]
 8010172:	f107 0320 	add.w	r3, r7, #32
 8010176:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801017a:	2404      	movs	r4, #4
 801017c:	9400      	str	r4, [sp, #0]
 801017e:	f7ff fb16 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 8010182:	4b19      	ldr	r3, [pc, #100]	@ (80101e8 <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 8010188:	e012      	b.n	80101b0 <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 801018a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801018c:	3304      	adds	r3, #4
 801018e:	f107 0210 	add.w	r2, r7, #16
 8010192:	4611      	mov	r1, r2
 8010194:	4618      	mov	r0, r3
 8010196:	f7fe fca9 	bl	800eaec <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 801019a:	f107 0110 	add.w	r1, r7, #16
 801019e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80101a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a4:	2204      	movs	r2, #4
 80101a6:	f7ff fb21 	bl	800f7ec <snmp_next_oid_check>

    netif = netif->next;
 80101aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 80101b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e9      	bne.n	801018a <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80101b6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10e      	bne.n	80101dc <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80101be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80101c4:	4619      	mov	r1, r3
 80101c6:	68b8      	ldr	r0, [r7, #8]
 80101c8:	f7fe fd6e 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif*)state.reference, column, value, value_len);
 80101cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	68f9      	ldr	r1, [r7, #12]
 80101d4:	f7ff ff4a 	bl	801006c <ip_AddrTable_get_cell_value_core>
 80101d8:	4603      	mov	r3, r0
 80101da:	e000      	b.n	80101de <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80101dc:	23f1      	movs	r3, #241	@ 0xf1
}
 80101de:	4618      	mov	r0, r3
 80101e0:	374c      	adds	r7, #76	@ 0x4c
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd90      	pop	{r4, r7, pc}
 80101e6:	bf00      	nop
 80101e8:	2000bbe0 	.word	0x2000bbe0

080101ec <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	603b      	str	r3, [r7, #0]
 80101f8:	460b      	mov	r3, r1
 80101fa:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	2b0c      	cmp	r3, #12
 8010204:	f200 8089 	bhi.w	801031a <ip_RouteTable_get_cell_value_core+0x12e>
 8010208:	a201      	add	r2, pc, #4	@ (adr r2, 8010210 <ip_RouteTable_get_cell_value_core+0x24>)
 801020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020e:	bf00      	nop
 8010210:	08010245 	.word	0x08010245
 8010214:	0801026d 	.word	0x0801026d
 8010218:	0801027d 	.word	0x0801027d
 801021c:	08010293 	.word	0x08010293
 8010220:	08010293 	.word	0x08010293
 8010224:	08010293 	.word	0x08010293
 8010228:	0801029d 	.word	0x0801029d
 801022c:	080102bb 	.word	0x080102bb
 8010230:	080102d1 	.word	0x080102d1
 8010234:	080102d9 	.word	0x080102d9
 8010238:	080102e1 	.word	0x080102e1
 801023c:	080102fd 	.word	0x080102fd
 8010240:	08010307 	.word	0x08010307
  case 1: /* ipRouteDest */
    if (default_route) {
 8010244:	7afb      	ldrb	r3, [r7, #11]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d004      	beq.n	8010254 <ip_RouteTable_get_cell_value_core+0x68>
       /* default rte has 0.0.0.0 dest */
      value->u32 = IP4_ADDR_ANY4->addr;
 801024a:	4b37      	ldr	r3, [pc, #220]	@ (8010328 <ip_RouteTable_get_cell_value_core+0x13c>)
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	601a      	str	r2, [r3, #0]
      /* netifs have netaddress dest */
      ip4_addr_t tmp;
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
      value->u32 = tmp.addr;
    }
    break;
 8010252:	e064      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	3304      	adds	r3, #4
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	3308      	adds	r3, #8
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4013      	ands	r3, r2
 8010262:	617b      	str	r3, [r7, #20]
      value->u32 = tmp.addr;
 8010264:	697a      	ldr	r2, [r7, #20]
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	601a      	str	r2, [r3, #0]
    break;
 801026a:	e058      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 2: /* ipRouteIfIndex */
    value->u32 = netif_to_num(netif);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7fe fddf 	bl	800ee30 <netif_to_num>
 8010272:	4603      	mov	r3, r0
 8010274:	461a      	mov	r2, r3
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	601a      	str	r2, [r3, #0]
    break;
 801027a:	e050      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 3: /* ipRouteMetric1 */
    if (default_route) {
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <ip_RouteTable_get_cell_value_core+0x9e>
      value->s32 = 1; /* default */
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	2201      	movs	r2, #1
 8010286:	601a      	str	r2, [r3, #0]
    } else {
      value->s32 = 0; /* normal */
    }
    break;
 8010288:	e049      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
      value->s32 = 0; /* normal */
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
    break;
 8010290:	e045      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 4: /* ipRouteMetric2 */
  case 5: /* ipRouteMetric3 */
  case 6: /* ipRouteMetric4 */
    value->s32 = -1; /* none */
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	f04f 32ff 	mov.w	r2, #4294967295
 8010298:	601a      	str	r2, [r3, #0]
    break;
 801029a:	e040      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 7: /* ipRouteNextHop */
    if (default_route) {
 801029c:	7afb      	ldrb	r3, [r7, #11]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d005      	beq.n	80102ae <ip_RouteTable_get_cell_value_core+0xc2>
      /* default rte: gateway */
      value->u32 = netif_ip4_gw(netif)->addr;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	330c      	adds	r3, #12
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes: netif ip_addr  */
      value->u32 = netif_ip4_addr(netif)->addr;
    }
    break;
 80102ac:	e037      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_addr(netif)->addr;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3304      	adds	r3, #4
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	601a      	str	r2, [r3, #0]
    break;
 80102b8:	e031      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 8: /* ipRouteType */
    if (default_route) {
 80102ba:	7afb      	ldrb	r3, [r7, #11]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d003      	beq.n	80102c8 <ip_RouteTable_get_cell_value_core+0xdc>
      /* default rte is indirect */
      value->u32 = 4; /* indirect */
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	2204      	movs	r2, #4
 80102c4:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes are direct */
      value->u32 = 3; /* direct */
    }
    break;
 80102c6:	e02a      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = 3; /* direct */
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	2203      	movs	r2, #3
 80102cc:	601a      	str	r2, [r3, #0]
    break;
 80102ce:	e026      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 9: /* ipRouteProto */
    /* locally defined routes */
    value->u32 = 2; /* local */
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	2202      	movs	r2, #2
 80102d4:	601a      	str	r2, [r3, #0]
    break;
 80102d6:	e022      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 10: /* ipRouteAge */
    /* @todo (sysuptime - timestamp last change) / 100 */
    value->u32 = 0;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	2200      	movs	r2, #0
 80102dc:	601a      	str	r2, [r3, #0]
    break;
 80102de:	e01e      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 11: /* ipRouteMask */
    if (default_route) {
 80102e0:	7afb      	ldrb	r3, [r7, #11]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d004      	beq.n	80102f0 <ip_RouteTable_get_cell_value_core+0x104>
      /* default rte use 0.0.0.0 mask */
      value->u32 = IP4_ADDR_ANY4->addr;
 80102e6:	4b10      	ldr	r3, [pc, #64]	@ (8010328 <ip_RouteTable_get_cell_value_core+0x13c>)
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes use netmask */
      value->u32 = netif_ip4_netmask(netif)->addr;
    }
    break;
 80102ee:	e016      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_netmask(netif)->addr;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	3308      	adds	r3, #8
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	601a      	str	r2, [r3, #0]
    break;
 80102fa:	e010      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 12: /* ipRouteMetric5 */
    value->s32 = -1; /* none */
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010302:	601a      	str	r2, [r3, #0]
    break;
 8010304:	e00b      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  case 13: /* ipRouteInfo */
    value->const_ptr = snmp_zero_dot_zero.id;
 8010306:	4b09      	ldr	r3, [pc, #36]	@ (801032c <ip_RouteTable_get_cell_value_core+0x140>)
 8010308:	685a      	ldr	r2, [r3, #4]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	601a      	str	r2, [r3, #0]
    *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 801030e:	4b07      	ldr	r3, [pc, #28]	@ (801032c <ip_RouteTable_get_cell_value_core+0x140>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	009a      	lsls	r2, r3, #2
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	601a      	str	r2, [r3, #0]
    break;
 8010318:	e001      	b.n	801031e <ip_RouteTable_get_cell_value_core+0x132>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 801031a:	23f1      	movs	r3, #241	@ 0xf1
 801031c:	e000      	b.n	8010320 <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	08032ed0 	.word	0x08032ed0
 801032c:	08031f98 	.word	0x08031f98

08010330 <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08a      	sub	sp, #40	@ 0x28
 8010334:	af02      	add	r7, sp, #8
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	4613      	mov	r3, r2
 801033e:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 8010340:	79f9      	ldrb	r1, [r7, #7]
 8010342:	2304      	movs	r3, #4
 8010344:	4a22      	ldr	r2, [pc, #136]	@ (80103d0 <ip_RouteTable_get_cell_value+0xa0>)
 8010346:	68b8      	ldr	r0, [r7, #8]
 8010348:	f7ff fa96 	bl	800f878 <snmp_oid_in_range>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d101      	bne.n	8010356 <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010352:	23f1      	movs	r3, #241	@ 0xf1
 8010354:	e038      	b.n	80103c8 <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 8010356:	f107 0318 	add.w	r3, r7, #24
 801035a:	4619      	mov	r1, r3
 801035c:	68b8      	ldr	r0, [r7, #8]
 801035e:	f7fe fb3d 	bl	800e9dc <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d10e      	bne.n	8010386 <ip_RouteTable_get_cell_value+0x56>
 8010368:	4b1a      	ldr	r3, [pc, #104]	@ (80103d4 <ip_RouteTable_get_cell_value+0xa4>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00a      	beq.n	8010386 <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 8010370:	4b18      	ldr	r3, [pc, #96]	@ (80103d4 <ip_RouteTable_get_cell_value+0xa4>)
 8010372:	6818      	ldr	r0, [r3, #0]
 8010374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	2101      	movs	r1, #1
 801037e:	f7ff ff35 	bl	80101ec <ip_RouteTable_get_cell_value_core>
 8010382:	4603      	mov	r3, r0
 8010384:	e020      	b.n	80103c8 <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  netif = netif_list;
 8010386:	4b14      	ldr	r3, [pc, #80]	@ (80103d8 <ip_RouteTable_get_cell_value+0xa8>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 801038c:	e018      	b.n	80103c0 <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	3304      	adds	r3, #4
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	3308      	adds	r3, #8
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4013      	ands	r3, r2
 801039c:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d109      	bne.n	80103ba <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 80103a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	2100      	movs	r1, #0
 80103b0:	69f8      	ldr	r0, [r7, #28]
 80103b2:	f7ff ff1b 	bl	80101ec <ip_RouteTable_get_cell_value_core>
 80103b6:	4603      	mov	r3, r0
 80103b8:	e006      	b.n	80103c8 <ip_RouteTable_get_cell_value+0x98>
    }

    netif = netif->next;
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1e3      	bne.n	801038e <ip_RouteTable_get_cell_value+0x5e>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80103c6:	23f1      	movs	r3, #241	@ 0xf1
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	08032228 	.word	0x08032228
 80103d4:	2000bbe4 	.word	0x2000bbe4
 80103d8:	2000bbe0 	.word	0x2000bbe0

080103dc <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80103dc:	b590      	push	{r4, r7, lr}
 80103de:	b097      	sub	sp, #92	@ 0x5c
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
 80103e8:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	781a      	ldrb	r2, [r3, #0]
 80103f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80103f6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80103fa:	2404      	movs	r4, #4
 80103fc:	9400      	str	r4, [sp, #0]
 80103fe:	f7ff f9d6 	bl	800f7ae <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 8010402:	4b30      	ldr	r3, [pc, #192]	@ (80104c4 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00e      	beq.n	8010428 <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 801040a:	f107 0318 	add.w	r3, r7, #24
 801040e:	4619      	mov	r1, r3
 8010410:	482d      	ldr	r0, [pc, #180]	@ (80104c8 <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 8010412:	f7fe fb6b 	bl	800eaec <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 8010416:	4b2b      	ldr	r3, [pc, #172]	@ (80104c4 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f107 0118 	add.w	r1, r7, #24
 801041e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8010422:	2204      	movs	r2, #4
 8010424:	f7ff f9e2 	bl	800f7ec <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 8010428:	4b28      	ldr	r3, [pc, #160]	@ (80104cc <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 801042e:	e01d      	b.n	801046c <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 8010430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010432:	3304      	adds	r3, #4
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010438:	3308      	adds	r3, #8
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4013      	ands	r3, r2
 801043e:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00f      	beq.n	8010466 <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 8010446:	f107 0218 	add.w	r2, r7, #24
 801044a:	f107 0314 	add.w	r3, r7, #20
 801044e:	4611      	mov	r1, r2
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fb4b 	bl	800eaec <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 8010456:	f107 0118 	add.w	r1, r7, #24
 801045a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 801045e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010460:	2204      	movs	r2, #4
 8010462:	f7ff f9c3 	bl	800f7ec <snmp_next_oid_check>
    }

    netif = netif->next;
 8010466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 801046c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1de      	bne.n	8010430 <ip_RouteTable_get_next_cell_instance_and_value+0x54>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010472:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8010476:	2b00      	cmp	r3, #0
 8010478:	d11e      	bne.n	80104b8 <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 801047a:	f107 0210 	add.w	r2, r7, #16
 801047e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010482:	4611      	mov	r1, r2
 8010484:	4618      	mov	r0, r3
 8010486:	f7fe faa9 	bl	800e9dc <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801048a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801048c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8010490:	4619      	mov	r1, r3
 8010492:	68b8      	ldr	r0, [r7, #8]
 8010494:	f7fe fc08 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif*)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 8010498:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	bf0c      	ite	eq
 80104a0:	2301      	moveq	r3, #1
 80104a2:	2300      	movne	r3, #0
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	4619      	mov	r1, r3
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	f7ff fe9c 	bl	80101ec <ip_RouteTable_get_cell_value_core>
 80104b4:	4603      	mov	r3, r0
 80104b6:	e000      	b.n	80104ba <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 80104b8:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3754      	adds	r7, #84	@ 0x54
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd90      	pop	{r4, r7, pc}
 80104c2:	bf00      	nop
 80104c4:	2000bbe4 	.word	0x2000bbe4
 80104c8:	08032ed0 	.word	0x08032ed0
 80104cc:	2000bbe0 	.word	0x2000bbe0

080104d0 <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(u8_t arp_table_index, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	607a      	str	r2, [r7, #4]
 80104da:	603b      	str	r3, [r7, #0]
 80104dc:	4603      	mov	r3, r0
 80104de:	73fb      	strb	r3, [r7, #15]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 80104e0:	f107 0314 	add.w	r3, r7, #20
 80104e4:	f107 0218 	add.w	r2, r7, #24
 80104e8:	f107 011c 	add.w	r1, r7, #28
 80104ec:	7bf8      	ldrb	r0, [r7, #15]
 80104ee:	f00e fca9 	bl	801ee44 <etharp_get_entry>

  /* value */
  switch (*column) {
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	2b03      	cmp	r3, #3
 80104fa:	d824      	bhi.n	8010546 <ip_NetToMediaTable_get_cell_value_core+0x76>
 80104fc:	a201      	add	r2, pc, #4	@ (adr r2, 8010504 <ip_NetToMediaTable_get_cell_value_core+0x34>)
 80104fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010502:	bf00      	nop
 8010504:	08010515 	.word	0x08010515
 8010508:	08010527 	.word	0x08010527
 801050c:	08010535 	.word	0x08010535
 8010510:	0801053f 	.word	0x0801053f
  case 1: /* atIfIndex / ipNetToMediaIfIndex */
    value->u32 = netif_to_num(netif);
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe fc8a 	bl	800ee30 <netif_to_num>
 801051c:	4603      	mov	r3, r0
 801051e:	461a      	mov	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	601a      	str	r2, [r3, #0]
    break;
 8010524:	e011      	b.n	801054a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
    value->ptr = ethaddr;
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	601a      	str	r2, [r3, #0]
    *value_len = sizeof(*ethaddr);
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	2206      	movs	r2, #6
 8010530:	601a      	str	r2, [r3, #0]
    break;
 8010532:	e00a      	b.n	801054a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 3: /* atNetAddress / ipNetToMediaNetAddress */
    value->u32 = ip->addr;
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	601a      	str	r2, [r3, #0]
    break;
 801053c:	e005      	b.n	801054a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 4: /* ipNetToMediaType */
    value->u32 = 3; /* dynamic*/
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2203      	movs	r2, #3
 8010542:	601a      	str	r2, [r3, #0]
    break;
 8010544:	e001      	b.n	801054a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8010546:	23f1      	movs	r3, #241	@ 0xf1
 8010548:	e000      	b.n	801054c <ip_NetToMediaTable_get_cell_value_core+0x7c>
  }

  return SNMP_ERR_NOERROR;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3720      	adds	r7, #32
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	@ 0x28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	4613      	mov	r3, r2
 8010562:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  u8_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 8010564:	79f9      	ldrb	r1, [r7, #7]
 8010566:	2305      	movs	r3, #5
 8010568:	4a25      	ldr	r2, [pc, #148]	@ (8010600 <ip_NetToMediaTable_get_cell_value+0xac>)
 801056a:	68b8      	ldr	r0, [r7, #8]
 801056c:	f7ff f984 	bl	800f878 <snmp_oid_in_range>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010576:	23f1      	movs	r3, #241	@ 0xf1
 8010578:	e03e      	b.n	80105f8 <ip_NetToMediaTable_get_cell_value+0xa4>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	3304      	adds	r3, #4
 8010586:	f107 0220 	add.w	r2, r7, #32
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fa25 	bl	800e9dc <snmp_oid_to_ip4>

  /* find requested entry */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 8010592:	2300      	movs	r3, #0
 8010594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010598:	e029      	b.n	80105ee <ip_NetToMediaTable_get_cell_value+0x9a>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 801059a:	f107 0314 	add.w	r3, r7, #20
 801059e:	f107 0218 	add.w	r2, r7, #24
 80105a2:	f107 011c 	add.w	r1, r7, #28
 80105a6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80105aa:	f00e fc4b 	bl	801ee44 <etharp_get_entry>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d017      	beq.n	80105e4 <ip_NetToMediaTable_get_cell_value+0x90>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fc3a 	bl	800ee30 <netif_to_num>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
 80105c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d10d      	bne.n	80105e4 <ip_NetToMediaTable_get_cell_value+0x90>
 80105c8:	6a3a      	ldr	r2, [r7, #32]
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d108      	bne.n	80105e4 <ip_NetToMediaTable_get_cell_value+0x90>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 80105d2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80105d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d8:	683a      	ldr	r2, [r7, #0]
 80105da:	68f9      	ldr	r1, [r7, #12]
 80105dc:	f7ff ff78 	bl	80104d0 <ip_NetToMediaTable_get_cell_value_core>
 80105e0:	4603      	mov	r3, r0
 80105e2:	e009      	b.n	80105f8 <ip_NetToMediaTable_get_cell_value+0xa4>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 80105e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105e8:	3301      	adds	r3, #1
 80105ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80105ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105f2:	2b09      	cmp	r3, #9
 80105f4:	d9d1      	bls.n	801059a <ip_NetToMediaTable_get_cell_value+0x46>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80105f6:	23f1      	movs	r3, #241	@ 0xf1
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3728      	adds	r7, #40	@ 0x28
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	08032248 	.word	0x08032248

08010604 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010604:	b590      	push	{r4, r7, lr}
 8010606:	b09b      	sub	sp, #108	@ 0x6c
 8010608:	af02      	add	r7, sp, #8
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
 8010610:	603b      	str	r3, [r7, #0]
  u8_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	1d19      	adds	r1, r3, #4
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	781a      	ldrb	r2, [r3, #0]
 801061a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801061e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8010622:	2405      	movs	r4, #5
 8010624:	9400      	str	r4, [sp, #0]
 8010626:	f7ff f8c2 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 801062a:	2300      	movs	r3, #0
 801062c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010630:	e028      	b.n	8010684 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x80>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 8010632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010636:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801063a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801063e:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 8010642:	f00e fbff 	bl	801ee44 <etharp_get_entry>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d016      	beq.n	801067a <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe fbee 	bl	800ee30 <netif_to_num>
 8010654:	4603      	mov	r3, r0
 8010656:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 8010658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801065a:	f107 0314 	add.w	r3, r7, #20
 801065e:	3304      	adds	r3, #4
 8010660:	4619      	mov	r1, r3
 8010662:	4610      	mov	r0, r2
 8010664:	f7fe fa42 	bl	800eaec <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void*, i));
 8010668:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801066c:	f107 0114 	add.w	r1, r7, #20
 8010670:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8010674:	2205      	movs	r2, #5
 8010676:	f7ff f8b9 	bl	800f7ec <snmp_next_oid_check>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 801067a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801067e:	3301      	adds	r3, #1
 8010680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010684:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010688:	2b09      	cmp	r3, #9
 801068a:	d9d2      	bls.n	8010632 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 801068c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10f      	bne.n	80106b4 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb0>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010696:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801069a:	4619      	mov	r1, r3
 801069c:	68b8      	ldr	r0, [r7, #8]
 801069e:	f7fe fb03 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(u8_t, state.reference), column, value, value_len);
 80106a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106a4:	b2d8      	uxtb	r0, r3
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	68f9      	ldr	r1, [r7, #12]
 80106ac:	f7ff ff10 	bl	80104d0 <ip_NetToMediaTable_get_cell_value_core>
 80106b0:	4603      	mov	r3, r0
 80106b2:	e000      	b.n	80106b6 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb2>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80106b4:	23f1      	movs	r3, #241	@ 0xf1
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3764      	adds	r7, #100	@ 0x64
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd90      	pop	{r4, r7, pc}
	...

080106c0 <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3b01      	subs	r3, #1
 80106d4:	2b1f      	cmp	r3, #31
 80106d6:	f200 80df 	bhi.w	8010898 <snmp_get_value+0x1d8>
 80106da:	a201      	add	r2, pc, #4	@ (adr r2, 80106e0 <snmp_get_value+0x20>)
 80106dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e0:	08010761 	.word	0x08010761
 80106e4:	0801076b 	.word	0x0801076b
 80106e8:	08010775 	.word	0x08010775
 80106ec:	0801077f 	.word	0x0801077f
 80106f0:	08010789 	.word	0x08010789
 80106f4:	08010793 	.word	0x08010793
 80106f8:	08010899 	.word	0x08010899
 80106fc:	0801079d 	.word	0x0801079d
 8010700:	080107a7 	.word	0x080107a7
 8010704:	080107b1 	.word	0x080107b1
 8010708:	080107bb 	.word	0x080107bb
 801070c:	080107c5 	.word	0x080107c5
 8010710:	080107cf 	.word	0x080107cf
 8010714:	080107d9 	.word	0x080107d9
 8010718:	080107e3 	.word	0x080107e3
 801071c:	080107ed 	.word	0x080107ed
 8010720:	080107f7 	.word	0x080107f7
 8010724:	08010801 	.word	0x08010801
 8010728:	0801080b 	.word	0x0801080b
 801072c:	08010815 	.word	0x08010815
 8010730:	0801081f 	.word	0x0801081f
 8010734:	08010829 	.word	0x08010829
 8010738:	08010899 	.word	0x08010899
 801073c:	08010833 	.word	0x08010833
 8010740:	0801083d 	.word	0x0801083d
 8010744:	08010847 	.word	0x08010847
 8010748:	08010851 	.word	0x08010851
 801074c:	0801085b 	.word	0x0801085b
 8010750:	08010865 	.word	0x08010865
 8010754:	0801086f 	.word	0x0801086f
 8010758:	08010889 	.word	0x08010889
 801075c:	08010891 	.word	0x08010891
  case 1: /* snmpInPkts */
    *uint_ptr = snmp_stats.inpkts;
 8010760:	4b51      	ldr	r3, [pc, #324]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	601a      	str	r2, [r3, #0]
    break;
 8010768:	e098      	b.n	801089c <snmp_get_value+0x1dc>
  case 2: /* snmpOutPkts */
    *uint_ptr = snmp_stats.outpkts;
 801076a:	4b4f      	ldr	r3, [pc, #316]	@ (80108a8 <snmp_get_value+0x1e8>)
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	601a      	str	r2, [r3, #0]
    break;
 8010772:	e093      	b.n	801089c <snmp_get_value+0x1dc>
  case 3: /* snmpInBadVersions */
    *uint_ptr = snmp_stats.inbadversions;
 8010774:	4b4c      	ldr	r3, [pc, #304]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010776:	689a      	ldr	r2, [r3, #8]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	601a      	str	r2, [r3, #0]
    break;
 801077c:	e08e      	b.n	801089c <snmp_get_value+0x1dc>
  case 4: /* snmpInBadCommunityNames */
    *uint_ptr = snmp_stats.inbadcommunitynames;
 801077e:	4b4a      	ldr	r3, [pc, #296]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010780:	68da      	ldr	r2, [r3, #12]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	601a      	str	r2, [r3, #0]
    break;
 8010786:	e089      	b.n	801089c <snmp_get_value+0x1dc>
  case 5: /* snmpInBadCommunityUses */
    *uint_ptr = snmp_stats.inbadcommunityuses;
 8010788:	4b47      	ldr	r3, [pc, #284]	@ (80108a8 <snmp_get_value+0x1e8>)
 801078a:	691a      	ldr	r2, [r3, #16]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	601a      	str	r2, [r3, #0]
    break;
 8010790:	e084      	b.n	801089c <snmp_get_value+0x1dc>
  case 6: /* snmpInASNParseErrs */
    *uint_ptr = snmp_stats.inasnparseerrs;
 8010792:	4b45      	ldr	r3, [pc, #276]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010794:	695a      	ldr	r2, [r3, #20]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	601a      	str	r2, [r3, #0]
    break;
 801079a:	e07f      	b.n	801089c <snmp_get_value+0x1dc>
  case 8: /* snmpInTooBigs */
    *uint_ptr = snmp_stats.intoobigs;
 801079c:	4b42      	ldr	r3, [pc, #264]	@ (80108a8 <snmp_get_value+0x1e8>)
 801079e:	699a      	ldr	r2, [r3, #24]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	601a      	str	r2, [r3, #0]
    break;
 80107a4:	e07a      	b.n	801089c <snmp_get_value+0x1dc>
  case 9: /* snmpInNoSuchNames */
    *uint_ptr = snmp_stats.innosuchnames;
 80107a6:	4b40      	ldr	r3, [pc, #256]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107a8:	69da      	ldr	r2, [r3, #28]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	601a      	str	r2, [r3, #0]
    break;
 80107ae:	e075      	b.n	801089c <snmp_get_value+0x1dc>
  case 10: /* snmpInBadValues */
    *uint_ptr = snmp_stats.inbadvalues;
 80107b0:	4b3d      	ldr	r3, [pc, #244]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107b2:	6a1a      	ldr	r2, [r3, #32]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	601a      	str	r2, [r3, #0]
    break;
 80107b8:	e070      	b.n	801089c <snmp_get_value+0x1dc>
  case 11: /* snmpInReadOnlys */
    *uint_ptr = snmp_stats.inreadonlys;
 80107ba:	4b3b      	ldr	r3, [pc, #236]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	601a      	str	r2, [r3, #0]
    break;
 80107c2:	e06b      	b.n	801089c <snmp_get_value+0x1dc>
  case 12: /* snmpInGenErrs */
    *uint_ptr = snmp_stats.ingenerrs;
 80107c4:	4b38      	ldr	r3, [pc, #224]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	601a      	str	r2, [r3, #0]
    break;
 80107cc:	e066      	b.n	801089c <snmp_get_value+0x1dc>
  case 13: /* snmpInTotalReqVars */
    *uint_ptr = snmp_stats.intotalreqvars;
 80107ce:	4b36      	ldr	r3, [pc, #216]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	601a      	str	r2, [r3, #0]
    break;
 80107d6:	e061      	b.n	801089c <snmp_get_value+0x1dc>
  case 14: /* snmpInTotalSetVars */
    *uint_ptr = snmp_stats.intotalsetvars;
 80107d8:	4b33      	ldr	r3, [pc, #204]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	601a      	str	r2, [r3, #0]
    break;
 80107e0:	e05c      	b.n	801089c <snmp_get_value+0x1dc>
  case 15: /* snmpInGetRequests */
    *uint_ptr = snmp_stats.ingetrequests;
 80107e2:	4b31      	ldr	r3, [pc, #196]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	601a      	str	r2, [r3, #0]
    break;
 80107ea:	e057      	b.n	801089c <snmp_get_value+0x1dc>
  case 16: /* snmpInGetNexts */
    *uint_ptr = snmp_stats.ingetnexts;
 80107ec:	4b2e      	ldr	r3, [pc, #184]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	601a      	str	r2, [r3, #0]
    break;
 80107f4:	e052      	b.n	801089c <snmp_get_value+0x1dc>
  case 17: /* snmpInSetRequests */
    *uint_ptr = snmp_stats.insetrequests;
 80107f6:	4b2c      	ldr	r3, [pc, #176]	@ (80108a8 <snmp_get_value+0x1e8>)
 80107f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	601a      	str	r2, [r3, #0]
    break;
 80107fe:	e04d      	b.n	801089c <snmp_get_value+0x1dc>
  case 18: /* snmpInGetResponses */
    *uint_ptr = snmp_stats.ingetresponses;
 8010800:	4b29      	ldr	r3, [pc, #164]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	601a      	str	r2, [r3, #0]
    break;
 8010808:	e048      	b.n	801089c <snmp_get_value+0x1dc>
  case 19: /* snmpInTraps */
    *uint_ptr = snmp_stats.intraps;
 801080a:	4b27      	ldr	r3, [pc, #156]	@ (80108a8 <snmp_get_value+0x1e8>)
 801080c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	601a      	str	r2, [r3, #0]
    break;
 8010812:	e043      	b.n	801089c <snmp_get_value+0x1dc>
  case 20: /* snmpOutTooBigs */
    *uint_ptr = snmp_stats.outtoobigs;
 8010814:	4b24      	ldr	r3, [pc, #144]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	601a      	str	r2, [r3, #0]
    break;
 801081c:	e03e      	b.n	801089c <snmp_get_value+0x1dc>
  case 21: /* snmpOutNoSuchNames */
    *uint_ptr = snmp_stats.outnosuchnames;
 801081e:	4b22      	ldr	r3, [pc, #136]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010820:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	601a      	str	r2, [r3, #0]
    break;
 8010826:	e039      	b.n	801089c <snmp_get_value+0x1dc>
  case 22: /* snmpOutBadValues */
    *uint_ptr = snmp_stats.outbadvalues;
 8010828:	4b1f      	ldr	r3, [pc, #124]	@ (80108a8 <snmp_get_value+0x1e8>)
 801082a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	601a      	str	r2, [r3, #0]
    break;
 8010830:	e034      	b.n	801089c <snmp_get_value+0x1dc>
  case 24: /* snmpOutGenErrs */
    *uint_ptr = snmp_stats.outgenerrs;
 8010832:	4b1d      	ldr	r3, [pc, #116]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	601a      	str	r2, [r3, #0]
    break;
 801083a:	e02f      	b.n	801089c <snmp_get_value+0x1dc>
  case 25: /* snmpOutGetRequests */
    *uint_ptr = snmp_stats.outgetrequests;
 801083c:	4b1a      	ldr	r3, [pc, #104]	@ (80108a8 <snmp_get_value+0x1e8>)
 801083e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	601a      	str	r2, [r3, #0]
    break;
 8010844:	e02a      	b.n	801089c <snmp_get_value+0x1dc>
  case 26: /* snmpOutGetNexts */
    *uint_ptr = snmp_stats.outgetnexts;
 8010846:	4b18      	ldr	r3, [pc, #96]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	601a      	str	r2, [r3, #0]
    break;
 801084e:	e025      	b.n	801089c <snmp_get_value+0x1dc>
  case 27: /* snmpOutSetRequests */
    *uint_ptr = snmp_stats.outsetrequests;
 8010850:	4b15      	ldr	r3, [pc, #84]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010852:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	601a      	str	r2, [r3, #0]
    break;
 8010858:	e020      	b.n	801089c <snmp_get_value+0x1dc>
  case 28: /* snmpOutGetResponses */
    *uint_ptr = snmp_stats.outgetresponses;
 801085a:	4b13      	ldr	r3, [pc, #76]	@ (80108a8 <snmp_get_value+0x1e8>)
 801085c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	601a      	str	r2, [r3, #0]
    break;
 8010862:	e01b      	b.n	801089c <snmp_get_value+0x1dc>
  case 29: /* snmpOutTraps */
    *uint_ptr = snmp_stats.outtraps;
 8010864:	4b10      	ldr	r3, [pc, #64]	@ (80108a8 <snmp_get_value+0x1e8>)
 8010866:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	601a      	str	r2, [r3, #0]
    break;
 801086c:	e016      	b.n	801089c <snmp_get_value+0x1dc>
  case 30: /* snmpEnableAuthenTraps */
    if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 801086e:	f003 ff05 	bl	801467c <snmp_get_auth_traps_enabled>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <snmp_get_value+0x1c0>
      *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2202      	movs	r2, #2
 801087c:	601a      	str	r2, [r3, #0]
    } else {
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
    }
    break;
 801087e:	e00d      	b.n	801089c <snmp_get_value+0x1dc>
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2201      	movs	r2, #1
 8010884:	601a      	str	r2, [r3, #0]
    break;
 8010886:	e009      	b.n	801089c <snmp_get_value+0x1dc>
  case 31: /* snmpSilentDrops */
    *uint_ptr = 0; /* not supported */
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2200      	movs	r2, #0
 801088c:	601a      	str	r2, [r3, #0]
    break;
 801088e:	e005      	b.n	801089c <snmp_get_value+0x1dc>
  case 32: /* snmpProxyDrops */
    *uint_ptr = 0; /* not supported */
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]
    break;
 8010896:	e001      	b.n	801089c <snmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 8010898:	2300      	movs	r3, #0
 801089a:	e000      	b.n	801089e <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 801089c:	2304      	movs	r3, #4
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	2000854c 	.word	0x2000854c

080108ac <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b087      	sub	sp, #28
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	460b      	mov	r3, r1
 80108b6:	607a      	str	r2, [r7, #4]
 80108b8:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 80108ba:	230a      	movs	r3, #10
 80108bc:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b1e      	cmp	r3, #30
 80108c4:	d10b      	bne.n	80108de <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d003      	beq.n	80108da <snmp_set_test+0x2e>
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d101      	bne.n	80108de <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 80108da:	2300      	movs	r3, #0
 80108dc:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80108de:	7dfb      	ldrb	r3, [r7, #23]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	371c      	adds	r7, #28
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bc80      	pop	{r7}
 80108e8:	4770      	bx	lr

080108ea <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b086      	sub	sp, #24
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	60f8      	str	r0, [r7, #12]
 80108f2:	460b      	mov	r3, r1
 80108f4:	607a      	str	r2, [r7, #4]
 80108f6:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b1e      	cmp	r3, #30
 80108fe:	d10c      	bne.n	801091a <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b02      	cmp	r3, #2
 801090a:	d103      	bne.n	8010914 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 801090c:	2000      	movs	r0, #0
 801090e:	f003 fea5 	bl	801465c <snmp_set_auth_traps_enabled>
 8010912:	e002      	b.n	801091a <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 8010914:	2001      	movs	r0, #1
 8010916:	f003 fea1 	bl	801465c <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  const u8_t*  var = NULL;
 801092e:	2300      	movs	r3, #0
 8010930:	617b      	str	r3, [r7, #20]
  const s16_t* var_len;
  u16_t result;

  switch (node->oid) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3b01      	subs	r3, #1
 8010938:	2b06      	cmp	r3, #6
 801093a:	d84f      	bhi.n	80109dc <system_get_value+0xb8>
 801093c:	a201      	add	r2, pc, #4	@ (adr r2, 8010944 <system_get_value+0x20>)
 801093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010942:	bf00      	nop
 8010944:	08010961 	.word	0x08010961
 8010948:	0801096f 	.word	0x0801096f
 801094c:	08010993 	.word	0x08010993
 8010950:	080109a9 	.word	0x080109a9
 8010954:	080109b7 	.word	0x080109b7
 8010958:	080109c5 	.word	0x080109c5
 801095c:	080109d3 	.word	0x080109d3
  case 1: /* sysDescr */
    var     = sysdescr;
 8010960:	4b31      	ldr	r3, [pc, #196]	@ (8010a28 <system_get_value+0x104>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysdescr_len;
 8010966:	4b31      	ldr	r3, [pc, #196]	@ (8010a2c <system_get_value+0x108>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	613b      	str	r3, [r7, #16]
    break;
 801096c:	e038      	b.n	80109e0 <system_get_value+0xbc>
  case 2: /* sysObjectID */
    {
      const struct snmp_obj_id* dev_enterprise_oid = snmp_get_device_enterprise_oid();
 801096e:	f7fe f82b 	bl	800e9c8 <snmp_get_device_enterprise_oid>
 8010972:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	1d19      	adds	r1, r3, #4
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	461a      	mov	r2, r3
 8010980:	6838      	ldr	r0, [r7, #0]
 8010982:	f011 ff5e 	bl	8022842 <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	b29b      	uxth	r3, r3
 801098e:	b21b      	sxth	r3, r3
 8010990:	e045      	b.n	8010a1e <system_get_value+0xfa>
    }
  case 3: /* sysUpTime */
    MIB2_COPY_SYSUPTIME_TO((u32_t*)value);
 8010992:	f7fb fac7 	bl	800bf24 <sys_now>
 8010996:	4603      	mov	r3, r0
 8010998:	4a25      	ldr	r2, [pc, #148]	@ (8010a30 <system_get_value+0x10c>)
 801099a:	fba2 2303 	umull	r2, r3, r2, r3
 801099e:	08da      	lsrs	r2, r3, #3
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	601a      	str	r2, [r3, #0]
    return sizeof(u32_t);
 80109a4:	2304      	movs	r3, #4
 80109a6:	e03a      	b.n	8010a1e <system_get_value+0xfa>
  case 4: /* sysContact */
    var     = syscontact;
 80109a8:	4b22      	ldr	r3, [pc, #136]	@ (8010a34 <system_get_value+0x110>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syscontact_len;
 80109ae:	4b22      	ldr	r3, [pc, #136]	@ (8010a38 <system_get_value+0x114>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	613b      	str	r3, [r7, #16]
    break;
 80109b4:	e014      	b.n	80109e0 <system_get_value+0xbc>
  case 5: /* sysName */
    var     = sysname;
 80109b6:	4b21      	ldr	r3, [pc, #132]	@ (8010a3c <system_get_value+0x118>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysname_len;
 80109bc:	4b20      	ldr	r3, [pc, #128]	@ (8010a40 <system_get_value+0x11c>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	613b      	str	r3, [r7, #16]
    break;
 80109c2:	e00d      	b.n	80109e0 <system_get_value+0xbc>
  case 6: /* sysLocation */
    var     = syslocation;
 80109c4:	4b1f      	ldr	r3, [pc, #124]	@ (8010a44 <system_get_value+0x120>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syslocation_len;
 80109ca:	4b1f      	ldr	r3, [pc, #124]	@ (8010a48 <system_get_value+0x124>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	613b      	str	r3, [r7, #16]
    break;
 80109d0:	e006      	b.n	80109e0 <system_get_value+0xbc>
  case 7: /* sysServices */
    *(s32_t*)value = SNMP_SYSSERVICES;
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2248      	movs	r2, #72	@ 0x48
 80109d6:	601a      	str	r2, [r3, #0]
    return sizeof(s32_t);
 80109d8:	2304      	movs	r3, #4
 80109da:	e020      	b.n	8010a1e <system_get_value+0xfa>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	e01e      	b.n	8010a1e <system_get_value+0xfa>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <system_get_value+0xd0>
 80109e6:	4b19      	ldr	r3, [pc, #100]	@ (8010a4c <system_get_value+0x128>)
 80109e8:	f240 120f 	movw	r2, #271	@ 0x10f
 80109ec:	4918      	ldr	r1, [pc, #96]	@ (8010a50 <system_get_value+0x12c>)
 80109ee:	4819      	ldr	r0, [pc, #100]	@ (8010a54 <system_get_value+0x130>)
 80109f0:	f011 fc2c 	bl	802224c <iprintf>
  if (var_len == NULL) {
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d105      	bne.n	8010a06 <system_get_value+0xe2>
    result = (s16_t)strlen((const char*)var);
 80109fa:	6978      	ldr	r0, [r7, #20]
 80109fc:	f7ef fbee 	bl	80001dc <strlen>
 8010a00:	4603      	mov	r3, r0
 8010a02:	81fb      	strh	r3, [r7, #14]
 8010a04:	e003      	b.n	8010a0e <system_get_value+0xea>
  } else {
    result = *var_len;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a0c:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 8010a0e:	89fb      	ldrh	r3, [r7, #14]
 8010a10:	461a      	mov	r2, r3
 8010a12:	6979      	ldr	r1, [r7, #20]
 8010a14:	6838      	ldr	r0, [r7, #0]
 8010a16:	f011 ff14 	bl	8022842 <memcpy>
  return result;
 8010a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3718      	adds	r7, #24
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	200000fc 	.word	0x200000fc
 8010a2c:	200085b8 	.word	0x200085b8
 8010a30:	cccccccd 	.word	0xcccccccd
 8010a34:	20000100 	.word	0x20000100
 8010a38:	200085bc 	.word	0x200085bc
 8010a3c:	20000104 	.word	0x20000104
 8010a40:	200085cc 	.word	0x200085cc
 8010a44:	20000108 	.word	0x20000108
 8010a48:	200085dc 	.word	0x200085dc
 8010a4c:	08025b30 	.word	0x08025b30
 8010a50:	08025b74 	.word	0x08025b74
 8010a54:	08025b78 	.word	0x08025b78

08010a58 <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b089      	sub	sp, #36	@ 0x24
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	460b      	mov	r3, r1
 8010a62:	607a      	str	r2, [r7, #4]
 8010a64:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8010a66:	230a      	movs	r3, #10
 8010a68:	77fb      	strb	r3, [r7, #31]
  const u16_t* var_bufsize  = NULL;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	61bb      	str	r3, [r7, #24]
  const u16_t* var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b06      	cmp	r3, #6
 8010a74:	d012      	beq.n	8010a9c <system_set_test+0x44>
 8010a76:	2b06      	cmp	r3, #6
 8010a78:	d816      	bhi.n	8010aa8 <system_set_test+0x50>
 8010a7a:	2b04      	cmp	r3, #4
 8010a7c:	d002      	beq.n	8010a84 <system_set_test+0x2c>
 8010a7e:	2b05      	cmp	r3, #5
 8010a80:	d006      	beq.n	8010a90 <system_set_test+0x38>
 8010a82:	e011      	b.n	8010aa8 <system_set_test+0x50>
  case 4: /* sysContact */
    var_bufsize  = &syscontact_bufsize;
 8010a84:	4b19      	ldr	r3, [pc, #100]	@ (8010aec <system_set_test+0x94>)
 8010a86:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syscontact_wr_len;
 8010a88:	4b19      	ldr	r3, [pc, #100]	@ (8010af0 <system_set_test+0x98>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	617b      	str	r3, [r7, #20]
    break;
 8010a8e:	e00d      	b.n	8010aac <system_set_test+0x54>
  case 5: /* sysName */
    var_bufsize  = &sysname_bufsize;
 8010a90:	4b18      	ldr	r3, [pc, #96]	@ (8010af4 <system_set_test+0x9c>)
 8010a92:	61bb      	str	r3, [r7, #24]
    var_wr_len   = sysname_wr_len;
 8010a94:	4b18      	ldr	r3, [pc, #96]	@ (8010af8 <system_set_test+0xa0>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	617b      	str	r3, [r7, #20]
    break;
 8010a9a:	e007      	b.n	8010aac <system_set_test+0x54>
  case 6: /* sysLocation */
    var_bufsize  = &syslocation_bufsize;
 8010a9c:	4b17      	ldr	r3, [pc, #92]	@ (8010afc <system_set_test+0xa4>)
 8010a9e:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syslocation_wr_len;
 8010aa0:	4b17      	ldr	r3, [pc, #92]	@ (8010b00 <system_set_test+0xa8>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	617b      	str	r3, [r7, #20]
    break;
 8010aa6:	e001      	b.n	8010aac <system_set_test+0x54>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_test(): unknown id: %"S32_F"\n", node->oid));
    return ret;
 8010aa8:	7ffb      	ldrb	r3, [r7, #31]
 8010aaa:	e019      	b.n	8010ae0 <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	881b      	ldrh	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d012      	beq.n	8010ada <system_set_test+0x82>
    if (var_wr_len == NULL) {
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d107      	bne.n	8010aca <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	897a      	ldrh	r2, [r7, #10]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d20c      	bcs.n	8010ade <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	77fb      	strb	r3, [r7, #31]
 8010ac8:	e009      	b.n	8010ade <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	881b      	ldrh	r3, [r3, #0]
 8010ace:	897a      	ldrh	r2, [r7, #10]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d804      	bhi.n	8010ade <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	77fb      	strb	r3, [r7, #31]
 8010ad8:	e001      	b.n	8010ade <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 8010ada:	2311      	movs	r3, #17
 8010adc:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8010ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3724      	adds	r7, #36	@ 0x24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bc80      	pop	{r7}
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop
 8010aec:	200085c8 	.word	0x200085c8
 8010af0:	200085c4 	.word	0x200085c4
 8010af4:	200085d8 	.word	0x200085d8
 8010af8:	200085d4 	.word	0x200085d4
 8010afc:	200085e8 	.word	0x200085e8
 8010b00:	200085e4 	.word	0x200085e4

08010b04 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	607a      	str	r2, [r7, #4]
 8010b10:	817b      	strh	r3, [r7, #10]
  u8_t*  var_wr = NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
  u16_t* var_wr_len;

  switch (node->oid) {
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b06      	cmp	r3, #6
 8010b1c:	d014      	beq.n	8010b48 <system_set_value+0x44>
 8010b1e:	2b06      	cmp	r3, #6
 8010b20:	d819      	bhi.n	8010b56 <system_set_value+0x52>
 8010b22:	2b04      	cmp	r3, #4
 8010b24:	d002      	beq.n	8010b2c <system_set_value+0x28>
 8010b26:	2b05      	cmp	r3, #5
 8010b28:	d007      	beq.n	8010b3a <system_set_value+0x36>
 8010b2a:	e014      	b.n	8010b56 <system_set_value+0x52>
  case 4: /* sysContact */
    var_wr     = syscontact_wr;
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8010b9c <system_set_value+0x98>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	617b      	str	r3, [r7, #20]
    var_wr_len = syscontact_wr_len;
 8010b32:	4b1b      	ldr	r3, [pc, #108]	@ (8010ba0 <system_set_value+0x9c>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	613b      	str	r3, [r7, #16]
    break;
 8010b38:	e00f      	b.n	8010b5a <system_set_value+0x56>
  case 5: /* sysName */
    var_wr     = sysname_wr;
 8010b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ba4 <system_set_value+0xa0>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
    var_wr_len = sysname_wr_len;
 8010b40:	4b19      	ldr	r3, [pc, #100]	@ (8010ba8 <system_set_value+0xa4>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	613b      	str	r3, [r7, #16]
    break;
 8010b46:	e008      	b.n	8010b5a <system_set_value+0x56>
  case 6: /* sysLocation */
    var_wr     = syslocation_wr;
 8010b48:	4b18      	ldr	r3, [pc, #96]	@ (8010bac <system_set_value+0xa8>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	617b      	str	r3, [r7, #20]
    var_wr_len = syslocation_wr_len;
 8010b4e:	4b18      	ldr	r3, [pc, #96]	@ (8010bb0 <system_set_value+0xac>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	613b      	str	r3, [r7, #16]
    break;
 8010b54:	e001      	b.n	8010b5a <system_set_value+0x56>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_value(): unknown id: %"S32_F"\n", node->oid));
    return SNMP_ERR_GENERROR;
 8010b56:	2305      	movs	r3, #5
 8010b58:	e01c      	b.n	8010b94 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d106      	bne.n	8010b6e <system_set_value+0x6a>
 8010b60:	4b14      	ldr	r3, [pc, #80]	@ (8010bb4 <system_set_value+0xb0>)
 8010b62:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8010b66:	4914      	ldr	r1, [pc, #80]	@ (8010bb8 <system_set_value+0xb4>)
 8010b68:	4814      	ldr	r0, [pc, #80]	@ (8010bbc <system_set_value+0xb8>)
 8010b6a:	f011 fb6f 	bl	802224c <iprintf>
  MEMCPY(var_wr, value, len);
 8010b6e:	897b      	ldrh	r3, [r7, #10]
 8010b70:	461a      	mov	r2, r3
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	6978      	ldr	r0, [r7, #20]
 8010b76:	f011 fe64 	bl	8022842 <memcpy>
  
  if (var_wr_len == NULL) {
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d105      	bne.n	8010b8c <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 8010b80:	897b      	ldrh	r3, [r7, #10]
 8010b82:	697a      	ldr	r2, [r7, #20]
 8010b84:	4413      	add	r3, r2
 8010b86:	2200      	movs	r2, #0
 8010b88:	701a      	strb	r2, [r3, #0]
 8010b8a:	e002      	b.n	8010b92 <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	897a      	ldrh	r2, [r7, #10]
 8010b90:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3718      	adds	r7, #24
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	200085c0 	.word	0x200085c0
 8010ba0:	200085c4 	.word	0x200085c4
 8010ba4:	200085d0 	.word	0x200085d0
 8010ba8:	200085d4 	.word	0x200085d4
 8010bac:	200085e0 	.word	0x200085e0
 8010bb0:	200085e4 	.word	0x200085e4
 8010bb4:	08025b30 	.word	0x08025b30
 8010bb8:	08025b74 	.word	0x08025b74
 8010bbc:	08025b78 	.word	0x08025b78

08010bc0 <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance* instance, void* value)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	60fb      	str	r3, [r7, #12]
  s32_t *sint_ptr = (s32_t*)value;
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	2b11      	cmp	r3, #17
 8010bdc:	f200 80a7 	bhi.w	8010d2e <tcp_get_value+0x16e>
 8010be0:	a201      	add	r2, pc, #4	@ (adr r2, 8010be8 <tcp_get_value+0x28>)
 8010be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be6:	bf00      	nop
 8010be8:	08010c31 	.word	0x08010c31
 8010bec:	08010c3b 	.word	0x08010c3b
 8010bf0:	08010c47 	.word	0x08010c47
 8010bf4:	08010c53 	.word	0x08010c53
 8010bf8:	08010c5d 	.word	0x08010c5d
 8010bfc:	08010c6b 	.word	0x08010c6b
 8010c00:	08010c79 	.word	0x08010c79
 8010c04:	08010c87 	.word	0x08010c87
 8010c08:	08010c95 	.word	0x08010c95
 8010c0c:	08010ccd 	.word	0x08010ccd
 8010c10:	08010cdb 	.word	0x08010cdb
 8010c14:	08010ce9 	.word	0x08010ce9
 8010c18:	08010d2f 	.word	0x08010d2f
 8010c1c:	08010cf7 	.word	0x08010cf7
 8010c20:	08010d05 	.word	0x08010d05
 8010c24:	08010d2f 	.word	0x08010d2f
 8010c28:	08010d13 	.word	0x08010d13
 8010c2c:	08010d21 	.word	0x08010d21
  case 1: /* tcpRtoAlgorithm, vanj(4) */
    *sint_ptr = 4;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2204      	movs	r2, #4
 8010c34:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c36:	2304      	movs	r3, #4
 8010c38:	e07b      	b.n	8010d32 <tcp_get_value+0x172>
  case 2: /* tcpRtoMin */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 1000;
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c40:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c42:	2304      	movs	r3, #4
 8010c44:	e075      	b.n	8010d32 <tcp_get_value+0x172>
  case 3: /* tcpRtoMax */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 60000;
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8010c4c:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c4e:	2304      	movs	r3, #4
 8010c50:	e06f      	b.n	8010d32 <tcp_get_value+0x172>
  case 4: /* tcpMaxConn */
    *sint_ptr = MEMP_NUM_TCP_PCB;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2205      	movs	r2, #5
 8010c56:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010c58:	2304      	movs	r3, #4
 8010c5a:	e06a      	b.n	8010d32 <tcp_get_value+0x172>
  case 5: /* tcpActiveOpens */
    *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 8010c5c:	4b37      	ldr	r3, [pc, #220]	@ (8010d3c <tcp_get_value+0x17c>)
 8010c5e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c66:	2304      	movs	r3, #4
 8010c68:	e063      	b.n	8010d32 <tcp_get_value+0x172>
  case 6: /* tcpPassiveOpens */
    *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 8010c6a:	4b34      	ldr	r3, [pc, #208]	@ (8010d3c <tcp_get_value+0x17c>)
 8010c6c:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c74:	2304      	movs	r3, #4
 8010c76:	e05c      	b.n	8010d32 <tcp_get_value+0x172>
  case 7: /* tcpAttemptFails */
    *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 8010c78:	4b30      	ldr	r3, [pc, #192]	@ (8010d3c <tcp_get_value+0x17c>)
 8010c7a:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c82:	2304      	movs	r3, #4
 8010c84:	e055      	b.n	8010d32 <tcp_get_value+0x172>
  case 8: /* tcpEstabResets */
    *uint_ptr = STATS_GET(mib2.tcpestabresets);
 8010c86:	4b2d      	ldr	r3, [pc, #180]	@ (8010d3c <tcp_get_value+0x17c>)
 8010c88:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010c90:	2304      	movs	r3, #4
 8010c92:	e04e      	b.n	8010d32 <tcp_get_value+0x172>
  case 9: /* tcpCurrEstab */
    {
      u16_t tcpcurrestab = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	82fb      	strh	r3, [r7, #22]
      struct tcp_pcb *pcb = tcp_active_pcbs;
 8010c98:	4b29      	ldr	r3, [pc, #164]	@ (8010d40 <tcp_get_value+0x180>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 8010c9e:	e00d      	b.n	8010cbc <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	7d1b      	ldrb	r3, [r3, #20]
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	d003      	beq.n	8010cb0 <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 8010cac:	2b07      	cmp	r3, #7
 8010cae:	d102      	bne.n	8010cb6 <tcp_get_value+0xf6>
          tcpcurrestab++;
 8010cb0:	8afb      	ldrh	r3, [r7, #22]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	82fb      	strh	r3, [r7, #22]
        }
        pcb = pcb->next;
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1ee      	bne.n	8010ca0 <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 8010cc2:	8afa      	ldrh	r2, [r7, #22]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 8010cc8:	2304      	movs	r3, #4
 8010cca:	e032      	b.n	8010d32 <tcp_get_value+0x172>
  case 10: /* tcpInSegs */
    *uint_ptr = STATS_GET(mib2.tcpinsegs);
 8010ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8010d3c <tcp_get_value+0x17c>)
 8010cce:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010cd6:	2304      	movs	r3, #4
 8010cd8:	e02b      	b.n	8010d32 <tcp_get_value+0x172>
  case 11: /* tcpOutSegs */
    *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 8010cda:	4b18      	ldr	r3, [pc, #96]	@ (8010d3c <tcp_get_value+0x17c>)
 8010cdc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010ce4:	2304      	movs	r3, #4
 8010ce6:	e024      	b.n	8010d32 <tcp_get_value+0x172>
  case 12: /* tcpRetransSegs */
    *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 8010ce8:	4b14      	ldr	r3, [pc, #80]	@ (8010d3c <tcp_get_value+0x17c>)
 8010cea:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010cf2:	2304      	movs	r3, #4
 8010cf4:	e01d      	b.n	8010d32 <tcp_get_value+0x172>
  case 14: /* tcpInErrs */
    *uint_ptr = STATS_GET(mib2.tcpinerrs);
 8010cf6:	4b11      	ldr	r3, [pc, #68]	@ (8010d3c <tcp_get_value+0x17c>)
 8010cf8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010d00:	2304      	movs	r3, #4
 8010d02:	e016      	b.n	8010d32 <tcp_get_value+0x172>
  case 15: /* tcpOutRsts */
    *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 8010d04:	4b0d      	ldr	r3, [pc, #52]	@ (8010d3c <tcp_get_value+0x17c>)
 8010d06:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010d0e:	2304      	movs	r3, #4
 8010d10:	e00f      	b.n	8010d32 <tcp_get_value+0x172>
  case 17: /* tcpHCInSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010d12:	2208      	movs	r2, #8
 8010d14:	2100      	movs	r1, #0
 8010d16:	6838      	ldr	r0, [r7, #0]
 8010d18:	f011 fc6e 	bl	80225f8 <memset>
    return 2*sizeof(u32_t);
 8010d1c:	2308      	movs	r3, #8
 8010d1e:	e008      	b.n	8010d32 <tcp_get_value+0x172>
  case 18: /* tcpHCOutSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010d20:	2208      	movs	r2, #8
 8010d22:	2100      	movs	r1, #0
 8010d24:	6838      	ldr	r0, [r7, #0]
 8010d26:	f011 fc67 	bl	80225f8 <memset>
    return 2*sizeof(u32_t);
 8010d2a:	2308      	movs	r3, #8
 8010d2c:	e001      	b.n	8010d32 <tcp_get_value+0x172>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010d2e:	bf00      	nop
  }

  return 0;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3718      	adds	r7, #24
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	2000bbec 	.word	0x2000bbec
 8010d40:	2000bd90 	.word	0x2000bd90

08010d44 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
 8010d50:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	2b04      	cmp	r3, #4
 8010d5a:	d83b      	bhi.n	8010dd4 <tcp_ConnTable_get_cell_value_core+0x90>
 8010d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8010d64 <tcp_ConnTable_get_cell_value_core+0x20>)
 8010d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d62:	bf00      	nop
 8010d64:	08010d79 	.word	0x08010d79
 8010d68:	08010d87 	.word	0x08010d87
 8010d6c:	08010d91 	.word	0x08010d91
 8010d70:	08010d9d 	.word	0x08010d9d
 8010d74:	08010db9 	.word	0x08010db9
  case 1: /* tcpConnState */
    value->u32 = pcb->state + 1;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	7d1b      	ldrb	r3, [r3, #20]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	461a      	mov	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	601a      	str	r2, [r3, #0]
    break;
 8010d84:	e02e      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 2: /* tcpConnLocalAddress */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	601a      	str	r2, [r3, #0]
    break;
 8010d8e:	e029      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 3: /* tcpConnLocalPort */
    value->u32 = pcb->local_port;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	8adb      	ldrh	r3, [r3, #22]
 8010d94:	461a      	mov	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	601a      	str	r2, [r3, #0]
    break;
 8010d9a:	e023      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 4: /* tcpConnRemAddress */
    if (pcb->state == LISTEN) {
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d104      	bne.n	8010dae <tcp_ConnTable_get_cell_value_core+0x6a>
      value->u32 = IP4_ADDR_ANY4->addr;
 8010da4:	4b12      	ldr	r3, [pc, #72]	@ (8010df0 <tcp_ConnTable_get_cell_value_core+0xac>)
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
    }
    break;
 8010dac:	e01a      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	685a      	ldr	r2, [r3, #4]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	601a      	str	r2, [r3, #0]
    break;
 8010db6:	e015      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 5: /* tcpConnRemPort */
    if (pcb->state == LISTEN) {
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	7d1b      	ldrb	r3, [r3, #20]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d103      	bne.n	8010dc8 <tcp_ConnTable_get_cell_value_core+0x84>
      value->u32 = 0;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = pcb->remote_port;
    }
    break;
 8010dc6:	e00d      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = pcb->remote_port;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	8b1b      	ldrh	r3, [r3, #24]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	601a      	str	r2, [r3, #0]
    break;
 8010dd2:	e007      	b.n	8010de4 <tcp_ConnTable_get_cell_value_core+0xa0>
  default:
    LWIP_ASSERT("invalid id", 0);
 8010dd4:	4b07      	ldr	r3, [pc, #28]	@ (8010df4 <tcp_ConnTable_get_cell_value_core+0xb0>)
 8010dd6:	22bc      	movs	r2, #188	@ 0xbc
 8010dd8:	4907      	ldr	r1, [pc, #28]	@ (8010df8 <tcp_ConnTable_get_cell_value_core+0xb4>)
 8010dda:	4808      	ldr	r0, [pc, #32]	@ (8010dfc <tcp_ConnTable_get_cell_value_core+0xb8>)
 8010ddc:	f011 fa36 	bl	802224c <iprintf>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010de0:	23f1      	movs	r3, #241	@ 0xf1
 8010de2:	e000      	b.n	8010de6 <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	08032ed0 	.word	0x08032ed0
 8010df4:	08025ba0 	.word	0x08025ba0
 8010df8:	08025be0 	.word	0x08025be0
 8010dfc:	08025bec 	.word	0x08025bec

08010e00 <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b08a      	sub	sp, #40	@ 0x28
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	603b      	str	r3, [r7, #0]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 8010e10:	79f9      	ldrb	r1, [r7, #7]
 8010e12:	230a      	movs	r3, #10
 8010e14:	4a37      	ldr	r2, [pc, #220]	@ (8010ef4 <tcp_ConnTable_get_cell_value+0xf4>)
 8010e16:	68b8      	ldr	r0, [r7, #8]
 8010e18:	f7fe fd2e 	bl	800f878 <snmp_oid_in_range>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d101      	bne.n	8010e26 <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010e22:	23f1      	movs	r3, #241	@ 0xf1
 8010e24:	e061      	b.n	8010eea <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 8010e26:	f107 0318 	add.w	r3, r7, #24
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	68b8      	ldr	r0, [r7, #8]
 8010e2e:	f7fd fdd5 	bl	800e9dc <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	3310      	adds	r3, #16
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	3314      	adds	r3, #20
 8010e3e:	f107 0214 	add.w	r2, r7, #20
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fd fdc9 	bl	800e9dc <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	3324      	adds	r3, #36	@ 0x24
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e52:	2300      	movs	r3, #0
 8010e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010e58:	e042      	b.n	8010ee0 <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 8010e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e5e:	4a26      	ldr	r2, [pc, #152]	@ (8010ef8 <tcp_ConnTable_get_cell_value+0xf8>)
 8010e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 8010e68:	e032      	b.n	8010ed0 <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 8010e6a:	69ba      	ldr	r2, [r7, #24]
 8010e6c:	6a3b      	ldr	r3, [r7, #32]
 8010e6e:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d12a      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 8010e74:	6a3b      	ldr	r3, [r7, #32]
 8010e76:	8adb      	ldrh	r3, [r3, #22]
 8010e78:	8bfa      	ldrh	r2, [r7, #30]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d125      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010e7e:	6a3b      	ldr	r3, [r7, #32]
 8010e80:	7d1b      	ldrb	r3, [r3, #20]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d10f      	bne.n	8010ea6 <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	4b1c      	ldr	r3, [pc, #112]	@ (8010efc <tcp_ConnTable_get_cell_value+0xfc>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d11c      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>
 8010e90:	8bbb      	ldrh	r3, [r7, #28]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d119      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 8010e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e98:	683a      	ldr	r2, [r7, #0]
 8010e9a:	68f9      	ldr	r1, [r7, #12]
 8010e9c:	6a38      	ldr	r0, [r7, #32]
 8010e9e:	f7ff ff51 	bl	8010d44 <tcp_ConnTable_get_cell_value_core>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	e021      	b.n	8010eea <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010ea6:	697a      	ldr	r2, [r7, #20]
 8010ea8:	6a3b      	ldr	r3, [r7, #32]
 8010eaa:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d10c      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010eb0:	6a3b      	ldr	r3, [r7, #32]
 8010eb2:	8b1b      	ldrh	r3, [r3, #24]
 8010eb4:	8bba      	ldrh	r2, [r7, #28]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d107      	bne.n	8010eca <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 8010eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebc:	683a      	ldr	r2, [r7, #0]
 8010ebe:	68f9      	ldr	r1, [r7, #12]
 8010ec0:	6a38      	ldr	r0, [r7, #32]
 8010ec2:	f7ff ff3f 	bl	8010d44 <tcp_ConnTable_get_cell_value_core>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	e00f      	b.n	8010eea <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1c9      	bne.n	8010e6a <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010eda:	3301      	adds	r3, #1
 8010edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee4:	2b03      	cmp	r3, #3
 8010ee6:	d9b8      	bls.n	8010e5a <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010ee8:	23f1      	movs	r3, #241	@ 0xf1
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3728      	adds	r7, #40	@ 0x28
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08032844 	.word	0x08032844
 8010ef8:	08032e98 	.word	0x08032e98
 8010efc:	08032ed0 	.word	0x08032ed0

08010f00 <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010f00:	b590      	push	{r4, r7, lr}
 8010f02:	b0a3      	sub	sp, #140	@ 0x8c
 8010f04:	af02      	add	r7, sp, #8
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	1d19      	adds	r1, r3, #4
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	781a      	ldrb	r2, [r3, #0]
 8010f16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010f1a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010f1e:	240a      	movs	r4, #10
 8010f20:	9400      	str	r4, [sp, #0]
 8010f22:	f7fe fc44 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010f26:	2300      	movs	r3, #0
 8010f28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010f2c:	e03e      	b.n	8010fac <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 8010f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010f32:	4a2c      	ldr	r2, [pc, #176]	@ (8010fe4 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 8010f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010f3c:	e02e      	b.n	8010f9c <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8010f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f40:	f107 0214 	add.w	r2, r7, #20
 8010f44:	4611      	mov	r1, r2
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fd fdd0 	bl	800eaec <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 8010f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f4e:	8adb      	ldrh	r3, [r3, #22]
 8010f50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f54:	7d1b      	ldrb	r3, [r3, #20]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d109      	bne.n	8010f6e <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 8010f5a:	f107 0314 	add.w	r3, r7, #20
 8010f5e:	3314      	adds	r3, #20
 8010f60:	4619      	mov	r1, r3
 8010f62:	4821      	ldr	r0, [pc, #132]	@ (8010fe8 <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 8010f64:	f7fd fdc2 	bl	800eaec <snmp_ip4_to_oid>
          test_oid[9] = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f6c:	e00b      	b.n	8010f86 <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 8010f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	3314      	adds	r3, #20
 8010f78:	4619      	mov	r1, r3
 8010f7a:	4610      	mov	r0, r2
 8010f7c:	f7fd fdb6 	bl	800eaec <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 8010f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f82:	8b1b      	ldrh	r3, [r3, #24]
 8010f84:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 8010f86:	f107 0114 	add.w	r1, r7, #20
 8010f8a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f90:	220a      	movs	r2, #10
 8010f92:	f7fe fc2b 	bl	800f7ec <snmp_next_oid_check>
      }

      pcb = pcb->next;
 8010f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1cd      	bne.n	8010f3e <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010fac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010fb0:	2b03      	cmp	r3, #3
 8010fb2:	d9bc      	bls.n	8010f2e <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010fb4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d10e      	bne.n	8010fda <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010fbe:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f7fd fe6f 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb*)state.reference, column, value, value_len);
 8010fca:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	68f9      	ldr	r1, [r7, #12]
 8010fd2:	f7ff feb7 	bl	8010d44 <tcp_ConnTable_get_cell_value_core>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	e000      	b.n	8010fdc <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010fda:	23f1      	movs	r3, #241	@ 0xf1
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3784      	adds	r7, #132	@ 0x84
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd90      	pop	{r4, r7, pc}
 8010fe4:	08032e98 	.word	0x08032e98
 8010fe8:	08032ed0 	.word	0x08032ed0

08010fec <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t* column, struct tcp_pcb *pcb, union snmp_variant_value* value)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b07      	cmp	r3, #7
 8010ffe:	d002      	beq.n	8011006 <tcp_ConnectionTable_get_cell_value_core+0x1a>
 8011000:	2b08      	cmp	r3, #8
 8011002:	d007      	beq.n	8011014 <tcp_ConnectionTable_get_cell_value_core+0x28>
 8011004:	e00a      	b.n	801101c <tcp_ConnectionTable_get_cell_value_core+0x30>
  case 7: /* tcpConnectionState */
    value->u32 = pcb->state + 1;
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	7d1b      	ldrb	r3, [r3, #20]
 801100a:	3301      	adds	r3, #1
 801100c:	461a      	mov	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	601a      	str	r2, [r3, #0]
    break;
 8011012:	e005      	b.n	8011020 <tcp_ConnectionTable_get_cell_value_core+0x34>
  case 8: /* tcpConnectionProcess */
    value->u32 = 0; /* not supported */
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	601a      	str	r2, [r3, #0]
    break;
 801101a:	e001      	b.n	8011020 <tcp_ConnectionTable_get_cell_value_core+0x34>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 801101c:	23f1      	movs	r3, #241	@ 0xf1
 801101e:	e000      	b.n	8011022 <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 8011020:	2300      	movs	r3, #0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3714      	adds	r7, #20
 8011026:	46bd      	mov	sp, r7
 8011028:	bc80      	pop	{r7}
 801102a:	4770      	bx	lr

0801102c <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b08c      	sub	sp, #48	@ 0x30
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	603b      	str	r3, [r7, #0]
 8011038:	4613      	mov	r3, r2
 801103a:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 801103c:	2300      	movs	r3, #0
 801103e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8011042:	4a3e      	ldr	r2, [pc, #248]	@ (801113c <tcp_ConnectionTable_get_cell_value+0x110>)
 8011044:	f107 0310 	add.w	r3, r7, #16
 8011048:	ca07      	ldmia	r2, {r0, r1, r2}
 801104a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 801104e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	68ba      	ldr	r2, [r7, #8]
 8011056:	18d0      	adds	r0, r2, r3
 8011058:	79fa      	ldrb	r2, [r7, #7]
 801105a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b2d9      	uxtb	r1, r3
 8011062:	f107 031e 	add.w	r3, r7, #30
 8011066:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801106a:	f7fd fddd 	bl	800ec28 <snmp_oid_to_ip_port>
 801106e:	4603      	mov	r3, r0
 8011070:	461a      	mov	r2, r3
 8011072:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011076:	4413      	add	r3, r2
 8011078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 801107c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011080:	2b00      	cmp	r3, #0
 8011082:	d101      	bne.n	8011088 <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011084:	23f1      	movs	r3, #241	@ 0xf1
 8011086:	e055      	b.n	8011134 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8011088:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	18d0      	adds	r0, r2, r3
 8011092:	79fa      	ldrb	r2, [r7, #7]
 8011094:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	b2d9      	uxtb	r1, r3
 801109c:	f107 031c 	add.w	r3, r7, #28
 80110a0:	f107 0220 	add.w	r2, r7, #32
 80110a4:	f7fd fdc0 	bl	800ec28 <snmp_oid_to_ip_port>
 80110a8:	4603      	mov	r3, r0
 80110aa:	461a      	mov	r2, r3
 80110ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110b0:	4413      	add	r3, r2
 80110b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 80110b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d101      	bne.n	80110c2 <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 80110be:	23f1      	movs	r3, #241	@ 0xf1
 80110c0:	e038      	b.n	8011134 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 80110c2:	2300      	movs	r3, #0
 80110c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110c8:	e02f      	b.n	801112a <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 80110ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	3330      	adds	r3, #48	@ 0x30
 80110d2:	443b      	add	r3, r7
 80110d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (pcb != NULL) {
 80110dc:	e01d      	b.n	801111a <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d115      	bne.n	8011114 <tcp_ConnectionTable_get_cell_value+0xe8>
         (local_port == pcb->local_port) &&
 80110e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ea:	8ada      	ldrh	r2, [r3, #22]
 80110ec:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d110      	bne.n	8011114 <tcp_ConnectionTable_get_cell_value+0xe8>
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80110f2:	6a3a      	ldr	r2, [r7, #32]
 80110f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f6:	685b      	ldr	r3, [r3, #4]
         (local_port == pcb->local_port) &&
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d10b      	bne.n	8011114 <tcp_ConnectionTable_get_cell_value+0xe8>
         (remote_port == pcb->remote_port)) {
 80110fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110fe:	8b1a      	ldrh	r2, [r3, #24]
 8011100:	8bbb      	ldrh	r3, [r7, #28]
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 8011102:	429a      	cmp	r2, r3
 8011104:	d106      	bne.n	8011114 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 8011106:	683a      	ldr	r2, [r7, #0]
 8011108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f7ff ff6e 	bl	8010fec <tcp_ConnectionTable_get_cell_value_core>
 8011110:	4603      	mov	r3, r0
 8011112:	e00f      	b.n	8011134 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 8011114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (pcb != NULL) {
 801111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1de      	bne.n	80110de <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8011120:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011124:	3301      	adds	r3, #1
 8011126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801112a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801112e:	2b02      	cmp	r3, #2
 8011130:	d9cb      	bls.n	80110ca <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8011132:	23f1      	movs	r3, #241	@ 0xf1
}
 8011134:	4618      	mov	r0, r3
 8011136:	3730      	adds	r7, #48	@ 0x30
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08025c14 	.word	0x08025c14

08011140 <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8011140:	b590      	push	{r4, r7, lr}
 8011142:	b0dd      	sub	sp, #372	@ 0x174
 8011144:	af02      	add	r7, sp, #8
 8011146:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 801114a:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 801114e:	6020      	str	r0, [r4, #0]
 8011150:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8011154:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8011158:	6001      	str	r1, [r0, #0]
 801115a:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 801115e:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8011162:	600a      	str	r2, [r1, #0]
 8011164:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8011168:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 801116c:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 801116e:	4a4c      	ldr	r2, [pc, #304]	@ (80112a0 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 8011170:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011174:	ca07      	ldmia	r2, {r0, r1, r2}
 8011176:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 801117a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801117e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	1d19      	adds	r1, r3, #4
 8011186:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801118a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	781a      	ldrb	r2, [r3, #0]
 8011192:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8011196:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801119a:	2426      	movs	r4, #38	@ 0x26
 801119c:	9400      	str	r4, [sp, #0]
 801119e:	f7fe fb06 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 80111a2:	2300      	movs	r3, #0
 80111a4:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 80111a8:	e051      	b.n	801124e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 80111aa:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80111b4:	443b      	add	r3, r7
 80111b6:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    while (pcb != NULL) {
 80111c0:	e03c      	b.n	801123c <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 80111c8:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 80111cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111d0:	8ad9      	ldrh	r1, [r3, #22]
 80111d2:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80111d6:	f107 0210 	add.w	r2, r7, #16
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	4413      	add	r3, r2
 80111de:	461a      	mov	r2, r3
 80111e0:	f7fd fca5 	bl	800eb2e <snmp_ip_port_to_oid>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80111ec:	4413      	add	r3, r2
 80111ee:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 80111f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111f6:	1d18      	adds	r0, r3, #4
 80111f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111fc:	8b19      	ldrh	r1, [r3, #24]
 80111fe:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8011202:	f107 0210 	add.w	r2, r7, #16
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	4413      	add	r3, r2
 801120a:	461a      	mov	r2, r3
 801120c:	f7fd fc8f 	bl	800eb2e <snmp_ip_port_to_oid>
 8011210:	4603      	mov	r3, r0
 8011212:	461a      	mov	r2, r3
 8011214:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8011218:	4413      	add	r3, r2
 801121a:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 801121e:	f897 2162 	ldrb.w	r2, [r7, #354]	@ 0x162
 8011222:	f107 0110 	add.w	r1, r7, #16
 8011226:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801122a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801122e:	f7fe fadd 	bl	800f7ec <snmp_next_oid_check>

      pcb = pcb->next;
 8011232:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    while (pcb != NULL) {
 801123c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1be      	bne.n	80111c2 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8011244:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011248:	3301      	adds	r3, #1
 801124a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 801124e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011252:	2b02      	cmp	r3, #2
 8011254:	d9a9      	bls.n	80111aa <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8011256:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 801125a:	2b00      	cmp	r3, #0
 801125c:	d11a      	bne.n	8011294 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801125e:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8011262:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8011266:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801126a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	f7fd fd1a 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb*)state.reference, value);
 8011274:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8011278:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801127c:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8011280:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011284:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011288:	6812      	ldr	r2, [r2, #0]
 801128a:	6818      	ldr	r0, [r3, #0]
 801128c:	f7ff feae 	bl	8010fec <tcp_ConnectionTable_get_cell_value_core>
 8011290:	4603      	mov	r3, r0
 8011292:	e000      	b.n	8011296 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011294:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011296:	4618      	mov	r0, r3
 8011298:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 801129c:	46bd      	mov	sp, r7
 801129e:	bd90      	pop	{r4, r7, pc}
 80112a0:	08025c14 	.word	0x08025c14

080112a4 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b04      	cmp	r3, #4
 80112b4:	d105      	bne.n	80112c2 <tcp_ListenerTable_get_cell_value_core+0x1e>
  case 4: /* tcpListenerProcess */
    value->u32 = 0; /* not supported */
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	2200      	movs	r2, #0
 80112ba:	601a      	str	r2, [r3, #0]
    break;
 80112bc:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 80112be:	2300      	movs	r3, #0
 80112c0:	e000      	b.n	80112c4 <tcp_ListenerTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 80112c2:	23f1      	movs	r3, #241	@ 0xf1
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bc80      	pop	{r7}
 80112cc:	4770      	bx	lr
	...

080112d0 <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b088      	sub	sp, #32
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	603b      	str	r3, [r7, #0]
 80112dc:	4613      	mov	r3, r2
 80112de:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 80112e0:	2300      	movs	r3, #0
 80112e2:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 80112e4:	7efb      	ldrb	r3, [r7, #27]
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	18d0      	adds	r0, r2, r3
 80112ec:	79fa      	ldrb	r2, [r7, #7]
 80112ee:	7efb      	ldrb	r3, [r7, #27]
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	b2d9      	uxtb	r1, r3
 80112f4:	f107 0312 	add.w	r3, r7, #18
 80112f8:	f107 0214 	add.w	r2, r7, #20
 80112fc:	f7fd fc94 	bl	800ec28 <snmp_oid_to_ip_port>
 8011300:	4603      	mov	r3, r0
 8011302:	461a      	mov	r2, r3
 8011304:	7efb      	ldrb	r3, [r7, #27]
 8011306:	4413      	add	r3, r2
 8011308:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 801130a:	7efb      	ldrb	r3, [r7, #27]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d101      	bne.n	8011314 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011310:	23f1      	movs	r3, #241	@ 0xf1
 8011312:	e01a      	b.n	801134a <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 8011314:	4b0f      	ldr	r3, [pc, #60]	@ (8011354 <tcp_ListenerTable_get_cell_value+0x84>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 801131a:	e012      	b.n	8011342 <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 801131c:	697a      	ldr	r2, [r7, #20]
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	429a      	cmp	r2, r3
 8011324:	d10a      	bne.n	801133c <tcp_ListenerTable_get_cell_value+0x6c>
       (local_port == pcb->local_port)) {
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	8ada      	ldrh	r2, [r3, #22]
 801132a:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 801132c:	429a      	cmp	r2, r3
 801132e:	d105      	bne.n	801133c <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 8011330:	6839      	ldr	r1, [r7, #0]
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f7ff ffb6 	bl	80112a4 <tcp_ListenerTable_get_cell_value_core>
 8011338:	4603      	mov	r3, r0
 801133a:	e006      	b.n	801134a <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1e9      	bne.n	801131c <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8011348:	23f1      	movs	r3, #241	@ 0xf1
}
 801134a:	4618      	mov	r0, r3
 801134c:	3720      	adds	r7, #32
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	2000bd8c 	.word	0x2000bd8c

08011358 <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8011358:	b590      	push	{r4, r7, lr}
 801135a:	b0b5      	sub	sp, #212	@ 0xd4
 801135c:	af02      	add	r7, sp, #8
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
 8011364:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	1d19      	adds	r1, r3, #4
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	781a      	ldrb	r2, [r3, #0]
 801136e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8011372:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8011376:	2413      	movs	r4, #19
 8011378:	9400      	str	r4, [sp, #0]
 801137a:	f7fe fa18 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 801137e:	4b23      	ldr	r3, [pc, #140]	@ (801140c <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 8011386:	e025      	b.n	80113d4 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 8011388:	2300      	movs	r3, #0
 801138a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 801138e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8011392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011396:	8ad9      	ldrh	r1, [r3, #22]
 8011398:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 801139c:	f107 0214 	add.w	r2, r7, #20
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	4413      	add	r3, r2
 80113a4:	461a      	mov	r2, r3
 80113a6:	f7fd fbc2 	bl	800eb2e <snmp_ip_port_to_oid>
 80113aa:	4603      	mov	r3, r0
 80113ac:	461a      	mov	r2, r3
 80113ae:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80113b2:	4413      	add	r3, r2
 80113b4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 80113b8:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 80113bc:	f107 0114 	add.w	r1, r7, #20
 80113c0:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80113c4:	2300      	movs	r3, #0
 80113c6:	f7fe fa11 	bl	800f7ec <snmp_next_oid_check>

    pcb = pcb->next;
 80113ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 80113d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d1d5      	bne.n	8011388 <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80113dc:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10d      	bne.n	8011400 <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80113e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80113e8:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 80113ec:	4619      	mov	r1, r3
 80113ee:	68b8      	ldr	r0, [r7, #8]
 80113f0:	f7fd fc5a 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 80113f4:	6879      	ldr	r1, [r7, #4]
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff ff54 	bl	80112a4 <tcp_ListenerTable_get_cell_value_core>
 80113fc:	4603      	mov	r3, r0
 80113fe:	e000      	b.n	8011402 <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011400:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011402:	4618      	mov	r0, r3
 8011404:	37cc      	adds	r7, #204	@ 0xcc
 8011406:	46bd      	mov	sp, r7
 8011408:	bd90      	pop	{r4, r7, pc}
 801140a:	bf00      	nop
 801140c:	2000bd8c 	.word	0x2000bd8c

08011410 <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance* instance, void* value)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	60fb      	str	r3, [r7, #12]

  switch (instance->node->oid) {
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	3b01      	subs	r3, #1
 8011426:	2b08      	cmp	r3, #8
 8011428:	d83e      	bhi.n	80114a8 <udp_get_value+0x98>
 801142a:	a201      	add	r2, pc, #4	@ (adr r2, 8011430 <udp_get_value+0x20>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	08011455 	.word	0x08011455
 8011434:	08011463 	.word	0x08011463
 8011438:	08011471 	.word	0x08011471
 801143c:	0801147f 	.word	0x0801147f
 8011440:	080114a9 	.word	0x080114a9
 8011444:	080114a9 	.word	0x080114a9
 8011448:	080114a9 	.word	0x080114a9
 801144c:	0801148d 	.word	0x0801148d
 8011450:	0801149b 	.word	0x0801149b
  case 1: /* udpInDatagrams */
    *uint_ptr = STATS_GET(mib2.udpindatagrams);
 8011454:	4b17      	ldr	r3, [pc, #92]	@ (80114b4 <udp_get_value+0xa4>)
 8011456:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801145e:	2304      	movs	r3, #4
 8011460:	e024      	b.n	80114ac <udp_get_value+0x9c>
  case 2: /* udpNoPorts */
    *uint_ptr = STATS_GET(mib2.udpnoports);
 8011462:	4b14      	ldr	r3, [pc, #80]	@ (80114b4 <udp_get_value+0xa4>)
 8011464:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801146c:	2304      	movs	r3, #4
 801146e:	e01d      	b.n	80114ac <udp_get_value+0x9c>
  case 3: /* udpInErrors */
    *uint_ptr = STATS_GET(mib2.udpinerrors);
 8011470:	4b10      	ldr	r3, [pc, #64]	@ (80114b4 <udp_get_value+0xa4>)
 8011472:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801147a:	2304      	movs	r3, #4
 801147c:	e016      	b.n	80114ac <udp_get_value+0x9c>
  case 4: /* udpOutDatagrams */
    *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 801147e:	4b0d      	ldr	r3, [pc, #52]	@ (80114b4 <udp_get_value+0xa4>)
 8011480:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8011488:	2304      	movs	r3, #4
 801148a:	e00f      	b.n	80114ac <udp_get_value+0x9c>
  case 8: /* udpHCInDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 801148c:	2208      	movs	r2, #8
 801148e:	2100      	movs	r1, #0
 8011490:	6838      	ldr	r0, [r7, #0]
 8011492:	f011 f8b1 	bl	80225f8 <memset>
    return 2*sizeof(u32_t);
 8011496:	2308      	movs	r3, #8
 8011498:	e008      	b.n	80114ac <udp_get_value+0x9c>
  case 9: /* udpHCOutDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 801149a:	2208      	movs	r2, #8
 801149c:	2100      	movs	r1, #0
 801149e:	6838      	ldr	r0, [r7, #0]
 80114a0:	f011 f8aa 	bl	80225f8 <memset>
    return 2*sizeof(u32_t);
 80114a4:	2308      	movs	r3, #8
 80114a6:	e001      	b.n	80114ac <udp_get_value+0x9c>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 80114a8:	bf00      	nop
  }

  return 0;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	2000bbec 	.word	0x2000bbec

080114b8 <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2b08      	cmp	r3, #8
 80114c8:	d105      	bne.n	80114d6 <udp_endpointTable_get_cell_value_core+0x1e>
  case 8: /* udpEndpointProcess */
    value->u32 = 0; /* not supported */
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2200      	movs	r2, #0
 80114ce:	601a      	str	r2, [r3, #0]
    break;
 80114d0:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 80114d2:	2300      	movs	r3, #0
 80114d4:	e000      	b.n	80114d8 <udp_endpointTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 80114d6:	23f1      	movs	r3, #241	@ 0xf1
}
 80114d8:	4618      	mov	r0, r3
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	bc80      	pop	{r7}
 80114e0:	4770      	bx	lr
	...

080114e4 <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08a      	sub	sp, #40	@ 0x28
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	4613      	mov	r3, r2
 80114f2:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 80114f4:	2300      	movs	r3, #0
 80114f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 80114fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	18d0      	adds	r0, r2, r3
 8011504:	79fa      	ldrb	r2, [r7, #7]
 8011506:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	b2d9      	uxtb	r1, r3
 801150e:	f107 0316 	add.w	r3, r7, #22
 8011512:	f107 021c 	add.w	r2, r7, #28
 8011516:	f7fd fb87 	bl	800ec28 <snmp_oid_to_ip_port>
 801151a:	4603      	mov	r3, r0
 801151c:	461a      	mov	r2, r3
 801151e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011522:	4413      	add	r3, r2
 8011524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8011528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011530:	23f1      	movs	r3, #241	@ 0xf1
 8011532:	e052      	b.n	80115da <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8011534:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	68ba      	ldr	r2, [r7, #8]
 801153c:	18d0      	adds	r0, r2, r3
 801153e:	79fa      	ldrb	r2, [r7, #7]
 8011540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	b2d9      	uxtb	r1, r3
 8011548:	f107 0314 	add.w	r3, r7, #20
 801154c:	f107 0218 	add.w	r2, r7, #24
 8011550:	f7fd fb6a 	bl	800ec28 <snmp_oid_to_ip_port>
 8011554:	4603      	mov	r3, r0
 8011556:	461a      	mov	r2, r3
 8011558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801155c:	4413      	add	r3, r2
 801155e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8011562:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 801156a:	23f1      	movs	r3, #241	@ 0xf1
 801156c:	e035      	b.n	80115da <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx+1)) {
 801156e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011572:	79fb      	ldrb	r3, [r7, #7]
 8011574:	429a      	cmp	r2, r3
 8011576:	d301      	bcc.n	801157c <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011578:	23f1      	movs	r3, #241	@ 0xf1
 801157a:	e02e      	b.n	80115da <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 801157c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	4413      	add	r3, r2
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d001      	beq.n	8011590 <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 801158c:	23f1      	movs	r3, #241	@ 0xf1
 801158e:	e024      	b.n	80115da <udp_endpointTable_get_cell_value+0xf6>
  }
  
  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 8011590:	4b14      	ldr	r3, [pc, #80]	@ (80115e4 <udp_endpointTable_get_cell_value+0x100>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8011596:	e01c      	b.n	80115d2 <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8011598:	69fa      	ldr	r2, [r7, #28]
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d114      	bne.n	80115cc <udp_endpointTable_get_cell_value+0xe8>
       (local_port == pcb->local_port) &&
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	8a5a      	ldrh	r2, [r3, #18]
 80115a6:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d10f      	bne.n	80115cc <udp_endpointTable_get_cell_value+0xe8>
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80115ac:	69ba      	ldr	r2, [r7, #24]
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	685b      	ldr	r3, [r3, #4]
       (local_port == pcb->local_port) &&
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d10a      	bne.n	80115cc <udp_endpointTable_get_cell_value+0xe8>
       (remote_port == pcb->remote_port)) {
 80115b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b8:	8a9a      	ldrh	r2, [r3, #20]
 80115ba:	8abb      	ldrh	r3, [r7, #20]
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80115bc:	429a      	cmp	r2, r3
 80115be:	d105      	bne.n	80115cc <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f7ff ff78 	bl	80114b8 <udp_endpointTable_get_cell_value_core>
 80115c8:	4603      	mov	r3, r0
 80115ca:	e006      	b.n	80115da <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 80115cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80115d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1df      	bne.n	8011598 <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80115d8:	23f1      	movs	r3, #241	@ 0xf1
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3728      	adds	r7, #40	@ 0x28
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	2000bde0 	.word	0x2000bde0

080115e8 <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_endpointTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b0dd      	sub	sp, #372	@ 0x174
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 80115f2:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 80115f6:	6020      	str	r0, [r4, #0]
 80115f8:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80115fc:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8011600:	6001      	str	r1, [r0, #0]
 8011602:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8011606:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 801160a:	600a      	str	r2, [r1, #0]
 801160c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8011610:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8011614:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8011616:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801161a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	1d19      	adds	r1, r3, #4
 8011622:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011626:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	781a      	ldrb	r2, [r3, #0]
 801162e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011632:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8011636:	2427      	movs	r4, #39	@ 0x27
 8011638:	9400      	str	r4, [sp, #0]
 801163a:	f7fe f8b8 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 801163e:	4b3b      	ldr	r3, [pc, #236]	@ (801172c <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 8011646:	e049      	b.n	80116dc <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 801164e:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8011652:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011656:	8a59      	ldrh	r1, [r3, #18]
 8011658:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801165c:	f107 0214 	add.w	r2, r7, #20
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4413      	add	r3, r2
 8011664:	461a      	mov	r2, r3
 8011666:	f7fd fa62 	bl	800eb2e <snmp_ip_port_to_oid>
 801166a:	4603      	mov	r3, r0
 801166c:	461a      	mov	r2, r3
 801166e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011672:	4413      	add	r3, r2
 8011674:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 8011678:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801167c:	1d18      	adds	r0, r3, #4
 801167e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011682:	8a99      	ldrh	r1, [r3, #20]
 8011684:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8011688:	f107 0214 	add.w	r2, r7, #20
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4413      	add	r3, r2
 8011690:	461a      	mov	r2, r3
 8011692:	f7fd fa4c 	bl	800eb2e <snmp_ip_port_to_oid>
 8011696:	4603      	mov	r3, r0
 8011698:	461a      	mov	r2, r3
 801169a:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801169e:	4413      	add	r3, r2
 80116a0:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */    
 80116a4:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 80116a8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80116ac:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80116b0:	2100      	movs	r1, #0
 80116b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 80116b6:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80116ba:	3301      	adds	r3, #1
 80116bc:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    
    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 80116c0:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 80116c4:	f107 0114 	add.w	r1, r7, #20
 80116c8:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80116cc:	2300      	movs	r3, #0
 80116ce:	f7fe f88d 	bl	800f7ec <snmp_next_oid_check>
    
    pcb = pcb->next;
 80116d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 80116dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1b1      	bne.n	8011648 <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80116e4:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d118      	bne.n	801171e <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80116ec:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 80116f0:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80116f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80116f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80116fc:	6818      	ldr	r0, [r3, #0]
 80116fe:	f7fd fad3 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 8011702:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011706:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 801170a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801170e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011712:	6811      	ldr	r1, [r2, #0]
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	f7ff fecf 	bl	80114b8 <udp_endpointTable_get_cell_value_core>
 801171a:	4603      	mov	r3, r0
 801171c:	e000      	b.n	8011720 <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 801171e:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011720:	4618      	mov	r0, r3
 8011722:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8011726:	46bd      	mov	sp, r7
 8011728:	bd90      	pop	{r4, r7, pc}
 801172a:	bf00      	nop
 801172c:	2000bde0 	.word	0x2000bde0

08011730 <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t 
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d002      	beq.n	801174c <udp_Table_get_cell_value_core+0x1c>
 8011746:	2b02      	cmp	r3, #2
 8011748:	d005      	beq.n	8011756 <udp_Table_get_cell_value_core+0x26>
 801174a:	e00a      	b.n	8011762 <udp_Table_get_cell_value_core+0x32>
  case 1: /* udpLocalAddress */
    /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	601a      	str	r2, [r3, #0]
    break;
 8011754:	e007      	b.n	8011766 <udp_Table_get_cell_value_core+0x36>
  case 2: /* udpLocalPort */
    /* set reference to PCB local port and return a generic node that copies u16_t values */
    value->u32 = pcb->local_port;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	8a5b      	ldrh	r3, [r3, #18]
 801175a:	461a      	mov	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	601a      	str	r2, [r3, #0]
    break;
 8011760:	e001      	b.n	8011766 <udp_Table_get_cell_value_core+0x36>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8011762:	23f1      	movs	r3, #241	@ 0xf1
 8011764:	e000      	b.n	8011768 <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 8011766:	2300      	movs	r3, #0
}
 8011768:	4618      	mov	r0, r3
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	bc80      	pop	{r7}
 8011770:	4770      	bx	lr
	...

08011774 <udp_Table_get_cell_value>:

static snmp_err_t 
udp_Table_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b088      	sub	sp, #32
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	603b      	str	r3, [r7, #0]
 8011780:	4613      	mov	r3, r2
 8011782:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 8011784:	79f9      	ldrb	r1, [r7, #7]
 8011786:	2305      	movs	r3, #5
 8011788:	4a19      	ldr	r2, [pc, #100]	@ (80117f0 <udp_Table_get_cell_value+0x7c>)
 801178a:	68b8      	ldr	r0, [r7, #8]
 801178c:	f7fe f874 	bl	800f878 <snmp_oid_in_range>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d101      	bne.n	801179a <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011796:	23f1      	movs	r3, #241	@ 0xf1
 8011798:	e026      	b.n	80117e8 <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 801179a:	f107 0314 	add.w	r3, r7, #20
 801179e:	4619      	mov	r1, r3
 80117a0:	68b8      	ldr	r0, [r7, #8]
 80117a2:	f7fd f91b 	bl	800e9dc <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	3310      	adds	r3, #16
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 80117ae:	4b11      	ldr	r3, [pc, #68]	@ (80117f4 <udp_Table_get_cell_value+0x80>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80117b4:	e014      	b.n	80117e0 <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d10c      	bne.n	80117da <udp_Table_get_cell_value+0x66>
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	8a5b      	ldrh	r3, [r3, #18]
 80117c4:	8b7a      	ldrh	r2, [r7, #26]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d107      	bne.n	80117da <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 80117ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	68f9      	ldr	r1, [r7, #12]
 80117d0:	69f8      	ldr	r0, [r7, #28]
 80117d2:	f7ff ffad 	bl	8011730 <udp_Table_get_cell_value_core>
 80117d6:	4603      	mov	r3, r0
 80117d8:	e006      	b.n	80117e8 <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1e7      	bne.n	80117b6 <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80117e6:	23f1      	movs	r3, #241	@ 0xf1
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3720      	adds	r7, #32
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	08032b90 	.word	0x08032b90
 80117f4:	2000bde0 	.word	0x2000bde0

080117f8 <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_Table_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80117f8:	b590      	push	{r4, r7, lr}
 80117fa:	b097      	sub	sp, #92	@ 0x5c
 80117fc:	af02      	add	r7, sp, #8
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
 8011804:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	1d19      	adds	r1, r3, #4
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	781a      	ldrb	r2, [r3, #0]
 801180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011812:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011816:	2405      	movs	r4, #5
 8011818:	9400      	str	r4, [sp, #0]
 801181a:	f7fd ffc8 	bl	800f7ae <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 801181e:	4b1a      	ldr	r3, [pc, #104]	@ (8011888 <udp_Table_get_next_cell_instance_and_value+0x90>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011824:	e014      	b.n	8011850 <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8011826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011828:	f107 0210 	add.w	r2, r7, #16
 801182c:	4611      	mov	r1, r2
 801182e:	4618      	mov	r0, r3
 8011830:	f7fd f95c 	bl	800eaec <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 8011834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011836:	8a5b      	ldrh	r3, [r3, #18]
 8011838:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 801183a:	f107 0110 	add.w	r1, r7, #16
 801183e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011844:	2205      	movs	r2, #5
 8011846:	f7fd ffd1 	bl	800f7ec <snmp_next_oid_check>
    }
    
    pcb = pcb->next;
 801184a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011852:	2b00      	cmp	r3, #0
 8011854:	d1e7      	bne.n	8011826 <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8011856:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801185a:	2b00      	cmp	r3, #0
 801185c:	d10e      	bne.n	801187c <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801185e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011860:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8011864:	4619      	mov	r1, r3
 8011866:	68b8      	ldr	r0, [r7, #8]
 8011868:	f7fd fa1e 	bl	800eca8 <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb*)state.reference, column, value, value_len);
 801186c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	68f9      	ldr	r1, [r7, #12]
 8011874:	f7ff ff5c 	bl	8011730 <udp_Table_get_cell_value_core>
 8011878:	4603      	mov	r3, r0
 801187a:	e000      	b.n	801187e <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 801187c:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 801187e:	4618      	mov	r0, r3
 8011880:	3754      	adds	r7, #84	@ 0x54
 8011882:	46bd      	mov	sp, r7
 8011884:	bd90      	pop	{r4, r7, pc}
 8011886:	bf00      	nop
 8011888:	2000bde0 	.word	0x2000bde0

0801188c <snmp_set_community_trap>:
 *
 * @param community is a pointer to new trap community string
 */
void
snmp_set_community_trap(const char * const community)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("community string is too long!", strlen(community) <= SNMP_MAX_COMMUNITY_STR_LEN);
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7ee fca1 	bl	80001dc <strlen>
 801189a:	4603      	mov	r3, r0
 801189c:	2b08      	cmp	r3, #8
 801189e:	d905      	bls.n	80118ac <snmp_set_community_trap+0x20>
 80118a0:	4b06      	ldr	r3, [pc, #24]	@ (80118bc <snmp_set_community_trap+0x30>)
 80118a2:	2290      	movs	r2, #144	@ 0x90
 80118a4:	4906      	ldr	r1, [pc, #24]	@ (80118c0 <snmp_set_community_trap+0x34>)
 80118a6:	4807      	ldr	r0, [pc, #28]	@ (80118c4 <snmp_set_community_trap+0x38>)
 80118a8:	f010 fcd0 	bl	802224c <iprintf>
  snmp_community_trap = community;
 80118ac:	4a06      	ldr	r2, [pc, #24]	@ (80118c8 <snmp_set_community_trap+0x3c>)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6013      	str	r3, [r2, #0]
}
 80118b2:	bf00      	nop
 80118b4:	3708      	adds	r7, #8
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	08025c30 	.word	0x08025c30
 80118c0:	08025c6c 	.word	0x08025c6c
 80118c4:	08025c8c 	.word	0x08025c8c
 80118c8:	20000114 	.word	0x20000114

080118cc <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 80118cc:	b590      	push	{r4, r7, lr}
 80118ce:	b0cf      	sub	sp, #316	@ 0x13c
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80118d6:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80118da:	6020      	str	r0, [r4, #0]
 80118dc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80118e0:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80118e4:	6001      	str	r1, [r0, #0]
 80118e6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80118ea:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80118ee:	600a      	str	r2, [r1, #0]
 80118f0:	461a      	mov	r2, r3
 80118f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118f6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80118fa:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;
   
  memset(&request, 0, sizeof(request));
 80118fc:	f107 0314 	add.w	r3, r7, #20
 8011900:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8011904:	2100      	movs	r1, #0
 8011906:	4618      	mov	r0, r3
 8011908:	f010 fe76 	bl	80225f8 <memset>
  request.handle       = handle;
 801190c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011910:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011914:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011918:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801191c:	6812      	ldr	r2, [r2, #0]
 801191e:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 8011920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011924:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011928:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801192c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8011930:	6812      	ldr	r2, [r2, #0]
 8011932:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 8011934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011938:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801193c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011940:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8011944:	8812      	ldrh	r2, [r2, #0]
 8011946:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 8011948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801194c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011950:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011954:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8011958:	6812      	ldr	r2, [r2, #0]
 801195a:	62da      	str	r2, [r3, #44]	@ 0x2c

  snmp_stats.inpkts++;
 801195c:	4b5c      	ldr	r3, [pc, #368]	@ (8011ad0 <snmp_receive+0x204>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3301      	adds	r3, #1
 8011962:	4a5b      	ldr	r2, [pc, #364]	@ (8011ad0 <snmp_receive+0x204>)
 8011964:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 8011966:	f107 0314 	add.w	r3, r7, #20
 801196a:	4618      	mov	r0, r3
 801196c:	f000 fd62 	bl	8012434 <snmp_parse_inbound_frame>
 8011970:	4603      	mov	r3, r0
 8011972:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if (err == ERR_OK) {
 8011976:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 801197a:	2b00      	cmp	r3, #0
 801197c:	f040 80a2 	bne.w	8011ac4 <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 8011980:	f107 0314 	add.w	r3, r7, #20
 8011984:	4618      	mov	r0, r3
 8011986:	f001 f863 	bl	8012a50 <snmp_prepare_outbound_frame>
 801198a:	4603      	mov	r3, r0
 801198c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    if (err == ERR_OK) {
 8011990:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 8086 	bne.w	8011aa6 <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 801199a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801199e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119a2:	69db      	ldr	r3, [r3, #28]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d13e      	bne.n	8011a26 <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 80119a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119b0:	7d9b      	ldrb	r3, [r3, #22]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d108      	bne.n	80119c8 <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 80119b6:	f107 0314 	add.w	r3, r7, #20
 80119ba:	4618      	mov	r0, r3
 80119bc:	f000 fa4e 	bl	8011e5c <snmp_process_get_request>
 80119c0:	4603      	mov	r3, r0
 80119c2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80119c6:	e02e      	b.n	8011a26 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 80119c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119d0:	7d9b      	ldrb	r3, [r3, #22]
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d108      	bne.n	80119e8 <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 80119d6:	f107 0314 	add.w	r3, r7, #20
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 fa83 	bl	8011ee6 <snmp_process_getnext_request>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80119e6:	e01e      	b.n	8011a26 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 80119e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80119f0:	7d9b      	ldrb	r3, [r3, #22]
 80119f2:	2b05      	cmp	r3, #5
 80119f4:	d108      	bne.n	8011a08 <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 80119f6:	f107 0314 	add.w	r3, r7, #20
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 fab8 	bl	8011f70 <snmp_process_getbulk_request>
 8011a00:	4603      	mov	r3, r0
 8011a02:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8011a06:	e00e      	b.n	8011a26 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8011a08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a10:	7d9b      	ldrb	r3, [r3, #22]
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d107      	bne.n	8011a26 <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 8011a16:	f107 0314 	add.w	r3, r7, #20
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f000 fb91 	bl	8012142 <snmp_process_set_request>
 8011a20:	4603      	mov	r3, r0
 8011a22:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        }
      }

      if (err == ERR_OK) {
 8011a26:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d13b      	bne.n	8011aa6 <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 8011a2e:	f107 0314 	add.w	r3, r7, #20
 8011a32:	4618      	mov	r0, r3
 8011a34:	f001 fb9c 	bl	8013170 <snmp_complete_outbound_frame>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
      
        if (err == ERR_OK) {
 8011a3e:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d12f      	bne.n	8011aa6 <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 8011a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a4a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a4e:	6818      	ldr	r0, [r3, #0]
 8011a50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a58:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8011a5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a62:	685a      	ldr	r2, [r3, #4]
 8011a64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a6c:	891b      	ldrh	r3, [r3, #8]
 8011a6e:	f002 f8fe 	bl	8013c6e <snmp_sendto>
 8011a72:	4603      	mov	r3, r0
 8011a74:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) 
 8011a78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a80:	7d9b      	ldrb	r3, [r3, #22]
 8011a82:	2b03      	cmp	r3, #3
 8011a84:	d10f      	bne.n	8011aa6 <snmp_receive+0x1da>
            && (request.error_status == SNMP_ERR_NOERROR) 
 8011a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011a8e:	69db      	ldr	r3, [r3, #28]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d108      	bne.n	8011aa6 <snmp_receive+0x1da>
            && (snmp_write_callback != NULL)) {
 8011a94:	4b0f      	ldr	r3, [pc, #60]	@ (8011ad4 <snmp_receive+0x208>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d004      	beq.n	8011aa6 <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 8011a9c:	f107 0314 	add.w	r3, r7, #20
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f001 fd47 	bl	8013534 <snmp_execute_write_callbacks>
          }
        }
      }
    }
  
    if (request.outbound_pbuf != NULL) {
 8011aa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011aaa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d007      	beq.n	8011ac4 <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 8011ab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ab8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f004 fba6 	bl	8016210 <pbuf_free>
    }
  }
}
 8011ac4:	bf00      	nop
 8011ac6:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd90      	pop	{r4, r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	2000854c 	.word	0x2000854c
 8011ad4:	200085ec 	.word	0x200085ec

08011ad8 <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance* node_instance, void* validate_arg)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8011ae8:	f003 0301 	and.w	r3, r3, #1
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d004      	beq.n	8011afa <snmp_msg_getnext_validate_node_inst+0x22>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d101      	bne.n	8011afe <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011afa:	23f1      	movs	r3, #241	@ 0xf1
 8011afc:	e00b      	b.n	8011b16 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request*)validate_arg)->version == SNMP_VERSION_1)) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8011b04:	2b46      	cmp	r3, #70	@ 0x46
 8011b06:	d105      	bne.n	8011b14 <snmp_msg_getnext_validate_node_inst+0x3c>
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	7a9b      	ldrb	r3, [r3, #10]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d101      	bne.n	8011b14 <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011b10:	23f1      	movs	r3, #241	@ 0xf1
 8011b12:	e000      	b.n	8011b16 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  return SNMP_ERR_NOERROR;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bc80      	pop	{r7}
 8011b1e:	4770      	bx	lr

08011b20 <snmp_process_varbind>:

static void 
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b0f6      	sub	sp, #472	@ 0x1d8
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b2a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011b2e:	6018      	str	r0, [r3, #0]
 8011b30:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b34:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b38:	6019      	str	r1, [r3, #0]
 8011b3a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b3e:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011b42:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 8011b44:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011b48:	22ec      	movs	r2, #236	@ 0xec
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f010 fd53 	bl	80225f8 <memset>

  if (get_next) {
 8011b52:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b56:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d03d      	beq.n	8011bdc <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 8011b60:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b64:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f103 000c 	add.w	r0, r3, #12
 8011b6e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b72:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	7a19      	ldrb	r1, [r3, #8]
 8011b7a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011b82:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011b86:	9201      	str	r2, [sp, #4]
 8011b88:	f107 0214 	add.w	r2, r7, #20
 8011b8c:	9200      	str	r2, [sp, #0]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4aae      	ldr	r2, [pc, #696]	@ (8011e4c <snmp_process_varbind+0x32c>)
 8011b92:	f7fd fb18 	bl	800f1c6 <snmp_get_next_node_instance_from_oid>
 8011b96:	4603      	mov	r3, r0
 8011b98:	461a      	mov	r2, r3
 8011b9a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011b9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011ba6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011baa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	69db      	ldr	r3, [r3, #28]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d158      	bne.n	8011c68 <snmp_process_varbind+0x148>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 8011bb6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bba:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f103 0008 	add.w	r0, r3, #8
 8011bc4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bc8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8011bcc:	781a      	ldrb	r2, [r3, #0]
 8011bce:	f107 0314 	add.w	r3, r7, #20
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	f7fd f867 	bl	800eca8 <snmp_oid_assign>
 8011bda:	e045      	b.n	8011c68 <snmp_process_varbind+0x148>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 8011bdc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011be0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f103 000c 	add.w	r0, r3, #12
 8011bea:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011bee:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	7a1b      	ldrb	r3, [r3, #8]
 8011bf6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	f7fd fa9c 	bl	800f138 <snmp_get_node_instance_from_oid>
 8011c00:	4603      	mov	r3, r0
 8011c02:	461a      	mov	r2, r3
 8011c04:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c08:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011c10:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d123      	bne.n	8011c68 <snmp_process_varbind+0x148>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 8011c20:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c24:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c28:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011c2c:	6819      	ldr	r1, [r3, #0]
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7ff ff52 	bl	8011ad8 <snmp_msg_getnext_validate_node_inst>
 8011c34:	4603      	mov	r3, r0
 8011c36:	461a      	mov	r2, r3
 8011c38:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 8011c44:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c48:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d009      	beq.n	8011c68 <snmp_process_varbind+0x148>
        if (node_instance.release_instance != NULL) {
 8011c54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d005      	beq.n	8011c68 <snmp_process_varbind+0x148>
          node_instance.release_instance(&node_instance);
 8011c5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011c60:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011c64:	4610      	mov	r0, r2
 8011c66:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 8011c68:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	69db      	ldr	r3, [r3, #28]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d070      	beq.n	8011d5a <snmp_process_varbind+0x23a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8011c78:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c7c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	69db      	ldr	r3, [r3, #28]
 8011c84:	2bef      	cmp	r3, #239	@ 0xef
 8011c86:	dd60      	ble.n	8011d4a <snmp_process_varbind+0x22a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 8011c88:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c8c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	7a9b      	ldrb	r3, [r3, #10]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d008      	beq.n	8011caa <snmp_process_varbind+0x18a>
 8011c98:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011c9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	7a9b      	ldrb	r3, [r3, #10]
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	f040 80cc 	bne.w	8011e42 <snmp_process_varbind+0x322>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 8011caa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	69db      	ldr	r3, [r3, #28]
 8011cb6:	b25b      	sxtb	r3, r3
 8011cb8:	f003 030f 	and.w	r3, r3, #15
 8011cbc:	b25b      	sxtb	r3, r3
 8011cbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011cc2:	b25b      	sxtb	r3, r3
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cca:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        vb->value_len = 0;
 8011cd4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cd8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 8011ce4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011ce8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011cf2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011cf6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011cfa:	6819      	ldr	r1, [r3, #0]
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	f001 f921 	bl	8012f44 <snmp_append_outbound_varbind>
 8011d02:	4603      	mov	r3, r0
 8011d04:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
        if (err == ERR_OK) {
 8011d08:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d107      	bne.n	8011d20 <snmp_process_varbind+0x200>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 8011d10:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 8011d1e:	e090      	b.n	8011e42 <snmp_process_varbind+0x322>
        } else if (err == ERR_BUF) {
 8011d20:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011d24:	f113 0f02 	cmn.w	r3, #2
 8011d28:	d107      	bne.n	8011d3a <snmp_process_varbind+0x21a>
          request->error_status = SNMP_ERR_TOOBIG;
 8011d2a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2201      	movs	r2, #1
 8011d36:	61da      	str	r2, [r3, #28]
}
 8011d38:	e083      	b.n	8011e42 <snmp_process_varbind+0x322>
          request->error_status = SNMP_ERR_GENERROR;
 8011d3a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2205      	movs	r2, #5
 8011d46:	61da      	str	r2, [r3, #28]
}
 8011d48:	e07b      	b.n	8011e42 <snmp_process_varbind+0x322>
      request->error_status = SNMP_ERR_GENERROR;
 8011d4a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2205      	movs	r2, #5
 8011d56:	61da      	str	r2, [r3, #28]
}
 8011d58:	e073      	b.n	8011e42 <snmp_process_varbind+0x322>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 8011d5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011d5e:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8011d62:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8011d66:	6812      	ldr	r2, [r2, #0]
 8011d68:	f8d2 10d8 	ldr.w	r1, [r2, #216]	@ 0xd8
 8011d6c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011d70:	4610      	mov	r0, r2
 8011d72:	4798      	blx	r3
 8011d74:	4603      	mov	r3, r0
 8011d76:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
    vb->type = node_instance.asn1_type;
 8011d7a:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 8011d7e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d82:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    if(len >= 0) {
 8011d8c:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	@ 0x1ce
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	db45      	blt.n	8011e20 <snmp_process_varbind+0x300>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 8011d94:	f8b7 21ce 	ldrh.w	r2, [r7, #462]	@ 0x1ce
 8011d98:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011d9c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 8011da6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011daa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011db4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011db8:	2bc8      	cmp	r3, #200	@ 0xc8
 8011dba:	d906      	bls.n	8011dca <snmp_process_varbind+0x2aa>
 8011dbc:	4b24      	ldr	r3, [pc, #144]	@ (8011e50 <snmp_process_varbind+0x330>)
 8011dbe:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8011dc2:	4924      	ldr	r1, [pc, #144]	@ (8011e54 <snmp_process_varbind+0x334>)
 8011dc4:	4824      	ldr	r0, [pc, #144]	@ (8011e58 <snmp_process_varbind+0x338>)
 8011dc6:	f010 fa41 	bl	802224c <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 8011dca:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011dce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011dd8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011ddc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011de0:	6819      	ldr	r1, [r3, #0]
 8011de2:	4610      	mov	r0, r2
 8011de4:	f001 f8ae 	bl	8012f44 <snmp_append_outbound_varbind>
 8011de8:	4603      	mov	r3, r0
 8011dea:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
      if (err == ERR_BUF) {
 8011dee:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011df2:	f113 0f02 	cmn.w	r3, #2
 8011df6:	d107      	bne.n	8011e08 <snmp_process_varbind+0x2e8>
        request->error_status = SNMP_ERR_TOOBIG;
 8011df8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011dfc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2201      	movs	r2, #1
 8011e04:	61da      	str	r2, [r3, #28]
 8011e06:	e012      	b.n	8011e2e <snmp_process_varbind+0x30e>
      } else if (err != ERR_OK) {
 8011e08:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00e      	beq.n	8011e2e <snmp_process_varbind+0x30e>
        request->error_status = SNMP_ERR_GENERROR;
 8011e10:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011e14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2205      	movs	r2, #5
 8011e1c:	61da      	str	r2, [r3, #28]
 8011e1e:	e006      	b.n	8011e2e <snmp_process_varbind+0x30e>
      request->error_status = SNMP_ERR_GENERROR;
 8011e20:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011e24:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2205      	movs	r2, #5
 8011e2c:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 8011e2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d005      	beq.n	8011e42 <snmp_process_varbind+0x322>
      node_instance.release_instance(&node_instance);
 8011e36:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011e3a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011e3e:	4610      	mov	r0, r2
 8011e40:	4798      	blx	r3
}
 8011e42:	bf00      	nop
 8011e44:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	08011ad9 	.word	0x08011ad9
 8011e50:	08025c30 	.word	0x08025c30
 8011e54:	08025cd8 	.word	0x08025cd8
 8011e58:	08025c8c 	.word	0x08025c8c

08011e5c <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3358      	adds	r3, #88	@ 0x58
 8011e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8011e6c:	e030      	b.n	8011ed0 <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	3330      	adds	r3, #48	@ 0x30
 8011e72:	f107 0208 	add.w	r2, r7, #8
 8011e76:	4611      	mov	r1, r2
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f001 fba5 	bl	80135c8 <snmp_vb_enumerator_get_next>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011e84:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d113      	bne.n	8011eb4 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8011e8c:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011e90:	2b05      	cmp	r3, #5
 8011e92:	d10b      	bne.n	8011eac <snmp_process_get_request+0x50>
 8011e94:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d107      	bne.n	8011eac <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 8011e9c:	f107 0308 	add.w	r3, r7, #8
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff fe3b 	bl	8011b20 <snmp_process_varbind>
 8011eaa:	e011      	b.n	8011ed0 <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2205      	movs	r2, #5
 8011eb0:	61da      	str	r2, [r3, #28]
 8011eb2:	e00d      	b.n	8011ed0 <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011eb4:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d00e      	beq.n	8011eda <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011ebc:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d102      	bne.n	8011eca <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011ec4:	f06f 030f 	mvn.w	r3, #15
 8011ec8:	e009      	b.n	8011ede <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2205      	movs	r2, #5
 8011ece:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	69db      	ldr	r3, [r3, #28]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d0ca      	beq.n	8011e6e <snmp_process_get_request+0x12>
 8011ed8:	e000      	b.n	8011edc <snmp_process_get_request+0x80>
      break;
 8011eda:	bf00      	nop
    }
  }

  return ERR_OK;
 8011edc:	2300      	movs	r3, #0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	37e8      	adds	r7, #232	@ 0xe8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b0ba      	sub	sp, #232	@ 0xe8
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	3358      	adds	r3, #88	@ 0x58
 8011ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8011ef6:	e030      	b.n	8011f5a <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	3330      	adds	r3, #48	@ 0x30
 8011efc:	f107 0208 	add.w	r2, r7, #8
 8011f00:	4611      	mov	r1, r2
 8011f02:	4618      	mov	r0, r3
 8011f04:	f001 fb60 	bl	80135c8 <snmp_vb_enumerator_get_next>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011f0e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d113      	bne.n	8011f3e <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8011f16:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011f1a:	2b05      	cmp	r3, #5
 8011f1c:	d10b      	bne.n	8011f36 <snmp_process_getnext_request+0x50>
 8011f1e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d107      	bne.n	8011f36 <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 8011f26:	f107 0308 	add.w	r3, r7, #8
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff fdf6 	bl	8011b20 <snmp_process_varbind>
 8011f34:	e011      	b.n	8011f5a <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2205      	movs	r2, #5
 8011f3a:	61da      	str	r2, [r3, #28]
 8011f3c:	e00d      	b.n	8011f5a <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011f3e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d00e      	beq.n	8011f64 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011f46:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011f4a:	2b02      	cmp	r3, #2
 8011f4c:	d102      	bne.n	8011f54 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011f4e:	f06f 030f 	mvn.w	r3, #15
 8011f52:	e009      	b.n	8011f68 <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2205      	movs	r2, #5
 8011f58:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	69db      	ldr	r3, [r3, #28]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d0ca      	beq.n	8011ef8 <snmp_process_getnext_request+0x12>
 8011f62:	e000      	b.n	8011f66 <snmp_process_getnext_request+0x80>
      break;
 8011f64:	bf00      	nop
    }
  }
  
  return ERR_OK;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	37e8      	adds	r7, #232	@ 0xe8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b0c0      	sub	sp, #256	@ 0x100
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 8011f80:	2300      	movs	r3, #0
 8011f82:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	3358      	adds	r3, #88	@ 0x58
 8011f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011f96:	e043      	b.n	8012020 <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 8011f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d10d      	bne.n	8011fbc <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011fa6:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

      if (repetitions == 0) {
 8011faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d03b      	beq.n	801202a <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 8011fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	3330      	adds	r3, #48	@ 0x30
 8011fc0:	f107 020c 	add.w	r2, r7, #12
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f001 fafe 	bl	80135c8 <snmp_vb_enumerator_get_next>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011fd2:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d029      	beq.n	801202e <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011fda:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	d102      	bne.n	8011fe8 <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011fe2:	f06f 030f 	mvn.w	r3, #15
 8011fe6:	e0a7      	b.n	8012138 <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 8011fe8:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d107      	bne.n	8012000 <snmp_process_getbulk_request+0x90>
 8011ff0:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8011ff4:	2b05      	cmp	r3, #5
 8011ff6:	d103      	bne.n	8012000 <snmp_process_getbulk_request+0x90>
 8011ff8:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d003      	beq.n	8012008 <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2205      	movs	r2, #5
 8012004:	61da      	str	r2, [r3, #28]
 8012006:	e00b      	b.n	8012020 <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 8012008:	f107 030c 	add.w	r3, r7, #12
 801200c:	2201      	movs	r2, #1
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff fd85 	bl	8011b20 <snmp_process_varbind>
      non_repeaters--;
 8012016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801201a:	3b01      	subs	r3, #1
 801201c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	69db      	ldr	r3, [r3, #28]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d0b7      	beq.n	8011f98 <snmp_process_getbulk_request+0x28>
 8012028:	e06d      	b.n	8012106 <snmp_process_getbulk_request+0x196>
        break;
 801202a:	bf00      	nop
 801202c:	e06b      	b.n	8012106 <snmp_process_getbulk_request+0x196>
      break;
 801202e:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8012030:	e069      	b.n	8012106 <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 8012032:	2301      	movs	r3, #1
 8012034:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
    
    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8012042:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	b29b      	uxth	r3, r3
 801204a:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 801204e:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8012052:	f001 faa1 	bl	8013598 <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 801205c:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 8012060:	e03e      	b.n	80120e0 <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 8012062:	2300      	movs	r3, #0
 8012064:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 8012068:	f107 020c 	add.w	r2, r7, #12
 801206c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8012070:	4611      	mov	r1, r2
 8012072:	4618      	mov	r0, r3
 8012074:	f001 faa8 	bl	80135c8 <snmp_vb_enumerator_get_next>
 8012078:	4603      	mov	r3, r0
 801207a:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801207e:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8012082:	2b00      	cmp	r3, #0
 8012084:	d11e      	bne.n	80120c4 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	3358      	adds	r3, #88	@ 0x58
 801208a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        snmp_process_varbind(request, &vb, 1);
 801208e:	f107 030c 	add.w	r3, r7, #12
 8012092:	2201      	movs	r2, #1
 8012094:	4619      	mov	r1, r3
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff fd42 	bl	8011b20 <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	69db      	ldr	r3, [r3, #28]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d007      	beq.n	80120b4 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a8:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 80120ac:	441a      	add	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	621a      	str	r2, [r3, #32]
 80120b2:	e015      	b.n	80120e0 <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 80120b4:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80120b8:	2b82      	cmp	r3, #130	@ 0x82
 80120ba:	d011      	beq.n	80120e0 <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 80120c2:	e00d      	b.n	80120e0 <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80120c4:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d00e      	beq.n	80120ea <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2205      	movs	r2, #5
 80120d0:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d6:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 80120da:	441a      	add	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	69db      	ldr	r3, [r3, #28]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d0bc      	beq.n	8012062 <snmp_process_getbulk_request+0xf2>
 80120e8:	e000      	b.n	80120ec <snmp_process_getbulk_request+0x17c>
        break;
 80120ea:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	69db      	ldr	r3, [r3, #28]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d103      	bne.n	80120fc <snmp_process_getbulk_request+0x18c>
 80120f4:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d114      	bne.n	8012126 <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }
    
    repetitions--;
 80120fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012100:	3b01      	subs	r3, #1
 8012102:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	69db      	ldr	r3, [r3, #28]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d10c      	bne.n	8012128 <snmp_process_getbulk_request+0x1b8>
 801210e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012112:	2b00      	cmp	r3, #0
 8012114:	dd08      	ble.n	8012128 <snmp_process_getbulk_request+0x1b8>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 801211c:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8012120:	429a      	cmp	r2, r3
 8012122:	d186      	bne.n	8012032 <snmp_process_getbulk_request+0xc2>
 8012124:	e000      	b.n	8012128 <snmp_process_getbulk_request+0x1b8>
      break;
 8012126:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	69db      	ldr	r3, [r3, #28]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d102      	bne.n	8012136 <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2200      	movs	r2, #0
 8012134:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}

08012142 <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 8012142:	b580      	push	{r7, lr}
 8012144:	b0f6      	sub	sp, #472	@ 0x1d8
 8012146:	af00      	add	r7, sp, #0
 8012148:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801214c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012150:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8012152:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012156:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3358      	adds	r3, #88	@ 0x58
 801215e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8012162:	e0ad      	b.n	80122c0 <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8012164:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012168:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	3330      	adds	r3, #48	@ 0x30
 8012170:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8012174:	4611      	mov	r1, r2
 8012176:	4618      	mov	r0, r3
 8012178:	f001 fa26 	bl	80135c8 <snmp_vb_enumerator_get_next>
 801217c:	4603      	mov	r3, r0
 801217e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012182:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012186:	2b00      	cmp	r3, #0
 8012188:	d17c      	bne.n	8012284 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 801218a:	f107 030c 	add.w	r3, r7, #12
 801218e:	22ec      	movs	r2, #236	@ 0xec
 8012190:	2100      	movs	r1, #0
 8012192:	4618      	mov	r0, r3
 8012194:	f010 fa30 	bl	80225f8 <memset>
      
      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8012198:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 801219c:	f107 020c 	add.w	r2, r7, #12
 80121a0:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80121a4:	330c      	adds	r3, #12
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fc ffc6 	bl	800f138 <snmp_get_node_instance_from_oid>
 80121ac:	4603      	mov	r3, r0
 80121ae:	461a      	mov	r2, r3
 80121b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 80121bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	69db      	ldr	r3, [r3, #28]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d179      	bne.n	80122c0 <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 80121cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121d0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80121d4:	f893 20d0 	ldrb.w	r2, [r3, #208]	@ 0xd0
 80121d8:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 80121dc:	429a      	cmp	r2, r3
 80121de:	d007      	beq.n	80121f0 <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 80121e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2207      	movs	r2, #7
 80121ec:	61da      	str	r2, [r3, #28]
 80121ee:	e036      	b.n	801225e <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 80121f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80121f4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80121f8:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80121fc:	f003 0302 	and.w	r3, r3, #2
 8012200:	2b00      	cmp	r3, #0
 8012202:	d007      	beq.n	8012214 <snmp_process_set_request+0xd2>
 8012204:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012208:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801220c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012210:	2b00      	cmp	r3, #0
 8012212:	d107      	bne.n	8012224 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 8012214:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012218:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2211      	movs	r2, #17
 8012220:	61da      	str	r2, [r3, #28]
 8012222:	e01c      	b.n	801225e <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 8012224:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012228:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801222c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012230:	2b00      	cmp	r3, #0
 8012232:	d014      	beq.n	801225e <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 8012234:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012238:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801223c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012240:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8012244:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012248:	f107 000c 	add.w	r0, r7, #12
 801224c:	4798      	blx	r3
 801224e:	4603      	mov	r3, r0
 8012250:	461a      	mov	r2, r3
 8012252:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012256:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 801225e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012262:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d028      	beq.n	80122c0 <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 801226e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012272:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801227a:	f107 020c 	add.w	r2, r7, #12
 801227e:	4610      	mov	r0, r2
 8012280:	4798      	blx	r3
 8012282:	e01d      	b.n	80122c0 <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8012284:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012288:	2b01      	cmp	r3, #1
 801228a:	d023      	beq.n	80122d4 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 801228c:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012290:	2b03      	cmp	r3, #3
 8012292:	d107      	bne.n	80122a4 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 8012294:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012298:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	2208      	movs	r2, #8
 80122a0:	61da      	str	r2, [r3, #28]
 80122a2:	e00d      	b.n	80122c0 <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 80122a4:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d102      	bne.n	80122b2 <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 80122ac:	f06f 030f 	mvn.w	r3, #15
 80122b0:	e0bb      	b.n	801242a <snmp_process_set_request+0x2e8>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 80122b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2205      	movs	r2, #5
 80122be:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 80122c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	69db      	ldr	r3, [r3, #28]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f43f af49 	beq.w	8012164 <snmp_process_set_request+0x22>
 80122d2:	e000      	b.n	80122d6 <snmp_process_set_request+0x194>
      break;
 80122d4:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 80122d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	69db      	ldr	r3, [r3, #28]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f040 80a0 	bne.w	8012428 <snmp_process_set_request+0x2e6>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 80122e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80122f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80122fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012302:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012306:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801230e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012312:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801231a:	f001 f93d 	bl	8013598 <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 801231e:	e078      	b.n	8012412 <snmp_process_set_request+0x2d0>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8012320:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012324:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	3330      	adds	r3, #48	@ 0x30
 801232c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f001 f948 	bl	80135c8 <snmp_vb_enumerator_get_next>
 8012338:	4603      	mov	r3, r0
 801233a:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801233e:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012342:	2b00      	cmp	r3, #0
 8012344:	d15a      	bne.n	80123fc <snmp_process_set_request+0x2ba>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 8012346:	f107 030c 	add.w	r3, r7, #12
 801234a:	22ec      	movs	r2, #236	@ 0xec
 801234c:	2100      	movs	r1, #0
 801234e:	4618      	mov	r0, r3
 8012350:	f010 f952 	bl	80225f8 <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8012354:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 8012358:	f107 020c 	add.w	r2, r7, #12
 801235c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8012360:	330c      	adds	r3, #12
 8012362:	4618      	mov	r0, r3
 8012364:	f7fc fee8 	bl	800f138 <snmp_get_node_instance_from_oid>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012370:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 8012378:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801237c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	69db      	ldr	r3, [r3, #28]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d144      	bne.n	8012412 <snmp_process_set_request+0x2d0>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 8012388:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801238c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012390:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012394:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8012398:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801239c:	f107 000c 	add.w	r0, r7, #12
 80123a0:	4798      	blx	r3
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d016      	beq.n	80123d6 <snmp_process_set_request+0x294>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 80123a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d107      	bne.n	80123c8 <snmp_process_set_request+0x286>
              request->error_status = SNMP_ERR_COMMITFAILED;
 80123b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	220e      	movs	r2, #14
 80123c4:	61da      	str	r2, [r3, #28]
 80123c6:	e006      	b.n	80123d6 <snmp_process_set_request+0x294>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 80123c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	220f      	movs	r2, #15
 80123d4:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 80123d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123da:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80123de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d015      	beq.n	8012412 <snmp_process_set_request+0x2d0>
            node_instance.release_instance(&node_instance);
 80123e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80123ea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80123ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80123f2:	f107 020c 	add.w	r2, r7, #12
 80123f6:	4610      	mov	r0, r2
 80123f8:	4798      	blx	r3
 80123fa:	e00a      	b.n	8012412 <snmp_process_set_request+0x2d0>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80123fc:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8012400:	2b01      	cmp	r3, #1
 8012402:	d010      	beq.n	8012426 <snmp_process_set_request+0x2e4>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 8012404:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012408:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2205      	movs	r2, #5
 8012410:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 8012412:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012416:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	69db      	ldr	r3, [r3, #28]
 801241e:	2b00      	cmp	r3, #0
 8012420:	f43f af7e 	beq.w	8012320 <snmp_process_set_request+0x1de>
 8012424:	e000      	b.n	8012428 <snmp_process_set_request+0x2e6>
        break;
 8012426:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8012428:	2300      	movs	r3, #0
}
 801242a:	4618      	mov	r0, r3
 801242c:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 8012434:	b590      	push	{r4, r7, lr}
 8012436:	b08d      	sub	sp, #52	@ 0x34
 8012438:	af02      	add	r7, sp, #8
 801243a:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  s32_t parent_tlv_value_len;
  s32_t s32_value;
  err_t err;

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012444:	891b      	ldrh	r3, [r3, #8]
 8012446:	f107 0018 	add.w	r0, r7, #24
 801244a:	2200      	movs	r2, #0
 801244c:	f001 faca 	bl	80139e4 <snmp_pbuf_stream_init>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d007      	beq.n	8012466 <snmp_parse_inbound_frame+0x32>
 8012456:	4b9f      	ldr	r3, [pc, #636]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012458:	695b      	ldr	r3, [r3, #20]
 801245a:	3301      	adds	r3, #1
 801245c:	4a9d      	ldr	r2, [pc, #628]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801245e:	6153      	str	r3, [r2, #20]
 8012460:	f06f 030f 	mvn.w	r3, #15
 8012464:	e2ee      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  
  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012466:	f107 0210 	add.w	r2, r7, #16
 801246a:	f107 0318 	add.w	r3, r7, #24
 801246e:	4611      	mov	r1, r2
 8012470:	4618      	mov	r0, r3
 8012472:	f7fb ffd9 	bl	800e428 <snmp_asn1_dec_tlv>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d007      	beq.n	801248c <snmp_parse_inbound_frame+0x58>
 801247c:	4b95      	ldr	r3, [pc, #596]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801247e:	695b      	ldr	r3, [r3, #20]
 8012480:	3301      	adds	r3, #1
 8012482:	4a94      	ldr	r2, [pc, #592]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012484:	6153      	str	r3, [r2, #20]
 8012486:	f06f 030f 	mvn.w	r3, #15
 801248a:	e2db      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 801248c:	7c3b      	ldrb	r3, [r7, #16]
 801248e:	2b30      	cmp	r3, #48	@ 0x30
 8012490:	d103      	bne.n	801249a <snmp_parse_inbound_frame+0x66>
 8012492:	8aba      	ldrh	r2, [r7, #20]
 8012494:	8bfb      	ldrh	r3, [r7, #30]
 8012496:	429a      	cmp	r2, r3
 8012498:	d007      	beq.n	80124aa <snmp_parse_inbound_frame+0x76>
 801249a:	4b8e      	ldr	r3, [pc, #568]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801249c:	695b      	ldr	r3, [r3, #20]
 801249e:	3301      	adds	r3, #1
 80124a0:	4a8c      	ldr	r2, [pc, #560]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80124a2:	6153      	str	r3, [r2, #20]
 80124a4:	f06f 030f 	mvn.w	r3, #15
 80124a8:	e2cc      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len = tlv.value_len;
 80124aa:	8abb      	ldrh	r3, [r7, #20]
 80124ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80124ae:	f107 0210 	add.w	r2, r7, #16
 80124b2:	f107 0318 	add.w	r3, r7, #24
 80124b6:	4611      	mov	r1, r2
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fb ffb5 	bl	800e428 <snmp_asn1_dec_tlv>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d007      	beq.n	80124d4 <snmp_parse_inbound_frame+0xa0>
 80124c4:	4b83      	ldr	r3, [pc, #524]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	3301      	adds	r3, #1
 80124ca:	4a82      	ldr	r2, [pc, #520]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80124cc:	6153      	str	r3, [r2, #20]
 80124ce:	f06f 030f 	mvn.w	r3, #15
 80124d2:	e2b7      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 80124d4:	7c3b      	ldrb	r3, [r7, #16]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d007      	beq.n	80124ea <snmp_parse_inbound_frame+0xb6>
 80124da:	4b7e      	ldr	r3, [pc, #504]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	3301      	adds	r3, #1
 80124e0:	4a7c      	ldr	r2, [pc, #496]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80124e2:	6153      	str	r3, [r2, #20]
 80124e4:	f06f 030f 	mvn.w	r3, #15
 80124e8:	e2ac      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80124ea:	7c7b      	ldrb	r3, [r7, #17]
 80124ec:	461a      	mov	r2, r3
 80124ee:	7cbb      	ldrb	r3, [r7, #18]
 80124f0:	4413      	add	r3, r2
 80124f2:	8aba      	ldrh	r2, [r7, #20]
 80124f4:	4413      	add	r3, r2
 80124f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80124fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fe:	2b00      	cmp	r3, #0
 8012500:	dc07      	bgt.n	8012512 <snmp_parse_inbound_frame+0xde>
 8012502:	4b74      	ldr	r3, [pc, #464]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012504:	695b      	ldr	r3, [r3, #20]
 8012506:	3301      	adds	r3, #1
 8012508:	4a72      	ldr	r2, [pc, #456]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801250a:	6153      	str	r3, [r2, #20]
 801250c:	f06f 030f 	mvn.w	r3, #15
 8012510:	e298      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8012512:	8ab9      	ldrh	r1, [r7, #20]
 8012514:	f107 020c 	add.w	r2, r7, #12
 8012518:	f107 0318 	add.w	r3, r7, #24
 801251c:	4618      	mov	r0, r3
 801251e:	f7fc f8bb 	bl	800e698 <snmp_asn1_dec_s32t>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d007      	beq.n	8012538 <snmp_parse_inbound_frame+0x104>
 8012528:	4b6a      	ldr	r3, [pc, #424]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801252a:	695b      	ldr	r3, [r3, #20]
 801252c:	3301      	adds	r3, #1
 801252e:	4a69      	ldr	r2, [pc, #420]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012530:	6153      	str	r3, [r2, #20]
 8012532:	f06f 030f 	mvn.w	r3, #15
 8012536:	e285      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  if ((s32_value != SNMP_VERSION_1) &&
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00a      	beq.n	8012554 <snmp_parse_inbound_frame+0x120>
      (s32_value != SNMP_VERSION_2c)
 801253e:	68fb      	ldr	r3, [r7, #12]
  if ((s32_value != SNMP_VERSION_1) &&
 8012540:	2b01      	cmp	r3, #1
 8012542:	d007      	beq.n	8012554 <snmp_parse_inbound_frame+0x120>
      && (s32_value != SNMP_VERSION_3)
#endif
     )
  {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 8012544:	4b63      	ldr	r3, [pc, #396]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	3301      	adds	r3, #1
 801254a:	4a62      	ldr	r2, [pc, #392]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801254c:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 801254e:	f06f 030f 	mvn.w	r3, #15
 8012552:	e277      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  }
  request->version = (u8_t)s32_value;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	b2da      	uxtb	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	729a      	strb	r2, [r3, #10]
    request->context_name_len = (u8_t)u16_value;
  } else
#endif
  {
  /* decode community */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801255c:	f107 0210 	add.w	r2, r7, #16
 8012560:	f107 0318 	add.w	r3, r7, #24
 8012564:	4611      	mov	r1, r2
 8012566:	4618      	mov	r0, r3
 8012568:	f7fb ff5e 	bl	800e428 <snmp_asn1_dec_tlv>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d007      	beq.n	8012582 <snmp_parse_inbound_frame+0x14e>
 8012572:	4b58      	ldr	r3, [pc, #352]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012574:	695b      	ldr	r3, [r3, #20]
 8012576:	3301      	adds	r3, #1
 8012578:	4a56      	ldr	r2, [pc, #344]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801257a:	6153      	str	r3, [r2, #20]
 801257c:	f06f 030f 	mvn.w	r3, #15
 8012580:	e260      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 8012582:	7c3b      	ldrb	r3, [r7, #16]
 8012584:	2b04      	cmp	r3, #4
 8012586:	d007      	beq.n	8012598 <snmp_parse_inbound_frame+0x164>
 8012588:	4b52      	ldr	r3, [pc, #328]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	3301      	adds	r3, #1
 801258e:	4a51      	ldr	r2, [pc, #324]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012590:	6153      	str	r3, [r2, #20]
 8012592:	f06f 030f 	mvn.w	r3, #15
 8012596:	e255      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8012598:	7c7b      	ldrb	r3, [r7, #17]
 801259a:	461a      	mov	r2, r3
 801259c:	7cbb      	ldrb	r3, [r7, #18]
 801259e:	4413      	add	r3, r2
 80125a0:	8aba      	ldrh	r2, [r7, #20]
 80125a2:	4413      	add	r3, r2
 80125a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80125aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	dc07      	bgt.n	80125c0 <snmp_parse_inbound_frame+0x18c>
 80125b0:	4b48      	ldr	r3, [pc, #288]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80125b2:	695b      	ldr	r3, [r3, #20]
 80125b4:	3301      	adds	r3, #1
 80125b6:	4a47      	ldr	r2, [pc, #284]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80125b8:	6153      	str	r3, [r2, #20]
 80125ba:	f06f 030f 	mvn.w	r3, #15
 80125be:	e241      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>

  err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 80125c0:	8ab9      	ldrh	r1, [r7, #20]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f103 020b 	add.w	r2, r3, #11
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3314      	adds	r3, #20
 80125cc:	f107 0018 	add.w	r0, r7, #24
 80125d0:	2408      	movs	r4, #8
 80125d2:	9400      	str	r4, [sp, #0]
 80125d4:	f7fc f99f 	bl	800e916 <snmp_asn1_dec_raw>
 80125d8:	4603      	mov	r3, r0
 80125da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err == ERR_MEM) {
 80125de:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80125e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e6:	d10b      	bne.n	8012600 <snmp_parse_inbound_frame+0x1cc>
    /* community string does not fit in our buffer -> its too long -> its invalid */
    request->community_strlen = 0;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	829a      	strh	r2, [r3, #20]
    snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 80125ee:	8abb      	ldrh	r3, [r7, #20]
 80125f0:	461a      	mov	r2, r3
 80125f2:	f107 0318 	add.w	r3, r7, #24
 80125f6:	4611      	mov	r1, r2
 80125f8:	4618      	mov	r0, r3
 80125fa:	f001 fae9 	bl	8013bd0 <snmp_pbuf_stream_seek>
 80125fe:	e00b      	b.n	8012618 <snmp_parse_inbound_frame+0x1e4>
  } else {
    IF_PARSE_ASSERT(err == ERR_OK);
 8012600:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012604:	2b00      	cmp	r3, #0
 8012606:	d007      	beq.n	8012618 <snmp_parse_inbound_frame+0x1e4>
 8012608:	4b32      	ldr	r3, [pc, #200]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	3301      	adds	r3, #1
 801260e:	4a31      	ldr	r2, [pc, #196]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012610:	6153      	str	r3, [r2, #20]
 8012612:	f06f 030f 	mvn.w	r3, #15
 8012616:	e215      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  }
  /* add zero terminator */
  request->community[request->community_strlen] = 0;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	8a9b      	ldrh	r3, [r3, #20]
 801261c:	461a      	mov	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	4413      	add	r3, r2
 8012622:	2200      	movs	r2, #0
 8012624:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012626:	f107 0210 	add.w	r2, r7, #16
 801262a:	f107 0318 	add.w	r3, r7, #24
 801262e:	4611      	mov	r1, r2
 8012630:	4618      	mov	r0, r3
 8012632:	f7fb fef9 	bl	800e428 <snmp_asn1_dec_tlv>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d007      	beq.n	801264c <snmp_parse_inbound_frame+0x218>
 801263c:	4b25      	ldr	r3, [pc, #148]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	3301      	adds	r3, #1
 8012642:	4a24      	ldr	r2, [pc, #144]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012644:	6153      	str	r3, [r2, #20]
 8012646:	f06f 030f 	mvn.w	r3, #15
 801264a:	e1fb      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 801264c:	8aba      	ldrh	r2, [r7, #20]
 801264e:	8bfb      	ldrh	r3, [r7, #30]
 8012650:	429a      	cmp	r2, r3
 8012652:	d907      	bls.n	8012664 <snmp_parse_inbound_frame+0x230>
 8012654:	4b1f      	ldr	r3, [pc, #124]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	3301      	adds	r3, #1
 801265a:	4a1e      	ldr	r2, [pc, #120]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801265c:	6153      	str	r3, [r2, #20]
 801265e:	f06f 030f 	mvn.w	r3, #15
 8012662:	e1ef      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 8012664:	8bfa      	ldrh	r2, [r7, #30]
 8012666:	8abb      	ldrh	r3, [r7, #20]
 8012668:	1ad3      	subs	r3, r2, r3
 801266a:	b29a      	uxth	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  parent_tlv_value_len = tlv.value_len;
 8012672:	8abb      	ldrh	r3, [r7, #20]
 8012674:	627b      	str	r3, [r7, #36]	@ 0x24

  /* validate PDU type */
  switch(tlv.type) {
 8012676:	7c3b      	ldrb	r3, [r7, #16]
 8012678:	3ba0      	subs	r3, #160	@ 0xa0
 801267a:	2b05      	cmp	r3, #5
 801267c:	d827      	bhi.n	80126ce <snmp_parse_inbound_frame+0x29a>
 801267e:	a201      	add	r2, pc, #4	@ (adr r2, 8012684 <snmp_parse_inbound_frame+0x250>)
 8012680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012684:	0801269d 	.word	0x0801269d
 8012688:	080126a9 	.word	0x080126a9
 801268c:	080126cf 	.word	0x080126cf
 8012690:	080126c3 	.word	0x080126c3
 8012694:	080126cf 	.word	0x080126cf
 8012698:	080126b5 	.word	0x080126b5
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 801269c:	4b0d      	ldr	r3, [pc, #52]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 801269e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126a0:	3301      	adds	r3, #1
 80126a2:	4a0c      	ldr	r2, [pc, #48]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80126a4:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
 80126a6:	e018      	b.n	80126da <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 80126a8:	4b0a      	ldr	r3, [pc, #40]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80126aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126ac:	3301      	adds	r3, #1
 80126ae:	4a09      	ldr	r2, [pc, #36]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80126b0:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 80126b2:	e012      	b.n	80126da <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	7a9b      	ldrb	r3, [r3, #10]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10d      	bne.n	80126d8 <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 80126bc:	f06f 030f 	mvn.w	r3, #15
 80126c0:	e1c0      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 80126c2:	4b04      	ldr	r3, [pc, #16]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80126c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126c6:	3301      	adds	r3, #1
 80126c8:	4a02      	ldr	r2, [pc, #8]	@ (80126d4 <snmp_parse_inbound_frame+0x2a0>)
 80126ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80126cc:	e005      	b.n	80126da <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 80126ce:	f06f 030f 	mvn.w	r3, #15
 80126d2:	e1b7      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
 80126d4:	2000854c 	.word	0x2000854c
      break;
 80126d8:	bf00      	nop
      break;
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 80126da:	7c3b      	ldrb	r3, [r7, #16]
 80126dc:	f003 031f 	and.w	r3, r3, #31
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	759a      	strb	r2, [r3, #22]

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	8a9b      	ldrh	r3, [r3, #20]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d109      	bne.n	8012702 <snmp_parse_inbound_frame+0x2ce>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 80126ee:	4ba2      	ldr	r3, [pc, #648]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	3301      	adds	r3, #1
 80126f4:	4aa0      	ldr	r2, [pc, #640]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80126f6:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 80126f8:	f002 f88a 	bl	8014810 <snmp_authfail_trap>
    return ERR_ARG;
 80126fc:	f06f 030f 	mvn.w	r3, #15
 8012700:	e1a0      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	7d9b      	ldrb	r3, [r3, #22]
 8012706:	2b03      	cmp	r3, #3
 8012708:	d120      	bne.n	801274c <snmp_parse_inbound_frame+0x318>
    if (snmp_community_write[0] == 0) {
 801270a:	4b9c      	ldr	r3, [pc, #624]	@ (801297c <snmp_parse_inbound_frame+0x548>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d106      	bne.n	8012722 <snmp_parse_inbound_frame+0x2ee>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2211      	movs	r2, #17
 8012718:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2201      	movs	r2, #1
 801271e:	621a      	str	r2, [r3, #32]
 8012720:	e029      	b.n	8012776 <snmp_parse_inbound_frame+0x342>
    } else if (strncmp(snmp_community_write, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8012722:	4b96      	ldr	r3, [pc, #600]	@ (801297c <snmp_parse_inbound_frame+0x548>)
 8012724:	6818      	ldr	r0, [r3, #0]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	330b      	adds	r3, #11
 801272a:	2208      	movs	r2, #8
 801272c:	4619      	mov	r1, r3
 801272e:	f00f ff99 	bl	8022664 <strncmp>
 8012732:	4603      	mov	r3, r0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d01e      	beq.n	8012776 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8012738:	4b8f      	ldr	r3, [pc, #572]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	3301      	adds	r3, #1
 801273e:	4a8e      	ldr	r2, [pc, #568]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012740:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8012742:	f002 f865 	bl	8014810 <snmp_authfail_trap>
      return ERR_ARG;
 8012746:	f06f 030f 	mvn.w	r3, #15
 801274a:	e17b      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
    }
  } else { 
    if (strncmp(snmp_community, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 801274c:	4b8c      	ldr	r3, [pc, #560]	@ (8012980 <snmp_parse_inbound_frame+0x54c>)
 801274e:	6818      	ldr	r0, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	330b      	adds	r3, #11
 8012754:	2208      	movs	r2, #8
 8012756:	4619      	mov	r1, r3
 8012758:	f00f ff84 	bl	8022664 <strncmp>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d009      	beq.n	8012776 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8012762:	4b85      	ldr	r3, [pc, #532]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	3301      	adds	r3, #1
 8012768:	4a83      	ldr	r2, [pc, #524]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801276a:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 801276c:	f002 f850 	bl	8014810 <snmp_authfail_trap>
      return ERR_ARG;
 8012770:	f06f 030f 	mvn.w	r3, #15
 8012774:	e166      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
    }
  }
  
  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012776:	f107 0210 	add.w	r2, r7, #16
 801277a:	f107 0318 	add.w	r3, r7, #24
 801277e:	4611      	mov	r1, r2
 8012780:	4618      	mov	r0, r3
 8012782:	f7fb fe51 	bl	800e428 <snmp_asn1_dec_tlv>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d007      	beq.n	801279c <snmp_parse_inbound_frame+0x368>
 801278c:	4b7a      	ldr	r3, [pc, #488]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801278e:	695b      	ldr	r3, [r3, #20]
 8012790:	3301      	adds	r3, #1
 8012792:	4a79      	ldr	r2, [pc, #484]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012794:	6153      	str	r3, [r2, #20]
 8012796:	f06f 030f 	mvn.w	r3, #15
 801279a:	e153      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 801279c:	7c3b      	ldrb	r3, [r7, #16]
 801279e:	2b02      	cmp	r3, #2
 80127a0:	d007      	beq.n	80127b2 <snmp_parse_inbound_frame+0x37e>
 80127a2:	4b75      	ldr	r3, [pc, #468]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127a4:	695b      	ldr	r3, [r3, #20]
 80127a6:	3301      	adds	r3, #1
 80127a8:	4a73      	ldr	r2, [pc, #460]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127aa:	6153      	str	r3, [r2, #20]
 80127ac:	f06f 030f 	mvn.w	r3, #15
 80127b0:	e148      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80127b2:	7c7b      	ldrb	r3, [r7, #17]
 80127b4:	461a      	mov	r2, r3
 80127b6:	7cbb      	ldrb	r3, [r7, #18]
 80127b8:	4413      	add	r3, r2
 80127ba:	8aba      	ldrh	r2, [r7, #20]
 80127bc:	4413      	add	r3, r2
 80127be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127c0:	1ad3      	subs	r3, r2, r3
 80127c2:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80127c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	dc07      	bgt.n	80127da <snmp_parse_inbound_frame+0x3a6>
 80127ca:	4b6b      	ldr	r3, [pc, #428]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127cc:	695b      	ldr	r3, [r3, #20]
 80127ce:	3301      	adds	r3, #1
 80127d0:	4a69      	ldr	r2, [pc, #420]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127d2:	6153      	str	r3, [r2, #20]
 80127d4:	f06f 030f 	mvn.w	r3, #15
 80127d8:	e134      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 80127da:	8ab9      	ldrh	r1, [r7, #20]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f103 0218 	add.w	r2, r3, #24
 80127e2:	f107 0318 	add.w	r3, r7, #24
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fb ff56 	bl	800e698 <snmp_asn1_dec_s32t>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d007      	beq.n	8012802 <snmp_parse_inbound_frame+0x3ce>
 80127f2:	4b61      	ldr	r3, [pc, #388]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127f4:	695b      	ldr	r3, [r3, #20]
 80127f6:	3301      	adds	r3, #1
 80127f8:	4a5f      	ldr	r2, [pc, #380]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80127fa:	6153      	str	r3, [r2, #20]
 80127fc:	f06f 030f 	mvn.w	r3, #15
 8012800:	e120      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012802:	f107 0210 	add.w	r2, r7, #16
 8012806:	f107 0318 	add.w	r3, r7, #24
 801280a:	4611      	mov	r1, r2
 801280c:	4618      	mov	r0, r3
 801280e:	f7fb fe0b 	bl	800e428 <snmp_asn1_dec_tlv>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d007      	beq.n	8012828 <snmp_parse_inbound_frame+0x3f4>
 8012818:	4b57      	ldr	r3, [pc, #348]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801281a:	695b      	ldr	r3, [r3, #20]
 801281c:	3301      	adds	r3, #1
 801281e:	4a56      	ldr	r2, [pc, #344]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012820:	6153      	str	r3, [r2, #20]
 8012822:	f06f 030f 	mvn.w	r3, #15
 8012826:	e10d      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012828:	7c3b      	ldrb	r3, [r7, #16]
 801282a:	2b02      	cmp	r3, #2
 801282c:	d007      	beq.n	801283e <snmp_parse_inbound_frame+0x40a>
 801282e:	4b52      	ldr	r3, [pc, #328]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012830:	695b      	ldr	r3, [r3, #20]
 8012832:	3301      	adds	r3, #1
 8012834:	4a50      	ldr	r2, [pc, #320]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012836:	6153      	str	r3, [r2, #20]
 8012838:	f06f 030f 	mvn.w	r3, #15
 801283c:	e102      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801283e:	7c7b      	ldrb	r3, [r7, #17]
 8012840:	461a      	mov	r2, r3
 8012842:	7cbb      	ldrb	r3, [r7, #18]
 8012844:	4413      	add	r3, r2
 8012846:	8aba      	ldrh	r2, [r7, #20]
 8012848:	4413      	add	r3, r2
 801284a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012852:	2b00      	cmp	r3, #0
 8012854:	dc07      	bgt.n	8012866 <snmp_parse_inbound_frame+0x432>
 8012856:	4b48      	ldr	r3, [pc, #288]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012858:	695b      	ldr	r3, [r3, #20]
 801285a:	3301      	adds	r3, #1
 801285c:	4a46      	ldr	r2, [pc, #280]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801285e:	6153      	str	r3, [r2, #20]
 8012860:	f06f 030f 	mvn.w	r3, #15
 8012864:	e0ee      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7d9b      	ldrb	r3, [r3, #22]
 801286a:	2b05      	cmp	r3, #5
 801286c:	d11b      	bne.n	80128a6 <snmp_parse_inbound_frame+0x472>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 801286e:	8ab9      	ldrh	r1, [r7, #20]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012876:	f107 0318 	add.w	r3, r7, #24
 801287a:	4618      	mov	r0, r3
 801287c:	f7fb ff0c 	bl	800e698 <snmp_asn1_dec_s32t>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d007      	beq.n	8012896 <snmp_parse_inbound_frame+0x462>
 8012886:	4b3c      	ldr	r3, [pc, #240]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	3301      	adds	r3, #1
 801288c:	4a3a      	ldr	r2, [pc, #232]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801288e:	6153      	str	r3, [r2, #20]
 8012890:	f06f 030f 	mvn.w	r3, #15
 8012894:	e0d6      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
    if (request->non_repeaters < 0) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801289a:	2b00      	cmp	r3, #0
 801289c:	da21      	bge.n	80128e2 <snmp_parse_inbound_frame+0x4ae>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2200      	movs	r2, #0
 80128a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80128a4:	e01d      	b.n	80128e2 <snmp_parse_inbound_frame+0x4ae>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 80128a6:	8ab9      	ldrh	r1, [r7, #20]
 80128a8:	f107 020c 	add.w	r2, r7, #12
 80128ac:	f107 0318 	add.w	r3, r7, #24
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fb fef1 	bl	800e698 <snmp_asn1_dec_s32t>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d007      	beq.n	80128cc <snmp_parse_inbound_frame+0x498>
 80128bc:	4b2e      	ldr	r3, [pc, #184]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80128be:	695b      	ldr	r3, [r3, #20]
 80128c0:	3301      	adds	r3, #1
 80128c2:	4a2d      	ldr	r2, [pc, #180]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80128c4:	6153      	str	r3, [r2, #20]
 80128c6:	f06f 030f 	mvn.w	r3, #15
 80128ca:	e0bb      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d007      	beq.n	80128e2 <snmp_parse_inbound_frame+0x4ae>
 80128d2:	4b29      	ldr	r3, [pc, #164]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80128d4:	695b      	ldr	r3, [r3, #20]
 80128d6:	3301      	adds	r3, #1
 80128d8:	4a27      	ldr	r2, [pc, #156]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80128da:	6153      	str	r3, [r2, #20]
 80128dc:	f06f 030f 	mvn.w	r3, #15
 80128e0:	e0b0      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80128e2:	f107 0210 	add.w	r2, r7, #16
 80128e6:	f107 0318 	add.w	r3, r7, #24
 80128ea:	4611      	mov	r1, r2
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fb fd9b 	bl	800e428 <snmp_asn1_dec_tlv>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d007      	beq.n	8012908 <snmp_parse_inbound_frame+0x4d4>
 80128f8:	4b1f      	ldr	r3, [pc, #124]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 80128fa:	695b      	ldr	r3, [r3, #20]
 80128fc:	3301      	adds	r3, #1
 80128fe:	4a1e      	ldr	r2, [pc, #120]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012900:	6153      	str	r3, [r2, #20]
 8012902:	f06f 030f 	mvn.w	r3, #15
 8012906:	e09d      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012908:	7c3b      	ldrb	r3, [r7, #16]
 801290a:	2b02      	cmp	r3, #2
 801290c:	d007      	beq.n	801291e <snmp_parse_inbound_frame+0x4ea>
 801290e:	4b1a      	ldr	r3, [pc, #104]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012910:	695b      	ldr	r3, [r3, #20]
 8012912:	3301      	adds	r3, #1
 8012914:	4a18      	ldr	r2, [pc, #96]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012916:	6153      	str	r3, [r2, #20]
 8012918:	f06f 030f 	mvn.w	r3, #15
 801291c:	e092      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801291e:	7c7b      	ldrb	r3, [r7, #17]
 8012920:	461a      	mov	r2, r3
 8012922:	7cbb      	ldrb	r3, [r7, #18]
 8012924:	4413      	add	r3, r2
 8012926:	8aba      	ldrh	r2, [r7, #20]
 8012928:	4413      	add	r3, r2
 801292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801292c:	1ad3      	subs	r3, r2, r3
 801292e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012932:	2b00      	cmp	r3, #0
 8012934:	dc07      	bgt.n	8012946 <snmp_parse_inbound_frame+0x512>
 8012936:	4b10      	ldr	r3, [pc, #64]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012938:	695b      	ldr	r3, [r3, #20]
 801293a:	3301      	adds	r3, #1
 801293c:	4a0e      	ldr	r2, [pc, #56]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801293e:	6153      	str	r3, [r2, #20]
 8012940:	f06f 030f 	mvn.w	r3, #15
 8012944:	e07e      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	7d9b      	ldrb	r3, [r3, #22]
 801294a:	2b05      	cmp	r3, #5
 801294c:	d122      	bne.n	8012994 <snmp_parse_inbound_frame+0x560>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 801294e:	8ab9      	ldrh	r1, [r7, #20]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012956:	f107 0318 	add.w	r3, r7, #24
 801295a:	4618      	mov	r0, r3
 801295c:	f7fb fe9c 	bl	800e698 <snmp_asn1_dec_s32t>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00e      	beq.n	8012984 <snmp_parse_inbound_frame+0x550>
 8012966:	4b04      	ldr	r3, [pc, #16]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 8012968:	695b      	ldr	r3, [r3, #20]
 801296a:	3301      	adds	r3, #1
 801296c:	4a02      	ldr	r2, [pc, #8]	@ (8012978 <snmp_parse_inbound_frame+0x544>)
 801296e:	6153      	str	r3, [r2, #20]
 8012970:	f06f 030f 	mvn.w	r3, #15
 8012974:	e066      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
 8012976:	bf00      	nop
 8012978:	2000854c 	.word	0x2000854c
 801297c:	20000110 	.word	0x20000110
 8012980:	2000010c 	.word	0x2000010c
    if (request->max_repetitions < 0) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012988:	2b00      	cmp	r3, #0
 801298a:	da22      	bge.n	80129d2 <snmp_parse_inbound_frame+0x59e>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	629a      	str	r2, [r3, #40]	@ 0x28
 8012992:	e01e      	b.n	80129d2 <snmp_parse_inbound_frame+0x59e>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 8012994:	8ab9      	ldrh	r1, [r7, #20]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f103 0220 	add.w	r2, r3, #32
 801299c:	f107 0318 	add.w	r3, r7, #24
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fb fe79 	bl	800e698 <snmp_asn1_dec_s32t>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d007      	beq.n	80129bc <snmp_parse_inbound_frame+0x588>
 80129ac:	4b27      	ldr	r3, [pc, #156]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	3301      	adds	r3, #1
 80129b2:	4a26      	ldr	r2, [pc, #152]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129b4:	6153      	str	r3, [r2, #20]
 80129b6:	f06f 030f 	mvn.w	r3, #15
 80129ba:	e043      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == 0);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d007      	beq.n	80129d2 <snmp_parse_inbound_frame+0x59e>
 80129c2:	4b22      	ldr	r3, [pc, #136]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129c4:	695b      	ldr	r3, [r3, #20]
 80129c6:	3301      	adds	r3, #1
 80129c8:	4a20      	ldr	r2, [pc, #128]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129ca:	6153      	str	r3, [r2, #20]
 80129cc:	f06f 030f 	mvn.w	r3, #15
 80129d0:	e038      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80129d2:	f107 0210 	add.w	r2, r7, #16
 80129d6:	f107 0318 	add.w	r3, r7, #24
 80129da:	4611      	mov	r1, r2
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fb fd23 	bl	800e428 <snmp_asn1_dec_tlv>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d007      	beq.n	80129f8 <snmp_parse_inbound_frame+0x5c4>
 80129e8:	4b18      	ldr	r3, [pc, #96]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	3301      	adds	r3, #1
 80129ee:	4a17      	ldr	r2, [pc, #92]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 80129f0:	6153      	str	r3, [r2, #20]
 80129f2:	f06f 030f 	mvn.w	r3, #15
 80129f6:	e025      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 80129f8:	7c3b      	ldrb	r3, [r7, #16]
 80129fa:	2b30      	cmp	r3, #48	@ 0x30
 80129fc:	d103      	bne.n	8012a06 <snmp_parse_inbound_frame+0x5d2>
 80129fe:	8aba      	ldrh	r2, [r7, #20]
 8012a00:	8bfb      	ldrh	r3, [r7, #30]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d907      	bls.n	8012a16 <snmp_parse_inbound_frame+0x5e2>
 8012a06:	4b11      	ldr	r3, [pc, #68]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8012a4c <snmp_parse_inbound_frame+0x618>)
 8012a0e:	6153      	str	r3, [r2, #20]
 8012a10:	f06f 030f 	mvn.w	r3, #15
 8012a14:	e016      	b.n	8012a44 <snmp_parse_inbound_frame+0x610>
  
  request->inbound_varbind_offset = pbuf_stream.offset;
 8012a16:	8bba      	ldrh	r2, [r7, #28]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 8012a1c:	8bfa      	ldrh	r2, [r7, #30]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8012a24:	1ad3      	subs	r3, r2, r3
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012a3e:	f000 fdab 	bl	8013598 <snmp_vb_enumerator_init>

  return ERR_OK;
 8012a42:	2300      	movs	r3, #0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	372c      	adds	r7, #44	@ 0x2c
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd90      	pop	{r4, r7, pc}
 8012a4c:	2000854c 	.word	0x2000854c

08012a50 <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b086      	sub	sp, #24
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream* pbuf_stream = &(request->outbound_pbuf_stream);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3348      	adds	r3, #72	@ 0x48
 8012a5c:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 8012a5e:	2200      	movs	r2, #0
 8012a60:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8012a64:	2000      	movs	r0, #0
 8012a66:	f003 f85b 	bl	8015b20 <pbuf_alloc>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (request->outbound_pbuf == NULL) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <snmp_prepare_outbound_frame+0x2e>
    return ERR_MEM;
 8012a78:	f04f 33ff 	mov.w	r3, #4294967295
 8012a7c:	e10e      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a86:	891b      	ldrh	r3, [r3, #8]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	6978      	ldr	r0, [r7, #20]
 8012a8c:	f000 ffaa 	bl	80139e4 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012a90:	2330      	movs	r3, #48	@ 0x30
 8012a92:	733b      	strb	r3, [r7, #12]
 8012a94:	2300      	movs	r3, #0
 8012a96:	737b      	strb	r3, [r7, #13]
 8012a98:	2303      	movs	r3, #3
 8012a9a:	73bb      	strb	r3, [r7, #14]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012aa0:	f107 030c 	add.w	r3, r7, #12
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6978      	ldr	r0, [r7, #20]
 8012aa8:	f7fb f9fc 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d002      	beq.n	8012ab8 <snmp_prepare_outbound_frame+0x68>
 8012ab2:	f06f 030f 	mvn.w	r3, #15
 8012ab6:	e0f1      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012ab8:	2302      	movs	r3, #2
 8012aba:	733b      	strb	r3, [r7, #12]
 8012abc:	2300      	movs	r3, #0
 8012abe:	737b      	strb	r3, [r7, #13]
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	73bb      	strb	r3, [r7, #14]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	7a9b      	ldrb	r3, [r3, #10]
 8012acc:	461a      	mov	r2, r3
 8012ace:	f107 030c 	add.w	r3, r7, #12
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	f7fb fc3a 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012adc:	f107 030c 	add.w	r3, r7, #12
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6978      	ldr	r0, [r7, #20]
 8012ae4:	f7fb f9de 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d002      	beq.n	8012af4 <snmp_prepare_outbound_frame+0xa4>
 8012aee:	f06f 030f 	mvn.w	r3, #15
 8012af2:	e0d3      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 8012af4:	8a39      	ldrh	r1, [r7, #16]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	7a9b      	ldrb	r3, [r3, #10]
 8012afa:	461a      	mov	r2, r3
 8012afc:	6978      	ldr	r0, [r7, #20]
 8012afe:	f7fb fb1c 	bl	800e13a <snmp_asn1_enc_s32t>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d002      	beq.n	8012b0e <snmp_prepare_outbound_frame+0xbe>
 8012b08:	f06f 030f 	mvn.w	r3, #15
 8012b0c:	e0c6      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 8012b0e:	2304      	movs	r3, #4
 8012b10:	733b      	strb	r3, [r7, #12]
 8012b12:	2300      	movs	r3, #0
 8012b14:	737b      	strb	r3, [r7, #13]
 8012b16:	2300      	movs	r3, #0
 8012b18:	73bb      	strb	r3, [r7, #14]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	8a9b      	ldrh	r3, [r3, #20]
 8012b1e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012b20:	f107 030c 	add.w	r3, r7, #12
 8012b24:	4619      	mov	r1, r3
 8012b26:	6978      	ldr	r0, [r7, #20]
 8012b28:	f7fb f9bc 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d002      	beq.n	8012b38 <snmp_prepare_outbound_frame+0xe8>
 8012b32:	f06f 030f 	mvn.w	r3, #15
 8012b36:	e0b1      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f103 010b 	add.w	r1, r3, #11
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	8a9b      	ldrh	r3, [r3, #20]
 8012b42:	461a      	mov	r2, r3
 8012b44:	6978      	ldr	r0, [r7, #20]
 8012b46:	f7fb fa38 	bl	800dfba <snmp_asn1_enc_raw>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d002      	beq.n	8012b56 <snmp_prepare_outbound_frame+0x106>
 8012b50:	f06f 030f 	mvn.w	r3, #15
 8012b54:	e0a2      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	889a      	ldrh	r2, [r3, #4]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3, 0);
 8012b60:	23a2      	movs	r3, #162	@ 0xa2
 8012b62:	733b      	strb	r3, [r7, #12]
 8012b64:	2300      	movs	r3, #0
 8012b66:	737b      	strb	r3, [r7, #13]
 8012b68:	2303      	movs	r3, #3
 8012b6a:	73bb      	strb	r3, [r7, #14]
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012b70:	f107 030c 	add.w	r3, r7, #12
 8012b74:	4619      	mov	r1, r3
 8012b76:	6978      	ldr	r0, [r7, #20]
 8012b78:	f7fb f994 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <snmp_prepare_outbound_frame+0x138>
 8012b82:	f06f 030f 	mvn.w	r3, #15
 8012b86:	e089      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012b88:	2302      	movs	r3, #2
 8012b8a:	733b      	strb	r3, [r7, #12]
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	737b      	strb	r3, [r7, #13]
 8012b90:	2300      	movs	r3, #0
 8012b92:	73bb      	strb	r3, [r7, #14]
 8012b94:	2300      	movs	r3, #0
 8012b96:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	699a      	ldr	r2, [r3, #24]
 8012b9c:	f107 030c 	add.w	r3, r7, #12
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	f7fb fbd3 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012baa:	f107 030c 	add.w	r3, r7, #12
 8012bae:	4619      	mov	r1, r3
 8012bb0:	6978      	ldr	r0, [r7, #20]
 8012bb2:	f7fb f977 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d002      	beq.n	8012bc2 <snmp_prepare_outbound_frame+0x172>
 8012bbc:	f06f 030f 	mvn.w	r3, #15
 8012bc0:	e06c      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 8012bc2:	8a39      	ldrh	r1, [r7, #16]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	699b      	ldr	r3, [r3, #24]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	6978      	ldr	r0, [r7, #20]
 8012bcc:	f7fb fab5 	bl	800e13a <snmp_asn1_enc_s32t>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d002      	beq.n	8012bdc <snmp_prepare_outbound_frame+0x18c>
 8012bd6:	f06f 030f 	mvn.w	r3, #15
 8012bda:	e05f      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8012bdc:	2302      	movs	r3, #2
 8012bde:	733b      	strb	r3, [r7, #12]
 8012be0:	2300      	movs	r3, #0
 8012be2:	737b      	strb	r3, [r7, #13]
 8012be4:	2300      	movs	r3, #0
 8012be6:	73bb      	strb	r3, [r7, #14]
 8012be8:	2301      	movs	r3, #1
 8012bea:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012bec:	f107 030c 	add.w	r3, r7, #12
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	6978      	ldr	r0, [r7, #20]
 8012bf4:	f7fb f956 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <snmp_prepare_outbound_frame+0x1b4>
 8012bfe:	f06f 030f 	mvn.w	r3, #15
 8012c02:	e04b      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_status_offset = pbuf_stream->offset;
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	889a      	ldrh	r2, [r3, #4]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012c0e:	2100      	movs	r1, #0
 8012c10:	6978      	ldr	r0, [r7, #20]
 8012c12:	f000 ff2c 	bl	8013a6e <snmp_pbuf_stream_write>
 8012c16:	4603      	mov	r3, r0
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <snmp_prepare_outbound_frame+0x1d2>
 8012c1c:	f06f 030f 	mvn.w	r3, #15
 8012c20:	e03c      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8012c22:	2302      	movs	r3, #2
 8012c24:	733b      	strb	r3, [r7, #12]
 8012c26:	2300      	movs	r3, #0
 8012c28:	737b      	strb	r3, [r7, #13]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	73bb      	strb	r3, [r7, #14]
 8012c2e:	2301      	movs	r3, #1
 8012c30:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012c32:	f107 030c 	add.w	r3, r7, #12
 8012c36:	4619      	mov	r1, r3
 8012c38:	6978      	ldr	r0, [r7, #20]
 8012c3a:	f7fb f933 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d002      	beq.n	8012c4a <snmp_prepare_outbound_frame+0x1fa>
 8012c44:	f06f 030f 	mvn.w	r3, #15
 8012c48:	e028      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_index_offset = pbuf_stream->offset;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	889a      	ldrh	r2, [r3, #4]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012c54:	2100      	movs	r1, #0
 8012c56:	6978      	ldr	r0, [r7, #20]
 8012c58:	f000 ff09 	bl	8013a6e <snmp_pbuf_stream_write>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d002      	beq.n	8012c68 <snmp_prepare_outbound_frame+0x218>
 8012c62:	f06f 030f 	mvn.w	r3, #15
 8012c66:	e019      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012c68:	2330      	movs	r3, #48	@ 0x30
 8012c6a:	733b      	strb	r3, [r7, #12]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	737b      	strb	r3, [r7, #13]
 8012c70:	2303      	movs	r3, #3
 8012c72:	73bb      	strb	r3, [r7, #14]
 8012c74:	2300      	movs	r3, #0
 8012c76:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012c78:	f107 030c 	add.w	r3, r7, #12
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	6978      	ldr	r0, [r7, #20]
 8012c80:	f7fb f910 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d002      	beq.n	8012c90 <snmp_prepare_outbound_frame+0x240>
 8012c8a:	f06f 030f 	mvn.w	r3, #15
 8012c8e:	e005      	b.n	8012c9c <snmp_prepare_outbound_frame+0x24c>

  request->outbound_varbind_offset = pbuf_stream->offset;
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	889a      	ldrh	r2, [r3, #4]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

  return ERR_OK;
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f103 000c 	add.w	r0, r3, #12
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7a1b      	ldrb	r3, [r3, #8]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	3306      	adds	r3, #6
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	f7fb fb70 	bl	800e3a4 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	88da      	ldrh	r2, [r3, #6]
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	3304      	adds	r3, #4
 8012ccc:	4619      	mov	r1, r3
 8012cce:	4610      	mov	r0, r2
 8012cd0:	f7fb fad4 	bl	800e27c <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d103      	bne.n	8012ce6 <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	815a      	strh	r2, [r3, #10]
 8012ce4:	e107      	b.n	8012ef6 <snmp_varbind_length+0x252>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012cec:	b21b      	sxth	r3, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	da08      	bge.n	8012d04 <snmp_varbind_length+0x60>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012cf8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	815a      	strh	r2, [r3, #10]
 8012d02:	e0f8      	b.n	8012ef6 <snmp_varbind_length+0x252>
  } else {
    switch (varbind->type) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012d0a:	3b02      	subs	r3, #2
 8012d0c:	2b44      	cmp	r3, #68	@ 0x44
 8012d0e:	f200 80ef 	bhi.w	8012ef0 <snmp_varbind_length+0x24c>
 8012d12:	a201      	add	r2, pc, #4	@ (adr r2, 8012d18 <snmp_varbind_length+0x74>)
 8012d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d18:	08012e2d 	.word	0x08012e2d
 8012d1c:	08012ef1 	.word	0x08012ef1
 8012d20:	08012e79 	.word	0x08012e79
 8012d24:	08012e85 	.word	0x08012e85
 8012d28:	08012e9d 	.word	0x08012e9d
 8012d2c:	08012ef1 	.word	0x08012ef1
 8012d30:	08012ef1 	.word	0x08012ef1
 8012d34:	08012ef1 	.word	0x08012ef1
 8012d38:	08012ef1 	.word	0x08012ef1
 8012d3c:	08012ef1 	.word	0x08012ef1
 8012d40:	08012ef1 	.word	0x08012ef1
 8012d44:	08012ef1 	.word	0x08012ef1
 8012d48:	08012ef1 	.word	0x08012ef1
 8012d4c:	08012ef1 	.word	0x08012ef1
 8012d50:	08012ef1 	.word	0x08012ef1
 8012d54:	08012ef1 	.word	0x08012ef1
 8012d58:	08012ef1 	.word	0x08012ef1
 8012d5c:	08012ef1 	.word	0x08012ef1
 8012d60:	08012ef1 	.word	0x08012ef1
 8012d64:	08012ef1 	.word	0x08012ef1
 8012d68:	08012ef1 	.word	0x08012ef1
 8012d6c:	08012ef1 	.word	0x08012ef1
 8012d70:	08012ef1 	.word	0x08012ef1
 8012d74:	08012ef1 	.word	0x08012ef1
 8012d78:	08012ef1 	.word	0x08012ef1
 8012d7c:	08012ef1 	.word	0x08012ef1
 8012d80:	08012ef1 	.word	0x08012ef1
 8012d84:	08012ef1 	.word	0x08012ef1
 8012d88:	08012ef1 	.word	0x08012ef1
 8012d8c:	08012ef1 	.word	0x08012ef1
 8012d90:	08012ef1 	.word	0x08012ef1
 8012d94:	08012ef1 	.word	0x08012ef1
 8012d98:	08012ef1 	.word	0x08012ef1
 8012d9c:	08012ef1 	.word	0x08012ef1
 8012da0:	08012ef1 	.word	0x08012ef1
 8012da4:	08012ef1 	.word	0x08012ef1
 8012da8:	08012ef1 	.word	0x08012ef1
 8012dac:	08012ef1 	.word	0x08012ef1
 8012db0:	08012ef1 	.word	0x08012ef1
 8012db4:	08012ef1 	.word	0x08012ef1
 8012db8:	08012ef1 	.word	0x08012ef1
 8012dbc:	08012ef1 	.word	0x08012ef1
 8012dc0:	08012ef1 	.word	0x08012ef1
 8012dc4:	08012ef1 	.word	0x08012ef1
 8012dc8:	08012ef1 	.word	0x08012ef1
 8012dcc:	08012ef1 	.word	0x08012ef1
 8012dd0:	08012ef1 	.word	0x08012ef1
 8012dd4:	08012ef1 	.word	0x08012ef1
 8012dd8:	08012ef1 	.word	0x08012ef1
 8012ddc:	08012ef1 	.word	0x08012ef1
 8012de0:	08012ef1 	.word	0x08012ef1
 8012de4:	08012ef1 	.word	0x08012ef1
 8012de8:	08012ef1 	.word	0x08012ef1
 8012dec:	08012ef1 	.word	0x08012ef1
 8012df0:	08012ef1 	.word	0x08012ef1
 8012df4:	08012ef1 	.word	0x08012ef1
 8012df8:	08012ef1 	.word	0x08012ef1
 8012dfc:	08012ef1 	.word	0x08012ef1
 8012e00:	08012ef1 	.word	0x08012ef1
 8012e04:	08012ef1 	.word	0x08012ef1
 8012e08:	08012ef1 	.word	0x08012ef1
 8012e0c:	08012ef1 	.word	0x08012ef1
 8012e10:	08012e79 	.word	0x08012e79
 8012e14:	08012e53 	.word	0x08012e53
 8012e18:	08012e53 	.word	0x08012e53
 8012e1c:	08012e53 	.word	0x08012e53
 8012e20:	08012e79 	.word	0x08012e79
 8012e24:	08012ef1 	.word	0x08012ef1
 8012e28:	08012ecd 	.word	0x08012ecd
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e32:	2b04      	cmp	r3, #4
 8012e34:	d002      	beq.n	8012e3c <snmp_varbind_length+0x198>
          return ERR_VAL;
 8012e36:	f06f 0305 	mvn.w	r3, #5
 8012e3a:	e07f      	b.n	8012f3c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t*) varbind->value), &len->value_value_len);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	330a      	adds	r3, #10
 8012e48:	4619      	mov	r1, r3
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	f7fb fa80 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
        break;
 8012e50:	e051      	b.n	8012ef6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e58:	2b04      	cmp	r3, #4
 8012e5a:	d002      	beq.n	8012e62 <snmp_varbind_length+0x1be>
          return ERR_VAL;
 8012e5c:	f06f 0305 	mvn.w	r3, #5
 8012e60:	e06c      	b.n	8012f3c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t*) varbind->value), &len->value_value_len);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	330a      	adds	r3, #10
 8012e6e:	4619      	mov	r1, r3
 8012e70:	4610      	mov	r0, r2
 8012e72:	f7fb fa1f 	bl	800e2b4 <snmp_asn1_enc_u32t_cnt>
        break;
 8012e76:	e03e      	b.n	8012ef6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	815a      	strh	r2, [r3, #10]
        break;
 8012e82:	e038      	b.n	8012ef6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d002      	beq.n	8012e94 <snmp_varbind_length+0x1f0>
          return ERR_VAL;
 8012e8e:	f06f 0305 	mvn.w	r3, #5
 8012e92:	e053      	b.n	8012f3c <snmp_varbind_length+0x298>
        }
        len->value_value_len = 0;
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	2200      	movs	r2, #0
 8012e98:	815a      	strh	r2, [r3, #10]
        break;
 8012e9a:	e02c      	b.n	8012ef6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012ea2:	f003 0303 	and.w	r3, r3, #3
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d002      	beq.n	8012eb0 <snmp_varbind_length+0x20c>
          return ERR_VAL;
 8012eaa:	f06f 0305 	mvn.w	r3, #5
 8012eae:	e045      	b.n	8012f3c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_oid_cnt((u32_t*) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012ebc:	089b      	lsrs	r3, r3, #2
 8012ebe:	b299      	uxth	r1, r3
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	330a      	adds	r3, #10
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f7fb fa6d 	bl	800e3a4 <snmp_asn1_enc_oid_cnt>
        break;
 8012eca:	e014      	b.n	8012ef6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != (2 * sizeof (u32_t))) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012ed2:	2b08      	cmp	r3, #8
 8012ed4:	d002      	beq.n	8012edc <snmp_varbind_length+0x238>
          return ERR_VAL;
 8012ed6:	f06f 0305 	mvn.w	r3, #5
 8012eda:	e02f      	b.n	8012f3c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u64t_cnt((u32_t*) varbind->value, &len->value_value_len);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	330a      	adds	r3, #10
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7fb fa0e 	bl	800e30a <snmp_asn1_enc_u64t_cnt>
        break;
 8012eee:	e002      	b.n	8012ef6 <snmp_varbind_length+0x252>
      default:
        /* unsupported type */
        return ERR_VAL;
 8012ef0:	f06f 0305 	mvn.w	r3, #5
 8012ef4:	e022      	b.n	8012f3c <snmp_varbind_length+0x298>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	895a      	ldrh	r2, [r3, #10]
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	3308      	adds	r3, #8
 8012efe:	4619      	mov	r1, r3
 8012f00:	4610      	mov	r0, r2
 8012f02:	f7fb f9bb 	bl	800e27c <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	791b      	ldrb	r3, [r3, #4]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	88db      	ldrh	r3, [r3, #6]
 8012f10:	4413      	add	r3, r2
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	7a12      	ldrb	r2, [r2, #8]
 8012f18:	4413      	add	r3, r2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	895b      	ldrh	r3, [r3, #10]
 8012f20:	4413      	add	r3, r2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	3302      	adds	r3, #2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	885b      	ldrh	r3, [r3, #2]
 8012f30:	683a      	ldr	r2, [r7, #0]
 8012f32:	4611      	mov	r1, r2
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fb f9a1 	bl	800e27c <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 8012f3a:	2300      	movs	r3, #0
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3708      	adds	r7, #8
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind* varbind)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b088      	sub	sp, #32
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 8012f4e:	f107 030c 	add.w	r3, r7, #12
 8012f52:	4619      	mov	r1, r3
 8012f54:	6838      	ldr	r0, [r7, #0]
 8012f56:	f7ff fea5 	bl	8012ca4 <snmp_varbind_length>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 8012f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d002      	beq.n	8012f6c <snmp_append_outbound_varbind+0x28>
    return err;
 8012f66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f6a:	e0f6      	b.n	801315a <snmp_append_outbound_varbind+0x216>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 8012f6c:	7b3b      	ldrb	r3, [r7, #12]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	89fa      	ldrh	r2, [r7, #14]
 8012f72:	4413      	add	r3, r2
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	88d2      	ldrh	r2, [r2, #6]
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	dd02      	ble.n	8012f82 <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 8012f7c:	f06f 0301 	mvn.w	r3, #1
 8012f80:	e0eb      	b.n	801315a <snmp_append_outbound_varbind+0x216>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 8012f82:	2330      	movs	r3, #48	@ 0x30
 8012f84:	763b      	strb	r3, [r7, #24]
 8012f86:	2300      	movs	r3, #0
 8012f88:	767b      	strb	r3, [r7, #25]
 8012f8a:	7b3b      	ldrb	r3, [r7, #12]
 8012f8c:	76bb      	strb	r3, [r7, #26]
 8012f8e:	89fb      	ldrh	r3, [r7, #14]
 8012f90:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012f92:	f107 0318 	add.w	r3, r7, #24
 8012f96:	4619      	mov	r1, r3
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7fa ff83 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d002      	beq.n	8012faa <snmp_append_outbound_varbind+0x66>
 8012fa4:	f06f 030f 	mvn.w	r3, #15
 8012fa8:	e0d7      	b.n	801315a <snmp_append_outbound_varbind+0x216>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 8012faa:	2306      	movs	r3, #6
 8012fac:	763b      	strb	r3, [r7, #24]
 8012fae:	2300      	movs	r3, #0
 8012fb0:	767b      	strb	r3, [r7, #25]
 8012fb2:	7c3b      	ldrb	r3, [r7, #16]
 8012fb4:	76bb      	strb	r3, [r7, #26]
 8012fb6:	8a7b      	ldrh	r3, [r7, #18]
 8012fb8:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012fba:	f107 0318 	add.w	r3, r7, #24
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7fa ff6f 	bl	800dea4 <snmp_ans1_enc_tlv>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d002      	beq.n	8012fd2 <snmp_append_outbound_varbind+0x8e>
 8012fcc:	f06f 030f 	mvn.w	r3, #15
 8012fd0:	e0c3      	b.n	801315a <snmp_append_outbound_varbind+0x216>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	f103 010c 	add.w	r1, r3, #12
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	7a1b      	ldrb	r3, [r3, #8]
 8012fdc:	461a      	mov	r2, r3
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7fb f8da 	bl	800e198 <snmp_asn1_enc_oid>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <snmp_append_outbound_varbind+0xac>
 8012fea:	f06f 030f 	mvn.w	r3, #15
 8012fee:	e0b4      	b.n	801315a <snmp_append_outbound_varbind+0x216>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012ff6:	763b      	strb	r3, [r7, #24]
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	767b      	strb	r3, [r7, #25]
 8012ffc:	7d3b      	ldrb	r3, [r7, #20]
 8012ffe:	76bb      	strb	r3, [r7, #26]
 8013000:	8afb      	ldrh	r3, [r7, #22]
 8013002:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8013004:	f107 0318 	add.w	r3, r7, #24
 8013008:	4619      	mov	r1, r3
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f7fa ff4a 	bl	800dea4 <snmp_ans1_enc_tlv>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d002      	beq.n	801301c <snmp_append_outbound_varbind+0xd8>
 8013016:	f06f 030f 	mvn.w	r3, #15
 801301a:	e09e      	b.n	801315a <snmp_append_outbound_varbind+0x216>

  if (len.value_value_len > 0) {
 801301c:	8afb      	ldrh	r3, [r7, #22]
 801301e:	2b00      	cmp	r3, #0
 8013020:	f000 809a 	beq.w	8013158 <snmp_append_outbound_varbind+0x214>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801302a:	b21b      	sxth	r3, r3
 801302c:	2b00      	cmp	r3, #0
 801302e:	da0e      	bge.n	801304e <snmp_append_outbound_varbind+0x10a>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013036:	8afa      	ldrh	r2, [r7, #22]
 8013038:	4619      	mov	r1, r3
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f7fa ffbd 	bl	800dfba <snmp_asn1_enc_raw>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 8088 	beq.w	8013158 <snmp_append_outbound_varbind+0x214>
 8013048:	f06f 030f 	mvn.w	r3, #15
 801304c:	e085      	b.n	801315a <snmp_append_outbound_varbind+0x216>
    } else {
      switch (varbind->type) {
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8013054:	2b46      	cmp	r3, #70	@ 0x46
 8013056:	dc70      	bgt.n	801313a <snmp_append_outbound_varbind+0x1f6>
 8013058:	2b40      	cmp	r3, #64	@ 0x40
 801305a:	da08      	bge.n	801306e <snmp_append_outbound_varbind+0x12a>
 801305c:	2b06      	cmp	r3, #6
 801305e:	d04c      	beq.n	80130fa <snmp_append_outbound_varbind+0x1b6>
 8013060:	2b06      	cmp	r3, #6
 8013062:	dc6a      	bgt.n	801313a <snmp_append_outbound_varbind+0x1f6>
 8013064:	2b02      	cmp	r3, #2
 8013066:	d017      	beq.n	8013098 <snmp_append_outbound_varbind+0x154>
 8013068:	2b04      	cmp	r3, #4
 801306a:	d033      	beq.n	80130d4 <snmp_append_outbound_varbind+0x190>
 801306c:	e065      	b.n	801313a <snmp_append_outbound_varbind+0x1f6>
 801306e:	3b40      	subs	r3, #64	@ 0x40
 8013070:	2b06      	cmp	r3, #6
 8013072:	d862      	bhi.n	801313a <snmp_append_outbound_varbind+0x1f6>
 8013074:	a201      	add	r2, pc, #4	@ (adr r2, 801307c <snmp_append_outbound_varbind+0x138>)
 8013076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801307a:	bf00      	nop
 801307c:	080130d5 	.word	0x080130d5
 8013080:	080130b7 	.word	0x080130b7
 8013084:	080130b7 	.word	0x080130b7
 8013088:	080130b7 	.word	0x080130b7
 801308c:	080130d5 	.word	0x080130d5
 8013090:	0801313b 	.word	0x0801313b
 8013094:	0801311f 	.word	0x0801311f
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t*) varbind->value)));
 8013098:	8af9      	ldrh	r1, [r7, #22]
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	461a      	mov	r2, r3
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7fb f848 	bl	800e13a <snmp_asn1_enc_s32t>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d04c      	beq.n	801314a <snmp_append_outbound_varbind+0x206>
 80130b0:	f06f 030f 	mvn.w	r3, #15
 80130b4:	e051      	b.n	801315a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t*) varbind->value)));
 80130b6:	8af9      	ldrh	r1, [r7, #22]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	461a      	mov	r2, r3
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7fa ff91 	bl	800dfea <snmp_asn1_enc_u32t>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d03f      	beq.n	801314e <snmp_append_outbound_varbind+0x20a>
 80130ce:	f06f 030f 	mvn.w	r3, #15
 80130d2:	e042      	b.n	801315a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80130da:	8afa      	ldrh	r2, [r7, #22]
 80130dc:	4619      	mov	r1, r3
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7fa ff6b 	bl	800dfba <snmp_asn1_enc_raw>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d002      	beq.n	80130f0 <snmp_append_outbound_varbind+0x1ac>
 80130ea:	f06f 030f 	mvn.w	r3, #15
 80130ee:	e034      	b.n	801315a <snmp_append_outbound_varbind+0x216>
          len.value_value_len = varbind->value_len;
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80130f6:	82fb      	strh	r3, [r7, #22]
          break;
 80130f8:	e02e      	b.n	8013158 <snmp_append_outbound_varbind+0x214>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t*) varbind->value, varbind->value_len / sizeof (u32_t)));
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8013106:	089b      	lsrs	r3, r3, #2
 8013108:	b29b      	uxth	r3, r3
 801310a:	461a      	mov	r2, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7fb f843 	bl	800e198 <snmp_asn1_enc_oid>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d01c      	beq.n	8013152 <snmp_append_outbound_varbind+0x20e>
 8013118:	f06f 030f 	mvn.w	r3, #15
 801311c:	e01d      	b.n	801315a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, (u32_t*) varbind->value));
 801311e:	8af9      	ldrh	r1, [r7, #22]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013126:	461a      	mov	r2, r3
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7fa ffa3 	bl	800e074 <snmp_asn1_enc_u64t>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d010      	beq.n	8013156 <snmp_append_outbound_varbind+0x212>
 8013134:	f06f 030f 	mvn.w	r3, #15
 8013138:	e00f      	b.n	801315a <snmp_append_outbound_varbind+0x216>
          break;
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 801313a:	4b0a      	ldr	r3, [pc, #40]	@ (8013164 <snmp_append_outbound_varbind+0x220>)
 801313c:	f240 521e 	movw	r2, #1310	@ 0x51e
 8013140:	4909      	ldr	r1, [pc, #36]	@ (8013168 <snmp_append_outbound_varbind+0x224>)
 8013142:	480a      	ldr	r0, [pc, #40]	@ (801316c <snmp_append_outbound_varbind+0x228>)
 8013144:	f00f f882 	bl	802224c <iprintf>
          break;
 8013148:	e006      	b.n	8013158 <snmp_append_outbound_varbind+0x214>
          break;
 801314a:	bf00      	nop
 801314c:	e004      	b.n	8013158 <snmp_append_outbound_varbind+0x214>
          break;
 801314e:	bf00      	nop
 8013150:	e002      	b.n	8013158 <snmp_append_outbound_varbind+0x214>
          break;
 8013152:	bf00      	nop
 8013154:	e000      	b.n	8013158 <snmp_append_outbound_varbind+0x214>
          break;
 8013156:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3720      	adds	r7, #32
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	08025c30 	.word	0x08025c30
 8013168:	08025d04 	.word	0x08025d04
 801316c:	08025c8c 	.word	0x08025c8c

08013170 <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 8013170:	b590      	push	{r4, r7, lr}
 8013172:	b089      	sub	sp, #36	@ 0x24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 8013178:	2300      	movs	r3, #0
 801317a:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	7a9b      	ldrb	r3, [r3, #10]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d133      	bne.n	80131ec <snmp_complete_outbound_frame+0x7c>
    if (request->error_status != SNMP_ERR_NOERROR) {
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	69db      	ldr	r3, [r3, #28]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d044      	beq.n	8013216 <snmp_complete_outbound_frame+0xa6>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	69db      	ldr	r3, [r3, #28]
 8013190:	2b12      	cmp	r3, #18
 8013192:	dc18      	bgt.n	80131c6 <snmp_complete_outbound_frame+0x56>
 8013194:	2b06      	cmp	r3, #6
 8013196:	db25      	blt.n	80131e4 <snmp_complete_outbound_frame+0x74>
 8013198:	461a      	mov	r2, r3
 801319a:	2301      	movs	r3, #1
 801319c:	fa03 f202 	lsl.w	r2, r3, r2
 80131a0:	4b9c      	ldr	r3, [pc, #624]	@ (8013414 <snmp_complete_outbound_frame+0x2a4>)
 80131a2:	4013      	ands	r3, r2
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bf14      	ite	ne
 80131a8:	2301      	movne	r3, #1
 80131aa:	2300      	moveq	r3, #0
 80131ac:	b2db      	uxtb	r3, r3
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d114      	bne.n	80131dc <snmp_complete_outbound_frame+0x6c>
 80131b2:	f402 53bc 	and.w	r3, r2, #6016	@ 0x1780
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	bf14      	ite	ne
 80131ba:	2301      	movne	r3, #1
 80131bc:	2300      	moveq	r3, #0
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d107      	bne.n	80131d4 <snmp_complete_outbound_frame+0x64>
 80131c4:	e00e      	b.n	80131e4 <snmp_complete_outbound_frame+0x74>
 80131c6:	3bf0      	subs	r3, #240	@ 0xf0
 80131c8:	2b02      	cmp	r3, #2
 80131ca:	d80b      	bhi.n	80131e4 <snmp_complete_outbound_frame+0x74>
         * (during processing of frame we already stored them in error_status field, 
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2202      	movs	r2, #2
 80131d0:	61da      	str	r2, [r3, #28]
          break;
 80131d2:	e020      	b.n	8013216 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2203      	movs	r2, #3
 80131d8:	61da      	str	r2, [r3, #28]
          break;
 80131da:	e01c      	b.n	8013216 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2202      	movs	r2, #2
 80131e0:	61da      	str	r2, [r3, #28]
          break;
 80131e2:	e018      	b.n	8013216 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2205      	movs	r2, #5
 80131e8:	61da      	str	r2, [r3, #28]
          break;
 80131ea:	e014      	b.n	8013216 <snmp_complete_outbound_frame+0xa6>
       }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	7d9b      	ldrb	r3, [r3, #22]
 80131f0:	2b03      	cmp	r3, #3
 80131f2:	d109      	bne.n	8013208 <snmp_complete_outbound_frame+0x98>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	69db      	ldr	r3, [r3, #28]
 80131f8:	3bf0      	subs	r3, #240	@ 0xf0
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	d803      	bhi.n	8013206 <snmp_complete_outbound_frame+0x96>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2211      	movs	r2, #17
 8013202:	61da      	str	r2, [r3, #28]
          break;
 8013204:	e000      	b.n	8013208 <snmp_complete_outbound_frame+0x98>
        default:
          break;
 8013206:	bf00      	nop
      }
    }

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	2bef      	cmp	r3, #239	@ 0xef
 801320e:	dd02      	ble.n	8013216 <snmp_complete_outbound_frame+0xa6>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 8013210:	f06f 030f 	mvn.w	r3, #15
 8013214:	e187      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	69db      	ldr	r3, [r3, #28]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d103      	bne.n	8013226 <snmp_complete_outbound_frame+0xb6>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	7d9b      	ldrb	r3, [r3, #22]
 8013222:	2b03      	cmp	r3, #3
 8013224:	d131      	bne.n	801328a <snmp_complete_outbound_frame+0x11a>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013232:	f107 000c 	add.w	r0, r7, #12
 8013236:	f000 fbd5 	bl	80139e4 <snmp_pbuf_stream_init>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <snmp_complete_outbound_frame+0xd6>
 8013240:	f06f 030f 	mvn.w	r3, #15
 8013244:	e16f      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801325a:	891a      	ldrh	r2, [r3, #8]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	b29b      	uxth	r3, r3
 8013266:	4622      	mov	r2, r4
 8013268:	f000 fbbc 	bl	80139e4 <snmp_pbuf_stream_init>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d002      	beq.n	8013278 <snmp_complete_outbound_frame+0x108>
 8013272:	f06f 030f 	mvn.w	r3, #15
 8013276:	e156      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801327e:	f107 030c 	add.w	r3, r7, #12
 8013282:	2200      	movs	r2, #0
 8013284:	4618      	mov	r0, r3
 8013286:	f000 fc33 	bl	8013af0 <snmp_pbuf_stream_writeto>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8013290:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8013292:	2330      	movs	r3, #48	@ 0x30
 8013294:	753b      	strb	r3, [r7, #20]
 8013296:	2300      	movs	r3, #0
 8013298:	757b      	strb	r3, [r7, #21]
 801329a:	2303      	movs	r3, #3
 801329c:	75bb      	strb	r3, [r7, #22]
 801329e:	7ffb      	ldrb	r3, [r7, #31]
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	8bbb      	ldrh	r3, [r7, #28]
 80132a4:	4413      	add	r3, r2
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	3b04      	subs	r3, #4
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132bc:	891b      	ldrh	r3, [r3, #8]
 80132be:	2200      	movs	r2, #0
 80132c0:	f000 fb90 	bl	80139e4 <snmp_pbuf_stream_init>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d002      	beq.n	80132d0 <snmp_complete_outbound_frame+0x160>
 80132ca:	f06f 030f 	mvn.w	r3, #15
 80132ce:	e12a      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3348      	adds	r3, #72	@ 0x48
 80132d4:	f107 0214 	add.w	r2, r7, #20
 80132d8:	4611      	mov	r1, r2
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fa fde2 	bl	800dea4 <snmp_ans1_enc_tlv>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d002      	beq.n	80132ec <snmp_complete_outbound_frame+0x17c>
 80132e6:	f06f 030f 	mvn.w	r3, #15
 80132ea:	e11c      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3,
 80132ec:	23a2      	movs	r3, #162	@ 0xa2
 80132ee:	753b      	strb	r3, [r7, #20]
 80132f0:	2300      	movs	r3, #0
 80132f2:	757b      	strb	r3, [r7, #21]
 80132f4:	2303      	movs	r3, #3
 80132f6:	75bb      	strb	r3, [r7, #22]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80132fe:	8bba      	ldrh	r2, [r7, #28]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	b29b      	uxth	r3, r3
 8013304:	3b04      	subs	r3, #4
 8013306:	b29b      	uxth	r3, r3
 8013308:	833b      	strh	r3, [r7, #24]
      frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013316:	4619      	mov	r1, r3
 8013318:	4610      	mov	r0, r2
 801331a:	f000 fc80 	bl	8013c1e <snmp_pbuf_stream_seek_abs>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d002      	beq.n	801332a <snmp_complete_outbound_frame+0x1ba>
 8013324:	f06f 030f 	mvn.w	r3, #15
 8013328:	e0fd      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	3348      	adds	r3, #72	@ 0x48
 801332e:	f107 0214 	add.w	r2, r7, #20
 8013332:	4611      	mov	r1, r2
 8013334:	4618      	mov	r0, r3
 8013336:	f7fa fdb5 	bl	800dea4 <snmp_ans1_enc_tlv>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d002      	beq.n	8013346 <snmp_complete_outbound_frame+0x1d6>
 8013340:	f06f 030f 	mvn.w	r3, #15
 8013344:	e0ef      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>

  /* process and encode final error status */
  if (request->error_status != 0) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	69db      	ldr	r3, [r3, #28]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d066      	beq.n	801341c <snmp_complete_outbound_frame+0x2ac>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	69db      	ldr	r3, [r3, #28]
 8013352:	f107 020a 	add.w	r2, r7, #10
 8013356:	4611      	mov	r1, r2
 8013358:	4618      	mov	r0, r3
 801335a:	f7fa fff9 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 801335e:	897b      	ldrh	r3, [r7, #10]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d002      	beq.n	801336a <snmp_complete_outbound_frame+0x1fa>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 8013364:	f06f 030f 	mvn.w	r3, #15
 8013368:	e0dd      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8013376:	4619      	mov	r1, r3
 8013378:	4610      	mov	r0, r2
 801337a:	f000 fc50 	bl	8013c1e <snmp_pbuf_stream_seek_abs>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <snmp_complete_outbound_frame+0x21a>
 8013384:	f06f 030f 	mvn.w	r3, #15
 8013388:	e0cd      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8013390:	8979      	ldrh	r1, [r7, #10]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	69db      	ldr	r3, [r3, #28]
 8013396:	461a      	mov	r2, r3
 8013398:	f7fa fecf 	bl	800e13a <snmp_asn1_enc_s32t>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <snmp_complete_outbound_frame+0x238>
 80133a2:	f06f 030f 	mvn.w	r3, #15
 80133a6:	e0be      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	69db      	ldr	r3, [r3, #28]
 80133ac:	2b03      	cmp	r3, #3
 80133ae:	d012      	beq.n	80133d6 <snmp_complete_outbound_frame+0x266>
 80133b0:	2b03      	cmp	r3, #3
 80133b2:	dc16      	bgt.n	80133e2 <snmp_complete_outbound_frame+0x272>
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	d002      	beq.n	80133be <snmp_complete_outbound_frame+0x24e>
 80133b8:	2b02      	cmp	r3, #2
 80133ba:	d006      	beq.n	80133ca <snmp_complete_outbound_frame+0x25a>
 80133bc:	e011      	b.n	80133e2 <snmp_complete_outbound_frame+0x272>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 80133be:	4b16      	ldr	r3, [pc, #88]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133c2:	3301      	adds	r3, #1
 80133c4:	4a14      	ldr	r2, [pc, #80]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133c6:	6493      	str	r3, [r2, #72]	@ 0x48
        break;
 80133c8:	e011      	b.n	80133ee <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 80133ca:	4b13      	ldr	r3, [pc, #76]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133ce:	3301      	adds	r3, #1
 80133d0:	4a11      	ldr	r2, [pc, #68]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
 80133d4:	e00b      	b.n	80133ee <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 80133d6:	4b10      	ldr	r3, [pc, #64]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133da:	3301      	adds	r3, #1
 80133dc:	4a0e      	ldr	r2, [pc, #56]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133de:	6513      	str	r3, [r2, #80]	@ 0x50
        break;
 80133e0:	e005      	b.n	80133ee <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 80133e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80133e6:	3301      	adds	r3, #1
 80133e8:	4a0b      	ldr	r2, [pc, #44]	@ (8013418 <snmp_complete_outbound_frame+0x2a8>)
 80133ea:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80133ec:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	69db      	ldr	r3, [r3, #28]
 80133f2:	2b01      	cmp	r3, #1
 80133f4:	d103      	bne.n	80133fe <snmp_complete_outbound_frame+0x28e>
      request->error_index = 0; /* defined by RFC 1157 */
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2200      	movs	r2, #0
 80133fa:	621a      	str	r2, [r3, #32]
 80133fc:	e021      	b.n	8013442 <snmp_complete_outbound_frame+0x2d2>
    } else if (request->error_index == 0) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6a1b      	ldr	r3, [r3, #32]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d11d      	bne.n	8013442 <snmp_complete_outbound_frame+0x2d2>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801340a:	461a      	mov	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	621a      	str	r2, [r3, #32]
 8013410:	e017      	b.n	8013442 <snmp_complete_outbound_frame+0x2d2>
 8013412:	bf00      	nop
 8013414:	00070840 	.word	0x00070840
 8013418:	2000854c 	.word	0x2000854c
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	7d9b      	ldrb	r3, [r3, #22]
 8013420:	2b03      	cmp	r3, #3
 8013422:	d107      	bne.n	8013434 <snmp_complete_outbound_frame+0x2c4>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 8013424:	4b42      	ldr	r3, [pc, #264]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013428:	687a      	ldr	r2, [r7, #4]
 801342a:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 801342c:	4413      	add	r3, r2
 801342e:	4a40      	ldr	r2, [pc, #256]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013430:	6313      	str	r3, [r2, #48]	@ 0x30
 8013432:	e006      	b.n	8013442 <snmp_complete_outbound_frame+0x2d2>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 8013434:	4b3e      	ldr	r3, [pc, #248]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 801343c:	4413      	add	r3, r2
 801343e:	4a3c      	ldr	r2, [pc, #240]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013440:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a1b      	ldr	r3, [r3, #32]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d02c      	beq.n	80134a4 <snmp_complete_outbound_frame+0x334>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a1b      	ldr	r3, [r3, #32]
 801344e:	f107 0208 	add.w	r2, r7, #8
 8013452:	4611      	mov	r1, r2
 8013454:	4618      	mov	r0, r3
 8013456:	f7fa ff7b 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 801345a:	893b      	ldrh	r3, [r7, #8]
 801345c:	2b01      	cmp	r3, #1
 801345e:	d002      	beq.n	8013466 <snmp_complete_outbound_frame+0x2f6>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 8013460:	f06f 0305 	mvn.w	r3, #5
 8013464:	e05f      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013472:	4619      	mov	r1, r3
 8013474:	4610      	mov	r0, r2
 8013476:	f000 fbd2 	bl	8013c1e <snmp_pbuf_stream_seek_abs>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d002      	beq.n	8013486 <snmp_complete_outbound_frame+0x316>
 8013480:	f06f 030f 	mvn.w	r3, #15
 8013484:	e04f      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801348c:	8939      	ldrh	r1, [r7, #8]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a1b      	ldr	r3, [r3, #32]
 8013492:	461a      	mov	r2, r3
 8013494:	f7fa fe51 	bl	800e13a <snmp_asn1_enc_s32t>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d002      	beq.n	80134a4 <snmp_complete_outbound_frame+0x334>
 801349e:	f06f 030f 	mvn.w	r3, #15
 80134a2:	e040      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 80134a4:	2330      	movs	r3, #48	@ 0x30
 80134a6:	753b      	strb	r3, [r7, #20]
 80134a8:	2300      	movs	r3, #0
 80134aa:	757b      	strb	r3, [r7, #21]
 80134ac:	2303      	movs	r3, #3
 80134ae:	75bb      	strb	r3, [r7, #22]
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80134b6:	8bba      	ldrh	r2, [r7, #28]
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80134ca:	3b04      	subs	r3, #4
 80134cc:	4619      	mov	r1, r3
 80134ce:	4610      	mov	r0, r2
 80134d0:	f000 fba5 	bl	8013c1e <snmp_pbuf_stream_seek_abs>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d002      	beq.n	80134e0 <snmp_complete_outbound_frame+0x370>
 80134da:	f06f 030f 	mvn.w	r3, #15
 80134de:	e022      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	3348      	adds	r3, #72	@ 0x48
 80134e4:	f107 0214 	add.w	r2, r7, #20
 80134e8:	4611      	mov	r1, r2
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fa fcda 	bl	800dea4 <snmp_ans1_enc_tlv>
 80134f0:	4603      	mov	r3, r0
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <snmp_complete_outbound_frame+0x38c>
 80134f6:	f06f 030f 	mvn.w	r3, #15
 80134fa:	e014      	b.n	8013526 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                  request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8013500:	7ffb      	ldrb	r3, [r7, #31]
 8013502:	b29a      	uxth	r2, r3
 8013504:	8bbb      	ldrh	r3, [r7, #28]
 8013506:	4413      	add	r3, r2
 8013508:	b29b      	uxth	r3, r3
 801350a:	4619      	mov	r1, r3
 801350c:	f002 fd0c 	bl	8015f28 <pbuf_realloc>

  snmp_stats.outgetresponses++;
 8013510:	4b07      	ldr	r3, [pc, #28]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013514:	3301      	adds	r3, #1
 8013516:	4a06      	ldr	r2, [pc, #24]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013518:	6653      	str	r3, [r2, #100]	@ 0x64
  snmp_stats.outpkts++;
 801351a:	4b05      	ldr	r3, [pc, #20]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	3301      	adds	r3, #1
 8013520:	4a03      	ldr	r2, [pc, #12]	@ (8013530 <snmp_complete_outbound_frame+0x3c0>)
 8013522:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	3724      	adds	r7, #36	@ 0x24
 801352a:	46bd      	mov	sp, r7
 801352c:	bd90      	pop	{r4, r7, pc}
 801352e:	bf00      	nop
 8013530:	2000854c 	.word	0x2000854c

08013534 <snmp_execute_write_callbacks>:

static void 
snmp_execute_write_callbacks(struct snmp_request *request)
{
 8013534:	b590      	push	{r4, r7, lr}
 8013536:	b0bd      	sub	sp, #244	@ 0xf4
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013548:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 801354c:	f000 f824 	bl	8013598 <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 8013550:	2300      	movs	r3, #0
 8013552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 8013556:	e00a      	b.n	801356e <snmp_execute_write_callbacks+0x3a>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 8013558:	4b0d      	ldr	r3, [pc, #52]	@ (8013590 <snmp_execute_write_callbacks+0x5c>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	7c39      	ldrb	r1, [r7, #16]
 801355e:	4a0d      	ldr	r2, [pc, #52]	@ (8013594 <snmp_execute_write_callbacks+0x60>)
 8013560:	6814      	ldr	r4, [r2, #0]
 8013562:	f107 0208 	add.w	r2, r7, #8
 8013566:	f102 000c 	add.w	r0, r2, #12
 801356a:	4622      	mov	r2, r4
 801356c:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 801356e:	f107 0208 	add.w	r2, r7, #8
 8013572:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8013576:	4611      	mov	r1, r2
 8013578:	4618      	mov	r0, r3
 801357a:	f000 f825 	bl	80135c8 <snmp_vb_enumerator_get_next>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d0e9      	beq.n	8013558 <snmp_execute_write_callbacks+0x24>
  }
}
 8013584:	bf00      	nop
 8013586:	bf00      	nop
 8013588:	37f4      	adds	r7, #244	@ 0xf4
 801358a:	46bd      	mov	sp, r7
 801358c:	bd90      	pop	{r4, r7, pc}
 801358e:	bf00      	nop
 8013590:	200085ec 	.word	0x200085ec
 8013594:	200085f0 	.word	0x200085f0

08013598 <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator* enumerator, struct pbuf* p, u16_t offset, u16_t length)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	4611      	mov	r1, r2
 80135a4:	461a      	mov	r2, r3
 80135a6:	460b      	mov	r3, r1
 80135a8:	80fb      	strh	r3, [r7, #6]
 80135aa:	4613      	mov	r3, r2
 80135ac:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	88bb      	ldrh	r3, [r7, #4]
 80135b2:	88fa      	ldrh	r2, [r7, #6]
 80135b4:	68b9      	ldr	r1, [r7, #8]
 80135b6:	f000 fa15 	bl	80139e4 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2200      	movs	r2, #0
 80135be:	811a      	strh	r2, [r3, #8]
}
 80135c0:	bf00      	nop
 80135c2:	3710      	adds	r7, #16
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator* enumerator, struct snmp_varbind* varbind)
{
 80135c8:	b590      	push	{r4, r7, lr}
 80135ca:	b089      	sub	sp, #36	@ 0x24
 80135cc:	af02      	add	r7, sp, #8
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;
  
  if (enumerator->pbuf_stream.length == 0)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	88db      	ldrh	r3, [r3, #6]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d101      	bne.n	80135de <snmp_vb_enumerator_get_next+0x16>
  {
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 80135da:	2301      	movs	r3, #1
 80135dc:	e1fc      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  }
  enumerator->varbind_count++;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	891b      	ldrh	r3, [r3, #8]
 80135e2:	3301      	adds	r3, #1
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f107 020c 	add.w	r2, r7, #12
 80135f0:	4611      	mov	r1, r2
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fa ff18 	bl	800e428 <snmp_asn1_dec_tlv>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d006      	beq.n	801360c <snmp_vb_enumerator_get_next+0x44>
 80135fe:	4bb9      	ldr	r3, [pc, #740]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013600:	695b      	ldr	r3, [r3, #20]
 8013602:	3301      	adds	r3, #1
 8013604:	4ab7      	ldr	r2, [pc, #732]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013606:	6153      	str	r3, [r2, #20]
 8013608:	2302      	movs	r3, #2
 801360a:	e1e5      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 801360c:	7b3b      	ldrb	r3, [r7, #12]
 801360e:	2b30      	cmp	r3, #48	@ 0x30
 8013610:	d104      	bne.n	801361c <snmp_vb_enumerator_get_next+0x54>
 8013612:	8a3a      	ldrh	r2, [r7, #16]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	88db      	ldrh	r3, [r3, #6]
 8013618:	429a      	cmp	r2, r3
 801361a:	d906      	bls.n	801362a <snmp_vb_enumerator_get_next+0x62>
 801361c:	4bb1      	ldr	r3, [pc, #708]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 801361e:	695b      	ldr	r3, [r3, #20]
 8013620:	3301      	adds	r3, #1
 8013622:	4ab0      	ldr	r2, [pc, #704]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013624:	6153      	str	r3, [r2, #20]
 8013626:	2302      	movs	r3, #2
 8013628:	e1d6      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  varbind_len = tlv.value_len;
 801362a:	8a3b      	ldrh	r3, [r7, #16]
 801362c:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f107 020c 	add.w	r2, r7, #12
 8013634:	4611      	mov	r1, r2
 8013636:	4618      	mov	r0, r3
 8013638:	f7fa fef6 	bl	800e428 <snmp_asn1_dec_tlv>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d006      	beq.n	8013650 <snmp_vb_enumerator_get_next+0x88>
 8013642:	4ba8      	ldr	r3, [pc, #672]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013644:	695b      	ldr	r3, [r3, #20]
 8013646:	3301      	adds	r3, #1
 8013648:	4aa6      	ldr	r2, [pc, #664]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 801364a:	6153      	str	r3, [r2, #20]
 801364c:	2302      	movs	r3, #2
 801364e:	e1c3      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 8013650:	7b3b      	ldrb	r3, [r7, #12]
 8013652:	2b06      	cmp	r3, #6
 8013654:	d10d      	bne.n	8013672 <snmp_vb_enumerator_get_next+0xaa>
 8013656:	7b7b      	ldrb	r3, [r7, #13]
 8013658:	461a      	mov	r2, r3
 801365a:	7bbb      	ldrb	r3, [r7, #14]
 801365c:	4413      	add	r3, r2
 801365e:	8a3a      	ldrh	r2, [r7, #16]
 8013660:	441a      	add	r2, r3
 8013662:	8afb      	ldrh	r3, [r7, #22]
 8013664:	429a      	cmp	r2, r3
 8013666:	da04      	bge.n	8013672 <snmp_vb_enumerator_get_next+0xaa>
 8013668:	8a3a      	ldrh	r2, [r7, #16]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	88db      	ldrh	r3, [r3, #6]
 801366e:	429a      	cmp	r2, r3
 8013670:	d306      	bcc.n	8013680 <snmp_vb_enumerator_get_next+0xb8>
 8013672:	4b9c      	ldr	r3, [pc, #624]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013674:	695b      	ldr	r3, [r3, #20]
 8013676:	3301      	adds	r3, #1
 8013678:	4a9a      	ldr	r2, [pc, #616]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 801367a:	6153      	str	r3, [r2, #20]
 801367c:	2302      	movs	r3, #2
 801367e:	e1ab      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
   
  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	8a39      	ldrh	r1, [r7, #16]
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	f103 020c 	add.w	r2, r3, #12
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	3308      	adds	r3, #8
 801368e:	2432      	movs	r4, #50	@ 0x32
 8013690:	9400      	str	r4, [sp, #0]
 8013692:	f7fb f872 	bl	800e77a <snmp_asn1_dec_oid>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d006      	beq.n	80136aa <snmp_vb_enumerator_get_next+0xe2>
 801369c:	4b91      	ldr	r3, [pc, #580]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 801369e:	695b      	ldr	r3, [r3, #20]
 80136a0:	3301      	adds	r3, #1
 80136a2:	4a90      	ldr	r2, [pc, #576]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 80136a4:	6153      	str	r3, [r2, #20]
 80136a6:	2302      	movs	r3, #2
 80136a8:	e196      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80136aa:	7b7b      	ldrb	r3, [r7, #13]
 80136ac:	461a      	mov	r2, r3
 80136ae:	7bbb      	ldrb	r3, [r7, #14]
 80136b0:	4413      	add	r3, r2
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	8a3b      	ldrh	r3, [r7, #16]
 80136b6:	4413      	add	r3, r2
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	8afa      	ldrh	r2, [r7, #22]
 80136bc:	1ad3      	subs	r3, r2, r3
 80136be:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f107 020c 	add.w	r2, r7, #12
 80136c6:	4611      	mov	r1, r2
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fa fead 	bl	800e428 <snmp_asn1_dec_tlv>
 80136ce:	4603      	mov	r3, r0
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d006      	beq.n	80136e2 <snmp_vb_enumerator_get_next+0x11a>
 80136d4:	4b83      	ldr	r3, [pc, #524]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 80136d6:	695b      	ldr	r3, [r3, #20]
 80136d8:	3301      	adds	r3, #1
 80136da:	4a82      	ldr	r2, [pc, #520]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 80136dc:	6153      	str	r3, [r2, #20]
 80136de:	2302      	movs	r3, #2
 80136e0:	e17a      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 80136e2:	7b7b      	ldrb	r3, [r7, #13]
 80136e4:	461a      	mov	r2, r3
 80136e6:	7bbb      	ldrb	r3, [r7, #14]
 80136e8:	4413      	add	r3, r2
 80136ea:	8a3a      	ldrh	r2, [r7, #16]
 80136ec:	441a      	add	r2, r3
 80136ee:	8afb      	ldrh	r3, [r7, #22]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d104      	bne.n	80136fe <snmp_vb_enumerator_get_next+0x136>
 80136f4:	8a3a      	ldrh	r2, [r7, #16]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	88db      	ldrh	r3, [r3, #6]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d906      	bls.n	801370c <snmp_vb_enumerator_get_next+0x144>
 80136fe:	4b79      	ldr	r3, [pc, #484]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013700:	695b      	ldr	r3, [r3, #20]
 8013702:	3301      	adds	r3, #1
 8013704:	4a77      	ldr	r2, [pc, #476]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013706:	6153      	str	r3, [r2, #20]
 8013708:	2302      	movs	r3, #2
 801370a:	e165      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
  varbind->type = tlv.type;
 801370c:	7b3a      	ldrb	r2, [r7, #12]
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801371a:	2b00      	cmp	r3, #0
 801371c:	f000 814d 	beq.w	80139ba <snmp_vb_enumerator_get_next+0x3f2>
    switch (varbind->type) {
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8013726:	3b02      	subs	r3, #2
 8013728:	2b44      	cmp	r3, #68	@ 0x44
 801372a:	f200 813f 	bhi.w	80139ac <snmp_vb_enumerator_get_next+0x3e4>
 801372e:	a201      	add	r2, pc, #4	@ (adr r2, 8013734 <snmp_vb_enumerator_get_next+0x16c>)
 8013730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013734:	08013849 	.word	0x08013849
 8013738:	080139ad 	.word	0x080139ad
 801373c:	080138a5 	.word	0x080138a5
 8013740:	080138e9 	.word	0x080138e9
 8013744:	080138f3 	.word	0x080138f3
 8013748:	080139ad 	.word	0x080139ad
 801374c:	080139ad 	.word	0x080139ad
 8013750:	080139ad 	.word	0x080139ad
 8013754:	080139ad 	.word	0x080139ad
 8013758:	080139ad 	.word	0x080139ad
 801375c:	080139ad 	.word	0x080139ad
 8013760:	080139ad 	.word	0x080139ad
 8013764:	080139ad 	.word	0x080139ad
 8013768:	080139ad 	.word	0x080139ad
 801376c:	080139ad 	.word	0x080139ad
 8013770:	080139ad 	.word	0x080139ad
 8013774:	080139ad 	.word	0x080139ad
 8013778:	080139ad 	.word	0x080139ad
 801377c:	080139ad 	.word	0x080139ad
 8013780:	080139ad 	.word	0x080139ad
 8013784:	080139ad 	.word	0x080139ad
 8013788:	080139ad 	.word	0x080139ad
 801378c:	080139ad 	.word	0x080139ad
 8013790:	080139ad 	.word	0x080139ad
 8013794:	080139ad 	.word	0x080139ad
 8013798:	080139ad 	.word	0x080139ad
 801379c:	080139ad 	.word	0x080139ad
 80137a0:	080139ad 	.word	0x080139ad
 80137a4:	080139ad 	.word	0x080139ad
 80137a8:	080139ad 	.word	0x080139ad
 80137ac:	080139ad 	.word	0x080139ad
 80137b0:	080139ad 	.word	0x080139ad
 80137b4:	080139ad 	.word	0x080139ad
 80137b8:	080139ad 	.word	0x080139ad
 80137bc:	080139ad 	.word	0x080139ad
 80137c0:	080139ad 	.word	0x080139ad
 80137c4:	080139ad 	.word	0x080139ad
 80137c8:	080139ad 	.word	0x080139ad
 80137cc:	080139ad 	.word	0x080139ad
 80137d0:	080139ad 	.word	0x080139ad
 80137d4:	080139ad 	.word	0x080139ad
 80137d8:	080139ad 	.word	0x080139ad
 80137dc:	080139ad 	.word	0x080139ad
 80137e0:	080139ad 	.word	0x080139ad
 80137e4:	080139ad 	.word	0x080139ad
 80137e8:	080139ad 	.word	0x080139ad
 80137ec:	080139ad 	.word	0x080139ad
 80137f0:	080139ad 	.word	0x080139ad
 80137f4:	080139ad 	.word	0x080139ad
 80137f8:	080139ad 	.word	0x080139ad
 80137fc:	080139ad 	.word	0x080139ad
 8013800:	080139ad 	.word	0x080139ad
 8013804:	080139ad 	.word	0x080139ad
 8013808:	080139ad 	.word	0x080139ad
 801380c:	080139ad 	.word	0x080139ad
 8013810:	080139ad 	.word	0x080139ad
 8013814:	080139ad 	.word	0x080139ad
 8013818:	080139ad 	.word	0x080139ad
 801381c:	080139ad 	.word	0x080139ad
 8013820:	080139ad 	.word	0x080139ad
 8013824:	080139ad 	.word	0x080139ad
 8013828:	080139ad 	.word	0x080139ad
 801382c:	08013941 	.word	0x08013941
 8013830:	08013877 	.word	0x08013877
 8013834:	08013877 	.word	0x08013877
 8013838:	08013877 	.word	0x08013877
 801383c:	080138a5 	.word	0x080138a5
 8013840:	080139ad 	.word	0x080139ad
 8013844:	0801397f 	.word	0x0801397f
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t*)varbind->value));
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	8a39      	ldrh	r1, [r7, #16]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013852:	461a      	mov	r2, r3
 8013854:	f7fa ff20 	bl	800e698 <snmp_asn1_dec_s32t>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d006      	beq.n	801386c <snmp_vb_enumerator_get_next+0x2a4>
 801385e:	4b21      	ldr	r3, [pc, #132]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013860:	695b      	ldr	r3, [r3, #20]
 8013862:	3301      	adds	r3, #1
 8013864:	4a1f      	ldr	r2, [pc, #124]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013866:	6153      	str	r3, [r2, #20]
 8013868:	2302      	movs	r3, #2
 801386a:	e0b5      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(s32_t*);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	2204      	movs	r2, #4
 8013870:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8013874:	e0af      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	8a39      	ldrh	r1, [r7, #16]
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013880:	461a      	mov	r2, r3
 8013882:	f7fa fe50 	bl	800e526 <snmp_asn1_dec_u32t>
 8013886:	4603      	mov	r3, r0
 8013888:	2b00      	cmp	r3, #0
 801388a:	d006      	beq.n	801389a <snmp_vb_enumerator_get_next+0x2d2>
 801388c:	4b15      	ldr	r3, [pc, #84]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 801388e:	695b      	ldr	r3, [r3, #20]
 8013890:	3301      	adds	r3, #1
 8013892:	4a14      	ldr	r2, [pc, #80]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 8013894:	6153      	str	r3, [r2, #20]
 8013896:	2302      	movs	r3, #2
 8013898:	e09e      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(u32_t*);
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	2204      	movs	r2, #4
 801389e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80138a2:	e098      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	8a39      	ldrh	r1, [r7, #16]
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	33d6      	adds	r3, #214	@ 0xd6
 80138b2:	24c8      	movs	r4, #200	@ 0xc8
 80138b4:	9400      	str	r4, [sp, #0]
 80138b6:	f7fb f82e 	bl	800e916 <snmp_asn1_dec_raw>
 80138ba:	4603      	mov	r3, r0
 80138bc:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 80138be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80138c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138c6:	d101      	bne.n	80138cc <snmp_vb_enumerator_get_next+0x304>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 80138c8:	2303      	movs	r3, #3
 80138ca:	e085      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 80138cc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d07d      	beq.n	80139d0 <snmp_vb_enumerator_get_next+0x408>
 80138d4:	4b03      	ldr	r3, [pc, #12]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 80138d6:	695b      	ldr	r3, [r3, #20]
 80138d8:	3301      	adds	r3, #1
 80138da:	4a02      	ldr	r2, [pc, #8]	@ (80138e4 <snmp_vb_enumerator_get_next+0x31c>)
 80138dc:	6153      	str	r3, [r2, #20]
 80138de:	2302      	movs	r3, #2
 80138e0:	e07a      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
 80138e2:	bf00      	nop
 80138e4:	2000854c 	.word	0x2000854c
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2200      	movs	r2, #0
 80138ec:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80138f0:	e071      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	8a39      	ldrh	r1, [r7, #16]
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80138fc:	f107 030c 	add.w	r3, r7, #12
 8013900:	3302      	adds	r3, #2
 8013902:	2432      	movs	r4, #50	@ 0x32
 8013904:	9400      	str	r4, [sp, #0]
 8013906:	f7fa ff38 	bl	800e77a <snmp_asn1_dec_oid>
 801390a:	4603      	mov	r3, r0
 801390c:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 801390e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013916:	d101      	bne.n	801391c <snmp_vb_enumerator_get_next+0x354>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8013918:	2303      	movs	r3, #3
 801391a:	e05d      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 801391c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d006      	beq.n	8013932 <snmp_vb_enumerator_get_next+0x36a>
 8013924:	4b2e      	ldr	r3, [pc, #184]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 8013926:	695b      	ldr	r3, [r3, #20]
 8013928:	3301      	adds	r3, #1
 801392a:	4a2d      	ldr	r2, [pc, #180]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 801392c:	6153      	str	r3, [r2, #20]
 801392e:	2302      	movs	r3, #2
 8013930:	e052      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 8013932:	7bbb      	ldrb	r3, [r7, #14]
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	b29a      	uxth	r2, r3
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 801393e:	e04a      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 8013940:	8a3b      	ldrh	r3, [r7, #16]
 8013942:	2b04      	cmp	r3, #4
 8013944:	d114      	bne.n	8013970 <snmp_vb_enumerator_get_next+0x3a8>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	8a39      	ldrh	r1, [r7, #16]
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	33d6      	adds	r3, #214	@ 0xd6
 8013954:	24c8      	movs	r4, #200	@ 0xc8
 8013956:	9400      	str	r4, [sp, #0]
 8013958:	f7fa ffdd 	bl	800e916 <snmp_asn1_dec_raw>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d038      	beq.n	80139d4 <snmp_vb_enumerator_get_next+0x40c>
 8013962:	4b1f      	ldr	r3, [pc, #124]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 8013964:	695b      	ldr	r3, [r3, #20]
 8013966:	3301      	adds	r3, #1
 8013968:	4a1d      	ldr	r2, [pc, #116]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 801396a:	6153      	str	r3, [r2, #20]
 801396c:	2302      	movs	r3, #2
 801396e:	e033      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        } else {
          VB_PARSE_ASSERT(0);
 8013970:	4b1b      	ldr	r3, [pc, #108]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 8013972:	695b      	ldr	r3, [r3, #20]
 8013974:	3301      	adds	r3, #1
 8013976:	4a1a      	ldr	r2, [pc, #104]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 8013978:	6153      	str	r3, [r2, #20]
 801397a:	2302      	movs	r3, #2
 801397c:	e02c      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        }
        break;
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	8a39      	ldrh	r1, [r7, #16]
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013988:	461a      	mov	r2, r3
 801398a:	f7fa fe1f 	bl	800e5cc <snmp_asn1_dec_u64t>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d006      	beq.n	80139a2 <snmp_vb_enumerator_get_next+0x3da>
 8013994:	4b12      	ldr	r3, [pc, #72]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 8013996:	695b      	ldr	r3, [r3, #20]
 8013998:	3301      	adds	r3, #1
 801399a:	4a11      	ldr	r2, [pc, #68]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 801399c:	6153      	str	r3, [r2, #20]
 801399e:	2302      	movs	r3, #2
 80139a0:	e01a      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = 2 * sizeof(u32_t*);
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	2208      	movs	r2, #8
 80139a6:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80139aa:	e014      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
      default:
        VB_PARSE_ASSERT(0);
 80139ac:	4b0c      	ldr	r3, [pc, #48]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 80139ae:	695b      	ldr	r3, [r3, #20]
 80139b0:	3301      	adds	r3, #1
 80139b2:	4a0b      	ldr	r2, [pc, #44]	@ (80139e0 <snmp_vb_enumerator_get_next+0x418>)
 80139b4:	6153      	str	r3, [r2, #20]
 80139b6:	2302      	movs	r3, #2
 80139b8:	e00e      	b.n	80139d8 <snmp_vb_enumerator_get_next+0x410>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	8a3a      	ldrh	r2, [r7, #16]
 80139be:	4611      	mov	r1, r2
 80139c0:	4618      	mov	r0, r3
 80139c2:	f000 f905 	bl	8013bd0 <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 80139c6:	8a3a      	ldrh	r2, [r7, #16]
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 80139ce:	e002      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
        break;
 80139d0:	bf00      	nop
 80139d2:	e000      	b.n	80139d6 <snmp_vb_enumerator_get_next+0x40e>
        break;
 80139d4:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 80139d6:	2300      	movs	r3, #0
}
 80139d8:	4618      	mov	r0, r3
 80139da:	371c      	adds	r7, #28
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd90      	pop	{r4, r7, pc}
 80139e0:	2000854c 	.word	0x2000854c

080139e4 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream* pbuf_stream, struct pbuf* p, u16_t offset, u16_t length)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	4611      	mov	r1, r2
 80139f0:	461a      	mov	r2, r3
 80139f2:	460b      	mov	r3, r1
 80139f4:	80fb      	strh	r3, [r7, #6]
 80139f6:	4613      	mov	r3, r2
 80139f8:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	88fa      	ldrh	r2, [r7, #6]
 80139fe:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	88ba      	ldrh	r2, [r7, #4]
 8013a04:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	68ba      	ldr	r2, [r7, #8]
 8013a0a:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8013a0c:	2300      	movs	r3, #0
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3714      	adds	r7, #20
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bc80      	pop	{r7}
 8013a16:	4770      	bx	lr

08013a18 <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream* pbuf_stream, u8_t* data)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	88db      	ldrh	r3, [r3, #6]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d102      	bne.n	8013a30 <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 8013a2a:	f06f 0301 	mvn.w	r3, #1
 8013a2e:	e01a      	b.n	8013a66 <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6818      	ldr	r0, [r3, #0]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	889b      	ldrh	r3, [r3, #4]
 8013a38:	2201      	movs	r2, #1
 8013a3a:	6839      	ldr	r1, [r7, #0]
 8013a3c:	f002 fde6 	bl	801660c <pbuf_copy_partial>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d102      	bne.n	8013a4c <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 8013a46:	f06f 0301 	mvn.w	r3, #1
 8013a4a:	e00c      	b.n	8013a66 <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	889b      	ldrh	r3, [r3, #4]
 8013a50:	3301      	adds	r3, #1
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	88db      	ldrh	r3, [r3, #6]
 8013a5c:	3b01      	subs	r3, #1
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013a64:	2300      	movs	r3, #0
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream* pbuf_stream, u8_t data)
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b082      	sub	sp, #8
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
 8013a76:	460b      	mov	r3, r1
 8013a78:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 8013a7a:	1cfb      	adds	r3, r7, #3
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	4619      	mov	r1, r3
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f000 f805 	bl	8013a90 <snmp_pbuf_stream_writebuf>
 8013a86:	4603      	mov	r3, r0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream* pbuf_stream, const void* buf, u16_t buf_len)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	88db      	ldrh	r3, [r3, #6]
 8013aa2:	88fa      	ldrh	r2, [r7, #6]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d902      	bls.n	8013aae <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 8013aa8:	f06f 0301 	mvn.w	r3, #1
 8013aac:	e01c      	b.n	8013ae8 <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	6818      	ldr	r0, [r3, #0]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	889b      	ldrh	r3, [r3, #4]
 8013ab6:	88fa      	ldrh	r2, [r7, #6]
 8013ab8:	68b9      	ldr	r1, [r7, #8]
 8013aba:	f002 feef 	bl	801689c <pbuf_take_at>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d002      	beq.n	8013aca <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 8013ac4:	f06f 0301 	mvn.w	r3, #1
 8013ac8:	e00e      	b.n	8013ae8 <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	889a      	ldrh	r2, [r3, #4]
 8013ace:	88fb      	ldrh	r3, [r7, #6]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	b29a      	uxth	r2, r3
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	88da      	ldrh	r2, [r3, #6]
 8013adc:	88fb      	ldrh	r3, [r7, #6]
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013ae6:	2300      	movs	r3, #0
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream* pbuf_stream, struct snmp_pbuf_stream* target_pbuf_stream, u16_t len)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b088      	sub	sp, #32
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	4613      	mov	r3, r2
 8013afc:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <snmp_pbuf_stream_writeto+0x1a>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d102      	bne.n	8013b10 <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 8013b0a:	f06f 030f 	mvn.w	r3, #15
 8013b0e:	e05b      	b.n	8013bc8 <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	88db      	ldrh	r3, [r3, #6]
 8013b14:	88fa      	ldrh	r2, [r7, #6]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d804      	bhi.n	8013b24 <snmp_pbuf_stream_writeto+0x34>
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	88db      	ldrh	r3, [r3, #6]
 8013b1e:	88fa      	ldrh	r2, [r7, #6]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d902      	bls.n	8013b2a <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 8013b24:	f06f 030f 	mvn.w	r3, #15
 8013b28:	e04e      	b.n	8013bc8 <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 8013b2a:	88fb      	ldrh	r3, [r7, #6]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d147      	bne.n	8013bc0 <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	88da      	ldrh	r2, [r3, #6]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	88db      	ldrh	r3, [r3, #6]
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	bf28      	it	cs
 8013b3c:	4613      	movcs	r3, r2
 8013b3e:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 8013b40:	e03e      	b.n	8013bc0 <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf* pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6818      	ldr	r0, [r3, #0]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	889b      	ldrh	r3, [r3, #4]
 8013b4a:	f107 0216 	add.w	r2, r7, #22
 8013b4e:	4619      	mov	r1, r3
 8013b50:	f002 fdfe 	bl	8016750 <pbuf_skip>
 8013b54:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d003      	beq.n	8013b64 <snmp_pbuf_stream_writeto+0x74>
 8013b5c:	69fb      	ldr	r3, [r7, #28]
 8013b5e:	895b      	ldrh	r3, [r3, #10]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d102      	bne.n	8013b6a <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 8013b64:	f06f 0301 	mvn.w	r3, #1
 8013b68:	e02e      	b.n	8013bc8 <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	895b      	ldrh	r3, [r3, #10]
 8013b6e:	88fa      	ldrh	r2, [r7, #6]
 8013b70:	4293      	cmp	r3, r2
 8013b72:	bf28      	it	cs
 8013b74:	4613      	movcs	r3, r2
 8013b76:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t*)pbuf->payload)[target_offset], chunk_len);
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	8afa      	ldrh	r2, [r7, #22]
 8013b7e:	4413      	add	r3, r2
 8013b80:	8b7a      	ldrh	r2, [r7, #26]
 8013b82:	4619      	mov	r1, r3
 8013b84:	68b8      	ldr	r0, [r7, #8]
 8013b86:	f7ff ff83 	bl	8013a90 <snmp_pbuf_stream_writebuf>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 8013b8e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d002      	beq.n	8013b9c <snmp_pbuf_stream_writeto+0xac>
      return err;
 8013b96:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013b9a:	e015      	b.n	8013bc8 <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	889a      	ldrh	r2, [r3, #4]
 8013ba0:	8b7b      	ldrh	r3, [r7, #26]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	88da      	ldrh	r2, [r3, #6]
 8013bae:	8b7b      	ldrh	r3, [r7, #26]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 8013bb8:	88fa      	ldrh	r2, [r7, #6]
 8013bba:	8b7b      	ldrh	r3, [r7, #26]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 8013bc0:	88fb      	ldrh	r3, [r7, #6]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1bd      	bne.n	8013b42 <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 8013bc6:	2300      	movs	r3, #0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3720      	adds	r7, #32
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream* pbuf_stream, s32_t offset)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	db05      	blt.n	8013bec <snmp_pbuf_stream_seek+0x1c>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	88db      	ldrh	r3, [r3, #6]
 8013be4:	461a      	mov	r2, r3
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	4293      	cmp	r3, r2
 8013bea:	dd02      	ble.n	8013bf2 <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 8013bec:	f06f 030f 	mvn.w	r3, #15
 8013bf0:	e010      	b.n	8013c14 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	889a      	ldrh	r2, [r3, #4]
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	88da      	ldrh	r2, [r3, #6]
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	1ad3      	subs	r3, r2, r3
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	370c      	adds	r7, #12
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bc80      	pop	{r7}
 8013c1c:	4770      	bx	lr

08013c1e <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream* pbuf_stream, u32_t offset)
{
 8013c1e:	b580      	push	{r7, lr}
 8013c20:	b084      	sub	sp, #16
 8013c22:	af00      	add	r7, sp, #0
 8013c24:	6078      	str	r0, [r7, #4]
 8013c26:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	889b      	ldrh	r3, [r3, #4]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	1a9b      	subs	r3, r3, r2
 8013c32:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 8013c34:	68f9      	ldr	r1, [r7, #12]
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff ffca 	bl	8013bd0 <snmp_pbuf_stream_seek>
 8013c3c:	4603      	mov	r3, r0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3710      	adds	r7, #16
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}

08013c46 <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013c46:	b580      	push	{r7, lr}
 8013c48:	b084      	sub	sp, #16
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	60f8      	str	r0, [r7, #12]
 8013c4e:	60b9      	str	r1, [r7, #8]
 8013c50:	607a      	str	r2, [r7, #4]
 8013c52:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 8013c54:	8b3b      	ldrh	r3, [r7, #24]
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	6879      	ldr	r1, [r7, #4]
 8013c5a:	68b8      	ldr	r0, [r7, #8]
 8013c5c:	f7fd fe36 	bl	80118cc <snmp_receive>

  pbuf_free(p);
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f002 fad5 	bl	8016210 <pbuf_free>
}
 8013c66:	bf00      	nop
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <snmp_sendto>:

err_t 
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b084      	sub	sp, #16
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	60f8      	str	r0, [r7, #12]
 8013c76:	60b9      	str	r1, [r7, #8]
 8013c78:	607a      	str	r2, [r7, #4]
 8013c7a:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb*)handle, p, dst, port);
 8013c7c:	887b      	ldrh	r3, [r7, #2]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	68b9      	ldr	r1, [r7, #8]
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f008 fc86 	bl	801c594 <udp_sendto>
 8013c88:	4603      	mov	r3, r0
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void* handle, const ip_addr_t *dst, ip_addr_t *result)
{
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b088      	sub	sp, #32
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	60f8      	str	r0, [r7, #12]
 8013c9a:	60b9      	str	r1, [r7, #8]
 8013c9c:	607a      	str	r2, [r7, #4]
  struct udp_pcb* udp_pcb = (struct udp_pcb*)handle;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t* dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 8013ca2:	68b8      	ldr	r0, [r7, #8]
 8013ca4:	f00c f822 	bl	801fcec <ip4_route>
 8013ca8:	61b8      	str	r0, [r7, #24]
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d002      	beq.n	8013cb6 <snmp_get_local_ip_for_dst+0x24>
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	3304      	adds	r3, #4
 8013cb4:	e000      	b.n	8013cb8 <snmp_get_local_ip_for_dst+0x26>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 8013cba:	69bb      	ldr	r3, [r7, #24]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d008      	beq.n	8013cd2 <snmp_get_local_ip_for_dst+0x40>
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d005      	beq.n	8013cd2 <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	601a      	str	r2, [r3, #0]
    return 1;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 8013cd2:	2300      	movs	r3, #0
  }
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3720      	adds	r7, #32
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
  err_t err;
  
  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8013ce2:	202e      	movs	r0, #46	@ 0x2e
 8013ce4:	f008 fe93 	bl	801ca0e <udp_new_ip_type>
 8013ce8:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d106      	bne.n	8013cfe <snmp_init+0x22>
 8013cf0:	4b11      	ldr	r3, [pc, #68]	@ (8013d38 <snmp_init+0x5c>)
 8013cf2:	225b      	movs	r2, #91	@ 0x5b
 8013cf4:	4911      	ldr	r1, [pc, #68]	@ (8013d3c <snmp_init+0x60>)
 8013cf6:	4812      	ldr	r0, [pc, #72]	@ (8013d40 <snmp_init+0x64>)
 8013cf8:	f00e faa8 	bl	802224c <iprintf>
 8013cfc:	e018      	b.n	8013d30 <snmp_init+0x54>

  snmp_traps_handle = snmp_pcb;
 8013cfe:	4a11      	ldr	r2, [pc, #68]	@ (8013d44 <snmp_init+0x68>)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, (void *)SNMP_IN_PORT);
 8013d04:	22a1      	movs	r2, #161	@ 0xa1
 8013d06:	4910      	ldr	r1, [pc, #64]	@ (8013d48 <snmp_init+0x6c>)
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f008 fe25 	bl	801c958 <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, SNMP_IN_PORT);
 8013d0e:	22a1      	movs	r2, #161	@ 0xa1
 8013d10:	490e      	ldr	r1, [pc, #56]	@ (8013d4c <snmp_init+0x70>)
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f008 fd5a 	bl	801c7cc <udp_bind>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 8013d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d005      	beq.n	8013d30 <snmp_init+0x54>
 8013d24:	4b04      	ldr	r3, [pc, #16]	@ (8013d38 <snmp_init+0x5c>)
 8013d26:	2261      	movs	r2, #97	@ 0x61
 8013d28:	4909      	ldr	r1, [pc, #36]	@ (8013d50 <snmp_init+0x74>)
 8013d2a:	4805      	ldr	r0, [pc, #20]	@ (8013d40 <snmp_init+0x64>)
 8013d2c:	f00e fa8e 	bl	802224c <iprintf>
}
 8013d30:	3708      	adds	r7, #8
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	08025d1c 	.word	0x08025d1c
 8013d3c:	08025d58 	.word	0x08025d58
 8013d40:	08025d6c 	.word	0x08025d6c
 8013d44:	200085f4 	.word	0x200085f4
 8013d48:	08013c47 	.word	0x08013c47
 8013d4c:	08032ed0 	.word	0x08032ed0
 8013d50:	08025d94 	.word	0x08025d94

08013d54 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value);

snmp_err_t 
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b087      	sub	sp, #28
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	607a      	str	r2, [r7, #4]
 8013d60:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node* scalar_node = (const struct snmp_scalar_node*)(const void*)instance->node;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	791b      	ldrb	r3, [r3, #4]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d103      	bne.n	8013d78 <snmp_scalar_get_instance+0x24>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013d78:	23f1      	movs	r3, #241	@ 0xf1
 8013d7a:	e019      	b.n	8013db0 <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	7c5a      	ldrb	r2, [r3, #17]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	7c1a      	ldrb	r2, [r3, #16]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value = scalar_node->get_value;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	695a      	ldr	r2, [r3, #20]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test  = scalar_node->set_test;
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	699a      	ldr	r2, [r3, #24]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = scalar_node->set_value;
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	69da      	ldr	r2, [r3, #28]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  return SNMP_ERR_NOERROR;
 8013dae:	2300      	movs	r3, #0
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	371c      	adds	r7, #28
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bc80      	pop	{r7}
 8013db8:	4770      	bx	lr

08013dba <snmp_scalar_get_next_instance>:

snmp_err_t 
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013dba:	b580      	push	{r7, lr}
 8013dbc:	b084      	sub	sp, #16
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	60f8      	str	r0, [r7, #12]
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	607a      	str	r2, [r7, #4]
 8013dc6:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	791b      	ldrb	r3, [r3, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d10d      	bne.n	8013dec <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 8013ddc:	7afb      	ldrb	r3, [r7, #11]
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	4619      	mov	r1, r3
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f7ff ffb6 	bl	8013d54 <snmp_scalar_get_instance>
 8013de8:	4603      	mov	r3, r0
 8013dea:	e000      	b.n	8013dee <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8013dec:	23f1      	movs	r3, #241	@ 0xf1
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3710      	adds	r7, #16
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
	...

08013df8 <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b089      	sub	sp, #36	@ 0x24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	460b      	mov	r3, r1
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	791b      	ldrb	r3, [r3, #4]
 8013e0a:	2b02      	cmp	r3, #2
 8013e0c:	d142      	bne.n	8013e94 <snmp_scalar_array_get_instance+0x9c>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d13e      	bne.n	8013e94 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	695b      	ldr	r3, [r3, #20]
 8013e20:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 8013e26:	e00b      	b.n	8013e40 <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d00c      	beq.n	8013e4e <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	3308      	adds	r3, #8
 8013e38:	61fb      	str	r3, [r7, #28]
      i++;
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	8a1b      	ldrh	r3, [r3, #16]
 8013e44:	461a      	mov	r2, r3
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d3ed      	bcc.n	8013e28 <snmp_scalar_array_get_instance+0x30>
 8013e4c:	e000      	b.n	8013e50 <snmp_scalar_array_get_instance+0x58>
        break;
 8013e4e:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	8a1b      	ldrh	r3, [r3, #16]
 8013e54:	461a      	mov	r2, r3
 8013e56:	69bb      	ldr	r3, [r7, #24]
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d21b      	bcs.n	8013e94 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	795a      	ldrb	r2, [r3, #5]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	791a      	ldrb	r2, [r3, #4]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	4a0b      	ldr	r2, [pc, #44]	@ (8013ea0 <snmp_scalar_array_get_instance+0xa8>)
 8013e74:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8013ea4 <snmp_scalar_array_get_instance+0xac>)
 8013e7c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	4a09      	ldr	r2, [pc, #36]	@ (8013ea8 <snmp_scalar_array_get_instance+0xb0>)
 8013e84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      instance->reference.const_ptr = array_node_def;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	69fa      	ldr	r2, [r7, #28]
 8013e8c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

      return SNMP_ERR_NOERROR;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e000      	b.n	8013e96 <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8013e94:	23f1      	movs	r3, #241	@ 0xf1
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3724      	adds	r7, #36	@ 0x24
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bc80      	pop	{r7}
 8013e9e:	4770      	bx	lr
 8013ea0:	08014019 	.word	0x08014019
 8013ea4:	08014045 	.word	0x08014045
 8013ea8:	08014077 	.word	0x08014077

08013eac <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b08b      	sub	sp, #44	@ 0x2c
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	695b      	ldr	r3, [r3, #20]
 8013ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  const struct snmp_scalar_array_node_def* result = NULL;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	791b      	ldrb	r3, [r3, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d121      	bne.n	8013f16 <snmp_scalar_array_get_next_instance+0x6a>
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	8a1b      	ldrh	r3, [r3, #16]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d01d      	beq.n	8013f16 <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	83fb      	strh	r3, [r7, #30]
    
    result = array_node_def;
 8013ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee0:	623b      	str	r3, [r7, #32]
    array_node_def++;
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee4:	3308      	adds	r3, #8
 8013ee6:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 8013ee8:	2301      	movs	r3, #1
 8013eea:	83fb      	strh	r3, [r7, #30]
 8013eec:	e00d      	b.n	8013f0a <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 8013eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d201      	bcs.n	8013efe <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 8013efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efc:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 8013efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f00:	3308      	adds	r3, #8
 8013f02:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 8013f04:	8bfb      	ldrh	r3, [r7, #30]
 8013f06:	3301      	adds	r3, #1
 8013f08:	83fb      	strh	r3, [r7, #30]
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	8a1b      	ldrh	r3, [r3, #16]
 8013f0e:	8bfa      	ldrh	r2, [r7, #30]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d3ec      	bcc.n	8013eee <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8013f14:	e04b      	b.n	8013fae <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	791b      	ldrb	r3, [r3, #4]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d047      	beq.n	8013fae <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	791b      	ldrb	r3, [r3, #4]
 8013f22:	2b01      	cmp	r3, #1
 8013f24:	d116      	bne.n	8013f54 <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */    
      u16_t i = 0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013f2a:	e00e      	b.n	8013f4a <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	689b      	ldr	r3, [r3, #8]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d102      	bne.n	8013f3e <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 8013f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f3a:	623b      	str	r3, [r7, #32]
          break;
 8013f3c:	e00a      	b.n	8013f54 <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 8013f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f40:	3308      	adds	r3, #8
 8013f42:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013f44:	8bbb      	ldrh	r3, [r7, #28]
 8013f46:	3301      	adds	r3, #1
 8013f48:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	8a1b      	ldrh	r3, [r3, #16]
 8013f4e:	8bba      	ldrh	r2, [r7, #28]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d3eb      	bcc.n	8013f2c <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 8013f54:	6a3b      	ldr	r3, [r7, #32]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d129      	bne.n	8013fae <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 8013f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f5e:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 8013f60:	2300      	movs	r3, #0
 8013f62:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	695b      	ldr	r3, [r3, #20]
 8013f68:	627b      	str	r3, [r7, #36]	@ 0x24
      while (i < array_node->array_node_count) {
 8013f6a:	e01b      	b.n	8013fa4 <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d90f      	bls.n	8013f98 <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 8013f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013f82:	69ba      	ldr	r2, [r7, #24]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d907      	bls.n	8013f98 <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 8013f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8a:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8e:	681a      	ldr	r2, [r3, #0]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	1ad3      	subs	r3, r2, r3
 8013f96:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f9a:	3308      	adds	r3, #8
 8013f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013f9e:	8afb      	ldrh	r3, [r7, #22]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	8a1b      	ldrh	r3, [r3, #16]
 8013fa8:	8afa      	ldrh	r2, [r7, #22]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d3de      	bcc.n	8013f6c <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 8013fae:	6a3b      	ldr	r3, [r7, #32]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d101      	bne.n	8013fb8 <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 8013fb4:	23f1      	movs	r3, #241	@ 0xf1
 8013fb6:	e024      	b.n	8014002 <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2202      	movs	r2, #2
 8013fbc:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 8013fbe:	6a3b      	ldr	r3, [r7, #32]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	60da      	str	r2, [r3, #12]
  
  instance->access              = result->access;
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	795a      	ldrb	r2, [r3, #5]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type           = result->asn1_type;
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	791a      	ldrb	r2, [r3, #4]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	4a0a      	ldr	r2, [pc, #40]	@ (801400c <snmp_scalar_array_get_next_instance+0x160>)
 8013fe4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	4a09      	ldr	r2, [pc, #36]	@ (8014010 <snmp_scalar_array_get_next_instance+0x164>)
 8013fec:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	4a08      	ldr	r2, [pc, #32]	@ (8014014 <snmp_scalar_array_get_next_instance+0x168>)
 8013ff4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  instance->reference.const_ptr = result;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6a3a      	ldr	r2, [r7, #32]
 8013ffc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  return SNMP_ERR_NOERROR;
 8014000:	2300      	movs	r3, #0
}
 8014002:	4618      	mov	r0, r3
 8014004:	372c      	adds	r7, #44	@ 0x2c
 8014006:	46bd      	mov	sp, r7
 8014008:	bc80      	pop	{r7}
 801400a:	4770      	bx	lr
 801400c:	08014019 	.word	0x08014019
 8014010:	08014045 	.word	0x08014045
 8014014:	08014077 	.word	0x08014077

08014018 <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance* instance, void* value)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	60fb      	str	r3, [r7, #12]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801402e:	60bb      	str	r3, [r7, #8]

  return array_node->get_value(array_node_def, value);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	699b      	ldr	r3, [r3, #24]
 8014034:	6839      	ldr	r1, [r7, #0]
 8014036:	68b8      	ldr	r0, [r7, #8]
 8014038:	4798      	blx	r3
 801403a:	4603      	mov	r3, r0
}
 801403c:	4618      	mov	r0, r3
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b086      	sub	sp, #24
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	460b      	mov	r3, r1
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801405e:	613b      	str	r3, [r7, #16]

  return array_node->set_test(array_node_def, value_len, value);
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	69db      	ldr	r3, [r3, #28]
 8014064:	8979      	ldrh	r1, [r7, #10]
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	6938      	ldr	r0, [r7, #16]
 801406a:	4798      	blx	r3
 801406c:	4603      	mov	r3, r0
}
 801406e:	4618      	mov	r0, r3
 8014070:	3718      	adds	r7, #24
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b086      	sub	sp, #24
 801407a:	af00      	add	r7, sp, #0
 801407c:	60f8      	str	r0, [r7, #12]
 801407e:	460b      	mov	r3, r1
 8014080:	607a      	str	r2, [r7, #4]
 8014082:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014090:	613b      	str	r3, [r7, #16]

  return array_node->set_value(array_node_def, value_len, value);
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	8979      	ldrh	r1, [r7, #10]
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	6938      	ldr	r0, [r7, #16]
 801409c:	4798      	blx	r3
 801409e:	4603      	mov	r3, r0
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3718      	adds	r7, #24
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80140a8:	b590      	push	{r4, r7, lr}
 80140aa:	b089      	sub	sp, #36	@ 0x24
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	460b      	mov	r3, r1
 80140b2:	607a      	str	r2, [r7, #4]
 80140b4:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 80140b6:	23f1      	movs	r3, #241	@ 0xf1
 80140b8:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	791b      	ldrb	r3, [r3, #4]
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d947      	bls.n	8014158 <snmp_table_get_instance+0xb0>
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	689b      	ldr	r3, [r3, #8]
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d143      	bne.n	8014158 <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def* col_def = table_node->columns;
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	695b      	ldr	r3, [r3, #20]
 80140d4:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	8a1b      	ldrh	r3, [r3, #16]
 80140da:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80140dc:	e00b      	b.n	80140f6 <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d009      	beq.n	80140fe <snmp_table_get_instance+0x56>
        break;
      }
      
      col_def++;
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	3308      	adds	r3, #8
 80140ee:	61bb      	str	r3, [r7, #24]
      i--;
 80140f0:	8afb      	ldrh	r3, [r7, #22]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80140f6:	8afb      	ldrh	r3, [r7, #22]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d1f0      	bne.n	80140de <snmp_table_get_instance+0x36>
 80140fc:	e000      	b.n	8014100 <snmp_table_get_instance+0x58>
        break;
 80140fe:	bf00      	nop
    }

    if (i > 0) {
 8014100:	8afb      	ldrh	r3, [r7, #22]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d028      	beq.n	8014158 <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	791a      	ldrb	r2, [r3, #4]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->access    = col_def->access;
 8014110:	69bb      	ldr	r3, [r7, #24]
 8014112:	795a      	ldrb	r2, [r3, #5]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->get_value = table_node->get_value;
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	6a1a      	ldr	r2, [r3, #32]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test  = table_node->set_test;
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value = table_node->set_value;
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

      ret = table_node->get_cell_instance(
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	699c      	ldr	r4, [r3, #24]
        &(instance->instance_oid.id[1]),
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f103 000c 	add.w	r0, r3, #12
        &(instance->instance_oid.id[2]),
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f103 0110 	add.w	r1, r3, #16
        instance->instance_oid.len-2,
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 801414c:	3b02      	subs	r3, #2
 801414e:	b2da      	uxtb	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	47a0      	blx	r4
 8014154:	4603      	mov	r3, r0
 8014156:	77fb      	strb	r3, [r7, #31]
        instance);
    }
  }

  return ret;
 8014158:	7ffb      	ldrb	r3, [r7, #31]
}
 801415a:	4618      	mov	r0, r3
 801415c:	3724      	adds	r7, #36	@ 0x24
 801415e:	46bd      	mov	sp, r7
 8014160:	bd90      	pop	{r4, r7, pc}

08014162 <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b0be      	sub	sp, #248	@ 0xf8
 8014166:	af00      	add	r7, sp, #0
 8014168:	60f8      	str	r0, [r7, #12]
 801416a:	460b      	mov	r3, r1
 801416c:	607a      	str	r2, [r7, #4]
 801416e:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8014178:	2300      	movs	r3, #0
 801417a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	791b      	ldrb	r3, [r3, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d005      	beq.n	8014192 <snmp_table_get_next_instance+0x30>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	2b01      	cmp	r3, #1
 801418c:	d901      	bls.n	8014192 <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 801418e:	23f1      	movs	r3, #241	@ 0xf1
 8014190:	e0b2      	b.n	80142f8 <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	791b      	ldrb	r3, [r3, #4]
 8014196:	2b01      	cmp	r3, #1
 8014198:	d903      	bls.n	80141a2 <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	791b      	ldrb	r3, [r3, #4]
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	d90c      	bls.n	80141c4 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f103 0110 	add.w	r1, r3, #16
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	791b      	ldrb	r3, [r3, #4]
 80141b4:	3b02      	subs	r3, #2
 80141b6:	b2da      	uxtb	r2, r3
 80141b8:	f107 0314 	add.w	r3, r7, #20
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fa fd73 	bl	800eca8 <snmp_oid_assign>
 80141c2:	e001      	b.n	80141c8 <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 80141c4:	2300      	movs	r3, #0
 80141c6:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 80141c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141cc:	6a1a      	ldr	r2, [r3, #32]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test     = table_node->set_test;
 80141d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value    = table_node->set_value;
 80141e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def* next_col_def = NULL;
 80141ec:	2300      	movs	r3, #0
 80141ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 80141f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141f6:	695b      	ldr	r3, [r3, #20]
 80141f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 80141fc:	2300      	movs	r3, #0
 80141fe:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 8014202:	e02c      	b.n	801425e <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 8014204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801420e:	429a      	cmp	r2, r3
 8014210:	d104      	bne.n	801421c <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 8014212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 801421a:	e027      	b.n	801426c <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 801421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8014226:	429a      	cmp	r2, r3
 8014228:	d20f      	bcs.n	801424a <snmp_table_get_next_instance+0xe8>
 801422a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801422e:	2b00      	cmp	r3, #0
 8014230:	d007      	beq.n	8014242 <snmp_table_get_next_instance+0xe0>
 8014232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	429a      	cmp	r2, r3
 8014240:	d203      	bcs.n	801424a <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 8014242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 801424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801424e:	3308      	adds	r3, #8
 8014250:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8014254:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8014258:	3301      	adds	r3, #1
 801425a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 801425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014262:	8a1b      	ldrh	r3, [r3, #16]
 8014264:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 8014268:	429a      	cmp	r2, r3
 801426a:	d3cb      	bcc.n	8014204 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 801426c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014270:	2b00      	cmp	r3, #0
 8014272:	d101      	bne.n	8014278 <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8014274:	23f1      	movs	r3, #241	@ 0xf1
 8014276:	e03f      	b.n	80142f8 <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 8014278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801427c:	791a      	ldrb	r2, [r3, #4]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    instance->access             = next_col_def->access;
 8014284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014288:	795a      	ldrb	r2, [r3, #5]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

    result = table_node->get_next_cell_instance(
 8014290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014294:	69db      	ldr	r3, [r3, #28]
 8014296:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 801429a:	f107 0114 	add.w	r1, r7, #20
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	4798      	blx	r3
 80142a2:	4603      	mov	r3, r0
 80142a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      instance);

    if (result == SNMP_ERR_NOERROR) {
 80142a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d11a      	bne.n	80142e6 <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 80142b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80142b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 80142b8:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2202      	movs	r2, #2
 80142be:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2201      	movs	r2, #1
 80142c4:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 80142c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	1d18      	adds	r0, r3, #4
 80142d4:	7d3a      	ldrb	r2, [r7, #20]
 80142d6:	f107 0314 	add.w	r3, r7, #20
 80142da:	3304      	adds	r3, #4
 80142dc:	4619      	mov	r1, r3
 80142de:	f7fa fd0d 	bl	800ecfc <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80142e2:	2300      	movs	r3, #0
 80142e4:	e008      	b.n	80142f8 <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 80142e6:	2300      	movs	r3, #0
 80142e8:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 80142ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	3301      	adds	r3, #1
 80142f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 80142f6:	e779      	b.n	80141ec <snmp_table_get_next_instance+0x8a>
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	37f8      	adds	r7, #248	@ 0xf8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8014300:	b5b0      	push	{r4, r5, r7, lr}
 8014302:	b08a      	sub	sp, #40	@ 0x28
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	460b      	mov	r3, r1
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 801430e:	23f1      	movs	r3, #241	@ 0xf1
 8014310:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	791b      	ldrb	r3, [r3, #4]
 801431c:	2b02      	cmp	r3, #2
 801431e:	d969      	bls.n	80143f4 <snmp_table_simple_get_instance+0xf4>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	2b01      	cmp	r3, #1
 8014326:	d165      	bne.n	80143f4 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	699c      	ldr	r4, [r3, #24]
      &(instance->instance_oid.id[1]),
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f103 000c 	add.w	r0, r3, #12
      &(instance->instance_oid.id[2]),
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f103 0110 	add.w	r1, r3, #16
      instance->instance_oid.len-2,
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 801433c:	3b02      	subs	r3, #2
 801433e:	b2da      	uxtb	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f103 05e4 	add.w	r5, r3, #228	@ 0xe4
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	33e8      	adds	r3, #232	@ 0xe8
 801434a:	9300      	str	r3, [sp, #0]
 801434c:	462b      	mov	r3, r5
 801434e:	47a0      	blx	r4
 8014350:	4603      	mov	r3, r0
 8014352:	77fb      	strb	r3, [r7, #31]
      &instance->reference,
      &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 8014354:	7ffb      	ldrb	r3, [r7, #31]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d14c      	bne.n	80143f4 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def* col_def = table_node->columns;
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	695b      	ldr	r3, [r3, #20]
 801435e:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	8a1b      	ldrh	r3, [r3, #16]
 8014364:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8014366:	e00b      	b.n	8014380 <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	429a      	cmp	r2, r3
 8014372:	d009      	beq.n	8014388 <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	3308      	adds	r3, #8
 8014378:	61bb      	str	r3, [r7, #24]
        i--;
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	3b01      	subs	r3, #1
 801437e:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1f0      	bne.n	8014368 <snmp_table_simple_get_instance+0x68>
 8014386:	e000      	b.n	801438a <snmp_table_simple_get_instance+0x8a>
          break;
 8014388:	bf00      	nop
      }

      if (i > 0) {
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d02f      	beq.n	80143f0 <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 8014390:	69bb      	ldr	r3, [r7, #24]
 8014392:	791a      	ldrb	r2, [r3, #4]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	2201      	movs	r2, #1
 801439e:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
        instance->set_test  = NULL;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2200      	movs	r2, #0
 80143a6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->set_value = NULL;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2200      	movs	r2, #0
 80143ae:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        switch (col_def->data_type) {
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	795b      	ldrb	r3, [r3, #5]
 80143b6:	2b03      	cmp	r3, #3
 80143b8:	dc15      	bgt.n	80143e6 <snmp_table_simple_get_instance+0xe6>
 80143ba:	2b02      	cmp	r3, #2
 80143bc:	da0e      	bge.n	80143dc <snmp_table_simple_get_instance+0xdc>
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d002      	beq.n	80143c8 <snmp_table_simple_get_instance+0xc8>
 80143c2:	2b01      	cmp	r3, #1
 80143c4:	d005      	beq.n	80143d2 <snmp_table_simple_get_instance+0xd2>
 80143c6:	e00e      	b.n	80143e6 <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4a0d      	ldr	r2, [pc, #52]	@ (8014400 <snmp_table_simple_get_instance+0x100>)
 80143cc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143d0:	e00b      	b.n	80143ea <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	4a0b      	ldr	r2, [pc, #44]	@ (8014404 <snmp_table_simple_get_instance+0x104>)
 80143d6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143da:	e006      	b.n	80143ea <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	4a0a      	ldr	r2, [pc, #40]	@ (8014408 <snmp_table_simple_get_instance+0x108>)
 80143e0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80143e4:	e001      	b.n	80143ea <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 80143e6:	2305      	movs	r3, #5
 80143e8:	e005      	b.n	80143f6 <snmp_table_simple_get_instance+0xf6>
        }        

        ret = SNMP_ERR_NOERROR;
 80143ea:	2300      	movs	r3, #0
 80143ec:	77fb      	strb	r3, [r7, #31]
 80143ee:	e001      	b.n	80143f4 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 80143f0:	23f1      	movs	r3, #241	@ 0xf1
 80143f2:	77fb      	strb	r3, [r7, #31]
      }
    } 
  }

  return ret;
 80143f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3720      	adds	r7, #32
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bdb0      	pop	{r4, r5, r7, pc}
 80143fe:	bf00      	nop
 8014400:	08014609 	.word	0x08014609
 8014404:	080145e5 	.word	0x080145e5
 8014408:	0801462d 	.word	0x0801462d

0801440c <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 801440c:	b590      	push	{r4, r7, lr}
 801440e:	b0bf      	sub	sp, #252	@ 0xfc
 8014410:	af00      	add	r7, sp, #0
 8014412:	60f8      	str	r0, [r7, #12]
 8014414:	460b      	mov	r3, r1
 8014416:	607a      	str	r2, [r7, #4]
 8014418:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_simple_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8014422:	2300      	movs	r3, #0
 8014424:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	791b      	ldrb	r3, [r3, #4]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d005      	beq.n	801443c <snmp_table_simple_get_next_instance+0x30>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d901      	bls.n	801443c <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8014438:	23f1      	movs	r3, #241	@ 0xf1
 801443a:	e0c8      	b.n	80145ce <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	791b      	ldrb	r3, [r3, #4]
 8014440:	2b01      	cmp	r3, #1
 8014442:	d903      	bls.n	801444c <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	791b      	ldrb	r3, [r3, #4]
 8014450:	2b02      	cmp	r3, #2
 8014452:	d90c      	bls.n	801446e <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f103 0110 	add.w	r1, r3, #16
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	791b      	ldrb	r3, [r3, #4]
 801445e:	3b02      	subs	r3, #2
 8014460:	b2da      	uxtb	r2, r3
 8014462:	f107 0314 	add.w	r3, r7, #20
 8014466:	4618      	mov	r0, r3
 8014468:	f7fa fc1e 	bl	800eca8 <snmp_oid_assign>
 801446c:	e001      	b.n	8014472 <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 801446e:	2300      	movs	r3, #0
 8014470:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def* next_col_def = NULL;
 8014472:	2300      	movs	r3, #0
 8014474:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 8014478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8014482:	2300      	movs	r3, #0
 8014484:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014488:	e02c      	b.n	80144e4 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 801448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8014494:	429a      	cmp	r2, r3
 8014496:	d104      	bne.n	80144a2 <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 8014498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801449c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 80144a0:	e028      	b.n	80144f4 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 80144a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d20f      	bcs.n	80144d0 <snmp_table_simple_get_next_instance+0xc4>
 80144b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d007      	beq.n	80144c8 <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 80144b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144c2:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d203      	bcs.n	80144d0 <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 80144c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 80144d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144d4:	3308      	adds	r3, #8
 80144d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 80144da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80144de:	3301      	adds	r3, #1
 80144e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80144e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80144e8:	8a1b      	ldrh	r3, [r3, #16]
 80144ea:	461a      	mov	r2, r3
 80144ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d3ca      	bcc.n	801448a <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 80144f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d101      	bne.n	8014500 <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 80144fc:	23f1      	movs	r3, #241	@ 0xf1
 80144fe:	e066      	b.n	80145ce <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 8014500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014504:	69dc      	ldr	r4, [r3, #28]
 8014506:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	33e8      	adds	r3, #232	@ 0xe8
 8014514:	f107 0114 	add.w	r1, r7, #20
 8014518:	47a0      	blx	r4
 801451a:	4603      	mov	r3, r0
 801451c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      &instance->reference,
      &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 8014520:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d11c      	bne.n	8014562 <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 8014528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801452c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8014530:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  }
  while (1);

  instance->asn1_type = col_def->asn1_type;
 8014532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014536:	791a      	ldrb	r2, [r3, #4]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->set_test  = NULL;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2200      	movs	r2, #0
 801454a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = NULL;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2200      	movs	r2, #0
 8014552:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  switch (col_def->data_type) {
 8014556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801455a:	795b      	ldrb	r3, [r3, #5]
 801455c:	2b03      	cmp	r3, #3
 801455e:	dc1f      	bgt.n	80145a0 <snmp_table_simple_get_next_instance+0x194>
 8014560:	e008      	b.n	8014574 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8014562:	2300      	movs	r3, #0
 8014564:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 8014566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	3301      	adds	r3, #1
 801456e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 8014572:	e77e      	b.n	8014472 <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 8014574:	2b02      	cmp	r3, #2
 8014576:	da0e      	bge.n	8014596 <snmp_table_simple_get_next_instance+0x18a>
 8014578:	2b00      	cmp	r3, #0
 801457a:	d002      	beq.n	8014582 <snmp_table_simple_get_next_instance+0x176>
 801457c:	2b01      	cmp	r3, #1
 801457e:	d005      	beq.n	801458c <snmp_table_simple_get_next_instance+0x180>
 8014580:	e00e      	b.n	80145a0 <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4a14      	ldr	r2, [pc, #80]	@ (80145d8 <snmp_table_simple_get_next_instance+0x1cc>)
 8014586:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 801458a:	e00b      	b.n	80145a4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	4a13      	ldr	r2, [pc, #76]	@ (80145dc <snmp_table_simple_get_next_instance+0x1d0>)
 8014590:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8014594:	e006      	b.n	80145a4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4a11      	ldr	r2, [pc, #68]	@ (80145e0 <snmp_table_simple_get_next_instance+0x1d4>)
 801459a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 801459e:	e001      	b.n	80145a4 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 80145a0:	2305      	movs	r3, #5
 80145a2:	e014      	b.n	80145ce <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2202      	movs	r2, #2
 80145a8:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2201      	movs	r2, #1
 80145ae:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 80145b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	1d18      	adds	r0, r3, #4
 80145be:	7d3a      	ldrb	r2, [r7, #20]
 80145c0:	f107 0314 	add.w	r3, r7, #20
 80145c4:	3304      	adds	r3, #4
 80145c6:	4619      	mov	r1, r3
 80145c8:	f7fa fb98 	bl	800ecfc <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	37fc      	adds	r7, #252	@ 0xfc
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd90      	pop	{r4, r7, pc}
 80145d6:	bf00      	nop
 80145d8:	08014609 	.word	0x08014609
 80145dc:	080145e5 	.word	0x080145e5
 80145e0:	0801462d 	.word	0x0801462d

080145e4 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance* instance, void* value)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b085      	sub	sp, #20
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t*)value;
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 80145fc:	2304      	movs	r3, #4
}
 80145fe:	4618      	mov	r0, r3
 8014600:	3714      	adds	r7, #20
 8014602:	46bd      	mov	sp, r7
 8014604:	bc80      	pop	{r7}
 8014606:	4770      	bx	lr

08014608 <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance* instance, void* value)
{
 8014608:	b480      	push	{r7}
 801460a:	b085      	sub	sp, #20
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t*)value;
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8014620:	2304      	movs	r3, #4
}
 8014622:	4618      	mov	r0, r3
 8014624:	3714      	adds	r7, #20
 8014626:	46bd      	mov	sp, r7
 8014628:	bc80      	pop	{r7}
 801462a:	4770      	bx	lr

0801462c <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance* instance, void* value)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014642:	461a      	mov	r2, r3
 8014644:	6838      	ldr	r0, [r7, #0]
 8014646:	f00e f8fc 	bl	8022842 <memcpy>
  return (u16_t)instance->reference_len;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014650:	b21b      	sxth	r3, r3
}
 8014652:	4618      	mov	r0, r3
 8014654:	3708      	adds	r7, #8
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
	...

0801465c <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	4603      	mov	r3, r0
 8014664:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 8014666:	4a04      	ldr	r2, [pc, #16]	@ (8014678 <snmp_set_auth_traps_enabled+0x1c>)
 8014668:	79fb      	ldrb	r3, [r7, #7]
 801466a:	7013      	strb	r3, [r2, #0]
}
 801466c:	bf00      	nop
 801466e:	370c      	adds	r7, #12
 8014670:	46bd      	mov	sp, r7
 8014672:	bc80      	pop	{r7}
 8014674:	4770      	bx	lr
 8014676:	bf00      	nop
 8014678:	20008600 	.word	0x20008600

0801467c <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 801467c:	b480      	push	{r7}
 801467e:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 8014680:	4b02      	ldr	r3, [pc, #8]	@ (801468c <snmp_get_auth_traps_enabled+0x10>)
 8014682:	781b      	ldrb	r3, [r3, #0]
}
 8014684:	4618      	mov	r0, r3
 8014686:	46bd      	mov	sp, r7
 8014688:	bc80      	pop	{r7}
 801468a:	4770      	bx	lr
 801468c:	20008600 	.word	0x20008600

08014690 <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id* eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b092      	sub	sp, #72	@ 0x48
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 801469e:	2300      	movs	r3, #0
 80146a0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  trap_msg.snmp_version = 0;
 80146a4:	2300      	movs	r3, #0
 80146a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 80146a8:	2300      	movs	r3, #0
 80146aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80146ae:	4b4b      	ldr	r3, [pc, #300]	@ (80147dc <snmp_send_trap+0x14c>)
 80146b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80146b2:	e088      	b.n	80147c6 <snmp_send_trap+0x136>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 80146b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146b6:	791b      	ldrb	r3, [r3, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d07c      	beq.n	80147b6 <snmp_send_trap+0x126>
 80146bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d079      	beq.n	80147b6 <snmp_send_trap+0x126>
 80146c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d075      	beq.n	80147b6 <snmp_send_trap+0x126>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 80146ca:	4b45      	ldr	r3, [pc, #276]	@ (80147e0 <snmp_send_trap+0x150>)
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80146d0:	f107 0318 	add.w	r3, r7, #24
 80146d4:	3304      	adds	r3, #4
 80146d6:	461a      	mov	r2, r3
 80146d8:	f7ff fadb 	bl	8013c92 <snmp_get_local_ip_for_dst>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d066      	beq.n	80147b0 <snmp_send_trap+0x120>
        if (eoid == NULL) {
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d104      	bne.n	80146f2 <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 80146e8:	f7fa f96e 	bl	800e9c8 <snmp_get_device_enterprise_oid>
 80146ec:	4603      	mov	r3, r0
 80146ee:	61bb      	str	r3, [r7, #24]
 80146f0:	e001      	b.n	80146f6 <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b06      	cmp	r3, #6
 80146fe:	d102      	bne.n	8014706 <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	627b      	str	r3, [r7, #36]	@ 0x24
 8014704:	e001      	b.n	801470a <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 8014706:	2300      	movs	r3, #0
 8014708:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 801470a:	f7f7 fc0b 	bl	800bf24 <sys_now>
 801470e:	4603      	mov	r3, r0
 8014710:	4a34      	ldr	r2, [pc, #208]	@ (80147e4 <snmp_send_trap+0x154>)
 8014712:	fba2 2303 	umull	r2, r3, r2, r3
 8014716:	08db      	lsrs	r3, r3, #3
 8014718:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 801471a:	f107 0318 	add.w	r3, r7, #24
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	4618      	mov	r0, r3
 8014722:	f000 f883 	bl	801482c <snmp_trap_varbind_sum>
 8014726:	4603      	mov	r3, r0
 8014728:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 801472a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801472c:	f107 0318 	add.w	r3, r7, #24
 8014730:	4611      	mov	r1, r2
 8014732:	4618      	mov	r0, r3
 8014734:	f000 f8b4 	bl	80148a0 <snmp_trap_header_sum>
 8014738:	4603      	mov	r3, r0
 801473a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 801473c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801473e:	2200      	movs	r2, #0
 8014740:	4619      	mov	r1, r3
 8014742:	2000      	movs	r0, #0
 8014744:	f001 f9ec 	bl	8015b20 <pbuf_alloc>
 8014748:	63b8      	str	r0, [r7, #56]	@ 0x38
        if (p != NULL) {
 801474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801474c:	2b00      	cmp	r3, #0
 801474e:	d02b      	beq.n	80147a8 <snmp_send_trap+0x118>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 8014750:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014752:	f107 0010 	add.w	r0, r7, #16
 8014756:	2200      	movs	r2, #0
 8014758:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801475a:	f7ff f943 	bl	80139e4 <snmp_pbuf_stream_init>

          /* pass 1, encode packet ino the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 801475e:	f107 0210 	add.w	r2, r7, #16
 8014762:	f107 0318 	add.w	r3, r7, #24
 8014766:	4611      	mov	r1, r2
 8014768:	4618      	mov	r0, r3
 801476a:	f000 f9b5 	bl	8014ad8 <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 801476e:	f107 0110 	add.w	r1, r7, #16
 8014772:	f107 0318 	add.w	r3, r7, #24
 8014776:	683a      	ldr	r2, [r7, #0]
 8014778:	4618      	mov	r0, r3
 801477a:	f000 f985 	bl	8014a88 <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 801477e:	4b1a      	ldr	r3, [pc, #104]	@ (80147e8 <snmp_send_trap+0x158>)
 8014780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014782:	3301      	adds	r3, #1
 8014784:	4a18      	ldr	r2, [pc, #96]	@ (80147e8 <snmp_send_trap+0x158>)
 8014786:	6693      	str	r3, [r2, #104]	@ 0x68
          snmp_stats.outpkts++;
 8014788:	4b17      	ldr	r3, [pc, #92]	@ (80147e8 <snmp_send_trap+0x158>)
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	3301      	adds	r3, #1
 801478e:	4a16      	ldr	r2, [pc, #88]	@ (80147e8 <snmp_send_trap+0x158>)
 8014790:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, SNMP_TRAP_PORT);
 8014792:	4b13      	ldr	r3, [pc, #76]	@ (80147e0 <snmp_send_trap+0x150>)
 8014794:	6818      	ldr	r0, [r3, #0]
 8014796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014798:	23a2      	movs	r3, #162	@ 0xa2
 801479a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801479c:	f7ff fa67 	bl	8013c6e <snmp_sendto>
          pbuf_free(p);
 80147a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80147a2:	f001 fd35 	bl	8016210 <pbuf_free>
 80147a6:	e006      	b.n	80147b6 <snmp_send_trap+0x126>
        } else {
          err = ERR_MEM;
 80147a8:	23ff      	movs	r3, #255	@ 0xff
 80147aa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80147ae:	e002      	b.n	80147b6 <snmp_send_trap+0x126>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 80147b0:	23fc      	movs	r3, #252	@ 0xfc
 80147b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 80147b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147ba:	3301      	adds	r3, #1
 80147bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80147c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c2:	3308      	adds	r3, #8
 80147c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80147c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f43f af72 	beq.w	80146b4 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 80147d0:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3748      	adds	r7, #72	@ 0x48
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	200085f8 	.word	0x200085f8
 80147e0:	200085f4 	.word	0x200085f4
 80147e4:	cccccccd 	.word	0xcccccccd
 80147e8:	2000854c 	.word	0x2000854c

080147ec <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t 
snmp_send_trap_generic(s32_t generic_trap)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 80147f4:	2300      	movs	r3, #0
 80147f6:	2200      	movs	r2, #0
 80147f8:	6879      	ldr	r1, [r7, #4]
 80147fa:	4804      	ldr	r0, [pc, #16]	@ (801480c <snmp_send_trap_generic+0x20>)
 80147fc:	f7ff ff48 	bl	8014690 <snmp_send_trap>
 8014800:	4603      	mov	r3, r0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3708      	adds	r7, #8
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	08032d00 	.word	0x08032d00

08014810 <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent) 
 */
void
snmp_authfail_trap(void)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 8014814:	4b04      	ldr	r3, [pc, #16]	@ (8014828 <snmp_authfail_trap+0x18>)
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 801481c:	2004      	movs	r0, #4
 801481e:	f7ff ffe5 	bl	80147ec <snmp_send_trap_generic>
  }
}
 8014822:	bf00      	nop
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	20008600 	.word	0x20008600

0801482c <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b088      	sub	sp, #32
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 8014836:	2300      	movs	r3, #0
 8014838:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 801483e:	e015      	b.n	801486c <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 8014840:	f107 030c 	add.w	r3, r7, #12
 8014844:	4619      	mov	r1, r3
 8014846:	69f8      	ldr	r0, [r7, #28]
 8014848:	f7fe fa2c 	bl	8012ca4 <snmp_varbind_length>
 801484c:	4603      	mov	r3, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	d109      	bne.n	8014866 <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 8014852:	7b3b      	ldrb	r3, [r7, #12]
 8014854:	461a      	mov	r2, r3
 8014856:	89fb      	ldrh	r3, [r7, #14]
 8014858:	4413      	add	r3, r2
 801485a:	b29a      	uxth	r2, r3
 801485c:	8b7b      	ldrh	r3, [r7, #26]
 801485e:	4413      	add	r3, r2
 8014860:	b29b      	uxth	r3, r3
 8014862:	3301      	adds	r3, #1
 8014864:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d1e6      	bne.n	8014840 <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	8b7a      	ldrh	r2, [r7, #26]
 8014876:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	8bdb      	ldrh	r3, [r3, #30]
 801487c:	f107 0219 	add.w	r2, r7, #25
 8014880:	4611      	mov	r1, r2
 8014882:	4618      	mov	r0, r3
 8014884:	f7f9 fcfa 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 8014888:	7e7b      	ldrb	r3, [r7, #25]
 801488a:	461a      	mov	r2, r3
 801488c:	8b7b      	ldrh	r3, [r7, #26]
 801488e:	4413      	add	r3, r2
 8014890:	b29b      	uxth	r3, r3
 8014892:	3301      	adds	r3, #1
 8014894:	837b      	strh	r3, [r7, #26]

  return tot_len;
 8014896:	8b7b      	ldrh	r3, [r7, #26]
}
 8014898:	4618      	mov	r0, r3
 801489a:	3720      	adds	r7, #32
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 80148ac:	887b      	ldrh	r3, [r7, #2]
 80148ae:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	691b      	ldr	r3, [r3, #16]
 80148b4:	f107 020c 	add.w	r2, r7, #12
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7f9 fcfa 	bl	800e2b4 <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80148c0:	89bb      	ldrh	r3, [r7, #12]
 80148c2:	f107 020b 	add.w	r2, r7, #11
 80148c6:	4611      	mov	r1, r2
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7f9 fcd7 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 80148ce:	7afb      	ldrb	r3, [r7, #11]
 80148d0:	461a      	mov	r2, r3
 80148d2:	89bb      	ldrh	r3, [r7, #12]
 80148d4:	4413      	add	r3, r2
 80148d6:	b29a      	uxth	r2, r3
 80148d8:	89fb      	ldrh	r3, [r7, #14]
 80148da:	4413      	add	r3, r2
 80148dc:	b29b      	uxth	r3, r3
 80148de:	3301      	adds	r3, #1
 80148e0:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	461a      	mov	r2, r3
 80148e8:	f107 030c 	add.w	r3, r7, #12
 80148ec:	4619      	mov	r1, r3
 80148ee:	4610      	mov	r0, r2
 80148f0:	f7f9 fd2e 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80148f4:	89bb      	ldrh	r3, [r7, #12]
 80148f6:	f107 020b 	add.w	r2, r7, #11
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7f9 fcbd 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014902:	7afb      	ldrb	r3, [r7, #11]
 8014904:	461a      	mov	r2, r3
 8014906:	89bb      	ldrh	r3, [r7, #12]
 8014908:	4413      	add	r3, r2
 801490a:	b29a      	uxth	r2, r3
 801490c:	89fb      	ldrh	r3, [r7, #14]
 801490e:	4413      	add	r3, r2
 8014910:	b29b      	uxth	r3, r3
 8014912:	3301      	adds	r3, #1
 8014914:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	461a      	mov	r2, r3
 801491c:	f107 030c 	add.w	r3, r7, #12
 8014920:	4619      	mov	r1, r3
 8014922:	4610      	mov	r0, r2
 8014924:	f7f9 fd14 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014928:	89bb      	ldrh	r3, [r7, #12]
 801492a:	f107 020b 	add.w	r2, r7, #11
 801492e:	4611      	mov	r1, r2
 8014930:	4618      	mov	r0, r3
 8014932:	f7f9 fca3 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014936:	7afb      	ldrb	r3, [r7, #11]
 8014938:	461a      	mov	r2, r3
 801493a:	89bb      	ldrh	r3, [r7, #12]
 801493c:	4413      	add	r3, r2
 801493e:	b29a      	uxth	r2, r3
 8014940:	89fb      	ldrh	r3, [r7, #14]
 8014942:	4413      	add	r3, r2
 8014944:	b29b      	uxth	r3, r3
 8014946:	3301      	adds	r3, #1
 8014948:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 801494a:	2304      	movs	r3, #4
 801494c:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 801494e:	89bb      	ldrh	r3, [r7, #12]
 8014950:	f107 020b 	add.w	r2, r7, #11
 8014954:	4611      	mov	r1, r2
 8014956:	4618      	mov	r0, r3
 8014958:	f7f9 fc90 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 801495c:	7afb      	ldrb	r3, [r7, #11]
 801495e:	461a      	mov	r2, r3
 8014960:	89bb      	ldrh	r3, [r7, #12]
 8014962:	4413      	add	r3, r2
 8014964:	b29a      	uxth	r2, r3
 8014966:	89fb      	ldrh	r3, [r7, #14]
 8014968:	4413      	add	r3, r2
 801496a:	b29b      	uxth	r3, r3
 801496c:	3301      	adds	r3, #1
 801496e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	1d18      	adds	r0, r3, #4
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	4619      	mov	r1, r3
 801497e:	f107 030c 	add.w	r3, r7, #12
 8014982:	461a      	mov	r2, r3
 8014984:	f7f9 fd0e 	bl	800e3a4 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014988:	89bb      	ldrh	r3, [r7, #12]
 801498a:	f107 020b 	add.w	r2, r7, #11
 801498e:	4611      	mov	r1, r2
 8014990:	4618      	mov	r0, r3
 8014992:	f7f9 fc73 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014996:	7afb      	ldrb	r3, [r7, #11]
 8014998:	461a      	mov	r2, r3
 801499a:	89bb      	ldrh	r3, [r7, #12]
 801499c:	4413      	add	r3, r2
 801499e:	b29a      	uxth	r2, r3
 80149a0:	89fb      	ldrh	r3, [r7, #14]
 80149a2:	4413      	add	r3, r2
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	3301      	adds	r3, #1
 80149a8:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	89fa      	ldrh	r2, [r7, #14]
 80149ae:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	8b1b      	ldrh	r3, [r3, #24]
 80149b4:	f107 020b 	add.w	r2, r7, #11
 80149b8:	4611      	mov	r1, r2
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7f9 fc5e 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 80149c0:	7afb      	ldrb	r3, [r7, #11]
 80149c2:	461a      	mov	r2, r3
 80149c4:	89fb      	ldrh	r3, [r7, #14]
 80149c6:	4413      	add	r3, r2
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	3301      	adds	r3, #1
 80149cc:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 80149ce:	4b2d      	ldr	r3, [pc, #180]	@ (8014a84 <snmp_trap_header_sum+0x1e4>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7eb fc02 	bl	80001dc <strlen>
 80149d8:	4603      	mov	r3, r0
 80149da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80149de:	4293      	cmp	r3, r2
 80149e0:	d807      	bhi.n	80149f2 <snmp_trap_header_sum+0x152>
 80149e2:	4b28      	ldr	r3, [pc, #160]	@ (8014a84 <snmp_trap_header_sum+0x1e4>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7eb fbf8 	bl	80001dc <strlen>
 80149ec:	4603      	mov	r3, r0
 80149ee:	b29a      	uxth	r2, r3
 80149f0:	e001      	b.n	80149f6 <snmp_trap_header_sum+0x156>
 80149f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8b5b      	ldrh	r3, [r3, #26]
 80149fe:	f107 020b 	add.w	r2, r7, #11
 8014a02:	4611      	mov	r1, r2
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7f9 fc39 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 8014a0a:	7afb      	ldrb	r3, [r7, #11]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8b5b      	ldrh	r3, [r3, #26]
 8014a12:	4413      	add	r3, r2
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	89fb      	ldrh	r3, [r7, #14]
 8014a18:	4413      	add	r3, r2
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	695b      	ldr	r3, [r3, #20]
 8014a24:	461a      	mov	r2, r3
 8014a26:	f107 030c 	add.w	r3, r7, #12
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	4610      	mov	r0, r2
 8014a2e:	f7f9 fc8f 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014a32:	89bb      	ldrh	r3, [r7, #12]
 8014a34:	f107 020b 	add.w	r2, r7, #11
 8014a38:	4611      	mov	r1, r2
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7f9 fc1e 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014a40:	7afb      	ldrb	r3, [r7, #11]
 8014a42:	461a      	mov	r2, r3
 8014a44:	89bb      	ldrh	r3, [r7, #12]
 8014a46:	4413      	add	r3, r2
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	89fb      	ldrh	r3, [r7, #14]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	3301      	adds	r3, #1
 8014a52:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	89fa      	ldrh	r2, [r7, #14]
 8014a58:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	8b9b      	ldrh	r3, [r3, #28]
 8014a5e:	f107 020b 	add.w	r2, r7, #11
 8014a62:	4611      	mov	r1, r2
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f9 fc09 	bl	800e27c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 8014a6a:	7afb      	ldrb	r3, [r7, #11]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	89fb      	ldrh	r3, [r7, #14]
 8014a70:	4413      	add	r3, r2
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	3301      	adds	r3, #1
 8014a76:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 8014a78:	89fb      	ldrh	r3, [r7, #14]
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3710      	adds	r7, #16
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}
 8014a82:	bf00      	nop
 8014a84:	20000114 	.word	0x20000114

08014a88 <snmp_trap_varbind_enc>:

static void
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 8014a98:	2330      	movs	r3, #48	@ 0x30
 8014a9a:	753b      	strb	r3, [r7, #20]
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	757b      	strb	r3, [r7, #21]
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	75bb      	strb	r3, [r7, #22]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	8bdb      	ldrh	r3, [r3, #30]
 8014aa8:	833b      	strh	r3, [r7, #24]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014aaa:	f107 0314 	add.w	r3, r7, #20
 8014aae:	4619      	mov	r1, r3
 8014ab0:	68b8      	ldr	r0, [r7, #8]
 8014ab2:	f7f9 f9f7 	bl	800dea4 <snmp_ans1_enc_tlv>

  while (varbind != NULL) {
 8014ab6:	e006      	b.n	8014ac6 <snmp_trap_varbind_enc+0x3e>
    snmp_append_outbound_varbind(pbuf_stream, varbind);
 8014ab8:	69f9      	ldr	r1, [r7, #28]
 8014aba:	68b8      	ldr	r0, [r7, #8]
 8014abc:	f7fe fa42 	bl	8012f44 <snmp_append_outbound_varbind>

    varbind = varbind->next;
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1f5      	bne.n	8014ab8 <snmp_trap_varbind_enc+0x30>
  }
}
 8014acc:	bf00      	nop
 8014ace:	bf00      	nop
 8014ad0:	3720      	adds	r7, #32
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
	...

08014ad8 <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static void
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 8014ae2:	2330      	movs	r3, #48	@ 0x30
 8014ae4:	723b      	strb	r3, [r7, #8]
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	727b      	strb	r3, [r7, #9]
 8014aea:	2300      	movs	r3, #0
 8014aec:	72bb      	strb	r3, [r7, #10]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	8b9b      	ldrh	r3, [r3, #28]
 8014af2:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014af4:	f107 0308 	add.w	r3, r7, #8
 8014af8:	4619      	mov	r1, r3
 8014afa:	6838      	ldr	r0, [r7, #0]
 8014afc:	f7f9 f9d2 	bl	800dea4 <snmp_ans1_enc_tlv>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014b00:	2302      	movs	r3, #2
 8014b02:	723b      	strb	r3, [r7, #8]
 8014b04:	2300      	movs	r3, #0
 8014b06:	727b      	strb	r3, [r7, #9]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	72bb      	strb	r3, [r7, #10]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	695b      	ldr	r3, [r3, #20]
 8014b14:	461a      	mov	r2, r3
 8014b16:	f107 0308 	add.w	r3, r7, #8
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	4610      	mov	r0, r2
 8014b20:	f7f9 fc16 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b24:	f107 0308 	add.w	r3, r7, #8
 8014b28:	4619      	mov	r1, r3
 8014b2a:	6838      	ldr	r0, [r7, #0]
 8014b2c:	f7f9 f9ba 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version);
 8014b30:	89b9      	ldrh	r1, [r7, #12]
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	695b      	ldr	r3, [r3, #20]
 8014b36:	461a      	mov	r2, r3
 8014b38:	6838      	ldr	r0, [r7, #0]
 8014b3a:	f7f9 fafe 	bl	800e13a <snmp_asn1_enc_s32t>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 8014b3e:	2304      	movs	r3, #4
 8014b40:	723b      	strb	r3, [r7, #8]
 8014b42:	2300      	movs	r3, #0
 8014b44:	727b      	strb	r3, [r7, #9]
 8014b46:	2300      	movs	r3, #0
 8014b48:	72bb      	strb	r3, [r7, #10]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	8b5b      	ldrh	r3, [r3, #26]
 8014b4e:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b50:	f107 0308 	add.w	r3, r7, #8
 8014b54:	4619      	mov	r1, r3
 8014b56:	6838      	ldr	r0, [r7, #0]
 8014b58:	f7f9 f9a4 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen);
 8014b5c:	4b58      	ldr	r3, [pc, #352]	@ (8014cc0 <snmp_trap_header_enc+0x1e8>)
 8014b5e:	6819      	ldr	r1, [r3, #0]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	8b5b      	ldrh	r3, [r3, #26]
 8014b64:	461a      	mov	r2, r3
 8014b66:	6838      	ldr	r0, [r7, #0]
 8014b68:	f7f9 fa27 	bl	800dfba <snmp_asn1_enc_raw>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 8014b6c:	23a4      	movs	r3, #164	@ 0xa4
 8014b6e:	723b      	strb	r3, [r7, #8]
 8014b70:	2300      	movs	r3, #0
 8014b72:	727b      	strb	r3, [r7, #9]
 8014b74:	2300      	movs	r3, #0
 8014b76:	72bb      	strb	r3, [r7, #10]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8b1b      	ldrh	r3, [r3, #24]
 8014b7c:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014b7e:	f107 0308 	add.w	r3, r7, #8
 8014b82:	4619      	mov	r1, r3
 8014b84:	6838      	ldr	r0, [r7, #0]
 8014b86:	f7f9 f98d 	bl	800dea4 <snmp_ans1_enc_tlv>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 8014b8a:	2306      	movs	r3, #6
 8014b8c:	723b      	strb	r3, [r7, #8]
 8014b8e:	2300      	movs	r3, #0
 8014b90:	727b      	strb	r3, [r7, #9]
 8014b92:	2300      	movs	r3, #0
 8014b94:	72bb      	strb	r3, [r7, #10]
 8014b96:	2300      	movs	r3, #0
 8014b98:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	1d18      	adds	r0, r3, #4
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	f107 0308 	add.w	r3, r7, #8
 8014bac:	3304      	adds	r3, #4
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f7f9 fbf8 	bl	800e3a4 <snmp_asn1_enc_oid_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014bb4:	f107 0308 	add.w	r3, r7, #8
 8014bb8:	4619      	mov	r1, r3
 8014bba:	6838      	ldr	r0, [r7, #0]
 8014bbc:	f7f9 f972 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	1d19      	adds	r1, r3, #4
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	461a      	mov	r2, r3
 8014bce:	6838      	ldr	r0, [r7, #0]
 8014bd0:	f7f9 fae2 	bl	800e198 <snmp_asn1_enc_oid>
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr));
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014bd4:	2340      	movs	r3, #64	@ 0x40
 8014bd6:	723b      	strb	r3, [r7, #8]
 8014bd8:	2300      	movs	r3, #0
 8014bda:	727b      	strb	r3, [r7, #9]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	72bb      	strb	r3, [r7, #10]
 8014be0:	2304      	movs	r3, #4
 8014be2:	81bb      	strh	r3, [r7, #12]
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014be4:	f107 0308 	add.w	r3, r7, #8
 8014be8:	4619      	mov	r1, r3
 8014bea:	6838      	ldr	r0, [r7, #0]
 8014bec:	f7f9 f95a 	bl	800dea4 <snmp_ans1_enc_tlv>
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	2204      	movs	r2, #4
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	6838      	ldr	r0, [r7, #0]
 8014bfa:	f7f9 f9de 	bl	800dfba <snmp_asn1_enc_raw>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014bfe:	2302      	movs	r3, #2
 8014c00:	723b      	strb	r3, [r7, #8]
 8014c02:	2300      	movs	r3, #0
 8014c04:	727b      	strb	r3, [r7, #9]
 8014c06:	2300      	movs	r3, #0
 8014c08:	72bb      	strb	r3, [r7, #10]
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	461a      	mov	r2, r3
 8014c14:	f107 0308 	add.w	r3, r7, #8
 8014c18:	3304      	adds	r3, #4
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	4610      	mov	r0, r2
 8014c1e:	f7f9 fb97 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c22:	f107 0308 	add.w	r3, r7, #8
 8014c26:	4619      	mov	r1, r3
 8014c28:	6838      	ldr	r0, [r7, #0]
 8014c2a:	f7f9 f93b 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap);
 8014c2e:	89b9      	ldrh	r1, [r7, #12]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	461a      	mov	r2, r3
 8014c36:	6838      	ldr	r0, [r7, #0]
 8014c38:	f7f9 fa7f 	bl	800e13a <snmp_asn1_enc_s32t>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014c3c:	2302      	movs	r3, #2
 8014c3e:	723b      	strb	r3, [r7, #8]
 8014c40:	2300      	movs	r3, #0
 8014c42:	727b      	strb	r3, [r7, #9]
 8014c44:	2300      	movs	r3, #0
 8014c46:	72bb      	strb	r3, [r7, #10]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	461a      	mov	r2, r3
 8014c52:	f107 0308 	add.w	r3, r7, #8
 8014c56:	3304      	adds	r3, #4
 8014c58:	4619      	mov	r1, r3
 8014c5a:	4610      	mov	r0, r2
 8014c5c:	f7f9 fb78 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c60:	f107 0308 	add.w	r3, r7, #8
 8014c64:	4619      	mov	r1, r3
 8014c66:	6838      	ldr	r0, [r7, #0]
 8014c68:	f7f9 f91c 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap);
 8014c6c:	89b9      	ldrh	r1, [r7, #12]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	461a      	mov	r2, r3
 8014c74:	6838      	ldr	r0, [r7, #0]
 8014c76:	f7f9 fa60 	bl	800e13a <snmp_asn1_enc_s32t>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 8014c7a:	2343      	movs	r3, #67	@ 0x43
 8014c7c:	723b      	strb	r3, [r7, #8]
 8014c7e:	2300      	movs	r3, #0
 8014c80:	727b      	strb	r3, [r7, #9]
 8014c82:	2300      	movs	r3, #0
 8014c84:	72bb      	strb	r3, [r7, #10]
 8014c86:	2300      	movs	r3, #0
 8014c88:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	691b      	ldr	r3, [r3, #16]
 8014c8e:	461a      	mov	r2, r3
 8014c90:	f107 0308 	add.w	r3, r7, #8
 8014c94:	3304      	adds	r3, #4
 8014c96:	4619      	mov	r1, r3
 8014c98:	4610      	mov	r0, r2
 8014c9a:	f7f9 fb59 	bl	800e350 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014c9e:	f107 0308 	add.w	r3, r7, #8
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	6838      	ldr	r0, [r7, #0]
 8014ca6:	f7f9 f8fd 	bl	800dea4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts);
 8014caa:	89b9      	ldrh	r1, [r7, #12]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	691b      	ldr	r3, [r3, #16]
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	6838      	ldr	r0, [r7, #0]
 8014cb4:	f7f9 fa41 	bl	800e13a <snmp_asn1_enc_s32t>
}
 8014cb8:	bf00      	nop
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	20000114 	.word	0x20000114

08014cc4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	4603      	mov	r3, r0
 8014ccc:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8014cce:	88fb      	ldrh	r3, [r7, #6]
 8014cd0:	ba5b      	rev16	r3, r3
 8014cd2:	b29b      	uxth	r3, r3
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bc80      	pop	{r7}
 8014cdc:	4770      	bx	lr

08014cde <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8014cde:	b480      	push	{r7}
 8014ce0:	b083      	sub	sp, #12
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	061a      	lsls	r2, r3, #24
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	021b      	lsls	r3, r3, #8
 8014cee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014cf2:	431a      	orrs	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	0a1b      	lsrs	r3, r3, #8
 8014cf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014cfc:	431a      	orrs	r2, r3
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	0e1b      	lsrs	r3, r3, #24
 8014d02:	4313      	orrs	r3, r2
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bc80      	pop	{r7}
 8014d0c:	4770      	bx	lr

08014d0e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b086      	sub	sp, #24
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	60f8      	str	r0, [r7, #12]
 8014d16:	60b9      	str	r1, [r7, #8]
 8014d18:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8014d1a:	68b8      	ldr	r0, [r7, #8]
 8014d1c:	f7eb fa5e 	bl	80001dc <strlen>
 8014d20:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d101      	bne.n	8014d2c <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	e022      	b.n	8014d72 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	617b      	str	r3, [r7, #20]
 8014d30:	e012      	b.n	8014d58 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	781a      	ldrb	r2, [r3, #0]
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d109      	bne.n	8014d52 <lwip_strnstr+0x44>
 8014d3e:	693a      	ldr	r2, [r7, #16]
 8014d40:	68b9      	ldr	r1, [r7, #8]
 8014d42:	6978      	ldr	r0, [r7, #20]
 8014d44:	f00d fc8e 	bl	8022664 <strncmp>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d101      	bne.n	8014d52 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	e00f      	b.n	8014d72 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	3301      	adds	r3, #1
 8014d56:	617b      	str	r3, [r7, #20]
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d007      	beq.n	8014d70 <lwip_strnstr+0x62>
 8014d60:	697a      	ldr	r2, [r7, #20]
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	441a      	add	r2, r3
 8014d66:	68f9      	ldr	r1, [r7, #12]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	440b      	add	r3, r1
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d9e0      	bls.n	8014d32 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8014d70:	2300      	movs	r3, #0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3718      	adds	r7, #24
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}

08014d7a <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8014d7a:	b480      	push	{r7}
 8014d7c:	b085      	sub	sp, #20
 8014d7e:	af00      	add	r7, sp, #0
 8014d80:	6078      	str	r0, [r7, #4]
 8014d82:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	1c5a      	adds	r2, r3, #1
 8014d88:	607a      	str	r2, [r7, #4]
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	1c5a      	adds	r2, r3, #1
 8014d92:	603a      	str	r2, [r7, #0]
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8014d98:	7bfa      	ldrb	r2, [r7, #15]
 8014d9a:	7bbb      	ldrb	r3, [r7, #14]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d016      	beq.n	8014dce <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8014da0:	7bfb      	ldrb	r3, [r7, #15]
 8014da2:	f043 0320 	orr.w	r3, r3, #32
 8014da6:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014da8:	7b7b      	ldrb	r3, [r7, #13]
 8014daa:	2b60      	cmp	r3, #96	@ 0x60
 8014dac:	d90c      	bls.n	8014dc8 <lwip_stricmp+0x4e>
 8014dae:	7b7b      	ldrb	r3, [r7, #13]
 8014db0:	2b7a      	cmp	r3, #122	@ 0x7a
 8014db2:	d809      	bhi.n	8014dc8 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8014db4:	7bbb      	ldrb	r3, [r7, #14]
 8014db6:	f043 0320 	orr.w	r3, r3, #32
 8014dba:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8014dbc:	7b7a      	ldrb	r2, [r7, #13]
 8014dbe:	7b3b      	ldrb	r3, [r7, #12]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d003      	beq.n	8014dcc <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e006      	b.n	8014dd6 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e004      	b.n	8014dd6 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014dcc:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8014dce:	7bfb      	ldrb	r3, [r7, #15]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1d7      	bne.n	8014d84 <lwip_stricmp+0xa>
  return 0;
 8014dd4:	2300      	movs	r3, #0
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3714      	adds	r7, #20
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bc80      	pop	{r7}
 8014dde:	4770      	bx	lr

08014de0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014de6:	2300      	movs	r3, #0
 8014de8:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8014dea:	f001 fda9 	bl	8016940 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8014dee:	f000 f8a7 	bl	8014f40 <mem_init>
  memp_init();
 8014df2:	f000 fba5 	bl	8015540 <memp_init>
  pbuf_init();
  netif_init();
 8014df6:	f000 fc8b 	bl	8015710 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014dfa:	f007 fa17 	bl	801c22c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014dfe:	f001 fda5 	bl	801694c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8014e02:	f007 f8f5 	bl	801bff0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014e06:	bf00      	nop
 8014e08:	3708      	adds	r7, #8
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
	...

08014e10 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014e18:	4b40      	ldr	r3, [pc, #256]	@ (8014f1c <plug_holes+0x10c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	687a      	ldr	r2, [r7, #4]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d206      	bcs.n	8014e30 <plug_holes+0x20>
 8014e22:	4b3f      	ldr	r3, [pc, #252]	@ (8014f20 <plug_holes+0x110>)
 8014e24:	f240 125d 	movw	r2, #349	@ 0x15d
 8014e28:	493e      	ldr	r1, [pc, #248]	@ (8014f24 <plug_holes+0x114>)
 8014e2a:	483f      	ldr	r0, [pc, #252]	@ (8014f28 <plug_holes+0x118>)
 8014e2c:	f00d fa0e 	bl	802224c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014e30:	4b3e      	ldr	r3, [pc, #248]	@ (8014f2c <plug_holes+0x11c>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d306      	bcc.n	8014e48 <plug_holes+0x38>
 8014e3a:	4b39      	ldr	r3, [pc, #228]	@ (8014f20 <plug_holes+0x110>)
 8014e3c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014e40:	493b      	ldr	r1, [pc, #236]	@ (8014f30 <plug_holes+0x120>)
 8014e42:	4839      	ldr	r0, [pc, #228]	@ (8014f28 <plug_holes+0x118>)
 8014e44:	f00d fa02 	bl	802224c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	791b      	ldrb	r3, [r3, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d006      	beq.n	8014e5e <plug_holes+0x4e>
 8014e50:	4b33      	ldr	r3, [pc, #204]	@ (8014f20 <plug_holes+0x110>)
 8014e52:	f240 125f 	movw	r2, #351	@ 0x15f
 8014e56:	4937      	ldr	r1, [pc, #220]	@ (8014f34 <plug_holes+0x124>)
 8014e58:	4833      	ldr	r0, [pc, #204]	@ (8014f28 <plug_holes+0x118>)
 8014e5a:	f00d f9f7 	bl	802224c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	881b      	ldrh	r3, [r3, #0]
 8014e62:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014e66:	d906      	bls.n	8014e76 <plug_holes+0x66>
 8014e68:	4b2d      	ldr	r3, [pc, #180]	@ (8014f20 <plug_holes+0x110>)
 8014e6a:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8014e6e:	4932      	ldr	r1, [pc, #200]	@ (8014f38 <plug_holes+0x128>)
 8014e70:	482d      	ldr	r0, [pc, #180]	@ (8014f28 <plug_holes+0x118>)
 8014e72:	f00d f9eb 	bl	802224c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8014e76:	4b29      	ldr	r3, [pc, #164]	@ (8014f1c <plug_holes+0x10c>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	8812      	ldrh	r2, [r2, #0]
 8014e7e:	4413      	add	r3, r2
 8014e80:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d01f      	beq.n	8014eca <plug_holes+0xba>
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	791b      	ldrb	r3, [r3, #4]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d11b      	bne.n	8014eca <plug_holes+0xba>
 8014e92:	4b26      	ldr	r3, [pc, #152]	@ (8014f2c <plug_holes+0x11c>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	68fa      	ldr	r2, [r7, #12]
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d016      	beq.n	8014eca <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014e9c:	4b27      	ldr	r3, [pc, #156]	@ (8014f3c <plug_holes+0x12c>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68fa      	ldr	r2, [r7, #12]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d102      	bne.n	8014eac <plug_holes+0x9c>
      lfree = mem;
 8014ea6:	4a25      	ldr	r2, [pc, #148]	@ (8014f3c <plug_holes+0x12c>)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	881a      	ldrh	r2, [r3, #0]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8014eb4:	4b19      	ldr	r3, [pc, #100]	@ (8014f1c <plug_holes+0x10c>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	1ad1      	subs	r1, r2, r3
 8014ebc:	4b17      	ldr	r3, [pc, #92]	@ (8014f1c <plug_holes+0x10c>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	68fa      	ldr	r2, [r7, #12]
 8014ec2:	8812      	ldrh	r2, [r2, #0]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	b28a      	uxth	r2, r1
 8014ec8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8014eca:	4b14      	ldr	r3, [pc, #80]	@ (8014f1c <plug_holes+0x10c>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	8852      	ldrh	r2, [r2, #2]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d01a      	beq.n	8014f14 <plug_holes+0x104>
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	791b      	ldrb	r3, [r3, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d116      	bne.n	8014f14 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014ee6:	4b15      	ldr	r3, [pc, #84]	@ (8014f3c <plug_holes+0x12c>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d102      	bne.n	8014ef6 <plug_holes+0xe6>
      lfree = pmem;
 8014ef0:	4a12      	ldr	r2, [pc, #72]	@ (8014f3c <plug_holes+0x12c>)
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	881a      	ldrh	r2, [r3, #0]
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8014efe:	4b07      	ldr	r3, [pc, #28]	@ (8014f1c <plug_holes+0x10c>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	68ba      	ldr	r2, [r7, #8]
 8014f04:	1ad1      	subs	r1, r2, r3
 8014f06:	4b05      	ldr	r3, [pc, #20]	@ (8014f1c <plug_holes+0x10c>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	687a      	ldr	r2, [r7, #4]
 8014f0c:	8812      	ldrh	r2, [r2, #0]
 8014f0e:	4413      	add	r3, r2
 8014f10:	b28a      	uxth	r2, r1
 8014f12:	805a      	strh	r2, [r3, #2]
  }
}
 8014f14:	bf00      	nop
 8014f16:	3710      	adds	r7, #16
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	20008c70 	.word	0x20008c70
 8014f20:	08025db4 	.word	0x08025db4
 8014f24:	08025de4 	.word	0x08025de4
 8014f28:	08025dfc 	.word	0x08025dfc
 8014f2c:	20008c74 	.word	0x20008c74
 8014f30:	08025e24 	.word	0x08025e24
 8014f34:	08025e40 	.word	0x08025e40
 8014f38:	08025e5c 	.word	0x08025e5c
 8014f3c:	20008c78 	.word	0x20008c78

08014f40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014f46:	4b1b      	ldr	r3, [pc, #108]	@ (8014fb4 <mem_init+0x74>)
 8014f48:	3303      	adds	r3, #3
 8014f4a:	f023 0303 	bic.w	r3, r3, #3
 8014f4e:	461a      	mov	r2, r3
 8014f50:	4b19      	ldr	r3, [pc, #100]	@ (8014fb8 <mem_init+0x78>)
 8014f52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014f54:	4b18      	ldr	r3, [pc, #96]	@ (8014fb8 <mem_init+0x78>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8014f6e:	4b12      	ldr	r3, [pc, #72]	@ (8014fb8 <mem_init+0x78>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8014f76:	4a11      	ldr	r2, [pc, #68]	@ (8014fbc <mem_init+0x7c>)
 8014f78:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014f7a:	4b10      	ldr	r3, [pc, #64]	@ (8014fbc <mem_init+0x7c>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014f82:	4b0e      	ldr	r3, [pc, #56]	@ (8014fbc <mem_init+0x7c>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f8a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8014fbc <mem_init+0x7c>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014f94:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014f96:	4b08      	ldr	r3, [pc, #32]	@ (8014fb8 <mem_init+0x78>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	4a09      	ldr	r2, [pc, #36]	@ (8014fc0 <mem_init+0x80>)
 8014f9c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8014f9e:	4b09      	ldr	r3, [pc, #36]	@ (8014fc4 <mem_init+0x84>)
 8014fa0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014fa4:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014fa8:	bf00      	nop
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bc80      	pop	{r7}
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	2000861c 	.word	0x2000861c
 8014fb8:	20008c70 	.word	0x20008c70
 8014fbc:	20008c74 	.word	0x20008c74
 8014fc0:	20008c78 	.word	0x20008c78
 8014fc4:	2000bbec 	.word	0x2000bbec

08014fc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d05d      	beq.n	8015092 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f003 0303 	and.w	r3, r3, #3
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d006      	beq.n	8014fee <mem_free+0x26>
 8014fe0:	4b2e      	ldr	r3, [pc, #184]	@ (801509c <mem_free+0xd4>)
 8014fe2:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8014fe6:	492e      	ldr	r1, [pc, #184]	@ (80150a0 <mem_free+0xd8>)
 8014fe8:	482e      	ldr	r0, [pc, #184]	@ (80150a4 <mem_free+0xdc>)
 8014fea:	f00d f92f 	bl	802224c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014fee:	4b2e      	ldr	r3, [pc, #184]	@ (80150a8 <mem_free+0xe0>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d304      	bcc.n	8015002 <mem_free+0x3a>
 8014ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80150ac <mem_free+0xe4>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d306      	bcc.n	8015010 <mem_free+0x48>
 8015002:	4b26      	ldr	r3, [pc, #152]	@ (801509c <mem_free+0xd4>)
 8015004:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8015008:	4929      	ldr	r1, [pc, #164]	@ (80150b0 <mem_free+0xe8>)
 801500a:	4826      	ldr	r0, [pc, #152]	@ (80150a4 <mem_free+0xdc>)
 801500c:	f00d f91e 	bl	802224c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015010:	4b25      	ldr	r3, [pc, #148]	@ (80150a8 <mem_free+0xe0>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	429a      	cmp	r2, r3
 8015018:	d304      	bcc.n	8015024 <mem_free+0x5c>
 801501a:	4b24      	ldr	r3, [pc, #144]	@ (80150ac <mem_free+0xe4>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	429a      	cmp	r2, r3
 8015022:	d308      	bcc.n	8015036 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8015024:	4b23      	ldr	r3, [pc, #140]	@ (80150b4 <mem_free+0xec>)
 8015026:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801502a:	3301      	adds	r3, #1
 801502c:	b29a      	uxth	r2, r3
 801502e:	4b21      	ldr	r3, [pc, #132]	@ (80150b4 <mem_free+0xec>)
 8015030:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8015034:	e02e      	b.n	8015094 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	3b08      	subs	r3, #8
 801503a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	791b      	ldrb	r3, [r3, #4]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d106      	bne.n	8015052 <mem_free+0x8a>
 8015044:	4b15      	ldr	r3, [pc, #84]	@ (801509c <mem_free+0xd4>)
 8015046:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 801504a:	491b      	ldr	r1, [pc, #108]	@ (80150b8 <mem_free+0xf0>)
 801504c:	4815      	ldr	r0, [pc, #84]	@ (80150a4 <mem_free+0xdc>)
 801504e:	f00d f8fd 	bl	802224c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2200      	movs	r2, #0
 8015056:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015058:	4b18      	ldr	r3, [pc, #96]	@ (80150bc <mem_free+0xf4>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	68fa      	ldr	r2, [r7, #12]
 801505e:	429a      	cmp	r2, r3
 8015060:	d202      	bcs.n	8015068 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015062:	4a16      	ldr	r2, [pc, #88]	@ (80150bc <mem_free+0xf4>)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8015068:	4b12      	ldr	r3, [pc, #72]	@ (80150b4 <mem_free+0xec>)
 801506a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801506e:	4b0e      	ldr	r3, [pc, #56]	@ (80150a8 <mem_free+0xe0>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	68f9      	ldr	r1, [r7, #12]
 8015074:	1acb      	subs	r3, r1, r3
 8015076:	b299      	uxth	r1, r3
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	881b      	ldrh	r3, [r3, #0]
 801507c:	1acb      	subs	r3, r1, r3
 801507e:	b29b      	uxth	r3, r3
 8015080:	4413      	add	r3, r2
 8015082:	b29a      	uxth	r2, r3
 8015084:	4b0b      	ldr	r3, [pc, #44]	@ (80150b4 <mem_free+0xec>)
 8015086:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801508a:	68f8      	ldr	r0, [r7, #12]
 801508c:	f7ff fec0 	bl	8014e10 <plug_holes>
 8015090:	e000      	b.n	8015094 <mem_free+0xcc>
    return;
 8015092:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	08025db4 	.word	0x08025db4
 80150a0:	08025e88 	.word	0x08025e88
 80150a4:	08025dfc 	.word	0x08025dfc
 80150a8:	20008c70 	.word	0x20008c70
 80150ac:	20008c74 	.word	0x20008c74
 80150b0:	08025eac 	.word	0x08025eac
 80150b4:	2000bbec 	.word	0x2000bbec
 80150b8:	08025ec4 	.word	0x08025ec4
 80150bc:	20008c78 	.word	0x20008c78

080150c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b086      	sub	sp, #24
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	460b      	mov	r3, r1
 80150ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80150cc:	887b      	ldrh	r3, [r7, #2]
 80150ce:	3303      	adds	r3, #3
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	f023 0303 	bic.w	r3, r3, #3
 80150d6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80150d8:	887b      	ldrh	r3, [r7, #2]
 80150da:	2b0b      	cmp	r3, #11
 80150dc:	d801      	bhi.n	80150e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80150de:	230c      	movs	r3, #12
 80150e0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80150e2:	887b      	ldrh	r3, [r7, #2]
 80150e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80150e8:	d901      	bls.n	80150ee <mem_trim+0x2e>
    return NULL;
 80150ea:	2300      	movs	r3, #0
 80150ec:	e0d1      	b.n	8015292 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80150ee:	4b6b      	ldr	r3, [pc, #428]	@ (801529c <mem_trim+0x1dc>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d304      	bcc.n	8015102 <mem_trim+0x42>
 80150f8:	4b69      	ldr	r3, [pc, #420]	@ (80152a0 <mem_trim+0x1e0>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d306      	bcc.n	8015110 <mem_trim+0x50>
 8015102:	4b68      	ldr	r3, [pc, #416]	@ (80152a4 <mem_trim+0x1e4>)
 8015104:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8015108:	4967      	ldr	r1, [pc, #412]	@ (80152a8 <mem_trim+0x1e8>)
 801510a:	4868      	ldr	r0, [pc, #416]	@ (80152ac <mem_trim+0x1ec>)
 801510c:	f00d f89e 	bl	802224c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015110:	4b62      	ldr	r3, [pc, #392]	@ (801529c <mem_trim+0x1dc>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	429a      	cmp	r2, r3
 8015118:	d304      	bcc.n	8015124 <mem_trim+0x64>
 801511a:	4b61      	ldr	r3, [pc, #388]	@ (80152a0 <mem_trim+0x1e0>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	429a      	cmp	r2, r3
 8015122:	d309      	bcc.n	8015138 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8015124:	4b62      	ldr	r3, [pc, #392]	@ (80152b0 <mem_trim+0x1f0>)
 8015126:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801512a:	3301      	adds	r3, #1
 801512c:	b29a      	uxth	r2, r3
 801512e:	4b60      	ldr	r3, [pc, #384]	@ (80152b0 <mem_trim+0x1f0>)
 8015130:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	e0ac      	b.n	8015292 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	3b08      	subs	r3, #8
 801513c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801513e:	4b57      	ldr	r3, [pc, #348]	@ (801529c <mem_trim+0x1dc>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	697a      	ldr	r2, [r7, #20]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	881a      	ldrh	r2, [r3, #0]
 801514c:	8a7b      	ldrh	r3, [r7, #18]
 801514e:	1ad3      	subs	r3, r2, r3
 8015150:	b29b      	uxth	r3, r3
 8015152:	3b08      	subs	r3, #8
 8015154:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015156:	887a      	ldrh	r2, [r7, #2]
 8015158:	8a3b      	ldrh	r3, [r7, #16]
 801515a:	429a      	cmp	r2, r3
 801515c:	d906      	bls.n	801516c <mem_trim+0xac>
 801515e:	4b51      	ldr	r3, [pc, #324]	@ (80152a4 <mem_trim+0x1e4>)
 8015160:	f240 2206 	movw	r2, #518	@ 0x206
 8015164:	4953      	ldr	r1, [pc, #332]	@ (80152b4 <mem_trim+0x1f4>)
 8015166:	4851      	ldr	r0, [pc, #324]	@ (80152ac <mem_trim+0x1ec>)
 8015168:	f00d f870 	bl	802224c <iprintf>
  if (newsize > size) {
 801516c:	887a      	ldrh	r2, [r7, #2]
 801516e:	8a3b      	ldrh	r3, [r7, #16]
 8015170:	429a      	cmp	r2, r3
 8015172:	d901      	bls.n	8015178 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8015174:	2300      	movs	r3, #0
 8015176:	e08c      	b.n	8015292 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8015178:	887a      	ldrh	r2, [r7, #2]
 801517a:	8a3b      	ldrh	r3, [r7, #16]
 801517c:	429a      	cmp	r2, r3
 801517e:	d101      	bne.n	8015184 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	e086      	b.n	8015292 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8015184:	4b45      	ldr	r3, [pc, #276]	@ (801529c <mem_trim+0x1dc>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	697a      	ldr	r2, [r7, #20]
 801518a:	8812      	ldrh	r2, [r2, #0]
 801518c:	4413      	add	r3, r2
 801518e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	791b      	ldrb	r3, [r3, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d13d      	bne.n	8015214 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801519e:	8a7a      	ldrh	r2, [r7, #18]
 80151a0:	887b      	ldrh	r3, [r7, #2]
 80151a2:	4413      	add	r3, r2
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	3308      	adds	r3, #8
 80151a8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80151aa:	4b43      	ldr	r3, [pc, #268]	@ (80152b8 <mem_trim+0x1f8>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d105      	bne.n	80151c0 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80151b4:	4b39      	ldr	r3, [pc, #228]	@ (801529c <mem_trim+0x1dc>)
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	897b      	ldrh	r3, [r7, #10]
 80151ba:	4413      	add	r3, r2
 80151bc:	4a3e      	ldr	r2, [pc, #248]	@ (80152b8 <mem_trim+0x1f8>)
 80151be:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80151c0:	4b36      	ldr	r3, [pc, #216]	@ (801529c <mem_trim+0x1dc>)
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	897b      	ldrh	r3, [r7, #10]
 80151c6:	4413      	add	r3, r2
 80151c8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2200      	movs	r2, #0
 80151ce:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	893a      	ldrh	r2, [r7, #8]
 80151d4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	8a7a      	ldrh	r2, [r7, #18]
 80151da:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	897a      	ldrh	r2, [r7, #10]
 80151e0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	881b      	ldrh	r3, [r3, #0]
 80151e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80151ea:	d006      	beq.n	80151fa <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80151ec:	4b2b      	ldr	r3, [pc, #172]	@ (801529c <mem_trim+0x1dc>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	8812      	ldrh	r2, [r2, #0]
 80151f4:	4413      	add	r3, r2
 80151f6:	897a      	ldrh	r2, [r7, #10]
 80151f8:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80151fa:	4b2d      	ldr	r3, [pc, #180]	@ (80152b0 <mem_trim+0x1f0>)
 80151fc:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8015200:	8879      	ldrh	r1, [r7, #2]
 8015202:	8a3b      	ldrh	r3, [r7, #16]
 8015204:	1acb      	subs	r3, r1, r3
 8015206:	b29b      	uxth	r3, r3
 8015208:	4413      	add	r3, r2
 801520a:	b29a      	uxth	r2, r3
 801520c:	4b28      	ldr	r3, [pc, #160]	@ (80152b0 <mem_trim+0x1f0>)
 801520e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8015212:	e03d      	b.n	8015290 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015214:	887b      	ldrh	r3, [r7, #2]
 8015216:	f103 0214 	add.w	r2, r3, #20
 801521a:	8a3b      	ldrh	r3, [r7, #16]
 801521c:	429a      	cmp	r2, r3
 801521e:	d837      	bhi.n	8015290 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8015220:	8a7a      	ldrh	r2, [r7, #18]
 8015222:	887b      	ldrh	r3, [r7, #2]
 8015224:	4413      	add	r3, r2
 8015226:	b29b      	uxth	r3, r3
 8015228:	3308      	adds	r3, #8
 801522a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801522c:	4b1b      	ldr	r3, [pc, #108]	@ (801529c <mem_trim+0x1dc>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	897b      	ldrh	r3, [r7, #10]
 8015232:	4413      	add	r3, r2
 8015234:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8015236:	4b20      	ldr	r3, [pc, #128]	@ (80152b8 <mem_trim+0x1f8>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	68fa      	ldr	r2, [r7, #12]
 801523c:	429a      	cmp	r2, r3
 801523e:	d202      	bcs.n	8015246 <mem_trim+0x186>
      lfree = mem2;
 8015240:	4a1d      	ldr	r2, [pc, #116]	@ (80152b8 <mem_trim+0x1f8>)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2200      	movs	r2, #0
 801524a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	881a      	ldrh	r2, [r3, #0]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	8a7a      	ldrh	r2, [r7, #18]
 8015258:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801525a:	697b      	ldr	r3, [r7, #20]
 801525c:	897a      	ldrh	r2, [r7, #10]
 801525e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	881b      	ldrh	r3, [r3, #0]
 8015264:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015268:	d006      	beq.n	8015278 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801526a:	4b0c      	ldr	r3, [pc, #48]	@ (801529c <mem_trim+0x1dc>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	68fa      	ldr	r2, [r7, #12]
 8015270:	8812      	ldrh	r2, [r2, #0]
 8015272:	4413      	add	r3, r2
 8015274:	897a      	ldrh	r2, [r7, #10]
 8015276:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8015278:	4b0d      	ldr	r3, [pc, #52]	@ (80152b0 <mem_trim+0x1f0>)
 801527a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801527e:	8879      	ldrh	r1, [r7, #2]
 8015280:	8a3b      	ldrh	r3, [r7, #16]
 8015282:	1acb      	subs	r3, r1, r3
 8015284:	b29b      	uxth	r3, r3
 8015286:	4413      	add	r3, r2
 8015288:	b29a      	uxth	r2, r3
 801528a:	4b09      	ldr	r3, [pc, #36]	@ (80152b0 <mem_trim+0x1f0>)
 801528c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015290:	687b      	ldr	r3, [r7, #4]
}
 8015292:	4618      	mov	r0, r3
 8015294:	3718      	adds	r7, #24
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	20008c70 	.word	0x20008c70
 80152a0:	20008c74 	.word	0x20008c74
 80152a4:	08025db4 	.word	0x08025db4
 80152a8:	08025ed8 	.word	0x08025ed8
 80152ac:	08025dfc 	.word	0x08025dfc
 80152b0:	2000bbec 	.word	0x2000bbec
 80152b4:	08025ef0 	.word	0x08025ef0
 80152b8:	20008c78 	.word	0x20008c78

080152bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b088      	sub	sp, #32
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80152c6:	88fb      	ldrh	r3, [r7, #6]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d101      	bne.n	80152d0 <mem_malloc+0x14>
    return NULL;
 80152cc:	2300      	movs	r3, #0
 80152ce:	e0eb      	b.n	80154a8 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80152d0:	88fb      	ldrh	r3, [r7, #6]
 80152d2:	3303      	adds	r3, #3
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	f023 0303 	bic.w	r3, r3, #3
 80152da:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80152dc:	88fb      	ldrh	r3, [r7, #6]
 80152de:	2b0b      	cmp	r3, #11
 80152e0:	d801      	bhi.n	80152e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80152e2:	230c      	movs	r3, #12
 80152e4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80152e6:	88fb      	ldrh	r3, [r7, #6]
 80152e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80152ec:	d901      	bls.n	80152f2 <mem_malloc+0x36>
    return NULL;
 80152ee:	2300      	movs	r3, #0
 80152f0:	e0da      	b.n	80154a8 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80152f2:	4b6f      	ldr	r3, [pc, #444]	@ (80154b0 <mem_malloc+0x1f4>)
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	4b6f      	ldr	r3, [pc, #444]	@ (80154b4 <mem_malloc+0x1f8>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	83fb      	strh	r3, [r7, #30]
 80152fe:	e0c3      	b.n	8015488 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8015300:	4b6c      	ldr	r3, [pc, #432]	@ (80154b4 <mem_malloc+0x1f8>)
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	8bfb      	ldrh	r3, [r7, #30]
 8015306:	4413      	add	r3, r2
 8015308:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	791b      	ldrb	r3, [r3, #4]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f040 80b4 	bne.w	801547c <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	881b      	ldrh	r3, [r3, #0]
 8015318:	461a      	mov	r2, r3
 801531a:	8bfb      	ldrh	r3, [r7, #30]
 801531c:	1ad3      	subs	r3, r2, r3
 801531e:	f1a3 0208 	sub.w	r2, r3, #8
 8015322:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8015324:	429a      	cmp	r2, r3
 8015326:	f0c0 80a9 	bcc.w	801547c <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	461a      	mov	r2, r3
 8015330:	8bfb      	ldrh	r3, [r7, #30]
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	f1a3 0208 	sub.w	r2, r3, #8
 8015338:	88fb      	ldrh	r3, [r7, #6]
 801533a:	3314      	adds	r3, #20
 801533c:	429a      	cmp	r2, r3
 801533e:	d332      	bcc.n	80153a6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8015340:	8bfa      	ldrh	r2, [r7, #30]
 8015342:	88fb      	ldrh	r3, [r7, #6]
 8015344:	4413      	add	r3, r2
 8015346:	b29b      	uxth	r3, r3
 8015348:	3308      	adds	r3, #8
 801534a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801534c:	4b59      	ldr	r3, [pc, #356]	@ (80154b4 <mem_malloc+0x1f8>)
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	8a7b      	ldrh	r3, [r7, #18]
 8015352:	4413      	add	r3, r2
 8015354:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2200      	movs	r2, #0
 801535a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	881a      	ldrh	r2, [r3, #0]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8bfa      	ldrh	r2, [r7, #30]
 8015368:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	8a7a      	ldrh	r2, [r7, #18]
 801536e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2201      	movs	r2, #1
 8015374:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801537e:	d006      	beq.n	801538e <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8015380:	4b4c      	ldr	r3, [pc, #304]	@ (80154b4 <mem_malloc+0x1f8>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	68fa      	ldr	r2, [r7, #12]
 8015386:	8812      	ldrh	r2, [r2, #0]
 8015388:	4413      	add	r3, r2
 801538a:	8a7a      	ldrh	r2, [r7, #18]
 801538c:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 801538e:	4b4a      	ldr	r3, [pc, #296]	@ (80154b8 <mem_malloc+0x1fc>)
 8015390:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8015394:	88fb      	ldrh	r3, [r7, #6]
 8015396:	4413      	add	r3, r2
 8015398:	b29b      	uxth	r3, r3
 801539a:	3308      	adds	r3, #8
 801539c:	b29a      	uxth	r2, r3
 801539e:	4b46      	ldr	r3, [pc, #280]	@ (80154b8 <mem_malloc+0x1fc>)
 80153a0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80153a4:	e013      	b.n	80153ce <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	2201      	movs	r2, #1
 80153aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 80153ac:	4b42      	ldr	r3, [pc, #264]	@ (80154b8 <mem_malloc+0x1fc>)
 80153ae:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	8819      	ldrh	r1, [r3, #0]
 80153b6:	4b3f      	ldr	r3, [pc, #252]	@ (80154b4 <mem_malloc+0x1f8>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	6978      	ldr	r0, [r7, #20]
 80153bc:	1ac3      	subs	r3, r0, r3
 80153be:	b29b      	uxth	r3, r3
 80153c0:	1acb      	subs	r3, r1, r3
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	4413      	add	r3, r2
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	4b3b      	ldr	r3, [pc, #236]	@ (80154b8 <mem_malloc+0x1fc>)
 80153ca:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80153ce:	4b38      	ldr	r3, [pc, #224]	@ (80154b0 <mem_malloc+0x1f4>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	697a      	ldr	r2, [r7, #20]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d127      	bne.n	8015428 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 80153d8:	4b35      	ldr	r3, [pc, #212]	@ (80154b0 <mem_malloc+0x1f4>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80153de:	e005      	b.n	80153ec <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80153e0:	4b34      	ldr	r3, [pc, #208]	@ (80154b4 <mem_malloc+0x1f8>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	69ba      	ldr	r2, [r7, #24]
 80153e6:	8812      	ldrh	r2, [r2, #0]
 80153e8:	4413      	add	r3, r2
 80153ea:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80153ec:	69bb      	ldr	r3, [r7, #24]
 80153ee:	791b      	ldrb	r3, [r3, #4]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d004      	beq.n	80153fe <mem_malloc+0x142>
 80153f4:	4b31      	ldr	r3, [pc, #196]	@ (80154bc <mem_malloc+0x200>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	69ba      	ldr	r2, [r7, #24]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d1f0      	bne.n	80153e0 <mem_malloc+0x124>
          }
          lfree = cur;
 80153fe:	4a2c      	ldr	r2, [pc, #176]	@ (80154b0 <mem_malloc+0x1f4>)
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015404:	4b2a      	ldr	r3, [pc, #168]	@ (80154b0 <mem_malloc+0x1f4>)
 8015406:	681a      	ldr	r2, [r3, #0]
 8015408:	4b2c      	ldr	r3, [pc, #176]	@ (80154bc <mem_malloc+0x200>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	429a      	cmp	r2, r3
 801540e:	d00b      	beq.n	8015428 <mem_malloc+0x16c>
 8015410:	4b27      	ldr	r3, [pc, #156]	@ (80154b0 <mem_malloc+0x1f4>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	791b      	ldrb	r3, [r3, #4]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d006      	beq.n	8015428 <mem_malloc+0x16c>
 801541a:	4b29      	ldr	r3, [pc, #164]	@ (80154c0 <mem_malloc+0x204>)
 801541c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015420:	4928      	ldr	r1, [pc, #160]	@ (80154c4 <mem_malloc+0x208>)
 8015422:	4829      	ldr	r0, [pc, #164]	@ (80154c8 <mem_malloc+0x20c>)
 8015424:	f00c ff12 	bl	802224c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015428:	88fa      	ldrh	r2, [r7, #6]
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	4413      	add	r3, r2
 801542e:	3308      	adds	r3, #8
 8015430:	4a22      	ldr	r2, [pc, #136]	@ (80154bc <mem_malloc+0x200>)
 8015432:	6812      	ldr	r2, [r2, #0]
 8015434:	4293      	cmp	r3, r2
 8015436:	d906      	bls.n	8015446 <mem_malloc+0x18a>
 8015438:	4b21      	ldr	r3, [pc, #132]	@ (80154c0 <mem_malloc+0x204>)
 801543a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801543e:	4923      	ldr	r1, [pc, #140]	@ (80154cc <mem_malloc+0x210>)
 8015440:	4821      	ldr	r0, [pc, #132]	@ (80154c8 <mem_malloc+0x20c>)
 8015442:	f00c ff03 	bl	802224c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	f003 0303 	and.w	r3, r3, #3
 801544c:	2b00      	cmp	r3, #0
 801544e:	d006      	beq.n	801545e <mem_malloc+0x1a2>
 8015450:	4b1b      	ldr	r3, [pc, #108]	@ (80154c0 <mem_malloc+0x204>)
 8015452:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015456:	491e      	ldr	r1, [pc, #120]	@ (80154d0 <mem_malloc+0x214>)
 8015458:	481b      	ldr	r0, [pc, #108]	@ (80154c8 <mem_malloc+0x20c>)
 801545a:	f00c fef7 	bl	802224c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	f003 0303 	and.w	r3, r3, #3
 8015464:	2b00      	cmp	r3, #0
 8015466:	d006      	beq.n	8015476 <mem_malloc+0x1ba>
 8015468:	4b15      	ldr	r3, [pc, #84]	@ (80154c0 <mem_malloc+0x204>)
 801546a:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801546e:	4919      	ldr	r1, [pc, #100]	@ (80154d4 <mem_malloc+0x218>)
 8015470:	4815      	ldr	r0, [pc, #84]	@ (80154c8 <mem_malloc+0x20c>)
 8015472:	f00c feeb 	bl	802224c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	3308      	adds	r3, #8
 801547a:	e015      	b.n	80154a8 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801547c:	4b0d      	ldr	r3, [pc, #52]	@ (80154b4 <mem_malloc+0x1f8>)
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	8bfb      	ldrh	r3, [r7, #30]
 8015482:	4413      	add	r3, r2
 8015484:	881b      	ldrh	r3, [r3, #0]
 8015486:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8015488:	8bfa      	ldrh	r2, [r7, #30]
 801548a:	88fb      	ldrh	r3, [r7, #6]
 801548c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8015490:	429a      	cmp	r2, r3
 8015492:	f4ff af35 	bcc.w	8015300 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8015496:	4b08      	ldr	r3, [pc, #32]	@ (80154b8 <mem_malloc+0x1fc>)
 8015498:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 801549c:	3301      	adds	r3, #1
 801549e:	b29a      	uxth	r2, r3
 80154a0:	4b05      	ldr	r3, [pc, #20]	@ (80154b8 <mem_malloc+0x1fc>)
 80154a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80154a6:	2300      	movs	r3, #0
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3720      	adds	r7, #32
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	20008c78 	.word	0x20008c78
 80154b4:	20008c70 	.word	0x20008c70
 80154b8:	2000bbec 	.word	0x2000bbec
 80154bc:	20008c74 	.word	0x20008c74
 80154c0:	08025db4 	.word	0x08025db4
 80154c4:	08025f10 	.word	0x08025f10
 80154c8:	08025dfc 	.word	0x08025dfc
 80154cc:	08025f2c 	.word	0x08025f2c
 80154d0:	08025f5c 	.word	0x08025f5c
 80154d4:	08025f8c 	.word	0x08025f8c

080154d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80154d8:	b480      	push	{r7}
 80154da:	b085      	sub	sp, #20
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	2200      	movs	r2, #0
 80154e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	689b      	ldr	r3, [r3, #8]
 80154ec:	3303      	adds	r3, #3
 80154ee:	f023 0303 	bic.w	r3, r3, #3
 80154f2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80154f4:	2300      	movs	r3, #0
 80154f6:	60fb      	str	r3, [r7, #12]
 80154f8:	e011      	b.n	801551e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	68db      	ldr	r3, [r3, #12]
 80154fe:	681a      	ldr	r2, [r3, #0]
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	68ba      	ldr	r2, [r7, #8]
 801550a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	889b      	ldrh	r3, [r3, #4]
 8015510:	461a      	mov	r2, r3
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	4413      	add	r3, r2
 8015516:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	3301      	adds	r3, #1
 801551c:	60fb      	str	r3, [r7, #12]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	88db      	ldrh	r3, [r3, #6]
 8015522:	461a      	mov	r2, r3
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	4293      	cmp	r3, r2
 8015528:	dbe7      	blt.n	80154fa <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	88d2      	ldrh	r2, [r2, #6]
 8015532:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015534:	bf00      	nop
 8015536:	3714      	adds	r7, #20
 8015538:	46bd      	mov	sp, r7
 801553a:	bc80      	pop	{r7}
 801553c:	4770      	bx	lr
	...

08015540 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015546:	2300      	movs	r3, #0
 8015548:	80fb      	strh	r3, [r7, #6]
 801554a:	e014      	b.n	8015576 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 801554c:	88fb      	ldrh	r3, [r7, #6]
 801554e:	4a0e      	ldr	r2, [pc, #56]	@ (8015588 <memp_init+0x48>)
 8015550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff ffbf 	bl	80154d8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 801555a:	88fb      	ldrh	r3, [r7, #6]
 801555c:	4a0a      	ldr	r2, [pc, #40]	@ (8015588 <memp_init+0x48>)
 801555e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015562:	88fb      	ldrh	r3, [r7, #6]
 8015564:	6812      	ldr	r2, [r2, #0]
 8015566:	4909      	ldr	r1, [pc, #36]	@ (801558c <memp_init+0x4c>)
 8015568:	332c      	adds	r3, #44	@ 0x2c
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	440b      	add	r3, r1
 801556e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015570:	88fb      	ldrh	r3, [r7, #6]
 8015572:	3301      	adds	r3, #1
 8015574:	80fb      	strh	r3, [r7, #6]
 8015576:	88fb      	ldrh	r3, [r7, #6]
 8015578:	2b08      	cmp	r3, #8
 801557a:	d9e7      	bls.n	801554c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801557c:	bf00      	nop
 801557e:	bf00      	nop
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	08032e5c 	.word	0x08032e5c
 801558c:	2000bbec 	.word	0x2000bbec

08015590 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b084      	sub	sp, #16
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d026      	beq.n	80155f4 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	6812      	ldr	r2, [r2, #0]
 80155ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	f003 0303 	and.w	r3, r3, #3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d006      	beq.n	80155c8 <do_memp_malloc_pool+0x38>
 80155ba:	4b14      	ldr	r3, [pc, #80]	@ (801560c <do_memp_malloc_pool+0x7c>)
 80155bc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80155c0:	4913      	ldr	r1, [pc, #76]	@ (8015610 <do_memp_malloc_pool+0x80>)
 80155c2:	4814      	ldr	r0, [pc, #80]	@ (8015614 <do_memp_malloc_pool+0x84>)
 80155c4:	f00c fe42 	bl	802224c <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	889a      	ldrh	r2, [r3, #4]
 80155ce:	3201      	adds	r2, #1
 80155d0:	b292      	uxth	r2, r2
 80155d2:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	889a      	ldrh	r2, [r3, #4]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	88db      	ldrh	r3, [r3, #6]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d905      	bls.n	80155f0 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	8892      	ldrh	r2, [r2, #4]
 80155ee:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	e006      	b.n	8015602 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	881a      	ldrh	r2, [r3, #0]
 80155fa:	3201      	adds	r2, #1
 80155fc:	b292      	uxth	r2, r2
 80155fe:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3710      	adds	r7, #16
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
 801560a:	bf00      	nop
 801560c:	08025fb0 	.word	0x08025fb0
 8015610:	08025fe0 	.word	0x08025fe0
 8015614:	08026004 	.word	0x08026004

08015618 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b084      	sub	sp, #16
 801561c:	af00      	add	r7, sp, #0
 801561e:	4603      	mov	r3, r0
 8015620:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015622:	79fb      	ldrb	r3, [r7, #7]
 8015624:	2b08      	cmp	r3, #8
 8015626:	d908      	bls.n	801563a <memp_malloc+0x22>
 8015628:	4b0a      	ldr	r3, [pc, #40]	@ (8015654 <memp_malloc+0x3c>)
 801562a:	f240 1287 	movw	r2, #391	@ 0x187
 801562e:	490a      	ldr	r1, [pc, #40]	@ (8015658 <memp_malloc+0x40>)
 8015630:	480a      	ldr	r0, [pc, #40]	@ (801565c <memp_malloc+0x44>)
 8015632:	f00c fe0b 	bl	802224c <iprintf>
 8015636:	2300      	movs	r3, #0
 8015638:	e008      	b.n	801564c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801563a:	79fb      	ldrb	r3, [r7, #7]
 801563c:	4a08      	ldr	r2, [pc, #32]	@ (8015660 <memp_malloc+0x48>)
 801563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff ffa4 	bl	8015590 <do_memp_malloc_pool>
 8015648:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801564a:	68fb      	ldr	r3, [r7, #12]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	08025fb0 	.word	0x08025fb0
 8015658:	08026040 	.word	0x08026040
 801565c:	08026004 	.word	0x08026004
 8015660:	08032e5c 	.word	0x08032e5c

08015664 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
 801566c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	f003 0303 	and.w	r3, r3, #3
 8015674:	2b00      	cmp	r3, #0
 8015676:	d006      	beq.n	8015686 <do_memp_free_pool+0x22>
 8015678:	4b0d      	ldr	r3, [pc, #52]	@ (80156b0 <do_memp_free_pool+0x4c>)
 801567a:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801567e:	490d      	ldr	r1, [pc, #52]	@ (80156b4 <do_memp_free_pool+0x50>)
 8015680:	480d      	ldr	r0, [pc, #52]	@ (80156b8 <do_memp_free_pool+0x54>)
 8015682:	f00c fde3 	bl	802224c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	889a      	ldrh	r2, [r3, #4]
 8015690:	3a01      	subs	r2, #1
 8015692:	b292      	uxth	r2, r2
 8015694:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	68fa      	ldr	r2, [r7, #12]
 80156a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80156a8:	bf00      	nop
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	08025fb0 	.word	0x08025fb0
 80156b4:	08026060 	.word	0x08026060
 80156b8:	08026004 	.word	0x08026004

080156bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	4603      	mov	r3, r0
 80156c4:	6039      	str	r1, [r7, #0]
 80156c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80156c8:	79fb      	ldrb	r3, [r7, #7]
 80156ca:	2b08      	cmp	r3, #8
 80156cc:	d907      	bls.n	80156de <memp_free+0x22>
 80156ce:	4b0c      	ldr	r3, [pc, #48]	@ (8015700 <memp_free+0x44>)
 80156d0:	f240 12db 	movw	r2, #475	@ 0x1db
 80156d4:	490b      	ldr	r1, [pc, #44]	@ (8015704 <memp_free+0x48>)
 80156d6:	480c      	ldr	r0, [pc, #48]	@ (8015708 <memp_free+0x4c>)
 80156d8:	f00c fdb8 	bl	802224c <iprintf>
 80156dc:	e00c      	b.n	80156f8 <memp_free+0x3c>

  if (mem == NULL) {
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d008      	beq.n	80156f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80156e4:	79fb      	ldrb	r3, [r7, #7]
 80156e6:	4a09      	ldr	r2, [pc, #36]	@ (801570c <memp_free+0x50>)
 80156e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156ec:	6839      	ldr	r1, [r7, #0]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ff ffb8 	bl	8015664 <do_memp_free_pool>
 80156f4:	e000      	b.n	80156f8 <memp_free+0x3c>
    return;
 80156f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80156f8:	3708      	adds	r7, #8
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	08025fb0 	.word	0x08025fb0
 8015704:	08026080 	.word	0x08026080
 8015708:	08026004 	.word	0x08026004
 801570c:	08032e5c 	.word	0x08032e5c

08015710 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015710:	b480      	push	{r7}
 8015712:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015714:	bf00      	nop
 8015716:	46bd      	mov	sp, r7
 8015718:	bc80      	pop	{r7}
 801571a:	4770      	bx	lr

0801571c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
 8015728:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d105      	bne.n	801573c <netif_add+0x20>
 8015730:	4b24      	ldr	r3, [pc, #144]	@ (80157c4 <netif_add+0xa8>)
 8015732:	22fb      	movs	r2, #251	@ 0xfb
 8015734:	4924      	ldr	r1, [pc, #144]	@ (80157c8 <netif_add+0xac>)
 8015736:	4825      	ldr	r0, [pc, #148]	@ (80157cc <netif_add+0xb0>)
 8015738:	f00c fd88 	bl	802224c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2200      	movs	r2, #0
 8015740:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2200      	movs	r2, #0
 8015746:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2200      	movs	r2, #0
 8015752:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	3324      	adds	r3, #36	@ 0x24
 801575a:	2204      	movs	r2, #4
 801575c:	2100      	movs	r1, #0
 801575e:	4618      	mov	r0, r3
 8015760:	f00c ff4a 	bl	80225f8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	2203      	movs	r2, #3
 8015768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	69ba      	ldr	r2, [r7, #24]
 8015776:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8015778:	4b15      	ldr	r3, [pc, #84]	@ (80157d0 <netif_add+0xb4>)
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	1c5a      	adds	r2, r3, #1
 801577e:	b2d1      	uxtb	r1, r2
 8015780:	4a13      	ldr	r2, [pc, #76]	@ (80157d0 <netif_add+0xb4>)
 8015782:	7011      	strb	r1, [r2, #0]
 8015784:	68fa      	ldr	r2, [r7, #12]
 8015786:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
  netif->input = input;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6a3a      	ldr	r2, [r7, #32]
 801578e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	68b9      	ldr	r1, [r7, #8]
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f000 f81e 	bl	80157d8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	4798      	blx	r3
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d001      	beq.n	80157ac <netif_add+0x90>
    return NULL;
 80157a8:	2300      	movs	r3, #0
 80157aa:	e007      	b.n	80157bc <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80157ac:	4b09      	ldr	r3, [pc, #36]	@ (80157d4 <netif_add+0xb8>)
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80157b4:	4a07      	ldr	r2, [pc, #28]	@ (80157d4 <netif_add+0xb8>)
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80157ba:	68fb      	ldr	r3, [r7, #12]
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	0802609c 	.word	0x0802609c
 80157c8:	080260d0 	.word	0x080260d0
 80157cc:	080260e8 	.word	0x080260e8
 80157d0:	2000bbe8 	.word	0x2000bbe8
 80157d4:	2000bbe0 	.word	0x2000bbe0

080157d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d003      	beq.n	80157f4 <netif_set_addr+0x1c>
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d10c      	bne.n	801580e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80157f4:	68b9      	ldr	r1, [r7, #8]
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	f000 f81a 	bl	8015830 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80157fc:	6879      	ldr	r1, [r7, #4]
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f000 f861 	bl	80158c6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8015804:	6839      	ldr	r1, [r7, #0]
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f000 f84a 	bl	80158a0 <netif_set_gw>
 801580c:	e00c      	b.n	8015828 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	f000 f858 	bl	80158c6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8015816:	6839      	ldr	r1, [r7, #0]
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f000 f841 	bl	80158a0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801581e:	68b9      	ldr	r1, [r7, #8]
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f000 f805 	bl	8015830 <netif_set_ipaddr>
  }
}
 8015826:	bf00      	nop
 8015828:	bf00      	nop
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d003      	beq.n	8015848 <netif_set_ipaddr+0x18>
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	60fb      	str	r3, [r7, #12]
 8015846:	e002      	b.n	801584e <netif_set_ipaddr+0x1e>
 8015848:	4b14      	ldr	r3, [pc, #80]	@ (801589c <netif_set_ipaddr+0x6c>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801584e:	68fa      	ldr	r2, [r7, #12]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	3304      	adds	r3, #4
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d01c      	beq.n	8015894 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	3304      	adds	r3, #4
 801585e:	f107 020c 	add.w	r2, r7, #12
 8015862:	4611      	mov	r1, r2
 8015864:	4618      	mov	r0, r3
 8015866:	f002 fca9 	bl	80181bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	3304      	adds	r3, #4
 801586e:	f107 020c 	add.w	r2, r7, #12
 8015872:	4611      	mov	r1, r2
 8015874:	4618      	mov	r0, r3
 8015876:	f007 f8d7 	bl	801ca28 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d002      	beq.n	8015886 <netif_set_ipaddr+0x56>
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	e000      	b.n	8015888 <netif_set_ipaddr+0x58>
 8015886:	2300      	movs	r3, #0
 8015888:	687a      	ldr	r2, [r7, #4]
 801588a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801588c:	2101      	movs	r1, #1
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f000 f868 	bl	8015964 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8015894:	bf00      	nop
 8015896:	3710      	adds	r7, #16
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	08032ed0 	.word	0x08032ed0

080158a0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d002      	beq.n	80158b6 <netif_set_gw+0x16>
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	e000      	b.n	80158b8 <netif_set_gw+0x18>
 80158b6:	2300      	movs	r3, #0
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80158bc:	bf00      	nop
 80158be:	370c      	adds	r7, #12
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bc80      	pop	{r7}
 80158c4:	4770      	bx	lr

080158c6 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80158c6:	b480      	push	{r7}
 80158c8:	b083      	sub	sp, #12
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
 80158ce:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d002      	beq.n	80158dc <netif_set_netmask+0x16>
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	e000      	b.n	80158de <netif_set_netmask+0x18>
 80158dc:	2300      	movs	r3, #0
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80158e2:	bf00      	nop
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bc80      	pop	{r7}
 80158ea:	4770      	bx	lr

080158ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80158f4:	4a03      	ldr	r2, [pc, #12]	@ (8015904 <netif_set_default+0x18>)
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80158fa:	bf00      	nop
 80158fc:	370c      	adds	r7, #12
 80158fe:	46bd      	mov	sp, r7
 8015900:	bc80      	pop	{r7}
 8015902:	4770      	bx	lr
 8015904:	2000bbe4 	.word	0x2000bbe4

08015908 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015916:	f003 0301 	and.w	r3, r3, #1
 801591a:	2b00      	cmp	r3, #0
 801591c:	d11c      	bne.n	8015958 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015924:	f043 0301 	orr.w	r3, r3, #1
 8015928:	b2da      	uxtb	r2, r3
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8015930:	f7f6 faf8 	bl	800bf24 <sys_now>
 8015934:	4603      	mov	r3, r0
 8015936:	4a0a      	ldr	r2, [pc, #40]	@ (8015960 <netif_set_up+0x58>)
 8015938:	fba2 2303 	umull	r2, r3, r2, r3
 801593c:	08da      	lsrs	r2, r3, #3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	63da      	str	r2, [r3, #60]	@ 0x3c

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015948:	f003 0304 	and.w	r3, r3, #4
 801594c:	2b00      	cmp	r3, #0
 801594e:	d003      	beq.n	8015958 <netif_set_up+0x50>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8015950:	2103      	movs	r1, #3
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f000 f806 	bl	8015964 <netif_issue_reports>
    }
  }
}
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	cccccccd 	.word	0xcccccccd

08015964 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015970:	78fb      	ldrb	r3, [r7, #3]
 8015972:	f003 0301 	and.w	r3, r3, #1
 8015976:	2b00      	cmp	r3, #0
 8015978:	d011      	beq.n	801599e <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	3304      	adds	r3, #4
 801597e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00c      	beq.n	801599e <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801598a:	f003 0308 	and.w	r3, r3, #8
 801598e:	2b00      	cmp	r3, #0
 8015990:	d005      	beq.n	801599e <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	3304      	adds	r3, #4
 8015996:	4619      	mov	r1, r3
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f009 ff0b 	bl	801f7b4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
	...

080159a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159b6:	f003 0301 	and.w	r3, r3, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d01b      	beq.n	80159f6 <netif_set_down+0x4e>
    netif->flags &= ~NETIF_FLAG_UP;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159c4:	f023 0301 	bic.w	r3, r3, #1
 80159c8:	b2da      	uxtb	r2, r3
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 80159d0:	f7f6 faa8 	bl	800bf24 <sys_now>
 80159d4:	4603      	mov	r3, r0
 80159d6:	4a0a      	ldr	r2, [pc, #40]	@ (8015a00 <netif_set_down+0x58>)
 80159d8:	fba2 2303 	umull	r2, r3, r2, r3
 80159dc:	08da      	lsrs	r2, r3, #3
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	63da      	str	r2, [r3, #60]	@ 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80159e8:	f003 0308 	and.w	r3, r3, #8
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d002      	beq.n	80159f6 <netif_set_down+0x4e>
      etharp_cleanup_netif(netif);
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f009 f9f5 	bl	801ede0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80159f6:	bf00      	nop
 80159f8:	3708      	adds	r7, #8
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	cccccccd 	.word	0xcccccccd

08015a04 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a12:	f003 0304 	and.w	r3, r3, #4
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d11e      	bne.n	8015a58 <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a20:	f043 0304 	orr.w	r3, r3, #4
 8015a24:	b2da      	uxtb	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f007 fbd9 	bl	801d1e4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a38:	f003 0301 	and.w	r3, r3, #1
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d003      	beq.n	8015a48 <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8015a40:	2103      	movs	r1, #3
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7ff ff8e 	bl	8015964 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	69db      	ldr	r3, [r3, #28]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d003      	beq.n	8015a58 <netif_set_link_up+0x54>
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	69db      	ldr	r3, [r3, #28]
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	4798      	blx	r3
  }
}
 8015a58:	bf00      	nop
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a6e:	f003 0304 	and.w	r3, r3, #4
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d010      	beq.n	8015a98 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a7c:	f023 0304 	bic.w	r3, r3, #4
 8015a80:	b2da      	uxtb	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    NETIF_LINK_CALLBACK(netif);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	69db      	ldr	r3, [r3, #28]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d003      	beq.n	8015a98 <netif_set_link_down+0x38>
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	69db      	ldr	r3, [r3, #28]
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	4798      	blx	r3
  }
}
 8015a98:	bf00      	nop
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b083      	sub	sp, #12
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
 8015aa8:	6039      	str	r1, [r7, #0]
  if (netif) {
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	683a      	ldr	r2, [r7, #0]
 8015ab4:	61da      	str	r2, [r3, #28]
  }
}
 8015ab6:	bf00      	nop
 8015ab8:	370c      	adds	r7, #12
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bc80      	pop	{r7}
 8015abe:	4770      	bx	lr

08015ac0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8015b00 <pbuf_free_ooseq+0x40>)
 8015ac8:	2200      	movs	r2, #0
 8015aca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015acc:	4b0d      	ldr	r3, [pc, #52]	@ (8015b04 <pbuf_free_ooseq+0x44>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	607b      	str	r3, [r7, #4]
 8015ad2:	e00f      	b.n	8015af4 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d008      	beq.n	8015aee <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f001 ffb4 	bl	8017a4e <tcp_segs_free>
      pcb->ooseq = NULL;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8015aec:	e005      	b.n	8015afa <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	607b      	str	r3, [r7, #4]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d1ec      	bne.n	8015ad4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8015afa:	3708      	adds	r7, #8
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	2000bbe9 	.word	0x2000bbe9
 8015b04:	2000bd90 	.word	0x2000bd90

08015b08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015b0c:	4b03      	ldr	r3, [pc, #12]	@ (8015b1c <pbuf_pool_is_empty+0x14>)
 8015b0e:	2201      	movs	r2, #1
 8015b10:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015b12:	bf00      	nop
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bc80      	pop	{r7}
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop
 8015b1c:	2000bbe9 	.word	0x2000bbe9

08015b20 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b088      	sub	sp, #32
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	4603      	mov	r3, r0
 8015b28:	71fb      	strb	r3, [r7, #7]
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	80bb      	strh	r3, [r7, #4]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8015b32:	79fb      	ldrb	r3, [r7, #7]
 8015b34:	2b04      	cmp	r3, #4
 8015b36:	d81c      	bhi.n	8015b72 <pbuf_alloc+0x52>
 8015b38:	a201      	add	r2, pc, #4	@ (adr r2, 8015b40 <pbuf_alloc+0x20>)
 8015b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b3e:	bf00      	nop
 8015b40:	08015b55 	.word	0x08015b55
 8015b44:	08015b5b 	.word	0x08015b5b
 8015b48:	08015b61 	.word	0x08015b61
 8015b4c:	08015b67 	.word	0x08015b67
 8015b50:	08015b6d 	.word	0x08015b6d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8015b54:	2336      	movs	r3, #54	@ 0x36
 8015b56:	82fb      	strh	r3, [r7, #22]
    break;
 8015b58:	e014      	b.n	8015b84 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8015b5a:	2322      	movs	r3, #34	@ 0x22
 8015b5c:	82fb      	strh	r3, [r7, #22]
    break;
 8015b5e:	e011      	b.n	8015b84 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015b60:	230e      	movs	r3, #14
 8015b62:	82fb      	strh	r3, [r7, #22]
    break;
 8015b64:	e00e      	b.n	8015b84 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8015b66:	2300      	movs	r3, #0
 8015b68:	82fb      	strh	r3, [r7, #22]
    break;
 8015b6a:	e00b      	b.n	8015b84 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	82fb      	strh	r3, [r7, #22]
    break;
 8015b70:	e008      	b.n	8015b84 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8015b72:	4ba1      	ldr	r3, [pc, #644]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015b74:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8015b78:	49a0      	ldr	r1, [pc, #640]	@ (8015dfc <pbuf_alloc+0x2dc>)
 8015b7a:	48a1      	ldr	r0, [pc, #644]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015b7c:	f00c fb66 	bl	802224c <iprintf>
    return NULL;
 8015b80:	2300      	movs	r3, #0
 8015b82:	e15c      	b.n	8015e3e <pbuf_alloc+0x31e>
  }

  switch (type) {
 8015b84:	79bb      	ldrb	r3, [r7, #6]
 8015b86:	2b03      	cmp	r3, #3
 8015b88:	d00d      	beq.n	8015ba6 <pbuf_alloc+0x86>
 8015b8a:	2b03      	cmp	r3, #3
 8015b8c:	f300 8146 	bgt.w	8015e1c <pbuf_alloc+0x2fc>
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	f000 80d0 	beq.w	8015d36 <pbuf_alloc+0x216>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f2c0 8140 	blt.w	8015e1c <pbuf_alloc+0x2fc>
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	f200 813c 	bhi.w	8015e1c <pbuf_alloc+0x2fc>
 8015ba4:	e10d      	b.n	8015dc2 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015ba6:	2008      	movs	r0, #8
 8015ba8:	f7ff fd36 	bl	8015618 <memp_malloc>
 8015bac:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d103      	bne.n	8015bbc <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8015bb4:	f7ff ffa8 	bl	8015b08 <pbuf_pool_is_empty>
      return NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e140      	b.n	8015e3e <pbuf_alloc+0x31e>
    }
    p->type = type;
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	79ba      	ldrb	r2, [r7, #6]
 8015bc0:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8015bc8:	8afb      	ldrh	r3, [r7, #22]
 8015bca:	3310      	adds	r3, #16
 8015bcc:	69fa      	ldr	r2, [r7, #28]
 8015bce:	4413      	add	r3, r2
 8015bd0:	3303      	adds	r3, #3
 8015bd2:	f023 0303 	bic.w	r3, r3, #3
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	69fb      	ldr	r3, [r7, #28]
 8015bda:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	f003 0303 	and.w	r3, r3, #3
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d006      	beq.n	8015bf6 <pbuf_alloc+0xd6>
 8015be8:	4b83      	ldr	r3, [pc, #524]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015bea:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015bee:	4985      	ldr	r1, [pc, #532]	@ (8015e04 <pbuf_alloc+0x2e4>)
 8015bf0:	4883      	ldr	r0, [pc, #524]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015bf2:	f00c fb2b 	bl	802224c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	88ba      	ldrh	r2, [r7, #4]
 8015bfa:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8015bfc:	8afb      	ldrh	r3, [r7, #22]
 8015bfe:	3303      	adds	r3, #3
 8015c00:	f023 0303 	bic.w	r3, r3, #3
 8015c04:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8015c08:	88bb      	ldrh	r3, [r7, #4]
 8015c0a:	4293      	cmp	r3, r2
 8015c0c:	bf28      	it	cs
 8015c0e:	4613      	movcs	r3, r2
 8015c10:	b29a      	uxth	r2, r3
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8015c16:	69fb      	ldr	r3, [r7, #28]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	69fa      	ldr	r2, [r7, #28]
 8015c1c:	8952      	ldrh	r2, [r2, #10]
 8015c1e:	441a      	add	r2, r3
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d906      	bls.n	8015c38 <pbuf_alloc+0x118>
 8015c2a:	4b73      	ldr	r3, [pc, #460]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015c2c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8015c30:	4975      	ldr	r1, [pc, #468]	@ (8015e08 <pbuf_alloc+0x2e8>)
 8015c32:	4873      	ldr	r0, [pc, #460]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015c34:	f00c fb0a 	bl	802224c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015c38:	8afb      	ldrh	r3, [r7, #22]
 8015c3a:	3303      	adds	r3, #3
 8015c3c:	f023 0303 	bic.w	r3, r3, #3
 8015c40:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8015c44:	d106      	bne.n	8015c54 <pbuf_alloc+0x134>
 8015c46:	4b6c      	ldr	r3, [pc, #432]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015c48:	f240 1231 	movw	r2, #305	@ 0x131
 8015c4c:	496f      	ldr	r1, [pc, #444]	@ (8015e0c <pbuf_alloc+0x2ec>)
 8015c4e:	486c      	ldr	r0, [pc, #432]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015c50:	f00c fafc 	bl	802224c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	2201      	movs	r2, #1
 8015c58:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8015c5a:	69fb      	ldr	r3, [r7, #28]
 8015c5c:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8015c5e:	88bb      	ldrh	r3, [r7, #4]
 8015c60:	69fa      	ldr	r2, [r7, #28]
 8015c62:	8952      	ldrh	r2, [r2, #10]
 8015c64:	1a9b      	subs	r3, r3, r2
 8015c66:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8015c68:	e061      	b.n	8015d2e <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015c6a:	2008      	movs	r0, #8
 8015c6c:	f7ff fcd4 	bl	8015618 <memp_malloc>
 8015c70:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d106      	bne.n	8015c86 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8015c78:	f7ff ff46 	bl	8015b08 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8015c7c:	69f8      	ldr	r0, [r7, #28]
 8015c7e:	f000 fac7 	bl	8016210 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8015c82:	2300      	movs	r3, #0
 8015c84:	e0db      	b.n	8015e3e <pbuf_alloc+0x31e>
      }
      q->type = type;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	79ba      	ldrb	r2, [r7, #6]
 8015c8a:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	2200      	movs	r2, #0
 8015c96:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	dd06      	ble.n	8015cb6 <pbuf_alloc+0x196>
 8015ca8:	4b53      	ldr	r3, [pc, #332]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015caa:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8015cae:	4958      	ldr	r1, [pc, #352]	@ (8015e10 <pbuf_alloc+0x2f0>)
 8015cb0:	4853      	ldr	r0, [pc, #332]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015cb2:	f00c facb 	bl	802224c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	b29a      	uxth	r2, r3
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8015cc6:	bf28      	it	cs
 8015cc8:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f103 0210 	add.w	r2, r3, #16
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	f003 0303 	and.w	r3, r3, #3
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d006      	beq.n	8015cf6 <pbuf_alloc+0x1d6>
 8015ce8:	4b43      	ldr	r3, [pc, #268]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015cea:	f240 1251 	movw	r2, #337	@ 0x151
 8015cee:	4949      	ldr	r1, [pc, #292]	@ (8015e14 <pbuf_alloc+0x2f4>)
 8015cf0:	4843      	ldr	r0, [pc, #268]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015cf2:	f00c faab 	bl	802224c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	69fa      	ldr	r2, [r7, #28]
 8015cfc:	8952      	ldrh	r2, [r2, #10]
 8015cfe:	441a      	add	r2, r3
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d906      	bls.n	8015d18 <pbuf_alloc+0x1f8>
 8015d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015d0c:	f240 1253 	movw	r2, #339	@ 0x153
 8015d10:	493d      	ldr	r1, [pc, #244]	@ (8015e08 <pbuf_alloc+0x2e8>)
 8015d12:	483b      	ldr	r0, [pc, #236]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015d14:	f00c fa9a 	bl	802224c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	895b      	ldrh	r3, [r3, #10]
 8015d22:	461a      	mov	r2, r3
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	1a9b      	subs	r3, r3, r2
 8015d28:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	dc9a      	bgt.n	8015c6a <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8015d34:	e07c      	b.n	8015e30 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8015d36:	8afb      	ldrh	r3, [r7, #22]
 8015d38:	3313      	adds	r3, #19
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	f023 0303 	bic.w	r3, r3, #3
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	88bb      	ldrh	r3, [r7, #4]
 8015d44:	3303      	adds	r3, #3
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	f023 0303 	bic.w	r3, r3, #3
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	4413      	add	r3, r2
 8015d50:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8015d52:	897a      	ldrh	r2, [r7, #10]
 8015d54:	88bb      	ldrh	r3, [r7, #4]
 8015d56:	3303      	adds	r3, #3
 8015d58:	f023 0303 	bic.w	r3, r3, #3
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	d201      	bcs.n	8015d64 <pbuf_alloc+0x244>
        return NULL;
 8015d60:	2300      	movs	r3, #0
 8015d62:	e06c      	b.n	8015e3e <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8015d64:	897b      	ldrh	r3, [r7, #10]
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7ff faa8 	bl	80152bc <mem_malloc>
 8015d6c:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8015d6e:	69fb      	ldr	r3, [r7, #28]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d101      	bne.n	8015d78 <pbuf_alloc+0x258>
      return NULL;
 8015d74:	2300      	movs	r3, #0
 8015d76:	e062      	b.n	8015e3e <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8015d78:	8afb      	ldrh	r3, [r7, #22]
 8015d7a:	3310      	adds	r3, #16
 8015d7c:	69fa      	ldr	r2, [r7, #28]
 8015d7e:	4413      	add	r3, r2
 8015d80:	3303      	adds	r3, #3
 8015d82:	f023 0303 	bic.w	r3, r3, #3
 8015d86:	461a      	mov	r2, r3
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	88ba      	ldrh	r2, [r7, #4]
 8015d90:	811a      	strh	r2, [r3, #8]
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	891a      	ldrh	r2, [r3, #8]
 8015d96:	69fb      	ldr	r3, [r7, #28]
 8015d98:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	79ba      	ldrb	r2, [r7, #6]
 8015da4:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	f003 0303 	and.w	r3, r3, #3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d03d      	beq.n	8015e2e <pbuf_alloc+0x30e>
 8015db2:	4b11      	ldr	r3, [pc, #68]	@ (8015df8 <pbuf_alloc+0x2d8>)
 8015db4:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8015db8:	4917      	ldr	r1, [pc, #92]	@ (8015e18 <pbuf_alloc+0x2f8>)
 8015dba:	4811      	ldr	r0, [pc, #68]	@ (8015e00 <pbuf_alloc+0x2e0>)
 8015dbc:	f00c fa46 	bl	802224c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8015dc0:	e035      	b.n	8015e2e <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015dc2:	2007      	movs	r0, #7
 8015dc4:	f7ff fc28 	bl	8015618 <memp_malloc>
 8015dc8:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d101      	bne.n	8015dd4 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	e034      	b.n	8015e3e <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8015dda:	69fb      	ldr	r3, [r7, #28]
 8015ddc:	88ba      	ldrh	r2, [r7, #4]
 8015dde:	811a      	strh	r2, [r3, #8]
 8015de0:	69fb      	ldr	r3, [r7, #28]
 8015de2:	891a      	ldrh	r2, [r3, #8]
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2200      	movs	r2, #0
 8015dec:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	79ba      	ldrb	r2, [r7, #6]
 8015df2:	731a      	strb	r2, [r3, #12]
    break;
 8015df4:	e01c      	b.n	8015e30 <pbuf_alloc+0x310>
 8015df6:	bf00      	nop
 8015df8:	08026110 	.word	0x08026110
 8015dfc:	08026140 	.word	0x08026140
 8015e00:	0802615c 	.word	0x0802615c
 8015e04:	08026184 	.word	0x08026184
 8015e08:	080261b4 	.word	0x080261b4
 8015e0c:	080261e8 	.word	0x080261e8
 8015e10:	0802621c 	.word	0x0802621c
 8015e14:	08026230 	.word	0x08026230
 8015e18:	08026260 	.word	0x08026260
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8015e48 <pbuf_alloc+0x328>)
 8015e1e:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8015e22:	490a      	ldr	r1, [pc, #40]	@ (8015e4c <pbuf_alloc+0x32c>)
 8015e24:	480a      	ldr	r0, [pc, #40]	@ (8015e50 <pbuf_alloc+0x330>)
 8015e26:	f00c fa11 	bl	802224c <iprintf>
    return NULL;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	e007      	b.n	8015e3e <pbuf_alloc+0x31e>
    break;
 8015e2e:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	2201      	movs	r2, #1
 8015e34:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8015e36:	69fb      	ldr	r3, [r7, #28]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015e3c:	69fb      	ldr	r3, [r7, #28]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3720      	adds	r7, #32
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	08026110 	.word	0x08026110
 8015e4c:	0802628c 	.word	0x0802628c
 8015e50:	0802615c 	.word	0x0802615c

08015e54 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b084      	sub	sp, #16
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	603b      	str	r3, [r7, #0]
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	71fb      	strb	r3, [r7, #7]
 8015e60:	460b      	mov	r3, r1
 8015e62:	80bb      	strh	r3, [r7, #4]
 8015e64:	4613      	mov	r3, r2
 8015e66:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8015e68:	79fb      	ldrb	r3, [r7, #7]
 8015e6a:	2b04      	cmp	r3, #4
 8015e6c:	d81b      	bhi.n	8015ea6 <pbuf_alloced_custom+0x52>
 8015e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8015e74 <pbuf_alloced_custom+0x20>)
 8015e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e74:	08015e89 	.word	0x08015e89
 8015e78:	08015e8f 	.word	0x08015e8f
 8015e7c:	08015e95 	.word	0x08015e95
 8015e80:	08015e9b 	.word	0x08015e9b
 8015e84:	08015ea1 	.word	0x08015ea1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8015e88:	2336      	movs	r3, #54	@ 0x36
 8015e8a:	81fb      	strh	r3, [r7, #14]
    break;
 8015e8c:	e014      	b.n	8015eb8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8015e8e:	2322      	movs	r3, #34	@ 0x22
 8015e90:	81fb      	strh	r3, [r7, #14]
    break;
 8015e92:	e011      	b.n	8015eb8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015e94:	230e      	movs	r3, #14
 8015e96:	81fb      	strh	r3, [r7, #14]
    break;
 8015e98:	e00e      	b.n	8015eb8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	81fb      	strh	r3, [r7, #14]
    break;
 8015e9e:	e00b      	b.n	8015eb8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	81fb      	strh	r3, [r7, #14]
    break;
 8015ea4:	e008      	b.n	8015eb8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8015ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8015f1c <pbuf_alloced_custom+0xc8>)
 8015ea8:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8015eac:	491c      	ldr	r1, [pc, #112]	@ (8015f20 <pbuf_alloced_custom+0xcc>)
 8015eae:	481d      	ldr	r0, [pc, #116]	@ (8015f24 <pbuf_alloced_custom+0xd0>)
 8015eb0:	f00c f9cc 	bl	802224c <iprintf>
    return NULL;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	e02d      	b.n	8015f14 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015eb8:	89fb      	ldrh	r3, [r7, #14]
 8015eba:	3303      	adds	r3, #3
 8015ebc:	f023 0203 	bic.w	r2, r3, #3
 8015ec0:	88bb      	ldrh	r3, [r7, #4]
 8015ec2:	441a      	add	r2, r3
 8015ec4:	8bbb      	ldrh	r3, [r7, #28]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d901      	bls.n	8015ece <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e022      	b.n	8015f14 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8015ed4:	69bb      	ldr	r3, [r7, #24]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d008      	beq.n	8015eec <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015eda:	89fb      	ldrh	r3, [r7, #14]
 8015edc:	3303      	adds	r3, #3
 8015ede:	f023 0303 	bic.w	r3, r3, #3
 8015ee2:	69ba      	ldr	r2, [r7, #24]
 8015ee4:	441a      	add	r2, r3
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	605a      	str	r2, [r3, #4]
 8015eea:	e002      	b.n	8015ef2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	2202      	movs	r2, #2
 8015ef6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	88ba      	ldrh	r2, [r7, #4]
 8015efc:	811a      	strh	r2, [r3, #8]
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	891a      	ldrh	r2, [r3, #8]
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	79ba      	ldrb	r2, [r7, #6]
 8015f0a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8015f12:	683b      	ldr	r3, [r7, #0]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3710      	adds	r7, #16
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	08026110 	.word	0x08026110
 8015f20:	080262a8 	.word	0x080262a8
 8015f24:	0802615c 	.word	0x0802615c

08015f28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b086      	sub	sp, #24
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	460b      	mov	r3, r1
 8015f32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d106      	bne.n	8015f48 <pbuf_realloc+0x20>
 8015f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8016068 <pbuf_realloc+0x140>)
 8015f3c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8015f40:	494a      	ldr	r1, [pc, #296]	@ (801606c <pbuf_realloc+0x144>)
 8015f42:	484b      	ldr	r0, [pc, #300]	@ (8016070 <pbuf_realloc+0x148>)
 8015f44:	f00c f982 	bl	802224c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	7b1b      	ldrb	r3, [r3, #12]
 8015f4c:	2b03      	cmp	r3, #3
 8015f4e:	d012      	beq.n	8015f76 <pbuf_realloc+0x4e>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	7b1b      	ldrb	r3, [r3, #12]
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d00e      	beq.n	8015f76 <pbuf_realloc+0x4e>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	7b1b      	ldrb	r3, [r3, #12]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00a      	beq.n	8015f76 <pbuf_realloc+0x4e>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	7b1b      	ldrb	r3, [r3, #12]
 8015f64:	2b02      	cmp	r3, #2
 8015f66:	d006      	beq.n	8015f76 <pbuf_realloc+0x4e>
 8015f68:	4b3f      	ldr	r3, [pc, #252]	@ (8016068 <pbuf_realloc+0x140>)
 8015f6a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8015f6e:	4941      	ldr	r1, [pc, #260]	@ (8016074 <pbuf_realloc+0x14c>)
 8015f70:	483f      	ldr	r0, [pc, #252]	@ (8016070 <pbuf_realloc+0x148>)
 8015f72:	f00c f96b 	bl	802224c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	891b      	ldrh	r3, [r3, #8]
 8015f7a:	887a      	ldrh	r2, [r7, #2]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d26e      	bcs.n	801605e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8015f80:	887b      	ldrh	r3, [r7, #2]
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	8912      	ldrh	r2, [r2, #8]
 8015f86:	1a9b      	subs	r3, r3, r2
 8015f88:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015f8a:	887b      	ldrh	r3, [r7, #2]
 8015f8c:	827b      	strh	r3, [r7, #18]
  q = p;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015f92:	e025      	b.n	8015fe0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	895b      	ldrh	r3, [r3, #10]
 8015f98:	8a7a      	ldrh	r2, [r7, #18]
 8015f9a:	1ad3      	subs	r3, r2, r3
 8015f9c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	dd06      	ble.n	8015fb6 <pbuf_realloc+0x8e>
 8015fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8016068 <pbuf_realloc+0x140>)
 8015faa:	f240 220b 	movw	r2, #523	@ 0x20b
 8015fae:	4932      	ldr	r1, [pc, #200]	@ (8016078 <pbuf_realloc+0x150>)
 8015fb0:	482f      	ldr	r0, [pc, #188]	@ (8016070 <pbuf_realloc+0x148>)
 8015fb2:	f00c f94b 	bl	802224c <iprintf>
    q->tot_len += (u16_t)grow;
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	891a      	ldrh	r2, [r3, #8]
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	b29b      	uxth	r3, r3
 8015fbe:	4413      	add	r3, r2
 8015fc0:	b29a      	uxth	r2, r3
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d106      	bne.n	8015fe0 <pbuf_realloc+0xb8>
 8015fd2:	4b25      	ldr	r3, [pc, #148]	@ (8016068 <pbuf_realloc+0x140>)
 8015fd4:	f240 220f 	movw	r2, #527	@ 0x20f
 8015fd8:	4928      	ldr	r1, [pc, #160]	@ (801607c <pbuf_realloc+0x154>)
 8015fda:	4825      	ldr	r0, [pc, #148]	@ (8016070 <pbuf_realloc+0x148>)
 8015fdc:	f00c f936 	bl	802224c <iprintf>
  while (rem_len > q->len) {
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	895b      	ldrh	r3, [r3, #10]
 8015fe4:	8a7a      	ldrh	r2, [r7, #18]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d8d4      	bhi.n	8015f94 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	7b1b      	ldrb	r3, [r3, #12]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d121      	bne.n	8016036 <pbuf_realloc+0x10e>
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	895b      	ldrh	r3, [r3, #10]
 8015ff6:	8a7a      	ldrh	r2, [r7, #18]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d01c      	beq.n	8016036 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	7b5b      	ldrb	r3, [r3, #13]
 8016000:	f003 0302 	and.w	r3, r3, #2
 8016004:	2b00      	cmp	r3, #0
 8016006:	d116      	bne.n	8016036 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8016008:	697b      	ldr	r3, [r7, #20]
 801600a:	685a      	ldr	r2, [r3, #4]
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	b29a      	uxth	r2, r3
 8016012:	8a7b      	ldrh	r3, [r7, #18]
 8016014:	4413      	add	r3, r2
 8016016:	b29b      	uxth	r3, r3
 8016018:	4619      	mov	r1, r3
 801601a:	6978      	ldr	r0, [r7, #20]
 801601c:	f7ff f850 	bl	80150c0 <mem_trim>
 8016020:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d106      	bne.n	8016036 <pbuf_realloc+0x10e>
 8016028:	4b0f      	ldr	r3, [pc, #60]	@ (8016068 <pbuf_realloc+0x140>)
 801602a:	f240 221d 	movw	r2, #541	@ 0x21d
 801602e:	4914      	ldr	r1, [pc, #80]	@ (8016080 <pbuf_realloc+0x158>)
 8016030:	480f      	ldr	r0, [pc, #60]	@ (8016070 <pbuf_realloc+0x148>)
 8016032:	f00c f90b 	bl	802224c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	8a7a      	ldrh	r2, [r7, #18]
 801603a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	895a      	ldrh	r2, [r3, #10]
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d004      	beq.n	8016056 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4618      	mov	r0, r3
 8016052:	f000 f8dd 	bl	8016210 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	2200      	movs	r2, #0
 801605a:	601a      	str	r2, [r3, #0]
 801605c:	e000      	b.n	8016060 <pbuf_realloc+0x138>
    return;
 801605e:	bf00      	nop

}
 8016060:	3718      	adds	r7, #24
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	08026110 	.word	0x08026110
 801606c:	080262cc 	.word	0x080262cc
 8016070:	0802615c 	.word	0x0802615c
 8016074:	080262e4 	.word	0x080262e4
 8016078:	08026300 	.word	0x08026300
 801607c:	08026314 	.word	0x08026314
 8016080:	0802632c 	.word	0x0802632c

08016084 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	460b      	mov	r3, r1
 801608e:	807b      	strh	r3, [r7, #2]
 8016090:	4613      	mov	r3, r2
 8016092:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d106      	bne.n	80160a8 <pbuf_header_impl+0x24>
 801609a:	4b46      	ldr	r3, [pc, #280]	@ (80161b4 <pbuf_header_impl+0x130>)
 801609c:	f240 223f 	movw	r2, #575	@ 0x23f
 80160a0:	4945      	ldr	r1, [pc, #276]	@ (80161b8 <pbuf_header_impl+0x134>)
 80160a2:	4846      	ldr	r0, [pc, #280]	@ (80161bc <pbuf_header_impl+0x138>)
 80160a4:	f00c f8d2 	bl	802224c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80160a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d002      	beq.n	80160b6 <pbuf_header_impl+0x32>
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d101      	bne.n	80160ba <pbuf_header_impl+0x36>
    return 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	e078      	b.n	80161ac <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80160ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	da10      	bge.n	80160e4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80160c2:	887b      	ldrh	r3, [r7, #2]
 80160c4:	425b      	negs	r3, r3
 80160c6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	895b      	ldrh	r3, [r3, #10]
 80160cc:	89fa      	ldrh	r2, [r7, #14]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d90a      	bls.n	80160e8 <pbuf_header_impl+0x64>
 80160d2:	4b38      	ldr	r3, [pc, #224]	@ (80161b4 <pbuf_header_impl+0x130>)
 80160d4:	f240 2247 	movw	r2, #583	@ 0x247
 80160d8:	4939      	ldr	r1, [pc, #228]	@ (80161c0 <pbuf_header_impl+0x13c>)
 80160da:	4838      	ldr	r0, [pc, #224]	@ (80161bc <pbuf_header_impl+0x138>)
 80160dc:	f00c f8b6 	bl	802224c <iprintf>
 80160e0:	2301      	movs	r3, #1
 80160e2:	e063      	b.n	80161ac <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80160e4:	887b      	ldrh	r3, [r7, #2]
 80160e6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	7b1b      	ldrb	r3, [r3, #12]
 80160ec:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80160f4:	89bb      	ldrh	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d002      	beq.n	8016100 <pbuf_header_impl+0x7c>
 80160fa:	89bb      	ldrh	r3, [r7, #12]
 80160fc:	2b03      	cmp	r3, #3
 80160fe:	d112      	bne.n	8016126 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	685a      	ldr	r2, [r3, #4]
 8016104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016108:	425b      	negs	r3, r3
 801610a:	441a      	add	r2, r3
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	685a      	ldr	r2, [r3, #4]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	3310      	adds	r3, #16
 8016118:	429a      	cmp	r2, r3
 801611a:	d238      	bcs.n	801618e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	68ba      	ldr	r2, [r7, #8]
 8016120:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8016122:	2301      	movs	r3, #1
 8016124:	e042      	b.n	80161ac <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8016126:	89bb      	ldrh	r3, [r7, #12]
 8016128:	2b02      	cmp	r3, #2
 801612a:	d002      	beq.n	8016132 <pbuf_header_impl+0xae>
 801612c:	89bb      	ldrh	r3, [r7, #12]
 801612e:	2b01      	cmp	r3, #1
 8016130:	d124      	bne.n	801617c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8016132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016136:	2b00      	cmp	r3, #0
 8016138:	da0d      	bge.n	8016156 <pbuf_header_impl+0xd2>
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	895b      	ldrh	r3, [r3, #10]
 801613e:	89fa      	ldrh	r2, [r7, #14]
 8016140:	429a      	cmp	r2, r3
 8016142:	d808      	bhi.n	8016156 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	685a      	ldr	r2, [r3, #4]
 8016148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801614c:	425b      	negs	r3, r3
 801614e:	441a      	add	r2, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	605a      	str	r2, [r3, #4]
 8016154:	e011      	b.n	801617a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8016156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801615a:	2b00      	cmp	r3, #0
 801615c:	dd0b      	ble.n	8016176 <pbuf_header_impl+0xf2>
 801615e:	787b      	ldrb	r3, [r7, #1]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d008      	beq.n	8016176 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801616c:	425b      	negs	r3, r3
 801616e:	441a      	add	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	605a      	str	r2, [r3, #4]
 8016174:	e001      	b.n	801617a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016176:	2301      	movs	r3, #1
 8016178:	e018      	b.n	80161ac <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801617a:	e008      	b.n	801618e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801617c:	4b0d      	ldr	r3, [pc, #52]	@ (80161b4 <pbuf_header_impl+0x130>)
 801617e:	f240 2277 	movw	r2, #631	@ 0x277
 8016182:	4910      	ldr	r1, [pc, #64]	@ (80161c4 <pbuf_header_impl+0x140>)
 8016184:	480d      	ldr	r0, [pc, #52]	@ (80161bc <pbuf_header_impl+0x138>)
 8016186:	f00c f861 	bl	802224c <iprintf>
    return 1;
 801618a:	2301      	movs	r3, #1
 801618c:	e00e      	b.n	80161ac <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	895a      	ldrh	r2, [r3, #10]
 8016192:	887b      	ldrh	r3, [r7, #2]
 8016194:	4413      	add	r3, r2
 8016196:	b29a      	uxth	r2, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	891a      	ldrh	r2, [r3, #8]
 80161a0:	887b      	ldrh	r3, [r7, #2]
 80161a2:	4413      	add	r3, r2
 80161a4:	b29a      	uxth	r2, r3
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80161aa:	2300      	movs	r3, #0
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3710      	adds	r7, #16
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	08026110 	.word	0x08026110
 80161b8:	08026348 	.word	0x08026348
 80161bc:	0802615c 	.word	0x0802615c
 80161c0:	08026354 	.word	0x08026354
 80161c4:	08026374 	.word	0x08026374

080161c8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	460b      	mov	r3, r1
 80161d2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80161d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80161d8:	2200      	movs	r2, #0
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7ff ff51 	bl	8016084 <pbuf_header_impl>
 80161e2:	4603      	mov	r3, r0
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3708      	adds	r7, #8
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}

080161ec <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
 80161f4:	460b      	mov	r3, r1
 80161f6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80161f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80161fc:	2201      	movs	r2, #1
 80161fe:	4619      	mov	r1, r3
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7ff ff3f 	bl	8016084 <pbuf_header_impl>
 8016206:	4603      	mov	r3, r0
}
 8016208:	4618      	mov	r0, r3
 801620a:	3708      	adds	r7, #8
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}

08016210 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b086      	sub	sp, #24
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10b      	bne.n	8016236 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d106      	bne.n	8016232 <pbuf_free+0x22>
 8016224:	4b3e      	ldr	r3, [pc, #248]	@ (8016320 <pbuf_free+0x110>)
 8016226:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801622a:	493e      	ldr	r1, [pc, #248]	@ (8016324 <pbuf_free+0x114>)
 801622c:	483e      	ldr	r0, [pc, #248]	@ (8016328 <pbuf_free+0x118>)
 801622e:	f00c f80d 	bl	802224c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016232:	2300      	movs	r3, #0
 8016234:	e070      	b.n	8016318 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	7b1b      	ldrb	r3, [r3, #12]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d012      	beq.n	8016264 <pbuf_free+0x54>
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	7b1b      	ldrb	r3, [r3, #12]
 8016242:	2b01      	cmp	r3, #1
 8016244:	d00e      	beq.n	8016264 <pbuf_free+0x54>
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	7b1b      	ldrb	r3, [r3, #12]
 801624a:	2b02      	cmp	r3, #2
 801624c:	d00a      	beq.n	8016264 <pbuf_free+0x54>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	7b1b      	ldrb	r3, [r3, #12]
 8016252:	2b03      	cmp	r3, #3
 8016254:	d006      	beq.n	8016264 <pbuf_free+0x54>
 8016256:	4b32      	ldr	r3, [pc, #200]	@ (8016320 <pbuf_free+0x110>)
 8016258:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801625c:	4933      	ldr	r1, [pc, #204]	@ (801632c <pbuf_free+0x11c>)
 801625e:	4832      	ldr	r0, [pc, #200]	@ (8016328 <pbuf_free+0x118>)
 8016260:	f00b fff4 	bl	802224c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8016264:	2300      	movs	r3, #0
 8016266:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8016268:	e052      	b.n	8016310 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	89db      	ldrh	r3, [r3, #14]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d106      	bne.n	8016280 <pbuf_free+0x70>
 8016272:	4b2b      	ldr	r3, [pc, #172]	@ (8016320 <pbuf_free+0x110>)
 8016274:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8016278:	492d      	ldr	r1, [pc, #180]	@ (8016330 <pbuf_free+0x120>)
 801627a:	482b      	ldr	r0, [pc, #172]	@ (8016328 <pbuf_free+0x118>)
 801627c:	f00b ffe6 	bl	802224c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	89db      	ldrh	r3, [r3, #14]
 8016284:	3b01      	subs	r3, #1
 8016286:	b29a      	uxth	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	81da      	strh	r2, [r3, #14]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	89db      	ldrh	r3, [r3, #14]
 8016290:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016292:	8abb      	ldrh	r3, [r7, #20]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d139      	bne.n	801630c <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	7b1b      	ldrb	r3, [r3, #12]
 80162a2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	7b5b      	ldrb	r3, [r3, #13]
 80162a8:	f003 0302 	and.w	r3, r3, #2
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d011      	beq.n	80162d4 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	691b      	ldr	r3, [r3, #16]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d106      	bne.n	80162ca <pbuf_free+0xba>
 80162bc:	4b18      	ldr	r3, [pc, #96]	@ (8016320 <pbuf_free+0x110>)
 80162be:	f240 22f9 	movw	r2, #761	@ 0x2f9
 80162c2:	491c      	ldr	r1, [pc, #112]	@ (8016334 <pbuf_free+0x124>)
 80162c4:	4818      	ldr	r0, [pc, #96]	@ (8016328 <pbuf_free+0x118>)
 80162c6:	f00b ffc1 	bl	802224c <iprintf>
        pc->custom_free_function(p);
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	691b      	ldr	r3, [r3, #16]
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	4798      	blx	r3
 80162d2:	e015      	b.n	8016300 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80162d4:	89fb      	ldrh	r3, [r7, #14]
 80162d6:	2b03      	cmp	r3, #3
 80162d8:	d104      	bne.n	80162e4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80162da:	6879      	ldr	r1, [r7, #4]
 80162dc:	2008      	movs	r0, #8
 80162de:	f7ff f9ed 	bl	80156bc <memp_free>
 80162e2:	e00d      	b.n	8016300 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80162e4:	89fb      	ldrh	r3, [r7, #14]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d002      	beq.n	80162f0 <pbuf_free+0xe0>
 80162ea:	89fb      	ldrh	r3, [r7, #14]
 80162ec:	2b02      	cmp	r3, #2
 80162ee:	d104      	bne.n	80162fa <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80162f0:	6879      	ldr	r1, [r7, #4]
 80162f2:	2007      	movs	r0, #7
 80162f4:	f7ff f9e2 	bl	80156bc <memp_free>
 80162f8:	e002      	b.n	8016300 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f7fe fe64 	bl	8014fc8 <mem_free>
        }
      }
      count++;
 8016300:	7dfb      	ldrb	r3, [r7, #23]
 8016302:	3301      	adds	r3, #1
 8016304:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	607b      	str	r3, [r7, #4]
 801630a:	e001      	b.n	8016310 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 801630c:	2300      	movs	r3, #0
 801630e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d1a9      	bne.n	801626a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016316:	7dfb      	ldrb	r3, [r7, #23]
}
 8016318:	4618      	mov	r0, r3
 801631a:	3718      	adds	r7, #24
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}
 8016320:	08026110 	.word	0x08026110
 8016324:	08026348 	.word	0x08026348
 8016328:	0802615c 	.word	0x0802615c
 801632c:	08026384 	.word	0x08026384
 8016330:	0802639c 	.word	0x0802639c
 8016334:	080263b4 	.word	0x080263b4

08016338 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016338:	b480      	push	{r7}
 801633a:	b085      	sub	sp, #20
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016340:	2300      	movs	r3, #0
 8016342:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016344:	e005      	b.n	8016352 <pbuf_clen+0x1a>
    ++len;
 8016346:	89fb      	ldrh	r3, [r7, #14]
 8016348:	3301      	adds	r3, #1
 801634a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d1f6      	bne.n	8016346 <pbuf_clen+0xe>
  }
  return len;
 8016358:	89fb      	ldrh	r3, [r7, #14]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	bc80      	pop	{r7}
 8016362:	4770      	bx	lr

08016364 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d010      	beq.n	8016394 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	89db      	ldrh	r3, [r3, #14]
 8016376:	3301      	adds	r3, #1
 8016378:	b29a      	uxth	r2, r3
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	89db      	ldrh	r3, [r3, #14]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d106      	bne.n	8016394 <pbuf_ref+0x30>
 8016386:	4b05      	ldr	r3, [pc, #20]	@ (801639c <pbuf_ref+0x38>)
 8016388:	f240 3239 	movw	r2, #825	@ 0x339
 801638c:	4904      	ldr	r1, [pc, #16]	@ (80163a0 <pbuf_ref+0x3c>)
 801638e:	4805      	ldr	r0, [pc, #20]	@ (80163a4 <pbuf_ref+0x40>)
 8016390:	f00b ff5c 	bl	802224c <iprintf>
  }
}
 8016394:	bf00      	nop
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}
 801639c:	08026110 	.word	0x08026110
 80163a0:	080263d8 	.word	0x080263d8
 80163a4:	0802615c 	.word	0x0802615c

080163a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d002      	beq.n	80163be <pbuf_cat+0x16>
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d107      	bne.n	80163ce <pbuf_cat+0x26>
 80163be:	4b20      	ldr	r3, [pc, #128]	@ (8016440 <pbuf_cat+0x98>)
 80163c0:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80163c4:	491f      	ldr	r1, [pc, #124]	@ (8016444 <pbuf_cat+0x9c>)
 80163c6:	4820      	ldr	r0, [pc, #128]	@ (8016448 <pbuf_cat+0xa0>)
 80163c8:	f00b ff40 	bl	802224c <iprintf>
 80163cc:	e034      	b.n	8016438 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	60fb      	str	r3, [r7, #12]
 80163d2:	e00a      	b.n	80163ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	891a      	ldrh	r2, [r3, #8]
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	891b      	ldrh	r3, [r3, #8]
 80163dc:	4413      	add	r3, r2
 80163de:	b29a      	uxth	r2, r3
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60fb      	str	r3, [r7, #12]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d1f0      	bne.n	80163d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	891a      	ldrh	r2, [r3, #8]
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	895b      	ldrh	r3, [r3, #10]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d006      	beq.n	801640c <pbuf_cat+0x64>
 80163fe:	4b10      	ldr	r3, [pc, #64]	@ (8016440 <pbuf_cat+0x98>)
 8016400:	f240 3255 	movw	r2, #853	@ 0x355
 8016404:	4911      	ldr	r1, [pc, #68]	@ (801644c <pbuf_cat+0xa4>)
 8016406:	4810      	ldr	r0, [pc, #64]	@ (8016448 <pbuf_cat+0xa0>)
 8016408:	f00b ff20 	bl	802224c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d006      	beq.n	8016422 <pbuf_cat+0x7a>
 8016414:	4b0a      	ldr	r3, [pc, #40]	@ (8016440 <pbuf_cat+0x98>)
 8016416:	f240 3256 	movw	r2, #854	@ 0x356
 801641a:	490d      	ldr	r1, [pc, #52]	@ (8016450 <pbuf_cat+0xa8>)
 801641c:	480a      	ldr	r0, [pc, #40]	@ (8016448 <pbuf_cat+0xa0>)
 801641e:	f00b ff15 	bl	802224c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	891a      	ldrh	r2, [r3, #8]
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	891b      	ldrh	r3, [r3, #8]
 801642a:	4413      	add	r3, r2
 801642c:	b29a      	uxth	r2, r3
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	683a      	ldr	r2, [r7, #0]
 8016436:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	08026110 	.word	0x08026110
 8016444:	080263ec 	.word	0x080263ec
 8016448:	0802615c 	.word	0x0802615c
 801644c:	08026424 	.word	0x08026424
 8016450:	08026454 	.word	0x08026454

08016454 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f7ff ffa1 	bl	80163a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8016466:	6838      	ldr	r0, [r7, #0]
 8016468:	f7ff ff7c 	bl	8016364 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801646c:	bf00      	nop
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801647e:	2300      	movs	r3, #0
 8016480:	81fb      	strh	r3, [r7, #14]
 8016482:	2300      	movs	r3, #0
 8016484:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d008      	beq.n	801649e <pbuf_copy+0x2a>
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d005      	beq.n	801649e <pbuf_copy+0x2a>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	891a      	ldrh	r2, [r3, #8]
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	891b      	ldrh	r3, [r3, #8]
 801649a:	429a      	cmp	r2, r3
 801649c:	d209      	bcs.n	80164b2 <pbuf_copy+0x3e>
 801649e:	4b54      	ldr	r3, [pc, #336]	@ (80165f0 <pbuf_copy+0x17c>)
 80164a0:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 80164a4:	4953      	ldr	r1, [pc, #332]	@ (80165f4 <pbuf_copy+0x180>)
 80164a6:	4854      	ldr	r0, [pc, #336]	@ (80165f8 <pbuf_copy+0x184>)
 80164a8:	f00b fed0 	bl	802224c <iprintf>
 80164ac:	f06f 030f 	mvn.w	r3, #15
 80164b0:	e099      	b.n	80165e6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	895b      	ldrh	r3, [r3, #10]
 80164b6:	461a      	mov	r2, r3
 80164b8:	89fb      	ldrh	r3, [r7, #14]
 80164ba:	1ad2      	subs	r2, r2, r3
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	895b      	ldrh	r3, [r3, #10]
 80164c0:	4619      	mov	r1, r3
 80164c2:	89bb      	ldrh	r3, [r7, #12]
 80164c4:	1acb      	subs	r3, r1, r3
 80164c6:	429a      	cmp	r2, r3
 80164c8:	db05      	blt.n	80164d6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	895a      	ldrh	r2, [r3, #10]
 80164ce:	89bb      	ldrh	r3, [r7, #12]
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	817b      	strh	r3, [r7, #10]
 80164d4:	e004      	b.n	80164e0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	895a      	ldrh	r2, [r3, #10]
 80164da:	89fb      	ldrh	r3, [r7, #14]
 80164dc:	1ad3      	subs	r3, r2, r3
 80164de:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	685a      	ldr	r2, [r3, #4]
 80164e4:	89fb      	ldrh	r3, [r7, #14]
 80164e6:	18d0      	adds	r0, r2, r3
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	685a      	ldr	r2, [r3, #4]
 80164ec:	89bb      	ldrh	r3, [r7, #12]
 80164ee:	4413      	add	r3, r2
 80164f0:	897a      	ldrh	r2, [r7, #10]
 80164f2:	4619      	mov	r1, r3
 80164f4:	f00c f9a5 	bl	8022842 <memcpy>
    offset_to += len;
 80164f8:	89fa      	ldrh	r2, [r7, #14]
 80164fa:	897b      	ldrh	r3, [r7, #10]
 80164fc:	4413      	add	r3, r2
 80164fe:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8016500:	89ba      	ldrh	r2, [r7, #12]
 8016502:	897b      	ldrh	r3, [r7, #10]
 8016504:	4413      	add	r3, r2
 8016506:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	895b      	ldrh	r3, [r3, #10]
 801650c:	89fa      	ldrh	r2, [r7, #14]
 801650e:	429a      	cmp	r2, r3
 8016510:	d906      	bls.n	8016520 <pbuf_copy+0xac>
 8016512:	4b37      	ldr	r3, [pc, #220]	@ (80165f0 <pbuf_copy+0x17c>)
 8016514:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016518:	4938      	ldr	r1, [pc, #224]	@ (80165fc <pbuf_copy+0x188>)
 801651a:	4837      	ldr	r0, [pc, #220]	@ (80165f8 <pbuf_copy+0x184>)
 801651c:	f00b fe96 	bl	802224c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	895b      	ldrh	r3, [r3, #10]
 8016524:	89ba      	ldrh	r2, [r7, #12]
 8016526:	429a      	cmp	r2, r3
 8016528:	d906      	bls.n	8016538 <pbuf_copy+0xc4>
 801652a:	4b31      	ldr	r3, [pc, #196]	@ (80165f0 <pbuf_copy+0x17c>)
 801652c:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8016530:	4933      	ldr	r1, [pc, #204]	@ (8016600 <pbuf_copy+0x18c>)
 8016532:	4831      	ldr	r0, [pc, #196]	@ (80165f8 <pbuf_copy+0x184>)
 8016534:	f00b fe8a 	bl	802224c <iprintf>
    if (offset_from >= p_from->len) {
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	895b      	ldrh	r3, [r3, #10]
 801653c:	89ba      	ldrh	r2, [r7, #12]
 801653e:	429a      	cmp	r2, r3
 8016540:	d304      	bcc.n	801654c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016542:	2300      	movs	r3, #0
 8016544:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	895b      	ldrh	r3, [r3, #10]
 8016550:	89fa      	ldrh	r2, [r7, #14]
 8016552:	429a      	cmp	r2, r3
 8016554:	d114      	bne.n	8016580 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016556:	2300      	movs	r3, #0
 8016558:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d10c      	bne.n	8016580 <pbuf_copy+0x10c>
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d009      	beq.n	8016580 <pbuf_copy+0x10c>
 801656c:	4b20      	ldr	r3, [pc, #128]	@ (80165f0 <pbuf_copy+0x17c>)
 801656e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016572:	4924      	ldr	r1, [pc, #144]	@ (8016604 <pbuf_copy+0x190>)
 8016574:	4820      	ldr	r0, [pc, #128]	@ (80165f8 <pbuf_copy+0x184>)
 8016576:	f00b fe69 	bl	802224c <iprintf>
 801657a:	f06f 030f 	mvn.w	r3, #15
 801657e:	e032      	b.n	80165e6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d013      	beq.n	80165ae <pbuf_copy+0x13a>
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	895a      	ldrh	r2, [r3, #10]
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	891b      	ldrh	r3, [r3, #8]
 801658e:	429a      	cmp	r2, r3
 8016590:	d10d      	bne.n	80165ae <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d009      	beq.n	80165ae <pbuf_copy+0x13a>
 801659a:	4b15      	ldr	r3, [pc, #84]	@ (80165f0 <pbuf_copy+0x17c>)
 801659c:	f240 32dd 	movw	r2, #989	@ 0x3dd
 80165a0:	4919      	ldr	r1, [pc, #100]	@ (8016608 <pbuf_copy+0x194>)
 80165a2:	4815      	ldr	r0, [pc, #84]	@ (80165f8 <pbuf_copy+0x184>)
 80165a4:	f00b fe52 	bl	802224c <iprintf>
 80165a8:	f06f 0305 	mvn.w	r3, #5
 80165ac:	e01b      	b.n	80165e6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d013      	beq.n	80165dc <pbuf_copy+0x168>
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	895a      	ldrh	r2, [r3, #10]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	891b      	ldrh	r3, [r3, #8]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d10d      	bne.n	80165dc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d009      	beq.n	80165dc <pbuf_copy+0x168>
 80165c8:	4b09      	ldr	r3, [pc, #36]	@ (80165f0 <pbuf_copy+0x17c>)
 80165ca:	f240 32e2 	movw	r2, #994	@ 0x3e2
 80165ce:	490e      	ldr	r1, [pc, #56]	@ (8016608 <pbuf_copy+0x194>)
 80165d0:	4809      	ldr	r0, [pc, #36]	@ (80165f8 <pbuf_copy+0x184>)
 80165d2:	f00b fe3b 	bl	802224c <iprintf>
 80165d6:	f06f 0305 	mvn.w	r3, #5
 80165da:	e004      	b.n	80165e6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f47f af67 	bne.w	80164b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80165e4:	2300      	movs	r3, #0
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3710      	adds	r7, #16
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	08026110 	.word	0x08026110
 80165f4:	080264a0 	.word	0x080264a0
 80165f8:	0802615c 	.word	0x0802615c
 80165fc:	080264d0 	.word	0x080264d0
 8016600:	080264e8 	.word	0x080264e8
 8016604:	08026504 	.word	0x08026504
 8016608:	08026514 	.word	0x08026514

0801660c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b088      	sub	sp, #32
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	4611      	mov	r1, r2
 8016618:	461a      	mov	r2, r3
 801661a:	460b      	mov	r3, r1
 801661c:	80fb      	strh	r3, [r7, #6]
 801661e:	4613      	mov	r3, r2
 8016620:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016622:	2300      	movs	r3, #0
 8016624:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d108      	bne.n	801663e <pbuf_copy_partial+0x32>
 801662c:	4b30      	ldr	r3, [pc, #192]	@ (80166f0 <pbuf_copy_partial+0xe4>)
 801662e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8016632:	4930      	ldr	r1, [pc, #192]	@ (80166f4 <pbuf_copy_partial+0xe8>)
 8016634:	4830      	ldr	r0, [pc, #192]	@ (80166f8 <pbuf_copy_partial+0xec>)
 8016636:	f00b fe09 	bl	802224c <iprintf>
 801663a:	2300      	movs	r3, #0
 801663c:	e054      	b.n	80166e8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d108      	bne.n	8016656 <pbuf_copy_partial+0x4a>
 8016644:	4b2a      	ldr	r3, [pc, #168]	@ (80166f0 <pbuf_copy_partial+0xe4>)
 8016646:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801664a:	492c      	ldr	r1, [pc, #176]	@ (80166fc <pbuf_copy_partial+0xf0>)
 801664c:	482a      	ldr	r0, [pc, #168]	@ (80166f8 <pbuf_copy_partial+0xec>)
 801664e:	f00b fdfd 	bl	802224c <iprintf>
 8016652:	2300      	movs	r3, #0
 8016654:	e048      	b.n	80166e8 <pbuf_copy_partial+0xdc>

  left = 0;
 8016656:	2300      	movs	r3, #0
 8016658:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <pbuf_copy_partial+0x5a>
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d101      	bne.n	801666a <pbuf_copy_partial+0x5e>
    return 0;
 8016666:	2300      	movs	r3, #0
 8016668:	e03e      	b.n	80166e8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	61fb      	str	r3, [r7, #28]
 801666e:	e034      	b.n	80166da <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8016670:	88bb      	ldrh	r3, [r7, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d00a      	beq.n	801668c <pbuf_copy_partial+0x80>
 8016676:	69fb      	ldr	r3, [r7, #28]
 8016678:	895b      	ldrh	r3, [r3, #10]
 801667a:	88ba      	ldrh	r2, [r7, #4]
 801667c:	429a      	cmp	r2, r3
 801667e:	d305      	bcc.n	801668c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	895b      	ldrh	r3, [r3, #10]
 8016684:	88ba      	ldrh	r2, [r7, #4]
 8016686:	1ad3      	subs	r3, r2, r3
 8016688:	80bb      	strh	r3, [r7, #4]
 801668a:	e023      	b.n	80166d4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	895a      	ldrh	r2, [r3, #10]
 8016690:	88bb      	ldrh	r3, [r7, #4]
 8016692:	1ad3      	subs	r3, r2, r3
 8016694:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016696:	8b3a      	ldrh	r2, [r7, #24]
 8016698:	88fb      	ldrh	r3, [r7, #6]
 801669a:	429a      	cmp	r2, r3
 801669c:	d901      	bls.n	80166a2 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801669e:	88fb      	ldrh	r3, [r7, #6]
 80166a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80166a2:	8b7b      	ldrh	r3, [r7, #26]
 80166a4:	68ba      	ldr	r2, [r7, #8]
 80166a6:	18d0      	adds	r0, r2, r3
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	685a      	ldr	r2, [r3, #4]
 80166ac:	88bb      	ldrh	r3, [r7, #4]
 80166ae:	4413      	add	r3, r2
 80166b0:	8b3a      	ldrh	r2, [r7, #24]
 80166b2:	4619      	mov	r1, r3
 80166b4:	f00c f8c5 	bl	8022842 <memcpy>
      copied_total += buf_copy_len;
 80166b8:	8afa      	ldrh	r2, [r7, #22]
 80166ba:	8b3b      	ldrh	r3, [r7, #24]
 80166bc:	4413      	add	r3, r2
 80166be:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80166c0:	8b7a      	ldrh	r2, [r7, #26]
 80166c2:	8b3b      	ldrh	r3, [r7, #24]
 80166c4:	4413      	add	r3, r2
 80166c6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80166c8:	88fa      	ldrh	r2, [r7, #6]
 80166ca:	8b3b      	ldrh	r3, [r7, #24]
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80166d4:	69fb      	ldr	r3, [r7, #28]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	61fb      	str	r3, [r7, #28]
 80166da:	88fb      	ldrh	r3, [r7, #6]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d002      	beq.n	80166e6 <pbuf_copy_partial+0xda>
 80166e0:	69fb      	ldr	r3, [r7, #28]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d1c4      	bne.n	8016670 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80166e6:	8afb      	ldrh	r3, [r7, #22]
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3720      	adds	r7, #32
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	08026110 	.word	0x08026110
 80166f4:	08026540 	.word	0x08026540
 80166f8:	0802615c 	.word	0x0802615c
 80166fc:	08026560 	.word	0x08026560

08016700 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8016700:	b480      	push	{r7}
 8016702:	b087      	sub	sp, #28
 8016704:	af00      	add	r7, sp, #0
 8016706:	60f8      	str	r0, [r7, #12]
 8016708:	460b      	mov	r3, r1
 801670a:	607a      	str	r2, [r7, #4]
 801670c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801670e:	897b      	ldrh	r3, [r7, #10]
 8016710:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8016716:	e007      	b.n	8016728 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	895b      	ldrh	r3, [r3, #10]
 801671c:	8afa      	ldrh	r2, [r7, #22]
 801671e:	1ad3      	subs	r3, r2, r3
 8016720:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d004      	beq.n	8016738 <pbuf_skip_const+0x38>
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	895b      	ldrh	r3, [r3, #10]
 8016732:	8afa      	ldrh	r2, [r7, #22]
 8016734:	429a      	cmp	r2, r3
 8016736:	d2ef      	bcs.n	8016718 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d002      	beq.n	8016744 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	8afa      	ldrh	r2, [r7, #22]
 8016742:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8016744:	693b      	ldr	r3, [r7, #16]
}
 8016746:	4618      	mov	r0, r3
 8016748:	371c      	adds	r7, #28
 801674a:	46bd      	mov	sp, r7
 801674c:	bc80      	pop	{r7}
 801674e:	4770      	bx	lr

08016750 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	460b      	mov	r3, r1
 801675a:	607a      	str	r2, [r7, #4]
 801675c:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 801675e:	897b      	ldrh	r3, [r7, #10]
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	4619      	mov	r1, r3
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	f7ff ffcb 	bl	8016700 <pbuf_skip_const>
 801676a:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 801676c:	697b      	ldr	r3, [r7, #20]
}
 801676e:	4618      	mov	r0, r3
 8016770:	3718      	adds	r7, #24
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
	...

08016778 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b088      	sub	sp, #32
 801677c:	af00      	add	r7, sp, #0
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	4613      	mov	r3, r2
 8016784:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8016786:	88fb      	ldrh	r3, [r7, #6]
 8016788:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 801678a:	2300      	movs	r3, #0
 801678c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d109      	bne.n	80167a8 <pbuf_take+0x30>
 8016794:	4b3a      	ldr	r3, [pc, #232]	@ (8016880 <pbuf_take+0x108>)
 8016796:	f240 4284 	movw	r2, #1156	@ 0x484
 801679a:	493a      	ldr	r1, [pc, #232]	@ (8016884 <pbuf_take+0x10c>)
 801679c:	483a      	ldr	r0, [pc, #232]	@ (8016888 <pbuf_take+0x110>)
 801679e:	f00b fd55 	bl	802224c <iprintf>
 80167a2:	f06f 030f 	mvn.w	r3, #15
 80167a6:	e066      	b.n	8016876 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d109      	bne.n	80167c2 <pbuf_take+0x4a>
 80167ae:	4b34      	ldr	r3, [pc, #208]	@ (8016880 <pbuf_take+0x108>)
 80167b0:	f240 4285 	movw	r2, #1157	@ 0x485
 80167b4:	4935      	ldr	r1, [pc, #212]	@ (801688c <pbuf_take+0x114>)
 80167b6:	4834      	ldr	r0, [pc, #208]	@ (8016888 <pbuf_take+0x110>)
 80167b8:	f00b fd48 	bl	802224c <iprintf>
 80167bc:	f06f 030f 	mvn.w	r3, #15
 80167c0:	e059      	b.n	8016876 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	891b      	ldrh	r3, [r3, #8]
 80167c6:	88fa      	ldrh	r2, [r7, #6]
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d909      	bls.n	80167e0 <pbuf_take+0x68>
 80167cc:	4b2c      	ldr	r3, [pc, #176]	@ (8016880 <pbuf_take+0x108>)
 80167ce:	f240 4286 	movw	r2, #1158	@ 0x486
 80167d2:	492f      	ldr	r1, [pc, #188]	@ (8016890 <pbuf_take+0x118>)
 80167d4:	482c      	ldr	r0, [pc, #176]	@ (8016888 <pbuf_take+0x110>)
 80167d6:	f00b fd39 	bl	802224c <iprintf>
 80167da:	f04f 33ff 	mov.w	r3, #4294967295
 80167de:	e04a      	b.n	8016876 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d007      	beq.n	80167f6 <pbuf_take+0x7e>
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d004      	beq.n	80167f6 <pbuf_take+0x7e>
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	891b      	ldrh	r3, [r3, #8]
 80167f0:	88fa      	ldrh	r2, [r7, #6]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d902      	bls.n	80167fc <pbuf_take+0x84>
    return ERR_ARG;
 80167f6:	f06f 030f 	mvn.w	r3, #15
 80167fa:	e03c      	b.n	8016876 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	61fb      	str	r3, [r7, #28]
 8016800:	e027      	b.n	8016852 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d106      	bne.n	8016816 <pbuf_take+0x9e>
 8016808:	4b1d      	ldr	r3, [pc, #116]	@ (8016880 <pbuf_take+0x108>)
 801680a:	f240 428e 	movw	r2, #1166	@ 0x48e
 801680e:	4921      	ldr	r1, [pc, #132]	@ (8016894 <pbuf_take+0x11c>)
 8016810:	481d      	ldr	r0, [pc, #116]	@ (8016888 <pbuf_take+0x110>)
 8016812:	f00b fd1b 	bl	802224c <iprintf>
    buf_copy_len = total_copy_len;
 8016816:	8b3b      	ldrh	r3, [r7, #24]
 8016818:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	895b      	ldrh	r3, [r3, #10]
 801681e:	8b7a      	ldrh	r2, [r7, #26]
 8016820:	429a      	cmp	r2, r3
 8016822:	d902      	bls.n	801682a <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	895b      	ldrh	r3, [r3, #10]
 8016828:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 801682a:	69fb      	ldr	r3, [r7, #28]
 801682c:	6858      	ldr	r0, [r3, #4]
 801682e:	8afb      	ldrh	r3, [r7, #22]
 8016830:	68ba      	ldr	r2, [r7, #8]
 8016832:	4413      	add	r3, r2
 8016834:	8b7a      	ldrh	r2, [r7, #26]
 8016836:	4619      	mov	r1, r3
 8016838:	f00c f803 	bl	8022842 <memcpy>
    total_copy_len -= buf_copy_len;
 801683c:	8b3a      	ldrh	r2, [r7, #24]
 801683e:	8b7b      	ldrh	r3, [r7, #26]
 8016840:	1ad3      	subs	r3, r2, r3
 8016842:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8016844:	8afa      	ldrh	r2, [r7, #22]
 8016846:	8b7b      	ldrh	r3, [r7, #26]
 8016848:	4413      	add	r3, r2
 801684a:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	61fb      	str	r3, [r7, #28]
 8016852:	8b3b      	ldrh	r3, [r7, #24]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d1d4      	bne.n	8016802 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8016858:	8b3b      	ldrh	r3, [r7, #24]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d103      	bne.n	8016866 <pbuf_take+0xee>
 801685e:	8afa      	ldrh	r2, [r7, #22]
 8016860:	88fb      	ldrh	r3, [r7, #6]
 8016862:	429a      	cmp	r2, r3
 8016864:	d006      	beq.n	8016874 <pbuf_take+0xfc>
 8016866:	4b06      	ldr	r3, [pc, #24]	@ (8016880 <pbuf_take+0x108>)
 8016868:	f240 4299 	movw	r2, #1177	@ 0x499
 801686c:	490a      	ldr	r1, [pc, #40]	@ (8016898 <pbuf_take+0x120>)
 801686e:	4806      	ldr	r0, [pc, #24]	@ (8016888 <pbuf_take+0x110>)
 8016870:	f00b fcec 	bl	802224c <iprintf>
  return ERR_OK;
 8016874:	2300      	movs	r3, #0
}
 8016876:	4618      	mov	r0, r3
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	08026110 	.word	0x08026110
 8016884:	08026584 	.word	0x08026584
 8016888:	0802615c 	.word	0x0802615c
 801688c:	0802659c 	.word	0x0802659c
 8016890:	080265b8 	.word	0x080265b8
 8016894:	080265d8 	.word	0x080265d8
 8016898:	080265f0 	.word	0x080265f0

0801689c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b088      	sub	sp, #32
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	4611      	mov	r1, r2
 80168a8:	461a      	mov	r2, r3
 80168aa:	460b      	mov	r3, r1
 80168ac:	80fb      	strh	r3, [r7, #6]
 80168ae:	4613      	mov	r3, r2
 80168b0:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 80168b2:	f107 0210 	add.w	r2, r7, #16
 80168b6:	88bb      	ldrh	r3, [r7, #4]
 80168b8:	4619      	mov	r1, r3
 80168ba:	68f8      	ldr	r0, [r7, #12]
 80168bc:	f7ff ff48 	bl	8016750 <pbuf_skip>
 80168c0:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80168c2:	69fb      	ldr	r3, [r7, #28]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d035      	beq.n	8016934 <pbuf_take_at+0x98>
 80168c8:	69fb      	ldr	r3, [r7, #28]
 80168ca:	891b      	ldrh	r3, [r3, #8]
 80168cc:	461a      	mov	r2, r3
 80168ce:	8a3b      	ldrh	r3, [r7, #16]
 80168d0:	4619      	mov	r1, r3
 80168d2:	88fb      	ldrh	r3, [r7, #6]
 80168d4:	440b      	add	r3, r1
 80168d6:	429a      	cmp	r2, r3
 80168d8:	db2c      	blt.n	8016934 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 80168da:	88fb      	ldrh	r3, [r7, #6]
 80168dc:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 80168e2:	88fa      	ldrh	r2, [r7, #6]
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	895b      	ldrh	r3, [r3, #10]
 80168e8:	4619      	mov	r1, r3
 80168ea:	8a3b      	ldrh	r3, [r7, #16]
 80168ec:	1acb      	subs	r3, r1, r3
 80168ee:	4293      	cmp	r3, r2
 80168f0:	bfa8      	it	ge
 80168f2:	4613      	movge	r3, r2
 80168f4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	685b      	ldr	r3, [r3, #4]
 80168fa:	8a3a      	ldrh	r2, [r7, #16]
 80168fc:	4413      	add	r3, r2
 80168fe:	8a7a      	ldrh	r2, [r7, #18]
 8016900:	68b9      	ldr	r1, [r7, #8]
 8016902:	4618      	mov	r0, r3
 8016904:	f00b ff9d 	bl	8022842 <memcpy>
    remaining_len -= first_copy_len;
 8016908:	8b7a      	ldrh	r2, [r7, #26]
 801690a:	8a7b      	ldrh	r3, [r7, #18]
 801690c:	1ad3      	subs	r3, r2, r3
 801690e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8016910:	8a7b      	ldrh	r3, [r7, #18]
 8016912:	697a      	ldr	r2, [r7, #20]
 8016914:	4413      	add	r3, r2
 8016916:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8016918:	8b7b      	ldrh	r3, [r7, #26]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d008      	beq.n	8016930 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	8b7a      	ldrh	r2, [r7, #26]
 8016924:	6979      	ldr	r1, [r7, #20]
 8016926:	4618      	mov	r0, r3
 8016928:	f7ff ff26 	bl	8016778 <pbuf_take>
 801692c:	4603      	mov	r3, r0
 801692e:	e003      	b.n	8016938 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 8016930:	2300      	movs	r3, #0
 8016932:	e001      	b.n	8016938 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 8016934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016938:	4618      	mov	r0, r3
 801693a:	3720      	adds	r7, #32
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8016940:	b480      	push	{r7}
 8016942:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8016944:	bf00      	nop
 8016946:	46bd      	mov	sp, r7
 8016948:	bc80      	pop	{r7}
 801694a:	4770      	bx	lr

0801694c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801694c:	b480      	push	{r7}
 801694e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016950:	bf00      	nop
 8016952:	46bd      	mov	sp, r7
 8016954:	bc80      	pop	{r7}
 8016956:	4770      	bx	lr

08016958 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801695c:	f000 ffaa 	bl	80178b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016960:	4b07      	ldr	r3, [pc, #28]	@ (8016980 <tcp_tmr+0x28>)
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	3301      	adds	r3, #1
 8016966:	b2da      	uxtb	r2, r3
 8016968:	4b05      	ldr	r3, [pc, #20]	@ (8016980 <tcp_tmr+0x28>)
 801696a:	701a      	strb	r2, [r3, #0]
 801696c:	4b04      	ldr	r3, [pc, #16]	@ (8016980 <tcp_tmr+0x28>)
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	f003 0301 	and.w	r3, r3, #1
 8016974:	2b00      	cmp	r3, #0
 8016976:	d001      	beq.n	801697c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016978:	f000 fcd8 	bl	801732c <tcp_slowtmr>
  }
}
 801697c:	bf00      	nop
 801697e:	bd80      	pop	{r7, pc}
 8016980:	2000bd99 	.word	0x2000bd99

08016984 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016984:	b480      	push	{r7}
 8016986:	b085      	sub	sp, #20
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	60fb      	str	r3, [r7, #12]
 8016992:	e00a      	b.n	80169aa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016998:	683a      	ldr	r2, [r7, #0]
 801699a:	429a      	cmp	r2, r3
 801699c:	d102      	bne.n	80169a4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2200      	movs	r2, #0
 80169a2:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	68db      	ldr	r3, [r3, #12]
 80169a8:	60fb      	str	r3, [r7, #12]
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d1f1      	bne.n	8016994 <tcp_remove_listener+0x10>
      }
   }
}
 80169b0:	bf00      	nop
 80169b2:	bf00      	nop
 80169b4:	3714      	adds	r7, #20
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bc80      	pop	{r7}
 80169ba:	4770      	bx	lr

080169bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d105      	bne.n	80169d6 <tcp_listen_closed+0x1a>
 80169ca:	4b13      	ldr	r3, [pc, #76]	@ (8016a18 <tcp_listen_closed+0x5c>)
 80169cc:	22c0      	movs	r2, #192	@ 0xc0
 80169ce:	4913      	ldr	r1, [pc, #76]	@ (8016a1c <tcp_listen_closed+0x60>)
 80169d0:	4813      	ldr	r0, [pc, #76]	@ (8016a20 <tcp_listen_closed+0x64>)
 80169d2:	f00b fc3b 	bl	802224c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	7d1b      	ldrb	r3, [r3, #20]
 80169da:	2b01      	cmp	r3, #1
 80169dc:	d005      	beq.n	80169ea <tcp_listen_closed+0x2e>
 80169de:	4b0e      	ldr	r3, [pc, #56]	@ (8016a18 <tcp_listen_closed+0x5c>)
 80169e0:	22c1      	movs	r2, #193	@ 0xc1
 80169e2:	4910      	ldr	r1, [pc, #64]	@ (8016a24 <tcp_listen_closed+0x68>)
 80169e4:	480e      	ldr	r0, [pc, #56]	@ (8016a20 <tcp_listen_closed+0x64>)
 80169e6:	f00b fc31 	bl	802224c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80169ea:	2301      	movs	r3, #1
 80169ec:	60fb      	str	r3, [r7, #12]
 80169ee:	e00b      	b.n	8016a08 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80169f0:	4a0d      	ldr	r2, [pc, #52]	@ (8016a28 <tcp_listen_closed+0x6c>)
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	6879      	ldr	r1, [r7, #4]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7ff ffc1 	bl	8016984 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	3301      	adds	r3, #1
 8016a06:	60fb      	str	r3, [r7, #12]
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2b03      	cmp	r3, #3
 8016a0c:	d9f0      	bls.n	80169f0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016a0e:	bf00      	nop
 8016a10:	bf00      	nop
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}
 8016a18:	08026694 	.word	0x08026694
 8016a1c:	080266c4 	.word	0x080266c4
 8016a20:	080266d0 	.word	0x080266d0
 8016a24:	080266f8 	.word	0x080266f8
 8016a28:	08032e98 	.word	0x08032e98

08016a2c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016a2c:	b5b0      	push	{r4, r5, r7, lr}
 8016a2e:	b086      	sub	sp, #24
 8016a30:	af02      	add	r7, sp, #8
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	460b      	mov	r3, r1
 8016a36:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016a38:	78fb      	ldrb	r3, [r7, #3]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d075      	beq.n	8016b2a <tcp_close_shutdown+0xfe>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	7d1b      	ldrb	r3, [r3, #20]
 8016a42:	2b04      	cmp	r3, #4
 8016a44:	d003      	beq.n	8016a4e <tcp_close_shutdown+0x22>
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	7d1b      	ldrb	r3, [r3, #20]
 8016a4a:	2b07      	cmp	r3, #7
 8016a4c:	d16d      	bne.n	8016b2a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d104      	bne.n	8016a60 <tcp_close_shutdown+0x34>
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016a5e:	d064      	beq.n	8016b2a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	7e9b      	ldrb	r3, [r3, #26]
 8016a64:	f003 0310 	and.w	r3, r3, #16
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d106      	bne.n	8016a7a <tcp_close_shutdown+0x4e>
 8016a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8016be8 <tcp_close_shutdown+0x1bc>)
 8016a6e:	f240 120f 	movw	r2, #271	@ 0x10f
 8016a72:	495e      	ldr	r1, [pc, #376]	@ (8016bec <tcp_close_shutdown+0x1c0>)
 8016a74:	485e      	ldr	r0, [pc, #376]	@ (8016bf0 <tcp_close_shutdown+0x1c4>)
 8016a76:	f00b fbe9 	bl	802224c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016a82:	687c      	ldr	r4, [r7, #4]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	1d1d      	adds	r5, r3, #4
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	8adb      	ldrh	r3, [r3, #22]
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	8b12      	ldrh	r2, [r2, #24]
 8016a90:	9201      	str	r2, [sp, #4]
 8016a92:	9300      	str	r3, [sp, #0]
 8016a94:	462b      	mov	r3, r5
 8016a96:	4622      	mov	r2, r4
 8016a98:	f004 fffc 	bl	801ba94 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f001 fa73 	bl	8017f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016aa2:	4b54      	ldr	r3, [pc, #336]	@ (8016bf4 <tcp_close_shutdown+0x1c8>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d105      	bne.n	8016ab8 <tcp_close_shutdown+0x8c>
 8016aac:	4b51      	ldr	r3, [pc, #324]	@ (8016bf4 <tcp_close_shutdown+0x1c8>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	4a50      	ldr	r2, [pc, #320]	@ (8016bf4 <tcp_close_shutdown+0x1c8>)
 8016ab4:	6013      	str	r3, [r2, #0]
 8016ab6:	e013      	b.n	8016ae0 <tcp_close_shutdown+0xb4>
 8016ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8016bf4 <tcp_close_shutdown+0x1c8>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	e00c      	b.n	8016ada <tcp_close_shutdown+0xae>
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d104      	bne.n	8016ad4 <tcp_close_shutdown+0xa8>
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	68da      	ldr	r2, [r3, #12]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	60da      	str	r2, [r3, #12]
 8016ad2:	e005      	b.n	8016ae0 <tcp_close_shutdown+0xb4>
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	60fb      	str	r3, [r7, #12]
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d1ef      	bne.n	8016ac0 <tcp_close_shutdown+0x94>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	60da      	str	r2, [r3, #12]
 8016ae6:	4b44      	ldr	r3, [pc, #272]	@ (8016bf8 <tcp_close_shutdown+0x1cc>)
 8016ae8:	2201      	movs	r2, #1
 8016aea:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	7d1b      	ldrb	r3, [r3, #20]
 8016af0:	2b04      	cmp	r3, #4
 8016af2:	d10c      	bne.n	8016b0e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	220a      	movs	r2, #10
 8016af8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016afa:	4b40      	ldr	r3, [pc, #256]	@ (8016bfc <tcp_close_shutdown+0x1d0>)
 8016afc:	681a      	ldr	r2, [r3, #0]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	60da      	str	r2, [r3, #12]
 8016b02:	4a3e      	ldr	r2, [pc, #248]	@ (8016bfc <tcp_close_shutdown+0x1d0>)
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6013      	str	r3, [r2, #0]
 8016b08:	f005 fa3c 	bl	801bf84 <tcp_timer_needed>
 8016b0c:	e00b      	b.n	8016b26 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8016b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8016c00 <tcp_close_shutdown+0x1d4>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d102      	bne.n	8016b1e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8016b18:	f003 fe12 	bl	801a740 <tcp_trigger_input_pcb_close>
 8016b1c:	e003      	b.n	8016b26 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8016b1e:	6879      	ldr	r1, [r7, #4]
 8016b20:	2001      	movs	r0, #1
 8016b22:	f7fe fdcb 	bl	80156bc <memp_free>
        }
      }
      return ERR_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	e05a      	b.n	8016be0 <tcp_close_shutdown+0x1b4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	7d1b      	ldrb	r3, [r3, #20]
 8016b2e:	2b02      	cmp	r3, #2
 8016b30:	d03d      	beq.n	8016bae <tcp_close_shutdown+0x182>
 8016b32:	2b02      	cmp	r3, #2
 8016b34:	dc4e      	bgt.n	8016bd4 <tcp_close_shutdown+0x1a8>
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d002      	beq.n	8016b40 <tcp_close_shutdown+0x114>
 8016b3a:	2b01      	cmp	r3, #1
 8016b3c:	d02b      	beq.n	8016b96 <tcp_close_shutdown+0x16a>
 8016b3e:	e049      	b.n	8016bd4 <tcp_close_shutdown+0x1a8>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	8adb      	ldrh	r3, [r3, #22]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d021      	beq.n	8016b8c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016b48:	4b2e      	ldr	r3, [pc, #184]	@ (8016c04 <tcp_close_shutdown+0x1d8>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d105      	bne.n	8016b5e <tcp_close_shutdown+0x132>
 8016b52:	4b2c      	ldr	r3, [pc, #176]	@ (8016c04 <tcp_close_shutdown+0x1d8>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	4a2a      	ldr	r2, [pc, #168]	@ (8016c04 <tcp_close_shutdown+0x1d8>)
 8016b5a:	6013      	str	r3, [r2, #0]
 8016b5c:	e013      	b.n	8016b86 <tcp_close_shutdown+0x15a>
 8016b5e:	4b29      	ldr	r3, [pc, #164]	@ (8016c04 <tcp_close_shutdown+0x1d8>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	60bb      	str	r3, [r7, #8]
 8016b64:	e00c      	b.n	8016b80 <tcp_close_shutdown+0x154>
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	68db      	ldr	r3, [r3, #12]
 8016b6a:	687a      	ldr	r2, [r7, #4]
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d104      	bne.n	8016b7a <tcp_close_shutdown+0x14e>
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	68da      	ldr	r2, [r3, #12]
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	60da      	str	r2, [r3, #12]
 8016b78:	e005      	b.n	8016b86 <tcp_close_shutdown+0x15a>
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	60bb      	str	r3, [r7, #8]
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d1ef      	bne.n	8016b66 <tcp_close_shutdown+0x13a>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	2001      	movs	r0, #1
 8016b90:	f7fe fd94 	bl	80156bc <memp_free>
    break;
 8016b94:	e023      	b.n	8016bde <tcp_close_shutdown+0x1b2>
  case LISTEN:
    tcp_listen_closed(pcb);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7ff ff10 	bl	80169bc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016b9c:	6879      	ldr	r1, [r7, #4]
 8016b9e:	481a      	ldr	r0, [pc, #104]	@ (8016c08 <tcp_close_shutdown+0x1dc>)
 8016ba0:	f001 fa34 	bl	801800c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	2002      	movs	r0, #2
 8016ba8:	f7fe fd88 	bl	80156bc <memp_free>
    break;
 8016bac:	e017      	b.n	8016bde <tcp_close_shutdown+0x1b2>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8016bae:	6879      	ldr	r1, [r7, #4]
 8016bb0:	4810      	ldr	r0, [pc, #64]	@ (8016bf4 <tcp_close_shutdown+0x1c8>)
 8016bb2:	f001 fa2b 	bl	801800c <tcp_pcb_remove>
 8016bb6:	4b10      	ldr	r3, [pc, #64]	@ (8016bf8 <tcp_close_shutdown+0x1cc>)
 8016bb8:	2201      	movs	r2, #1
 8016bba:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8016bbc:	6879      	ldr	r1, [r7, #4]
 8016bbe:	2001      	movs	r0, #1
 8016bc0:	f7fe fd7c 	bl	80156bc <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
 8016bc4:	4b11      	ldr	r3, [pc, #68]	@ (8016c0c <tcp_close_shutdown+0x1e0>)
 8016bc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016bca:	3301      	adds	r3, #1
 8016bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8016c0c <tcp_close_shutdown+0x1e0>)
 8016bce:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
    break;
 8016bd2:	e004      	b.n	8016bde <tcp_close_shutdown+0x1b2>
  default:
    return tcp_close_shutdown_fin(pcb);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 f81b 	bl	8016c10 <tcp_close_shutdown_fin>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	e000      	b.n	8016be0 <tcp_close_shutdown+0x1b4>
  }
  return ERR_OK;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bdb0      	pop	{r4, r5, r7, pc}
 8016be8:	08026694 	.word	0x08026694
 8016bec:	08026710 	.word	0x08026710
 8016bf0:	080266d0 	.word	0x080266d0
 8016bf4:	2000bd90 	.word	0x2000bd90
 8016bf8:	2000bd98 	.word	0x2000bd98
 8016bfc:	2000bd94 	.word	0x2000bd94
 8016c00:	2000bdd0 	.word	0x2000bdd0
 8016c04:	2000bd88 	.word	0x2000bd88
 8016c08:	2000bd8c 	.word	0x2000bd8c
 8016c0c:	2000bbec 	.word	0x2000bbec

08016c10 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d106      	bne.n	8016c2c <tcp_close_shutdown_fin+0x1c>
 8016c1e:	4b38      	ldr	r3, [pc, #224]	@ (8016d00 <tcp_close_shutdown_fin+0xf0>)
 8016c20:	f240 124d 	movw	r2, #333	@ 0x14d
 8016c24:	4937      	ldr	r1, [pc, #220]	@ (8016d04 <tcp_close_shutdown_fin+0xf4>)
 8016c26:	4838      	ldr	r0, [pc, #224]	@ (8016d08 <tcp_close_shutdown_fin+0xf8>)
 8016c28:	f00b fb10 	bl	802224c <iprintf>

  switch (pcb->state) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	7d1b      	ldrb	r3, [r3, #20]
 8016c30:	2b07      	cmp	r3, #7
 8016c32:	d02e      	beq.n	8016c92 <tcp_close_shutdown_fin+0x82>
 8016c34:	2b07      	cmp	r3, #7
 8016c36:	dc40      	bgt.n	8016cba <tcp_close_shutdown_fin+0xaa>
 8016c38:	2b03      	cmp	r3, #3
 8016c3a:	d002      	beq.n	8016c42 <tcp_close_shutdown_fin+0x32>
 8016c3c:	2b04      	cmp	r3, #4
 8016c3e:	d014      	beq.n	8016c6a <tcp_close_shutdown_fin+0x5a>
 8016c40:	e03b      	b.n	8016cba <tcp_close_shutdown_fin+0xaa>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f003 fe06 	bl	801a854 <tcp_send_fin>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d134      	bne.n	8016cbe <tcp_close_shutdown_fin+0xae>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
 8016c54:	4b2d      	ldr	r3, [pc, #180]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016c56:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016c5e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
      pcb->state = FIN_WAIT_1;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2205      	movs	r2, #5
 8016c66:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016c68:	e029      	b.n	8016cbe <tcp_close_shutdown_fin+0xae>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	f003 fdf2 	bl	801a854 <tcp_send_fin>
 8016c70:	4603      	mov	r3, r0
 8016c72:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d122      	bne.n	8016cc2 <tcp_close_shutdown_fin+0xb2>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016c7c:	4b23      	ldr	r3, [pc, #140]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016c7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016c82:	3301      	adds	r3, #1
 8016c84:	4a21      	ldr	r2, [pc, #132]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016c86:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = FIN_WAIT_1;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	2205      	movs	r2, #5
 8016c8e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016c90:	e017      	b.n	8016cc2 <tcp_close_shutdown_fin+0xb2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f003 fdde 	bl	801a854 <tcp_send_fin>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d110      	bne.n	8016cc6 <tcp_close_shutdown_fin+0xb6>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016ca4:	4b19      	ldr	r3, [pc, #100]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016ca6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016caa:	3301      	adds	r3, #1
 8016cac:	4a17      	ldr	r2, [pc, #92]	@ (8016d0c <tcp_close_shutdown_fin+0xfc>)
 8016cae:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = LAST_ACK;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2209      	movs	r2, #9
 8016cb6:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016cb8:	e005      	b.n	8016cc6 <tcp_close_shutdown_fin+0xb6>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	e01c      	b.n	8016cf8 <tcp_close_shutdown_fin+0xe8>
    break;
 8016cbe:	bf00      	nop
 8016cc0:	e002      	b.n	8016cc8 <tcp_close_shutdown_fin+0xb8>
    break;
 8016cc2:	bf00      	nop
 8016cc4:	e000      	b.n	8016cc8 <tcp_close_shutdown_fin+0xb8>
    break;
 8016cc6:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d103      	bne.n	8016cd8 <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f004 fc47 	bl	801b564 <tcp_output>
 8016cd6:	e00d      	b.n	8016cf4 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 8016cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ce0:	d108      	bne.n	8016cf4 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	7e9b      	ldrb	r3, [r3, #26]
 8016ce6:	f043 0308 	orr.w	r3, r3, #8
 8016cea:	b2da      	uxtb	r2, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	e001      	b.n	8016cf8 <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8016cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3710      	adds	r7, #16
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}
 8016d00:	08026694 	.word	0x08026694
 8016d04:	080266c4 	.word	0x080266c4
 8016d08:	080266d0 	.word	0x080266d0
 8016d0c:	2000bbec 	.word	0x2000bbec

08016d10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	7d1b      	ldrb	r3, [r3, #20]
 8016d1c:	2b01      	cmp	r3, #1
 8016d1e:	d006      	beq.n	8016d2e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	7e9b      	ldrb	r3, [r3, #26]
 8016d24:	f043 0310 	orr.w	r3, r3, #16
 8016d28:	b2da      	uxtb	r2, r3
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016d2e:	2101      	movs	r1, #1
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f7ff fe7b 	bl	8016a2c <tcp_close_shutdown>
 8016d36:	4603      	mov	r3, r0
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3708      	adds	r7, #8
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b08c      	sub	sp, #48	@ 0x30
 8016d44:	af02      	add	r7, sp, #8
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	7d1b      	ldrb	r3, [r3, #20]
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d106      	bne.n	8016d60 <tcp_abandon+0x20>
 8016d52:	4b4d      	ldr	r3, [pc, #308]	@ (8016e88 <tcp_abandon+0x148>)
 8016d54:	f240 12df 	movw	r2, #479	@ 0x1df
 8016d58:	494c      	ldr	r1, [pc, #304]	@ (8016e8c <tcp_abandon+0x14c>)
 8016d5a:	484d      	ldr	r0, [pc, #308]	@ (8016e90 <tcp_abandon+0x150>)
 8016d5c:	f00b fa76 	bl	802224c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	7d1b      	ldrb	r3, [r3, #20]
 8016d64:	2b0a      	cmp	r3, #10
 8016d66:	d108      	bne.n	8016d7a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016d68:	6879      	ldr	r1, [r7, #4]
 8016d6a:	484a      	ldr	r0, [pc, #296]	@ (8016e94 <tcp_abandon+0x154>)
 8016d6c:	f001 f94e 	bl	801800c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8016d70:	6879      	ldr	r1, [r7, #4]
 8016d72:	2001      	movs	r0, #1
 8016d74:	f7fe fca2 	bl	80156bc <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8016d78:	e081      	b.n	8016e7e <tcp_abandon+0x13e>
    int send_rst = 0;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8016d7e:	2300      	movs	r3, #0
 8016d80:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d8c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016d94:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	691b      	ldr	r3, [r3, #16]
 8016d9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	7d1b      	ldrb	r3, [r3, #20]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d126      	bne.n	8016df2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	8adb      	ldrh	r3, [r3, #22]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d02e      	beq.n	8016e0a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016dac:	4b3a      	ldr	r3, [pc, #232]	@ (8016e98 <tcp_abandon+0x158>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	687a      	ldr	r2, [r7, #4]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d105      	bne.n	8016dc2 <tcp_abandon+0x82>
 8016db6:	4b38      	ldr	r3, [pc, #224]	@ (8016e98 <tcp_abandon+0x158>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	4a36      	ldr	r2, [pc, #216]	@ (8016e98 <tcp_abandon+0x158>)
 8016dbe:	6013      	str	r3, [r2, #0]
 8016dc0:	e013      	b.n	8016dea <tcp_abandon+0xaa>
 8016dc2:	4b35      	ldr	r3, [pc, #212]	@ (8016e98 <tcp_abandon+0x158>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	61fb      	str	r3, [r7, #28]
 8016dc8:	e00c      	b.n	8016de4 <tcp_abandon+0xa4>
 8016dca:	69fb      	ldr	r3, [r7, #28]
 8016dcc:	68db      	ldr	r3, [r3, #12]
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d104      	bne.n	8016dde <tcp_abandon+0x9e>
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	68da      	ldr	r2, [r3, #12]
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	60da      	str	r2, [r3, #12]
 8016ddc:	e005      	b.n	8016dea <tcp_abandon+0xaa>
 8016dde:	69fb      	ldr	r3, [r7, #28]
 8016de0:	68db      	ldr	r3, [r3, #12]
 8016de2:	61fb      	str	r3, [r7, #28]
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d1ef      	bne.n	8016dca <tcp_abandon+0x8a>
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2200      	movs	r2, #0
 8016dee:	60da      	str	r2, [r3, #12]
 8016df0:	e00b      	b.n	8016e0a <tcp_abandon+0xca>
      send_rst = reset;
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8adb      	ldrh	r3, [r3, #22]
 8016dfa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016dfc:	6879      	ldr	r1, [r7, #4]
 8016dfe:	4827      	ldr	r0, [pc, #156]	@ (8016e9c <tcp_abandon+0x15c>)
 8016e00:	f001 f904 	bl	801800c <tcp_pcb_remove>
 8016e04:	4b26      	ldr	r3, [pc, #152]	@ (8016ea0 <tcp_abandon+0x160>)
 8016e06:	2201      	movs	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d004      	beq.n	8016e1c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e16:	4618      	mov	r0, r3
 8016e18:	f000 fe19 	bl	8017a4e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d004      	beq.n	8016e2e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f000 fe10 	bl	8017a4e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d004      	beq.n	8016e40 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f000 fe07 	bl	8017a4e <tcp_segs_free>
    if (send_rst) {
 8016e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d00c      	beq.n	8016e60 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	1d19      	adds	r1, r3, #4
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	8b1b      	ldrh	r3, [r3, #24]
 8016e50:	9301      	str	r3, [sp, #4]
 8016e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e54:	9300      	str	r3, [sp, #0]
 8016e56:	460b      	mov	r3, r1
 8016e58:	6979      	ldr	r1, [r7, #20]
 8016e5a:	69b8      	ldr	r0, [r7, #24]
 8016e5c:	f004 fe1a 	bl	801ba94 <tcp_rst>
    last_state = pcb->state;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	7d1b      	ldrb	r3, [r3, #20]
 8016e64:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8016e66:	6879      	ldr	r1, [r7, #4]
 8016e68:	2001      	movs	r0, #1
 8016e6a:	f7fe fc27 	bl	80156bc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d004      	beq.n	8016e7e <tcp_abandon+0x13e>
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	f06f 010c 	mvn.w	r1, #12
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	4798      	blx	r3
}
 8016e7e:	bf00      	nop
 8016e80:	3728      	adds	r7, #40	@ 0x28
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	08026694 	.word	0x08026694
 8016e8c:	0802672c 	.word	0x0802672c
 8016e90:	080266d0 	.word	0x080266d0
 8016e94:	2000bd94 	.word	0x2000bd94
 8016e98:	2000bd88 	.word	0x2000bd88
 8016e9c:	2000bd90 	.word	0x2000bd90
 8016ea0:	2000bd98 	.word	0x2000bd98

08016ea4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016eac:	2101      	movs	r1, #1
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ff ff46 	bl	8016d40 <tcp_abandon>
}
 8016eb4:	bf00      	nop
 8016eb6:	3708      	adds	r7, #8
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b088      	sub	sp, #32
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016eca:	2304      	movs	r3, #4
 8016ecc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d101      	bne.n	8016ed8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8016fc8 <tcp_bind+0x10c>)
 8016ed6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d002      	beq.n	8016ee4 <tcp_bind+0x28>
 8016ede:	68bb      	ldr	r3, [r7, #8]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d102      	bne.n	8016eea <tcp_bind+0x2e>
    return ERR_VAL;
 8016ee4:	f06f 0305 	mvn.w	r3, #5
 8016ee8:	e06a      	b.n	8016fc0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	7d1b      	ldrb	r3, [r3, #20]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d009      	beq.n	8016f06 <tcp_bind+0x4a>
 8016ef2:	4b36      	ldr	r3, [pc, #216]	@ (8016fcc <tcp_bind+0x110>)
 8016ef4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8016ef8:	4935      	ldr	r1, [pc, #212]	@ (8016fd0 <tcp_bind+0x114>)
 8016efa:	4836      	ldr	r0, [pc, #216]	@ (8016fd4 <tcp_bind+0x118>)
 8016efc:	f00b f9a6 	bl	802224c <iprintf>
 8016f00:	f06f 0305 	mvn.w	r3, #5
 8016f04:	e05c      	b.n	8016fc0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8016f06:	88fb      	ldrh	r3, [r7, #6]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d109      	bne.n	8016f20 <tcp_bind+0x64>
    port = tcp_new_port();
 8016f0c:	f000 f9ca 	bl	80172a4 <tcp_new_port>
 8016f10:	4603      	mov	r3, r0
 8016f12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016f14:	88fb      	ldrh	r3, [r7, #6]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d135      	bne.n	8016f86 <tcp_bind+0xca>
      return ERR_BUF;
 8016f1a:	f06f 0301 	mvn.w	r3, #1
 8016f1e:	e04f      	b.n	8016fc0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016f20:	2300      	movs	r3, #0
 8016f22:	61fb      	str	r3, [r7, #28]
 8016f24:	e02b      	b.n	8016f7e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016f26:	4a2c      	ldr	r2, [pc, #176]	@ (8016fd8 <tcp_bind+0x11c>)
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	61bb      	str	r3, [r7, #24]
 8016f32:	e01e      	b.n	8016f72 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8016f34:	69bb      	ldr	r3, [r7, #24]
 8016f36:	8adb      	ldrh	r3, [r3, #22]
 8016f38:	88fa      	ldrh	r2, [r7, #6]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d116      	bne.n	8016f6c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016f3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d010      	beq.n	8016f66 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d00c      	beq.n	8016f66 <tcp_bind+0xaa>
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d009      	beq.n	8016f66 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d005      	beq.n	8016f66 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016f5a:	69bb      	ldr	r3, [r7, #24]
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d102      	bne.n	8016f6c <tcp_bind+0xb0>
              return ERR_USE;
 8016f66:	f06f 0307 	mvn.w	r3, #7
 8016f6a:	e029      	b.n	8016fc0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016f6c:	69bb      	ldr	r3, [r7, #24]
 8016f6e:	68db      	ldr	r3, [r3, #12]
 8016f70:	61bb      	str	r3, [r7, #24]
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d1dd      	bne.n	8016f34 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	61fb      	str	r3, [r7, #28]
 8016f7e:	69fa      	ldr	r2, [r7, #28]
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	dbcf      	blt.n	8016f26 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d00c      	beq.n	8016fa6 <tcp_bind+0xea>
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d008      	beq.n	8016fa6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016f94:	68bb      	ldr	r3, [r7, #8]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <tcp_bind+0xe4>
 8016f9a:	68bb      	ldr	r3, [r7, #8]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	e000      	b.n	8016fa2 <tcp_bind+0xe6>
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	68fa      	ldr	r2, [r7, #12]
 8016fa4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	88fa      	ldrh	r2, [r7, #6]
 8016faa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016fac:	4b0b      	ldr	r3, [pc, #44]	@ (8016fdc <tcp_bind+0x120>)
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	60da      	str	r2, [r3, #12]
 8016fb4:	4a09      	ldr	r2, [pc, #36]	@ (8016fdc <tcp_bind+0x120>)
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	6013      	str	r3, [r2, #0]
 8016fba:	f004 ffe3 	bl	801bf84 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016fbe:	2300      	movs	r3, #0
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3720      	adds	r7, #32
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	08032ed0 	.word	0x08032ed0
 8016fcc:	08026694 	.word	0x08026694
 8016fd0:	08026760 	.word	0x08026760
 8016fd4:	080266d0 	.word	0x080266d0
 8016fd8:	08032e98 	.word	0x08032e98
 8016fdc:	2000bd88 	.word	0x2000bd88

08016fe0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b084      	sub	sp, #16
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	4613      	mov	r3, r2
 8016fec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8016fee:	68b8      	ldr	r0, [r7, #8]
 8016ff0:	f7ff ff58 	bl	8016ea4 <tcp_abort>

  return ERR_ABRT;
 8016ff4:	f06f 030c 	mvn.w	r3, #12
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3710      	adds	r7, #16
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b082      	sub	sp, #8
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	460b      	mov	r3, r1
 801700a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801700c:	78fb      	ldrb	r3, [r7, #3]
 801700e:	2200      	movs	r2, #0
 8017010:	4619      	mov	r1, r3
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	f000 f806 	bl	8017024 <tcp_listen_with_backlog_and_err>
 8017018:	4603      	mov	r3, r0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3708      	adds	r7, #8
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
	...

08017024 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b088      	sub	sp, #32
 8017028:	af00      	add	r7, sp, #0
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	460b      	mov	r3, r1
 801702e:	607a      	str	r2, [r7, #4]
 8017030:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017032:	2300      	movs	r3, #0
 8017034:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	7d1b      	ldrb	r3, [r3, #20]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d009      	beq.n	8017052 <tcp_listen_with_backlog_and_err+0x2e>
 801703e:	4b3f      	ldr	r3, [pc, #252]	@ (801713c <tcp_listen_with_backlog_and_err+0x118>)
 8017040:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8017044:	493e      	ldr	r1, [pc, #248]	@ (8017140 <tcp_listen_with_backlog_and_err+0x11c>)
 8017046:	483f      	ldr	r0, [pc, #252]	@ (8017144 <tcp_listen_with_backlog_and_err+0x120>)
 8017048:	f00b f900 	bl	802224c <iprintf>
 801704c:	23f1      	movs	r3, #241	@ 0xf1
 801704e:	76fb      	strb	r3, [r7, #27]
 8017050:	e069      	b.n	8017126 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	7d1b      	ldrb	r3, [r3, #20]
 8017056:	2b01      	cmp	r3, #1
 8017058:	d104      	bne.n	8017064 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801705e:	23f7      	movs	r3, #247	@ 0xf7
 8017060:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017062:	e060      	b.n	8017126 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8017064:	2002      	movs	r0, #2
 8017066:	f7fe fad7 	bl	8015618 <memp_malloc>
 801706a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d102      	bne.n	8017078 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8017072:	23ff      	movs	r3, #255	@ 0xff
 8017074:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017076:	e056      	b.n	8017126 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	691a      	ldr	r2, [r3, #16]
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	8ada      	ldrh	r2, [r3, #22]
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	2201      	movs	r2, #1
 801708c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	7d5a      	ldrb	r2, [r3, #21]
 8017092:	69fb      	ldr	r3, [r7, #28]
 8017094:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	7a1a      	ldrb	r2, [r3, #8]
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	7a9a      	ldrb	r2, [r3, #10]
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	7a5a      	ldrb	r2, [r3, #9]
 80170aa:	69fb      	ldr	r3, [r7, #28]
 80170ac:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	8adb      	ldrh	r3, [r3, #22]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d021      	beq.n	8017102 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80170be:	4b22      	ldr	r3, [pc, #136]	@ (8017148 <tcp_listen_with_backlog_and_err+0x124>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	68fa      	ldr	r2, [r7, #12]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d105      	bne.n	80170d4 <tcp_listen_with_backlog_and_err+0xb0>
 80170c8:	4b1f      	ldr	r3, [pc, #124]	@ (8017148 <tcp_listen_with_backlog_and_err+0x124>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	68db      	ldr	r3, [r3, #12]
 80170ce:	4a1e      	ldr	r2, [pc, #120]	@ (8017148 <tcp_listen_with_backlog_and_err+0x124>)
 80170d0:	6013      	str	r3, [r2, #0]
 80170d2:	e013      	b.n	80170fc <tcp_listen_with_backlog_and_err+0xd8>
 80170d4:	4b1c      	ldr	r3, [pc, #112]	@ (8017148 <tcp_listen_with_backlog_and_err+0x124>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	617b      	str	r3, [r7, #20]
 80170da:	e00c      	b.n	80170f6 <tcp_listen_with_backlog_and_err+0xd2>
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	68db      	ldr	r3, [r3, #12]
 80170e0:	68fa      	ldr	r2, [r7, #12]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d104      	bne.n	80170f0 <tcp_listen_with_backlog_and_err+0xcc>
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	68da      	ldr	r2, [r3, #12]
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	60da      	str	r2, [r3, #12]
 80170ee:	e005      	b.n	80170fc <tcp_listen_with_backlog_and_err+0xd8>
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	617b      	str	r3, [r7, #20]
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d1ef      	bne.n	80170dc <tcp_listen_with_backlog_and_err+0xb8>
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	2200      	movs	r2, #0
 8017100:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8017102:	68f9      	ldr	r1, [r7, #12]
 8017104:	2001      	movs	r0, #1
 8017106:	f7fe fad9 	bl	80156bc <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	4a0f      	ldr	r2, [pc, #60]	@ (801714c <tcp_listen_with_backlog_and_err+0x128>)
 801710e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017110:	4b0f      	ldr	r3, [pc, #60]	@ (8017150 <tcp_listen_with_backlog_and_err+0x12c>)
 8017112:	681a      	ldr	r2, [r3, #0]
 8017114:	69fb      	ldr	r3, [r7, #28]
 8017116:	60da      	str	r2, [r3, #12]
 8017118:	4a0d      	ldr	r2, [pc, #52]	@ (8017150 <tcp_listen_with_backlog_and_err+0x12c>)
 801711a:	69fb      	ldr	r3, [r7, #28]
 801711c:	6013      	str	r3, [r2, #0]
 801711e:	f004 ff31 	bl	801bf84 <tcp_timer_needed>
  res = ERR_OK;
 8017122:	2300      	movs	r3, #0
 8017124:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d002      	beq.n	8017132 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	7efa      	ldrb	r2, [r7, #27]
 8017130:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017132:	69fb      	ldr	r3, [r7, #28]
}
 8017134:	4618      	mov	r0, r3
 8017136:	3720      	adds	r7, #32
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}
 801713c:	08026694 	.word	0x08026694
 8017140:	08026788 	.word	0x08026788
 8017144:	080266d0 	.word	0x080266d0
 8017148:	2000bd88 	.word	0x2000bd88
 801714c:	08016fe1 	.word	0x08016fe1
 8017150:	2000bd8c 	.word	0x2000bd8c

08017154 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017164:	4413      	add	r3, r2
 8017166:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801716c:	687a      	ldr	r2, [r7, #4]
 801716e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8017170:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8017174:	bf28      	it	cs
 8017176:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801717a:	b292      	uxth	r2, r2
 801717c:	4413      	add	r3, r2
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	1ad3      	subs	r3, r2, r3
 8017182:	2b00      	cmp	r3, #0
 8017184:	db08      	blt.n	8017198 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	e020      	b.n	80171da <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171a0:	1ad3      	subs	r3, r2, r3
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	dd03      	ble.n	80171ae <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2200      	movs	r2, #0
 80171aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80171ac:	e014      	b.n	80171d8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171b6:	1ad3      	subs	r3, r2, r3
 80171b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171c0:	d306      	bcc.n	80171d0 <tcp_update_rcv_ann_wnd+0x7c>
 80171c2:	4b08      	ldr	r3, [pc, #32]	@ (80171e4 <tcp_update_rcv_ann_wnd+0x90>)
 80171c4:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80171c8:	4907      	ldr	r1, [pc, #28]	@ (80171e8 <tcp_update_rcv_ann_wnd+0x94>)
 80171ca:	4808      	ldr	r0, [pc, #32]	@ (80171ec <tcp_update_rcv_ann_wnd+0x98>)
 80171cc:	f00b f83e 	bl	802224c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	b29a      	uxth	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80171d8:	2300      	movs	r3, #0
  }
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3710      	adds	r7, #16
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	bf00      	nop
 80171e4:	08026694 	.word	0x08026694
 80171e8:	080267ac 	.word	0x080267ac
 80171ec:	080266d0 	.word	0x080266d0

080171f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b084      	sub	sp, #16
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	460b      	mov	r3, r1
 80171fa:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	7d1b      	ldrb	r3, [r3, #20]
 8017200:	2b01      	cmp	r3, #1
 8017202:	d106      	bne.n	8017212 <tcp_recved+0x22>
 8017204:	4b23      	ldr	r3, [pc, #140]	@ (8017294 <tcp_recved+0xa4>)
 8017206:	f240 321f 	movw	r2, #799	@ 0x31f
 801720a:	4923      	ldr	r1, [pc, #140]	@ (8017298 <tcp_recved+0xa8>)
 801720c:	4823      	ldr	r0, [pc, #140]	@ (801729c <tcp_recved+0xac>)
 801720e:	f00b f81d 	bl	802224c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017216:	887b      	ldrh	r3, [r7, #2]
 8017218:	4413      	add	r3, r2
 801721a:	b29a      	uxth	r2, r3
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017224:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017228:	d904      	bls.n	8017234 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017230:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017232:	e017      	b.n	8017264 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017238:	2b00      	cmp	r3, #0
 801723a:	d113      	bne.n	8017264 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	7d1b      	ldrb	r3, [r3, #20]
 8017240:	2b07      	cmp	r3, #7
 8017242:	d003      	beq.n	801724c <tcp_recved+0x5c>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	7d1b      	ldrb	r3, [r3, #20]
 8017248:	2b09      	cmp	r3, #9
 801724a:	d104      	bne.n	8017256 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017252:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017254:	e006      	b.n	8017264 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8017256:	4b0f      	ldr	r3, [pc, #60]	@ (8017294 <tcp_recved+0xa4>)
 8017258:	f240 322d 	movw	r2, #813	@ 0x32d
 801725c:	4910      	ldr	r1, [pc, #64]	@ (80172a0 <tcp_recved+0xb0>)
 801725e:	480f      	ldr	r0, [pc, #60]	@ (801729c <tcp_recved+0xac>)
 8017260:	f00a fff4 	bl	802224c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f7ff ff75 	bl	8017154 <tcp_update_rcv_ann_wnd>
 801726a:	4603      	mov	r3, r0
 801726c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8017274:	db09      	blt.n	801728a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	7e9b      	ldrb	r3, [r3, #26]
 801727a:	f043 0302 	orr.w	r3, r3, #2
 801727e:	b2da      	uxtb	r2, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f004 f96d 	bl	801b564 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801728a:	bf00      	nop
 801728c:	3710      	adds	r7, #16
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	08026694 	.word	0x08026694
 8017298:	080267c8 	.word	0x080267c8
 801729c:	080266d0 	.word	0x080266d0
 80172a0:	080267f0 	.word	0x080267f0

080172a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80172a4:	b480      	push	{r7}
 80172a6:	b083      	sub	sp, #12
 80172a8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80172aa:	2300      	movs	r3, #0
 80172ac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80172ae:	4b1d      	ldr	r3, [pc, #116]	@ (8017324 <tcp_new_port+0x80>)
 80172b0:	881b      	ldrh	r3, [r3, #0]
 80172b2:	1c5a      	adds	r2, r3, #1
 80172b4:	b291      	uxth	r1, r2
 80172b6:	4a1b      	ldr	r2, [pc, #108]	@ (8017324 <tcp_new_port+0x80>)
 80172b8:	8011      	strh	r1, [r2, #0]
 80172ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80172be:	4293      	cmp	r3, r2
 80172c0:	d103      	bne.n	80172ca <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80172c2:	4b18      	ldr	r3, [pc, #96]	@ (8017324 <tcp_new_port+0x80>)
 80172c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80172c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80172ca:	2300      	movs	r3, #0
 80172cc:	71fb      	strb	r3, [r7, #7]
 80172ce:	e01e      	b.n	801730e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80172d0:	79fb      	ldrb	r3, [r7, #7]
 80172d2:	4a15      	ldr	r2, [pc, #84]	@ (8017328 <tcp_new_port+0x84>)
 80172d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	603b      	str	r3, [r7, #0]
 80172dc:	e011      	b.n	8017302 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	8ada      	ldrh	r2, [r3, #22]
 80172e2:	4b10      	ldr	r3, [pc, #64]	@ (8017324 <tcp_new_port+0x80>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d108      	bne.n	80172fc <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80172ea:	88bb      	ldrh	r3, [r7, #4]
 80172ec:	3301      	adds	r3, #1
 80172ee:	80bb      	strh	r3, [r7, #4]
 80172f0:	88bb      	ldrh	r3, [r7, #4]
 80172f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80172f6:	d3da      	bcc.n	80172ae <tcp_new_port+0xa>
          return 0;
 80172f8:	2300      	movs	r3, #0
 80172fa:	e00d      	b.n	8017318 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	603b      	str	r3, [r7, #0]
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d1ea      	bne.n	80172de <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017308:	79fb      	ldrb	r3, [r7, #7]
 801730a:	3301      	adds	r3, #1
 801730c:	71fb      	strb	r3, [r7, #7]
 801730e:	79fb      	ldrb	r3, [r7, #7]
 8017310:	2b03      	cmp	r3, #3
 8017312:	d9dd      	bls.n	80172d0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017314:	4b03      	ldr	r3, [pc, #12]	@ (8017324 <tcp_new_port+0x80>)
 8017316:	881b      	ldrh	r3, [r3, #0]
}
 8017318:	4618      	mov	r0, r3
 801731a:	370c      	adds	r7, #12
 801731c:	46bd      	mov	sp, r7
 801731e:	bc80      	pop	{r7}
 8017320:	4770      	bx	lr
 8017322:	bf00      	nop
 8017324:	20000118 	.word	0x20000118
 8017328:	08032e98 	.word	0x08032e98

0801732c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801732c:	b5b0      	push	{r4, r5, r7, lr}
 801732e:	b08c      	sub	sp, #48	@ 0x30
 8017330:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017332:	2300      	movs	r3, #0
 8017334:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8017336:	4b98      	ldr	r3, [pc, #608]	@ (8017598 <tcp_slowtmr+0x26c>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	3301      	adds	r3, #1
 801733c:	4a96      	ldr	r2, [pc, #600]	@ (8017598 <tcp_slowtmr+0x26c>)
 801733e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017340:	4b96      	ldr	r3, [pc, #600]	@ (801759c <tcp_slowtmr+0x270>)
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	3301      	adds	r3, #1
 8017346:	b2da      	uxtb	r2, r3
 8017348:	4b94      	ldr	r3, [pc, #592]	@ (801759c <tcp_slowtmr+0x270>)
 801734a:	701a      	strb	r2, [r3, #0]
 801734c:	e000      	b.n	8017350 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801734e:	bf00      	nop
  prev = NULL;
 8017350:	2300      	movs	r3, #0
 8017352:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8017354:	4b92      	ldr	r3, [pc, #584]	@ (80175a0 <tcp_slowtmr+0x274>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 801735a:	e227      	b.n	80177ac <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735e:	7d1b      	ldrb	r3, [r3, #20]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d106      	bne.n	8017372 <tcp_slowtmr+0x46>
 8017364:	4b8f      	ldr	r3, [pc, #572]	@ (80175a4 <tcp_slowtmr+0x278>)
 8017366:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 801736a:	498f      	ldr	r1, [pc, #572]	@ (80175a8 <tcp_slowtmr+0x27c>)
 801736c:	488f      	ldr	r0, [pc, #572]	@ (80175ac <tcp_slowtmr+0x280>)
 801736e:	f00a ff6d 	bl	802224c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017374:	7d1b      	ldrb	r3, [r3, #20]
 8017376:	2b01      	cmp	r3, #1
 8017378:	d106      	bne.n	8017388 <tcp_slowtmr+0x5c>
 801737a:	4b8a      	ldr	r3, [pc, #552]	@ (80175a4 <tcp_slowtmr+0x278>)
 801737c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017380:	498b      	ldr	r1, [pc, #556]	@ (80175b0 <tcp_slowtmr+0x284>)
 8017382:	488a      	ldr	r0, [pc, #552]	@ (80175ac <tcp_slowtmr+0x280>)
 8017384:	f00a ff62 	bl	802224c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801738a:	7d1b      	ldrb	r3, [r3, #20]
 801738c:	2b0a      	cmp	r3, #10
 801738e:	d106      	bne.n	801739e <tcp_slowtmr+0x72>
 8017390:	4b84      	ldr	r3, [pc, #528]	@ (80175a4 <tcp_slowtmr+0x278>)
 8017392:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8017396:	4987      	ldr	r1, [pc, #540]	@ (80175b4 <tcp_slowtmr+0x288>)
 8017398:	4884      	ldr	r0, [pc, #528]	@ (80175ac <tcp_slowtmr+0x280>)
 801739a:	f00a ff57 	bl	802224c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a0:	7f5a      	ldrb	r2, [r3, #29]
 80173a2:	4b7e      	ldr	r3, [pc, #504]	@ (801759c <tcp_slowtmr+0x270>)
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d103      	bne.n	80173b2 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 80173aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ac:	68db      	ldr	r3, [r3, #12]
 80173ae:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80173b0:	e1fc      	b.n	80177ac <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 80173b2:	4b7a      	ldr	r3, [pc, #488]	@ (801759c <tcp_slowtmr+0x270>)
 80173b4:	781a      	ldrb	r2, [r3, #0]
 80173b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b8:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 80173ba:	2300      	movs	r3, #0
 80173bc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80173be:	2300      	movs	r3, #0
 80173c0:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80173c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c4:	7d1b      	ldrb	r3, [r3, #20]
 80173c6:	2b02      	cmp	r3, #2
 80173c8:	d108      	bne.n	80173dc <tcp_slowtmr+0xb0>
 80173ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173d0:	2b05      	cmp	r3, #5
 80173d2:	d903      	bls.n	80173dc <tcp_slowtmr+0xb0>
      ++pcb_remove;
 80173d4:	7ffb      	ldrb	r3, [r7, #31]
 80173d6:	3301      	adds	r3, #1
 80173d8:	77fb      	strb	r3, [r7, #31]
 80173da:	e0a2      	b.n	8017522 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80173dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173e2:	2b0b      	cmp	r3, #11
 80173e4:	d903      	bls.n	80173ee <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80173e6:	7ffb      	ldrb	r3, [r7, #31]
 80173e8:	3301      	adds	r3, #1
 80173ea:	77fb      	strb	r3, [r7, #31]
 80173ec:	e099      	b.n	8017522 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80173ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d032      	beq.n	801745e <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80173f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80173fe:	3b01      	subs	r3, #1
 8017400:	4a6d      	ldr	r2, [pc, #436]	@ (80175b8 <tcp_slowtmr+0x28c>)
 8017402:	5cd3      	ldrb	r3, [r2, r3]
 8017404:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8017406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017408:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801740c:	7cfa      	ldrb	r2, [r7, #19]
 801740e:	429a      	cmp	r2, r3
 8017410:	d907      	bls.n	8017422 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8017412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017414:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8017418:	3301      	adds	r3, #1
 801741a:	b2da      	uxtb	r2, r3
 801741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801741e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8017422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017424:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8017428:	7cfa      	ldrb	r2, [r7, #19]
 801742a:	429a      	cmp	r2, r3
 801742c:	d879      	bhi.n	8017522 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801742e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017430:	f004 fcde 	bl	801bdf0 <tcp_zero_window_probe>
 8017434:	4603      	mov	r3, r0
 8017436:	2b00      	cmp	r3, #0
 8017438:	d173      	bne.n	8017522 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 801743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801743c:	2200      	movs	r2, #0
 801743e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017444:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8017448:	2b06      	cmp	r3, #6
 801744a:	d86a      	bhi.n	8017522 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 801744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801744e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8017452:	3301      	adds	r3, #1
 8017454:	b2da      	uxtb	r2, r3
 8017456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017458:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 801745c:	e061      	b.n	8017522 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 801745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017460:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017464:	2b00      	cmp	r3, #0
 8017466:	db08      	blt.n	801747a <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 8017468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801746a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801746e:	b29b      	uxth	r3, r3
 8017470:	3301      	adds	r3, #1
 8017472:	b29b      	uxth	r3, r3
 8017474:	b21a      	sxth	r2, r3
 8017476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017478:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801747c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801747e:	2b00      	cmp	r3, #0
 8017480:	d04f      	beq.n	8017522 <tcp_slowtmr+0x1f6>
 8017482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017484:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8017488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801748a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801748e:	429a      	cmp	r2, r3
 8017490:	db47      	blt.n	8017522 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8017492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017494:	7d1b      	ldrb	r3, [r3, #20]
 8017496:	2b02      	cmp	r3, #2
 8017498:	d018      	beq.n	80174cc <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801749c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80174a0:	2b0c      	cmp	r3, #12
 80174a2:	bf28      	it	cs
 80174a4:	230c      	movcs	r3, #12
 80174a6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80174a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80174ae:	10db      	asrs	r3, r3, #3
 80174b0:	b21b      	sxth	r3, r3
 80174b2:	461a      	mov	r2, r3
 80174b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80174ba:	4413      	add	r3, r2
 80174bc:	7dfa      	ldrb	r2, [r7, #23]
 80174be:	493f      	ldr	r1, [pc, #252]	@ (80175bc <tcp_slowtmr+0x290>)
 80174c0:	5c8a      	ldrb	r2, [r1, r2]
 80174c2:	4093      	lsls	r3, r2
 80174c4:	b21a      	sxth	r2, r3
 80174c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 80174cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ce:	2200      	movs	r2, #0
 80174d0:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80174d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80174d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174de:	4293      	cmp	r3, r2
 80174e0:	bf28      	it	cs
 80174e2:	4613      	movcs	r3, r2
 80174e4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80174e6:	8abb      	ldrh	r3, [r7, #20]
 80174e8:	085b      	lsrs	r3, r3, #1
 80174ea:	b29a      	uxth	r2, r3
 80174ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80174f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80174f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174fc:	005b      	lsls	r3, r3, #1
 80174fe:	b29b      	uxth	r3, r3
 8017500:	429a      	cmp	r2, r3
 8017502:	d206      	bcs.n	8017512 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8017504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017508:	005b      	lsls	r3, r3, #1
 801750a:	b29a      	uxth	r2, r3
 801750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801750e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8017512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017514:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8017516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017518:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 801751c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801751e:	f004 fb41 	bl	801bba4 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8017522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017524:	7d1b      	ldrb	r3, [r3, #20]
 8017526:	2b06      	cmp	r3, #6
 8017528:	d10f      	bne.n	801754a <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 801752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801752c:	7e9b      	ldrb	r3, [r3, #26]
 801752e:	f003 0310 	and.w	r3, r3, #16
 8017532:	2b00      	cmp	r3, #0
 8017534:	d009      	beq.n	801754a <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017536:	4b18      	ldr	r3, [pc, #96]	@ (8017598 <tcp_slowtmr+0x26c>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801753c:	6a1b      	ldr	r3, [r3, #32]
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	2b28      	cmp	r3, #40	@ 0x28
 8017542:	d902      	bls.n	801754a <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8017544:	7ffb      	ldrb	r3, [r7, #31]
 8017546:	3301      	adds	r3, #1
 8017548:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801754c:	7a1b      	ldrb	r3, [r3, #8]
 801754e:	f003 0308 	and.w	r3, r3, #8
 8017552:	2b00      	cmp	r3, #0
 8017554:	d05d      	beq.n	8017612 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8017556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017558:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801755a:	2b04      	cmp	r3, #4
 801755c:	d003      	beq.n	8017566 <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 801755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017560:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8017562:	2b07      	cmp	r3, #7
 8017564:	d155      	bne.n	8017612 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017566:	4b0c      	ldr	r3, [pc, #48]	@ (8017598 <tcp_slowtmr+0x26c>)
 8017568:	681a      	ldr	r2, [r3, #0]
 801756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756c:	6a1b      	ldr	r3, [r3, #32]
 801756e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8017570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017576:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801757a:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 801757e:	4910      	ldr	r1, [pc, #64]	@ (80175c0 <tcp_slowtmr+0x294>)
 8017580:	fba1 1303 	umull	r1, r3, r1, r3
 8017584:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017586:	429a      	cmp	r2, r3
 8017588:	d91c      	bls.n	80175c4 <tcp_slowtmr+0x298>
        ++pcb_remove;
 801758a:	7ffb      	ldrb	r3, [r7, #31]
 801758c:	3301      	adds	r3, #1
 801758e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8017590:	7fbb      	ldrb	r3, [r7, #30]
 8017592:	3301      	adds	r3, #1
 8017594:	77bb      	strb	r3, [r7, #30]
 8017596:	e03c      	b.n	8017612 <tcp_slowtmr+0x2e6>
 8017598:	2000bd84 	.word	0x2000bd84
 801759c:	2000bd9a 	.word	0x2000bd9a
 80175a0:	2000bd90 	.word	0x2000bd90
 80175a4:	08026694 	.word	0x08026694
 80175a8:	08026844 	.word	0x08026844
 80175ac:	080266d0 	.word	0x080266d0
 80175b0:	08026870 	.word	0x08026870
 80175b4:	0802689c 	.word	0x0802689c
 80175b8:	08032e90 	.word	0x08032e90
 80175bc:	08032e80 	.word	0x08032e80
 80175c0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175c4:	4b97      	ldr	r3, [pc, #604]	@ (8017824 <tcp_slowtmr+0x4f8>)
 80175c6:	681a      	ldr	r2, [r3, #0]
 80175c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ca:	6a1b      	ldr	r3, [r3, #32]
 80175cc:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80175ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175d0:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80175d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175d6:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80175da:	4618      	mov	r0, r3
 80175dc:	4b92      	ldr	r3, [pc, #584]	@ (8017828 <tcp_slowtmr+0x4fc>)
 80175de:	fb00 f303 	mul.w	r3, r0, r3
 80175e2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80175e4:	4991      	ldr	r1, [pc, #580]	@ (801782c <tcp_slowtmr+0x500>)
 80175e6:	fba1 1303 	umull	r1, r3, r1, r3
 80175ea:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d910      	bls.n	8017612 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80175f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80175f2:	f004 fbb5 	bl	801bd60 <tcp_keepalive>
 80175f6:	4603      	mov	r3, r0
 80175f8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80175fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d107      	bne.n	8017612 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8017602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017604:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8017608:	3301      	adds	r3, #1
 801760a:	b2da      	uxtb	r2, r3
 801760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801760e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8017612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017616:	2b00      	cmp	r3, #0
 8017618:	d016      	beq.n	8017648 <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801761a:	4b82      	ldr	r3, [pc, #520]	@ (8017824 <tcp_slowtmr+0x4f8>)
 801761c:	681a      	ldr	r2, [r3, #0]
 801761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017620:	6a1b      	ldr	r3, [r3, #32]
 8017622:	1ad2      	subs	r2, r2, r3
 8017624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017626:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801762a:	4619      	mov	r1, r3
 801762c:	460b      	mov	r3, r1
 801762e:	005b      	lsls	r3, r3, #1
 8017630:	440b      	add	r3, r1
 8017632:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017634:	429a      	cmp	r2, r3
 8017636:	d307      	bcc.n	8017648 <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 8017638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801763a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801763c:	4618      	mov	r0, r3
 801763e:	f000 fa06 	bl	8017a4e <tcp_segs_free>
      pcb->ooseq = NULL;
 8017642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017644:	2200      	movs	r2, #0
 8017646:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8017648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801764a:	7d1b      	ldrb	r3, [r3, #20]
 801764c:	2b03      	cmp	r3, #3
 801764e:	d109      	bne.n	8017664 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017650:	4b74      	ldr	r3, [pc, #464]	@ (8017824 <tcp_slowtmr+0x4f8>)
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	1ad3      	subs	r3, r2, r3
 801765a:	2b28      	cmp	r3, #40	@ 0x28
 801765c:	d902      	bls.n	8017664 <tcp_slowtmr+0x338>
        ++pcb_remove;
 801765e:	7ffb      	ldrb	r3, [r7, #31]
 8017660:	3301      	adds	r3, #1
 8017662:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8017664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017666:	7d1b      	ldrb	r3, [r3, #20]
 8017668:	2b09      	cmp	r3, #9
 801766a:	d109      	bne.n	8017680 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801766c:	4b6d      	ldr	r3, [pc, #436]	@ (8017824 <tcp_slowtmr+0x4f8>)
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017672:	6a1b      	ldr	r3, [r3, #32]
 8017674:	1ad3      	subs	r3, r2, r3
 8017676:	2bf0      	cmp	r3, #240	@ 0xf0
 8017678:	d902      	bls.n	8017680 <tcp_slowtmr+0x354>
        ++pcb_remove;
 801767a:	7ffb      	ldrb	r3, [r7, #31]
 801767c:	3301      	adds	r3, #1
 801767e:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8017680:	7ffb      	ldrb	r3, [r7, #31]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d05d      	beq.n	8017742 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 8017686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801768c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801768e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017690:	f000 fc7a 	bl	8017f88 <tcp_pcb_purge>
      if (prev != NULL) {
 8017694:	6a3b      	ldr	r3, [r7, #32]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d010      	beq.n	80176bc <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801769a:	4b65      	ldr	r3, [pc, #404]	@ (8017830 <tcp_slowtmr+0x504>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d106      	bne.n	80176b2 <tcp_slowtmr+0x386>
 80176a4:	4b63      	ldr	r3, [pc, #396]	@ (8017834 <tcp_slowtmr+0x508>)
 80176a6:	f240 4289 	movw	r2, #1161	@ 0x489
 80176aa:	4963      	ldr	r1, [pc, #396]	@ (8017838 <tcp_slowtmr+0x50c>)
 80176ac:	4863      	ldr	r0, [pc, #396]	@ (801783c <tcp_slowtmr+0x510>)
 80176ae:	f00a fdcd 	bl	802224c <iprintf>
        prev->next = pcb->next;
 80176b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b4:	68da      	ldr	r2, [r3, #12]
 80176b6:	6a3b      	ldr	r3, [r7, #32]
 80176b8:	60da      	str	r2, [r3, #12]
 80176ba:	e00f      	b.n	80176dc <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80176bc:	4b5c      	ldr	r3, [pc, #368]	@ (8017830 <tcp_slowtmr+0x504>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176c2:	429a      	cmp	r2, r3
 80176c4:	d006      	beq.n	80176d4 <tcp_slowtmr+0x3a8>
 80176c6:	4b5b      	ldr	r3, [pc, #364]	@ (8017834 <tcp_slowtmr+0x508>)
 80176c8:	f240 428d 	movw	r2, #1165	@ 0x48d
 80176cc:	495c      	ldr	r1, [pc, #368]	@ (8017840 <tcp_slowtmr+0x514>)
 80176ce:	485b      	ldr	r0, [pc, #364]	@ (801783c <tcp_slowtmr+0x510>)
 80176d0:	f00a fdbc 	bl	802224c <iprintf>
        tcp_active_pcbs = pcb->next;
 80176d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	4a55      	ldr	r2, [pc, #340]	@ (8017830 <tcp_slowtmr+0x504>)
 80176da:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80176dc:	7fbb      	ldrb	r3, [r7, #30]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d010      	beq.n	8017704 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80176e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80176e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80176ea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80176ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ee:	1d1d      	adds	r5, r3, #4
 80176f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176f2:	8adb      	ldrh	r3, [r3, #22]
 80176f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176f6:	8b12      	ldrh	r2, [r2, #24]
 80176f8:	9201      	str	r2, [sp, #4]
 80176fa:	9300      	str	r3, [sp, #0]
 80176fc:	462b      	mov	r3, r5
 80176fe:	4622      	mov	r2, r4
 8017700:	f004 f9c8 	bl	801ba94 <tcp_rst>
      err_arg = pcb->callback_arg;
 8017704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017706:	691b      	ldr	r3, [r3, #16]
 8017708:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801770c:	7d1b      	ldrb	r3, [r3, #20]
 801770e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017712:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801771a:	6839      	ldr	r1, [r7, #0]
 801771c:	2001      	movs	r0, #1
 801771e:	f7fd ffcd 	bl	80156bc <memp_free>
      tcp_active_pcbs_changed = 0;
 8017722:	4b48      	ldr	r3, [pc, #288]	@ (8017844 <tcp_slowtmr+0x518>)
 8017724:	2200      	movs	r2, #0
 8017726:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d004      	beq.n	8017738 <tcp_slowtmr+0x40c>
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f06f 010c 	mvn.w	r1, #12
 8017734:	68b8      	ldr	r0, [r7, #8]
 8017736:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017738:	4b42      	ldr	r3, [pc, #264]	@ (8017844 <tcp_slowtmr+0x518>)
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d035      	beq.n	80177ac <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8017740:	e606      	b.n	8017350 <tcp_slowtmr+0x24>
      prev = pcb;
 8017742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017744:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8017746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017748:	68db      	ldr	r3, [r3, #12]
 801774a:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 801774c:	6a3b      	ldr	r3, [r7, #32]
 801774e:	7edb      	ldrb	r3, [r3, #27]
 8017750:	3301      	adds	r3, #1
 8017752:	b2da      	uxtb	r2, r3
 8017754:	6a3b      	ldr	r3, [r7, #32]
 8017756:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8017758:	6a3b      	ldr	r3, [r7, #32]
 801775a:	7eda      	ldrb	r2, [r3, #27]
 801775c:	6a3b      	ldr	r3, [r7, #32]
 801775e:	7f1b      	ldrb	r3, [r3, #28]
 8017760:	429a      	cmp	r2, r3
 8017762:	d323      	bcc.n	80177ac <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8017764:	6a3b      	ldr	r3, [r7, #32]
 8017766:	2200      	movs	r2, #0
 8017768:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 801776a:	4b36      	ldr	r3, [pc, #216]	@ (8017844 <tcp_slowtmr+0x518>)
 801776c:	2200      	movs	r2, #0
 801776e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017770:	6a3b      	ldr	r3, [r7, #32]
 8017772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00a      	beq.n	8017790 <tcp_slowtmr+0x464>
 801777a:	6a3b      	ldr	r3, [r7, #32]
 801777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017780:	6a3a      	ldr	r2, [r7, #32]
 8017782:	6912      	ldr	r2, [r2, #16]
 8017784:	6a39      	ldr	r1, [r7, #32]
 8017786:	4610      	mov	r0, r2
 8017788:	4798      	blx	r3
 801778a:	4603      	mov	r3, r0
 801778c:	777b      	strb	r3, [r7, #29]
 801778e:	e001      	b.n	8017794 <tcp_slowtmr+0x468>
 8017790:	2300      	movs	r3, #0
 8017792:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8017794:	4b2b      	ldr	r3, [pc, #172]	@ (8017844 <tcp_slowtmr+0x518>)
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	f47f add8 	bne.w	801734e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801779e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d102      	bne.n	80177ac <tcp_slowtmr+0x480>
          tcp_output(prev);
 80177a6:	6a38      	ldr	r0, [r7, #32]
 80177a8:	f003 fedc 	bl	801b564 <tcp_output>
  while (pcb != NULL) {
 80177ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	f47f add4 	bne.w	801735c <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80177b4:	2300      	movs	r3, #0
 80177b6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80177b8:	4b23      	ldr	r3, [pc, #140]	@ (8017848 <tcp_slowtmr+0x51c>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80177be:	e068      	b.n	8017892 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80177c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c2:	7d1b      	ldrb	r3, [r3, #20]
 80177c4:	2b0a      	cmp	r3, #10
 80177c6:	d006      	beq.n	80177d6 <tcp_slowtmr+0x4aa>
 80177c8:	4b1a      	ldr	r3, [pc, #104]	@ (8017834 <tcp_slowtmr+0x508>)
 80177ca:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80177ce:	491f      	ldr	r1, [pc, #124]	@ (801784c <tcp_slowtmr+0x520>)
 80177d0:	481a      	ldr	r0, [pc, #104]	@ (801783c <tcp_slowtmr+0x510>)
 80177d2:	f00a fd3b 	bl	802224c <iprintf>
    pcb_remove = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80177da:	4b12      	ldr	r3, [pc, #72]	@ (8017824 <tcp_slowtmr+0x4f8>)
 80177dc:	681a      	ldr	r2, [r3, #0]
 80177de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e0:	6a1b      	ldr	r3, [r3, #32]
 80177e2:	1ad3      	subs	r3, r2, r3
 80177e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80177e6:	d902      	bls.n	80177ee <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 80177e8:	7ffb      	ldrb	r3, [r7, #31]
 80177ea:	3301      	adds	r3, #1
 80177ec:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80177ee:	7ffb      	ldrb	r3, [r7, #31]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d049      	beq.n	8017888 <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80177f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80177f6:	f000 fbc7 	bl	8017f88 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80177fa:	6a3b      	ldr	r3, [r7, #32]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d029      	beq.n	8017854 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017800:	4b11      	ldr	r3, [pc, #68]	@ (8017848 <tcp_slowtmr+0x51c>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017806:	429a      	cmp	r2, r3
 8017808:	d106      	bne.n	8017818 <tcp_slowtmr+0x4ec>
 801780a:	4b0a      	ldr	r3, [pc, #40]	@ (8017834 <tcp_slowtmr+0x508>)
 801780c:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8017810:	490f      	ldr	r1, [pc, #60]	@ (8017850 <tcp_slowtmr+0x524>)
 8017812:	480a      	ldr	r0, [pc, #40]	@ (801783c <tcp_slowtmr+0x510>)
 8017814:	f00a fd1a 	bl	802224c <iprintf>
        prev->next = pcb->next;
 8017818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781a:	68da      	ldr	r2, [r3, #12]
 801781c:	6a3b      	ldr	r3, [r7, #32]
 801781e:	60da      	str	r2, [r3, #12]
 8017820:	e028      	b.n	8017874 <tcp_slowtmr+0x548>
 8017822:	bf00      	nop
 8017824:	2000bd84 	.word	0x2000bd84
 8017828:	000124f8 	.word	0x000124f8
 801782c:	10624dd3 	.word	0x10624dd3
 8017830:	2000bd90 	.word	0x2000bd90
 8017834:	08026694 	.word	0x08026694
 8017838:	080268cc 	.word	0x080268cc
 801783c:	080266d0 	.word	0x080266d0
 8017840:	080268f8 	.word	0x080268f8
 8017844:	2000bd98 	.word	0x2000bd98
 8017848:	2000bd94 	.word	0x2000bd94
 801784c:	08026924 	.word	0x08026924
 8017850:	08026954 	.word	0x08026954
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017854:	4b13      	ldr	r3, [pc, #76]	@ (80178a4 <tcp_slowtmr+0x578>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801785a:	429a      	cmp	r2, r3
 801785c:	d006      	beq.n	801786c <tcp_slowtmr+0x540>
 801785e:	4b12      	ldr	r3, [pc, #72]	@ (80178a8 <tcp_slowtmr+0x57c>)
 8017860:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8017864:	4911      	ldr	r1, [pc, #68]	@ (80178ac <tcp_slowtmr+0x580>)
 8017866:	4812      	ldr	r0, [pc, #72]	@ (80178b0 <tcp_slowtmr+0x584>)
 8017868:	f00a fcf0 	bl	802224c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	4a0c      	ldr	r2, [pc, #48]	@ (80178a4 <tcp_slowtmr+0x578>)
 8017872:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017876:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8017878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801787e:	69b9      	ldr	r1, [r7, #24]
 8017880:	2001      	movs	r0, #1
 8017882:	f7fd ff1b 	bl	80156bc <memp_free>
 8017886:	e004      	b.n	8017892 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8017888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801788a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8017892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017894:	2b00      	cmp	r3, #0
 8017896:	d193      	bne.n	80177c0 <tcp_slowtmr+0x494>
    }
  }
}
 8017898:	bf00      	nop
 801789a:	bf00      	nop
 801789c:	3728      	adds	r7, #40	@ 0x28
 801789e:	46bd      	mov	sp, r7
 80178a0:	bdb0      	pop	{r4, r5, r7, pc}
 80178a2:	bf00      	nop
 80178a4:	2000bd94 	.word	0x2000bd94
 80178a8:	08026694 	.word	0x08026694
 80178ac:	0802697c 	.word	0x0802697c
 80178b0:	080266d0 	.word	0x080266d0

080178b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80178ba:	4b2d      	ldr	r3, [pc, #180]	@ (8017970 <tcp_fasttmr+0xbc>)
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	3301      	adds	r3, #1
 80178c0:	b2da      	uxtb	r2, r3
 80178c2:	4b2b      	ldr	r3, [pc, #172]	@ (8017970 <tcp_fasttmr+0xbc>)
 80178c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80178c6:	4b2b      	ldr	r3, [pc, #172]	@ (8017974 <tcp_fasttmr+0xc0>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80178cc:	e048      	b.n	8017960 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	7f5a      	ldrb	r2, [r3, #29]
 80178d2:	4b27      	ldr	r3, [pc, #156]	@ (8017970 <tcp_fasttmr+0xbc>)
 80178d4:	781b      	ldrb	r3, [r3, #0]
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d03f      	beq.n	801795a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80178da:	4b25      	ldr	r3, [pc, #148]	@ (8017970 <tcp_fasttmr+0xbc>)
 80178dc:	781a      	ldrb	r2, [r3, #0]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	7e9b      	ldrb	r3, [r3, #26]
 80178e6:	f003 0301 	and.w	r3, r3, #1
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d010      	beq.n	8017910 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	7e9b      	ldrb	r3, [r3, #26]
 80178f2:	f043 0302 	orr.w	r3, r3, #2
 80178f6:	b2da      	uxtb	r2, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f003 fe31 	bl	801b564 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	7e9b      	ldrb	r3, [r3, #26]
 8017906:	f023 0303 	bic.w	r3, r3, #3
 801790a:	b2da      	uxtb	r2, r3
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	7e9b      	ldrb	r3, [r3, #26]
 8017914:	f003 0308 	and.w	r3, r3, #8
 8017918:	2b00      	cmp	r3, #0
 801791a:	d009      	beq.n	8017930 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	7e9b      	ldrb	r3, [r3, #26]
 8017920:	f023 0308 	bic.w	r3, r3, #8
 8017924:	b2da      	uxtb	r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f7ff f970 	bl	8016c10 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00a      	beq.n	8017954 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801793e:	4b0e      	ldr	r3, [pc, #56]	@ (8017978 <tcp_fasttmr+0xc4>)
 8017940:	2200      	movs	r2, #0
 8017942:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f000 f819 	bl	801797c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801794a:	4b0b      	ldr	r3, [pc, #44]	@ (8017978 <tcp_fasttmr+0xc4>)
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d000      	beq.n	8017954 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017952:	e7b8      	b.n	80178c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	607b      	str	r3, [r7, #4]
 8017958:	e002      	b.n	8017960 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	68db      	ldr	r3, [r3, #12]
 801795e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d1b3      	bne.n	80178ce <tcp_fasttmr+0x1a>
    }
  }
}
 8017966:	bf00      	nop
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	2000bd9a 	.word	0x2000bd9a
 8017974:	2000bd90 	.word	0x2000bd90
 8017978:	2000bd98 	.word	0x2000bd98

0801797c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801797c:	b590      	push	{r4, r7, lr}
 801797e:	b085      	sub	sp, #20
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017988:	7b5b      	ldrb	r3, [r3, #13]
 801798a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017990:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	2200      	movs	r2, #0
 8017996:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d00b      	beq.n	80179ba <tcp_process_refused_data+0x3e>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6918      	ldr	r0, [r3, #16]
 80179ac:	2300      	movs	r3, #0
 80179ae:	68ba      	ldr	r2, [r7, #8]
 80179b0:	6879      	ldr	r1, [r7, #4]
 80179b2:	47a0      	blx	r4
 80179b4:	4603      	mov	r3, r0
 80179b6:	73fb      	strb	r3, [r7, #15]
 80179b8:	e007      	b.n	80179ca <tcp_process_refused_data+0x4e>
 80179ba:	2300      	movs	r3, #0
 80179bc:	68ba      	ldr	r2, [r7, #8]
 80179be:	6879      	ldr	r1, [r7, #4]
 80179c0:	2000      	movs	r0, #0
 80179c2:	f000 f89b 	bl	8017afc <tcp_recv_null>
 80179c6:	4603      	mov	r3, r0
 80179c8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80179ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d12a      	bne.n	8017a28 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80179d2:	7bbb      	ldrb	r3, [r7, #14]
 80179d4:	f003 0320 	and.w	r3, r3, #32
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d033      	beq.n	8017a44 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179e0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80179e4:	d005      	beq.n	80179f2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179ea:	3301      	adds	r3, #1
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d00b      	beq.n	8017a14 <tcp_process_refused_data+0x98>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6918      	ldr	r0, [r3, #16]
 8017a06:	2300      	movs	r3, #0
 8017a08:	2200      	movs	r2, #0
 8017a0a:	6879      	ldr	r1, [r7, #4]
 8017a0c:	47a0      	blx	r4
 8017a0e:	4603      	mov	r3, r0
 8017a10:	73fb      	strb	r3, [r7, #15]
 8017a12:	e001      	b.n	8017a18 <tcp_process_refused_data+0x9c>
 8017a14:	2300      	movs	r3, #0
 8017a16:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a1c:	f113 0f0d 	cmn.w	r3, #13
 8017a20:	d110      	bne.n	8017a44 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8017a22:	f06f 030c 	mvn.w	r3, #12
 8017a26:	e00e      	b.n	8017a46 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8017a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a2c:	f113 0f0d 	cmn.w	r3, #13
 8017a30:	d102      	bne.n	8017a38 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017a32:	f06f 030c 	mvn.w	r3, #12
 8017a36:	e006      	b.n	8017a46 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	68ba      	ldr	r2, [r7, #8]
 8017a3c:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8017a3e:	f06f 0304 	mvn.w	r3, #4
 8017a42:	e000      	b.n	8017a46 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3714      	adds	r7, #20
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd90      	pop	{r4, r7, pc}

08017a4e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b084      	sub	sp, #16
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017a56:	e007      	b.n	8017a68 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f000 f80a 	bl	8017a78 <tcp_seg_free>
    seg = next;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d1f4      	bne.n	8017a58 <tcp_segs_free+0xa>
  }
}
 8017a6e:	bf00      	nop
 8017a70:	bf00      	nop
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d00c      	beq.n	8017aa0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d004      	beq.n	8017a98 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7fe fbbc 	bl	8016210 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017a98:	6879      	ldr	r1, [r7, #4]
 8017a9a:	2003      	movs	r0, #3
 8017a9c:	f7fd fe0e 	bl	80156bc <memp_free>
  }
}
 8017aa0:	bf00      	nop
 8017aa2:	3708      	adds	r7, #8
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b083      	sub	sp, #12
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	460b      	mov	r3, r1
 8017ab2:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	78fa      	ldrb	r2, [r7, #3]
 8017ab8:	755a      	strb	r2, [r3, #21]
}
 8017aba:	bf00      	nop
 8017abc:	370c      	adds	r7, #12
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bc80      	pop	{r7}
 8017ac2:	4770      	bx	lr

08017ac4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017acc:	2003      	movs	r0, #3
 8017ace:	f7fd fda3 	bl	8015618 <memp_malloc>
 8017ad2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d101      	bne.n	8017ade <tcp_seg_copy+0x1a>
    return NULL;
 8017ada:	2300      	movs	r3, #0
 8017adc:	e00a      	b.n	8017af4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017ade:	2210      	movs	r2, #16
 8017ae0:	6879      	ldr	r1, [r7, #4]
 8017ae2:	68f8      	ldr	r0, [r7, #12]
 8017ae4:	f00a fead 	bl	8022842 <memcpy>
  pbuf_ref(cseg->p);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fe fc39 	bl	8016364 <pbuf_ref>
  return cseg;
 8017af2:	68fb      	ldr	r3, [r7, #12]
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b084      	sub	sp, #16
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	60b9      	str	r1, [r7, #8]
 8017b06:	607a      	str	r2, [r7, #4]
 8017b08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d009      	beq.n	8017b24 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	891b      	ldrh	r3, [r3, #8]
 8017b14:	4619      	mov	r1, r3
 8017b16:	68b8      	ldr	r0, [r7, #8]
 8017b18:	f7ff fb6a 	bl	80171f0 <tcp_recved>
    pbuf_free(p);
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7fe fb77 	bl	8016210 <pbuf_free>
 8017b22:	e008      	b.n	8017b36 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8017b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d104      	bne.n	8017b36 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8017b2c:	68b8      	ldr	r0, [r7, #8]
 8017b2e:	f7ff f8ef 	bl	8016d10 <tcp_close>
 8017b32:	4603      	mov	r3, r0
 8017b34:	e000      	b.n	8017b38 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8017b36:	2300      	movs	r3, #0
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3710      	adds	r7, #16
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b086      	sub	sp, #24
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	4603      	mov	r3, r0
 8017b48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	db01      	blt.n	8017b56 <tcp_kill_prio+0x16>
 8017b52:	79fb      	ldrb	r3, [r7, #7]
 8017b54:	e000      	b.n	8017b58 <tcp_kill_prio+0x18>
 8017b56:	237f      	movs	r3, #127	@ 0x7f
 8017b58:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b62:	4b16      	ldr	r3, [pc, #88]	@ (8017bbc <tcp_kill_prio+0x7c>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	617b      	str	r3, [r7, #20]
 8017b68:	e01a      	b.n	8017ba0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	7d5b      	ldrb	r3, [r3, #21]
 8017b6e:	7afa      	ldrb	r2, [r7, #11]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d312      	bcc.n	8017b9a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017b74:	4b12      	ldr	r3, [pc, #72]	@ (8017bc0 <tcp_kill_prio+0x80>)
 8017b76:	681a      	ldr	r2, [r3, #0]
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	6a1b      	ldr	r3, [r3, #32]
 8017b7c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8017b7e:	68fa      	ldr	r2, [r7, #12]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d80a      	bhi.n	8017b9a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8017b84:	4b0e      	ldr	r3, [pc, #56]	@ (8017bc0 <tcp_kill_prio+0x80>)
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	6a1b      	ldr	r3, [r3, #32]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	7d5b      	ldrb	r3, [r3, #21]
 8017b98:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b9a:	697b      	ldr	r3, [r7, #20]
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	617b      	str	r3, [r7, #20]
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1e1      	bne.n	8017b6a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d002      	beq.n	8017bb2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017bac:	6938      	ldr	r0, [r7, #16]
 8017bae:	f7ff f979 	bl	8016ea4 <tcp_abort>
  }
}
 8017bb2:	bf00      	nop
 8017bb4:	3718      	adds	r7, #24
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	2000bd90 	.word	0x2000bd90
 8017bc0:	2000bd84 	.word	0x2000bd84

08017bc4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b086      	sub	sp, #24
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017bce:	79fb      	ldrb	r3, [r7, #7]
 8017bd0:	2b08      	cmp	r3, #8
 8017bd2:	d009      	beq.n	8017be8 <tcp_kill_state+0x24>
 8017bd4:	79fb      	ldrb	r3, [r7, #7]
 8017bd6:	2b09      	cmp	r3, #9
 8017bd8:	d006      	beq.n	8017be8 <tcp_kill_state+0x24>
 8017bda:	4b1a      	ldr	r3, [pc, #104]	@ (8017c44 <tcp_kill_state+0x80>)
 8017bdc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017be0:	4919      	ldr	r1, [pc, #100]	@ (8017c48 <tcp_kill_state+0x84>)
 8017be2:	481a      	ldr	r0, [pc, #104]	@ (8017c4c <tcp_kill_state+0x88>)
 8017be4:	f00a fb32 	bl	802224c <iprintf>

  inactivity = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017bec:	2300      	movs	r3, #0
 8017bee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017bf0:	4b17      	ldr	r3, [pc, #92]	@ (8017c50 <tcp_kill_state+0x8c>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	617b      	str	r3, [r7, #20]
 8017bf6:	e017      	b.n	8017c28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017bf8:	697b      	ldr	r3, [r7, #20]
 8017bfa:	7d1b      	ldrb	r3, [r3, #20]
 8017bfc:	79fa      	ldrb	r2, [r7, #7]
 8017bfe:	429a      	cmp	r2, r3
 8017c00:	d10f      	bne.n	8017c22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017c02:	4b14      	ldr	r3, [pc, #80]	@ (8017c54 <tcp_kill_state+0x90>)
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	6a1b      	ldr	r3, [r3, #32]
 8017c0a:	1ad3      	subs	r3, r2, r3
 8017c0c:	68fa      	ldr	r2, [r7, #12]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d807      	bhi.n	8017c22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017c12:	4b10      	ldr	r3, [pc, #64]	@ (8017c54 <tcp_kill_state+0x90>)
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	6a1b      	ldr	r3, [r3, #32]
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c22:	697b      	ldr	r3, [r7, #20]
 8017c24:	68db      	ldr	r3, [r3, #12]
 8017c26:	617b      	str	r3, [r7, #20]
 8017c28:	697b      	ldr	r3, [r7, #20]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d1e4      	bne.n	8017bf8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d003      	beq.n	8017c3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017c34:	2100      	movs	r1, #0
 8017c36:	6938      	ldr	r0, [r7, #16]
 8017c38:	f7ff f882 	bl	8016d40 <tcp_abandon>
  }
}
 8017c3c:	bf00      	nop
 8017c3e:	3718      	adds	r7, #24
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	08026694 	.word	0x08026694
 8017c48:	080269a4 	.word	0x080269a4
 8017c4c:	080266d0 	.word	0x080266d0
 8017c50:	2000bd90 	.word	0x2000bd90
 8017c54:	2000bd84 	.word	0x2000bd84

08017c58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c66:	4b12      	ldr	r3, [pc, #72]	@ (8017cb0 <tcp_kill_timewait+0x58>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	60fb      	str	r3, [r7, #12]
 8017c6c:	e012      	b.n	8017c94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017c6e:	4b11      	ldr	r3, [pc, #68]	@ (8017cb4 <tcp_kill_timewait+0x5c>)
 8017c70:	681a      	ldr	r2, [r3, #0]
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	6a1b      	ldr	r3, [r3, #32]
 8017c76:	1ad3      	subs	r3, r2, r3
 8017c78:	687a      	ldr	r2, [r7, #4]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d807      	bhi.n	8017c8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8017cb4 <tcp_kill_timewait+0x5c>)
 8017c80:	681a      	ldr	r2, [r3, #0]
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	6a1b      	ldr	r3, [r3, #32]
 8017c86:	1ad3      	subs	r3, r2, r3
 8017c88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	68db      	ldr	r3, [r3, #12]
 8017c92:	60fb      	str	r3, [r7, #12]
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d1e9      	bne.n	8017c6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d002      	beq.n	8017ca6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017ca0:	68b8      	ldr	r0, [r7, #8]
 8017ca2:	f7ff f8ff 	bl	8016ea4 <tcp_abort>
  }
}
 8017ca6:	bf00      	nop
 8017ca8:	3710      	adds	r7, #16
 8017caa:	46bd      	mov	sp, r7
 8017cac:	bd80      	pop	{r7, pc}
 8017cae:	bf00      	nop
 8017cb0:	2000bd94 	.word	0x2000bd94
 8017cb4:	2000bd84 	.word	0x2000bd84

08017cb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cc2:	2001      	movs	r0, #1
 8017cc4:	f7fd fca8 	bl	8015618 <memp_malloc>
 8017cc8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d14c      	bne.n	8017d6a <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017cd0:	f7ff ffc2 	bl	8017c58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cd4:	2001      	movs	r0, #1
 8017cd6:	f7fd fc9f 	bl	8015618 <memp_malloc>
 8017cda:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d139      	bne.n	8017d56 <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017ce2:	2009      	movs	r0, #9
 8017ce4:	f7ff ff6e 	bl	8017bc4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017ce8:	2001      	movs	r0, #1
 8017cea:	f7fd fc95 	bl	8015618 <memp_malloc>
 8017cee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d125      	bne.n	8017d42 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017cf6:	2008      	movs	r0, #8
 8017cf8:	f7ff ff64 	bl	8017bc4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017cfc:	2001      	movs	r0, #1
 8017cfe:	f7fd fc8b 	bl	8015618 <memp_malloc>
 8017d02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d111      	bne.n	8017d2e <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017d0a:	79fb      	ldrb	r3, [r7, #7]
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f7ff ff17 	bl	8017b40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d12:	2001      	movs	r0, #1
 8017d14:	f7fd fc80 	bl	8015618 <memp_malloc>
 8017d18:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d006      	beq.n	8017d2e <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d20:	4b36      	ldr	r3, [pc, #216]	@ (8017dfc <tcp_alloc+0x144>)
 8017d22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d26:	881a      	ldrh	r2, [r3, #0]
 8017d28:	3a01      	subs	r2, #1
 8017d2a:	b292      	uxth	r2, r2
 8017d2c:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d006      	beq.n	8017d42 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d34:	4b31      	ldr	r3, [pc, #196]	@ (8017dfc <tcp_alloc+0x144>)
 8017d36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d3a:	881a      	ldrh	r2, [r3, #0]
 8017d3c:	3a01      	subs	r2, #1
 8017d3e:	b292      	uxth	r2, r2
 8017d40:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d006      	beq.n	8017d56 <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d48:	4b2c      	ldr	r3, [pc, #176]	@ (8017dfc <tcp_alloc+0x144>)
 8017d4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d4e:	881a      	ldrh	r2, [r3, #0]
 8017d50:	3a01      	subs	r2, #1
 8017d52:	b292      	uxth	r2, r2
 8017d54:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d006      	beq.n	8017d6a <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017d5c:	4b27      	ldr	r3, [pc, #156]	@ (8017dfc <tcp_alloc+0x144>)
 8017d5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d62:	881a      	ldrh	r2, [r3, #0]
 8017d64:	3a01      	subs	r2, #1
 8017d66:	b292      	uxth	r2, r2
 8017d68:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d03f      	beq.n	8017df0 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017d70:	2298      	movs	r2, #152	@ 0x98
 8017d72:	2100      	movs	r1, #0
 8017d74:	68f8      	ldr	r0, [r7, #12]
 8017d76:	f00a fc3f 	bl	80225f8 <memset>
    pcb->prio = prio;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	79fa      	ldrb	r2, [r7, #7]
 8017d7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017d86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	22ff      	movs	r2, #255	@ 0xff
 8017d9e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017da6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	2206      	movs	r2, #6
 8017dac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	2206      	movs	r2, #6
 8017db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017dbc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8017dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8017e00 <tcp_alloc+0x148>)
 8017dc8:	681a      	ldr	r2, [r3, #0]
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017dce:	4b0d      	ldr	r3, [pc, #52]	@ (8017e04 <tcp_alloc+0x14c>)
 8017dd0:	781a      	ldrb	r2, [r3, #0]
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	4a09      	ldr	r2, [pc, #36]	@ (8017e08 <tcp_alloc+0x150>)
 8017de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	4a08      	ldr	r2, [pc, #32]	@ (8017e0c <tcp_alloc+0x154>)
 8017dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017df0:	68fb      	ldr	r3, [r7, #12]
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3710      	adds	r7, #16
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	2000bbec 	.word	0x2000bbec
 8017e00:	2000bd84 	.word	0x2000bd84
 8017e04:	2000bd9a 	.word	0x2000bd9a
 8017e08:	08017afd 	.word	0x08017afd
 8017e0c:	006ddd00 	.word	0x006ddd00

08017e10 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	4603      	mov	r3, r0
 8017e18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017e1a:	2040      	movs	r0, #64	@ 0x40
 8017e1c:	f7ff ff4c 	bl	8017cb8 <tcp_alloc>
 8017e20:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017e22:	68fb      	ldr	r3, [r7, #12]
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	3710      	adds	r7, #16
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d002      	beq.n	8017e42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	683a      	ldr	r2, [r7, #0]
 8017e40:	611a      	str	r2, [r3, #16]
  }
}
 8017e42:	bf00      	nop
 8017e44:	370c      	adds	r7, #12
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bc80      	pop	{r7}
 8017e4a:	4770      	bx	lr

08017e4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b082      	sub	sp, #8
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d00e      	beq.n	8017e7a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	7d1b      	ldrb	r3, [r3, #20]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d106      	bne.n	8017e72 <tcp_recv+0x26>
 8017e64:	4b07      	ldr	r3, [pc, #28]	@ (8017e84 <tcp_recv+0x38>)
 8017e66:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 8017e6a:	4907      	ldr	r1, [pc, #28]	@ (8017e88 <tcp_recv+0x3c>)
 8017e6c:	4807      	ldr	r0, [pc, #28]	@ (8017e8c <tcp_recv+0x40>)
 8017e6e:	f00a f9ed 	bl	802224c <iprintf>
    pcb->recv = recv;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	683a      	ldr	r2, [r7, #0]
 8017e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8017e7a:	bf00      	nop
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	08026694 	.word	0x08026694
 8017e88:	080269b4 	.word	0x080269b4
 8017e8c:	080266d0 	.word	0x080266d0

08017e90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00d      	beq.n	8017ebc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	7d1b      	ldrb	r3, [r3, #20]
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d106      	bne.n	8017eb6 <tcp_sent+0x26>
 8017ea8:	4b06      	ldr	r3, [pc, #24]	@ (8017ec4 <tcp_sent+0x34>)
 8017eaa:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8017eae:	4906      	ldr	r1, [pc, #24]	@ (8017ec8 <tcp_sent+0x38>)
 8017eb0:	4806      	ldr	r0, [pc, #24]	@ (8017ecc <tcp_sent+0x3c>)
 8017eb2:	f00a f9cb 	bl	802224c <iprintf>
    pcb->sent = sent;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	683a      	ldr	r2, [r7, #0]
 8017eba:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8017ebc:	bf00      	nop
 8017ebe:	3708      	adds	r7, #8
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}
 8017ec4:	08026694 	.word	0x08026694
 8017ec8:	080269dc 	.word	0x080269dc
 8017ecc:	080266d0 	.word	0x080266d0

08017ed0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d00e      	beq.n	8017efe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	7d1b      	ldrb	r3, [r3, #20]
 8017ee4:	2b01      	cmp	r3, #1
 8017ee6:	d106      	bne.n	8017ef6 <tcp_err+0x26>
 8017ee8:	4b07      	ldr	r3, [pc, #28]	@ (8017f08 <tcp_err+0x38>)
 8017eea:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 8017eee:	4907      	ldr	r1, [pc, #28]	@ (8017f0c <tcp_err+0x3c>)
 8017ef0:	4807      	ldr	r0, [pc, #28]	@ (8017f10 <tcp_err+0x40>)
 8017ef2:	f00a f9ab 	bl	802224c <iprintf>
    pcb->errf = err;
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	683a      	ldr	r2, [r7, #0]
 8017efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8017efe:	bf00      	nop
 8017f00:	3708      	adds	r7, #8
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	08026694 	.word	0x08026694
 8017f0c:	08026a04 	.word	0x08026a04
 8017f10:	080266d0 	.word	0x080266d0

08017f14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017f14:	b480      	push	{r7}
 8017f16:	b085      	sub	sp, #20
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
 8017f1c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d008      	beq.n	8017f36 <tcp_accept+0x22>
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	7d1b      	ldrb	r3, [r3, #20]
 8017f28:	2b01      	cmp	r3, #1
 8017f2a:	d104      	bne.n	8017f36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	683a      	ldr	r2, [r7, #0]
 8017f34:	619a      	str	r2, [r3, #24]
  }
}
 8017f36:	bf00      	nop
 8017f38:	3714      	adds	r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bc80      	pop	{r7}
 8017f3e:	4770      	bx	lr

08017f40 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	60f8      	str	r0, [r7, #12]
 8017f48:	60b9      	str	r1, [r7, #8]
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	7d1b      	ldrb	r3, [r3, #20]
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d106      	bne.n	8017f64 <tcp_poll+0x24>
 8017f56:	4b09      	ldr	r3, [pc, #36]	@ (8017f7c <tcp_poll+0x3c>)
 8017f58:	f240 7203 	movw	r2, #1795	@ 0x703
 8017f5c:	4908      	ldr	r1, [pc, #32]	@ (8017f80 <tcp_poll+0x40>)
 8017f5e:	4809      	ldr	r0, [pc, #36]	@ (8017f84 <tcp_poll+0x44>)
 8017f60:	f00a f974 	bl	802224c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	68ba      	ldr	r2, [r7, #8]
 8017f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	79fa      	ldrb	r2, [r7, #7]
 8017f70:	771a      	strb	r2, [r3, #28]
}
 8017f72:	bf00      	nop
 8017f74:	3710      	adds	r7, #16
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bd80      	pop	{r7, pc}
 8017f7a:	bf00      	nop
 8017f7c:	08026694 	.word	0x08026694
 8017f80:	08026a2c 	.word	0x08026a2c
 8017f84:	080266d0 	.word	0x080266d0

08017f88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	7d1b      	ldrb	r3, [r3, #20]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d034      	beq.n	8018002 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017f9c:	2b0a      	cmp	r3, #10
 8017f9e:	d030      	beq.n	8018002 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8017fa4:	2b01      	cmp	r3, #1
 8017fa6:	d02c      	beq.n	8018002 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d007      	beq.n	8017fc0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7fe f92b 	bl	8016210 <pbuf_free>
      pcb->refused_data = NULL;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f7ff fd42 	bl	8017a4e <tcp_segs_free>
    pcb->ooseq = NULL;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fd6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7ff fd36 	bl	8017a4e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7ff fd31 	bl	8017a4e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	669a      	str	r2, [r3, #104]	@ 0x68
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8018002:	bf00      	nop
 8018004:	3708      	adds	r7, #8
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}
	...

0801800c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	683a      	ldr	r2, [r7, #0]
 801801c:	429a      	cmp	r2, r3
 801801e:	d105      	bne.n	801802c <tcp_pcb_remove+0x20>
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	68da      	ldr	r2, [r3, #12]
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	601a      	str	r2, [r3, #0]
 801802a:	e013      	b.n	8018054 <tcp_pcb_remove+0x48>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	60fb      	str	r3, [r7, #12]
 8018032:	e00c      	b.n	801804e <tcp_pcb_remove+0x42>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	683a      	ldr	r2, [r7, #0]
 801803a:	429a      	cmp	r2, r3
 801803c:	d104      	bne.n	8018048 <tcp_pcb_remove+0x3c>
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	68da      	ldr	r2, [r3, #12]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	60da      	str	r2, [r3, #12]
 8018046:	e005      	b.n	8018054 <tcp_pcb_remove+0x48>
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	68db      	ldr	r3, [r3, #12]
 801804c:	60fb      	str	r3, [r7, #12]
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d1ef      	bne.n	8018034 <tcp_pcb_remove+0x28>
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	2200      	movs	r2, #0
 8018058:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801805a:	6838      	ldr	r0, [r7, #0]
 801805c:	f7ff ff94 	bl	8017f88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	7d1b      	ldrb	r3, [r3, #20]
 8018064:	2b0a      	cmp	r3, #10
 8018066:	d013      	beq.n	8018090 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801806c:	2b01      	cmp	r3, #1
 801806e:	d00f      	beq.n	8018090 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	7e9b      	ldrb	r3, [r3, #26]
 8018074:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8018078:	2b00      	cmp	r3, #0
 801807a:	d009      	beq.n	8018090 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	7e9b      	ldrb	r3, [r3, #26]
 8018080:	f043 0302 	orr.w	r3, r3, #2
 8018084:	b2da      	uxtb	r2, r3
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801808a:	6838      	ldr	r0, [r7, #0]
 801808c:	f003 fa6a 	bl	801b564 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	7d1b      	ldrb	r3, [r3, #20]
 8018094:	2b01      	cmp	r3, #1
 8018096:	d020      	beq.n	80180da <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801809c:	2b00      	cmp	r3, #0
 801809e:	d006      	beq.n	80180ae <tcp_pcb_remove+0xa2>
 80180a0:	4b13      	ldr	r3, [pc, #76]	@ (80180f0 <tcp_pcb_remove+0xe4>)
 80180a2:	f240 7253 	movw	r2, #1875	@ 0x753
 80180a6:	4913      	ldr	r1, [pc, #76]	@ (80180f4 <tcp_pcb_remove+0xe8>)
 80180a8:	4813      	ldr	r0, [pc, #76]	@ (80180f8 <tcp_pcb_remove+0xec>)
 80180aa:	f00a f8cf 	bl	802224c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d006      	beq.n	80180c4 <tcp_pcb_remove+0xb8>
 80180b6:	4b0e      	ldr	r3, [pc, #56]	@ (80180f0 <tcp_pcb_remove+0xe4>)
 80180b8:	f240 7254 	movw	r2, #1876	@ 0x754
 80180bc:	490f      	ldr	r1, [pc, #60]	@ (80180fc <tcp_pcb_remove+0xf0>)
 80180be:	480e      	ldr	r0, [pc, #56]	@ (80180f8 <tcp_pcb_remove+0xec>)
 80180c0:	f00a f8c4 	bl	802224c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d006      	beq.n	80180da <tcp_pcb_remove+0xce>
 80180cc:	4b08      	ldr	r3, [pc, #32]	@ (80180f0 <tcp_pcb_remove+0xe4>)
 80180ce:	f240 7256 	movw	r2, #1878	@ 0x756
 80180d2:	490b      	ldr	r1, [pc, #44]	@ (8018100 <tcp_pcb_remove+0xf4>)
 80180d4:	4808      	ldr	r0, [pc, #32]	@ (80180f8 <tcp_pcb_remove+0xec>)
 80180d6:	f00a f8b9 	bl	802224c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	2200      	movs	r2, #0
 80180de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	2200      	movs	r2, #0
 80180e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80180e6:	bf00      	nop
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	08026694 	.word	0x08026694
 80180f4:	08026a4c 	.word	0x08026a4c
 80180f8:	080266d0 	.word	0x080266d0
 80180fc:	08026a64 	.word	0x08026a64
 8018100:	08026a80 	.word	0x08026a80

08018104 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018104:	b480      	push	{r7}
 8018106:	b083      	sub	sp, #12
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801810c:	4b06      	ldr	r3, [pc, #24]	@ (8018128 <tcp_next_iss+0x24>)
 801810e:	681a      	ldr	r2, [r3, #0]
 8018110:	4b06      	ldr	r3, [pc, #24]	@ (801812c <tcp_next_iss+0x28>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	4413      	add	r3, r2
 8018116:	4a04      	ldr	r2, [pc, #16]	@ (8018128 <tcp_next_iss+0x24>)
 8018118:	6013      	str	r3, [r2, #0]
  return iss;
 801811a:	4b03      	ldr	r3, [pc, #12]	@ (8018128 <tcp_next_iss+0x24>)
 801811c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801811e:	4618      	mov	r0, r3
 8018120:	370c      	adds	r7, #12
 8018122:	46bd      	mov	sp, r7
 8018124:	bc80      	pop	{r7}
 8018126:	4770      	bx	lr
 8018128:	2000011c 	.word	0x2000011c
 801812c:	2000bd84 	.word	0x2000bd84

08018130 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b084      	sub	sp, #16
 8018134:	af00      	add	r7, sp, #0
 8018136:	4603      	mov	r3, r0
 8018138:	6039      	str	r1, [r7, #0]
 801813a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801813c:	6838      	ldr	r0, [r7, #0]
 801813e:	f007 fdd5 	bl	801fcec <ip4_route>
 8018142:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d101      	bne.n	801814e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801814a:	88fb      	ldrh	r3, [r7, #6]
 801814c:	e010      	b.n	8018170 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018152:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8018154:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d008      	beq.n	801816e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801815c:	897b      	ldrh	r3, [r7, #10]
 801815e:	3b28      	subs	r3, #40	@ 0x28
 8018160:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018162:	893a      	ldrh	r2, [r7, #8]
 8018164:	88fb      	ldrh	r3, [r7, #6]
 8018166:	4293      	cmp	r3, r2
 8018168:	bf28      	it	cs
 801816a:	4613      	movcs	r3, r2
 801816c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801816e:	88fb      	ldrh	r3, [r7, #6]
}
 8018170:	4618      	mov	r0, r3
 8018172:	3710      	adds	r7, #16
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018186:	e011      	b.n	80181ac <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	681a      	ldr	r2, [r3, #0]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	429a      	cmp	r2, r3
 8018192:	d108      	bne.n	80181a6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	68db      	ldr	r3, [r3, #12]
 8018198:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801819a:	68f8      	ldr	r0, [r7, #12]
 801819c:	f7fe fe82 	bl	8016ea4 <tcp_abort>
      pcb = next;
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	60fb      	str	r3, [r7, #12]
 80181a4:	e002      	b.n	80181ac <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d1ea      	bne.n	8018188 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80181b2:	bf00      	nop
 80181b4:	bf00      	nop
 80181b6:	3710      	adds	r7, #16
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}

080181bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b084      	sub	sp, #16
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
 80181c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d02c      	beq.n	8018226 <tcp_netif_ip_addr_changed+0x6a>
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d028      	beq.n	8018226 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80181d4:	4b16      	ldr	r3, [pc, #88]	@ (8018230 <tcp_netif_ip_addr_changed+0x74>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4619      	mov	r1, r3
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	f7ff ffcc 	bl	8018178 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80181e0:	4b14      	ldr	r3, [pc, #80]	@ (8018234 <tcp_netif_ip_addr_changed+0x78>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	4619      	mov	r1, r3
 80181e6:	6878      	ldr	r0, [r7, #4]
 80181e8:	f7ff ffc6 	bl	8018178 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d019      	beq.n	8018226 <tcp_netif_ip_addr_changed+0x6a>
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d015      	beq.n	8018226 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80181fa:	4b0f      	ldr	r3, [pc, #60]	@ (8018238 <tcp_netif_ip_addr_changed+0x7c>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	60fb      	str	r3, [r7, #12]
 8018200:	e00e      	b.n	8018220 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	68db      	ldr	r3, [r3, #12]
 8018206:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	429a      	cmp	r2, r3
 8018212:	d103      	bne.n	801821c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018214:	683b      	ldr	r3, [r7, #0]
 8018216:	681a      	ldr	r2, [r3, #0]
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	60fb      	str	r3, [r7, #12]
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d1ed      	bne.n	8018202 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018226:	bf00      	nop
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	2000bd90 	.word	0x2000bd90
 8018234:	2000bd88 	.word	0x2000bd88
 8018238:	2000bd8c 	.word	0x2000bd8c

0801823c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801823c:	b590      	push	{r4, r7, lr}
 801823e:	b08b      	sub	sp, #44	@ 0x2c
 8018240:	af02      	add	r7, sp, #8
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8018246:	4b99      	ldr	r3, [pc, #612]	@ (80184ac <tcp_input+0x270>)
 8018248:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 801824c:	3301      	adds	r3, #1
 801824e:	b29a      	uxth	r2, r3
 8018250:	4b96      	ldr	r3, [pc, #600]	@ (80184ac <tcp_input+0x270>)
 8018252:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 8018256:	4b95      	ldr	r3, [pc, #596]	@ (80184ac <tcp_input+0x270>)
 8018258:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801825c:	3301      	adds	r3, #1
 801825e:	4a93      	ldr	r2, [pc, #588]	@ (80184ac <tcp_input+0x270>)
 8018260:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	4a91      	ldr	r2, [pc, #580]	@ (80184b0 <tcp_input+0x274>)
 801826a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	895b      	ldrh	r3, [r3, #10]
 8018270:	2b13      	cmp	r3, #19
 8018272:	d808      	bhi.n	8018286 <tcp_input+0x4a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8018274:	4b8d      	ldr	r3, [pc, #564]	@ (80184ac <tcp_input+0x270>)
 8018276:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801827a:	3301      	adds	r3, #1
 801827c:	b29a      	uxth	r2, r3
 801827e:	4b8b      	ldr	r3, [pc, #556]	@ (80184ac <tcp_input+0x270>)
 8018280:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8018284:	e3e0      	b.n	8018a48 <tcp_input+0x80c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018286:	4b8b      	ldr	r3, [pc, #556]	@ (80184b4 <tcp_input+0x278>)
 8018288:	695b      	ldr	r3, [r3, #20]
 801828a:	4a8a      	ldr	r2, [pc, #552]	@ (80184b4 <tcp_input+0x278>)
 801828c:	6812      	ldr	r2, [r2, #0]
 801828e:	4611      	mov	r1, r2
 8018290:	4618      	mov	r0, r3
 8018292:	f008 f88f 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 8018296:	4603      	mov	r3, r0
 8018298:	2b00      	cmp	r3, #0
 801829a:	d105      	bne.n	80182a8 <tcp_input+0x6c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801829c:	4b85      	ldr	r3, [pc, #532]	@ (80184b4 <tcp_input+0x278>)
 801829e:	695b      	ldr	r3, [r3, #20]
 80182a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80182a4:	2be0      	cmp	r3, #224	@ 0xe0
 80182a6:	d108      	bne.n	80182ba <tcp_input+0x7e>
    TCP_STATS_INC(tcp.proterr);
 80182a8:	4b80      	ldr	r3, [pc, #512]	@ (80184ac <tcp_input+0x270>)
 80182aa:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80182ae:	3301      	adds	r3, #1
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	4b7e      	ldr	r3, [pc, #504]	@ (80184ac <tcp_input+0x270>)
 80182b4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 80182b8:	e3c6      	b.n	8018a48 <tcp_input+0x80c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80182ba:	4b7d      	ldr	r3, [pc, #500]	@ (80184b0 <tcp_input+0x274>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	899b      	ldrh	r3, [r3, #12]
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7fc fcfe 	bl	8014cc4 <lwip_htons>
 80182c8:	4603      	mov	r3, r0
 80182ca:	0b1b      	lsrs	r3, r3, #12
 80182cc:	b29b      	uxth	r3, r3
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80182d4:	7cbb      	ldrb	r3, [r7, #18]
 80182d6:	2b13      	cmp	r3, #19
 80182d8:	d905      	bls.n	80182e6 <tcp_input+0xaa>
 80182da:	7cbb      	ldrb	r3, [r7, #18]
 80182dc:	b29a      	uxth	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	891b      	ldrh	r3, [r3, #8]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	d908      	bls.n	80182f8 <tcp_input+0xbc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80182e6:	4b71      	ldr	r3, [pc, #452]	@ (80184ac <tcp_input+0x270>)
 80182e8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80182ec:	3301      	adds	r3, #1
 80182ee:	b29a      	uxth	r2, r3
 80182f0:	4b6e      	ldr	r3, [pc, #440]	@ (80184ac <tcp_input+0x270>)
 80182f2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80182f6:	e3a7      	b.n	8018a48 <tcp_input+0x80c>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80182f8:	7cbb      	ldrb	r3, [r7, #18]
 80182fa:	b29b      	uxth	r3, r3
 80182fc:	3b14      	subs	r3, #20
 80182fe:	b29a      	uxth	r2, r3
 8018300:	4b6d      	ldr	r3, [pc, #436]	@ (80184b8 <tcp_input+0x27c>)
 8018302:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018304:	4b6d      	ldr	r3, [pc, #436]	@ (80184bc <tcp_input+0x280>)
 8018306:	2200      	movs	r2, #0
 8018308:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	895a      	ldrh	r2, [r3, #10]
 801830e:	7cbb      	ldrb	r3, [r7, #18]
 8018310:	b29b      	uxth	r3, r3
 8018312:	429a      	cmp	r2, r3
 8018314:	d30d      	bcc.n	8018332 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018316:	4b68      	ldr	r3, [pc, #416]	@ (80184b8 <tcp_input+0x27c>)
 8018318:	881a      	ldrh	r2, [r3, #0]
 801831a:	4b69      	ldr	r3, [pc, #420]	@ (80184c0 <tcp_input+0x284>)
 801831c:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801831e:	7cbb      	ldrb	r3, [r7, #18]
 8018320:	b29b      	uxth	r3, r3
 8018322:	425b      	negs	r3, r3
 8018324:	b29b      	uxth	r3, r3
 8018326:	b21b      	sxth	r3, r3
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7fd ff4c 	bl	80161c8 <pbuf_header>
 8018330:	e05d      	b.n	80183ee <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d105      	bne.n	8018346 <tcp_input+0x10a>
 801833a:	4b62      	ldr	r3, [pc, #392]	@ (80184c4 <tcp_input+0x288>)
 801833c:	22b2      	movs	r2, #178	@ 0xb2
 801833e:	4962      	ldr	r1, [pc, #392]	@ (80184c8 <tcp_input+0x28c>)
 8018340:	4862      	ldr	r0, [pc, #392]	@ (80184cc <tcp_input+0x290>)
 8018342:	f009 ff83 	bl	802224c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8018346:	f06f 0113 	mvn.w	r1, #19
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7fd ff3c 	bl	80161c8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	895a      	ldrh	r2, [r3, #10]
 8018354:	4b5a      	ldr	r3, [pc, #360]	@ (80184c0 <tcp_input+0x284>)
 8018356:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8018358:	4b57      	ldr	r3, [pc, #348]	@ (80184b8 <tcp_input+0x27c>)
 801835a:	881a      	ldrh	r2, [r3, #0]
 801835c:	4b58      	ldr	r3, [pc, #352]	@ (80184c0 <tcp_input+0x284>)
 801835e:	881b      	ldrh	r3, [r3, #0]
 8018360:	1ad3      	subs	r3, r2, r3
 8018362:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8018364:	4b56      	ldr	r3, [pc, #344]	@ (80184c0 <tcp_input+0x284>)
 8018366:	881b      	ldrh	r3, [r3, #0]
 8018368:	425b      	negs	r3, r3
 801836a:	b29b      	uxth	r3, r3
 801836c:	b21b      	sxth	r3, r3
 801836e:	4619      	mov	r1, r3
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	f7fd ff29 	bl	80161c8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	895b      	ldrh	r3, [r3, #10]
 801837c:	8a3a      	ldrh	r2, [r7, #16]
 801837e:	429a      	cmp	r2, r3
 8018380:	d908      	bls.n	8018394 <tcp_input+0x158>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8018382:	4b4a      	ldr	r3, [pc, #296]	@ (80184ac <tcp_input+0x270>)
 8018384:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8018388:	3301      	adds	r3, #1
 801838a:	b29a      	uxth	r2, r3
 801838c:	4b47      	ldr	r3, [pc, #284]	@ (80184ac <tcp_input+0x270>)
 801838e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8018392:	e359      	b.n	8018a48 <tcp_input+0x80c>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	685b      	ldr	r3, [r3, #4]
 801839a:	4a48      	ldr	r2, [pc, #288]	@ (80184bc <tcp_input+0x280>)
 801839c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	8a3b      	ldrh	r3, [r7, #16]
 80183a4:	425b      	negs	r3, r3
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	b21b      	sxth	r3, r3
 80183aa:	4619      	mov	r1, r3
 80183ac:	4610      	mov	r0, r2
 80183ae:	f7fd ff0b 	bl	80161c8 <pbuf_header>
    p->tot_len -= opt2len;
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	891a      	ldrh	r2, [r3, #8]
 80183b6:	8a3b      	ldrh	r3, [r7, #16]
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	b29a      	uxth	r2, r3
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	895b      	ldrh	r3, [r3, #10]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d005      	beq.n	80183d4 <tcp_input+0x198>
 80183c8:	4b3e      	ldr	r3, [pc, #248]	@ (80184c4 <tcp_input+0x288>)
 80183ca:	22cf      	movs	r2, #207	@ 0xcf
 80183cc:	4940      	ldr	r1, [pc, #256]	@ (80184d0 <tcp_input+0x294>)
 80183ce:	483f      	ldr	r0, [pc, #252]	@ (80184cc <tcp_input+0x290>)
 80183d0:	f009 ff3c 	bl	802224c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	891a      	ldrh	r2, [r3, #8]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	891b      	ldrh	r3, [r3, #8]
 80183de:	429a      	cmp	r2, r3
 80183e0:	d005      	beq.n	80183ee <tcp_input+0x1b2>
 80183e2:	4b38      	ldr	r3, [pc, #224]	@ (80184c4 <tcp_input+0x288>)
 80183e4:	22d0      	movs	r2, #208	@ 0xd0
 80183e6:	493b      	ldr	r1, [pc, #236]	@ (80184d4 <tcp_input+0x298>)
 80183e8:	4838      	ldr	r0, [pc, #224]	@ (80184cc <tcp_input+0x290>)
 80183ea:	f009 ff2f 	bl	802224c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80183ee:	4b30      	ldr	r3, [pc, #192]	@ (80184b0 <tcp_input+0x274>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	4a2e      	ldr	r2, [pc, #184]	@ (80184b0 <tcp_input+0x274>)
 80183f8:	6814      	ldr	r4, [r2, #0]
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7fc fc62 	bl	8014cc4 <lwip_htons>
 8018400:	4603      	mov	r3, r0
 8018402:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018404:	4b2a      	ldr	r3, [pc, #168]	@ (80184b0 <tcp_input+0x274>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	885b      	ldrh	r3, [r3, #2]
 801840a:	b29b      	uxth	r3, r3
 801840c:	4a28      	ldr	r2, [pc, #160]	@ (80184b0 <tcp_input+0x274>)
 801840e:	6814      	ldr	r4, [r2, #0]
 8018410:	4618      	mov	r0, r3
 8018412:	f7fc fc57 	bl	8014cc4 <lwip_htons>
 8018416:	4603      	mov	r3, r0
 8018418:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801841a:	4b25      	ldr	r3, [pc, #148]	@ (80184b0 <tcp_input+0x274>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	4a23      	ldr	r2, [pc, #140]	@ (80184b0 <tcp_input+0x274>)
 8018422:	6814      	ldr	r4, [r2, #0]
 8018424:	4618      	mov	r0, r3
 8018426:	f7fc fc5a 	bl	8014cde <lwip_htonl>
 801842a:	4603      	mov	r3, r0
 801842c:	6063      	str	r3, [r4, #4]
 801842e:	6863      	ldr	r3, [r4, #4]
 8018430:	4a29      	ldr	r2, [pc, #164]	@ (80184d8 <tcp_input+0x29c>)
 8018432:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018434:	4b1e      	ldr	r3, [pc, #120]	@ (80184b0 <tcp_input+0x274>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	689b      	ldr	r3, [r3, #8]
 801843a:	4a1d      	ldr	r2, [pc, #116]	@ (80184b0 <tcp_input+0x274>)
 801843c:	6814      	ldr	r4, [r2, #0]
 801843e:	4618      	mov	r0, r3
 8018440:	f7fc fc4d 	bl	8014cde <lwip_htonl>
 8018444:	4603      	mov	r3, r0
 8018446:	60a3      	str	r3, [r4, #8]
 8018448:	68a3      	ldr	r3, [r4, #8]
 801844a:	4a24      	ldr	r2, [pc, #144]	@ (80184dc <tcp_input+0x2a0>)
 801844c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801844e:	4b18      	ldr	r3, [pc, #96]	@ (80184b0 <tcp_input+0x274>)
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	89db      	ldrh	r3, [r3, #14]
 8018454:	b29b      	uxth	r3, r3
 8018456:	4a16      	ldr	r2, [pc, #88]	@ (80184b0 <tcp_input+0x274>)
 8018458:	6814      	ldr	r4, [r2, #0]
 801845a:	4618      	mov	r0, r3
 801845c:	f7fc fc32 	bl	8014cc4 <lwip_htons>
 8018460:	4603      	mov	r3, r0
 8018462:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018464:	4b12      	ldr	r3, [pc, #72]	@ (80184b0 <tcp_input+0x274>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	899b      	ldrh	r3, [r3, #12]
 801846a:	b29b      	uxth	r3, r3
 801846c:	4618      	mov	r0, r3
 801846e:	f7fc fc29 	bl	8014cc4 <lwip_htons>
 8018472:	4603      	mov	r3, r0
 8018474:	b2db      	uxtb	r3, r3
 8018476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801847a:	b2da      	uxtb	r2, r3
 801847c:	4b18      	ldr	r3, [pc, #96]	@ (80184e0 <tcp_input+0x2a4>)
 801847e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	891b      	ldrh	r3, [r3, #8]
 8018484:	4a16      	ldr	r2, [pc, #88]	@ (80184e0 <tcp_input+0x2a4>)
 8018486:	7812      	ldrb	r2, [r2, #0]
 8018488:	f002 0203 	and.w	r2, r2, #3
 801848c:	2a00      	cmp	r2, #0
 801848e:	bf14      	ite	ne
 8018490:	2201      	movne	r2, #1
 8018492:	2200      	moveq	r2, #0
 8018494:	b2d2      	uxtb	r2, r2
 8018496:	4413      	add	r3, r2
 8018498:	b29a      	uxth	r2, r3
 801849a:	4b12      	ldr	r3, [pc, #72]	@ (80184e4 <tcp_input+0x2a8>)
 801849c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801849e:	2300      	movs	r3, #0
 80184a0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80184a2:	4b11      	ldr	r3, [pc, #68]	@ (80184e8 <tcp_input+0x2ac>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	61fb      	str	r3, [r7, #28]
 80184a8:	e08d      	b.n	80185c6 <tcp_input+0x38a>
 80184aa:	bf00      	nop
 80184ac:	2000bbec 	.word	0x2000bbec
 80184b0:	2000bdac 	.word	0x2000bdac
 80184b4:	20008604 	.word	0x20008604
 80184b8:	2000bdb0 	.word	0x2000bdb0
 80184bc:	2000bdb4 	.word	0x2000bdb4
 80184c0:	2000bdb2 	.word	0x2000bdb2
 80184c4:	08026a98 	.word	0x08026a98
 80184c8:	08026acc 	.word	0x08026acc
 80184cc:	08026adc 	.word	0x08026adc
 80184d0:	08026b04 	.word	0x08026b04
 80184d4:	08026b10 	.word	0x08026b10
 80184d8:	2000bdbc 	.word	0x2000bdbc
 80184dc:	2000bdc0 	.word	0x2000bdc0
 80184e0:	2000bdc8 	.word	0x2000bdc8
 80184e4:	2000bdc6 	.word	0x2000bdc6
 80184e8:	2000bd90 	.word	0x2000bd90
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	7d1b      	ldrb	r3, [r3, #20]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d105      	bne.n	8018500 <tcp_input+0x2c4>
 80184f4:	4b77      	ldr	r3, [pc, #476]	@ (80186d4 <tcp_input+0x498>)
 80184f6:	22e2      	movs	r2, #226	@ 0xe2
 80184f8:	4977      	ldr	r1, [pc, #476]	@ (80186d8 <tcp_input+0x49c>)
 80184fa:	4878      	ldr	r0, [pc, #480]	@ (80186dc <tcp_input+0x4a0>)
 80184fc:	f009 fea6 	bl	802224c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018500:	69fb      	ldr	r3, [r7, #28]
 8018502:	7d1b      	ldrb	r3, [r3, #20]
 8018504:	2b0a      	cmp	r3, #10
 8018506:	d105      	bne.n	8018514 <tcp_input+0x2d8>
 8018508:	4b72      	ldr	r3, [pc, #456]	@ (80186d4 <tcp_input+0x498>)
 801850a:	22e3      	movs	r2, #227	@ 0xe3
 801850c:	4974      	ldr	r1, [pc, #464]	@ (80186e0 <tcp_input+0x4a4>)
 801850e:	4873      	ldr	r0, [pc, #460]	@ (80186dc <tcp_input+0x4a0>)
 8018510:	f009 fe9c 	bl	802224c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018514:	69fb      	ldr	r3, [r7, #28]
 8018516:	7d1b      	ldrb	r3, [r3, #20]
 8018518:	2b01      	cmp	r3, #1
 801851a:	d105      	bne.n	8018528 <tcp_input+0x2ec>
 801851c:	4b6d      	ldr	r3, [pc, #436]	@ (80186d4 <tcp_input+0x498>)
 801851e:	22e4      	movs	r2, #228	@ 0xe4
 8018520:	4970      	ldr	r1, [pc, #448]	@ (80186e4 <tcp_input+0x4a8>)
 8018522:	486e      	ldr	r0, [pc, #440]	@ (80186dc <tcp_input+0x4a0>)
 8018524:	f009 fe92 	bl	802224c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	8b1a      	ldrh	r2, [r3, #24]
 801852c:	4b6e      	ldr	r3, [pc, #440]	@ (80186e8 <tcp_input+0x4ac>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	881b      	ldrh	r3, [r3, #0]
 8018532:	b29b      	uxth	r3, r3
 8018534:	429a      	cmp	r2, r3
 8018536:	d141      	bne.n	80185bc <tcp_input+0x380>
        pcb->local_port == tcphdr->dest &&
 8018538:	69fb      	ldr	r3, [r7, #28]
 801853a:	8ada      	ldrh	r2, [r3, #22]
 801853c:	4b6a      	ldr	r3, [pc, #424]	@ (80186e8 <tcp_input+0x4ac>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	885b      	ldrh	r3, [r3, #2]
 8018542:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018544:	429a      	cmp	r2, r3
 8018546:	d139      	bne.n	80185bc <tcp_input+0x380>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018548:	69fb      	ldr	r3, [r7, #28]
 801854a:	685a      	ldr	r2, [r3, #4]
 801854c:	4b67      	ldr	r3, [pc, #412]	@ (80186ec <tcp_input+0x4b0>)
 801854e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018550:	429a      	cmp	r2, r3
 8018552:	d133      	bne.n	80185bc <tcp_input+0x380>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	681a      	ldr	r2, [r3, #0]
 8018558:	4b64      	ldr	r3, [pc, #400]	@ (80186ec <tcp_input+0x4b0>)
 801855a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801855c:	429a      	cmp	r2, r3
 801855e:	d12d      	bne.n	80185bc <tcp_input+0x380>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	68db      	ldr	r3, [r3, #12]
 8018564:	69fa      	ldr	r2, [r7, #28]
 8018566:	429a      	cmp	r2, r3
 8018568:	d105      	bne.n	8018576 <tcp_input+0x33a>
 801856a:	4b5a      	ldr	r3, [pc, #360]	@ (80186d4 <tcp_input+0x498>)
 801856c:	22ec      	movs	r2, #236	@ 0xec
 801856e:	4960      	ldr	r1, [pc, #384]	@ (80186f0 <tcp_input+0x4b4>)
 8018570:	485a      	ldr	r0, [pc, #360]	@ (80186dc <tcp_input+0x4a0>)
 8018572:	f009 fe6b 	bl	802224c <iprintf>
      if (prev != NULL) {
 8018576:	69bb      	ldr	r3, [r7, #24]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d00b      	beq.n	8018594 <tcp_input+0x358>
        prev->next = pcb->next;
 801857c:	69fb      	ldr	r3, [r7, #28]
 801857e:	68da      	ldr	r2, [r3, #12]
 8018580:	69bb      	ldr	r3, [r7, #24]
 8018582:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018584:	4b5b      	ldr	r3, [pc, #364]	@ (80186f4 <tcp_input+0x4b8>)
 8018586:	681a      	ldr	r2, [r3, #0]
 8018588:	69fb      	ldr	r3, [r7, #28]
 801858a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801858c:	4a59      	ldr	r2, [pc, #356]	@ (80186f4 <tcp_input+0x4b8>)
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	6013      	str	r3, [r2, #0]
 8018592:	e007      	b.n	80185a4 <tcp_input+0x368>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8018594:	4b58      	ldr	r3, [pc, #352]	@ (80186f8 <tcp_input+0x4bc>)
 8018596:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801859a:	3301      	adds	r3, #1
 801859c:	b29a      	uxth	r2, r3
 801859e:	4b56      	ldr	r3, [pc, #344]	@ (80186f8 <tcp_input+0x4bc>)
 80185a0:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80185a4:	69fb      	ldr	r3, [r7, #28]
 80185a6:	68db      	ldr	r3, [r3, #12]
 80185a8:	69fa      	ldr	r2, [r7, #28]
 80185aa:	429a      	cmp	r2, r3
 80185ac:	d10f      	bne.n	80185ce <tcp_input+0x392>
 80185ae:	4b49      	ldr	r3, [pc, #292]	@ (80186d4 <tcp_input+0x498>)
 80185b0:	22f4      	movs	r2, #244	@ 0xf4
 80185b2:	4952      	ldr	r1, [pc, #328]	@ (80186fc <tcp_input+0x4c0>)
 80185b4:	4849      	ldr	r0, [pc, #292]	@ (80186dc <tcp_input+0x4a0>)
 80185b6:	f009 fe49 	bl	802224c <iprintf>
      break;
 80185ba:	e008      	b.n	80185ce <tcp_input+0x392>
    }
    prev = pcb;
 80185bc:	69fb      	ldr	r3, [r7, #28]
 80185be:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80185c0:	69fb      	ldr	r3, [r7, #28]
 80185c2:	68db      	ldr	r3, [r3, #12]
 80185c4:	61fb      	str	r3, [r7, #28]
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d18f      	bne.n	80184ec <tcp_input+0x2b0>
 80185cc:	e000      	b.n	80185d0 <tcp_input+0x394>
      break;
 80185ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f040 809a 	bne.w	801870c <tcp_input+0x4d0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185d8:	4b49      	ldr	r3, [pc, #292]	@ (8018700 <tcp_input+0x4c4>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	61fb      	str	r3, [r7, #28]
 80185de:	e02f      	b.n	8018640 <tcp_input+0x404>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	7d1b      	ldrb	r3, [r3, #20]
 80185e4:	2b0a      	cmp	r3, #10
 80185e6:	d005      	beq.n	80185f4 <tcp_input+0x3b8>
 80185e8:	4b3a      	ldr	r3, [pc, #232]	@ (80186d4 <tcp_input+0x498>)
 80185ea:	22fe      	movs	r2, #254	@ 0xfe
 80185ec:	4945      	ldr	r1, [pc, #276]	@ (8018704 <tcp_input+0x4c8>)
 80185ee:	483b      	ldr	r0, [pc, #236]	@ (80186dc <tcp_input+0x4a0>)
 80185f0:	f009 fe2c 	bl	802224c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80185f4:	69fb      	ldr	r3, [r7, #28]
 80185f6:	8b1a      	ldrh	r2, [r3, #24]
 80185f8:	4b3b      	ldr	r3, [pc, #236]	@ (80186e8 <tcp_input+0x4ac>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	881b      	ldrh	r3, [r3, #0]
 80185fe:	b29b      	uxth	r3, r3
 8018600:	429a      	cmp	r2, r3
 8018602:	d11a      	bne.n	801863a <tcp_input+0x3fe>
          pcb->local_port == tcphdr->dest &&
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	8ada      	ldrh	r2, [r3, #22]
 8018608:	4b37      	ldr	r3, [pc, #220]	@ (80186e8 <tcp_input+0x4ac>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	885b      	ldrh	r3, [r3, #2]
 801860e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018610:	429a      	cmp	r2, r3
 8018612:	d112      	bne.n	801863a <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	685a      	ldr	r2, [r3, #4]
 8018618:	4b34      	ldr	r3, [pc, #208]	@ (80186ec <tcp_input+0x4b0>)
 801861a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801861c:	429a      	cmp	r2, r3
 801861e:	d10c      	bne.n	801863a <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018620:	69fb      	ldr	r3, [r7, #28]
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	4b31      	ldr	r3, [pc, #196]	@ (80186ec <tcp_input+0x4b0>)
 8018626:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018628:	429a      	cmp	r2, r3
 801862a:	d106      	bne.n	801863a <tcp_input+0x3fe>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801862c:	69f8      	ldr	r0, [r7, #28]
 801862e:	f000 fb5b 	bl	8018ce8 <tcp_timewait_input>
        pbuf_free(p);
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f7fd fdec 	bl	8016210 <pbuf_free>
        return;
 8018638:	e21a      	b.n	8018a70 <tcp_input+0x834>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801863a:	69fb      	ldr	r3, [r7, #28]
 801863c:	68db      	ldr	r3, [r3, #12]
 801863e:	61fb      	str	r3, [r7, #28]
 8018640:	69fb      	ldr	r3, [r7, #28]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d1cc      	bne.n	80185e0 <tcp_input+0x3a4>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8018646:	2300      	movs	r3, #0
 8018648:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801864a:	4b2f      	ldr	r3, [pc, #188]	@ (8018708 <tcp_input+0x4cc>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	617b      	str	r3, [r7, #20]
 8018650:	e019      	b.n	8018686 <tcp_input+0x44a>
      if (lpcb->local_port == tcphdr->dest) {
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	8ada      	ldrh	r2, [r3, #22]
 8018656:	4b24      	ldr	r3, [pc, #144]	@ (80186e8 <tcp_input+0x4ac>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	885b      	ldrh	r3, [r3, #2]
 801865c:	b29b      	uxth	r3, r3
 801865e:	429a      	cmp	r2, r3
 8018660:	d10c      	bne.n	801867c <tcp_input+0x440>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	4b21      	ldr	r3, [pc, #132]	@ (80186ec <tcp_input+0x4b0>)
 8018668:	695b      	ldr	r3, [r3, #20]
 801866a:	429a      	cmp	r2, r3
 801866c:	d00f      	beq.n	801868e <tcp_input+0x452>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d00d      	beq.n	8018690 <tcp_input+0x454>
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d009      	beq.n	8018690 <tcp_input+0x454>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	617b      	str	r3, [r7, #20]
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d1e2      	bne.n	8018652 <tcp_input+0x416>
 801868c:	e000      	b.n	8018690 <tcp_input+0x454>
            break;
 801868e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d03a      	beq.n	801870c <tcp_input+0x4d0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018696:	69bb      	ldr	r3, [r7, #24]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d00b      	beq.n	80186b4 <tcp_input+0x478>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	68da      	ldr	r2, [r3, #12]
 80186a0:	69bb      	ldr	r3, [r7, #24]
 80186a2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80186a4:	4b18      	ldr	r3, [pc, #96]	@ (8018708 <tcp_input+0x4cc>)
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80186ac:	4a16      	ldr	r2, [pc, #88]	@ (8018708 <tcp_input+0x4cc>)
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	6013      	str	r3, [r2, #0]
 80186b2:	e007      	b.n	80186c4 <tcp_input+0x488>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80186b4:	4b10      	ldr	r3, [pc, #64]	@ (80186f8 <tcp_input+0x4bc>)
 80186b6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80186ba:	3301      	adds	r3, #1
 80186bc:	b29a      	uxth	r2, r3
 80186be:	4b0e      	ldr	r3, [pc, #56]	@ (80186f8 <tcp_input+0x4bc>)
 80186c0:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80186c4:	6978      	ldr	r0, [r7, #20]
 80186c6:	f000 fa1d 	bl	8018b04 <tcp_listen_input>
      pbuf_free(p);
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	f7fd fda0 	bl	8016210 <pbuf_free>
      return;
 80186d0:	e1ce      	b.n	8018a70 <tcp_input+0x834>
 80186d2:	bf00      	nop
 80186d4:	08026a98 	.word	0x08026a98
 80186d8:	08026b30 	.word	0x08026b30
 80186dc:	08026adc 	.word	0x08026adc
 80186e0:	08026b58 	.word	0x08026b58
 80186e4:	08026b84 	.word	0x08026b84
 80186e8:	2000bdac 	.word	0x2000bdac
 80186ec:	20008604 	.word	0x20008604
 80186f0:	08026bac 	.word	0x08026bac
 80186f4:	2000bd90 	.word	0x2000bd90
 80186f8:	2000bbec 	.word	0x2000bbec
 80186fc:	08026bd8 	.word	0x08026bd8
 8018700:	2000bd94 	.word	0x2000bd94
 8018704:	08026c04 	.word	0x08026c04
 8018708:	2000bd8c 	.word	0x2000bd8c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	2b00      	cmp	r3, #0
 8018710:	f000 8164 	beq.w	80189dc <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018714:	4b9a      	ldr	r3, [pc, #616]	@ (8018980 <tcp_input+0x744>)
 8018716:	2200      	movs	r2, #0
 8018718:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	891a      	ldrh	r2, [r3, #8]
 801871e:	4b98      	ldr	r3, [pc, #608]	@ (8018980 <tcp_input+0x744>)
 8018720:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018722:	4a97      	ldr	r2, [pc, #604]	@ (8018980 <tcp_input+0x744>)
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018728:	4b96      	ldr	r3, [pc, #600]	@ (8018984 <tcp_input+0x748>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	4a94      	ldr	r2, [pc, #592]	@ (8018980 <tcp_input+0x744>)
 801872e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018730:	4b95      	ldr	r3, [pc, #596]	@ (8018988 <tcp_input+0x74c>)
 8018732:	2200      	movs	r2, #0
 8018734:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018736:	4b95      	ldr	r3, [pc, #596]	@ (801898c <tcp_input+0x750>)
 8018738:	2200      	movs	r2, #0
 801873a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801873c:	4b94      	ldr	r3, [pc, #592]	@ (8018990 <tcp_input+0x754>)
 801873e:	2200      	movs	r2, #0
 8018740:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018742:	4b94      	ldr	r3, [pc, #592]	@ (8018994 <tcp_input+0x758>)
 8018744:	781b      	ldrb	r3, [r3, #0]
 8018746:	f003 0308 	and.w	r3, r3, #8
 801874a:	2b00      	cmp	r3, #0
 801874c:	d006      	beq.n	801875c <tcp_input+0x520>
      p->flags |= PBUF_FLAG_PUSH;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	7b5b      	ldrb	r3, [r3, #13]
 8018752:	f043 0301 	orr.w	r3, r3, #1
 8018756:	b2da      	uxtb	r2, r3
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801875c:	69fb      	ldr	r3, [r7, #28]
 801875e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018760:	2b00      	cmp	r3, #0
 8018762:	d025      	beq.n	80187b0 <tcp_input+0x574>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018764:	69f8      	ldr	r0, [r7, #28]
 8018766:	f7ff f909 	bl	801797c <tcp_process_refused_data>
 801876a:	4603      	mov	r3, r0
 801876c:	f113 0f0d 	cmn.w	r3, #13
 8018770:	d007      	beq.n	8018782 <tcp_input+0x546>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018776:	2b00      	cmp	r3, #0
 8018778:	d01a      	beq.n	80187b0 <tcp_input+0x574>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801877a:	4b87      	ldr	r3, [pc, #540]	@ (8018998 <tcp_input+0x75c>)
 801877c:	881b      	ldrh	r3, [r3, #0]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d016      	beq.n	80187b0 <tcp_input+0x574>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018782:	69fb      	ldr	r3, [r7, #28]
 8018784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018786:	2b00      	cmp	r3, #0
 8018788:	d102      	bne.n	8018790 <tcp_input+0x554>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801878a:	69f8      	ldr	r0, [r7, #28]
 801878c:	f002 fe8e 	bl	801b4ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8018790:	4b82      	ldr	r3, [pc, #520]	@ (801899c <tcp_input+0x760>)
 8018792:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018796:	3301      	adds	r3, #1
 8018798:	b29a      	uxth	r2, r3
 801879a:	4b80      	ldr	r3, [pc, #512]	@ (801899c <tcp_input+0x760>)
 801879c:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 80187a0:	4b7e      	ldr	r3, [pc, #504]	@ (801899c <tcp_input+0x760>)
 80187a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80187a6:	3301      	adds	r3, #1
 80187a8:	4a7c      	ldr	r2, [pc, #496]	@ (801899c <tcp_input+0x760>)
 80187aa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        goto aborted;
 80187ae:	e102      	b.n	80189b6 <tcp_input+0x77a>
      }
    }
    tcp_input_pcb = pcb;
 80187b0:	4a7b      	ldr	r2, [pc, #492]	@ (80189a0 <tcp_input+0x764>)
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80187b6:	69f8      	ldr	r0, [r7, #28]
 80187b8:	f000 fafe 	bl	8018db8 <tcp_process>
 80187bc:	4603      	mov	r3, r0
 80187be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80187c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187c4:	f113 0f0d 	cmn.w	r3, #13
 80187c8:	f000 80d0 	beq.w	801896c <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 80187cc:	4b6f      	ldr	r3, [pc, #444]	@ (801898c <tcp_input+0x750>)
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	f003 0308 	and.w	r3, r3, #8
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d016      	beq.n	8018806 <tcp_input+0x5ca>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d008      	beq.n	80187f4 <tcp_input+0x5b8>
 80187e2:	69fb      	ldr	r3, [r7, #28]
 80187e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80187e8:	69fa      	ldr	r2, [r7, #28]
 80187ea:	6912      	ldr	r2, [r2, #16]
 80187ec:	f06f 010d 	mvn.w	r1, #13
 80187f0:	4610      	mov	r0, r2
 80187f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80187f4:	69f9      	ldr	r1, [r7, #28]
 80187f6:	486b      	ldr	r0, [pc, #428]	@ (80189a4 <tcp_input+0x768>)
 80187f8:	f7ff fc08 	bl	801800c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80187fc:	69f9      	ldr	r1, [r7, #28]
 80187fe:	2001      	movs	r0, #1
 8018800:	f7fc ff5c 	bl	80156bc <memp_free>
 8018804:	e0d7      	b.n	80189b6 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8018806:	2300      	movs	r3, #0
 8018808:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801880a:	4b61      	ldr	r3, [pc, #388]	@ (8018990 <tcp_input+0x754>)
 801880c:	881b      	ldrh	r3, [r3, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d01b      	beq.n	801884a <tcp_input+0x60e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018812:	4b5f      	ldr	r3, [pc, #380]	@ (8018990 <tcp_input+0x754>)
 8018814:	881b      	ldrh	r3, [r3, #0]
 8018816:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018818:	69fb      	ldr	r3, [r7, #28]
 801881a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801881c:	2b00      	cmp	r3, #0
 801881e:	d009      	beq.n	8018834 <tcp_input+0x5f8>
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018824:	69fa      	ldr	r2, [r7, #28]
 8018826:	6910      	ldr	r0, [r2, #16]
 8018828:	89fa      	ldrh	r2, [r7, #14]
 801882a:	69f9      	ldr	r1, [r7, #28]
 801882c:	4798      	blx	r3
 801882e:	4603      	mov	r3, r0
 8018830:	74fb      	strb	r3, [r7, #19]
 8018832:	e001      	b.n	8018838 <tcp_input+0x5fc>
 8018834:	2300      	movs	r3, #0
 8018836:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801883c:	f113 0f0d 	cmn.w	r3, #13
 8018840:	f000 8096 	beq.w	8018970 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018844:	4b52      	ldr	r3, [pc, #328]	@ (8018990 <tcp_input+0x754>)
 8018846:	2200      	movs	r2, #0
 8018848:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801884a:	69f8      	ldr	r0, [r7, #28]
 801884c:	f000 f928 	bl	8018aa0 <tcp_input_delayed_close>
 8018850:	4603      	mov	r3, r0
 8018852:	2b00      	cmp	r3, #0
 8018854:	f040 808e 	bne.w	8018974 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018858:	4b4b      	ldr	r3, [pc, #300]	@ (8018988 <tcp_input+0x74c>)
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d041      	beq.n	80188e4 <tcp_input+0x6a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018864:	2b00      	cmp	r3, #0
 8018866:	d006      	beq.n	8018876 <tcp_input+0x63a>
 8018868:	4b4f      	ldr	r3, [pc, #316]	@ (80189a8 <tcp_input+0x76c>)
 801886a:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 801886e:	494f      	ldr	r1, [pc, #316]	@ (80189ac <tcp_input+0x770>)
 8018870:	484f      	ldr	r0, [pc, #316]	@ (80189b0 <tcp_input+0x774>)
 8018872:	f009 fceb 	bl	802224c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018876:	69fb      	ldr	r3, [r7, #28]
 8018878:	7e9b      	ldrb	r3, [r3, #26]
 801887a:	f003 0310 	and.w	r3, r3, #16
 801887e:	2b00      	cmp	r3, #0
 8018880:	d008      	beq.n	8018894 <tcp_input+0x658>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018882:	4b41      	ldr	r3, [pc, #260]	@ (8018988 <tcp_input+0x74c>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4618      	mov	r0, r3
 8018888:	f7fd fcc2 	bl	8016210 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801888c:	69f8      	ldr	r0, [r7, #28]
 801888e:	f7fe fb09 	bl	8016ea4 <tcp_abort>
            goto aborted;
 8018892:	e090      	b.n	80189b6 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018894:	69fb      	ldr	r3, [r7, #28]
 8018896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801889a:	2b00      	cmp	r3, #0
 801889c:	d00c      	beq.n	80188b8 <tcp_input+0x67c>
 801889e:	69fb      	ldr	r3, [r7, #28]
 80188a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80188a4:	69fb      	ldr	r3, [r7, #28]
 80188a6:	6918      	ldr	r0, [r3, #16]
 80188a8:	4b37      	ldr	r3, [pc, #220]	@ (8018988 <tcp_input+0x74c>)
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	2300      	movs	r3, #0
 80188ae:	69f9      	ldr	r1, [r7, #28]
 80188b0:	47a0      	blx	r4
 80188b2:	4603      	mov	r3, r0
 80188b4:	74fb      	strb	r3, [r7, #19]
 80188b6:	e008      	b.n	80188ca <tcp_input+0x68e>
 80188b8:	4b33      	ldr	r3, [pc, #204]	@ (8018988 <tcp_input+0x74c>)
 80188ba:	681a      	ldr	r2, [r3, #0]
 80188bc:	2300      	movs	r3, #0
 80188be:	69f9      	ldr	r1, [r7, #28]
 80188c0:	2000      	movs	r0, #0
 80188c2:	f7ff f91b 	bl	8017afc <tcp_recv_null>
 80188c6:	4603      	mov	r3, r0
 80188c8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80188ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188ce:	f113 0f0d 	cmn.w	r3, #13
 80188d2:	d051      	beq.n	8018978 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80188d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d003      	beq.n	80188e4 <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80188dc:	4b2a      	ldr	r3, [pc, #168]	@ (8018988 <tcp_input+0x74c>)
 80188de:	681a      	ldr	r2, [r3, #0]
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80188e4:	4b29      	ldr	r3, [pc, #164]	@ (801898c <tcp_input+0x750>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	f003 0320 	and.w	r3, r3, #32
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d030      	beq.n	8018952 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 80188f0:	69fb      	ldr	r3, [r7, #28]
 80188f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d009      	beq.n	801890c <tcp_input+0x6d0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80188f8:	69fb      	ldr	r3, [r7, #28]
 80188fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188fc:	7b5a      	ldrb	r2, [r3, #13]
 80188fe:	69fb      	ldr	r3, [r7, #28]
 8018900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018902:	f042 0220 	orr.w	r2, r2, #32
 8018906:	b2d2      	uxtb	r2, r2
 8018908:	735a      	strb	r2, [r3, #13]
 801890a:	e022      	b.n	8018952 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801890c:	69fb      	ldr	r3, [r7, #28]
 801890e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018910:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8018914:	d005      	beq.n	8018922 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801891a:	3301      	adds	r3, #1
 801891c:	b29a      	uxth	r2, r3
 801891e:	69fb      	ldr	r3, [r7, #28]
 8018920:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018922:	69fb      	ldr	r3, [r7, #28]
 8018924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018928:	2b00      	cmp	r3, #0
 801892a:	d00b      	beq.n	8018944 <tcp_input+0x708>
 801892c:	69fb      	ldr	r3, [r7, #28]
 801892e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018932:	69fb      	ldr	r3, [r7, #28]
 8018934:	6918      	ldr	r0, [r3, #16]
 8018936:	2300      	movs	r3, #0
 8018938:	2200      	movs	r2, #0
 801893a:	69f9      	ldr	r1, [r7, #28]
 801893c:	47a0      	blx	r4
 801893e:	4603      	mov	r3, r0
 8018940:	74fb      	strb	r3, [r7, #19]
 8018942:	e001      	b.n	8018948 <tcp_input+0x70c>
 8018944:	2300      	movs	r3, #0
 8018946:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801894c:	f113 0f0d 	cmn.w	r3, #13
 8018950:	d014      	beq.n	801897c <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018952:	4b13      	ldr	r3, [pc, #76]	@ (80189a0 <tcp_input+0x764>)
 8018954:	2200      	movs	r2, #0
 8018956:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018958:	69f8      	ldr	r0, [r7, #28]
 801895a:	f000 f8a1 	bl	8018aa0 <tcp_input_delayed_close>
 801895e:	4603      	mov	r3, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d127      	bne.n	80189b4 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018964:	69f8      	ldr	r0, [r7, #28]
 8018966:	f002 fdfd 	bl	801b564 <tcp_output>
 801896a:	e024      	b.n	80189b6 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801896c:	bf00      	nop
 801896e:	e022      	b.n	80189b6 <tcp_input+0x77a>
              goto aborted;
 8018970:	bf00      	nop
 8018972:	e020      	b.n	80189b6 <tcp_input+0x77a>
          goto aborted;
 8018974:	bf00      	nop
 8018976:	e01e      	b.n	80189b6 <tcp_input+0x77a>
            goto aborted;
 8018978:	bf00      	nop
 801897a:	e01c      	b.n	80189b6 <tcp_input+0x77a>
              goto aborted;
 801897c:	bf00      	nop
 801897e:	e01a      	b.n	80189b6 <tcp_input+0x77a>
 8018980:	2000bd9c 	.word	0x2000bd9c
 8018984:	2000bdac 	.word	0x2000bdac
 8018988:	2000bdcc 	.word	0x2000bdcc
 801898c:	2000bdc9 	.word	0x2000bdc9
 8018990:	2000bdc4 	.word	0x2000bdc4
 8018994:	2000bdc8 	.word	0x2000bdc8
 8018998:	2000bdc6 	.word	0x2000bdc6
 801899c:	2000bbec 	.word	0x2000bbec
 80189a0:	2000bdd0 	.word	0x2000bdd0
 80189a4:	2000bd90 	.word	0x2000bd90
 80189a8:	08026a98 	.word	0x08026a98
 80189ac:	08026c34 	.word	0x08026c34
 80189b0:	08026adc 	.word	0x08026adc
          goto aborted;
 80189b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80189b6:	4b30      	ldr	r3, [pc, #192]	@ (8018a78 <tcp_input+0x83c>)
 80189b8:	2200      	movs	r2, #0
 80189ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80189bc:	4b2f      	ldr	r3, [pc, #188]	@ (8018a7c <tcp_input+0x840>)
 80189be:	2200      	movs	r2, #0
 80189c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80189c2:	4b2f      	ldr	r3, [pc, #188]	@ (8018a80 <tcp_input+0x844>)
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d051      	beq.n	8018a6e <tcp_input+0x832>
    {
      pbuf_free(inseg.p);
 80189ca:	4b2d      	ldr	r3, [pc, #180]	@ (8018a80 <tcp_input+0x844>)
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7fd fc1e 	bl	8016210 <pbuf_free>
      inseg.p = NULL;
 80189d4:	4b2a      	ldr	r3, [pc, #168]	@ (8018a80 <tcp_input+0x844>)
 80189d6:	2200      	movs	r2, #0
 80189d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80189da:	e048      	b.n	8018a6e <tcp_input+0x832>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80189dc:	4b29      	ldr	r3, [pc, #164]	@ (8018a84 <tcp_input+0x848>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	899b      	ldrh	r3, [r3, #12]
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	4618      	mov	r0, r3
 80189e6:	f7fc f96d 	bl	8014cc4 <lwip_htons>
 80189ea:	4603      	mov	r3, r0
 80189ec:	f003 0304 	and.w	r3, r3, #4
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d125      	bne.n	8018a40 <tcp_input+0x804>
      TCP_STATS_INC(tcp.proterr);
 80189f4:	4b24      	ldr	r3, [pc, #144]	@ (8018a88 <tcp_input+0x84c>)
 80189f6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80189fa:	3301      	adds	r3, #1
 80189fc:	b29a      	uxth	r2, r3
 80189fe:	4b22      	ldr	r3, [pc, #136]	@ (8018a88 <tcp_input+0x84c>)
 8018a00:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8018a04:	4b20      	ldr	r3, [pc, #128]	@ (8018a88 <tcp_input+0x84c>)
 8018a06:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	b29a      	uxth	r2, r3
 8018a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8018a88 <tcp_input+0x84c>)
 8018a10:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a14:	4b1d      	ldr	r3, [pc, #116]	@ (8018a8c <tcp_input+0x850>)
 8018a16:	6818      	ldr	r0, [r3, #0]
 8018a18:	4b1d      	ldr	r3, [pc, #116]	@ (8018a90 <tcp_input+0x854>)
 8018a1a:	881b      	ldrh	r3, [r3, #0]
 8018a1c:	461a      	mov	r2, r3
 8018a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8018a94 <tcp_input+0x858>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a24:	4b17      	ldr	r3, [pc, #92]	@ (8018a84 <tcp_input+0x848>)
 8018a26:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a28:	885b      	ldrh	r3, [r3, #2]
 8018a2a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a2c:	4a15      	ldr	r2, [pc, #84]	@ (8018a84 <tcp_input+0x848>)
 8018a2e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a30:	8812      	ldrh	r2, [r2, #0]
 8018a32:	b292      	uxth	r2, r2
 8018a34:	9201      	str	r2, [sp, #4]
 8018a36:	9300      	str	r3, [sp, #0]
 8018a38:	4b17      	ldr	r3, [pc, #92]	@ (8018a98 <tcp_input+0x85c>)
 8018a3a:	4a18      	ldr	r2, [pc, #96]	@ (8018a9c <tcp_input+0x860>)
 8018a3c:	f003 f82a 	bl	801ba94 <tcp_rst>
    pbuf_free(p);
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7fd fbe5 	bl	8016210 <pbuf_free>
  return;
 8018a46:	e012      	b.n	8018a6e <tcp_input+0x832>
dropped:
  TCP_STATS_INC(tcp.drop);
 8018a48:	4b0f      	ldr	r3, [pc, #60]	@ (8018a88 <tcp_input+0x84c>)
 8018a4a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018a4e:	3301      	adds	r3, #1
 8018a50:	b29a      	uxth	r2, r3
 8018a52:	4b0d      	ldr	r3, [pc, #52]	@ (8018a88 <tcp_input+0x84c>)
 8018a54:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 8018a58:	4b0b      	ldr	r3, [pc, #44]	@ (8018a88 <tcp_input+0x84c>)
 8018a5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018a5e:	3301      	adds	r3, #1
 8018a60:	4a09      	ldr	r2, [pc, #36]	@ (8018a88 <tcp_input+0x84c>)
 8018a62:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  pbuf_free(p);
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	f7fd fbd2 	bl	8016210 <pbuf_free>
 8018a6c:	e000      	b.n	8018a70 <tcp_input+0x834>
  return;
 8018a6e:	bf00      	nop
}
 8018a70:	3724      	adds	r7, #36	@ 0x24
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd90      	pop	{r4, r7, pc}
 8018a76:	bf00      	nop
 8018a78:	2000bdd0 	.word	0x2000bdd0
 8018a7c:	2000bdcc 	.word	0x2000bdcc
 8018a80:	2000bd9c 	.word	0x2000bd9c
 8018a84:	2000bdac 	.word	0x2000bdac
 8018a88:	2000bbec 	.word	0x2000bbec
 8018a8c:	2000bdc0 	.word	0x2000bdc0
 8018a90:	2000bdc6 	.word	0x2000bdc6
 8018a94:	2000bdbc 	.word	0x2000bdbc
 8018a98:	20008614 	.word	0x20008614
 8018a9c:	20008618 	.word	0x20008618

08018aa0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8018aa8:	4b14      	ldr	r3, [pc, #80]	@ (8018afc <tcp_input_delayed_close+0x5c>)
 8018aaa:	781b      	ldrb	r3, [r3, #0]
 8018aac:	f003 0310 	and.w	r3, r3, #16
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d01d      	beq.n	8018af0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	7e9b      	ldrb	r3, [r3, #26]
 8018ab8:	f003 0310 	and.w	r3, r3, #16
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d10d      	bne.n	8018adc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d008      	beq.n	8018adc <tcp_input_delayed_close+0x3c>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	6912      	ldr	r2, [r2, #16]
 8018ad4:	f06f 010e 	mvn.w	r1, #14
 8018ad8:	4610      	mov	r0, r2
 8018ada:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018adc:	6879      	ldr	r1, [r7, #4]
 8018ade:	4808      	ldr	r0, [pc, #32]	@ (8018b00 <tcp_input_delayed_close+0x60>)
 8018ae0:	f7ff fa94 	bl	801800c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8018ae4:	6879      	ldr	r1, [r7, #4]
 8018ae6:	2001      	movs	r0, #1
 8018ae8:	f7fc fde8 	bl	80156bc <memp_free>
    return 1;
 8018aec:	2301      	movs	r3, #1
 8018aee:	e000      	b.n	8018af2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8018af0:	2300      	movs	r3, #0
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3708      	adds	r7, #8
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	2000bdc9 	.word	0x2000bdc9
 8018b00:	2000bd90 	.word	0x2000bd90

08018b04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b088      	sub	sp, #32
 8018b08:	af02      	add	r7, sp, #8
 8018b0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8018cbc <tcp_listen_input+0x1b8>)
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	f003 0304 	and.w	r3, r3, #4
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	f040 80ca 	bne.w	8018cae <tcp_listen_input+0x1aa>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018b1a:	4b68      	ldr	r3, [pc, #416]	@ (8018cbc <tcp_listen_input+0x1b8>)
 8018b1c:	781b      	ldrb	r3, [r3, #0]
 8018b1e:	f003 0310 	and.w	r3, r3, #16
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d016      	beq.n	8018b54 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b26:	4b66      	ldr	r3, [pc, #408]	@ (8018cc0 <tcp_listen_input+0x1bc>)
 8018b28:	6818      	ldr	r0, [r3, #0]
 8018b2a:	4b66      	ldr	r3, [pc, #408]	@ (8018cc4 <tcp_listen_input+0x1c0>)
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	461a      	mov	r2, r3
 8018b30:	4b65      	ldr	r3, [pc, #404]	@ (8018cc8 <tcp_listen_input+0x1c4>)
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b36:	4b65      	ldr	r3, [pc, #404]	@ (8018ccc <tcp_listen_input+0x1c8>)
 8018b38:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b3a:	885b      	ldrh	r3, [r3, #2]
 8018b3c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b3e:	4a63      	ldr	r2, [pc, #396]	@ (8018ccc <tcp_listen_input+0x1c8>)
 8018b40:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b42:	8812      	ldrh	r2, [r2, #0]
 8018b44:	b292      	uxth	r2, r2
 8018b46:	9201      	str	r2, [sp, #4]
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	4b61      	ldr	r3, [pc, #388]	@ (8018cd0 <tcp_listen_input+0x1cc>)
 8018b4c:	4a61      	ldr	r2, [pc, #388]	@ (8018cd4 <tcp_listen_input+0x1d0>)
 8018b4e:	f002 ffa1 	bl	801ba94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018b52:	e0ae      	b.n	8018cb2 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 8018b54:	4b59      	ldr	r3, [pc, #356]	@ (8018cbc <tcp_listen_input+0x1b8>)
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	f003 0302 	and.w	r3, r3, #2
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	f000 80a8 	beq.w	8018cb2 <tcp_listen_input+0x1ae>
    npcb = tcp_alloc(pcb->prio);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	7d5b      	ldrb	r3, [r3, #21]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7ff f8a6 	bl	8017cb8 <tcp_alloc>
 8018b6c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d119      	bne.n	8018ba8 <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8018b74:	4b58      	ldr	r3, [pc, #352]	@ (8018cd8 <tcp_listen_input+0x1d4>)
 8018b76:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	b29a      	uxth	r2, r3
 8018b7e:	4b56      	ldr	r3, [pc, #344]	@ (8018cd8 <tcp_listen_input+0x1d4>)
 8018b80:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	699b      	ldr	r3, [r3, #24]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d00a      	beq.n	8018ba2 <tcp_listen_input+0x9e>
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	699b      	ldr	r3, [r3, #24]
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	6910      	ldr	r0, [r2, #16]
 8018b94:	f04f 32ff 	mov.w	r2, #4294967295
 8018b98:	2100      	movs	r1, #0
 8018b9a:	4798      	blx	r3
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	73bb      	strb	r3, [r7, #14]
      return;
 8018ba0:	e088      	b.n	8018cb4 <tcp_listen_input+0x1b0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018ba2:	23f0      	movs	r3, #240	@ 0xf0
 8018ba4:	73bb      	strb	r3, [r7, #14]
      return;
 8018ba6:	e085      	b.n	8018cb4 <tcp_listen_input+0x1b0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8018cdc <tcp_listen_input+0x1d8>)
 8018baa:	695a      	ldr	r2, [r3, #20]
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8018cdc <tcp_listen_input+0x1d8>)
 8018bb2:	691a      	ldr	r2, [r3, #16]
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	8ada      	ldrh	r2, [r3, #22]
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018bc0:	4b42      	ldr	r3, [pc, #264]	@ (8018ccc <tcp_listen_input+0x1c8>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	881b      	ldrh	r3, [r3, #0]
 8018bc6:	b29a      	uxth	r2, r3
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	2203      	movs	r2, #3
 8018bd0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8018cc8 <tcp_listen_input+0x1c4>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	1c5a      	adds	r2, r3, #1
 8018bd8:	697b      	ldr	r3, [r7, #20]
 8018bda:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018be0:	697b      	ldr	r3, [r7, #20]
 8018be2:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018be4:	6978      	ldr	r0, [r7, #20]
 8018be6:	f7ff fa8d 	bl	8018104 <tcp_next_iss>
 8018bea:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	693a      	ldr	r2, [r7, #16]
 8018bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8018bf2:	697b      	ldr	r3, [r7, #20]
 8018bf4:	693a      	ldr	r2, [r7, #16]
 8018bf6:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8018bf8:	697b      	ldr	r3, [r7, #20]
 8018bfa:	693a      	ldr	r2, [r7, #16]
 8018bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	693a      	ldr	r2, [r7, #16]
 8018c02:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018c04:	4b30      	ldr	r3, [pc, #192]	@ (8018cc8 <tcp_listen_input+0x1c4>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	1e5a      	subs	r2, r3, #1
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	691a      	ldr	r2, [r3, #16]
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	687a      	ldr	r2, [r7, #4]
 8018c1a:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	7a1b      	ldrb	r3, [r3, #8]
 8018c20:	f003 030c 	and.w	r3, r3, #12
 8018c24:	b2da      	uxtb	r2, r3
 8018c26:	697b      	ldr	r3, [r7, #20]
 8018c28:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8018ce0 <tcp_listen_input+0x1dc>)
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	697b      	ldr	r3, [r7, #20]
 8018c30:	60da      	str	r2, [r3, #12]
 8018c32:	4a2b      	ldr	r2, [pc, #172]	@ (8018ce0 <tcp_listen_input+0x1dc>)
 8018c34:	697b      	ldr	r3, [r7, #20]
 8018c36:	6013      	str	r3, [r2, #0]
 8018c38:	f003 f9a4 	bl	801bf84 <tcp_timer_needed>
 8018c3c:	4b29      	ldr	r3, [pc, #164]	@ (8018ce4 <tcp_listen_input+0x1e0>)
 8018c3e:	2201      	movs	r2, #1
 8018c40:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018c42:	6978      	ldr	r0, [r7, #20]
 8018c44:	f001 fd16 	bl	801a674 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018c48:	4b20      	ldr	r3, [pc, #128]	@ (8018ccc <tcp_listen_input+0x1c8>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	89db      	ldrh	r3, [r3, #14]
 8018c4e:	b29a      	uxth	r2, r3
 8018c50:	697b      	ldr	r3, [r7, #20]
 8018c52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018c56:	697b      	ldr	r3, [r7, #20]
 8018c58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018c5c:	697b      	ldr	r3, [r7, #20]
 8018c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018c62:	697b      	ldr	r3, [r7, #20]
 8018c64:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8018c66:	697b      	ldr	r3, [r7, #20]
 8018c68:	3304      	adds	r3, #4
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	4610      	mov	r0, r2
 8018c6e:	f7ff fa5f 	bl	8018130 <tcp_eff_send_mss_impl>
 8018c72:	4603      	mov	r3, r0
 8018c74:	461a      	mov	r2, r3
 8018c76:	697b      	ldr	r3, [r7, #20]
 8018c78:	865a      	strh	r2, [r3, #50]	@ 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 8018c7a:	4b17      	ldr	r3, [pc, #92]	@ (8018cd8 <tcp_listen_input+0x1d4>)
 8018c7c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018c80:	3301      	adds	r3, #1
 8018c82:	4a15      	ldr	r2, [pc, #84]	@ (8018cd8 <tcp_listen_input+0x1d4>)
 8018c84:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c88:	2112      	movs	r1, #18
 8018c8a:	6978      	ldr	r0, [r7, #20]
 8018c8c:	f002 faf8 	bl	801b280 <tcp_enqueue_flags>
 8018c90:	4603      	mov	r3, r0
 8018c92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d004      	beq.n	8018ca6 <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 8018c9c:	2100      	movs	r1, #0
 8018c9e:	6978      	ldr	r0, [r7, #20]
 8018ca0:	f7fe f84e 	bl	8016d40 <tcp_abandon>
      return;
 8018ca4:	e006      	b.n	8018cb4 <tcp_listen_input+0x1b0>
    tcp_output(npcb);
 8018ca6:	6978      	ldr	r0, [r7, #20]
 8018ca8:	f002 fc5c 	bl	801b564 <tcp_output>
  return;
 8018cac:	e001      	b.n	8018cb2 <tcp_listen_input+0x1ae>
    return;
 8018cae:	bf00      	nop
 8018cb0:	e000      	b.n	8018cb4 <tcp_listen_input+0x1b0>
  return;
 8018cb2:	bf00      	nop
}
 8018cb4:	3718      	adds	r7, #24
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	2000bdc8 	.word	0x2000bdc8
 8018cc0:	2000bdc0 	.word	0x2000bdc0
 8018cc4:	2000bdc6 	.word	0x2000bdc6
 8018cc8:	2000bdbc 	.word	0x2000bdbc
 8018ccc:	2000bdac 	.word	0x2000bdac
 8018cd0:	20008614 	.word	0x20008614
 8018cd4:	20008618 	.word	0x20008618
 8018cd8:	2000bbec 	.word	0x2000bbec
 8018cdc:	20008604 	.word	0x20008604
 8018ce0:	2000bd90 	.word	0x2000bd90
 8018ce4:	2000bd98 	.word	0x2000bd98

08018ce8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af02      	add	r7, sp, #8
 8018cee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018cf0:	4b29      	ldr	r3, [pc, #164]	@ (8018d98 <tcp_timewait_input+0xb0>)
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	f003 0304 	and.w	r3, r3, #4
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d146      	bne.n	8018d8a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018cfc:	4b26      	ldr	r3, [pc, #152]	@ (8018d98 <tcp_timewait_input+0xb0>)
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	f003 0302 	and.w	r3, r3, #2
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d027      	beq.n	8018d58 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018d08:	4b24      	ldr	r3, [pc, #144]	@ (8018d9c <tcp_timewait_input+0xb4>)
 8018d0a:	681a      	ldr	r2, [r3, #0]
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d10:	1ad3      	subs	r3, r2, r3
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	db2a      	blt.n	8018d6c <tcp_timewait_input+0x84>
 8018d16:	4b21      	ldr	r3, [pc, #132]	@ (8018d9c <tcp_timewait_input+0xb4>)
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d1e:	6879      	ldr	r1, [r7, #4]
 8018d20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018d22:	440b      	add	r3, r1
 8018d24:	1ad3      	subs	r3, r2, r3
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	dc20      	bgt.n	8018d6c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8018da0 <tcp_timewait_input+0xb8>)
 8018d2c:	6818      	ldr	r0, [r3, #0]
 8018d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8018da4 <tcp_timewait_input+0xbc>)
 8018d30:	881b      	ldrh	r3, [r3, #0]
 8018d32:	461a      	mov	r2, r3
 8018d34:	4b19      	ldr	r3, [pc, #100]	@ (8018d9c <tcp_timewait_input+0xb4>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8018da8 <tcp_timewait_input+0xc0>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d3e:	885b      	ldrh	r3, [r3, #2]
 8018d40:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d42:	4a19      	ldr	r2, [pc, #100]	@ (8018da8 <tcp_timewait_input+0xc0>)
 8018d44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d46:	8812      	ldrh	r2, [r2, #0]
 8018d48:	b292      	uxth	r2, r2
 8018d4a:	9201      	str	r2, [sp, #4]
 8018d4c:	9300      	str	r3, [sp, #0]
 8018d4e:	4b17      	ldr	r3, [pc, #92]	@ (8018dac <tcp_timewait_input+0xc4>)
 8018d50:	4a17      	ldr	r2, [pc, #92]	@ (8018db0 <tcp_timewait_input+0xc8>)
 8018d52:	f002 fe9f 	bl	801ba94 <tcp_rst>
      return;
 8018d56:	e01b      	b.n	8018d90 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8018d58:	4b0f      	ldr	r3, [pc, #60]	@ (8018d98 <tcp_timewait_input+0xb0>)
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	f003 0301 	and.w	r3, r3, #1
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d003      	beq.n	8018d6c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d64:	4b13      	ldr	r3, [pc, #76]	@ (8018db4 <tcp_timewait_input+0xcc>)
 8018d66:	681a      	ldr	r2, [r3, #0]
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8018da4 <tcp_timewait_input+0xbc>)
 8018d6e:	881b      	ldrh	r3, [r3, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d00c      	beq.n	8018d8e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	7e9b      	ldrb	r3, [r3, #26]
 8018d78:	f043 0302 	orr.w	r3, r3, #2
 8018d7c:	b2da      	uxtb	r2, r3
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8018d82:	6878      	ldr	r0, [r7, #4]
 8018d84:	f002 fbee 	bl	801b564 <tcp_output>
  }
  return;
 8018d88:	e001      	b.n	8018d8e <tcp_timewait_input+0xa6>
    return;
 8018d8a:	bf00      	nop
 8018d8c:	e000      	b.n	8018d90 <tcp_timewait_input+0xa8>
  return;
 8018d8e:	bf00      	nop
}
 8018d90:	3708      	adds	r7, #8
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	2000bdc8 	.word	0x2000bdc8
 8018d9c:	2000bdbc 	.word	0x2000bdbc
 8018da0:	2000bdc0 	.word	0x2000bdc0
 8018da4:	2000bdc6 	.word	0x2000bdc6
 8018da8:	2000bdac 	.word	0x2000bdac
 8018dac:	20008614 	.word	0x20008614
 8018db0:	20008618 	.word	0x20008618
 8018db4:	2000bd84 	.word	0x2000bd84

08018db8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b08a      	sub	sp, #40	@ 0x28
 8018dbc:	af02      	add	r7, sp, #8
 8018dbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018dc8:	4b93      	ldr	r3, [pc, #588]	@ (8019018 <tcp_process+0x260>)
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	f003 0304 	and.w	r3, r3, #4
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d04e      	beq.n	8018e72 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	7d1b      	ldrb	r3, [r3, #20]
 8018dd8:	2b02      	cmp	r3, #2
 8018dda:	d108      	bne.n	8018dee <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018de0:	4b8e      	ldr	r3, [pc, #568]	@ (801901c <tcp_process+0x264>)
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	429a      	cmp	r2, r3
 8018de6:	d123      	bne.n	8018e30 <tcp_process+0x78>
        acceptable = 1;
 8018de8:	2301      	movs	r3, #1
 8018dea:	76fb      	strb	r3, [r7, #27]
 8018dec:	e020      	b.n	8018e30 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018df2:	4b8b      	ldr	r3, [pc, #556]	@ (8019020 <tcp_process+0x268>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d102      	bne.n	8018e00 <tcp_process+0x48>
        acceptable = 1;
 8018dfa:	2301      	movs	r3, #1
 8018dfc:	76fb      	strb	r3, [r7, #27]
 8018dfe:	e017      	b.n	8018e30 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018e00:	4b87      	ldr	r3, [pc, #540]	@ (8019020 <tcp_process+0x268>)
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e08:	1ad3      	subs	r3, r2, r3
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	db10      	blt.n	8018e30 <tcp_process+0x78>
 8018e0e:	4b84      	ldr	r3, [pc, #528]	@ (8019020 <tcp_process+0x268>)
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e16:	6879      	ldr	r1, [r7, #4]
 8018e18:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018e1a:	440b      	add	r3, r1
 8018e1c:	1ad3      	subs	r3, r2, r3
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	dc06      	bgt.n	8018e30 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	7e9b      	ldrb	r3, [r3, #26]
 8018e26:	f043 0302 	orr.w	r3, r3, #2
 8018e2a:	b2da      	uxtb	r2, r3
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018e30:	7efb      	ldrb	r3, [r7, #27]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d01b      	beq.n	8018e6e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	7d1b      	ldrb	r3, [r3, #20]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d106      	bne.n	8018e4c <tcp_process+0x94>
 8018e3e:	4b79      	ldr	r3, [pc, #484]	@ (8019024 <tcp_process+0x26c>)
 8018e40:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018e44:	4978      	ldr	r1, [pc, #480]	@ (8019028 <tcp_process+0x270>)
 8018e46:	4879      	ldr	r0, [pc, #484]	@ (801902c <tcp_process+0x274>)
 8018e48:	f009 fa00 	bl	802224c <iprintf>
      recv_flags |= TF_RESET;
 8018e4c:	4b78      	ldr	r3, [pc, #480]	@ (8019030 <tcp_process+0x278>)
 8018e4e:	781b      	ldrb	r3, [r3, #0]
 8018e50:	f043 0308 	orr.w	r3, r3, #8
 8018e54:	b2da      	uxtb	r2, r3
 8018e56:	4b76      	ldr	r3, [pc, #472]	@ (8019030 <tcp_process+0x278>)
 8018e58:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	7e9b      	ldrb	r3, [r3, #26]
 8018e5e:	f023 0301 	bic.w	r3, r3, #1
 8018e62:	b2da      	uxtb	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8018e68:	f06f 030d 	mvn.w	r3, #13
 8018e6c:	e348      	b.n	8019500 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	e346      	b.n	8019500 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e72:	4b69      	ldr	r3, [pc, #420]	@ (8019018 <tcp_process+0x260>)
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	f003 0302 	and.w	r3, r3, #2
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d010      	beq.n	8018ea0 <tcp_process+0xe8>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	7d1b      	ldrb	r3, [r3, #20]
 8018e82:	2b02      	cmp	r3, #2
 8018e84:	d00c      	beq.n	8018ea0 <tcp_process+0xe8>
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	7d1b      	ldrb	r3, [r3, #20]
 8018e8a:	2b03      	cmp	r3, #3
 8018e8c:	d008      	beq.n	8018ea0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	7e9b      	ldrb	r3, [r3, #26]
 8018e92:	f043 0302 	orr.w	r3, r3, #2
 8018e96:	b2da      	uxtb	r2, r3
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	e32f      	b.n	8019500 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	7e9b      	ldrb	r3, [r3, #26]
 8018ea4:	f003 0310 	and.w	r3, r3, #16
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d103      	bne.n	8018eb4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018eac:	4b61      	ldr	r3, [pc, #388]	@ (8019034 <tcp_process+0x27c>)
 8018eae:	681a      	ldr	r2, [r3, #0]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f001 fbd9 	bl	801a674 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	7d1b      	ldrb	r3, [r3, #20]
 8018ec6:	3b02      	subs	r3, #2
 8018ec8:	2b07      	cmp	r3, #7
 8018eca:	f200 8309 	bhi.w	80194e0 <tcp_process+0x728>
 8018ece:	a201      	add	r2, pc, #4	@ (adr r2, 8018ed4 <tcp_process+0x11c>)
 8018ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ed4:	08018ef5 	.word	0x08018ef5
 8018ed8:	080190eb 	.word	0x080190eb
 8018edc:	08019243 	.word	0x08019243
 8018ee0:	0801926d 	.word	0x0801926d
 8018ee4:	0801938f 	.word	0x0801938f
 8018ee8:	08019243 	.word	0x08019243
 8018eec:	0801941b 	.word	0x0801941b
 8018ef0:	080194ab 	.word	0x080194ab
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ef4:	4b48      	ldr	r3, [pc, #288]	@ (8019018 <tcp_process+0x260>)
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	f003 0310 	and.w	r3, r3, #16
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	f000 80ca 	beq.w	8019096 <tcp_process+0x2de>
 8018f02:	4b45      	ldr	r3, [pc, #276]	@ (8019018 <tcp_process+0x260>)
 8018f04:	781b      	ldrb	r3, [r3, #0]
 8018f06:	f003 0302 	and.w	r3, r3, #2
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	f000 80c3 	beq.w	8019096 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f14:	1c5a      	adds	r2, r3, #1
 8018f16:	4b41      	ldr	r3, [pc, #260]	@ (801901c <tcp_process+0x264>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	f040 80bb 	bne.w	8019096 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8018f20:	4b3f      	ldr	r3, [pc, #252]	@ (8019020 <tcp_process+0x268>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	1c5a      	adds	r2, r3, #1
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8018f32:	4b3a      	ldr	r3, [pc, #232]	@ (801901c <tcp_process+0x264>)
 8018f34:	681a      	ldr	r2, [r3, #0]
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8018f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8019038 <tcp_process+0x280>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	89db      	ldrh	r3, [r3, #14]
 8018f40:	b29a      	uxth	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f54:	4b32      	ldr	r3, [pc, #200]	@ (8019020 <tcp_process+0x268>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	1e5a      	subs	r2, r3, #1
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2204      	movs	r2, #4
 8018f62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	3304      	adds	r3, #4
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	4610      	mov	r0, r2
 8018f70:	f7ff f8de 	bl	8018130 <tcp_eff_send_mss_impl>
 8018f74:	4603      	mov	r3, r0
 8018f76:	461a      	mov	r2, r3
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f80:	005b      	lsls	r3, r3, #1
 8018f82:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018f86:	429a      	cmp	r2, r3
 8018f88:	bf38      	it	cc
 8018f8a:	461a      	movcc	r2, r3
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	4293      	cmp	r3, r2
 8018f94:	bf28      	it	cs
 8018f96:	4613      	movcs	r3, r2
 8018f98:	b29a      	uxth	r2, r3
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d106      	bne.n	8018fb8 <tcp_process+0x200>
 8018faa:	4b1e      	ldr	r3, [pc, #120]	@ (8019024 <tcp_process+0x26c>)
 8018fac:	f240 321a 	movw	r2, #794	@ 0x31a
 8018fb0:	4922      	ldr	r1, [pc, #136]	@ (801903c <tcp_process+0x284>)
 8018fb2:	481e      	ldr	r0, [pc, #120]	@ (801902c <tcp_process+0x274>)
 8018fb4:	f009 f94a 	bl	802224c <iprintf>
      --pcb->snd_queuelen;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018fbe:	3b01      	subs	r3, #1
 8018fc0:	b29a      	uxth	r2, r3
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fcc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8018fce:	69fb      	ldr	r3, [r7, #28]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d111      	bne.n	8018ff8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fd8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fda:	69fb      	ldr	r3, [r7, #28]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d106      	bne.n	8018fee <tcp_process+0x236>
 8018fe0:	4b10      	ldr	r3, [pc, #64]	@ (8019024 <tcp_process+0x26c>)
 8018fe2:	f240 3222 	movw	r2, #802	@ 0x322
 8018fe6:	4916      	ldr	r1, [pc, #88]	@ (8019040 <tcp_process+0x288>)
 8018fe8:	4810      	ldr	r0, [pc, #64]	@ (801902c <tcp_process+0x274>)
 8018fea:	f009 f92f 	bl	802224c <iprintf>
        pcb->unsent = rseg->next;
 8018fee:	69fb      	ldr	r3, [r7, #28]
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	669a      	str	r2, [r3, #104]	@ 0x68
 8018ff6:	e003      	b.n	8019000 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8018ff8:	69fb      	ldr	r3, [r7, #28]
 8018ffa:	681a      	ldr	r2, [r3, #0]
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8019000:	69f8      	ldr	r0, [r7, #28]
 8019002:	f7fe fd39 	bl	8017a78 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801900a:	2b00      	cmp	r3, #0
 801900c:	d11a      	bne.n	8019044 <tcp_process+0x28c>
        pcb->rtime = -1;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019014:	861a      	strh	r2, [r3, #48]	@ 0x30
 8019016:	e01c      	b.n	8019052 <tcp_process+0x29a>
 8019018:	2000bdc8 	.word	0x2000bdc8
 801901c:	2000bdc0 	.word	0x2000bdc0
 8019020:	2000bdbc 	.word	0x2000bdbc
 8019024:	08026a98 	.word	0x08026a98
 8019028:	08026c50 	.word	0x08026c50
 801902c:	08026adc 	.word	0x08026adc
 8019030:	2000bdc9 	.word	0x2000bdc9
 8019034:	2000bd84 	.word	0x2000bd84
 8019038:	2000bdac 	.word	0x2000bdac
 801903c:	08026c70 	.word	0x08026c70
 8019040:	08026c88 	.word	0x08026c88
      } else {
        pcb->rtime = 0;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2200      	movs	r2, #0
 8019048:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2200      	movs	r2, #0
 801904e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019058:	2b00      	cmp	r3, #0
 801905a:	d00a      	beq.n	8019072 <tcp_process+0x2ba>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	6910      	ldr	r0, [r2, #16]
 8019066:	2200      	movs	r2, #0
 8019068:	6879      	ldr	r1, [r7, #4]
 801906a:	4798      	blx	r3
 801906c:	4603      	mov	r3, r0
 801906e:	76bb      	strb	r3, [r7, #26]
 8019070:	e001      	b.n	8019076 <tcp_process+0x2be>
 8019072:	2300      	movs	r3, #0
 8019074:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8019076:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801907a:	f113 0f0d 	cmn.w	r3, #13
 801907e:	d102      	bne.n	8019086 <tcp_process+0x2ce>
        return ERR_ABRT;
 8019080:	f06f 030c 	mvn.w	r3, #12
 8019084:	e23c      	b.n	8019500 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	7e9b      	ldrb	r3, [r3, #26]
 801908a:	f043 0302 	orr.w	r3, r3, #2
 801908e:	b2da      	uxtb	r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8019094:	e226      	b.n	80194e4 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8019096:	4b93      	ldr	r3, [pc, #588]	@ (80192e4 <tcp_process+0x52c>)
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	f003 0310 	and.w	r3, r3, #16
 801909e:	2b00      	cmp	r3, #0
 80190a0:	f000 8220 	beq.w	80194e4 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80190a4:	4b90      	ldr	r3, [pc, #576]	@ (80192e8 <tcp_process+0x530>)
 80190a6:	6818      	ldr	r0, [r3, #0]
 80190a8:	4b90      	ldr	r3, [pc, #576]	@ (80192ec <tcp_process+0x534>)
 80190aa:	881b      	ldrh	r3, [r3, #0]
 80190ac:	461a      	mov	r2, r3
 80190ae:	4b90      	ldr	r3, [pc, #576]	@ (80192f0 <tcp_process+0x538>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190b4:	4b8f      	ldr	r3, [pc, #572]	@ (80192f4 <tcp_process+0x53c>)
 80190b6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80190b8:	885b      	ldrh	r3, [r3, #2]
 80190ba:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190bc:	4a8d      	ldr	r2, [pc, #564]	@ (80192f4 <tcp_process+0x53c>)
 80190be:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80190c0:	8812      	ldrh	r2, [r2, #0]
 80190c2:	b292      	uxth	r2, r2
 80190c4:	9201      	str	r2, [sp, #4]
 80190c6:	9300      	str	r3, [sp, #0]
 80190c8:	4b8b      	ldr	r3, [pc, #556]	@ (80192f8 <tcp_process+0x540>)
 80190ca:	4a8c      	ldr	r2, [pc, #560]	@ (80192fc <tcp_process+0x544>)
 80190cc:	f002 fce2 	bl	801ba94 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80190d6:	2b05      	cmp	r3, #5
 80190d8:	f200 8204 	bhi.w	80194e4 <tcp_process+0x72c>
        pcb->rtime = 0;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2200      	movs	r2, #0
 80190e0:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f002 fd5e 	bl	801bba4 <tcp_rexmit_rto>
    break;
 80190e8:	e1fc      	b.n	80194e4 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80190ea:	4b7e      	ldr	r3, [pc, #504]	@ (80192e4 <tcp_process+0x52c>)
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	f003 0310 	and.w	r3, r3, #16
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	f000 8091 	beq.w	801921a <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80190f8:	4b7b      	ldr	r3, [pc, #492]	@ (80192e8 <tcp_process+0x530>)
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019100:	1ad3      	subs	r3, r2, r3
 8019102:	3b01      	subs	r3, #1
 8019104:	2b00      	cmp	r3, #0
 8019106:	db71      	blt.n	80191ec <tcp_process+0x434>
 8019108:	4b77      	ldr	r3, [pc, #476]	@ (80192e8 <tcp_process+0x530>)
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019110:	1ad3      	subs	r3, r2, r3
 8019112:	2b00      	cmp	r3, #0
 8019114:	dc6a      	bgt.n	80191ec <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	2204      	movs	r2, #4
 801911a:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019120:	2b00      	cmp	r3, #0
 8019122:	d00b      	beq.n	801913c <tcp_process+0x384>
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019128:	699b      	ldr	r3, [r3, #24]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d106      	bne.n	801913c <tcp_process+0x384>
 801912e:	4b74      	ldr	r3, [pc, #464]	@ (8019300 <tcp_process+0x548>)
 8019130:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019134:	4973      	ldr	r1, [pc, #460]	@ (8019304 <tcp_process+0x54c>)
 8019136:	4874      	ldr	r0, [pc, #464]	@ (8019308 <tcp_process+0x550>)
 8019138:	f009 f888 	bl	802224c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019140:	2b00      	cmp	r3, #0
 8019142:	d102      	bne.n	801914a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8019144:	23fa      	movs	r3, #250	@ 0xfa
 8019146:	76bb      	strb	r3, [r7, #26]
 8019148:	e011      	b.n	801916e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801914e:	699b      	ldr	r3, [r3, #24]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d00a      	beq.n	801916a <tcp_process+0x3b2>
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019158:	699b      	ldr	r3, [r3, #24]
 801915a:	687a      	ldr	r2, [r7, #4]
 801915c:	6910      	ldr	r0, [r2, #16]
 801915e:	2200      	movs	r2, #0
 8019160:	6879      	ldr	r1, [r7, #4]
 8019162:	4798      	blx	r3
 8019164:	4603      	mov	r3, r0
 8019166:	76bb      	strb	r3, [r7, #26]
 8019168:	e001      	b.n	801916e <tcp_process+0x3b6>
 801916a:	23f0      	movs	r3, #240	@ 0xf0
 801916c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801916e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d00a      	beq.n	801918c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8019176:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801917a:	f113 0f0d 	cmn.w	r3, #13
 801917e:	d002      	beq.n	8019186 <tcp_process+0x3ce>
            tcp_abort(pcb);
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7fd fe8f 	bl	8016ea4 <tcp_abort>
          }
          return ERR_ABRT;
 8019186:	f06f 030c 	mvn.w	r3, #12
 801918a:	e1b9      	b.n	8019500 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f000 fa3d 	bl	801960c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8019192:	4b5e      	ldr	r3, [pc, #376]	@ (801930c <tcp_process+0x554>)
 8019194:	881b      	ldrh	r3, [r3, #0]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d005      	beq.n	80191a6 <tcp_process+0x3ee>
          recv_acked--;
 801919a:	4b5c      	ldr	r3, [pc, #368]	@ (801930c <tcp_process+0x554>)
 801919c:	881b      	ldrh	r3, [r3, #0]
 801919e:	3b01      	subs	r3, #1
 80191a0:	b29a      	uxth	r2, r3
 80191a2:	4b5a      	ldr	r3, [pc, #360]	@ (801930c <tcp_process+0x554>)
 80191a4:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191aa:	005b      	lsls	r3, r3, #1
 80191ac:	f241 121c 	movw	r2, #4380	@ 0x111c
 80191b0:	429a      	cmp	r2, r3
 80191b2:	bf38      	it	cc
 80191b4:	461a      	movcc	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	4293      	cmp	r3, r2
 80191be:	bf28      	it	cs
 80191c0:	4613      	movcs	r3, r2
 80191c2:	b29a      	uxth	r2, r3
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80191ca:	4b51      	ldr	r3, [pc, #324]	@ (8019310 <tcp_process+0x558>)
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	f003 0320 	and.w	r3, r3, #32
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d034      	beq.n	8019240 <tcp_process+0x488>
          tcp_ack_now(pcb);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	7e9b      	ldrb	r3, [r3, #26]
 80191da:	f043 0302 	orr.w	r3, r3, #2
 80191de:	b2da      	uxtb	r2, r3
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2207      	movs	r2, #7
 80191e8:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80191ea:	e029      	b.n	8019240 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80191ec:	4b3e      	ldr	r3, [pc, #248]	@ (80192e8 <tcp_process+0x530>)
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	4b3e      	ldr	r3, [pc, #248]	@ (80192ec <tcp_process+0x534>)
 80191f2:	881b      	ldrh	r3, [r3, #0]
 80191f4:	461a      	mov	r2, r3
 80191f6:	4b3e      	ldr	r3, [pc, #248]	@ (80192f0 <tcp_process+0x538>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80191fc:	4b3d      	ldr	r3, [pc, #244]	@ (80192f4 <tcp_process+0x53c>)
 80191fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019200:	885b      	ldrh	r3, [r3, #2]
 8019202:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019204:	4a3b      	ldr	r2, [pc, #236]	@ (80192f4 <tcp_process+0x53c>)
 8019206:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019208:	8812      	ldrh	r2, [r2, #0]
 801920a:	b292      	uxth	r2, r2
 801920c:	9201      	str	r2, [sp, #4]
 801920e:	9300      	str	r3, [sp, #0]
 8019210:	4b39      	ldr	r3, [pc, #228]	@ (80192f8 <tcp_process+0x540>)
 8019212:	4a3a      	ldr	r2, [pc, #232]	@ (80192fc <tcp_process+0x544>)
 8019214:	f002 fc3e 	bl	801ba94 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8019218:	e166      	b.n	80194e8 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801921a:	4b32      	ldr	r3, [pc, #200]	@ (80192e4 <tcp_process+0x52c>)
 801921c:	781b      	ldrb	r3, [r3, #0]
 801921e:	f003 0302 	and.w	r3, r3, #2
 8019222:	2b00      	cmp	r3, #0
 8019224:	f000 8160 	beq.w	80194e8 <tcp_process+0x730>
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801922c:	1e5a      	subs	r2, r3, #1
 801922e:	4b30      	ldr	r3, [pc, #192]	@ (80192f0 <tcp_process+0x538>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	429a      	cmp	r2, r3
 8019234:	f040 8158 	bne.w	80194e8 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8019238:	6878      	ldr	r0, [r7, #4]
 801923a:	f002 fce9 	bl	801bc10 <tcp_rexmit>
    break;
 801923e:	e153      	b.n	80194e8 <tcp_process+0x730>
 8019240:	e152      	b.n	80194e8 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f000 f9e2 	bl	801960c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019248:	4b31      	ldr	r3, [pc, #196]	@ (8019310 <tcp_process+0x558>)
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	f003 0320 	and.w	r3, r3, #32
 8019250:	2b00      	cmp	r3, #0
 8019252:	f000 814b 	beq.w	80194ec <tcp_process+0x734>
      tcp_ack_now(pcb);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	7e9b      	ldrb	r3, [r3, #26]
 801925a:	f043 0302 	orr.w	r3, r3, #2
 801925e:	b2da      	uxtb	r2, r3
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2207      	movs	r2, #7
 8019268:	751a      	strb	r2, [r3, #20]
    }
    break;
 801926a:	e13f      	b.n	80194ec <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f000 f9cd 	bl	801960c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8019272:	4b27      	ldr	r3, [pc, #156]	@ (8019310 <tcp_process+0x558>)
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	f003 0320 	and.w	r3, r3, #32
 801927a:	2b00      	cmp	r3, #0
 801927c:	d070      	beq.n	8019360 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801927e:	4b19      	ldr	r3, [pc, #100]	@ (80192e4 <tcp_process+0x52c>)
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	f003 0310 	and.w	r3, r3, #16
 8019286:	2b00      	cmp	r3, #0
 8019288:	d05f      	beq.n	801934a <tcp_process+0x592>
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801928e:	4b16      	ldr	r3, [pc, #88]	@ (80192e8 <tcp_process+0x530>)
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	429a      	cmp	r2, r3
 8019294:	d159      	bne.n	801934a <tcp_process+0x592>
          pcb->unsent == NULL) {
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801929a:	2b00      	cmp	r3, #0
 801929c:	d155      	bne.n	801934a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	7e9b      	ldrb	r3, [r3, #26]
 80192a2:	f043 0302 	orr.w	r3, r3, #2
 80192a6:	b2da      	uxtb	r2, r3
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f7fe fe6b 	bl	8017f88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80192b2:	4b18      	ldr	r3, [pc, #96]	@ (8019314 <tcp_process+0x55c>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	687a      	ldr	r2, [r7, #4]
 80192b8:	429a      	cmp	r2, r3
 80192ba:	d105      	bne.n	80192c8 <tcp_process+0x510>
 80192bc:	4b15      	ldr	r3, [pc, #84]	@ (8019314 <tcp_process+0x55c>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	68db      	ldr	r3, [r3, #12]
 80192c2:	4a14      	ldr	r2, [pc, #80]	@ (8019314 <tcp_process+0x55c>)
 80192c4:	6013      	str	r3, [r2, #0]
 80192c6:	e02d      	b.n	8019324 <tcp_process+0x56c>
 80192c8:	4b12      	ldr	r3, [pc, #72]	@ (8019314 <tcp_process+0x55c>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	617b      	str	r3, [r7, #20]
 80192ce:	e026      	b.n	801931e <tcp_process+0x566>
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	68db      	ldr	r3, [r3, #12]
 80192d4:	687a      	ldr	r2, [r7, #4]
 80192d6:	429a      	cmp	r2, r3
 80192d8:	d11e      	bne.n	8019318 <tcp_process+0x560>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	68da      	ldr	r2, [r3, #12]
 80192de:	697b      	ldr	r3, [r7, #20]
 80192e0:	60da      	str	r2, [r3, #12]
 80192e2:	e01f      	b.n	8019324 <tcp_process+0x56c>
 80192e4:	2000bdc8 	.word	0x2000bdc8
 80192e8:	2000bdc0 	.word	0x2000bdc0
 80192ec:	2000bdc6 	.word	0x2000bdc6
 80192f0:	2000bdbc 	.word	0x2000bdbc
 80192f4:	2000bdac 	.word	0x2000bdac
 80192f8:	20008614 	.word	0x20008614
 80192fc:	20008618 	.word	0x20008618
 8019300:	08026a98 	.word	0x08026a98
 8019304:	08026c9c 	.word	0x08026c9c
 8019308:	08026adc 	.word	0x08026adc
 801930c:	2000bdc4 	.word	0x2000bdc4
 8019310:	2000bdc9 	.word	0x2000bdc9
 8019314:	2000bd90 	.word	0x2000bd90
 8019318:	697b      	ldr	r3, [r7, #20]
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	617b      	str	r3, [r7, #20]
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d1d5      	bne.n	80192d0 <tcp_process+0x518>
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2200      	movs	r2, #0
 8019328:	60da      	str	r2, [r3, #12]
 801932a:	4b77      	ldr	r3, [pc, #476]	@ (8019508 <tcp_process+0x750>)
 801932c:	2201      	movs	r2, #1
 801932e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	220a      	movs	r2, #10
 8019334:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019336:	4b75      	ldr	r3, [pc, #468]	@ (801950c <tcp_process+0x754>)
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	60da      	str	r2, [r3, #12]
 801933e:	4a73      	ldr	r2, [pc, #460]	@ (801950c <tcp_process+0x754>)
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	6013      	str	r3, [r2, #0]
 8019344:	f002 fe1e 	bl	801bf84 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8019348:	e0d2      	b.n	80194f0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	7e9b      	ldrb	r3, [r3, #26]
 801934e:	f043 0302 	orr.w	r3, r3, #2
 8019352:	b2da      	uxtb	r2, r3
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	2208      	movs	r2, #8
 801935c:	751a      	strb	r2, [r3, #20]
    break;
 801935e:	e0c7      	b.n	80194f0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019360:	4b6b      	ldr	r3, [pc, #428]	@ (8019510 <tcp_process+0x758>)
 8019362:	781b      	ldrb	r3, [r3, #0]
 8019364:	f003 0310 	and.w	r3, r3, #16
 8019368:	2b00      	cmp	r3, #0
 801936a:	f000 80c1 	beq.w	80194f0 <tcp_process+0x738>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019372:	4b68      	ldr	r3, [pc, #416]	@ (8019514 <tcp_process+0x75c>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	429a      	cmp	r2, r3
 8019378:	f040 80ba 	bne.w	80194f0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019380:	2b00      	cmp	r3, #0
 8019382:	f040 80b5 	bne.w	80194f0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2206      	movs	r2, #6
 801938a:	751a      	strb	r2, [r3, #20]
    break;
 801938c:	e0b0      	b.n	80194f0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801938e:	6878      	ldr	r0, [r7, #4]
 8019390:	f000 f93c 	bl	801960c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8019394:	4b60      	ldr	r3, [pc, #384]	@ (8019518 <tcp_process+0x760>)
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	f003 0320 	and.w	r3, r3, #32
 801939c:	2b00      	cmp	r3, #0
 801939e:	f000 80a9 	beq.w	80194f4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	7e9b      	ldrb	r3, [r3, #26]
 80193a6:	f043 0302 	orr.w	r3, r3, #2
 80193aa:	b2da      	uxtb	r2, r3
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f7fe fde9 	bl	8017f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80193b6:	4b59      	ldr	r3, [pc, #356]	@ (801951c <tcp_process+0x764>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d105      	bne.n	80193cc <tcp_process+0x614>
 80193c0:	4b56      	ldr	r3, [pc, #344]	@ (801951c <tcp_process+0x764>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	68db      	ldr	r3, [r3, #12]
 80193c6:	4a55      	ldr	r2, [pc, #340]	@ (801951c <tcp_process+0x764>)
 80193c8:	6013      	str	r3, [r2, #0]
 80193ca:	e013      	b.n	80193f4 <tcp_process+0x63c>
 80193cc:	4b53      	ldr	r3, [pc, #332]	@ (801951c <tcp_process+0x764>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	613b      	str	r3, [r7, #16]
 80193d2:	e00c      	b.n	80193ee <tcp_process+0x636>
 80193d4:	693b      	ldr	r3, [r7, #16]
 80193d6:	68db      	ldr	r3, [r3, #12]
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	429a      	cmp	r2, r3
 80193dc:	d104      	bne.n	80193e8 <tcp_process+0x630>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	68da      	ldr	r2, [r3, #12]
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	60da      	str	r2, [r3, #12]
 80193e6:	e005      	b.n	80193f4 <tcp_process+0x63c>
 80193e8:	693b      	ldr	r3, [r7, #16]
 80193ea:	68db      	ldr	r3, [r3, #12]
 80193ec:	613b      	str	r3, [r7, #16]
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d1ef      	bne.n	80193d4 <tcp_process+0x61c>
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2200      	movs	r2, #0
 80193f8:	60da      	str	r2, [r3, #12]
 80193fa:	4b43      	ldr	r3, [pc, #268]	@ (8019508 <tcp_process+0x750>)
 80193fc:	2201      	movs	r2, #1
 80193fe:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	220a      	movs	r2, #10
 8019404:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8019406:	4b41      	ldr	r3, [pc, #260]	@ (801950c <tcp_process+0x754>)
 8019408:	681a      	ldr	r2, [r3, #0]
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	60da      	str	r2, [r3, #12]
 801940e:	4a3f      	ldr	r2, [pc, #252]	@ (801950c <tcp_process+0x754>)
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	6013      	str	r3, [r2, #0]
 8019414:	f002 fdb6 	bl	801bf84 <tcp_timer_needed>
    }
    break;
 8019418:	e06c      	b.n	80194f4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f000 f8f6 	bl	801960c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019420:	4b3b      	ldr	r3, [pc, #236]	@ (8019510 <tcp_process+0x758>)
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	f003 0310 	and.w	r3, r3, #16
 8019428:	2b00      	cmp	r3, #0
 801942a:	d065      	beq.n	80194f8 <tcp_process+0x740>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019430:	4b38      	ldr	r3, [pc, #224]	@ (8019514 <tcp_process+0x75c>)
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	429a      	cmp	r2, r3
 8019436:	d15f      	bne.n	80194f8 <tcp_process+0x740>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801943c:	2b00      	cmp	r3, #0
 801943e:	d15b      	bne.n	80194f8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f7fe fda1 	bl	8017f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019446:	4b35      	ldr	r3, [pc, #212]	@ (801951c <tcp_process+0x764>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	429a      	cmp	r2, r3
 801944e:	d105      	bne.n	801945c <tcp_process+0x6a4>
 8019450:	4b32      	ldr	r3, [pc, #200]	@ (801951c <tcp_process+0x764>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	4a31      	ldr	r2, [pc, #196]	@ (801951c <tcp_process+0x764>)
 8019458:	6013      	str	r3, [r2, #0]
 801945a:	e013      	b.n	8019484 <tcp_process+0x6cc>
 801945c:	4b2f      	ldr	r3, [pc, #188]	@ (801951c <tcp_process+0x764>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	60fb      	str	r3, [r7, #12]
 8019462:	e00c      	b.n	801947e <tcp_process+0x6c6>
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	68db      	ldr	r3, [r3, #12]
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	429a      	cmp	r2, r3
 801946c:	d104      	bne.n	8019478 <tcp_process+0x6c0>
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	68da      	ldr	r2, [r3, #12]
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	60da      	str	r2, [r3, #12]
 8019476:	e005      	b.n	8019484 <tcp_process+0x6cc>
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	60fb      	str	r3, [r7, #12]
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d1ef      	bne.n	8019464 <tcp_process+0x6ac>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2200      	movs	r2, #0
 8019488:	60da      	str	r2, [r3, #12]
 801948a:	4b1f      	ldr	r3, [pc, #124]	@ (8019508 <tcp_process+0x750>)
 801948c:	2201      	movs	r2, #1
 801948e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	220a      	movs	r2, #10
 8019494:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8019496:	4b1d      	ldr	r3, [pc, #116]	@ (801950c <tcp_process+0x754>)
 8019498:	681a      	ldr	r2, [r3, #0]
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	60da      	str	r2, [r3, #12]
 801949e:	4a1b      	ldr	r2, [pc, #108]	@ (801950c <tcp_process+0x754>)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	f002 fd6e 	bl	801bf84 <tcp_timer_needed>
    }
    break;
 80194a8:	e026      	b.n	80194f8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80194aa:	6878      	ldr	r0, [r7, #4]
 80194ac:	f000 f8ae 	bl	801960c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194b0:	4b17      	ldr	r3, [pc, #92]	@ (8019510 <tcp_process+0x758>)
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	f003 0310 	and.w	r3, r3, #16
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d01f      	beq.n	80194fc <tcp_process+0x744>
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80194c0:	4b14      	ldr	r3, [pc, #80]	@ (8019514 <tcp_process+0x75c>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d119      	bne.n	80194fc <tcp_process+0x744>
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d115      	bne.n	80194fc <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80194d0:	4b11      	ldr	r3, [pc, #68]	@ (8019518 <tcp_process+0x760>)
 80194d2:	781b      	ldrb	r3, [r3, #0]
 80194d4:	f043 0310 	orr.w	r3, r3, #16
 80194d8:	b2da      	uxtb	r2, r3
 80194da:	4b0f      	ldr	r3, [pc, #60]	@ (8019518 <tcp_process+0x760>)
 80194dc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80194de:	e00d      	b.n	80194fc <tcp_process+0x744>
  default:
    break;
 80194e0:	bf00      	nop
 80194e2:	e00c      	b.n	80194fe <tcp_process+0x746>
    break;
 80194e4:	bf00      	nop
 80194e6:	e00a      	b.n	80194fe <tcp_process+0x746>
    break;
 80194e8:	bf00      	nop
 80194ea:	e008      	b.n	80194fe <tcp_process+0x746>
    break;
 80194ec:	bf00      	nop
 80194ee:	e006      	b.n	80194fe <tcp_process+0x746>
    break;
 80194f0:	bf00      	nop
 80194f2:	e004      	b.n	80194fe <tcp_process+0x746>
    break;
 80194f4:	bf00      	nop
 80194f6:	e002      	b.n	80194fe <tcp_process+0x746>
    break;
 80194f8:	bf00      	nop
 80194fa:	e000      	b.n	80194fe <tcp_process+0x746>
    break;
 80194fc:	bf00      	nop
  }
  return ERR_OK;
 80194fe:	2300      	movs	r3, #0
}
 8019500:	4618      	mov	r0, r3
 8019502:	3720      	adds	r7, #32
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}
 8019508:	2000bd98 	.word	0x2000bd98
 801950c:	2000bd94 	.word	0x2000bd94
 8019510:	2000bdc8 	.word	0x2000bdc8
 8019514:	2000bdc0 	.word	0x2000bdc0
 8019518:	2000bdc9 	.word	0x2000bdc9
 801951c:	2000bd90 	.word	0x2000bd90

08019520 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019520:	b590      	push	{r4, r7, lr}
 8019522:	b085      	sub	sp, #20
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	68db      	ldr	r3, [r3, #12]
 801952e:	899b      	ldrh	r3, [r3, #12]
 8019530:	b29b      	uxth	r3, r3
 8019532:	4618      	mov	r0, r3
 8019534:	f7fb fbc6 	bl	8014cc4 <lwip_htons>
 8019538:	4603      	mov	r3, r0
 801953a:	f003 0301 	and.w	r3, r3, #1
 801953e:	2b00      	cmp	r3, #0
 8019540:	d027      	beq.n	8019592 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019542:	6838      	ldr	r0, [r7, #0]
 8019544:	f7fe fa83 	bl	8017a4e <tcp_segs_free>
    next = NULL;
 8019548:	2300      	movs	r3, #0
 801954a:	603b      	str	r3, [r7, #0]
 801954c:	e055      	b.n	80195fa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	68db      	ldr	r3, [r3, #12]
 8019552:	899b      	ldrh	r3, [r3, #12]
 8019554:	b29b      	uxth	r3, r3
 8019556:	4618      	mov	r0, r3
 8019558:	f7fb fbb4 	bl	8014cc4 <lwip_htons>
 801955c:	4603      	mov	r3, r0
 801955e:	f003 0301 	and.w	r3, r3, #1
 8019562:	2b00      	cmp	r3, #0
 8019564:	d00d      	beq.n	8019582 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	68db      	ldr	r3, [r3, #12]
 801956a:	899b      	ldrh	r3, [r3, #12]
 801956c:	b29c      	uxth	r4, r3
 801956e:	2001      	movs	r0, #1
 8019570:	f7fb fba8 	bl	8014cc4 <lwip_htons>
 8019574:	4603      	mov	r3, r0
 8019576:	461a      	mov	r2, r3
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	68db      	ldr	r3, [r3, #12]
 801957c:	4322      	orrs	r2, r4
 801957e:	b292      	uxth	r2, r2
 8019580:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f7fe fa73 	bl	8017a78 <tcp_seg_free>
    while (next &&
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d00e      	beq.n	80195b6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	891b      	ldrh	r3, [r3, #8]
 801959c:	461a      	mov	r2, r3
 801959e:	4b1a      	ldr	r3, [pc, #104]	@ (8019608 <tcp_oos_insert_segment+0xe8>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	441a      	add	r2, r3
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	6839      	ldr	r1, [r7, #0]
 80195ac:	8909      	ldrh	r1, [r1, #8]
 80195ae:	440b      	add	r3, r1
 80195b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	dacb      	bge.n	801954e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d01e      	beq.n	80195fa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	891b      	ldrh	r3, [r3, #8]
 80195c0:	461a      	mov	r2, r3
 80195c2:	4b11      	ldr	r3, [pc, #68]	@ (8019608 <tcp_oos_insert_segment+0xe8>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	441a      	add	r2, r3
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	68db      	ldr	r3, [r3, #12]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	dd12      	ble.n	80195fa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	68db      	ldr	r3, [r3, #12]
 80195d8:	685b      	ldr	r3, [r3, #4]
 80195da:	b29a      	uxth	r2, r3
 80195dc:	4b0a      	ldr	r3, [pc, #40]	@ (8019608 <tcp_oos_insert_segment+0xe8>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	1ad3      	subs	r3, r2, r3
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	685a      	ldr	r2, [r3, #4]
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	891b      	ldrh	r3, [r3, #8]
 80195f2:	4619      	mov	r1, r3
 80195f4:	4610      	mov	r0, r2
 80195f6:	f7fc fc97 	bl	8015f28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	683a      	ldr	r2, [r7, #0]
 80195fe:	601a      	str	r2, [r3, #0]
}
 8019600:	bf00      	nop
 8019602:	3714      	adds	r7, #20
 8019604:	46bd      	mov	sp, r7
 8019606:	bd90      	pop	{r4, r7, pc}
 8019608:	2000bdbc 	.word	0x2000bdbc

0801960c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801960c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801960e:	b08d      	sub	sp, #52	@ 0x34
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8019614:	2300      	movs	r3, #0
 8019616:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	7d1b      	ldrb	r3, [r3, #20]
 801961c:	2b03      	cmp	r3, #3
 801961e:	d806      	bhi.n	801962e <tcp_receive+0x22>
 8019620:	4b98      	ldr	r3, [pc, #608]	@ (8019884 <tcp_receive+0x278>)
 8019622:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8019626:	4998      	ldr	r1, [pc, #608]	@ (8019888 <tcp_receive+0x27c>)
 8019628:	4898      	ldr	r0, [pc, #608]	@ (801988c <tcp_receive+0x280>)
 801962a:	f008 fe0f 	bl	802224c <iprintf>

  if (flags & TCP_ACK) {
 801962e:	4b98      	ldr	r3, [pc, #608]	@ (8019890 <tcp_receive+0x284>)
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	f003 0310 	and.w	r3, r3, #16
 8019636:	2b00      	cmp	r3, #0
 8019638:	f000 82c1 	beq.w	8019bbe <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019642:	461a      	mov	r2, r3
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019648:	4413      	add	r3, r2
 801964a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019650:	4b90      	ldr	r3, [pc, #576]	@ (8019894 <tcp_receive+0x288>)
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	1ad3      	subs	r3, r2, r3
 8019656:	2b00      	cmp	r3, #0
 8019658:	db1b      	blt.n	8019692 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801965e:	4b8d      	ldr	r3, [pc, #564]	@ (8019894 <tcp_receive+0x288>)
 8019660:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019662:	429a      	cmp	r2, r3
 8019664:	d106      	bne.n	8019674 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801966a:	4b8b      	ldr	r3, [pc, #556]	@ (8019898 <tcp_receive+0x28c>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	1ad3      	subs	r3, r2, r3
 8019670:	2b00      	cmp	r3, #0
 8019672:	db0e      	blt.n	8019692 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019678:	4b87      	ldr	r3, [pc, #540]	@ (8019898 <tcp_receive+0x28c>)
 801967a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801967c:	429a      	cmp	r2, r3
 801967e:	d141      	bne.n	8019704 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019680:	4b86      	ldr	r3, [pc, #536]	@ (801989c <tcp_receive+0x290>)
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	89db      	ldrh	r3, [r3, #14]
 8019686:	b29a      	uxth	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801968e:	429a      	cmp	r2, r3
 8019690:	d938      	bls.n	8019704 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019692:	4b82      	ldr	r3, [pc, #520]	@ (801989c <tcp_receive+0x290>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	89db      	ldrh	r3, [r3, #14]
 8019698:	b29a      	uxth	r2, r3
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d205      	bcs.n	80196bc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80196bc:	4b75      	ldr	r3, [pc, #468]	@ (8019894 <tcp_receive+0x288>)
 80196be:	681a      	ldr	r2, [r3, #0]
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 80196c4:	4b74      	ldr	r3, [pc, #464]	@ (8019898 <tcp_receive+0x28c>)
 80196c6:	681a      	ldr	r2, [r3, #0]
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d10d      	bne.n	80196f2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d111      	bne.n	8019704 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2200      	movs	r2, #0
 80196e4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2201      	movs	r2, #1
 80196ec:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80196f0:	e008      	b.n	8019704 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d003      	beq.n	8019704 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2200      	movs	r2, #0
 8019700:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019704:	4b64      	ldr	r3, [pc, #400]	@ (8019898 <tcp_receive+0x28c>)
 8019706:	681a      	ldr	r2, [r3, #0]
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801970c:	1ad3      	subs	r3, r2, r3
 801970e:	2b00      	cmp	r3, #0
 8019710:	dc53      	bgt.n	80197ba <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8019712:	4b63      	ldr	r3, [pc, #396]	@ (80198a0 <tcp_receive+0x294>)
 8019714:	881b      	ldrh	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d146      	bne.n	80197a8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8019724:	4413      	add	r3, r2
 8019726:	697a      	ldr	r2, [r7, #20]
 8019728:	429a      	cmp	r2, r3
 801972a:	d13d      	bne.n	80197a8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019732:	2b00      	cmp	r3, #0
 8019734:	db38      	blt.n	80197a8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801973a:	4b57      	ldr	r3, [pc, #348]	@ (8019898 <tcp_receive+0x28c>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	429a      	cmp	r2, r3
 8019740:	d132      	bne.n	80197a8 <tcp_receive+0x19c>
              found_dupack = 1;
 8019742:	2301      	movs	r3, #1
 8019744:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801974c:	2bff      	cmp	r3, #255	@ 0xff
 801974e:	d007      	beq.n	8019760 <tcp_receive+0x154>
                ++pcb->dupacks;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019756:	3301      	adds	r3, #1
 8019758:	b2da      	uxtb	r2, r3
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019766:	2b03      	cmp	r3, #3
 8019768:	d916      	bls.n	8019798 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019774:	4413      	add	r3, r2
 8019776:	b29a      	uxth	r2, r3
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801977e:	429a      	cmp	r2, r3
 8019780:	d912      	bls.n	80197a8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801978c:	4413      	add	r3, r2
 801978e:	b29a      	uxth	r2, r3
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019796:	e007      	b.n	80197a8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801979e:	2b03      	cmp	r3, #3
 80197a0:	d102      	bne.n	80197a8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80197a2:	6878      	ldr	r0, [r7, #4]
 80197a4:	f002 fa8e 	bl	801bcc4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80197a8:	69fb      	ldr	r3, [r7, #28]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	f040 816a 	bne.w	8019a84 <tcp_receive+0x478>
        pcb->dupacks = 0;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2200      	movs	r2, #0
 80197b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80197b8:	e164      	b.n	8019a84 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80197ba:	4b37      	ldr	r3, [pc, #220]	@ (8019898 <tcp_receive+0x28c>)
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	3b01      	subs	r3, #1
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	f2c0 8108 	blt.w	80199dc <tcp_receive+0x3d0>
 80197cc:	4b32      	ldr	r3, [pc, #200]	@ (8019898 <tcp_receive+0x28c>)
 80197ce:	681a      	ldr	r2, [r3, #0]
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80197d4:	1ad3      	subs	r3, r2, r3
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	f300 8100 	bgt.w	80199dc <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7e9b      	ldrb	r3, [r3, #26]
 80197e0:	f003 0304 	and.w	r3, r3, #4
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d00c      	beq.n	8019802 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	7e9b      	ldrb	r3, [r3, #26]
 80197ec:	f023 0304 	bic.w	r3, r3, #4
 80197f0:	b2da      	uxtb	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2200      	movs	r2, #0
 8019806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019810:	10db      	asrs	r3, r3, #3
 8019812:	b21b      	sxth	r3, r3
 8019814:	b29a      	uxth	r2, r3
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801981c:	b29b      	uxth	r3, r3
 801981e:	4413      	add	r3, r2
 8019820:	b29b      	uxth	r3, r3
 8019822:	b21a      	sxth	r2, r3
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	2200      	movs	r2, #0
 801982e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8019832:	4b19      	ldr	r3, [pc, #100]	@ (8019898 <tcp_receive+0x28c>)
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	7d1b      	ldrb	r3, [r3, #20]
 801983e:	2b03      	cmp	r3, #3
 8019840:	f240 8095 	bls.w	801996e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019850:	429a      	cmp	r2, r3
 8019852:	d227      	bcs.n	80198a4 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801985e:	4413      	add	r3, r2
 8019860:	b29a      	uxth	r2, r3
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019868:	429a      	cmp	r2, r3
 801986a:	f240 8080 	bls.w	801996e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019878:	4413      	add	r3, r2
 801987a:	b29a      	uxth	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019882:	e074      	b.n	801996e <tcp_receive+0x362>
 8019884:	08026a98 	.word	0x08026a98
 8019888:	08026cbc 	.word	0x08026cbc
 801988c:	08026adc 	.word	0x08026adc
 8019890:	2000bdc8 	.word	0x2000bdc8
 8019894:	2000bdbc 	.word	0x2000bdbc
 8019898:	2000bdc0 	.word	0x2000bdc0
 801989c:	2000bdac 	.word	0x2000bdac
 80198a0:	2000bdc6 	.word	0x2000bdc6
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198ae:	4619      	mov	r1, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198b4:	fb01 f303 	mul.w	r3, r1, r3
 80198b8:	6879      	ldr	r1, [r7, #4]
 80198ba:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 80198be:	fb93 f3f1 	sdiv	r3, r3, r1
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	4413      	add	r3, r2
 80198c6:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80198ce:	8a7a      	ldrh	r2, [r7, #18]
 80198d0:	429a      	cmp	r2, r3
 80198d2:	d94c      	bls.n	801996e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	8a7a      	ldrh	r2, [r7, #18]
 80198d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80198dc:	e047      	b.n	801996e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198e8:	681a      	ldr	r2, [r3, #0]
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80198f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198f6:	685b      	ldr	r3, [r3, #4]
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7fc fd1d 	bl	8016338 <pbuf_clen>
 80198fe:	4603      	mov	r3, r0
 8019900:	429c      	cmp	r4, r3
 8019902:	d206      	bcs.n	8019912 <tcp_receive+0x306>
 8019904:	4b70      	ldr	r3, [pc, #448]	@ (8019ac8 <tcp_receive+0x4bc>)
 8019906:	f240 429e 	movw	r2, #1182	@ 0x49e
 801990a:	4970      	ldr	r1, [pc, #448]	@ (8019acc <tcp_receive+0x4c0>)
 801990c:	4870      	ldr	r0, [pc, #448]	@ (8019ad0 <tcp_receive+0x4c4>)
 801990e:	f008 fc9d 	bl	802224c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8019912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019914:	685b      	ldr	r3, [r3, #4]
 8019916:	4618      	mov	r0, r3
 8019918:	f7fc fd0e 	bl	8016338 <pbuf_clen>
 801991c:	4603      	mov	r3, r0
 801991e:	461a      	mov	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019926:	1a9b      	subs	r3, r3, r2
 8019928:	b29a      	uxth	r2, r3
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8019930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019932:	891a      	ldrh	r2, [r3, #8]
 8019934:	4b67      	ldr	r3, [pc, #412]	@ (8019ad4 <tcp_receive+0x4c8>)
 8019936:	881b      	ldrh	r3, [r3, #0]
 8019938:	4413      	add	r3, r2
 801993a:	b29a      	uxth	r2, r3
 801993c:	4b65      	ldr	r3, [pc, #404]	@ (8019ad4 <tcp_receive+0x4c8>)
 801993e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8019940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019942:	f7fe f899 	bl	8017a78 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801994c:	2b00      	cmp	r3, #0
 801994e:	d00e      	beq.n	801996e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019954:	2b00      	cmp	r3, #0
 8019956:	d10a      	bne.n	801996e <tcp_receive+0x362>
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801995c:	2b00      	cmp	r3, #0
 801995e:	d106      	bne.n	801996e <tcp_receive+0x362>
 8019960:	4b59      	ldr	r3, [pc, #356]	@ (8019ac8 <tcp_receive+0x4bc>)
 8019962:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8019966:	495c      	ldr	r1, [pc, #368]	@ (8019ad8 <tcp_receive+0x4cc>)
 8019968:	4859      	ldr	r0, [pc, #356]	@ (8019ad0 <tcp_receive+0x4c4>)
 801996a:	f008 fc6f 	bl	802224c <iprintf>
      while (pcb->unacked != NULL &&
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019972:	2b00      	cmp	r3, #0
 8019974:	d022      	beq.n	80199bc <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	4618      	mov	r0, r3
 8019980:	f7fb f9ad 	bl	8014cde <lwip_htonl>
 8019984:	4604      	mov	r4, r0
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801998a:	891b      	ldrh	r3, [r3, #8]
 801998c:	461d      	mov	r5, r3
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019992:	68db      	ldr	r3, [r3, #12]
 8019994:	899b      	ldrh	r3, [r3, #12]
 8019996:	b29b      	uxth	r3, r3
 8019998:	4618      	mov	r0, r3
 801999a:	f7fb f993 	bl	8014cc4 <lwip_htons>
 801999e:	4603      	mov	r3, r0
 80199a0:	f003 0303 	and.w	r3, r3, #3
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d001      	beq.n	80199ac <tcp_receive+0x3a0>
 80199a8:	2301      	movs	r3, #1
 80199aa:	e000      	b.n	80199ae <tcp_receive+0x3a2>
 80199ac:	2300      	movs	r3, #0
 80199ae:	442b      	add	r3, r5
 80199b0:	18e2      	adds	r2, r4, r3
 80199b2:	4b4a      	ldr	r3, [pc, #296]	@ (8019adc <tcp_receive+0x4d0>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	dd90      	ble.n	80198de <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d104      	bne.n	80199ce <tcp_receive+0x3c2>
        pcb->rtime = -1;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199ca:	861a      	strh	r2, [r3, #48]	@ 0x30
 80199cc:	e002      	b.n	80199d4 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	2200      	movs	r2, #0
 80199d2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2200      	movs	r2, #0
 80199d8:	76da      	strb	r2, [r3, #27]
 80199da:	e002      	b.n	80199e2 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f001 fd65 	bl	801b4ac <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80199e2:	e04f      	b.n	8019a84 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d103      	bne.n	8019a04 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8019a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a0c:	685b      	ldr	r3, [r3, #4]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7fc fc92 	bl	8016338 <pbuf_clen>
 8019a14:	4603      	mov	r3, r0
 8019a16:	429c      	cmp	r4, r3
 8019a18:	d206      	bcs.n	8019a28 <tcp_receive+0x41c>
 8019a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8019ac8 <tcp_receive+0x4bc>)
 8019a1c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8019a20:	492a      	ldr	r1, [pc, #168]	@ (8019acc <tcp_receive+0x4c0>)
 8019a22:	482b      	ldr	r0, [pc, #172]	@ (8019ad0 <tcp_receive+0x4c4>)
 8019a24:	f008 fc12 	bl	802224c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a2a:	685b      	ldr	r3, [r3, #4]
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7fc fc83 	bl	8016338 <pbuf_clen>
 8019a32:	4603      	mov	r3, r0
 8019a34:	461a      	mov	r2, r3
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019a3c:	1a9b      	subs	r3, r3, r2
 8019a3e:	b29a      	uxth	r2, r3
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8019a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a48:	891a      	ldrh	r2, [r3, #8]
 8019a4a:	4b22      	ldr	r3, [pc, #136]	@ (8019ad4 <tcp_receive+0x4c8>)
 8019a4c:	881b      	ldrh	r3, [r3, #0]
 8019a4e:	4413      	add	r3, r2
 8019a50:	b29a      	uxth	r2, r3
 8019a52:	4b20      	ldr	r3, [pc, #128]	@ (8019ad4 <tcp_receive+0x4c8>)
 8019a54:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8019a56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a58:	f7fe f80e 	bl	8017a78 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d00e      	beq.n	8019a84 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d10a      	bne.n	8019a84 <tcp_receive+0x478>
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d106      	bne.n	8019a84 <tcp_receive+0x478>
 8019a76:	4b14      	ldr	r3, [pc, #80]	@ (8019ac8 <tcp_receive+0x4bc>)
 8019a78:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8019a7c:	4916      	ldr	r1, [pc, #88]	@ (8019ad8 <tcp_receive+0x4cc>)
 8019a7e:	4814      	ldr	r0, [pc, #80]	@ (8019ad0 <tcp_receive+0x4c4>)
 8019a80:	f008 fbe4 	bl	802224c <iprintf>
    while (pcb->unsent != NULL &&
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d037      	beq.n	8019afc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019a8c:	4b13      	ldr	r3, [pc, #76]	@ (8019adc <tcp_receive+0x4d0>)
 8019a8e:	681c      	ldr	r4, [r3, #0]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019a94:	68db      	ldr	r3, [r3, #12]
 8019a96:	685b      	ldr	r3, [r3, #4]
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7fb f920 	bl	8014cde <lwip_htonl>
 8019a9e:	4605      	mov	r5, r0
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019aa4:	891b      	ldrh	r3, [r3, #8]
 8019aa6:	461e      	mov	r6, r3
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	899b      	ldrh	r3, [r3, #12]
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fb f906 	bl	8014cc4 <lwip_htons>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	f003 0303 	and.w	r3, r3, #3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d00e      	beq.n	8019ae0 <tcp_receive+0x4d4>
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	e00d      	b.n	8019ae2 <tcp_receive+0x4d6>
 8019ac6:	bf00      	nop
 8019ac8:	08026a98 	.word	0x08026a98
 8019acc:	08026cd8 	.word	0x08026cd8
 8019ad0:	08026adc 	.word	0x08026adc
 8019ad4:	2000bdc4 	.word	0x2000bdc4
 8019ad8:	08026d00 	.word	0x08026d00
 8019adc:	2000bdc0 	.word	0x2000bdc0
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	4433      	add	r3, r6
 8019ae4:	442b      	add	r3, r5
 8019ae6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	db07      	blt.n	8019afc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019aec:	4b8d      	ldr	r3, [pc, #564]	@ (8019d24 <tcp_receive+0x718>)
 8019aee:	681a      	ldr	r2, [r3, #0]
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019af4:	1ad3      	subs	r3, r2, r3
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	f77f af74 	ble.w	80199e4 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019b02:	4b89      	ldr	r3, [pc, #548]	@ (8019d28 <tcp_receive+0x71c>)
 8019b04:	881b      	ldrh	r3, [r3, #0]
 8019b06:	4413      	add	r3, r2
 8019b08:	b29a      	uxth	r2, r3
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d052      	beq.n	8019bbe <tcp_receive+0x5b2>
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019b1c:	4b81      	ldr	r3, [pc, #516]	@ (8019d24 <tcp_receive+0x718>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	1ad3      	subs	r3, r2, r3
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	da4b      	bge.n	8019bbe <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019b26:	4b81      	ldr	r3, [pc, #516]	@ (8019d2c <tcp_receive+0x720>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b30:	b29b      	uxth	r3, r3
 8019b32:	1ad3      	subs	r3, r2, r3
 8019b34:	b29b      	uxth	r3, r3
 8019b36:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8019b38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b40:	10db      	asrs	r3, r3, #3
 8019b42:	b21b      	sxth	r3, r3
 8019b44:	b29b      	uxth	r3, r3
 8019b46:	1ad3      	subs	r3, r2, r3
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b52:	b29a      	uxth	r2, r3
 8019b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b56:	4413      	add	r3, r2
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	b21a      	sxth	r2, r3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8019b60:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	da03      	bge.n	8019b70 <tcp_receive+0x564>
        m = -m;
 8019b68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b6a:	425b      	negs	r3, r3
 8019b6c:	b29b      	uxth	r3, r3
 8019b6e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8019b70:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019b78:	109b      	asrs	r3, r3, #2
 8019b7a:	b21b      	sxth	r3, r3
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	1ad3      	subs	r3, r2, r3
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b8e:	4413      	add	r3, r2
 8019b90:	b29b      	uxth	r3, r3
 8019b92:	b21a      	sxth	r2, r3
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019b9e:	10db      	asrs	r3, r3, #3
 8019ba0:	b21b      	sxth	r3, r3
 8019ba2:	b29a      	uxth	r2, r3
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	4413      	add	r3, r2
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	b21a      	sxth	r2, r3
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	2200      	movs	r2, #0
 8019bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8019d30 <tcp_receive+0x724>)
 8019bc0:	881b      	ldrh	r3, [r3, #0]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	f000 84f1 	beq.w	801a5aa <tcp_receive+0xf9e>
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	7d1b      	ldrb	r3, [r3, #20]
 8019bcc:	2b06      	cmp	r3, #6
 8019bce:	f200 84ec 	bhi.w	801a5aa <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bd6:	4b57      	ldr	r3, [pc, #348]	@ (8019d34 <tcp_receive+0x728>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	1ad3      	subs	r3, r2, r3
 8019bdc:	3b01      	subs	r3, #1
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	f2c0 80b8 	blt.w	8019d54 <tcp_receive+0x748>
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019be8:	4b51      	ldr	r3, [pc, #324]	@ (8019d30 <tcp_receive+0x724>)
 8019bea:	881b      	ldrh	r3, [r3, #0]
 8019bec:	4619      	mov	r1, r3
 8019bee:	4b51      	ldr	r3, [pc, #324]	@ (8019d34 <tcp_receive+0x728>)
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	440b      	add	r3, r1
 8019bf4:	1ad3      	subs	r3, r2, r3
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	f300 80ab 	bgt.w	8019d54 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8019d38 <tcp_receive+0x72c>)
 8019c00:	685b      	ldr	r3, [r3, #4]
 8019c02:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c08:	4b4a      	ldr	r3, [pc, #296]	@ (8019d34 <tcp_receive+0x728>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	1ad3      	subs	r3, r2, r3
 8019c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019c10:	4b49      	ldr	r3, [pc, #292]	@ (8019d38 <tcp_receive+0x72c>)
 8019c12:	685b      	ldr	r3, [r3, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d106      	bne.n	8019c26 <tcp_receive+0x61a>
 8019c18:	4b48      	ldr	r3, [pc, #288]	@ (8019d3c <tcp_receive+0x730>)
 8019c1a:	f240 523c 	movw	r2, #1340	@ 0x53c
 8019c1e:	4948      	ldr	r1, [pc, #288]	@ (8019d40 <tcp_receive+0x734>)
 8019c20:	4848      	ldr	r0, [pc, #288]	@ (8019d44 <tcp_receive+0x738>)
 8019c22:	f008 fb13 	bl	802224c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8019c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c28:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	dd06      	ble.n	8019c3e <tcp_receive+0x632>
 8019c30:	4b42      	ldr	r3, [pc, #264]	@ (8019d3c <tcp_receive+0x730>)
 8019c32:	f240 523d 	movw	r2, #1341	@ 0x53d
 8019c36:	4944      	ldr	r1, [pc, #272]	@ (8019d48 <tcp_receive+0x73c>)
 8019c38:	4842      	ldr	r0, [pc, #264]	@ (8019d44 <tcp_receive+0x738>)
 8019c3a:	f008 fb07 	bl	802224c <iprintf>
      if (inseg.p->len < off) {
 8019c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8019d38 <tcp_receive+0x72c>)
 8019c40:	685b      	ldr	r3, [r3, #4]
 8019c42:	895b      	ldrh	r3, [r3, #10]
 8019c44:	461a      	mov	r2, r3
 8019c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c48:	4293      	cmp	r3, r2
 8019c4a:	dd3e      	ble.n	8019cca <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8019d38 <tcp_receive+0x72c>)
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	891b      	ldrh	r3, [r3, #8]
 8019c52:	461a      	mov	r2, r3
 8019c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c56:	4293      	cmp	r3, r2
 8019c58:	dd06      	ble.n	8019c68 <tcp_receive+0x65c>
 8019c5a:	4b38      	ldr	r3, [pc, #224]	@ (8019d3c <tcp_receive+0x730>)
 8019c5c:	f240 523f 	movw	r2, #1343	@ 0x53f
 8019c60:	493a      	ldr	r1, [pc, #232]	@ (8019d4c <tcp_receive+0x740>)
 8019c62:	4838      	ldr	r0, [pc, #224]	@ (8019d44 <tcp_receive+0x738>)
 8019c64:	f008 faf2 	bl	802224c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019c68:	4b33      	ldr	r3, [pc, #204]	@ (8019d38 <tcp_receive+0x72c>)
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	891a      	ldrh	r2, [r3, #8]
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	1ad3      	subs	r3, r2, r3
 8019c74:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8019c76:	e00e      	b.n	8019c96 <tcp_receive+0x68a>
          off -= p->len;
 8019c78:	69bb      	ldr	r3, [r7, #24]
 8019c7a:	895b      	ldrh	r3, [r3, #10]
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c80:	1a9b      	subs	r3, r3, r2
 8019c82:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8019c84:	69bb      	ldr	r3, [r7, #24]
 8019c86:	8a3a      	ldrh	r2, [r7, #16]
 8019c88:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8019c8a:	69bb      	ldr	r3, [r7, #24]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8019c96:	69bb      	ldr	r3, [r7, #24]
 8019c98:	895b      	ldrh	r3, [r3, #10]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	dcea      	bgt.n	8019c78 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8019ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ca4:	b29b      	uxth	r3, r3
 8019ca6:	425b      	negs	r3, r3
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	b21b      	sxth	r3, r3
 8019cac:	4619      	mov	r1, r3
 8019cae:	69b8      	ldr	r0, [r7, #24]
 8019cb0:	f7fc fa8a 	bl	80161c8 <pbuf_header>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d01c      	beq.n	8019cf4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8019cba:	4b20      	ldr	r3, [pc, #128]	@ (8019d3c <tcp_receive+0x730>)
 8019cbc:	f240 524c 	movw	r2, #1356	@ 0x54c
 8019cc0:	4923      	ldr	r1, [pc, #140]	@ (8019d50 <tcp_receive+0x744>)
 8019cc2:	4820      	ldr	r0, [pc, #128]	@ (8019d44 <tcp_receive+0x738>)
 8019cc4:	f008 fac2 	bl	802224c <iprintf>
 8019cc8:	e014      	b.n	8019cf4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8019cca:	4b1b      	ldr	r3, [pc, #108]	@ (8019d38 <tcp_receive+0x72c>)
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019cd0:	b292      	uxth	r2, r2
 8019cd2:	4252      	negs	r2, r2
 8019cd4:	b292      	uxth	r2, r2
 8019cd6:	b212      	sxth	r2, r2
 8019cd8:	4611      	mov	r1, r2
 8019cda:	4618      	mov	r0, r3
 8019cdc:	f7fc fa74 	bl	80161c8 <pbuf_header>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d006      	beq.n	8019cf4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8019ce6:	4b15      	ldr	r3, [pc, #84]	@ (8019d3c <tcp_receive+0x730>)
 8019ce8:	f240 5251 	movw	r2, #1361	@ 0x551
 8019cec:	4918      	ldr	r1, [pc, #96]	@ (8019d50 <tcp_receive+0x744>)
 8019cee:	4815      	ldr	r0, [pc, #84]	@ (8019d44 <tcp_receive+0x738>)
 8019cf0:	f008 faac 	bl	802224c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8019cf4:	4b10      	ldr	r3, [pc, #64]	@ (8019d38 <tcp_receive+0x72c>)
 8019cf6:	891a      	ldrh	r2, [r3, #8]
 8019cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8019d34 <tcp_receive+0x728>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	b299      	uxth	r1, r3
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	1acb      	subs	r3, r1, r3
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	4413      	add	r3, r2
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8019d38 <tcp_receive+0x72c>)
 8019d0e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d14:	4a07      	ldr	r2, [pc, #28]	@ (8019d34 <tcp_receive+0x728>)
 8019d16:	6013      	str	r3, [r2, #0]
 8019d18:	4b07      	ldr	r3, [pc, #28]	@ (8019d38 <tcp_receive+0x72c>)
 8019d1a:	68db      	ldr	r3, [r3, #12]
 8019d1c:	4a05      	ldr	r2, [pc, #20]	@ (8019d34 <tcp_receive+0x728>)
 8019d1e:	6812      	ldr	r2, [r2, #0]
 8019d20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019d22:	e025      	b.n	8019d70 <tcp_receive+0x764>
 8019d24:	2000bdc0 	.word	0x2000bdc0
 8019d28:	2000bdc4 	.word	0x2000bdc4
 8019d2c:	2000bd84 	.word	0x2000bd84
 8019d30:	2000bdc6 	.word	0x2000bdc6
 8019d34:	2000bdbc 	.word	0x2000bdbc
 8019d38:	2000bd9c 	.word	0x2000bd9c
 8019d3c:	08026a98 	.word	0x08026a98
 8019d40:	08026d20 	.word	0x08026d20
 8019d44:	08026adc 	.word	0x08026adc
 8019d48:	08026d30 	.word	0x08026d30
 8019d4c:	08026d40 	.word	0x08026d40
 8019d50:	08026d50 	.word	0x08026d50
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019d54:	4b87      	ldr	r3, [pc, #540]	@ (8019f74 <tcp_receive+0x968>)
 8019d56:	681a      	ldr	r2, [r3, #0]
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	da06      	bge.n	8019d70 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	7e9b      	ldrb	r3, [r3, #26]
 8019d66:	f043 0302 	orr.w	r3, r3, #2
 8019d6a:	b2da      	uxtb	r2, r3
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019d70:	4b80      	ldr	r3, [pc, #512]	@ (8019f74 <tcp_receive+0x968>)
 8019d72:	681a      	ldr	r2, [r3, #0]
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d78:	1ad3      	subs	r3, r2, r3
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f2c0 8410 	blt.w	801a5a0 <tcp_receive+0xf94>
 8019d80:	4b7c      	ldr	r3, [pc, #496]	@ (8019f74 <tcp_receive+0x968>)
 8019d82:	681a      	ldr	r2, [r3, #0]
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d88:	6879      	ldr	r1, [r7, #4]
 8019d8a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019d8c:	440b      	add	r3, r1
 8019d8e:	1ad3      	subs	r3, r2, r3
 8019d90:	3301      	adds	r3, #1
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	f300 8404 	bgt.w	801a5a0 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019d9c:	4b75      	ldr	r3, [pc, #468]	@ (8019f74 <tcp_receive+0x968>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	429a      	cmp	r2, r3
 8019da2:	f040 8287 	bne.w	801a2b4 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019da6:	4b74      	ldr	r3, [pc, #464]	@ (8019f78 <tcp_receive+0x96c>)
 8019da8:	891c      	ldrh	r4, [r3, #8]
 8019daa:	4b73      	ldr	r3, [pc, #460]	@ (8019f78 <tcp_receive+0x96c>)
 8019dac:	68db      	ldr	r3, [r3, #12]
 8019dae:	899b      	ldrh	r3, [r3, #12]
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	4618      	mov	r0, r3
 8019db4:	f7fa ff86 	bl	8014cc4 <lwip_htons>
 8019db8:	4603      	mov	r3, r0
 8019dba:	f003 0303 	and.w	r3, r3, #3
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d001      	beq.n	8019dc6 <tcp_receive+0x7ba>
 8019dc2:	2301      	movs	r3, #1
 8019dc4:	e000      	b.n	8019dc8 <tcp_receive+0x7bc>
 8019dc6:	2300      	movs	r3, #0
 8019dc8:	4423      	add	r3, r4
 8019dca:	b29a      	uxth	r2, r3
 8019dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8019f7c <tcp_receive+0x970>)
 8019dce:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019dd4:	4b69      	ldr	r3, [pc, #420]	@ (8019f7c <tcp_receive+0x970>)
 8019dd6:	881b      	ldrh	r3, [r3, #0]
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	d26e      	bcs.n	8019eba <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ddc:	4b66      	ldr	r3, [pc, #408]	@ (8019f78 <tcp_receive+0x96c>)
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	899b      	ldrh	r3, [r3, #12]
 8019de2:	b29b      	uxth	r3, r3
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7fa ff6d 	bl	8014cc4 <lwip_htons>
 8019dea:	4603      	mov	r3, r0
 8019dec:	f003 0301 	and.w	r3, r3, #1
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d01b      	beq.n	8019e2c <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019df4:	4b60      	ldr	r3, [pc, #384]	@ (8019f78 <tcp_receive+0x96c>)
 8019df6:	68db      	ldr	r3, [r3, #12]
 8019df8:	899b      	ldrh	r3, [r3, #12]
 8019dfa:	b29b      	uxth	r3, r3
 8019dfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019e00:	b29c      	uxth	r4, r3
 8019e02:	4b5d      	ldr	r3, [pc, #372]	@ (8019f78 <tcp_receive+0x96c>)
 8019e04:	68db      	ldr	r3, [r3, #12]
 8019e06:	899b      	ldrh	r3, [r3, #12]
 8019e08:	b29b      	uxth	r3, r3
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7fa ff5a 	bl	8014cc4 <lwip_htons>
 8019e10:	4603      	mov	r3, r0
 8019e12:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f7fa ff53 	bl	8014cc4 <lwip_htons>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	461a      	mov	r2, r3
 8019e22:	4b55      	ldr	r3, [pc, #340]	@ (8019f78 <tcp_receive+0x96c>)
 8019e24:	68db      	ldr	r3, [r3, #12]
 8019e26:	4322      	orrs	r2, r4
 8019e28:	b292      	uxth	r2, r2
 8019e2a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019e30:	4b51      	ldr	r3, [pc, #324]	@ (8019f78 <tcp_receive+0x96c>)
 8019e32:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e34:	4b50      	ldr	r3, [pc, #320]	@ (8019f78 <tcp_receive+0x96c>)
 8019e36:	68db      	ldr	r3, [r3, #12]
 8019e38:	899b      	ldrh	r3, [r3, #12]
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7fa ff41 	bl	8014cc4 <lwip_htons>
 8019e42:	4603      	mov	r3, r0
 8019e44:	f003 0302 	and.w	r3, r3, #2
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d005      	beq.n	8019e58 <tcp_receive+0x84c>
            inseg.len -= 1;
 8019e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8019f78 <tcp_receive+0x96c>)
 8019e4e:	891b      	ldrh	r3, [r3, #8]
 8019e50:	3b01      	subs	r3, #1
 8019e52:	b29a      	uxth	r2, r3
 8019e54:	4b48      	ldr	r3, [pc, #288]	@ (8019f78 <tcp_receive+0x96c>)
 8019e56:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019e58:	4b47      	ldr	r3, [pc, #284]	@ (8019f78 <tcp_receive+0x96c>)
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	4a46      	ldr	r2, [pc, #280]	@ (8019f78 <tcp_receive+0x96c>)
 8019e5e:	8912      	ldrh	r2, [r2, #8]
 8019e60:	4611      	mov	r1, r2
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7fc f860 	bl	8015f28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019e68:	4b43      	ldr	r3, [pc, #268]	@ (8019f78 <tcp_receive+0x96c>)
 8019e6a:	891c      	ldrh	r4, [r3, #8]
 8019e6c:	4b42      	ldr	r3, [pc, #264]	@ (8019f78 <tcp_receive+0x96c>)
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	899b      	ldrh	r3, [r3, #12]
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	4618      	mov	r0, r3
 8019e76:	f7fa ff25 	bl	8014cc4 <lwip_htons>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	f003 0303 	and.w	r3, r3, #3
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d001      	beq.n	8019e88 <tcp_receive+0x87c>
 8019e84:	2301      	movs	r3, #1
 8019e86:	e000      	b.n	8019e8a <tcp_receive+0x87e>
 8019e88:	2300      	movs	r3, #0
 8019e8a:	4423      	add	r3, r4
 8019e8c:	b29a      	uxth	r2, r3
 8019e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8019f7c <tcp_receive+0x970>)
 8019e90:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e92:	4b3a      	ldr	r3, [pc, #232]	@ (8019f7c <tcp_receive+0x970>)
 8019e94:	881b      	ldrh	r3, [r3, #0]
 8019e96:	461a      	mov	r2, r3
 8019e98:	4b36      	ldr	r3, [pc, #216]	@ (8019f74 <tcp_receive+0x968>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	441a      	add	r2, r3
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ea2:	6879      	ldr	r1, [r7, #4]
 8019ea4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019ea6:	440b      	add	r3, r1
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d006      	beq.n	8019eba <tcp_receive+0x8ae>
 8019eac:	4b34      	ldr	r3, [pc, #208]	@ (8019f80 <tcp_receive+0x974>)
 8019eae:	f240 527e 	movw	r2, #1406	@ 0x57e
 8019eb2:	4934      	ldr	r1, [pc, #208]	@ (8019f84 <tcp_receive+0x978>)
 8019eb4:	4834      	ldr	r0, [pc, #208]	@ (8019f88 <tcp_receive+0x97c>)
 8019eb6:	f008 f9c9 	bl	802224c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	f000 80e1 	beq.w	801a086 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8019f78 <tcp_receive+0x96c>)
 8019ec6:	68db      	ldr	r3, [r3, #12]
 8019ec8:	899b      	ldrh	r3, [r3, #12]
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7fa fef9 	bl	8014cc4 <lwip_htons>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	f003 0301 	and.w	r3, r3, #1
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d010      	beq.n	8019efe <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019edc:	e00a      	b.n	8019ef4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ee2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8019eee:	68b8      	ldr	r0, [r7, #8]
 8019ef0:	f7fd fdc2 	bl	8017a78 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d1f0      	bne.n	8019ede <tcp_receive+0x8d2>
 8019efc:	e0c3      	b.n	801a086 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f04:	e04f      	b.n	8019fa6 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f08:	68db      	ldr	r3, [r3, #12]
 8019f0a:	899b      	ldrh	r3, [r3, #12]
 8019f0c:	b29b      	uxth	r3, r3
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7fa fed8 	bl	8014cc4 <lwip_htons>
 8019f14:	4603      	mov	r3, r0
 8019f16:	f003 0301 	and.w	r3, r3, #1
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d03b      	beq.n	8019f96 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f1e:	4b16      	ldr	r3, [pc, #88]	@ (8019f78 <tcp_receive+0x96c>)
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	899b      	ldrh	r3, [r3, #12]
 8019f24:	b29b      	uxth	r3, r3
 8019f26:	4618      	mov	r0, r3
 8019f28:	f7fa fecc 	bl	8014cc4 <lwip_htons>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d12f      	bne.n	8019f96 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019f36:	4b10      	ldr	r3, [pc, #64]	@ (8019f78 <tcp_receive+0x96c>)
 8019f38:	68db      	ldr	r3, [r3, #12]
 8019f3a:	899b      	ldrh	r3, [r3, #12]
 8019f3c:	b29c      	uxth	r4, r3
 8019f3e:	2001      	movs	r0, #1
 8019f40:	f7fa fec0 	bl	8014cc4 <lwip_htons>
 8019f44:	4603      	mov	r3, r0
 8019f46:	461a      	mov	r2, r3
 8019f48:	4b0b      	ldr	r3, [pc, #44]	@ (8019f78 <tcp_receive+0x96c>)
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	4322      	orrs	r2, r4
 8019f4e:	b292      	uxth	r2, r2
 8019f50:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019f52:	4b09      	ldr	r3, [pc, #36]	@ (8019f78 <tcp_receive+0x96c>)
 8019f54:	891c      	ldrh	r4, [r3, #8]
 8019f56:	4b08      	ldr	r3, [pc, #32]	@ (8019f78 <tcp_receive+0x96c>)
 8019f58:	68db      	ldr	r3, [r3, #12]
 8019f5a:	899b      	ldrh	r3, [r3, #12]
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f7fa feb0 	bl	8014cc4 <lwip_htons>
 8019f64:	4603      	mov	r3, r0
 8019f66:	f003 0303 	and.w	r3, r3, #3
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d00e      	beq.n	8019f8c <tcp_receive+0x980>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	e00d      	b.n	8019f8e <tcp_receive+0x982>
 8019f72:	bf00      	nop
 8019f74:	2000bdbc 	.word	0x2000bdbc
 8019f78:	2000bd9c 	.word	0x2000bd9c
 8019f7c:	2000bdc6 	.word	0x2000bdc6
 8019f80:	08026a98 	.word	0x08026a98
 8019f84:	08026d64 	.word	0x08026d64
 8019f88:	08026adc 	.word	0x08026adc
 8019f8c:	2300      	movs	r3, #0
 8019f8e:	4423      	add	r3, r4
 8019f90:	b29a      	uxth	r2, r3
 8019f92:	4b95      	ldr	r3, [pc, #596]	@ (801a1e8 <tcp_receive+0xbdc>)
 8019f94:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8019f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f98:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8019f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8019fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019fa2:	f7fd fd69 	bl	8017a78 <tcp_seg_free>
            while (next &&
 8019fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d00e      	beq.n	8019fca <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019fac:	4b8e      	ldr	r3, [pc, #568]	@ (801a1e8 <tcp_receive+0xbdc>)
 8019fae:	881b      	ldrh	r3, [r3, #0]
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	4b8e      	ldr	r3, [pc, #568]	@ (801a1ec <tcp_receive+0xbe0>)
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	441a      	add	r2, r3
 8019fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019fc0:	8909      	ldrh	r1, [r1, #8]
 8019fc2:	440b      	add	r3, r1
 8019fc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	da9d      	bge.n	8019f06 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d057      	beq.n	801a080 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8019fd0:	4b85      	ldr	r3, [pc, #532]	@ (801a1e8 <tcp_receive+0xbdc>)
 8019fd2:	881b      	ldrh	r3, [r3, #0]
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	4b85      	ldr	r3, [pc, #532]	@ (801a1ec <tcp_receive+0xbe0>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	441a      	add	r2, r3
 8019fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fde:	68db      	ldr	r3, [r3, #12]
 8019fe0:	685b      	ldr	r3, [r3, #4]
 8019fe2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	dd4b      	ble.n	801a080 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fea:	68db      	ldr	r3, [r3, #12]
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	b29a      	uxth	r2, r3
 8019ff0:	4b7e      	ldr	r3, [pc, #504]	@ (801a1ec <tcp_receive+0xbe0>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	b29b      	uxth	r3, r3
 8019ff6:	1ad3      	subs	r3, r2, r3
 8019ff8:	b29a      	uxth	r2, r3
 8019ffa:	4b7d      	ldr	r3, [pc, #500]	@ (801a1f0 <tcp_receive+0xbe4>)
 8019ffc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ffe:	4b7c      	ldr	r3, [pc, #496]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a000:	68db      	ldr	r3, [r3, #12]
 801a002:	899b      	ldrh	r3, [r3, #12]
 801a004:	b29b      	uxth	r3, r3
 801a006:	4618      	mov	r0, r3
 801a008:	f7fa fe5c 	bl	8014cc4 <lwip_htons>
 801a00c:	4603      	mov	r3, r0
 801a00e:	f003 0302 	and.w	r3, r3, #2
 801a012:	2b00      	cmp	r3, #0
 801a014:	d005      	beq.n	801a022 <tcp_receive+0xa16>
                inseg.len -= 1;
 801a016:	4b76      	ldr	r3, [pc, #472]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a018:	891b      	ldrh	r3, [r3, #8]
 801a01a:	3b01      	subs	r3, #1
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	4b74      	ldr	r3, [pc, #464]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a020:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a022:	4b73      	ldr	r3, [pc, #460]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	4a72      	ldr	r2, [pc, #456]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a028:	8912      	ldrh	r2, [r2, #8]
 801a02a:	4611      	mov	r1, r2
 801a02c:	4618      	mov	r0, r3
 801a02e:	f7fb ff7b 	bl	8015f28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a032:	4b6f      	ldr	r3, [pc, #444]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a034:	891c      	ldrh	r4, [r3, #8]
 801a036:	4b6e      	ldr	r3, [pc, #440]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a038:	68db      	ldr	r3, [r3, #12]
 801a03a:	899b      	ldrh	r3, [r3, #12]
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	4618      	mov	r0, r3
 801a040:	f7fa fe40 	bl	8014cc4 <lwip_htons>
 801a044:	4603      	mov	r3, r0
 801a046:	f003 0303 	and.w	r3, r3, #3
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d001      	beq.n	801a052 <tcp_receive+0xa46>
 801a04e:	2301      	movs	r3, #1
 801a050:	e000      	b.n	801a054 <tcp_receive+0xa48>
 801a052:	2300      	movs	r3, #0
 801a054:	4423      	add	r3, r4
 801a056:	b29a      	uxth	r2, r3
 801a058:	4b63      	ldr	r3, [pc, #396]	@ (801a1e8 <tcp_receive+0xbdc>)
 801a05a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a05c:	4b62      	ldr	r3, [pc, #392]	@ (801a1e8 <tcp_receive+0xbdc>)
 801a05e:	881b      	ldrh	r3, [r3, #0]
 801a060:	461a      	mov	r2, r3
 801a062:	4b62      	ldr	r3, [pc, #392]	@ (801a1ec <tcp_receive+0xbe0>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	441a      	add	r2, r3
 801a068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a06a:	68db      	ldr	r3, [r3, #12]
 801a06c:	685b      	ldr	r3, [r3, #4]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d006      	beq.n	801a080 <tcp_receive+0xa74>
 801a072:	4b60      	ldr	r3, [pc, #384]	@ (801a1f4 <tcp_receive+0xbe8>)
 801a074:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801a078:	495f      	ldr	r1, [pc, #380]	@ (801a1f8 <tcp_receive+0xbec>)
 801a07a:	4860      	ldr	r0, [pc, #384]	@ (801a1fc <tcp_receive+0xbf0>)
 801a07c:	f008 f8e6 	bl	802224c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a084:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a086:	4b58      	ldr	r3, [pc, #352]	@ (801a1e8 <tcp_receive+0xbdc>)
 801a088:	881b      	ldrh	r3, [r3, #0]
 801a08a:	461a      	mov	r2, r3
 801a08c:	4b57      	ldr	r3, [pc, #348]	@ (801a1ec <tcp_receive+0xbe0>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	441a      	add	r2, r3
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a09a:	4b53      	ldr	r3, [pc, #332]	@ (801a1e8 <tcp_receive+0xbdc>)
 801a09c:	881b      	ldrh	r3, [r3, #0]
 801a09e:	429a      	cmp	r2, r3
 801a0a0:	d206      	bcs.n	801a0b0 <tcp_receive+0xaa4>
 801a0a2:	4b54      	ldr	r3, [pc, #336]	@ (801a1f4 <tcp_receive+0xbe8>)
 801a0a4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a0a8:	4955      	ldr	r1, [pc, #340]	@ (801a200 <tcp_receive+0xbf4>)
 801a0aa:	4854      	ldr	r0, [pc, #336]	@ (801a1fc <tcp_receive+0xbf0>)
 801a0ac:	f008 f8ce 	bl	802224c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a0b4:	4b4c      	ldr	r3, [pc, #304]	@ (801a1e8 <tcp_receive+0xbdc>)
 801a0b6:	881b      	ldrh	r3, [r3, #0]
 801a0b8:	1ad3      	subs	r3, r2, r3
 801a0ba:	b29a      	uxth	r2, r3
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f7fd f847 	bl	8017154 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a0c6:	4b4a      	ldr	r3, [pc, #296]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	891b      	ldrh	r3, [r3, #8]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d006      	beq.n	801a0de <tcp_receive+0xad2>
          recv_data = inseg.p;
 801a0d0:	4b47      	ldr	r3, [pc, #284]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a0d2:	685b      	ldr	r3, [r3, #4]
 801a0d4:	4a4b      	ldr	r2, [pc, #300]	@ (801a204 <tcp_receive+0xbf8>)
 801a0d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a0d8:	4b45      	ldr	r3, [pc, #276]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a0da:	2200      	movs	r2, #0
 801a0dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a0de:	4b44      	ldr	r3, [pc, #272]	@ (801a1f0 <tcp_receive+0xbe4>)
 801a0e0:	68db      	ldr	r3, [r3, #12]
 801a0e2:	899b      	ldrh	r3, [r3, #12]
 801a0e4:	b29b      	uxth	r3, r3
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f7fa fdec 	bl	8014cc4 <lwip_htons>
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	f003 0301 	and.w	r3, r3, #1
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	f000 80b4 	beq.w	801a260 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a0f8:	4b43      	ldr	r3, [pc, #268]	@ (801a208 <tcp_receive+0xbfc>)
 801a0fa:	781b      	ldrb	r3, [r3, #0]
 801a0fc:	f043 0320 	orr.w	r3, r3, #32
 801a100:	b2da      	uxtb	r2, r3
 801a102:	4b41      	ldr	r3, [pc, #260]	@ (801a208 <tcp_receive+0xbfc>)
 801a104:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a106:	e0ab      	b.n	801a260 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a10c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a112:	68db      	ldr	r3, [r3, #12]
 801a114:	685b      	ldr	r3, [r3, #4]
 801a116:	4a35      	ldr	r2, [pc, #212]	@ (801a1ec <tcp_receive+0xbe0>)
 801a118:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	891b      	ldrh	r3, [r3, #8]
 801a11e:	461c      	mov	r4, r3
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	68db      	ldr	r3, [r3, #12]
 801a124:	899b      	ldrh	r3, [r3, #12]
 801a126:	b29b      	uxth	r3, r3
 801a128:	4618      	mov	r0, r3
 801a12a:	f7fa fdcb 	bl	8014cc4 <lwip_htons>
 801a12e:	4603      	mov	r3, r0
 801a130:	f003 0303 	and.w	r3, r3, #3
 801a134:	2b00      	cmp	r3, #0
 801a136:	d001      	beq.n	801a13c <tcp_receive+0xb30>
 801a138:	2301      	movs	r3, #1
 801a13a:	e000      	b.n	801a13e <tcp_receive+0xb32>
 801a13c:	2300      	movs	r3, #0
 801a13e:	191a      	adds	r2, r3, r4
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a144:	441a      	add	r2, r3
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a14e:	461c      	mov	r4, r3
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	891b      	ldrh	r3, [r3, #8]
 801a154:	461d      	mov	r5, r3
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	899b      	ldrh	r3, [r3, #12]
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	4618      	mov	r0, r3
 801a160:	f7fa fdb0 	bl	8014cc4 <lwip_htons>
 801a164:	4603      	mov	r3, r0
 801a166:	f003 0303 	and.w	r3, r3, #3
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d001      	beq.n	801a172 <tcp_receive+0xb66>
 801a16e:	2301      	movs	r3, #1
 801a170:	e000      	b.n	801a174 <tcp_receive+0xb68>
 801a172:	2300      	movs	r3, #0
 801a174:	442b      	add	r3, r5
 801a176:	429c      	cmp	r4, r3
 801a178:	d206      	bcs.n	801a188 <tcp_receive+0xb7c>
 801a17a:	4b1e      	ldr	r3, [pc, #120]	@ (801a1f4 <tcp_receive+0xbe8>)
 801a17c:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 801a180:	4922      	ldr	r1, [pc, #136]	@ (801a20c <tcp_receive+0xc00>)
 801a182:	481e      	ldr	r0, [pc, #120]	@ (801a1fc <tcp_receive+0xbf0>)
 801a184:	f008 f862 	bl	802224c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	891b      	ldrh	r3, [r3, #8]
 801a18c:	461c      	mov	r4, r3
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	68db      	ldr	r3, [r3, #12]
 801a192:	899b      	ldrh	r3, [r3, #12]
 801a194:	b29b      	uxth	r3, r3
 801a196:	4618      	mov	r0, r3
 801a198:	f7fa fd94 	bl	8014cc4 <lwip_htons>
 801a19c:	4603      	mov	r3, r0
 801a19e:	f003 0303 	and.w	r3, r3, #3
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d001      	beq.n	801a1aa <tcp_receive+0xb9e>
 801a1a6:	2301      	movs	r3, #1
 801a1a8:	e000      	b.n	801a1ac <tcp_receive+0xba0>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	1919      	adds	r1, r3, r4
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a1b2:	b28b      	uxth	r3, r1
 801a1b4:	1ad3      	subs	r3, r2, r3
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7fc ffc9 	bl	8017154 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	891b      	ldrh	r3, [r3, #8]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d028      	beq.n	801a21e <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a1cc:	4b0d      	ldr	r3, [pc, #52]	@ (801a204 <tcp_receive+0xbf8>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d01d      	beq.n	801a210 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 801a1d4:	4b0b      	ldr	r3, [pc, #44]	@ (801a204 <tcp_receive+0xbf8>)
 801a1d6:	681a      	ldr	r2, [r3, #0]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	4619      	mov	r1, r3
 801a1de:	4610      	mov	r0, r2
 801a1e0:	f7fc f8e2 	bl	80163a8 <pbuf_cat>
 801a1e4:	e018      	b.n	801a218 <tcp_receive+0xc0c>
 801a1e6:	bf00      	nop
 801a1e8:	2000bdc6 	.word	0x2000bdc6
 801a1ec:	2000bdbc 	.word	0x2000bdbc
 801a1f0:	2000bd9c 	.word	0x2000bd9c
 801a1f4:	08026a98 	.word	0x08026a98
 801a1f8:	08026d9c 	.word	0x08026d9c
 801a1fc:	08026adc 	.word	0x08026adc
 801a200:	08026dd8 	.word	0x08026dd8
 801a204:	2000bdcc 	.word	0x2000bdcc
 801a208:	2000bdc9 	.word	0x2000bdc9
 801a20c:	08026df8 	.word	0x08026df8
            } else {
              recv_data = cseg->p;
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	685b      	ldr	r3, [r3, #4]
 801a214:	4a71      	ldr	r2, [pc, #452]	@ (801a3dc <tcp_receive+0xdd0>)
 801a216:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	2200      	movs	r2, #0
 801a21c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	68db      	ldr	r3, [r3, #12]
 801a222:	899b      	ldrh	r3, [r3, #12]
 801a224:	b29b      	uxth	r3, r3
 801a226:	4618      	mov	r0, r3
 801a228:	f7fa fd4c 	bl	8014cc4 <lwip_htons>
 801a22c:	4603      	mov	r3, r0
 801a22e:	f003 0301 	and.w	r3, r3, #1
 801a232:	2b00      	cmp	r3, #0
 801a234:	d00d      	beq.n	801a252 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a236:	4b6a      	ldr	r3, [pc, #424]	@ (801a3e0 <tcp_receive+0xdd4>)
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	f043 0320 	orr.w	r3, r3, #32
 801a23e:	b2da      	uxtb	r2, r3
 801a240:	4b67      	ldr	r3, [pc, #412]	@ (801a3e0 <tcp_receive+0xdd4>)
 801a242:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	7d1b      	ldrb	r3, [r3, #20]
 801a248:	2b04      	cmp	r3, #4
 801a24a:	d102      	bne.n	801a252 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2207      	movs	r2, #7
 801a250:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 801a25a:	68f8      	ldr	r0, [r7, #12]
 801a25c:	f7fd fc0c 	bl	8017a78 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a264:	2b00      	cmp	r3, #0
 801a266:	d008      	beq.n	801a27a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a26c:	68db      	ldr	r3, [r3, #12]
 801a26e:	685a      	ldr	r2, [r3, #4]
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801a274:	429a      	cmp	r2, r3
 801a276:	f43f af47 	beq.w	801a108 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	7e9b      	ldrb	r3, [r3, #26]
 801a27e:	f003 0301 	and.w	r3, r3, #1
 801a282:	2b00      	cmp	r3, #0
 801a284:	d00e      	beq.n	801a2a4 <tcp_receive+0xc98>
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	7e9b      	ldrb	r3, [r3, #26]
 801a28a:	f023 0301 	bic.w	r3, r3, #1
 801a28e:	b2da      	uxtb	r2, r3
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	769a      	strb	r2, [r3, #26]
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	7e9b      	ldrb	r3, [r3, #26]
 801a298:	f043 0302 	orr.w	r3, r3, #2
 801a29c:	b2da      	uxtb	r2, r3
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a2a2:	e181      	b.n	801a5a8 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	7e9b      	ldrb	r3, [r3, #26]
 801a2a8:	f043 0301 	orr.w	r3, r3, #1
 801a2ac:	b2da      	uxtb	r2, r3
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a2b2:	e179      	b.n	801a5a8 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	f001 f8f9 	bl	801b4ac <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d106      	bne.n	801a2d0 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a2c2:	4848      	ldr	r0, [pc, #288]	@ (801a3e4 <tcp_receive+0xdd8>)
 801a2c4:	f7fd fbfe 	bl	8017ac4 <tcp_seg_copy>
 801a2c8:	4602      	mov	r2, r0
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 801a2ce:	e16b      	b.n	801a5a8 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a2da:	e150      	b.n	801a57e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 801a2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	685a      	ldr	r2, [r3, #4]
 801a2e2:	4b41      	ldr	r3, [pc, #260]	@ (801a3e8 <tcp_receive+0xddc>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	429a      	cmp	r2, r3
 801a2e8:	d11d      	bne.n	801a326 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a2ea:	4b3e      	ldr	r3, [pc, #248]	@ (801a3e4 <tcp_receive+0xdd8>)
 801a2ec:	891a      	ldrh	r2, [r3, #8]
 801a2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2f0:	891b      	ldrh	r3, [r3, #8]
 801a2f2:	429a      	cmp	r2, r3
 801a2f4:	f240 8148 	bls.w	801a588 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801a2f8:	483a      	ldr	r0, [pc, #232]	@ (801a3e4 <tcp_receive+0xdd8>)
 801a2fa:	f7fd fbe3 	bl	8017ac4 <tcp_seg_copy>
 801a2fe:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	2b00      	cmp	r3, #0
 801a304:	f000 8142 	beq.w	801a58c <tcp_receive+0xf80>
                  if (prev != NULL) {
 801a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d003      	beq.n	801a316 <tcp_receive+0xd0a>
                    prev->next = cseg;
 801a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	601a      	str	r2, [r3, #0]
 801a314:	e002      	b.n	801a31c <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	68fa      	ldr	r2, [r7, #12]
 801a31a:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a31c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a31e:	68f8      	ldr	r0, [r7, #12]
 801a320:	f7ff f8fe 	bl	8019520 <tcp_oos_insert_segment>
                }
                break;
 801a324:	e132      	b.n	801a58c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d117      	bne.n	801a35c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a32c:	4b2e      	ldr	r3, [pc, #184]	@ (801a3e8 <tcp_receive+0xddc>)
 801a32e:	681a      	ldr	r2, [r3, #0]
 801a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a332:	68db      	ldr	r3, [r3, #12]
 801a334:	685b      	ldr	r3, [r3, #4]
 801a336:	1ad3      	subs	r3, r2, r3
 801a338:	2b00      	cmp	r3, #0
 801a33a:	da57      	bge.n	801a3ec <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 801a33c:	4829      	ldr	r0, [pc, #164]	@ (801a3e4 <tcp_receive+0xdd8>)
 801a33e:	f7fd fbc1 	bl	8017ac4 <tcp_seg_copy>
 801a342:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	2b00      	cmp	r3, #0
 801a348:	f000 8122 	beq.w	801a590 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	68fa      	ldr	r2, [r7, #12]
 801a350:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a354:	68f8      	ldr	r0, [r7, #12]
 801a356:	f7ff f8e3 	bl	8019520 <tcp_oos_insert_segment>
                  }
                  break;
 801a35a:	e119      	b.n	801a590 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a35c:	4b22      	ldr	r3, [pc, #136]	@ (801a3e8 <tcp_receive+0xddc>)
 801a35e:	681a      	ldr	r2, [r3, #0]
 801a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	685b      	ldr	r3, [r3, #4]
 801a366:	1ad3      	subs	r3, r2, r3
 801a368:	3b01      	subs	r3, #1
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	db3e      	blt.n	801a3ec <tcp_receive+0xde0>
 801a36e:	4b1e      	ldr	r3, [pc, #120]	@ (801a3e8 <tcp_receive+0xddc>)
 801a370:	681a      	ldr	r2, [r3, #0]
 801a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a374:	68db      	ldr	r3, [r3, #12]
 801a376:	685b      	ldr	r3, [r3, #4]
 801a378:	1ad3      	subs	r3, r2, r3
 801a37a:	3301      	adds	r3, #1
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	dc35      	bgt.n	801a3ec <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801a380:	4818      	ldr	r0, [pc, #96]	@ (801a3e4 <tcp_receive+0xdd8>)
 801a382:	f7fd fb9f 	bl	8017ac4 <tcp_seg_copy>
 801a386:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	f000 8102 	beq.w	801a594 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	685b      	ldr	r3, [r3, #4]
 801a396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a398:	8912      	ldrh	r2, [r2, #8]
 801a39a:	441a      	add	r2, r3
 801a39c:	4b12      	ldr	r3, [pc, #72]	@ (801a3e8 <tcp_receive+0xddc>)
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	1ad3      	subs	r3, r2, r3
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	dd12      	ble.n	801a3cc <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a3a6:	4b10      	ldr	r3, [pc, #64]	@ (801a3e8 <tcp_receive+0xddc>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	1ad3      	subs	r3, r2, r3
 801a3b6:	b29a      	uxth	r2, r3
 801a3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3be:	685a      	ldr	r2, [r3, #4]
 801a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3c2:	891b      	ldrh	r3, [r3, #8]
 801a3c4:	4619      	mov	r1, r3
 801a3c6:	4610      	mov	r0, r2
 801a3c8:	f7fb fdae 	bl	8015f28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ce:	68fa      	ldr	r2, [r7, #12]
 801a3d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a3d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a3d4:	68f8      	ldr	r0, [r7, #12]
 801a3d6:	f7ff f8a3 	bl	8019520 <tcp_oos_insert_segment>
                  }
                  break;
 801a3da:	e0db      	b.n	801a594 <tcp_receive+0xf88>
 801a3dc:	2000bdcc 	.word	0x2000bdcc
 801a3e0:	2000bdc9 	.word	0x2000bdc9
 801a3e4:	2000bd9c 	.word	0x2000bd9c
 801a3e8:	2000bdbc 	.word	0x2000bdbc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f040 80bf 	bne.w	801a574 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a3f6:	4b7c      	ldr	r3, [pc, #496]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a3f8:	681a      	ldr	r2, [r3, #0]
 801a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3fc:	68db      	ldr	r3, [r3, #12]
 801a3fe:	685b      	ldr	r3, [r3, #4]
 801a400:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a402:	2b00      	cmp	r3, #0
 801a404:	f340 80b6 	ble.w	801a574 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40a:	68db      	ldr	r3, [r3, #12]
 801a40c:	899b      	ldrh	r3, [r3, #12]
 801a40e:	b29b      	uxth	r3, r3
 801a410:	4618      	mov	r0, r3
 801a412:	f7fa fc57 	bl	8014cc4 <lwip_htons>
 801a416:	4603      	mov	r3, r0
 801a418:	f003 0301 	and.w	r3, r3, #1
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	f040 80bb 	bne.w	801a598 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a422:	4872      	ldr	r0, [pc, #456]	@ (801a5ec <tcp_receive+0xfe0>)
 801a424:	f7fd fb4e 	bl	8017ac4 <tcp_seg_copy>
 801a428:	4602      	mov	r2, r0
 801a42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a42c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	2b00      	cmp	r3, #0
 801a434:	f000 80b2 	beq.w	801a59c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a43a:	68db      	ldr	r3, [r3, #12]
 801a43c:	685b      	ldr	r3, [r3, #4]
 801a43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a440:	8912      	ldrh	r2, [r2, #8]
 801a442:	441a      	add	r2, r3
 801a444:	4b68      	ldr	r3, [pc, #416]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	1ad3      	subs	r3, r2, r3
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	dd12      	ble.n	801a474 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a44e:	4b66      	ldr	r3, [pc, #408]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	b29a      	uxth	r2, r3
 801a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a456:	68db      	ldr	r3, [r3, #12]
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	b29b      	uxth	r3, r3
 801a45c:	1ad3      	subs	r3, r2, r3
 801a45e:	b29a      	uxth	r2, r3
 801a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a462:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a466:	685a      	ldr	r2, [r3, #4]
 801a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a46a:	891b      	ldrh	r3, [r3, #8]
 801a46c:	4619      	mov	r1, r3
 801a46e:	4610      	mov	r0, r2
 801a470:	f7fb fd5a 	bl	8015f28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a474:	4b5e      	ldr	r3, [pc, #376]	@ (801a5f0 <tcp_receive+0xfe4>)
 801a476:	881b      	ldrh	r3, [r3, #0]
 801a478:	461a      	mov	r2, r3
 801a47a:	4b5b      	ldr	r3, [pc, #364]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	441a      	add	r2, r3
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a484:	6879      	ldr	r1, [r7, #4]
 801a486:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a488:	440b      	add	r3, r1
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	f340 8085 	ble.w	801a59c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	68db      	ldr	r3, [r3, #12]
 801a498:	899b      	ldrh	r3, [r3, #12]
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7fa fc11 	bl	8014cc4 <lwip_htons>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	f003 0301 	and.w	r3, r3, #1
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d01e      	beq.n	801a4ea <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	68db      	ldr	r3, [r3, #12]
 801a4b2:	899b      	ldrh	r3, [r3, #12]
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a4ba:	b29c      	uxth	r4, r3
 801a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	68db      	ldr	r3, [r3, #12]
 801a4c2:	899b      	ldrh	r3, [r3, #12]
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7fa fbfc 	bl	8014cc4 <lwip_htons>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801a4d2:	b29b      	uxth	r3, r3
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7fa fbf5 	bl	8014cc4 <lwip_htons>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	461a      	mov	r2, r3
 801a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	68db      	ldr	r3, [r3, #12]
 801a4e4:	4322      	orrs	r2, r4
 801a4e6:	b292      	uxth	r2, r2
 801a4e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a4f4:	4413      	add	r3, r2
 801a4f6:	b299      	uxth	r1, r3
 801a4f8:	4b3b      	ldr	r3, [pc, #236]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	1a8a      	subs	r2, r1, r2
 801a504:	b292      	uxth	r2, r2
 801a506:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	685a      	ldr	r2, [r3, #4]
 801a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	891b      	ldrh	r3, [r3, #8]
 801a514:	4619      	mov	r1, r3
 801a516:	4610      	mov	r0, r2
 801a518:	f7fb fd06 	bl	8015f28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	891c      	ldrh	r4, [r3, #8]
 801a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	68db      	ldr	r3, [r3, #12]
 801a528:	899b      	ldrh	r3, [r3, #12]
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	4618      	mov	r0, r3
 801a52e:	f7fa fbc9 	bl	8014cc4 <lwip_htons>
 801a532:	4603      	mov	r3, r0
 801a534:	f003 0303 	and.w	r3, r3, #3
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d001      	beq.n	801a540 <tcp_receive+0xf34>
 801a53c:	2301      	movs	r3, #1
 801a53e:	e000      	b.n	801a542 <tcp_receive+0xf36>
 801a540:	2300      	movs	r3, #0
 801a542:	4423      	add	r3, r4
 801a544:	b29a      	uxth	r2, r3
 801a546:	4b2a      	ldr	r3, [pc, #168]	@ (801a5f0 <tcp_receive+0xfe4>)
 801a548:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a54a:	4b29      	ldr	r3, [pc, #164]	@ (801a5f0 <tcp_receive+0xfe4>)
 801a54c:	881b      	ldrh	r3, [r3, #0]
 801a54e:	461a      	mov	r2, r3
 801a550:	4b25      	ldr	r3, [pc, #148]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	441a      	add	r2, r3
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a55a:	6879      	ldr	r1, [r7, #4]
 801a55c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a55e:	440b      	add	r3, r1
 801a560:	429a      	cmp	r2, r3
 801a562:	d01b      	beq.n	801a59c <tcp_receive+0xf90>
 801a564:	4b23      	ldr	r3, [pc, #140]	@ (801a5f4 <tcp_receive+0xfe8>)
 801a566:	f240 627a 	movw	r2, #1658	@ 0x67a
 801a56a:	4923      	ldr	r1, [pc, #140]	@ (801a5f8 <tcp_receive+0xfec>)
 801a56c:	4823      	ldr	r0, [pc, #140]	@ (801a5fc <tcp_receive+0xff0>)
 801a56e:	f007 fe6d 	bl	802224c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a572:	e013      	b.n	801a59c <tcp_receive+0xf90>
              }
            }
            prev = next;
 801a574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a576:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a580:	2b00      	cmp	r3, #0
 801a582:	f47f aeab 	bne.w	801a2dc <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801a586:	e00f      	b.n	801a5a8 <tcp_receive+0xf9c>
                break;
 801a588:	bf00      	nop
 801a58a:	e00d      	b.n	801a5a8 <tcp_receive+0xf9c>
                break;
 801a58c:	bf00      	nop
 801a58e:	e00b      	b.n	801a5a8 <tcp_receive+0xf9c>
                  break;
 801a590:	bf00      	nop
 801a592:	e009      	b.n	801a5a8 <tcp_receive+0xf9c>
                  break;
 801a594:	bf00      	nop
 801a596:	e007      	b.n	801a5a8 <tcp_receive+0xf9c>
                  break;
 801a598:	bf00      	nop
 801a59a:	e005      	b.n	801a5a8 <tcp_receive+0xf9c>
                break;
 801a59c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801a59e:	e003      	b.n	801a5a8 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f000 ff83 	bl	801b4ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a5a6:	e01a      	b.n	801a5de <tcp_receive+0xfd2>
 801a5a8:	e019      	b.n	801a5de <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a5aa:	4b0f      	ldr	r3, [pc, #60]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a5ac:	681a      	ldr	r2, [r3, #0]
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5b2:	1ad3      	subs	r3, r2, r3
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	db0a      	blt.n	801a5ce <tcp_receive+0xfc2>
 801a5b8:	4b0b      	ldr	r3, [pc, #44]	@ (801a5e8 <tcp_receive+0xfdc>)
 801a5ba:	681a      	ldr	r2, [r3, #0]
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5c0:	6879      	ldr	r1, [r7, #4]
 801a5c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a5c4:	440b      	add	r3, r1
 801a5c6:	1ad3      	subs	r3, r2, r3
 801a5c8:	3301      	adds	r3, #1
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	dd07      	ble.n	801a5de <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	7e9b      	ldrb	r3, [r3, #26]
 801a5d2:	f043 0302 	orr.w	r3, r3, #2
 801a5d6:	b2da      	uxtb	r2, r3
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801a5dc:	e7ff      	b.n	801a5de <tcp_receive+0xfd2>
 801a5de:	bf00      	nop
 801a5e0:	3734      	adds	r7, #52	@ 0x34
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5e6:	bf00      	nop
 801a5e8:	2000bdbc 	.word	0x2000bdbc
 801a5ec:	2000bd9c 	.word	0x2000bd9c
 801a5f0:	2000bdc6 	.word	0x2000bdc6
 801a5f4:	08026a98 	.word	0x08026a98
 801a5f8:	08026d64 	.word	0x08026d64
 801a5fc:	08026adc 	.word	0x08026adc

0801a600 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801a600:	b480      	push	{r7}
 801a602:	b083      	sub	sp, #12
 801a604:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801a606:	4b17      	ldr	r3, [pc, #92]	@ (801a664 <tcp_getoptbyte+0x64>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d005      	beq.n	801a61a <tcp_getoptbyte+0x1a>
 801a60e:	4b16      	ldr	r3, [pc, #88]	@ (801a668 <tcp_getoptbyte+0x68>)
 801a610:	881a      	ldrh	r2, [r3, #0]
 801a612:	4b16      	ldr	r3, [pc, #88]	@ (801a66c <tcp_getoptbyte+0x6c>)
 801a614:	881b      	ldrh	r3, [r3, #0]
 801a616:	429a      	cmp	r2, r3
 801a618:	d20e      	bcs.n	801a638 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801a61a:	4b15      	ldr	r3, [pc, #84]	@ (801a670 <tcp_getoptbyte+0x70>)
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	3314      	adds	r3, #20
 801a620:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801a622:	4b11      	ldr	r3, [pc, #68]	@ (801a668 <tcp_getoptbyte+0x68>)
 801a624:	881b      	ldrh	r3, [r3, #0]
 801a626:	1c5a      	adds	r2, r3, #1
 801a628:	b291      	uxth	r1, r2
 801a62a:	4a0f      	ldr	r2, [pc, #60]	@ (801a668 <tcp_getoptbyte+0x68>)
 801a62c:	8011      	strh	r1, [r2, #0]
 801a62e:	461a      	mov	r2, r3
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	4413      	add	r3, r2
 801a634:	781b      	ldrb	r3, [r3, #0]
 801a636:	e010      	b.n	801a65a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801a638:	4b0b      	ldr	r3, [pc, #44]	@ (801a668 <tcp_getoptbyte+0x68>)
 801a63a:	881b      	ldrh	r3, [r3, #0]
 801a63c:	1c5a      	adds	r2, r3, #1
 801a63e:	b291      	uxth	r1, r2
 801a640:	4a09      	ldr	r2, [pc, #36]	@ (801a668 <tcp_getoptbyte+0x68>)
 801a642:	8011      	strh	r1, [r2, #0]
 801a644:	b2da      	uxtb	r2, r3
 801a646:	4b09      	ldr	r3, [pc, #36]	@ (801a66c <tcp_getoptbyte+0x6c>)
 801a648:	881b      	ldrh	r3, [r3, #0]
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	1ad3      	subs	r3, r2, r3
 801a64e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801a650:	4b04      	ldr	r3, [pc, #16]	@ (801a664 <tcp_getoptbyte+0x64>)
 801a652:	681a      	ldr	r2, [r3, #0]
 801a654:	79fb      	ldrb	r3, [r7, #7]
 801a656:	4413      	add	r3, r2
 801a658:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	370c      	adds	r7, #12
 801a65e:	46bd      	mov	sp, r7
 801a660:	bc80      	pop	{r7}
 801a662:	4770      	bx	lr
 801a664:	2000bdb4 	.word	0x2000bdb4
 801a668:	2000bdb8 	.word	0x2000bdb8
 801a66c:	2000bdb2 	.word	0x2000bdb2
 801a670:	2000bdac 	.word	0x2000bdac

0801a674 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b084      	sub	sp, #16
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a67c:	4b2e      	ldr	r3, [pc, #184]	@ (801a738 <tcp_parseopt+0xc4>)
 801a67e:	881b      	ldrh	r3, [r3, #0]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d056      	beq.n	801a732 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a684:	4b2d      	ldr	r3, [pc, #180]	@ (801a73c <tcp_parseopt+0xc8>)
 801a686:	2200      	movs	r2, #0
 801a688:	801a      	strh	r2, [r3, #0]
 801a68a:	e046      	b.n	801a71a <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 801a68c:	f7ff ffb8 	bl	801a600 <tcp_getoptbyte>
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a694:	7bfb      	ldrb	r3, [r7, #15]
 801a696:	2b02      	cmp	r3, #2
 801a698:	d006      	beq.n	801a6a8 <tcp_parseopt+0x34>
 801a69a:	2b02      	cmp	r3, #2
 801a69c:	dc2a      	bgt.n	801a6f4 <tcp_parseopt+0x80>
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d042      	beq.n	801a728 <tcp_parseopt+0xb4>
 801a6a2:	2b01      	cmp	r3, #1
 801a6a4:	d038      	beq.n	801a718 <tcp_parseopt+0xa4>
 801a6a6:	e025      	b.n	801a6f4 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a6a8:	f7ff ffaa 	bl	801a600 <tcp_getoptbyte>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	2b04      	cmp	r3, #4
 801a6b0:	d13c      	bne.n	801a72c <tcp_parseopt+0xb8>
 801a6b2:	4b22      	ldr	r3, [pc, #136]	@ (801a73c <tcp_parseopt+0xc8>)
 801a6b4:	881b      	ldrh	r3, [r3, #0]
 801a6b6:	3301      	adds	r3, #1
 801a6b8:	4a1f      	ldr	r2, [pc, #124]	@ (801a738 <tcp_parseopt+0xc4>)
 801a6ba:	8812      	ldrh	r2, [r2, #0]
 801a6bc:	4293      	cmp	r3, r2
 801a6be:	da35      	bge.n	801a72c <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801a6c0:	f7ff ff9e 	bl	801a600 <tcp_getoptbyte>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	021b      	lsls	r3, r3, #8
 801a6c8:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801a6ca:	f7ff ff99 	bl	801a600 <tcp_getoptbyte>
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	461a      	mov	r2, r3
 801a6d2:	89bb      	ldrh	r3, [r7, #12]
 801a6d4:	4313      	orrs	r3, r2
 801a6d6:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a6d8:	89bb      	ldrh	r3, [r7, #12]
 801a6da:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801a6de:	d804      	bhi.n	801a6ea <tcp_parseopt+0x76>
 801a6e0:	89bb      	ldrh	r3, [r7, #12]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d001      	beq.n	801a6ea <tcp_parseopt+0x76>
 801a6e6:	89ba      	ldrh	r2, [r7, #12]
 801a6e8:	e001      	b.n	801a6ee <tcp_parseopt+0x7a>
 801a6ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 801a6f2:	e012      	b.n	801a71a <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801a6f4:	f7ff ff84 	bl	801a600 <tcp_getoptbyte>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801a6fc:	7afb      	ldrb	r3, [r7, #11]
 801a6fe:	2b01      	cmp	r3, #1
 801a700:	d916      	bls.n	801a730 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 801a702:	7afb      	ldrb	r3, [r7, #11]
 801a704:	b29a      	uxth	r2, r3
 801a706:	4b0d      	ldr	r3, [pc, #52]	@ (801a73c <tcp_parseopt+0xc8>)
 801a708:	881b      	ldrh	r3, [r3, #0]
 801a70a:	4413      	add	r3, r2
 801a70c:	b29b      	uxth	r3, r3
 801a70e:	3b02      	subs	r3, #2
 801a710:	b29a      	uxth	r2, r3
 801a712:	4b0a      	ldr	r3, [pc, #40]	@ (801a73c <tcp_parseopt+0xc8>)
 801a714:	801a      	strh	r2, [r3, #0]
 801a716:	e000      	b.n	801a71a <tcp_parseopt+0xa6>
        break;
 801a718:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a71a:	4b08      	ldr	r3, [pc, #32]	@ (801a73c <tcp_parseopt+0xc8>)
 801a71c:	881a      	ldrh	r2, [r3, #0]
 801a71e:	4b06      	ldr	r3, [pc, #24]	@ (801a738 <tcp_parseopt+0xc4>)
 801a720:	881b      	ldrh	r3, [r3, #0]
 801a722:	429a      	cmp	r2, r3
 801a724:	d3b2      	bcc.n	801a68c <tcp_parseopt+0x18>
 801a726:	e004      	b.n	801a732 <tcp_parseopt+0xbe>
        return;
 801a728:	bf00      	nop
 801a72a:	e002      	b.n	801a732 <tcp_parseopt+0xbe>
          return;
 801a72c:	bf00      	nop
 801a72e:	e000      	b.n	801a732 <tcp_parseopt+0xbe>
          return;
 801a730:	bf00      	nop
      }
    }
  }
}
 801a732:	3710      	adds	r7, #16
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	2000bdb0 	.word	0x2000bdb0
 801a73c:	2000bdb8 	.word	0x2000bdb8

0801a740 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a740:	b480      	push	{r7}
 801a742:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a744:	4b05      	ldr	r3, [pc, #20]	@ (801a75c <tcp_trigger_input_pcb_close+0x1c>)
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	f043 0310 	orr.w	r3, r3, #16
 801a74c:	b2da      	uxtb	r2, r3
 801a74e:	4b03      	ldr	r3, [pc, #12]	@ (801a75c <tcp_trigger_input_pcb_close+0x1c>)
 801a750:	701a      	strb	r2, [r3, #0]
}
 801a752:	bf00      	nop
 801a754:	46bd      	mov	sp, r7
 801a756:	bc80      	pop	{r7}
 801a758:	4770      	bx	lr
 801a75a:	bf00      	nop
 801a75c:	2000bdc9 	.word	0x2000bdc9

0801a760 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b086      	sub	sp, #24
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	607b      	str	r3, [r7, #4]
 801a76a:	460b      	mov	r3, r1
 801a76c:	817b      	strh	r3, [r7, #10]
 801a76e:	4613      	mov	r3, r2
 801a770:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a772:	897a      	ldrh	r2, [r7, #10]
 801a774:	893b      	ldrh	r3, [r7, #8]
 801a776:	4413      	add	r3, r2
 801a778:	b29b      	uxth	r3, r3
 801a77a:	3314      	adds	r3, #20
 801a77c:	b29b      	uxth	r3, r3
 801a77e:	2200      	movs	r2, #0
 801a780:	4619      	mov	r1, r3
 801a782:	2001      	movs	r0, #1
 801a784:	f7fb f9cc 	bl	8015b20 <pbuf_alloc>
 801a788:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a78a:	697b      	ldr	r3, [r7, #20]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d056      	beq.n	801a83e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a790:	897b      	ldrh	r3, [r7, #10]
 801a792:	3313      	adds	r3, #19
 801a794:	697a      	ldr	r2, [r7, #20]
 801a796:	8952      	ldrh	r2, [r2, #10]
 801a798:	4293      	cmp	r3, r2
 801a79a:	db05      	blt.n	801a7a8 <tcp_output_alloc_header+0x48>
 801a79c:	4b2a      	ldr	r3, [pc, #168]	@ (801a848 <tcp_output_alloc_header+0xe8>)
 801a79e:	2272      	movs	r2, #114	@ 0x72
 801a7a0:	492a      	ldr	r1, [pc, #168]	@ (801a84c <tcp_output_alloc_header+0xec>)
 801a7a2:	482b      	ldr	r0, [pc, #172]	@ (801a850 <tcp_output_alloc_header+0xf0>)
 801a7a4:	f007 fd52 	bl	802224c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a7a8:	697b      	ldr	r3, [r7, #20]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	8adb      	ldrh	r3, [r3, #22]
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	f7fa fa86 	bl	8014cc4 <lwip_htons>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	693b      	ldr	r3, [r7, #16]
 801a7be:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	8b1b      	ldrh	r3, [r3, #24]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7fa fa7d 	bl	8014cc4 <lwip_htons>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a7d2:	693b      	ldr	r3, [r7, #16]
 801a7d4:	687a      	ldr	r2, [r7, #4]
 801a7d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7fa fa7e 	bl	8014cde <lwip_htonl>
 801a7e2:	4602      	mov	r2, r0
 801a7e4:	693b      	ldr	r3, [r7, #16]
 801a7e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801a7e8:	897b      	ldrh	r3, [r7, #10]
 801a7ea:	089b      	lsrs	r3, r3, #2
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	3305      	adds	r3, #5
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	031b      	lsls	r3, r3, #12
 801a7f4:	b29b      	uxth	r3, r3
 801a7f6:	f043 0310 	orr.w	r3, r3, #16
 801a7fa:	b29b      	uxth	r3, r3
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f7fa fa61 	bl	8014cc4 <lwip_htons>
 801a802:	4603      	mov	r3, r0
 801a804:	461a      	mov	r2, r3
 801a806:	693b      	ldr	r3, [r7, #16]
 801a808:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a80e:	4618      	mov	r0, r3
 801a810:	f7fa fa58 	bl	8014cc4 <lwip_htons>
 801a814:	4603      	mov	r3, r0
 801a816:	461a      	mov	r2, r3
 801a818:	693b      	ldr	r3, [r7, #16]
 801a81a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a81c:	693b      	ldr	r3, [r7, #16]
 801a81e:	2200      	movs	r2, #0
 801a820:	741a      	strb	r2, [r3, #16]
 801a822:	2200      	movs	r2, #0
 801a824:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a826:	693b      	ldr	r3, [r7, #16]
 801a828:	2200      	movs	r2, #0
 801a82a:	749a      	strb	r2, [r3, #18]
 801a82c:	2200      	movs	r2, #0
 801a82e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a834:	68fa      	ldr	r2, [r7, #12]
 801a836:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a838:	441a      	add	r2, r3
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a83e:	697b      	ldr	r3, [r7, #20]
}
 801a840:	4618      	mov	r0, r3
 801a842:	3718      	adds	r7, #24
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}
 801a848:	08026e20 	.word	0x08026e20
 801a84c:	08026e54 	.word	0x08026e54
 801a850:	08026e84 	.word	0x08026e84

0801a854 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a854:	b590      	push	{r4, r7, lr}
 801a856:	b085      	sub	sp, #20
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a860:	2b00      	cmp	r3, #0
 801a862:	d02d      	beq.n	801a8c0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a868:	60fb      	str	r3, [r7, #12]
 801a86a:	e002      	b.n	801a872 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d1f8      	bne.n	801a86c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	899b      	ldrh	r3, [r3, #12]
 801a880:	b29b      	uxth	r3, r3
 801a882:	4618      	mov	r0, r3
 801a884:	f7fa fa1e 	bl	8014cc4 <lwip_htons>
 801a888:	4603      	mov	r3, r0
 801a88a:	f003 0307 	and.w	r3, r3, #7
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d116      	bne.n	801a8c0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	68db      	ldr	r3, [r3, #12]
 801a896:	899b      	ldrh	r3, [r3, #12]
 801a898:	b29c      	uxth	r4, r3
 801a89a:	2001      	movs	r0, #1
 801a89c:	f7fa fa12 	bl	8014cc4 <lwip_htons>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	68db      	ldr	r3, [r3, #12]
 801a8a8:	4322      	orrs	r2, r4
 801a8aa:	b292      	uxth	r2, r2
 801a8ac:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	7e9b      	ldrb	r3, [r3, #26]
 801a8b2:	f043 0320 	orr.w	r3, r3, #32
 801a8b6:	b2da      	uxtb	r2, r3
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	e004      	b.n	801a8ca <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a8c0:	2101      	movs	r1, #1
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f000 fcdc 	bl	801b280 <tcp_enqueue_flags>
 801a8c8:	4603      	mov	r3, r0
}
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	3714      	adds	r7, #20
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bd90      	pop	{r4, r7, pc}
	...

0801a8d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 801a8d4:	b590      	push	{r4, r7, lr}
 801a8d6:	b087      	sub	sp, #28
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	60f8      	str	r0, [r7, #12]
 801a8dc:	60b9      	str	r1, [r7, #8]
 801a8de:	603b      	str	r3, [r7, #0]
 801a8e0:	4613      	mov	r3, r2
 801a8e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a8e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a8e8:	009b      	lsls	r3, r3, #2
 801a8ea:	b2db      	uxtb	r3, r3
 801a8ec:	f003 0304 	and.w	r3, r3, #4
 801a8f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a8f2:	2003      	movs	r0, #3
 801a8f4:	f7fa fe90 	bl	8015618 <memp_malloc>
 801a8f8:	6138      	str	r0, [r7, #16]
 801a8fa:	693b      	ldr	r3, [r7, #16]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d104      	bne.n	801a90a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a900:	68b8      	ldr	r0, [r7, #8]
 801a902:	f7fb fc85 	bl	8016210 <pbuf_free>
    return NULL;
 801a906:	2300      	movs	r3, #0
 801a908:	e068      	b.n	801a9dc <tcp_create_segment+0x108>
  }
  seg->flags = optflags;
 801a90a:	693b      	ldr	r3, [r7, #16]
 801a90c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a910:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a912:	693b      	ldr	r3, [r7, #16]
 801a914:	2200      	movs	r2, #0
 801a916:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a918:	693b      	ldr	r3, [r7, #16]
 801a91a:	68ba      	ldr	r2, [r7, #8]
 801a91c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	891a      	ldrh	r2, [r3, #8]
 801a922:	7dfb      	ldrb	r3, [r7, #23]
 801a924:	b29b      	uxth	r3, r3
 801a926:	429a      	cmp	r2, r3
 801a928:	d205      	bcs.n	801a936 <tcp_create_segment+0x62>
 801a92a:	4b2e      	ldr	r3, [pc, #184]	@ (801a9e4 <tcp_create_segment+0x110>)
 801a92c:	22ba      	movs	r2, #186	@ 0xba
 801a92e:	492e      	ldr	r1, [pc, #184]	@ (801a9e8 <tcp_create_segment+0x114>)
 801a930:	482e      	ldr	r0, [pc, #184]	@ (801a9ec <tcp_create_segment+0x118>)
 801a932:	f007 fc8b 	bl	802224c <iprintf>
  seg->len = p->tot_len - optlen;
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	891a      	ldrh	r2, [r3, #8]
 801a93a:	7dfb      	ldrb	r3, [r7, #23]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	1ad3      	subs	r3, r2, r3
 801a940:	b29a      	uxth	r2, r3
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801a946:	2114      	movs	r1, #20
 801a948:	68b8      	ldr	r0, [r7, #8]
 801a94a:	f7fb fc3d 	bl	80161c8 <pbuf_header>
 801a94e:	4603      	mov	r3, r0
 801a950:	2b00      	cmp	r3, #0
 801a952:	d00c      	beq.n	801a96e <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801a954:	4b26      	ldr	r3, [pc, #152]	@ (801a9f0 <tcp_create_segment+0x11c>)
 801a956:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 801a95a:	3301      	adds	r3, #1
 801a95c:	b29a      	uxth	r2, r3
 801a95e:	4b24      	ldr	r3, [pc, #144]	@ (801a9f0 <tcp_create_segment+0x11c>)
 801a960:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 801a964:	6938      	ldr	r0, [r7, #16]
 801a966:	f7fd f887 	bl	8017a78 <tcp_seg_free>
    return NULL;
 801a96a:	2300      	movs	r3, #0
 801a96c:	e036      	b.n	801a9dc <tcp_create_segment+0x108>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	685b      	ldr	r3, [r3, #4]
 801a972:	685a      	ldr	r2, [r3, #4]
 801a974:	693b      	ldr	r3, [r7, #16]
 801a976:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	8ada      	ldrh	r2, [r3, #22]
 801a97c:	693b      	ldr	r3, [r7, #16]
 801a97e:	68dc      	ldr	r4, [r3, #12]
 801a980:	4610      	mov	r0, r2
 801a982:	f7fa f99f 	bl	8014cc4 <lwip_htons>
 801a986:	4603      	mov	r3, r0
 801a988:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	8b1a      	ldrh	r2, [r3, #24]
 801a98e:	693b      	ldr	r3, [r7, #16]
 801a990:	68dc      	ldr	r4, [r3, #12]
 801a992:	4610      	mov	r0, r2
 801a994:	f7fa f996 	bl	8014cc4 <lwip_htons>
 801a998:	4603      	mov	r3, r0
 801a99a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a99c:	693b      	ldr	r3, [r7, #16]
 801a99e:	68dc      	ldr	r4, [r3, #12]
 801a9a0:	6838      	ldr	r0, [r7, #0]
 801a9a2:	f7fa f99c 	bl	8014cde <lwip_htonl>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801a9aa:	7dfb      	ldrb	r3, [r7, #23]
 801a9ac:	089b      	lsrs	r3, r3, #2
 801a9ae:	b2db      	uxtb	r3, r3
 801a9b0:	3305      	adds	r3, #5
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	031b      	lsls	r3, r3, #12
 801a9b6:	b29a      	uxth	r2, r3
 801a9b8:	79fb      	ldrb	r3, [r7, #7]
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	4313      	orrs	r3, r2
 801a9be:	b29a      	uxth	r2, r3
 801a9c0:	693b      	ldr	r3, [r7, #16]
 801a9c2:	68dc      	ldr	r4, [r3, #12]
 801a9c4:	4610      	mov	r0, r2
 801a9c6:	f7fa f97d 	bl	8014cc4 <lwip_htons>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a9ce:	693b      	ldr	r3, [r7, #16]
 801a9d0:	68db      	ldr	r3, [r3, #12]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	749a      	strb	r2, [r3, #18]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	74da      	strb	r2, [r3, #19]
  return seg;
 801a9da:	693b      	ldr	r3, [r7, #16]
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	371c      	adds	r7, #28
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd90      	pop	{r4, r7, pc}
 801a9e4:	08026e20 	.word	0x08026e20
 801a9e8:	08026eac 	.word	0x08026eac
 801a9ec:	08026e84 	.word	0x08026e84
 801a9f0:	2000bbec 	.word	0x2000bbec

0801a9f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b086      	sub	sp, #24
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	607b      	str	r3, [r7, #4]
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	73fb      	strb	r3, [r7, #15]
 801aa00:	460b      	mov	r3, r1
 801aa02:	81bb      	strh	r3, [r7, #12]
 801aa04:	4613      	mov	r3, r2
 801aa06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801aa08:	89bb      	ldrh	r3, [r7, #12]
 801aa0a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801aa0c:	89ba      	ldrh	r2, [r7, #12]
 801aa0e:	897b      	ldrh	r3, [r7, #10]
 801aa10:	429a      	cmp	r2, r3
 801aa12:	d221      	bcs.n	801aa58 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801aa14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801aa18:	f003 0302 	and.w	r3, r3, #2
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d111      	bne.n	801aa44 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 801aa20:	6a3b      	ldr	r3, [r7, #32]
 801aa22:	7e9b      	ldrb	r3, [r3, #26]
 801aa24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d115      	bne.n	801aa58 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801aa2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d007      	beq.n	801aa44 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 801aa34:	6a3b      	ldr	r3, [r7, #32]
 801aa36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d103      	bne.n	801aa44 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801aa3c:	6a3b      	ldr	r3, [r7, #32]
 801aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d009      	beq.n	801aa58 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801aa44:	89bb      	ldrh	r3, [r7, #12]
 801aa46:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801aa4a:	f023 0203 	bic.w	r2, r3, #3
 801aa4e:	897b      	ldrh	r3, [r7, #10]
 801aa50:	4293      	cmp	r3, r2
 801aa52:	bf28      	it	cs
 801aa54:	4613      	movcs	r3, r2
 801aa56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801aa58:	8af9      	ldrh	r1, [r7, #22]
 801aa5a:	7bfb      	ldrb	r3, [r7, #15]
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7fb f85e 	bl	8015b20 <pbuf_alloc>
 801aa64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa66:	693b      	ldr	r3, [r7, #16]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d101      	bne.n	801aa70 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	e019      	b.n	801aaa4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801aa70:	693b      	ldr	r3, [r7, #16]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d006      	beq.n	801aa86 <tcp_pbuf_prealloc+0x92>
 801aa78:	4b0c      	ldr	r3, [pc, #48]	@ (801aaac <tcp_pbuf_prealloc+0xb8>)
 801aa7a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801aa7e:	490c      	ldr	r1, [pc, #48]	@ (801aab0 <tcp_pbuf_prealloc+0xbc>)
 801aa80:	480c      	ldr	r0, [pc, #48]	@ (801aab4 <tcp_pbuf_prealloc+0xc0>)
 801aa82:	f007 fbe3 	bl	802224c <iprintf>
  *oversize = p->len - length;
 801aa86:	693b      	ldr	r3, [r7, #16]
 801aa88:	895a      	ldrh	r2, [r3, #10]
 801aa8a:	89bb      	ldrh	r3, [r7, #12]
 801aa8c:	1ad3      	subs	r3, r2, r3
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa94:	693b      	ldr	r3, [r7, #16]
 801aa96:	89ba      	ldrh	r2, [r7, #12]
 801aa98:	811a      	strh	r2, [r3, #8]
 801aa9a:	693b      	ldr	r3, [r7, #16]
 801aa9c:	891a      	ldrh	r2, [r3, #8]
 801aa9e:	693b      	ldr	r3, [r7, #16]
 801aaa0:	815a      	strh	r2, [r3, #10]
  return p;
 801aaa2:	693b      	ldr	r3, [r7, #16]
}
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	3718      	adds	r7, #24
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}
 801aaac:	08026e20 	.word	0x08026e20
 801aab0:	08026ec4 	.word	0x08026ec4
 801aab4:	08026e84 	.word	0x08026e84

0801aab8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
 801aac0:	460b      	mov	r3, r1
 801aac2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	7d1b      	ldrb	r3, [r3, #20]
 801aac8:	2b04      	cmp	r3, #4
 801aaca:	d00e      	beq.n	801aaea <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aad0:	2b07      	cmp	r3, #7
 801aad2:	d00a      	beq.n	801aaea <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aad8:	2b02      	cmp	r3, #2
 801aada:	d006      	beq.n	801aaea <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aae0:	2b03      	cmp	r3, #3
 801aae2:	d002      	beq.n	801aaea <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aae4:	f06f 030a 	mvn.w	r3, #10
 801aae8:	e057      	b.n	801ab9a <tcp_write_checks+0xe2>
  } else if (len == 0) {
 801aaea:	887b      	ldrh	r3, [r7, #2]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d101      	bne.n	801aaf4 <tcp_write_checks+0x3c>
    return ERR_OK;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	e052      	b.n	801ab9a <tcp_write_checks+0xe2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801aafa:	887a      	ldrh	r2, [r7, #2]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d909      	bls.n	801ab14 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	7e9b      	ldrb	r3, [r3, #26]
 801ab04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ab08:	b2da      	uxtb	r2, r3
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab12:	e042      	b.n	801ab9a <tcp_write_checks+0xe2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab1a:	2b03      	cmp	r3, #3
 801ab1c:	d806      	bhi.n	801ab2c <tcp_write_checks+0x74>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab24:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801ab28:	4293      	cmp	r3, r2
 801ab2a:	d911      	bls.n	801ab50 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801ab2c:	4b1d      	ldr	r3, [pc, #116]	@ (801aba4 <tcp_write_checks+0xec>)
 801ab2e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ab32:	3301      	adds	r3, #1
 801ab34:	b29a      	uxth	r2, r3
 801ab36:	4b1b      	ldr	r3, [pc, #108]	@ (801aba4 <tcp_write_checks+0xec>)
 801ab38:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	7e9b      	ldrb	r3, [r3, #26]
 801ab40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ab44:	b2da      	uxtb	r2, r3
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801ab4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab4e:	e024      	b.n	801ab9a <tcp_write_checks+0xe2>
  }
  if (pcb->snd_queuelen != 0) {
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d00f      	beq.n	801ab7a <tcp_write_checks+0xc2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d11a      	bne.n	801ab98 <tcp_write_checks+0xe0>
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d116      	bne.n	801ab98 <tcp_write_checks+0xe0>
 801ab6a:	4b0f      	ldr	r3, [pc, #60]	@ (801aba8 <tcp_write_checks+0xf0>)
 801ab6c:	f240 1255 	movw	r2, #341	@ 0x155
 801ab70:	490e      	ldr	r1, [pc, #56]	@ (801abac <tcp_write_checks+0xf4>)
 801ab72:	480f      	ldr	r0, [pc, #60]	@ (801abb0 <tcp_write_checks+0xf8>)
 801ab74:	f007 fb6a 	bl	802224c <iprintf>
 801ab78:	e00e      	b.n	801ab98 <tcp_write_checks+0xe0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d103      	bne.n	801ab8a <tcp_write_checks+0xd2>
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d006      	beq.n	801ab98 <tcp_write_checks+0xe0>
 801ab8a:	4b07      	ldr	r3, [pc, #28]	@ (801aba8 <tcp_write_checks+0xf0>)
 801ab8c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801ab90:	4908      	ldr	r1, [pc, #32]	@ (801abb4 <tcp_write_checks+0xfc>)
 801ab92:	4807      	ldr	r0, [pc, #28]	@ (801abb0 <tcp_write_checks+0xf8>)
 801ab94:	f007 fb5a 	bl	802224c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab98:	2300      	movs	r3, #0
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3708      	adds	r7, #8
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	2000bbec 	.word	0x2000bbec
 801aba8:	08026e20 	.word	0x08026e20
 801abac:	08026ed8 	.word	0x08026ed8
 801abb0:	08026e84 	.word	0x08026e84
 801abb4:	08026f14 	.word	0x08026f14

0801abb8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801abb8:	b590      	push	{r4, r7, lr}
 801abba:	b09b      	sub	sp, #108	@ 0x6c
 801abbc:	af04      	add	r7, sp, #16
 801abbe:	60f8      	str	r0, [r7, #12]
 801abc0:	60b9      	str	r1, [r7, #8]
 801abc2:	4611      	mov	r1, r2
 801abc4:	461a      	mov	r2, r3
 801abc6:	460b      	mov	r3, r1
 801abc8:	80fb      	strh	r3, [r7, #6]
 801abca:	4613      	mov	r3, r2
 801abcc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801abce:	2300      	movs	r3, #0
 801abd0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801abd2:	2300      	movs	r3, #0
 801abd4:	653b      	str	r3, [r7, #80]	@ 0x50
 801abd6:	2300      	movs	r3, #0
 801abd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801abda:	2300      	movs	r3, #0
 801abdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abde:	2300      	movs	r3, #0
 801abe0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801abe2:	2300      	movs	r3, #0
 801abe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 801abe8:	2300      	movs	r3, #0
 801abea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 801abee:	2300      	movs	r3, #0
 801abf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801abf4:	2300      	movs	r3, #0
 801abf6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801abfc:	2300      	movs	r3, #0
 801abfe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801ac06:	085b      	lsrs	r3, r3, #1
 801ac08:	b29a      	uxth	r2, r3
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	bf28      	it	cs
 801ac12:	4613      	movcs	r3, r2
 801ac14:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ac16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d102      	bne.n	801ac22 <tcp_write+0x6a>
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac20:	e000      	b.n	801ac24 <tcp_write+0x6c>
 801ac22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d109      	bne.n	801ac40 <tcp_write+0x88>
 801ac2c:	4b92      	ldr	r3, [pc, #584]	@ (801ae78 <tcp_write+0x2c0>)
 801ac2e:	f240 1291 	movw	r2, #401	@ 0x191
 801ac32:	4992      	ldr	r1, [pc, #584]	@ (801ae7c <tcp_write+0x2c4>)
 801ac34:	4892      	ldr	r0, [pc, #584]	@ (801ae80 <tcp_write+0x2c8>)
 801ac36:	f007 fb09 	bl	802224c <iprintf>
 801ac3a:	f06f 030f 	mvn.w	r3, #15
 801ac3e:	e312      	b.n	801b266 <tcp_write+0x6ae>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ac40:	88fb      	ldrh	r3, [r7, #6]
 801ac42:	4619      	mov	r1, r3
 801ac44:	68f8      	ldr	r0, [r7, #12]
 801ac46:	f7ff ff37 	bl	801aab8 <tcp_write_checks>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801ac50:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d002      	beq.n	801ac5e <tcp_write+0xa6>
    return err;
 801ac58:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac5c:	e303      	b.n	801b266 <tcp_write+0x6ae>
  }
  queuelen = pcb->snd_queuelen;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ac64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	f000 80f4 	beq.w	801ae5a <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac76:	653b      	str	r3, [r7, #80]	@ 0x50
 801ac78:	e002      	b.n	801ac80 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801ac7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d1f8      	bne.n	801ac7a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801ac88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac8a:	7a9b      	ldrb	r3, [r3, #10]
 801ac8c:	009b      	lsls	r3, r3, #2
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	f003 0304 	and.w	r3, r3, #4
 801ac94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ac98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac9a:	891b      	ldrh	r3, [r3, #8]
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	8c3b      	ldrh	r3, [r7, #32]
 801aca0:	440b      	add	r3, r1
 801aca2:	429a      	cmp	r2, r3
 801aca4:	da06      	bge.n	801acb4 <tcp_write+0xfc>
 801aca6:	4b74      	ldr	r3, [pc, #464]	@ (801ae78 <tcp_write+0x2c0>)
 801aca8:	f240 12c7 	movw	r2, #455	@ 0x1c7
 801acac:	4975      	ldr	r1, [pc, #468]	@ (801ae84 <tcp_write+0x2cc>)
 801acae:	4874      	ldr	r0, [pc, #464]	@ (801ae80 <tcp_write+0x2c8>)
 801acb0:	f007 facc 	bl	802224c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801acb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801acb6:	891a      	ldrh	r2, [r3, #8]
 801acb8:	8c3b      	ldrh	r3, [r7, #32]
 801acba:	4413      	add	r3, r2
 801acbc:	b29b      	uxth	r3, r3
 801acbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801acc0:	1ad3      	subs	r3, r2, r3
 801acc2:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801acca:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801accc:	8a7b      	ldrh	r3, [r7, #18]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d026      	beq.n	801ad20 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801acd2:	8a7b      	ldrh	r3, [r7, #18]
 801acd4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d206      	bcs.n	801ace8 <tcp_write+0x130>
 801acda:	4b67      	ldr	r3, [pc, #412]	@ (801ae78 <tcp_write+0x2c0>)
 801acdc:	f240 12d9 	movw	r2, #473	@ 0x1d9
 801ace0:	4969      	ldr	r1, [pc, #420]	@ (801ae88 <tcp_write+0x2d0>)
 801ace2:	4867      	ldr	r0, [pc, #412]	@ (801ae80 <tcp_write+0x2c8>)
 801ace4:	f007 fab2 	bl	802224c <iprintf>
      seg = last_unsent;
 801ace8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801acea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801acec:	8a7b      	ldrh	r3, [r7, #18]
 801acee:	88fa      	ldrh	r2, [r7, #6]
 801acf0:	4293      	cmp	r3, r2
 801acf2:	bf28      	it	cs
 801acf4:	4613      	movcs	r3, r2
 801acf6:	b29b      	uxth	r3, r3
 801acf8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801acfa:	4293      	cmp	r3, r2
 801acfc:	bf28      	it	cs
 801acfe:	4613      	movcs	r3, r2
 801ad00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801ad02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ad08:	4413      	add	r3, r2
 801ad0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801ad0e:	8a7a      	ldrh	r2, [r7, #18]
 801ad10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ad12:	1ad3      	subs	r3, r2, r3
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ad18:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ad1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ad1c:	1ad3      	subs	r3, r2, r3
 801ad1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ad20:	8a7b      	ldrh	r3, [r7, #18]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d00b      	beq.n	801ad3e <tcp_write+0x186>
 801ad26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad2a:	88fb      	ldrh	r3, [r7, #6]
 801ad2c:	429a      	cmp	r2, r3
 801ad2e:	d006      	beq.n	801ad3e <tcp_write+0x186>
 801ad30:	4b51      	ldr	r3, [pc, #324]	@ (801ae78 <tcp_write+0x2c0>)
 801ad32:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801ad36:	4955      	ldr	r1, [pc, #340]	@ (801ae8c <tcp_write+0x2d4>)
 801ad38:	4851      	ldr	r0, [pc, #324]	@ (801ae80 <tcp_write+0x2c8>)
 801ad3a:	f007 fa87 	bl	802224c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ad3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad42:	88fb      	ldrh	r3, [r7, #6]
 801ad44:	429a      	cmp	r2, r3
 801ad46:	f080 8169 	bcs.w	801b01c <tcp_write+0x464>
 801ad4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	f000 8165 	beq.w	801b01c <tcp_write+0x464>
 801ad52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad54:	891b      	ldrh	r3, [r3, #8]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	f000 8160 	beq.w	801b01c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ad5c:	88fa      	ldrh	r2, [r7, #6]
 801ad5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad62:	1ad2      	subs	r2, r2, r3
 801ad64:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad66:	4293      	cmp	r3, r2
 801ad68:	bfa8      	it	ge
 801ad6a:	4613      	movge	r3, r2
 801ad6c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ad6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad70:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad72:	797b      	ldrb	r3, [r7, #5]
 801ad74:	f003 0301 	and.w	r3, r3, #1
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d027      	beq.n	801adcc <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad7c:	f107 0012 	add.w	r0, r7, #18
 801ad80:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ad82:	8bf9      	ldrh	r1, [r7, #30]
 801ad84:	2301      	movs	r3, #1
 801ad86:	9302      	str	r3, [sp, #8]
 801ad88:	797b      	ldrb	r3, [r7, #5]
 801ad8a:	9301      	str	r3, [sp, #4]
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	9300      	str	r3, [sp, #0]
 801ad90:	4603      	mov	r3, r0
 801ad92:	2004      	movs	r0, #4
 801ad94:	f7ff fe2e 	bl	801a9f4 <tcp_pbuf_prealloc>
 801ad98:	6578      	str	r0, [r7, #84]	@ 0x54
 801ad9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	f000 8228 	beq.w	801b1f2 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ada2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ada4:	6858      	ldr	r0, [r3, #4]
 801ada6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801adaa:	68ba      	ldr	r2, [r7, #8]
 801adac:	4413      	add	r3, r2
 801adae:	8bfa      	ldrh	r2, [r7, #30]
 801adb0:	4619      	mov	r1, r3
 801adb2:	f007 fd46 	bl	8022842 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801adb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801adb8:	f7fb fabe 	bl	8016338 <pbuf_clen>
 801adbc:	4603      	mov	r3, r0
 801adbe:	461a      	mov	r2, r3
 801adc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801adc4:	4413      	add	r3, r2
 801adc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801adca:	e03f      	b.n	801ae4c <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801adcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	637b      	str	r3, [r7, #52]	@ 0x34
 801add2:	e002      	b.n	801adda <tcp_write+0x222>
 801add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	637b      	str	r3, [r7, #52]	@ 0x34
 801adda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d1f8      	bne.n	801add4 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ade2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ade4:	7b1b      	ldrb	r3, [r3, #12]
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	d115      	bne.n	801ae16 <tcp_write+0x25e>
 801adea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adec:	685b      	ldr	r3, [r3, #4]
 801adee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801adf0:	8952      	ldrh	r2, [r2, #10]
 801adf2:	4413      	add	r3, r2
 801adf4:	68ba      	ldr	r2, [r7, #8]
 801adf6:	429a      	cmp	r2, r3
 801adf8:	d10d      	bne.n	801ae16 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801adfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d006      	beq.n	801ae10 <tcp_write+0x258>
 801ae02:	4b1d      	ldr	r3, [pc, #116]	@ (801ae78 <tcp_write+0x2c0>)
 801ae04:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 801ae08:	4921      	ldr	r1, [pc, #132]	@ (801ae90 <tcp_write+0x2d8>)
 801ae0a:	481d      	ldr	r0, [pc, #116]	@ (801ae80 <tcp_write+0x2c8>)
 801ae0c:	f007 fa1e 	bl	802224c <iprintf>
          extendlen = seglen;
 801ae10:	8bfb      	ldrh	r3, [r7, #30]
 801ae12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801ae14:	e01a      	b.n	801ae4c <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ae16:	8bfb      	ldrh	r3, [r7, #30]
 801ae18:	2201      	movs	r2, #1
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	2004      	movs	r0, #4
 801ae1e:	f7fa fe7f 	bl	8015b20 <pbuf_alloc>
 801ae22:	6578      	str	r0, [r7, #84]	@ 0x54
 801ae24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	f000 81e5 	beq.w	801b1f6 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801ae2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ae30:	68ba      	ldr	r2, [r7, #8]
 801ae32:	441a      	add	r2, r3
 801ae34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae36:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ae38:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ae3a:	f7fb fa7d 	bl	8016338 <pbuf_clen>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	461a      	mov	r2, r3
 801ae42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ae46:	4413      	add	r3, r2
 801ae48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ae4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ae50:	8bfb      	ldrh	r3, [r7, #30]
 801ae52:	4413      	add	r3, r2
 801ae54:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801ae58:	e0e0      	b.n	801b01c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f000 80db 	beq.w	801b01c <tcp_write+0x464>
 801ae66:	4b04      	ldr	r3, [pc, #16]	@ (801ae78 <tcp_write+0x2c0>)
 801ae68:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801ae6c:	4909      	ldr	r1, [pc, #36]	@ (801ae94 <tcp_write+0x2dc>)
 801ae6e:	4804      	ldr	r0, [pc, #16]	@ (801ae80 <tcp_write+0x2c8>)
 801ae70:	f007 f9ec 	bl	802224c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ae74:	e0d2      	b.n	801b01c <tcp_write+0x464>
 801ae76:	bf00      	nop
 801ae78:	08026e20 	.word	0x08026e20
 801ae7c:	08026f48 	.word	0x08026f48
 801ae80:	08026e84 	.word	0x08026e84
 801ae84:	08026f7c 	.word	0x08026f7c
 801ae88:	08026f94 	.word	0x08026f94
 801ae8c:	08026fb4 	.word	0x08026fb4
 801ae90:	08026fd4 	.word	0x08026fd4
 801ae94:	08027000 	.word	0x08027000
    struct pbuf *p;
    u16_t left = len - pos;
 801ae98:	88fa      	ldrh	r2, [r7, #6]
 801ae9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ae9e:	1ad3      	subs	r3, r2, r3
 801aea0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801aea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801aeaa:	1ad3      	subs	r3, r2, r3
 801aeac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801aeae:	8b7a      	ldrh	r2, [r7, #26]
 801aeb0:	8bbb      	ldrh	r3, [r7, #28]
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	bf28      	it	cs
 801aeb6:	4613      	movcs	r3, r2
 801aeb8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801aeba:	797b      	ldrb	r3, [r7, #5]
 801aebc:	f003 0301 	and.w	r3, r3, #1
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d036      	beq.n	801af32 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801aec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	8b3b      	ldrh	r3, [r7, #24]
 801aecc:	4413      	add	r3, r2
 801aece:	b299      	uxth	r1, r3
 801aed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	bf0c      	ite	eq
 801aed6:	2301      	moveq	r3, #1
 801aed8:	2300      	movne	r3, #0
 801aeda:	b2db      	uxtb	r3, r3
 801aedc:	f107 0012 	add.w	r0, r7, #18
 801aee0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801aee2:	9302      	str	r3, [sp, #8]
 801aee4:	797b      	ldrb	r3, [r7, #5]
 801aee6:	9301      	str	r3, [sp, #4]
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	9300      	str	r3, [sp, #0]
 801aeec:	4603      	mov	r3, r0
 801aeee:	2000      	movs	r0, #0
 801aef0:	f7ff fd80 	bl	801a9f4 <tcp_pbuf_prealloc>
 801aef4:	6338      	str	r0, [r7, #48]	@ 0x30
 801aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	f000 817e 	beq.w	801b1fa <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af00:	895b      	ldrh	r3, [r3, #10]
 801af02:	8b3a      	ldrh	r2, [r7, #24]
 801af04:	429a      	cmp	r2, r3
 801af06:	d906      	bls.n	801af16 <tcp_write+0x35e>
 801af08:	4b8f      	ldr	r3, [pc, #572]	@ (801b148 <tcp_write+0x590>)
 801af0a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801af0e:	498f      	ldr	r1, [pc, #572]	@ (801b14c <tcp_write+0x594>)
 801af10:	488f      	ldr	r0, [pc, #572]	@ (801b150 <tcp_write+0x598>)
 801af12:	f007 f99b 	bl	802224c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af18:	685a      	ldr	r2, [r3, #4]
 801af1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af1e:	18d0      	adds	r0, r2, r3
 801af20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af24:	68ba      	ldr	r2, [r7, #8]
 801af26:	4413      	add	r3, r2
 801af28:	8b3a      	ldrh	r2, [r7, #24]
 801af2a:	4619      	mov	r1, r3
 801af2c:	f007 fc89 	bl	8022842 <memcpy>
 801af30:	e02e      	b.n	801af90 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801af32:	8a7b      	ldrh	r3, [r7, #18]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d006      	beq.n	801af46 <tcp_write+0x38e>
 801af38:	4b83      	ldr	r3, [pc, #524]	@ (801b148 <tcp_write+0x590>)
 801af3a:	f240 224b 	movw	r2, #587	@ 0x24b
 801af3e:	4985      	ldr	r1, [pc, #532]	@ (801b154 <tcp_write+0x59c>)
 801af40:	4883      	ldr	r0, [pc, #524]	@ (801b150 <tcp_write+0x598>)
 801af42:	f007 f983 	bl	802224c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801af46:	8b3b      	ldrh	r3, [r7, #24]
 801af48:	2201      	movs	r2, #1
 801af4a:	4619      	mov	r1, r3
 801af4c:	2000      	movs	r0, #0
 801af4e:	f7fa fde7 	bl	8015b20 <pbuf_alloc>
 801af52:	6178      	str	r0, [r7, #20]
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	2b00      	cmp	r3, #0
 801af58:	f000 8151 	beq.w	801b1fe <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801af5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af60:	68ba      	ldr	r2, [r7, #8]
 801af62:	441a      	add	r2, r3
 801af64:	697b      	ldr	r3, [r7, #20]
 801af66:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801af68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af6c:	b29b      	uxth	r3, r3
 801af6e:	2200      	movs	r2, #0
 801af70:	4619      	mov	r1, r3
 801af72:	2000      	movs	r0, #0
 801af74:	f7fa fdd4 	bl	8015b20 <pbuf_alloc>
 801af78:	6338      	str	r0, [r7, #48]	@ 0x30
 801af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d103      	bne.n	801af88 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af80:	6978      	ldr	r0, [r7, #20]
 801af82:	f7fb f945 	bl	8016210 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af86:	e13d      	b.n	801b204 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af88:	6979      	ldr	r1, [r7, #20]
 801af8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af8c:	f7fb fa0c 	bl	80163a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af92:	f7fb f9d1 	bl	8016338 <pbuf_clen>
 801af96:	4603      	mov	r3, r0
 801af98:	461a      	mov	r2, r3
 801af9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af9e:	4413      	add	r3, r2
 801afa0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801afa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801afa8:	2b04      	cmp	r3, #4
 801afaa:	d805      	bhi.n	801afb8 <tcp_write+0x400>
 801afac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801afb0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801afb4:	4293      	cmp	r3, r2
 801afb6:	d903      	bls.n	801afc0 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801afb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801afba:	f7fb f929 	bl	8016210 <pbuf_free>
      goto memerr;
 801afbe:	e121      	b.n	801b204 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801afc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801afc8:	441a      	add	r2, r3
 801afca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801afce:	9300      	str	r3, [sp, #0]
 801afd0:	4613      	mov	r3, r2
 801afd2:	2200      	movs	r2, #0
 801afd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801afd6:	68f8      	ldr	r0, [r7, #12]
 801afd8:	f7ff fc7c 	bl	801a8d4 <tcp_create_segment>
 801afdc:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801afde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	f000 810e 	beq.w	801b202 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801afe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d102      	bne.n	801aff2 <tcp_write+0x43a>
      queue = seg;
 801afec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afee:	647b      	str	r3, [r7, #68]	@ 0x44
 801aff0:	e00c      	b.n	801b00c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801aff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d106      	bne.n	801b006 <tcp_write+0x44e>
 801aff8:	4b53      	ldr	r3, [pc, #332]	@ (801b148 <tcp_write+0x590>)
 801affa:	f240 2285 	movw	r2, #645	@ 0x285
 801affe:	4956      	ldr	r1, [pc, #344]	@ (801b158 <tcp_write+0x5a0>)
 801b000:	4853      	ldr	r0, [pc, #332]	@ (801b150 <tcp_write+0x598>)
 801b002:	f007 f923 	bl	802224c <iprintf>
      prev_seg->next = seg;
 801b006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b00a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801b00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b00e:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801b010:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b014:	8b3b      	ldrh	r3, [r7, #24]
 801b016:	4413      	add	r3, r2
 801b018:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801b01c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b020:	88fb      	ldrh	r3, [r7, #6]
 801b022:	429a      	cmp	r2, r3
 801b024:	f4ff af38 	bcc.w	801ae98 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801b028:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d02c      	beq.n	801b088 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801b02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b030:	685b      	ldr	r3, [r3, #4]
 801b032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b034:	e01e      	b.n	801b074 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 801b036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b038:	891a      	ldrh	r2, [r3, #8]
 801b03a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b03c:	4413      	add	r3, r2
 801b03e:	b29a      	uxth	r2, r3
 801b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b042:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d110      	bne.n	801b06e <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b04e:	685b      	ldr	r3, [r3, #4]
 801b050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b052:	8952      	ldrh	r2, [r2, #10]
 801b054:	4413      	add	r3, r2
 801b056:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b058:	68b9      	ldr	r1, [r7, #8]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f007 fbf1 	bl	8022842 <memcpy>
        p->len += oversize_used;
 801b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b062:	895a      	ldrh	r2, [r3, #10]
 801b064:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b066:	4413      	add	r3, r2
 801b068:	b29a      	uxth	r2, r3
 801b06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b06c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b076:	2b00      	cmp	r3, #0
 801b078:	d1dd      	bne.n	801b036 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801b07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b07c:	891a      	ldrh	r2, [r3, #8]
 801b07e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b080:	4413      	add	r3, r2
 801b082:	b29a      	uxth	r2, r3
 801b084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b086:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b088:	8a7a      	ldrh	r2, [r7, #18]
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b092:	2b00      	cmp	r3, #0
 801b094:	d018      	beq.n	801b0c8 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d106      	bne.n	801b0aa <tcp_write+0x4f2>
 801b09c:	4b2a      	ldr	r3, [pc, #168]	@ (801b148 <tcp_write+0x590>)
 801b09e:	f240 22ba 	movw	r2, #698	@ 0x2ba
 801b0a2:	492e      	ldr	r1, [pc, #184]	@ (801b15c <tcp_write+0x5a4>)
 801b0a4:	482a      	ldr	r0, [pc, #168]	@ (801b150 <tcp_write+0x598>)
 801b0a6:	f007 f8d1 	bl	802224c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7fb f979 	bl	80163a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b0b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0b8:	891a      	ldrh	r2, [r3, #8]
 801b0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b0bc:	891b      	ldrh	r3, [r3, #8]
 801b0be:	4413      	add	r3, r2
 801b0c0:	b29a      	uxth	r2, r3
 801b0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0c4:	811a      	strh	r2, [r3, #8]
 801b0c6:	e037      	b.n	801b138 <tcp_write+0x580>
  } else if (extendlen > 0) {
 801b0c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d034      	beq.n	801b138 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d003      	beq.n	801b0dc <tcp_write+0x524>
 801b0d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d106      	bne.n	801b0ea <tcp_write+0x532>
 801b0dc:	4b1a      	ldr	r3, [pc, #104]	@ (801b148 <tcp_write+0x590>)
 801b0de:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 801b0e2:	491f      	ldr	r1, [pc, #124]	@ (801b160 <tcp_write+0x5a8>)
 801b0e4:	481a      	ldr	r0, [pc, #104]	@ (801b150 <tcp_write+0x598>)
 801b0e6:	f007 f8b1 	bl	802224c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ec:	685b      	ldr	r3, [r3, #4]
 801b0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0f0:	e009      	b.n	801b106 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0f4:	891a      	ldrh	r2, [r3, #8]
 801b0f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0f8:	4413      	add	r3, r2
 801b0fa:	b29a      	uxth	r2, r3
 801b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0fe:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d1f1      	bne.n	801b0f2 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801b10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b110:	891a      	ldrh	r2, [r3, #8]
 801b112:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b114:	4413      	add	r3, r2
 801b116:	b29a      	uxth	r2, r3
 801b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b11a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b11e:	895a      	ldrh	r2, [r3, #10]
 801b120:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b122:	4413      	add	r3, r2
 801b124:	b29a      	uxth	r2, r3
 801b126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b128:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b12c:	891a      	ldrh	r2, [r3, #8]
 801b12e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b130:	4413      	add	r3, r2
 801b132:	b29a      	uxth	r2, r3
 801b134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b136:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d112      	bne.n	801b164 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b142:	669a      	str	r2, [r3, #104]	@ 0x68
 801b144:	e011      	b.n	801b16a <tcp_write+0x5b2>
 801b146:	bf00      	nop
 801b148:	08026e20 	.word	0x08026e20
 801b14c:	08027030 	.word	0x08027030
 801b150:	08026e84 	.word	0x08026e84
 801b154:	08027070 	.word	0x08027070
 801b158:	08027080 	.word	0x08027080
 801b15c:	08027094 	.word	0x08027094
 801b160:	080270cc 	.word	0x080270cc
  } else {
    last_unsent->next = queue;
 801b164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b168:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b16e:	88fb      	ldrh	r3, [r7, #6]
 801b170:	441a      	add	r2, r3
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b17c:	88fb      	ldrh	r3, [r7, #6]
 801b17e:	1ad3      	subs	r3, r2, r3
 801b180:	b29a      	uxth	r2, r3
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b18e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d00e      	beq.n	801b1ba <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d10a      	bne.n	801b1ba <tcp_write+0x602>
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d106      	bne.n	801b1ba <tcp_write+0x602>
 801b1ac:	4b30      	ldr	r3, [pc, #192]	@ (801b270 <tcp_write+0x6b8>)
 801b1ae:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801b1b2:	4930      	ldr	r1, [pc, #192]	@ (801b274 <tcp_write+0x6bc>)
 801b1b4:	4830      	ldr	r0, [pc, #192]	@ (801b278 <tcp_write+0x6c0>)
 801b1b6:	f007 f849 	bl	802224c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801b1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d016      	beq.n	801b1ee <tcp_write+0x636>
 801b1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d012      	beq.n	801b1ee <tcp_write+0x636>
 801b1c8:	797b      	ldrb	r3, [r7, #5]
 801b1ca:	f003 0302 	and.w	r3, r3, #2
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d10d      	bne.n	801b1ee <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1d4:	68db      	ldr	r3, [r3, #12]
 801b1d6:	899b      	ldrh	r3, [r3, #12]
 801b1d8:	b29c      	uxth	r4, r3
 801b1da:	2008      	movs	r0, #8
 801b1dc:	f7f9 fd72 	bl	8014cc4 <lwip_htons>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	461a      	mov	r2, r3
 801b1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1e6:	68db      	ldr	r3, [r3, #12]
 801b1e8:	4322      	orrs	r2, r4
 801b1ea:	b292      	uxth	r2, r2
 801b1ec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	e039      	b.n	801b266 <tcp_write+0x6ae>
          goto memerr;
 801b1f2:	bf00      	nop
 801b1f4:	e006      	b.n	801b204 <tcp_write+0x64c>
            goto memerr;
 801b1f6:	bf00      	nop
 801b1f8:	e004      	b.n	801b204 <tcp_write+0x64c>
        goto memerr;
 801b1fa:	bf00      	nop
 801b1fc:	e002      	b.n	801b204 <tcp_write+0x64c>
        goto memerr;
 801b1fe:	bf00      	nop
 801b200:	e000      	b.n	801b204 <tcp_write+0x64c>
      goto memerr;
 801b202:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	7e9b      	ldrb	r3, [r3, #26]
 801b208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b20c:	b2da      	uxtb	r2, r3
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801b212:	4b1a      	ldr	r3, [pc, #104]	@ (801b27c <tcp_write+0x6c4>)
 801b214:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b218:	3301      	adds	r3, #1
 801b21a:	b29a      	uxth	r2, r3
 801b21c:	4b17      	ldr	r3, [pc, #92]	@ (801b27c <tcp_write+0x6c4>)
 801b21e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801b222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b224:	2b00      	cmp	r3, #0
 801b226:	d002      	beq.n	801b22e <tcp_write+0x676>
    pbuf_free(concat_p);
 801b228:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801b22a:	f7fa fff1 	bl	8016210 <pbuf_free>
  }
  if (queue != NULL) {
 801b22e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b230:	2b00      	cmp	r3, #0
 801b232:	d002      	beq.n	801b23a <tcp_write+0x682>
    tcp_segs_free(queue);
 801b234:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b236:	f7fc fc0a 	bl	8017a4e <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b240:	2b00      	cmp	r3, #0
 801b242:	d00e      	beq.n	801b262 <tcp_write+0x6aa>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d10a      	bne.n	801b262 <tcp_write+0x6aa>
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b250:	2b00      	cmp	r3, #0
 801b252:	d106      	bne.n	801b262 <tcp_write+0x6aa>
 801b254:	4b06      	ldr	r3, [pc, #24]	@ (801b270 <tcp_write+0x6b8>)
 801b256:	f240 3201 	movw	r2, #769	@ 0x301
 801b25a:	4906      	ldr	r1, [pc, #24]	@ (801b274 <tcp_write+0x6bc>)
 801b25c:	4806      	ldr	r0, [pc, #24]	@ (801b278 <tcp_write+0x6c0>)
 801b25e:	f006 fff5 	bl	802224c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b262:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b266:	4618      	mov	r0, r3
 801b268:	375c      	adds	r7, #92	@ 0x5c
 801b26a:	46bd      	mov	sp, r7
 801b26c:	bd90      	pop	{r4, r7, pc}
 801b26e:	bf00      	nop
 801b270:	08026e20 	.word	0x08026e20
 801b274:	08027104 	.word	0x08027104
 801b278:	08026e84 	.word	0x08026e84
 801b27c:	2000bbec 	.word	0x2000bbec

0801b280 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	b08a      	sub	sp, #40	@ 0x28
 801b284:	af02      	add	r7, sp, #8
 801b286:	6078      	str	r0, [r7, #4]
 801b288:	460b      	mov	r3, r1
 801b28a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b28c:	2300      	movs	r3, #0
 801b28e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b290:	2300      	movs	r3, #0
 801b292:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b294:	78fb      	ldrb	r3, [r7, #3]
 801b296:	f003 0303 	and.w	r3, r3, #3
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d106      	bne.n	801b2ac <tcp_enqueue_flags+0x2c>
 801b29e:	4b7b      	ldr	r3, [pc, #492]	@ (801b48c <tcp_enqueue_flags+0x20c>)
 801b2a0:	f240 321a 	movw	r2, #794	@ 0x31a
 801b2a4:	497a      	ldr	r1, [pc, #488]	@ (801b490 <tcp_enqueue_flags+0x210>)
 801b2a6:	487b      	ldr	r0, [pc, #492]	@ (801b494 <tcp_enqueue_flags+0x214>)
 801b2a8:	f006 ffd0 	bl	802224c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b2b2:	2b03      	cmp	r3, #3
 801b2b4:	d806      	bhi.n	801b2c4 <tcp_enqueue_flags+0x44>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b2bc:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	d916      	bls.n	801b2f2 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 801b2c4:	78fb      	ldrb	r3, [r7, #3]
 801b2c6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d111      	bne.n	801b2f2 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801b2ce:	4b72      	ldr	r3, [pc, #456]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b2d0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	b29a      	uxth	r2, r3
 801b2d8:	4b6f      	ldr	r3, [pc, #444]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b2da:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	7e9b      	ldrb	r3, [r3, #26]
 801b2e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b2e6:	b2da      	uxtb	r2, r3
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801b2ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b2f0:	e0c7      	b.n	801b482 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 801b2f2:	78fb      	ldrb	r3, [r7, #3]
 801b2f4:	f003 0302 	and.w	r3, r3, #2
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d001      	beq.n	801b300 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b300:	7ffb      	ldrb	r3, [r7, #31]
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	b2db      	uxtb	r3, r3
 801b306:	f003 0304 	and.w	r3, r3, #4
 801b30a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b30c:	7dfb      	ldrb	r3, [r7, #23]
 801b30e:	b29b      	uxth	r3, r3
 801b310:	2200      	movs	r2, #0
 801b312:	4619      	mov	r1, r3
 801b314:	2000      	movs	r0, #0
 801b316:	f7fa fc03 	bl	8015b20 <pbuf_alloc>
 801b31a:	6138      	str	r0, [r7, #16]
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d111      	bne.n	801b346 <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	7e9b      	ldrb	r3, [r3, #26]
 801b326:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b32a:	b2da      	uxtb	r2, r3
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b330:	4b59      	ldr	r3, [pc, #356]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b332:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b336:	3301      	adds	r3, #1
 801b338:	b29a      	uxth	r2, r3
 801b33a:	4b57      	ldr	r3, [pc, #348]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b33c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b340:	f04f 33ff 	mov.w	r3, #4294967295
 801b344:	e09d      	b.n	801b482 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	895a      	ldrh	r2, [r3, #10]
 801b34a:	7dfb      	ldrb	r3, [r7, #23]
 801b34c:	b29b      	uxth	r3, r3
 801b34e:	429a      	cmp	r2, r3
 801b350:	d206      	bcs.n	801b360 <tcp_enqueue_flags+0xe0>
 801b352:	4b4e      	ldr	r3, [pc, #312]	@ (801b48c <tcp_enqueue_flags+0x20c>)
 801b354:	f44f 7250 	mov.w	r2, #832	@ 0x340
 801b358:	4950      	ldr	r1, [pc, #320]	@ (801b49c <tcp_enqueue_flags+0x21c>)
 801b35a:	484e      	ldr	r0, [pc, #312]	@ (801b494 <tcp_enqueue_flags+0x214>)
 801b35c:	f006 ff76 	bl	802224c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801b364:	78fa      	ldrb	r2, [r7, #3]
 801b366:	7ffb      	ldrb	r3, [r7, #31]
 801b368:	9300      	str	r3, [sp, #0]
 801b36a:	460b      	mov	r3, r1
 801b36c:	6939      	ldr	r1, [r7, #16]
 801b36e:	6878      	ldr	r0, [r7, #4]
 801b370:	f7ff fab0 	bl	801a8d4 <tcp_create_segment>
 801b374:	60f8      	str	r0, [r7, #12]
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d111      	bne.n	801b3a0 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	7e9b      	ldrb	r3, [r3, #26]
 801b380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b384:	b2da      	uxtb	r2, r3
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b38a:	4b43      	ldr	r3, [pc, #268]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b38c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b390:	3301      	adds	r3, #1
 801b392:	b29a      	uxth	r2, r3
 801b394:	4b40      	ldr	r3, [pc, #256]	@ (801b498 <tcp_enqueue_flags+0x218>)
 801b396:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b39a:	f04f 33ff 	mov.w	r3, #4294967295
 801b39e:	e070      	b.n	801b482 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	68db      	ldr	r3, [r3, #12]
 801b3a4:	f003 0303 	and.w	r3, r3, #3
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d006      	beq.n	801b3ba <tcp_enqueue_flags+0x13a>
 801b3ac:	4b37      	ldr	r3, [pc, #220]	@ (801b48c <tcp_enqueue_flags+0x20c>)
 801b3ae:	f240 3249 	movw	r2, #841	@ 0x349
 801b3b2:	493b      	ldr	r1, [pc, #236]	@ (801b4a0 <tcp_enqueue_flags+0x220>)
 801b3b4:	4837      	ldr	r0, [pc, #220]	@ (801b494 <tcp_enqueue_flags+0x214>)
 801b3b6:	f006 ff49 	bl	802224c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	891b      	ldrh	r3, [r3, #8]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d006      	beq.n	801b3d0 <tcp_enqueue_flags+0x150>
 801b3c2:	4b32      	ldr	r3, [pc, #200]	@ (801b48c <tcp_enqueue_flags+0x20c>)
 801b3c4:	f240 324a 	movw	r2, #842	@ 0x34a
 801b3c8:	4936      	ldr	r1, [pc, #216]	@ (801b4a4 <tcp_enqueue_flags+0x224>)
 801b3ca:	4832      	ldr	r0, [pc, #200]	@ (801b494 <tcp_enqueue_flags+0x214>)
 801b3cc:	f006 ff3e 	bl	802224c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d103      	bne.n	801b3e0 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	68fa      	ldr	r2, [r7, #12]
 801b3dc:	669a      	str	r2, [r3, #104]	@ 0x68
 801b3de:	e00d      	b.n	801b3fc <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b3e4:	61bb      	str	r3, [r7, #24]
 801b3e6:	e002      	b.n	801b3ee <tcp_enqueue_flags+0x16e>
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	61bb      	str	r3, [r7, #24]
 801b3ee:	69bb      	ldr	r3, [r7, #24]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d1f8      	bne.n	801b3e8 <tcp_enqueue_flags+0x168>
    useg->next = seg;
 801b3f6:	69bb      	ldr	r3, [r7, #24]
 801b3f8:	68fa      	ldr	r2, [r7, #12]
 801b3fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	2200      	movs	r2, #0
 801b400:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b404:	78fb      	ldrb	r3, [r7, #3]
 801b406:	f003 0302 	and.w	r3, r3, #2
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d104      	bne.n	801b418 <tcp_enqueue_flags+0x198>
 801b40e:	78fb      	ldrb	r3, [r7, #3]
 801b410:	f003 0301 	and.w	r3, r3, #1
 801b414:	2b00      	cmp	r3, #0
 801b416:	d004      	beq.n	801b422 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b41c:	1c5a      	adds	r2, r3, #1
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b422:	78fb      	ldrb	r3, [r7, #3]
 801b424:	f003 0301 	and.w	r3, r3, #1
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d006      	beq.n	801b43a <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	7e9b      	ldrb	r3, [r3, #26]
 801b430:	f043 0320 	orr.w	r3, r3, #32
 801b434:	b2da      	uxtb	r2, r3
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	685b      	ldr	r3, [r3, #4]
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fa ff7a 	bl	8016338 <pbuf_clen>
 801b444:	4603      	mov	r3, r0
 801b446:	461a      	mov	r2, r3
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b44e:	4413      	add	r3, r2
 801b450:	b29a      	uxth	r2, r3
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d00e      	beq.n	801b480 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b466:	2b00      	cmp	r3, #0
 801b468:	d10a      	bne.n	801b480 <tcp_enqueue_flags+0x200>
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d106      	bne.n	801b480 <tcp_enqueue_flags+0x200>
 801b472:	4b06      	ldr	r3, [pc, #24]	@ (801b48c <tcp_enqueue_flags+0x20c>)
 801b474:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801b478:	490b      	ldr	r1, [pc, #44]	@ (801b4a8 <tcp_enqueue_flags+0x228>)
 801b47a:	4806      	ldr	r0, [pc, #24]	@ (801b494 <tcp_enqueue_flags+0x214>)
 801b47c:	f006 fee6 	bl	802224c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b480:	2300      	movs	r3, #0
}
 801b482:	4618      	mov	r0, r3
 801b484:	3720      	adds	r7, #32
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
 801b48a:	bf00      	nop
 801b48c:	08026e20 	.word	0x08026e20
 801b490:	08027124 	.word	0x08027124
 801b494:	08026e84 	.word	0x08026e84
 801b498:	2000bbec 	.word	0x2000bbec
 801b49c:	0802717c 	.word	0x0802717c
 801b4a0:	080271b8 	.word	0x080271b8
 801b4a4:	080271d0 	.word	0x080271d0
 801b4a8:	080271fc 	.word	0x080271fc

0801b4ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b4ac:	b590      	push	{r4, r7, lr}
 801b4ae:	b08b      	sub	sp, #44	@ 0x2c
 801b4b0:	af04      	add	r7, sp, #16
 801b4b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b4b8:	7dbb      	ldrb	r3, [r7, #22]
 801b4ba:	b29c      	uxth	r4, r3
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f7f9 fc0c 	bl	8014cde <lwip_htonl>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	2200      	movs	r2, #0
 801b4ca:	4621      	mov	r1, r4
 801b4cc:	6878      	ldr	r0, [r7, #4]
 801b4ce:	f7ff f947 	bl	801a760 <tcp_output_alloc_header>
 801b4d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d109      	bne.n	801b4ee <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	7e9b      	ldrb	r3, [r3, #26]
 801b4de:	f043 0303 	orr.w	r3, r3, #3
 801b4e2:	b2da      	uxtb	r2, r3
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b4e8:	f06f 0301 	mvn.w	r3, #1
 801b4ec:	e036      	b.n	801b55c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	3304      	adds	r3, #4
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	f004 fbfa 	bl	801fcec <ip4_route>
 801b4f8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d102      	bne.n	801b506 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801b500:	23fc      	movs	r3, #252	@ 0xfc
 801b502:	75fb      	strb	r3, [r7, #23]
 801b504:	e012      	b.n	801b52c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801b506:	6879      	ldr	r1, [r7, #4]
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	1d18      	adds	r0, r3, #4
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	7a9c      	ldrb	r4, [r3, #10]
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	7a5b      	ldrb	r3, [r3, #9]
 801b514:	68fa      	ldr	r2, [r7, #12]
 801b516:	9202      	str	r2, [sp, #8]
 801b518:	2206      	movs	r2, #6
 801b51a:	9201      	str	r2, [sp, #4]
 801b51c:	9300      	str	r3, [sp, #0]
 801b51e:	4623      	mov	r3, r4
 801b520:	4602      	mov	r2, r0
 801b522:	6938      	ldr	r0, [r7, #16]
 801b524:	f004 fe54 	bl	80201d0 <ip4_output_if>
 801b528:	4603      	mov	r3, r0
 801b52a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801b52c:	6938      	ldr	r0, [r7, #16]
 801b52e:	f7fa fe6f 	bl	8016210 <pbuf_free>

  if (err != ERR_OK) {
 801b532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d007      	beq.n	801b54a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	7e9b      	ldrb	r3, [r3, #26]
 801b53e:	f043 0303 	orr.w	r3, r3, #3
 801b542:	b2da      	uxtb	r2, r3
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	769a      	strb	r2, [r3, #26]
 801b548:	e006      	b.n	801b558 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	7e9b      	ldrb	r3, [r3, #26]
 801b54e:	f023 0303 	bic.w	r3, r3, #3
 801b552:	b2da      	uxtb	r2, r3
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801b558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	371c      	adds	r7, #28
 801b560:	46bd      	mov	sp, r7
 801b562:	bd90      	pop	{r4, r7, pc}

0801b564 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b564:	b5b0      	push	{r4, r5, r7, lr}
 801b566:	b08a      	sub	sp, #40	@ 0x28
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	7d1b      	ldrb	r3, [r3, #20]
 801b570:	2b01      	cmp	r3, #1
 801b572:	d106      	bne.n	801b582 <tcp_output+0x1e>
 801b574:	4b99      	ldr	r3, [pc, #612]	@ (801b7dc <tcp_output+0x278>)
 801b576:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801b57a:	4999      	ldr	r1, [pc, #612]	@ (801b7e0 <tcp_output+0x27c>)
 801b57c:	4899      	ldr	r0, [pc, #612]	@ (801b7e4 <tcp_output+0x280>)
 801b57e:	f006 fe65 	bl	802224c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b582:	4b99      	ldr	r3, [pc, #612]	@ (801b7e8 <tcp_output+0x284>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	687a      	ldr	r2, [r7, #4]
 801b588:	429a      	cmp	r2, r3
 801b58a:	d101      	bne.n	801b590 <tcp_output+0x2c>
    return ERR_OK;
 801b58c:	2300      	movs	r3, #0
 801b58e:	e1cb      	b.n	801b928 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b59c:	4293      	cmp	r3, r2
 801b59e:	bf28      	it	cs
 801b5a0:	4613      	movcs	r3, r2
 801b5a2:	b29b      	uxth	r3, r3
 801b5a4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	7e9b      	ldrb	r3, [r3, #26]
 801b5b0:	f003 0302 	and.w	r3, r3, #2
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d017      	beq.n	801b5e8 <tcp_output+0x84>
 801b5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d00f      	beq.n	801b5de <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801b5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5c0:	68db      	ldr	r3, [r3, #12]
 801b5c2:	685b      	ldr	r3, [r3, #4]
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7f9 fb8a 	bl	8014cde <lwip_htonl>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b5d0:	1ad3      	subs	r3, r2, r3
 801b5d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b5d4:	8912      	ldrh	r2, [r2, #8]
 801b5d6:	4413      	add	r3, r2
     (seg == NULL ||
 801b5d8:	69ba      	ldr	r2, [r7, #24]
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d204      	bcs.n	801b5e8 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	f7ff ff64 	bl	801b4ac <tcp_send_empty_ack>
 801b5e4:	4603      	mov	r3, r0
 801b5e6:	e19f      	b.n	801b928 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b5ee:	6a3b      	ldr	r3, [r7, #32]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d007      	beq.n	801b604 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801b5f4:	e002      	b.n	801b5fc <tcp_output+0x98>
 801b5f6:	6a3b      	ldr	r3, [r7, #32]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	623b      	str	r3, [r7, #32]
 801b5fc:	6a3b      	ldr	r3, [r7, #32]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d1f8      	bne.n	801b5f6 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	3304      	adds	r3, #4
 801b608:	4618      	mov	r0, r3
 801b60a:	f004 fb6f 	bl	801fcec <ip4_route>
 801b60e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b610:	697b      	ldr	r3, [r7, #20]
 801b612:	2b00      	cmp	r3, #0
 801b614:	d102      	bne.n	801b61c <tcp_output+0xb8>
    return ERR_RTE;
 801b616:	f06f 0303 	mvn.w	r3, #3
 801b61a:	e185      	b.n	801b928 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d003      	beq.n	801b62a <tcp_output+0xc6>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d111      	bne.n	801b64e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b62a:	697b      	ldr	r3, [r7, #20]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d002      	beq.n	801b636 <tcp_output+0xd2>
 801b630:	697b      	ldr	r3, [r7, #20]
 801b632:	3304      	adds	r3, #4
 801b634:	e000      	b.n	801b638 <tcp_output+0xd4>
 801b636:	2300      	movs	r3, #0
 801b638:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d102      	bne.n	801b646 <tcp_output+0xe2>
      return ERR_RTE;
 801b640:	f06f 0303 	mvn.w	r3, #3
 801b644:	e170      	b.n	801b928 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	681a      	ldr	r2, [r3, #0]
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b650:	2b00      	cmp	r3, #0
 801b652:	f000 813f 	beq.w	801b8d4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b658:	68db      	ldr	r3, [r3, #12]
 801b65a:	685b      	ldr	r3, [r3, #4]
 801b65c:	4618      	mov	r0, r3
 801b65e:	f7f9 fb3e 	bl	8014cde <lwip_htonl>
 801b662:	4602      	mov	r2, r0
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b668:	1ad3      	subs	r3, r2, r3
 801b66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b66c:	8912      	ldrh	r2, [r2, #8]
 801b66e:	4413      	add	r3, r2
  if (seg != NULL &&
 801b670:	69ba      	ldr	r2, [r7, #24]
 801b672:	429a      	cmp	r2, r3
 801b674:	f080 812e 	bcs.w	801b8d4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b678:	69bb      	ldr	r3, [r7, #24]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	f000 812a 	beq.w	801b8d4 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b686:	461a      	mov	r2, r3
 801b688:	69bb      	ldr	r3, [r7, #24]
 801b68a:	4293      	cmp	r3, r2
 801b68c:	f040 8122 	bne.w	801b8d4 <tcp_output+0x370>
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b694:	2b00      	cmp	r3, #0
 801b696:	f040 811d 	bne.w	801b8d4 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	f040 812c 	bne.w	801b8fe <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	2201      	movs	r2, #1
 801b6b2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 801b6b6:	e122      	b.n	801b8fe <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	899b      	ldrh	r3, [r3, #12]
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	f7f9 faff 	bl	8014cc4 <lwip_htons>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	f003 0304 	and.w	r3, r3, #4
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d006      	beq.n	801b6de <tcp_output+0x17a>
 801b6d0:	4b42      	ldr	r3, [pc, #264]	@ (801b7dc <tcp_output+0x278>)
 801b6d2:	f240 4245 	movw	r2, #1093	@ 0x445
 801b6d6:	4945      	ldr	r1, [pc, #276]	@ (801b7ec <tcp_output+0x288>)
 801b6d8:	4842      	ldr	r0, [pc, #264]	@ (801b7e4 <tcp_output+0x280>)
 801b6da:	f006 fdb7 	bl	802224c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d01f      	beq.n	801b726 <tcp_output+0x1c2>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	7e9b      	ldrb	r3, [r3, #26]
 801b6ea:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d119      	bne.n	801b726 <tcp_output+0x1c2>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d00b      	beq.n	801b712 <tcp_output+0x1ae>
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d110      	bne.n	801b726 <tcp_output+0x1c2>
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b708:	891a      	ldrh	r2, [r3, #8]
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b70e:	429a      	cmp	r2, r3
 801b710:	d209      	bcs.n	801b726 <tcp_output+0x1c2>
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d004      	beq.n	801b726 <tcp_output+0x1c2>
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b722:	2b03      	cmp	r3, #3
 801b724:	d901      	bls.n	801b72a <tcp_output+0x1c6>
 801b726:	2301      	movs	r3, #1
 801b728:	e000      	b.n	801b72c <tcp_output+0x1c8>
 801b72a:	2300      	movs	r3, #0
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d106      	bne.n	801b73e <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	7e9b      	ldrb	r3, [r3, #26]
 801b734:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b738:	2b00      	cmp	r3, #0
 801b73a:	f000 80e2 	beq.w	801b902 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	7d1b      	ldrb	r3, [r3, #20]
 801b742:	2b02      	cmp	r3, #2
 801b744:	d00d      	beq.n	801b762 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b748:	68db      	ldr	r3, [r3, #12]
 801b74a:	899b      	ldrh	r3, [r3, #12]
 801b74c:	b29c      	uxth	r4, r3
 801b74e:	2010      	movs	r0, #16
 801b750:	f7f9 fab8 	bl	8014cc4 <lwip_htons>
 801b754:	4603      	mov	r3, r0
 801b756:	461a      	mov	r2, r3
 801b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b75a:	68db      	ldr	r3, [r3, #12]
 801b75c:	4322      	orrs	r2, r4
 801b75e:	b292      	uxth	r2, r2
 801b760:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801b762:	697a      	ldr	r2, [r7, #20]
 801b764:	6879      	ldr	r1, [r7, #4]
 801b766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b768:	f000 f8e2 	bl	801b930 <tcp_output_segment>
 801b76c:	4603      	mov	r3, r0
 801b76e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d009      	beq.n	801b78c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	7e9b      	ldrb	r3, [r3, #26]
 801b77c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b780:	b2da      	uxtb	r2, r3
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	769a      	strb	r2, [r3, #26]
      return err;
 801b786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b78a:	e0cd      	b.n	801b928 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 801b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78e:	681a      	ldr	r2, [r3, #0]
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	7d1b      	ldrb	r3, [r3, #20]
 801b798:	2b02      	cmp	r3, #2
 801b79a:	d006      	beq.n	801b7aa <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	7e9b      	ldrb	r3, [r3, #26]
 801b7a0:	f023 0303 	bic.w	r3, r3, #3
 801b7a4:	b2da      	uxtb	r2, r3
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ac:	68db      	ldr	r3, [r3, #12]
 801b7ae:	685b      	ldr	r3, [r3, #4]
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	f7f9 fa94 	bl	8014cde <lwip_htonl>
 801b7b6:	4604      	mov	r4, r0
 801b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ba:	891b      	ldrh	r3, [r3, #8]
 801b7bc:	461d      	mov	r5, r3
 801b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	899b      	ldrh	r3, [r3, #12]
 801b7c4:	b29b      	uxth	r3, r3
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7f9 fa7c 	bl	8014cc4 <lwip_htons>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	f003 0303 	and.w	r3, r3, #3
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d00c      	beq.n	801b7f0 <tcp_output+0x28c>
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	e00b      	b.n	801b7f2 <tcp_output+0x28e>
 801b7da:	bf00      	nop
 801b7dc:	08026e20 	.word	0x08026e20
 801b7e0:	08027224 	.word	0x08027224
 801b7e4:	08026e84 	.word	0x08026e84
 801b7e8:	2000bdd0 	.word	0x2000bdd0
 801b7ec:	0802724c 	.word	0x0802724c
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	442b      	add	r3, r5
 801b7f4:	4423      	add	r3, r4
 801b7f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	1ad3      	subs	r3, r2, r3
 801b800:	2b00      	cmp	r3, #0
 801b802:	da02      	bge.n	801b80a <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	68ba      	ldr	r2, [r7, #8]
 801b808:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b80c:	891b      	ldrh	r3, [r3, #8]
 801b80e:	461c      	mov	r4, r3
 801b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b812:	68db      	ldr	r3, [r3, #12]
 801b814:	899b      	ldrh	r3, [r3, #12]
 801b816:	b29b      	uxth	r3, r3
 801b818:	4618      	mov	r0, r3
 801b81a:	f7f9 fa53 	bl	8014cc4 <lwip_htons>
 801b81e:	4603      	mov	r3, r0
 801b820:	f003 0303 	and.w	r3, r3, #3
 801b824:	2b00      	cmp	r3, #0
 801b826:	d001      	beq.n	801b82c <tcp_output+0x2c8>
 801b828:	2301      	movs	r3, #1
 801b82a:	e000      	b.n	801b82e <tcp_output+0x2ca>
 801b82c:	2300      	movs	r3, #0
 801b82e:	4423      	add	r3, r4
 801b830:	2b00      	cmp	r3, #0
 801b832:	d049      	beq.n	801b8c8 <tcp_output+0x364>
      seg->next = NULL;
 801b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b836:	2200      	movs	r2, #0
 801b838:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d105      	bne.n	801b84e <tcp_output+0x2ea>
        pcb->unacked = seg;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b846:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 801b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b84a:	623b      	str	r3, [r7, #32]
 801b84c:	e03f      	b.n	801b8ce <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b850:	68db      	ldr	r3, [r3, #12]
 801b852:	685b      	ldr	r3, [r3, #4]
 801b854:	4618      	mov	r0, r3
 801b856:	f7f9 fa42 	bl	8014cde <lwip_htonl>
 801b85a:	4604      	mov	r4, r0
 801b85c:	6a3b      	ldr	r3, [r7, #32]
 801b85e:	68db      	ldr	r3, [r3, #12]
 801b860:	685b      	ldr	r3, [r3, #4]
 801b862:	4618      	mov	r0, r3
 801b864:	f7f9 fa3b 	bl	8014cde <lwip_htonl>
 801b868:	4603      	mov	r3, r0
 801b86a:	1ae3      	subs	r3, r4, r3
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	da24      	bge.n	801b8ba <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	336c      	adds	r3, #108	@ 0x6c
 801b874:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b876:	e002      	b.n	801b87e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d011      	beq.n	801b8aa <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b886:	69fb      	ldr	r3, [r7, #28]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	685b      	ldr	r3, [r3, #4]
 801b88e:	4618      	mov	r0, r3
 801b890:	f7f9 fa25 	bl	8014cde <lwip_htonl>
 801b894:	4604      	mov	r4, r0
 801b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b898:	68db      	ldr	r3, [r3, #12]
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	4618      	mov	r0, r3
 801b89e:	f7f9 fa1e 	bl	8014cde <lwip_htonl>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	dbe6      	blt.n	801b878 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 801b8aa:	69fb      	ldr	r3, [r7, #28]
 801b8ac:	681a      	ldr	r2, [r3, #0]
 801b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8b0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b8b2:	69fb      	ldr	r3, [r7, #28]
 801b8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8b6:	601a      	str	r2, [r3, #0]
 801b8b8:	e009      	b.n	801b8ce <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b8ba:	6a3b      	ldr	r3, [r7, #32]
 801b8bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8be:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b8c0:	6a3b      	ldr	r3, [r7, #32]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	623b      	str	r3, [r7, #32]
 801b8c6:	e002      	b.n	801b8ce <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b8c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b8ca:	f7fc f8d5 	bl	8017a78 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b8d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d015      	beq.n	801b906 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8dc:	68db      	ldr	r3, [r3, #12]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7f9 f9fc 	bl	8014cde <lwip_htonl>
 801b8e6:	4602      	mov	r2, r0
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b8ec:	1ad3      	subs	r3, r2, r3
 801b8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b8f0:	8912      	ldrh	r2, [r2, #8]
 801b8f2:	4413      	add	r3, r2
  while (seg != NULL &&
 801b8f4:	69ba      	ldr	r2, [r7, #24]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	f4bf aede 	bcs.w	801b6b8 <tcp_output+0x154>
  }
output_done:
 801b8fc:	e003      	b.n	801b906 <tcp_output+0x3a2>
    goto output_done;
 801b8fe:	bf00      	nop
 801b900:	e002      	b.n	801b908 <tcp_output+0x3a4>
      break;
 801b902:	bf00      	nop
 801b904:	e000      	b.n	801b908 <tcp_output+0x3a4>
output_done:
 801b906:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d103      	bne.n	801b918 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	2200      	movs	r2, #0
 801b914:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	7e9b      	ldrb	r3, [r3, #26]
 801b91c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b920:	b2da      	uxtb	r2, r3
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801b926:	2300      	movs	r3, #0
}
 801b928:	4618      	mov	r0, r3
 801b92a:	3728      	adds	r7, #40	@ 0x28
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bdb0      	pop	{r4, r5, r7, pc}

0801b930 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b930:	b5b0      	push	{r4, r5, r7, lr}
 801b932:	b08c      	sub	sp, #48	@ 0x30
 801b934:	af04      	add	r7, sp, #16
 801b936:	60f8      	str	r0, [r7, #12]
 801b938:	60b9      	str	r1, [r7, #8]
 801b93a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	89db      	ldrh	r3, [r3, #14]
 801b942:	2b01      	cmp	r3, #1
 801b944:	d001      	beq.n	801b94a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b946:	2300      	movs	r3, #0
 801b948:	e09c      	b.n	801ba84 <tcp_output_segment+0x154>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	68dc      	ldr	r4, [r3, #12]
 801b952:	4610      	mov	r0, r2
 801b954:	f7f9 f9c3 	bl	8014cde <lwip_htonl>
 801b958:	4603      	mov	r3, r0
 801b95a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	68dc      	ldr	r4, [r3, #12]
 801b964:	4610      	mov	r0, r2
 801b966:	f7f9 f9ad 	bl	8014cc4 <lwip_htons>
 801b96a:	4603      	mov	r3, r0
 801b96c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b972:	68ba      	ldr	r2, [r7, #8]
 801b974:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b976:	441a      	add	r2, r3
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	68db      	ldr	r3, [r3, #12]
 801b980:	3314      	adds	r3, #20
 801b982:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	7a9b      	ldrb	r3, [r3, #10]
 801b988:	f003 0301 	and.w	r3, r3, #1
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d014      	beq.n	801b9ba <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b990:	68bb      	ldr	r3, [r7, #8]
 801b992:	3304      	adds	r3, #4
 801b994:	4619      	mov	r1, r3
 801b996:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b99a:	f7fc fbc9 	bl	8018130 <tcp_eff_send_mss_impl>
 801b99e:	4603      	mov	r3, r0
 801b9a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b9a2:	8b7b      	ldrh	r3, [r7, #26]
 801b9a4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b9a8:	4618      	mov	r0, r3
 801b9aa:	f7f9 f998 	bl	8014cde <lwip_htonl>
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b9b4:	69fb      	ldr	r3, [r7, #28]
 801b9b6:	3304      	adds	r3, #4
 801b9b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	da02      	bge.n	801b9ca <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d10c      	bne.n	801b9ec <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801b9d2:	4b2e      	ldr	r3, [pc, #184]	@ (801ba8c <tcp_output_segment+0x15c>)
 801b9d4:	681a      	ldr	r2, [r3, #0]
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	68db      	ldr	r3, [r3, #12]
 801b9de:	685b      	ldr	r3, [r3, #4]
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	f7f9 f97c 	bl	8014cde <lwip_htonl>
 801b9e6:	4602      	mov	r2, r0
 801b9e8:	68bb      	ldr	r3, [r7, #8]
 801b9ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	68da      	ldr	r2, [r3, #12]
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	685b      	ldr	r3, [r3, #4]
 801b9f4:	685b      	ldr	r3, [r3, #4]
 801b9f6:	1ad3      	subs	r3, r2, r3
 801b9f8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 801b9fa:	8b3b      	ldrh	r3, [r7, #24]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d106      	bne.n	801ba0e <tcp_output_segment+0xde>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 801ba00:	4b23      	ldr	r3, [pc, #140]	@ (801ba90 <tcp_output_segment+0x160>)
 801ba02:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801ba06:	3301      	adds	r3, #1
 801ba08:	4a21      	ldr	r2, [pc, #132]	@ (801ba90 <tcp_output_segment+0x160>)
 801ba0a:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  seg->p->len -= len;
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	685b      	ldr	r3, [r3, #4]
 801ba12:	8959      	ldrh	r1, [r3, #10]
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	8b3a      	ldrh	r2, [r7, #24]
 801ba1a:	1a8a      	subs	r2, r1, r2
 801ba1c:	b292      	uxth	r2, r2
 801ba1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	685b      	ldr	r3, [r3, #4]
 801ba24:	8919      	ldrh	r1, [r3, #8]
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	685b      	ldr	r3, [r3, #4]
 801ba2a:	8b3a      	ldrh	r2, [r7, #24]
 801ba2c:	1a8a      	subs	r2, r1, r2
 801ba2e:	b292      	uxth	r2, r2
 801ba30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	685b      	ldr	r3, [r3, #4]
 801ba36:	68fa      	ldr	r2, [r7, #12]
 801ba38:	68d2      	ldr	r2, [r2, #12]
 801ba3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	68db      	ldr	r3, [r3, #12]
 801ba40:	2200      	movs	r2, #0
 801ba42:	741a      	strb	r2, [r3, #16]
 801ba44:	2200      	movs	r2, #0
 801ba46:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801ba48:	4b11      	ldr	r3, [pc, #68]	@ (801ba90 <tcp_output_segment+0x160>)
 801ba4a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801ba4e:	3301      	adds	r3, #1
 801ba50:	b29a      	uxth	r2, r3
 801ba52:	4b0f      	ldr	r3, [pc, #60]	@ (801ba90 <tcp_output_segment+0x160>)
 801ba54:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	6858      	ldr	r0, [r3, #4]
 801ba5c:	68b9      	ldr	r1, [r7, #8]
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	1d1c      	adds	r4, r3, #4
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	7a9d      	ldrb	r5, [r3, #10]
 801ba66:	68bb      	ldr	r3, [r7, #8]
 801ba68:	7a5b      	ldrb	r3, [r3, #9]
 801ba6a:	687a      	ldr	r2, [r7, #4]
 801ba6c:	9202      	str	r2, [sp, #8]
 801ba6e:	2206      	movs	r2, #6
 801ba70:	9201      	str	r2, [sp, #4]
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	462b      	mov	r3, r5
 801ba76:	4622      	mov	r2, r4
 801ba78:	f004 fbaa 	bl	80201d0 <ip4_output_if>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801ba80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ba84:	4618      	mov	r0, r3
 801ba86:	3720      	adds	r7, #32
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bdb0      	pop	{r4, r5, r7, pc}
 801ba8c:	2000bd84 	.word	0x2000bd84
 801ba90:	2000bbec 	.word	0x2000bbec

0801ba94 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b08c      	sub	sp, #48	@ 0x30
 801ba98:	af04      	add	r7, sp, #16
 801ba9a:	60f8      	str	r0, [r7, #12]
 801ba9c:	60b9      	str	r1, [r7, #8]
 801ba9e:	607a      	str	r2, [r7, #4]
 801baa0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801baa2:	2200      	movs	r2, #0
 801baa4:	2114      	movs	r1, #20
 801baa6:	2001      	movs	r0, #1
 801baa8:	f7fa f83a 	bl	8015b20 <pbuf_alloc>
 801baac:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801baae:	69fb      	ldr	r3, [r7, #28]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d06a      	beq.n	801bb8a <tcp_rst+0xf6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bab4:	69fb      	ldr	r3, [r7, #28]
 801bab6:	895b      	ldrh	r3, [r3, #10]
 801bab8:	2b13      	cmp	r3, #19
 801baba:	d806      	bhi.n	801baca <tcp_rst+0x36>
 801babc:	4b35      	ldr	r3, [pc, #212]	@ (801bb94 <tcp_rst+0x100>)
 801babe:	f240 524c 	movw	r2, #1356	@ 0x54c
 801bac2:	4935      	ldr	r1, [pc, #212]	@ (801bb98 <tcp_rst+0x104>)
 801bac4:	4835      	ldr	r0, [pc, #212]	@ (801bb9c <tcp_rst+0x108>)
 801bac6:	f006 fbc1 	bl	802224c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801baca:	69fb      	ldr	r3, [r7, #28]
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801bad0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7f9 f8f6 	bl	8014cc4 <lwip_htons>
 801bad8:	4603      	mov	r3, r0
 801bada:	461a      	mov	r2, r3
 801badc:	69bb      	ldr	r3, [r7, #24]
 801bade:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801bae0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bae2:	4618      	mov	r0, r3
 801bae4:	f7f9 f8ee 	bl	8014cc4 <lwip_htons>
 801bae8:	4603      	mov	r3, r0
 801baea:	461a      	mov	r2, r3
 801baec:	69bb      	ldr	r3, [r7, #24]
 801baee:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801baf0:	68f8      	ldr	r0, [r7, #12]
 801baf2:	f7f9 f8f4 	bl	8014cde <lwip_htonl>
 801baf6:	4602      	mov	r2, r0
 801baf8:	69bb      	ldr	r3, [r7, #24]
 801bafa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801bafc:	68b8      	ldr	r0, [r7, #8]
 801bafe:	f7f9 f8ee 	bl	8014cde <lwip_htonl>
 801bb02:	4602      	mov	r2, r0
 801bb04:	69bb      	ldr	r3, [r7, #24]
 801bb06:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801bb08:	f245 0014 	movw	r0, #20500	@ 0x5014
 801bb0c:	f7f9 f8da 	bl	8014cc4 <lwip_htons>
 801bb10:	4603      	mov	r3, r0
 801bb12:	461a      	mov	r2, r3
 801bb14:	69bb      	ldr	r3, [r7, #24]
 801bb16:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801bb18:	69bb      	ldr	r3, [r7, #24]
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	f042 0208 	orr.w	r2, r2, #8
 801bb20:	739a      	strb	r2, [r3, #14]
 801bb22:	2200      	movs	r2, #0
 801bb24:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801bb28:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	2200      	movs	r2, #0
 801bb2e:	741a      	strb	r2, [r3, #16]
 801bb30:	2200      	movs	r2, #0
 801bb32:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801bb34:	69bb      	ldr	r3, [r7, #24]
 801bb36:	2200      	movs	r2, #0
 801bb38:	749a      	strb	r2, [r3, #18]
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 801bb3e:	4b18      	ldr	r3, [pc, #96]	@ (801bba0 <tcp_rst+0x10c>)
 801bb40:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801bb44:	3301      	adds	r3, #1
 801bb46:	b29a      	uxth	r2, r3
 801bb48:	4b15      	ldr	r3, [pc, #84]	@ (801bba0 <tcp_rst+0x10c>)
 801bb4a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);
 801bb4e:	4b14      	ldr	r3, [pc, #80]	@ (801bba0 <tcp_rst+0x10c>)
 801bb50:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 801bb54:	3301      	adds	r3, #1
 801bb56:	4a12      	ldr	r2, [pc, #72]	@ (801bba0 <tcp_rst+0x10c>)
 801bb58:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

  netif = ip_route(local_ip, remote_ip);
 801bb5c:	6838      	ldr	r0, [r7, #0]
 801bb5e:	f004 f8c5 	bl	801fcec <ip4_route>
 801bb62:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801bb64:	697b      	ldr	r3, [r7, #20]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d00b      	beq.n	801bb82 <tcp_rst+0xee>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801bb6a:	697b      	ldr	r3, [r7, #20]
 801bb6c:	9302      	str	r3, [sp, #8]
 801bb6e:	2306      	movs	r3, #6
 801bb70:	9301      	str	r3, [sp, #4]
 801bb72:	2300      	movs	r3, #0
 801bb74:	9300      	str	r3, [sp, #0]
 801bb76:	23ff      	movs	r3, #255	@ 0xff
 801bb78:	683a      	ldr	r2, [r7, #0]
 801bb7a:	6879      	ldr	r1, [r7, #4]
 801bb7c:	69f8      	ldr	r0, [r7, #28]
 801bb7e:	f004 fb27 	bl	80201d0 <ip4_output_if>
  }
  pbuf_free(p);
 801bb82:	69f8      	ldr	r0, [r7, #28]
 801bb84:	f7fa fb44 	bl	8016210 <pbuf_free>
 801bb88:	e000      	b.n	801bb8c <tcp_rst+0xf8>
    return;
 801bb8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bb8c:	3720      	adds	r7, #32
 801bb8e:	46bd      	mov	sp, r7
 801bb90:	bd80      	pop	{r7, pc}
 801bb92:	bf00      	nop
 801bb94:	08026e20 	.word	0x08026e20
 801bb98:	08026e54 	.word	0x08026e54
 801bb9c:	08026e84 	.word	0x08026e84
 801bba0:	2000bbec 	.word	0x2000bbec

0801bba4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b084      	sub	sp, #16
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d029      	beq.n	801bc08 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bbb8:	60fb      	str	r3, [r7, #12]
 801bbba:	e002      	b.n	801bbc2 <tcp_rexmit_rto+0x1e>
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	60fb      	str	r3, [r7, #12]
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d1f8      	bne.n	801bbbc <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	2200      	movs	r2, #0
 801bbde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bbe6:	2bff      	cmp	r3, #255	@ 0xff
 801bbe8:	d007      	beq.n	801bbfa <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bbf0:	3301      	adds	r3, #1
 801bbf2:	b2da      	uxtb	r2, r3
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801bc00:	6878      	ldr	r0, [r7, #4]
 801bc02:	f7ff fcaf 	bl	801b564 <tcp_output>
 801bc06:	e000      	b.n	801bc0a <tcp_rexmit_rto+0x66>
    return;
 801bc08:	bf00      	nop
}
 801bc0a:	3710      	adds	r7, #16
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bd80      	pop	{r7, pc}

0801bc10 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bc10:	b590      	push	{r4, r7, lr}
 801bc12:	b085      	sub	sp, #20
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d04a      	beq.n	801bcb6 <tcp_rexmit+0xa6>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc24:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	681a      	ldr	r2, [r3, #0]
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	3368      	adds	r3, #104	@ 0x68
 801bc32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bc34:	e002      	b.n	801bc3c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d011      	beq.n	801bc68 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	68db      	ldr	r3, [r3, #12]
 801bc4a:	685b      	ldr	r3, [r3, #4]
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	f7f9 f846 	bl	8014cde <lwip_htonl>
 801bc52:	4604      	mov	r4, r0
 801bc54:	68bb      	ldr	r3, [r7, #8]
 801bc56:	68db      	ldr	r3, [r3, #12]
 801bc58:	685b      	ldr	r3, [r3, #4]
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	f7f9 f83f 	bl	8014cde <lwip_htonl>
 801bc60:	4603      	mov	r3, r0
 801bc62:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	dbe6      	blt.n	801bc36 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	681a      	ldr	r2, [r3, #0]
 801bc6c:	68bb      	ldr	r3, [r7, #8]
 801bc6e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	68ba      	ldr	r2, [r7, #8]
 801bc74:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d103      	bne.n	801bc86 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	2200      	movs	r2, #0
 801bc82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bc8c:	2bff      	cmp	r3, #255	@ 0xff
 801bc8e:	d007      	beq.n	801bca0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bc96:	3301      	adds	r3, #1
 801bc98:	b2da      	uxtb	r2, r3
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	2200      	movs	r2, #0
 801bca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 801bca6:	4b06      	ldr	r3, [pc, #24]	@ (801bcc0 <tcp_rexmit+0xb0>)
 801bca8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801bcac:	3301      	adds	r3, #1
 801bcae:	4a04      	ldr	r2, [pc, #16]	@ (801bcc0 <tcp_rexmit+0xb0>)
 801bcb0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
 801bcb4:	e000      	b.n	801bcb8 <tcp_rexmit+0xa8>
    return;
 801bcb6:	bf00      	nop
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801bcb8:	3714      	adds	r7, #20
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	bd90      	pop	{r4, r7, pc}
 801bcbe:	bf00      	nop
 801bcc0:	2000bbec 	.word	0x2000bbec

0801bcc4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b082      	sub	sp, #8
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d041      	beq.n	801bd58 <tcp_rexmit_fast+0x94>
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	7e9b      	ldrb	r3, [r3, #26]
 801bcd8:	f003 0304 	and.w	r3, r3, #4
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d13b      	bne.n	801bd58 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	f7ff ff95 	bl	801bc10 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801bcf2:	4293      	cmp	r3, r2
 801bcf4:	bf28      	it	cs
 801bcf6:	4613      	movcs	r3, r2
 801bcf8:	b29b      	uxth	r3, r3
 801bcfa:	0fda      	lsrs	r2, r3, #31
 801bcfc:	4413      	add	r3, r2
 801bcfe:	105b      	asrs	r3, r3, #1
 801bd00:	b29a      	uxth	r2, r3
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801bd0e:	461a      	mov	r2, r3
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd14:	005b      	lsls	r3, r3, #1
 801bd16:	429a      	cmp	r2, r3
 801bd18:	d206      	bcs.n	801bd28 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd1e:	005b      	lsls	r3, r3, #1
 801bd20:	b29a      	uxth	r2, r3
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bd32:	4619      	mov	r1, r3
 801bd34:	0049      	lsls	r1, r1, #1
 801bd36:	440b      	add	r3, r1
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	4413      	add	r3, r2
 801bd3c:	b29a      	uxth	r2, r3
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	7e9b      	ldrb	r3, [r3, #26]
 801bd48:	f043 0304 	orr.w	r3, r3, #4
 801bd4c:	b2da      	uxtb	r2, r3
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	2200      	movs	r2, #0
 801bd56:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 801bd58:	bf00      	nop
 801bd5a:	3708      	adds	r7, #8
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	bd80      	pop	{r7, pc}

0801bd60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b08a      	sub	sp, #40	@ 0x28
 801bd64:	af04      	add	r7, sp, #16
 801bd66:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bd6c:	3b01      	subs	r3, #1
 801bd6e:	4618      	mov	r0, r3
 801bd70:	f7f8 ffb5 	bl	8014cde <lwip_htonl>
 801bd74:	4603      	mov	r3, r0
 801bd76:	2200      	movs	r2, #0
 801bd78:	2100      	movs	r1, #0
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f7fe fcf0 	bl	801a760 <tcp_output_alloc_header>
 801bd80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bd82:	693b      	ldr	r3, [r7, #16]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d102      	bne.n	801bd8e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bd88:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8c:	e029      	b.n	801bde2 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	3304      	adds	r3, #4
 801bd92:	4618      	mov	r0, r3
 801bd94:	f003 ffaa 	bl	801fcec <ip4_route>
 801bd98:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d102      	bne.n	801bda6 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801bda0:	23fc      	movs	r3, #252	@ 0xfc
 801bda2:	75fb      	strb	r3, [r7, #23]
 801bda4:	e018      	b.n	801bdd8 <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 801bda6:	4b11      	ldr	r3, [pc, #68]	@ (801bdec <tcp_keepalive+0x8c>)
 801bda8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801bdac:	3301      	adds	r3, #1
 801bdae:	b29a      	uxth	r2, r3
 801bdb0:	4b0e      	ldr	r3, [pc, #56]	@ (801bdec <tcp_keepalive+0x8c>)
 801bdb2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801bdb6:	6879      	ldr	r1, [r7, #4]
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	1d1a      	adds	r2, r3, #4
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	7a98      	ldrb	r0, [r3, #10]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	9302      	str	r3, [sp, #8]
 801bdc4:	2306      	movs	r3, #6
 801bdc6:	9301      	str	r3, [sp, #4]
 801bdc8:	2300      	movs	r3, #0
 801bdca:	9300      	str	r3, [sp, #0]
 801bdcc:	4603      	mov	r3, r0
 801bdce:	6938      	ldr	r0, [r7, #16]
 801bdd0:	f004 f9fe 	bl	80201d0 <ip4_output_if>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801bdd8:	6938      	ldr	r0, [r7, #16]
 801bdda:	f7fa fa19 	bl	8016210 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bdde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bde2:	4618      	mov	r0, r3
 801bde4:	3718      	adds	r7, #24
 801bde6:	46bd      	mov	sp, r7
 801bde8:	bd80      	pop	{r7, pc}
 801bdea:	bf00      	nop
 801bdec:	2000bbec 	.word	0x2000bbec

0801bdf0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bdf0:	b590      	push	{r4, r7, lr}
 801bdf2:	b08f      	sub	sp, #60	@ 0x3c
 801bdf4:	af04      	add	r7, sp, #16
 801bdf6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bdfc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801bdfe:	6a3b      	ldr	r3, [r7, #32]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d102      	bne.n	801be0a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801be08:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801be0a:	6a3b      	ldr	r3, [r7, #32]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d101      	bne.n	801be14 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801be10:	2300      	movs	r3, #0
 801be12:	e08d      	b.n	801bf30 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801be14:	6a3b      	ldr	r3, [r7, #32]
 801be16:	68db      	ldr	r3, [r3, #12]
 801be18:	899b      	ldrh	r3, [r3, #12]
 801be1a:	b29b      	uxth	r3, r3
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7f8 ff51 	bl	8014cc4 <lwip_htons>
 801be22:	4603      	mov	r3, r0
 801be24:	f003 0301 	and.w	r3, r3, #1
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d005      	beq.n	801be38 <tcp_zero_window_probe+0x48>
 801be2c:	6a3b      	ldr	r3, [r7, #32]
 801be2e:	891b      	ldrh	r3, [r3, #8]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d101      	bne.n	801be38 <tcp_zero_window_probe+0x48>
 801be34:	2301      	movs	r3, #1
 801be36:	e000      	b.n	801be3a <tcp_zero_window_probe+0x4a>
 801be38:	2300      	movs	r3, #0
 801be3a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801be3c:	7ffb      	ldrb	r3, [r7, #31]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	bf0c      	ite	eq
 801be42:	2301      	moveq	r3, #1
 801be44:	2300      	movne	r3, #0
 801be46:	b2db      	uxtb	r3, r3
 801be48:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801be4a:	6a3b      	ldr	r3, [r7, #32]
 801be4c:	68db      	ldr	r3, [r3, #12]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	8bba      	ldrh	r2, [r7, #28]
 801be52:	2100      	movs	r1, #0
 801be54:	6878      	ldr	r0, [r7, #4]
 801be56:	f7fe fc83 	bl	801a760 <tcp_output_alloc_header>
 801be5a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801be5c:	69bb      	ldr	r3, [r7, #24]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d102      	bne.n	801be68 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801be62:	f04f 33ff 	mov.w	r3, #4294967295
 801be66:	e063      	b.n	801bf30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801be68:	69bb      	ldr	r3, [r7, #24]
 801be6a:	685b      	ldr	r3, [r3, #4]
 801be6c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801be6e:	7ffb      	ldrb	r3, [r7, #31]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d00e      	beq.n	801be92 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	899b      	ldrh	r3, [r3, #12]
 801be78:	b29b      	uxth	r3, r3
 801be7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801be7e:	b29c      	uxth	r4, r3
 801be80:	2011      	movs	r0, #17
 801be82:	f7f8 ff1f 	bl	8014cc4 <lwip_htons>
 801be86:	4603      	mov	r3, r0
 801be88:	4323      	orrs	r3, r4
 801be8a:	b29a      	uxth	r2, r3
 801be8c:	697b      	ldr	r3, [r7, #20]
 801be8e:	819a      	strh	r2, [r3, #12]
 801be90:	e010      	b.n	801beb4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801be92:	69bb      	ldr	r3, [r7, #24]
 801be94:	685b      	ldr	r3, [r3, #4]
 801be96:	3314      	adds	r3, #20
 801be98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801be9a:	6a3b      	ldr	r3, [r7, #32]
 801be9c:	6858      	ldr	r0, [r3, #4]
 801be9e:	6a3b      	ldr	r3, [r7, #32]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	891a      	ldrh	r2, [r3, #8]
 801bea4:	6a3b      	ldr	r3, [r7, #32]
 801bea6:	891b      	ldrh	r3, [r3, #8]
 801bea8:	1ad3      	subs	r3, r2, r3
 801beaa:	b29b      	uxth	r3, r3
 801beac:	2201      	movs	r2, #1
 801beae:	6939      	ldr	r1, [r7, #16]
 801beb0:	f7fa fbac 	bl	801660c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801beb4:	6a3b      	ldr	r3, [r7, #32]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	685b      	ldr	r3, [r3, #4]
 801beba:	4618      	mov	r0, r3
 801bebc:	f7f8 ff0f 	bl	8014cde <lwip_htonl>
 801bec0:	4603      	mov	r3, r0
 801bec2:	3301      	adds	r3, #1
 801bec4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	1ad3      	subs	r3, r2, r3
 801bece:	2b00      	cmp	r3, #0
 801bed0:	da02      	bge.n	801bed8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	68fa      	ldr	r2, [r7, #12]
 801bed6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	3304      	adds	r3, #4
 801bedc:	4618      	mov	r0, r3
 801bede:	f003 ff05 	bl	801fcec <ip4_route>
 801bee2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d103      	bne.n	801bef2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801beea:	23fc      	movs	r3, #252	@ 0xfc
 801beec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801bef0:	e019      	b.n	801bf26 <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 801bef2:	4b11      	ldr	r3, [pc, #68]	@ (801bf38 <tcp_zero_window_probe+0x148>)
 801bef4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801bef8:	3301      	adds	r3, #1
 801befa:	b29a      	uxth	r2, r3
 801befc:	4b0e      	ldr	r3, [pc, #56]	@ (801bf38 <tcp_zero_window_probe+0x148>)
 801befe:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bf02:	6879      	ldr	r1, [r7, #4]
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	1d1a      	adds	r2, r3, #4
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	7a98      	ldrb	r0, [r3, #10]
 801bf0c:	68bb      	ldr	r3, [r7, #8]
 801bf0e:	9302      	str	r3, [sp, #8]
 801bf10:	2306      	movs	r3, #6
 801bf12:	9301      	str	r3, [sp, #4]
 801bf14:	2300      	movs	r3, #0
 801bf16:	9300      	str	r3, [sp, #0]
 801bf18:	4603      	mov	r3, r0
 801bf1a:	69b8      	ldr	r0, [r7, #24]
 801bf1c:	f004 f958 	bl	80201d0 <ip4_output_if>
 801bf20:	4603      	mov	r3, r0
 801bf22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801bf26:	69b8      	ldr	r0, [r7, #24]
 801bf28:	f7fa f972 	bl	8016210 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bf2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801bf30:	4618      	mov	r0, r3
 801bf32:	372c      	adds	r7, #44	@ 0x2c
 801bf34:	46bd      	mov	sp, r7
 801bf36:	bd90      	pop	{r4, r7, pc}
 801bf38:	2000bbec 	.word	0x2000bbec

0801bf3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b082      	sub	sp, #8
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bf44:	f7fa fd08 	bl	8016958 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bf48:	4b0a      	ldr	r3, [pc, #40]	@ (801bf74 <tcpip_tcp_timer+0x38>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d103      	bne.n	801bf58 <tcpip_tcp_timer+0x1c>
 801bf50:	4b09      	ldr	r3, [pc, #36]	@ (801bf78 <tcpip_tcp_timer+0x3c>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d005      	beq.n	801bf64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bf58:	2200      	movs	r2, #0
 801bf5a:	4908      	ldr	r1, [pc, #32]	@ (801bf7c <tcpip_tcp_timer+0x40>)
 801bf5c:	20fa      	movs	r0, #250	@ 0xfa
 801bf5e:	f000 f86f 	bl	801c040 <sys_timeout>
 801bf62:	e003      	b.n	801bf6c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bf64:	4b06      	ldr	r3, [pc, #24]	@ (801bf80 <tcpip_tcp_timer+0x44>)
 801bf66:	2200      	movs	r2, #0
 801bf68:	601a      	str	r2, [r3, #0]
  }
}
 801bf6a:	bf00      	nop
 801bf6c:	bf00      	nop
 801bf6e:	3708      	adds	r7, #8
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}
 801bf74:	2000bd90 	.word	0x2000bd90
 801bf78:	2000bd94 	.word	0x2000bd94
 801bf7c:	0801bf3d 	.word	0x0801bf3d
 801bf80:	2000bddc 	.word	0x2000bddc

0801bf84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bf88:	4b0a      	ldr	r3, [pc, #40]	@ (801bfb4 <tcp_timer_needed+0x30>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d10f      	bne.n	801bfb0 <tcp_timer_needed+0x2c>
 801bf90:	4b09      	ldr	r3, [pc, #36]	@ (801bfb8 <tcp_timer_needed+0x34>)
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d103      	bne.n	801bfa0 <tcp_timer_needed+0x1c>
 801bf98:	4b08      	ldr	r3, [pc, #32]	@ (801bfbc <tcp_timer_needed+0x38>)
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d007      	beq.n	801bfb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bfa0:	4b04      	ldr	r3, [pc, #16]	@ (801bfb4 <tcp_timer_needed+0x30>)
 801bfa2:	2201      	movs	r2, #1
 801bfa4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	4905      	ldr	r1, [pc, #20]	@ (801bfc0 <tcp_timer_needed+0x3c>)
 801bfaa:	20fa      	movs	r0, #250	@ 0xfa
 801bfac:	f000 f848 	bl	801c040 <sys_timeout>
  }
}
 801bfb0:	bf00      	nop
 801bfb2:	bd80      	pop	{r7, pc}
 801bfb4:	2000bddc 	.word	0x2000bddc
 801bfb8:	2000bd90 	.word	0x2000bd90
 801bfbc:	2000bd94 	.word	0x2000bd94
 801bfc0:	0801bf3d 	.word	0x0801bf3d

0801bfc4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801bfc4:	b580      	push	{r7, lr}
 801bfc6:	b084      	sub	sp, #16
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	685b      	ldr	r3, [r3, #4]
 801bfd4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	687a      	ldr	r2, [r7, #4]
 801bfdc:	4903      	ldr	r1, [pc, #12]	@ (801bfec <cyclic_timer+0x28>)
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f000 f82e 	bl	801c040 <sys_timeout>
}
 801bfe4:	bf00      	nop
 801bfe6:	3710      	adds	r7, #16
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	0801bfc5 	.word	0x0801bfc5

0801bff0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b082      	sub	sp, #8
 801bff4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bff6:	2301      	movs	r3, #1
 801bff8:	607b      	str	r3, [r7, #4]
 801bffa:	e00e      	b.n	801c01a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801bffc:	4a0d      	ldr	r2, [pc, #52]	@ (801c034 <sys_timeouts_init+0x44>)
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	00db      	lsls	r3, r3, #3
 801c008:	4a0a      	ldr	r2, [pc, #40]	@ (801c034 <sys_timeouts_init+0x44>)
 801c00a:	4413      	add	r3, r2
 801c00c:	461a      	mov	r2, r3
 801c00e:	490a      	ldr	r1, [pc, #40]	@ (801c038 <sys_timeouts_init+0x48>)
 801c010:	f000 f816 	bl	801c040 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	3301      	adds	r3, #1
 801c018:	607b      	str	r3, [r7, #4]
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	2b04      	cmp	r3, #4
 801c01e:	d9ed      	bls.n	801bffc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801c020:	f7ef ff80 	bl	800bf24 <sys_now>
 801c024:	4603      	mov	r3, r0
 801c026:	4a05      	ldr	r2, [pc, #20]	@ (801c03c <sys_timeouts_init+0x4c>)
 801c028:	6013      	str	r3, [r2, #0]
}
 801c02a:	bf00      	nop
 801c02c:	3708      	adds	r7, #8
 801c02e:	46bd      	mov	sp, r7
 801c030:	bd80      	pop	{r7, pc}
 801c032:	bf00      	nop
 801c034:	08032ea8 	.word	0x08032ea8
 801c038:	0801bfc5 	.word	0x0801bfc5
 801c03c:	2000bdd8 	.word	0x2000bdd8

0801c040 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b088      	sub	sp, #32
 801c044:	af00      	add	r7, sp, #0
 801c046:	60f8      	str	r0, [r7, #12]
 801c048:	60b9      	str	r1, [r7, #8]
 801c04a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c04c:	2006      	movs	r0, #6
 801c04e:	f7f9 fae3 	bl	8015618 <memp_malloc>
 801c052:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801c054:	697b      	ldr	r3, [r7, #20]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d10a      	bne.n	801c070 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f040 8084 	bne.w	801c16a <sys_timeout+0x12a>
 801c062:	4b44      	ldr	r3, [pc, #272]	@ (801c174 <sys_timeout+0x134>)
 801c064:	22d4      	movs	r2, #212	@ 0xd4
 801c066:	4944      	ldr	r1, [pc, #272]	@ (801c178 <sys_timeout+0x138>)
 801c068:	4844      	ldr	r0, [pc, #272]	@ (801c17c <sys_timeout+0x13c>)
 801c06a:	f006 f8ef 	bl	802224c <iprintf>
    return;
 801c06e:	e07c      	b.n	801c16a <sys_timeout+0x12a>
  }

  now = sys_now();
 801c070:	f7ef ff58 	bl	800bf24 <sys_now>
 801c074:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801c076:	4b42      	ldr	r3, [pc, #264]	@ (801c180 <sys_timeout+0x140>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d105      	bne.n	801c08a <sys_timeout+0x4a>
    diff = 0;
 801c07e:	2300      	movs	r3, #0
 801c080:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801c082:	4a40      	ldr	r2, [pc, #256]	@ (801c184 <sys_timeout+0x144>)
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	6013      	str	r3, [r2, #0]
 801c088:	e004      	b.n	801c094 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801c08a:	4b3e      	ldr	r3, [pc, #248]	@ (801c184 <sys_timeout+0x144>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	693a      	ldr	r2, [r7, #16]
 801c090:	1ad3      	subs	r3, r2, r3
 801c092:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801c094:	697b      	ldr	r3, [r7, #20]
 801c096:	2200      	movs	r2, #0
 801c098:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	68ba      	ldr	r2, [r7, #8]
 801c09e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	687a      	ldr	r2, [r7, #4]
 801c0a4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801c0a6:	68fa      	ldr	r2, [r7, #12]
 801c0a8:	69bb      	ldr	r3, [r7, #24]
 801c0aa:	441a      	add	r2, r3
 801c0ac:	697b      	ldr	r3, [r7, #20]
 801c0ae:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c0b0:	4b33      	ldr	r3, [pc, #204]	@ (801c180 <sys_timeout+0x140>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d103      	bne.n	801c0c0 <sys_timeout+0x80>
    next_timeout = timeout;
 801c0b8:	4a31      	ldr	r2, [pc, #196]	@ (801c180 <sys_timeout+0x140>)
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	6013      	str	r3, [r2, #0]
    return;
 801c0be:	e055      	b.n	801c16c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801c0c0:	4b2f      	ldr	r3, [pc, #188]	@ (801c180 <sys_timeout+0x140>)
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	685b      	ldr	r3, [r3, #4]
 801c0c6:	68fa      	ldr	r2, [r7, #12]
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	d20f      	bcs.n	801c0ec <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801c0cc:	4b2c      	ldr	r3, [pc, #176]	@ (801c180 <sys_timeout+0x140>)
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	6859      	ldr	r1, [r3, #4]
 801c0d2:	4b2b      	ldr	r3, [pc, #172]	@ (801c180 <sys_timeout+0x140>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	68fa      	ldr	r2, [r7, #12]
 801c0d8:	1a8a      	subs	r2, r1, r2
 801c0da:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801c0dc:	4b28      	ldr	r3, [pc, #160]	@ (801c180 <sys_timeout+0x140>)
 801c0de:	681a      	ldr	r2, [r3, #0]
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c0e4:	4a26      	ldr	r2, [pc, #152]	@ (801c180 <sys_timeout+0x140>)
 801c0e6:	697b      	ldr	r3, [r7, #20]
 801c0e8:	6013      	str	r3, [r2, #0]
 801c0ea:	e03f      	b.n	801c16c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c0ec:	4b24      	ldr	r3, [pc, #144]	@ (801c180 <sys_timeout+0x140>)
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	61fb      	str	r3, [r7, #28]
 801c0f2:	e036      	b.n	801c162 <sys_timeout+0x122>
      timeout->time -= t->time;
 801c0f4:	697b      	ldr	r3, [r7, #20]
 801c0f6:	685a      	ldr	r2, [r3, #4]
 801c0f8:	69fb      	ldr	r3, [r7, #28]
 801c0fa:	685b      	ldr	r3, [r3, #4]
 801c0fc:	1ad2      	subs	r2, r2, r3
 801c0fe:	697b      	ldr	r3, [r7, #20]
 801c100:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c102:	69fb      	ldr	r3, [r7, #28]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d006      	beq.n	801c118 <sys_timeout+0xd8>
 801c10a:	69fb      	ldr	r3, [r7, #28]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	685a      	ldr	r2, [r3, #4]
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	685b      	ldr	r3, [r3, #4]
 801c114:	429a      	cmp	r2, r3
 801c116:	d921      	bls.n	801c15c <sys_timeout+0x11c>
        if (t->next != NULL) {
 801c118:	69fb      	ldr	r3, [r7, #28]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d009      	beq.n	801c134 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801c120:	69fb      	ldr	r3, [r7, #28]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	6859      	ldr	r1, [r3, #4]
 801c126:	697b      	ldr	r3, [r7, #20]
 801c128:	685a      	ldr	r2, [r3, #4]
 801c12a:	69fb      	ldr	r3, [r7, #28]
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	1a8a      	subs	r2, r1, r2
 801c130:	605a      	str	r2, [r3, #4]
 801c132:	e00b      	b.n	801c14c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801c134:	697b      	ldr	r3, [r7, #20]
 801c136:	685b      	ldr	r3, [r3, #4]
 801c138:	68fa      	ldr	r2, [r7, #12]
 801c13a:	429a      	cmp	r2, r3
 801c13c:	d206      	bcs.n	801c14c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801c13e:	4b10      	ldr	r3, [pc, #64]	@ (801c180 <sys_timeout+0x140>)
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	685a      	ldr	r2, [r3, #4]
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	441a      	add	r2, r3
 801c148:	697b      	ldr	r3, [r7, #20]
 801c14a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801c14c:	69fb      	ldr	r3, [r7, #28]
 801c14e:	681a      	ldr	r2, [r3, #0]
 801c150:	697b      	ldr	r3, [r7, #20]
 801c152:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c154:	69fb      	ldr	r3, [r7, #28]
 801c156:	697a      	ldr	r2, [r7, #20]
 801c158:	601a      	str	r2, [r3, #0]
        break;
 801c15a:	e007      	b.n	801c16c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c15c:	69fb      	ldr	r3, [r7, #28]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	61fb      	str	r3, [r7, #28]
 801c162:	69fb      	ldr	r3, [r7, #28]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d1c5      	bne.n	801c0f4 <sys_timeout+0xb4>
 801c168:	e000      	b.n	801c16c <sys_timeout+0x12c>
    return;
 801c16a:	bf00      	nop
      }
    }
  }
}
 801c16c:	3720      	adds	r7, #32
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
 801c172:	bf00      	nop
 801c174:	08027264 	.word	0x08027264
 801c178:	08027298 	.word	0x08027298
 801c17c:	080272d8 	.word	0x080272d8
 801c180:	2000bdd4 	.word	0x2000bdd4
 801c184:	2000bdd8 	.word	0x2000bdd8

0801c188 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b086      	sub	sp, #24
 801c18c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801c18e:	4b24      	ldr	r3, [pc, #144]	@ (801c220 <sys_check_timeouts+0x98>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d040      	beq.n	801c218 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801c196:	f7ef fec5 	bl	800bf24 <sys_now>
 801c19a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801c19c:	4b21      	ldr	r3, [pc, #132]	@ (801c224 <sys_check_timeouts+0x9c>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	68fa      	ldr	r2, [r7, #12]
 801c1a2:	1ad3      	subs	r3, r2, r3
 801c1a4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 801c1a6:	4b20      	ldr	r3, [pc, #128]	@ (801c228 <sys_check_timeouts+0xa0>)
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	b2db      	uxtb	r3, r3
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d001      	beq.n	801c1b4 <sys_check_timeouts+0x2c>
 801c1b0:	f7f9 fc86 	bl	8015ac0 <pbuf_free_ooseq>
      had_one = 0;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801c1b8:	4b19      	ldr	r3, [pc, #100]	@ (801c220 <sys_check_timeouts+0x98>)
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d026      	beq.n	801c212 <sys_check_timeouts+0x8a>
 801c1c4:	68bb      	ldr	r3, [r7, #8]
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	697a      	ldr	r2, [r7, #20]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d321      	bcc.n	801c212 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 801c1ce:	2301      	movs	r3, #1
 801c1d0:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801c1d2:	68bb      	ldr	r3, [r7, #8]
 801c1d4:	685a      	ldr	r2, [r3, #4]
 801c1d6:	4b13      	ldr	r3, [pc, #76]	@ (801c224 <sys_check_timeouts+0x9c>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	4413      	add	r3, r2
 801c1dc:	4a11      	ldr	r2, [pc, #68]	@ (801c224 <sys_check_timeouts+0x9c>)
 801c1de:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	685b      	ldr	r3, [r3, #4]
 801c1e4:	697a      	ldr	r2, [r7, #20]
 801c1e6:	1ad3      	subs	r3, r2, r3
 801c1e8:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801c1ea:	68bb      	ldr	r3, [r7, #8]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	4a0c      	ldr	r2, [pc, #48]	@ (801c220 <sys_check_timeouts+0x98>)
 801c1f0:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801c1f2:	68bb      	ldr	r3, [r7, #8]
 801c1f4:	689b      	ldr	r3, [r3, #8]
 801c1f6:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	68db      	ldr	r3, [r3, #12]
 801c1fc:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c1fe:	68b9      	ldr	r1, [r7, #8]
 801c200:	2006      	movs	r0, #6
 801c202:	f7f9 fa5b 	bl	80156bc <memp_free>
        if (handler != NULL) {
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d002      	beq.n	801c212 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	6838      	ldr	r0, [r7, #0]
 801c210:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801c212:	7cfb      	ldrb	r3, [r7, #19]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d1c6      	bne.n	801c1a6 <sys_check_timeouts+0x1e>
  }
}
 801c218:	bf00      	nop
 801c21a:	3718      	adds	r7, #24
 801c21c:	46bd      	mov	sp, r7
 801c21e:	bd80      	pop	{r7, pc}
 801c220:	2000bdd4 	.word	0x2000bdd4
 801c224:	2000bdd8 	.word	0x2000bdd8
 801c228:	2000bbe9 	.word	0x2000bbe9

0801c22c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c22c:	b480      	push	{r7}
 801c22e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801c230:	bf00      	nop
 801c232:	46bd      	mov	sp, r7
 801c234:	bc80      	pop	{r7}
 801c236:	4770      	bx	lr

0801c238 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c238:	b480      	push	{r7}
 801c23a:	b083      	sub	sp, #12
 801c23c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c23e:	2300      	movs	r3, #0
 801c240:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c242:	4b17      	ldr	r3, [pc, #92]	@ (801c2a0 <udp_new_port+0x68>)
 801c244:	881b      	ldrh	r3, [r3, #0]
 801c246:	1c5a      	adds	r2, r3, #1
 801c248:	b291      	uxth	r1, r2
 801c24a:	4a15      	ldr	r2, [pc, #84]	@ (801c2a0 <udp_new_port+0x68>)
 801c24c:	8011      	strh	r1, [r2, #0]
 801c24e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c252:	4293      	cmp	r3, r2
 801c254:	d103      	bne.n	801c25e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c256:	4b12      	ldr	r3, [pc, #72]	@ (801c2a0 <udp_new_port+0x68>)
 801c258:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c25c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c25e:	4b11      	ldr	r3, [pc, #68]	@ (801c2a4 <udp_new_port+0x6c>)
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	603b      	str	r3, [r7, #0]
 801c264:	e011      	b.n	801c28a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c266:	683b      	ldr	r3, [r7, #0]
 801c268:	8a5a      	ldrh	r2, [r3, #18]
 801c26a:	4b0d      	ldr	r3, [pc, #52]	@ (801c2a0 <udp_new_port+0x68>)
 801c26c:	881b      	ldrh	r3, [r3, #0]
 801c26e:	429a      	cmp	r2, r3
 801c270:	d108      	bne.n	801c284 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c272:	88fb      	ldrh	r3, [r7, #6]
 801c274:	3301      	adds	r3, #1
 801c276:	80fb      	strh	r3, [r7, #6]
 801c278:	88fb      	ldrh	r3, [r7, #6]
 801c27a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c27e:	d3e0      	bcc.n	801c242 <udp_new_port+0xa>
        return 0;
 801c280:	2300      	movs	r3, #0
 801c282:	e007      	b.n	801c294 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c284:	683b      	ldr	r3, [r7, #0]
 801c286:	68db      	ldr	r3, [r3, #12]
 801c288:	603b      	str	r3, [r7, #0]
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d1ea      	bne.n	801c266 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c290:	4b03      	ldr	r3, [pc, #12]	@ (801c2a0 <udp_new_port+0x68>)
 801c292:	881b      	ldrh	r3, [r3, #0]
}
 801c294:	4618      	mov	r0, r3
 801c296:	370c      	adds	r7, #12
 801c298:	46bd      	mov	sp, r7
 801c29a:	bc80      	pop	{r7}
 801c29c:	4770      	bx	lr
 801c29e:	bf00      	nop
 801c2a0:	20000120 	.word	0x20000120
 801c2a4:	2000bde0 	.word	0x2000bde0

0801c2a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c2a8:	b480      	push	{r7}
 801c2aa:	b085      	sub	sp, #20
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	60f8      	str	r0, [r7, #12]
 801c2b0:	60b9      	str	r1, [r7, #8]
 801c2b2:	4613      	mov	r3, r2
 801c2b4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c2b6:	79fb      	ldrb	r3, [r7, #7]
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d018      	beq.n	801c2ee <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d013      	beq.n	801c2ea <udp_input_local_match+0x42>
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d00f      	beq.n	801c2ea <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2ca:	4b13      	ldr	r3, [pc, #76]	@ (801c318 <udp_input_local_match+0x70>)
 801c2cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2d2:	d00a      	beq.n	801c2ea <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681a      	ldr	r2, [r3, #0]
 801c2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801c318 <udp_input_local_match+0x70>)
 801c2da:	695b      	ldr	r3, [r3, #20]
 801c2dc:	405a      	eors	r2, r3
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	3308      	adds	r3, #8
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d110      	bne.n	801c30c <udp_input_local_match+0x64>
          return 1;
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	e00f      	b.n	801c30e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d009      	beq.n	801c308 <udp_input_local_match+0x60>
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d005      	beq.n	801c308 <udp_input_local_match+0x60>
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	681a      	ldr	r2, [r3, #0]
 801c300:	4b05      	ldr	r3, [pc, #20]	@ (801c318 <udp_input_local_match+0x70>)
 801c302:	695b      	ldr	r3, [r3, #20]
 801c304:	429a      	cmp	r2, r3
 801c306:	d101      	bne.n	801c30c <udp_input_local_match+0x64>
      return 1;
 801c308:	2301      	movs	r3, #1
 801c30a:	e000      	b.n	801c30e <udp_input_local_match+0x66>
    }
  }

  return 0;
 801c30c:	2300      	movs	r3, #0
}
 801c30e:	4618      	mov	r0, r3
 801c310:	3714      	adds	r7, #20
 801c312:	46bd      	mov	sp, r7
 801c314:	bc80      	pop	{r7}
 801c316:	4770      	bx	lr
 801c318:	20008604 	.word	0x20008604

0801c31c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c31c:	b590      	push	{r4, r7, lr}
 801c31e:	b08d      	sub	sp, #52	@ 0x34
 801c320:	af02      	add	r7, sp, #8
 801c322:	6078      	str	r0, [r7, #4]
 801c324:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c326:	2300      	movs	r3, #0
 801c328:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801c32a:	4b93      	ldr	r3, [pc, #588]	@ (801c578 <udp_input+0x25c>)
 801c32c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801c330:	3301      	adds	r3, #1
 801c332:	b29a      	uxth	r2, r3
 801c334:	4b90      	ldr	r3, [pc, #576]	@ (801c578 <udp_input+0x25c>)
 801c336:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	895b      	ldrh	r3, [r3, #10]
 801c33e:	2b07      	cmp	r3, #7
 801c340:	d81a      	bhi.n	801c378 <udp_input+0x5c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801c342:	4b8d      	ldr	r3, [pc, #564]	@ (801c578 <udp_input+0x25c>)
 801c344:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801c348:	3301      	adds	r3, #1
 801c34a:	b29a      	uxth	r2, r3
 801c34c:	4b8a      	ldr	r3, [pc, #552]	@ (801c578 <udp_input+0x25c>)
 801c34e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801c352:	4b89      	ldr	r3, [pc, #548]	@ (801c578 <udp_input+0x25c>)
 801c354:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c358:	3301      	adds	r3, #1
 801c35a:	b29a      	uxth	r2, r3
 801c35c:	4b86      	ldr	r3, [pc, #536]	@ (801c578 <udp_input+0x25c>)
 801c35e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 801c362:	4b85      	ldr	r3, [pc, #532]	@ (801c578 <udp_input+0x25c>)
 801c364:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801c368:	3301      	adds	r3, #1
 801c36a:	4a83      	ldr	r2, [pc, #524]	@ (801c578 <udp_input+0x25c>)
 801c36c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
    pbuf_free(p);
 801c370:	6878      	ldr	r0, [r7, #4]
 801c372:	f7f9 ff4d 	bl	8016210 <pbuf_free>
    goto end;
 801c376:	e0fa      	b.n	801c56e <udp_input+0x252>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	685b      	ldr	r3, [r3, #4]
 801c37c:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c37e:	4b7f      	ldr	r3, [pc, #508]	@ (801c57c <udp_input+0x260>)
 801c380:	695b      	ldr	r3, [r3, #20]
 801c382:	4a7e      	ldr	r2, [pc, #504]	@ (801c57c <udp_input+0x260>)
 801c384:	6812      	ldr	r2, [r2, #0]
 801c386:	4611      	mov	r1, r2
 801c388:	4618      	mov	r0, r3
 801c38a:	f004 f813 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801c38e:	4603      	mov	r3, r0
 801c390:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c392:	697b      	ldr	r3, [r7, #20]
 801c394:	881b      	ldrh	r3, [r3, #0]
 801c396:	b29b      	uxth	r3, r3
 801c398:	4618      	mov	r0, r3
 801c39a:	f7f8 fc93 	bl	8014cc4 <lwip_htons>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c3a2:	697b      	ldr	r3, [r7, #20]
 801c3a4:	885b      	ldrh	r3, [r3, #2]
 801c3a6:	b29b      	uxth	r3, r3
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	f7f8 fc8b 	bl	8014cc4 <lwip_htons>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3be:	4b70      	ldr	r3, [pc, #448]	@ (801c580 <udp_input+0x264>)
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3c4:	e044      	b.n	801c450 <udp_input+0x134>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3c8:	8a5b      	ldrh	r3, [r3, #18]
 801c3ca:	89fa      	ldrh	r2, [r7, #14]
 801c3cc:	429a      	cmp	r2, r3
 801c3ce:	d13a      	bne.n	801c446 <udp_input+0x12a>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c3d0:	7cfb      	ldrb	r3, [r7, #19]
 801c3d2:	461a      	mov	r2, r3
 801c3d4:	6839      	ldr	r1, [r7, #0]
 801c3d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c3d8:	f7ff ff66 	bl	801c2a8 <udp_input_local_match>
 801c3dc:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d031      	beq.n	801c446 <udp_input+0x12a>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3e4:	7c1b      	ldrb	r3, [r3, #16]
 801c3e6:	f003 0304 	and.w	r3, r3, #4
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d104      	bne.n	801c3f8 <udp_input+0xdc>
 801c3ee:	69fb      	ldr	r3, [r7, #28]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d101      	bne.n	801c3f8 <udp_input+0xdc>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f6:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3fa:	8a9b      	ldrh	r3, [r3, #20]
 801c3fc:	8a3a      	ldrh	r2, [r7, #16]
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d121      	bne.n	801c446 <udp_input+0x12a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c404:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c406:	2b00      	cmp	r3, #0
 801c408:	d005      	beq.n	801c416 <udp_input+0xfa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40c:	685a      	ldr	r2, [r3, #4]
 801c40e:	4b5b      	ldr	r3, [pc, #364]	@ (801c57c <udp_input+0x260>)
 801c410:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c412:	429a      	cmp	r2, r3
 801c414:	d117      	bne.n	801c446 <udp_input+0x12a>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c416:	6a3b      	ldr	r3, [r7, #32]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d00b      	beq.n	801c434 <udp_input+0x118>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c41e:	68da      	ldr	r2, [r3, #12]
 801c420:	6a3b      	ldr	r3, [r7, #32]
 801c422:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c424:	4b56      	ldr	r3, [pc, #344]	@ (801c580 <udp_input+0x264>)
 801c426:	681a      	ldr	r2, [r3, #0]
 801c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c42a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c42c:	4a54      	ldr	r2, [pc, #336]	@ (801c580 <udp_input+0x264>)
 801c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c430:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c432:	e010      	b.n	801c456 <udp_input+0x13a>
          UDP_STATS_INC(udp.cachehit);
 801c434:	4b50      	ldr	r3, [pc, #320]	@ (801c578 <udp_input+0x25c>)
 801c436:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801c43a:	3301      	adds	r3, #1
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	4b4e      	ldr	r3, [pc, #312]	@ (801c578 <udp_input+0x25c>)
 801c440:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801c444:	e007      	b.n	801c456 <udp_input+0x13a>
      }
    }

    prev = pcb;
 801c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c448:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c44c:	68db      	ldr	r3, [r3, #12]
 801c44e:	627b      	str	r3, [r7, #36]	@ 0x24
 801c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c452:	2b00      	cmp	r3, #0
 801c454:	d1b7      	bne.n	801c3c6 <udp_input+0xaa>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d101      	bne.n	801c460 <udp_input+0x144>
    pcb = uncon_pcb;
 801c45c:	69fb      	ldr	r3, [r7, #28]
 801c45e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c462:	2b00      	cmp	r3, #0
 801c464:	d002      	beq.n	801c46c <udp_input+0x150>
    for_us = 1;
 801c466:	2301      	movs	r3, #1
 801c468:	76fb      	strb	r3, [r7, #27]
 801c46a:	e00a      	b.n	801c482 <udp_input+0x166>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	3304      	adds	r3, #4
 801c470:	681a      	ldr	r2, [r3, #0]
 801c472:	4b42      	ldr	r3, [pc, #264]	@ (801c57c <udp_input+0x260>)
 801c474:	695b      	ldr	r3, [r3, #20]
 801c476:	429a      	cmp	r2, r3
 801c478:	bf0c      	ite	eq
 801c47a:	2301      	moveq	r3, #1
 801c47c:	2300      	movne	r3, #0
 801c47e:	b2db      	uxtb	r3, r3
 801c480:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c482:	7efb      	ldrb	r3, [r7, #27]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d06f      	beq.n	801c568 <udp_input+0x24c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801c488:	f06f 0107 	mvn.w	r1, #7
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f7f9 fe9b 	bl	80161c8 <pbuf_header>
 801c492:	4603      	mov	r3, r0
 801c494:	2b00      	cmp	r3, #0
 801c496:	d019      	beq.n	801c4cc <udp_input+0x1b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801c498:	4b3a      	ldr	r3, [pc, #232]	@ (801c584 <udp_input+0x268>)
 801c49a:	f240 1255 	movw	r2, #341	@ 0x155
 801c49e:	493a      	ldr	r1, [pc, #232]	@ (801c588 <udp_input+0x26c>)
 801c4a0:	483a      	ldr	r0, [pc, #232]	@ (801c58c <udp_input+0x270>)
 801c4a2:	f005 fed3 	bl	802224c <iprintf>
      UDP_STATS_INC(udp.drop);
 801c4a6:	4b34      	ldr	r3, [pc, #208]	@ (801c578 <udp_input+0x25c>)
 801c4a8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c4ac:	3301      	adds	r3, #1
 801c4ae:	b29a      	uxth	r2, r3
 801c4b0:	4b31      	ldr	r3, [pc, #196]	@ (801c578 <udp_input+0x25c>)
 801c4b2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801c4b6:	4b30      	ldr	r3, [pc, #192]	@ (801c578 <udp_input+0x25c>)
 801c4b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801c4bc:	3301      	adds	r3, #1
 801c4be:	4a2e      	ldr	r2, [pc, #184]	@ (801c578 <udp_input+0x25c>)
 801c4c0:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
      pbuf_free(p);
 801c4c4:	6878      	ldr	r0, [r7, #4]
 801c4c6:	f7f9 fea3 	bl	8016210 <pbuf_free>
      goto end;
 801c4ca:	e050      	b.n	801c56e <udp_input+0x252>
    }

    if (pcb != NULL) {
 801c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d019      	beq.n	801c506 <udp_input+0x1ea>
      MIB2_STATS_INC(mib2.udpindatagrams);
 801c4d2:	4b29      	ldr	r3, [pc, #164]	@ (801c578 <udp_input+0x25c>)
 801c4d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801c4d8:	3301      	adds	r3, #1
 801c4da:	4a27      	ldr	r2, [pc, #156]	@ (801c578 <udp_input+0x25c>)
 801c4dc:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e2:	699b      	ldr	r3, [r3, #24]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d00a      	beq.n	801c4fe <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ea:	699c      	ldr	r4, [r3, #24]
 801c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ee:	69d8      	ldr	r0, [r3, #28]
 801c4f0:	8a3b      	ldrh	r3, [r7, #16]
 801c4f2:	9300      	str	r3, [sp, #0]
 801c4f4:	4b26      	ldr	r3, [pc, #152]	@ (801c590 <udp_input+0x274>)
 801c4f6:	687a      	ldr	r2, [r7, #4]
 801c4f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c4fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c4fc:	e038      	b.n	801c570 <udp_input+0x254>
        pbuf_free(p);
 801c4fe:	6878      	ldr	r0, [r7, #4]
 801c500:	f7f9 fe86 	bl	8016210 <pbuf_free>
        goto end;
 801c504:	e033      	b.n	801c56e <udp_input+0x252>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c506:	7cfb      	ldrb	r3, [r7, #19]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d112      	bne.n	801c532 <udp_input+0x216>
 801c50c:	4b1b      	ldr	r3, [pc, #108]	@ (801c57c <udp_input+0x260>)
 801c50e:	695b      	ldr	r3, [r3, #20]
 801c510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c514:	2be0      	cmp	r3, #224	@ 0xe0
 801c516:	d00c      	beq.n	801c532 <udp_input+0x216>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c518:	4b18      	ldr	r3, [pc, #96]	@ (801c57c <udp_input+0x260>)
 801c51a:	899b      	ldrh	r3, [r3, #12]
 801c51c:	3308      	adds	r3, #8
 801c51e:	b29b      	uxth	r3, r3
 801c520:	b21b      	sxth	r3, r3
 801c522:	4619      	mov	r1, r3
 801c524:	6878      	ldr	r0, [r7, #4]
 801c526:	f7f9 fe61 	bl	80161ec <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c52a:	2103      	movs	r1, #3
 801c52c:	6878      	ldr	r0, [r7, #4]
 801c52e:	f003 fb29 	bl	801fb84 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801c532:	4b11      	ldr	r3, [pc, #68]	@ (801c578 <udp_input+0x25c>)
 801c534:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801c538:	3301      	adds	r3, #1
 801c53a:	b29a      	uxth	r2, r3
 801c53c:	4b0e      	ldr	r3, [pc, #56]	@ (801c578 <udp_input+0x25c>)
 801c53e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801c542:	4b0d      	ldr	r3, [pc, #52]	@ (801c578 <udp_input+0x25c>)
 801c544:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c548:	3301      	adds	r3, #1
 801c54a:	b29a      	uxth	r2, r3
 801c54c:	4b0a      	ldr	r3, [pc, #40]	@ (801c578 <udp_input+0x25c>)
 801c54e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 801c552:	4b09      	ldr	r3, [pc, #36]	@ (801c578 <udp_input+0x25c>)
 801c554:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801c558:	3301      	adds	r3, #1
 801c55a:	4a07      	ldr	r2, [pc, #28]	@ (801c578 <udp_input+0x25c>)
 801c55c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      pbuf_free(p);
 801c560:	6878      	ldr	r0, [r7, #4]
 801c562:	f7f9 fe55 	bl	8016210 <pbuf_free>
  return;
 801c566:	e003      	b.n	801c570 <udp_input+0x254>
    pbuf_free(p);
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7f9 fe51 	bl	8016210 <pbuf_free>
  return;
 801c56e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c570:	372c      	adds	r7, #44	@ 0x2c
 801c572:	46bd      	mov	sp, r7
 801c574:	bd90      	pop	{r4, r7, pc}
 801c576:	bf00      	nop
 801c578:	2000bbec 	.word	0x2000bbec
 801c57c:	20008604 	.word	0x20008604
 801c580:	2000bde0 	.word	0x2000bde0
 801c584:	08027300 	.word	0x08027300
 801c588:	08027330 	.word	0x08027330
 801c58c:	08027344 	.word	0x08027344
 801c590:	20008614 	.word	0x20008614

0801c594 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b088      	sub	sp, #32
 801c598:	af02      	add	r7, sp, #8
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	607a      	str	r2, [r7, #4]
 801c5a0:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d002      	beq.n	801c5b2 <udp_sendto+0x1e>
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d102      	bne.n	801c5b8 <udp_sendto+0x24>
    return ERR_VAL;
 801c5b2:	f06f 0305 	mvn.w	r3, #5
 801c5b6:	e01b      	b.n	801c5f0 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801c5b8:	6978      	ldr	r0, [r7, #20]
 801c5ba:	f003 fb97 	bl	801fcec <ip4_route>
 801c5be:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c5c0:	693b      	ldr	r3, [r7, #16]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d10a      	bne.n	801c5dc <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801c5c6:	4b0c      	ldr	r3, [pc, #48]	@ (801c5f8 <udp_sendto+0x64>)
 801c5c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801c5cc:	3301      	adds	r3, #1
 801c5ce:	b29a      	uxth	r2, r3
 801c5d0:	4b09      	ldr	r3, [pc, #36]	@ (801c5f8 <udp_sendto+0x64>)
 801c5d2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801c5d6:	f06f 0303 	mvn.w	r3, #3
 801c5da:	e009      	b.n	801c5f0 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c5dc:	887a      	ldrh	r2, [r7, #2]
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	9300      	str	r3, [sp, #0]
 801c5e2:	4613      	mov	r3, r2
 801c5e4:	687a      	ldr	r2, [r7, #4]
 801c5e6:	68b9      	ldr	r1, [r7, #8]
 801c5e8:	68f8      	ldr	r0, [r7, #12]
 801c5ea:	f000 f807 	bl	801c5fc <udp_sendto_if>
 801c5ee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	3718      	adds	r7, #24
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	2000bbec 	.word	0x2000bbec

0801c5fc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b088      	sub	sp, #32
 801c600:	af02      	add	r7, sp, #8
 801c602:	60f8      	str	r0, [r7, #12]
 801c604:	60b9      	str	r1, [r7, #8]
 801c606:	607a      	str	r2, [r7, #4]
 801c608:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d002      	beq.n	801c616 <udp_sendto_if+0x1a>
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d102      	bne.n	801c61c <udp_sendto_if+0x20>
    return ERR_VAL;
 801c616:	f06f 0305 	mvn.w	r3, #5
 801c61a:	e028      	b.n	801c66e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d009      	beq.n	801c636 <udp_sendto_if+0x3a>
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d005      	beq.n	801c636 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c632:	2be0      	cmp	r3, #224	@ 0xe0
 801c634:	d103      	bne.n	801c63e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801c636:	6a3b      	ldr	r3, [r7, #32]
 801c638:	3304      	adds	r3, #4
 801c63a:	617b      	str	r3, [r7, #20]
 801c63c:	e00b      	b.n	801c656 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	681a      	ldr	r2, [r3, #0]
 801c642:	6a3b      	ldr	r3, [r7, #32]
 801c644:	3304      	adds	r3, #4
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	429a      	cmp	r2, r3
 801c64a:	d002      	beq.n	801c652 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801c64c:	f06f 0303 	mvn.w	r3, #3
 801c650:	e00d      	b.n	801c66e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c656:	887a      	ldrh	r2, [r7, #2]
 801c658:	697b      	ldr	r3, [r7, #20]
 801c65a:	9301      	str	r3, [sp, #4]
 801c65c:	6a3b      	ldr	r3, [r7, #32]
 801c65e:	9300      	str	r3, [sp, #0]
 801c660:	4613      	mov	r3, r2
 801c662:	687a      	ldr	r2, [r7, #4]
 801c664:	68b9      	ldr	r1, [r7, #8]
 801c666:	68f8      	ldr	r0, [r7, #12]
 801c668:	f000 f806 	bl	801c678 <udp_sendto_if_src>
 801c66c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3718      	adds	r7, #24
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
	...

0801c678 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b08c      	sub	sp, #48	@ 0x30
 801c67c:	af04      	add	r7, sp, #16
 801c67e:	60f8      	str	r0, [r7, #12]
 801c680:	60b9      	str	r1, [r7, #8]
 801c682:	607a      	str	r2, [r7, #4]
 801c684:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d002      	beq.n	801c692 <udp_sendto_if_src+0x1a>
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d102      	bne.n	801c698 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801c692:	f06f 0305 	mvn.w	r3, #5
 801c696:	e08d      	b.n	801c7b4 <udp_sendto_if_src+0x13c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	8a5b      	ldrh	r3, [r3, #18]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d10f      	bne.n	801c6c0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c6a0:	68f9      	ldr	r1, [r7, #12]
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	8a5b      	ldrh	r3, [r3, #18]
 801c6a6:	461a      	mov	r2, r3
 801c6a8:	68f8      	ldr	r0, [r7, #12]
 801c6aa:	f000 f88f 	bl	801c7cc <udp_bind>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c6b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d002      	beq.n	801c6c0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c6ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6be:	e079      	b.n	801c7b4 <udp_sendto_if_src+0x13c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801c6c0:	2108      	movs	r1, #8
 801c6c2:	68b8      	ldr	r0, [r7, #8]
 801c6c4:	f7f9 fd80 	bl	80161c8 <pbuf_header>
 801c6c8:	4603      	mov	r3, r0
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d014      	beq.n	801c6f8 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	2108      	movs	r1, #8
 801c6d2:	2001      	movs	r0, #1
 801c6d4:	f7f9 fa24 	bl	8015b20 <pbuf_alloc>
 801c6d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c6da:	69fb      	ldr	r3, [r7, #28]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d102      	bne.n	801c6e6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c6e4:	e066      	b.n	801c7b4 <udp_sendto_if_src+0x13c>
    }
    if (p->tot_len != 0) {
 801c6e6:	68bb      	ldr	r3, [r7, #8]
 801c6e8:	891b      	ldrh	r3, [r3, #8]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d006      	beq.n	801c6fc <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c6ee:	68b9      	ldr	r1, [r7, #8]
 801c6f0:	69f8      	ldr	r0, [r7, #28]
 801c6f2:	f7f9 feaf 	bl	8016454 <pbuf_chain>
 801c6f6:	e001      	b.n	801c6fc <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c6f8:	68bb      	ldr	r3, [r7, #8]
 801c6fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c6fc:	69fb      	ldr	r3, [r7, #28]
 801c6fe:	895b      	ldrh	r3, [r3, #10]
 801c700:	2b07      	cmp	r3, #7
 801c702:	d806      	bhi.n	801c712 <udp_sendto_if_src+0x9a>
 801c704:	4b2d      	ldr	r3, [pc, #180]	@ (801c7bc <udp_sendto_if_src+0x144>)
 801c706:	f240 22db 	movw	r2, #731	@ 0x2db
 801c70a:	492d      	ldr	r1, [pc, #180]	@ (801c7c0 <udp_sendto_if_src+0x148>)
 801c70c:	482d      	ldr	r0, [pc, #180]	@ (801c7c4 <udp_sendto_if_src+0x14c>)
 801c70e:	f005 fd9d 	bl	802224c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c712:	69fb      	ldr	r3, [r7, #28]
 801c714:	685b      	ldr	r3, [r3, #4]
 801c716:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	8a5b      	ldrh	r3, [r3, #18]
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f8 fad1 	bl	8014cc4 <lwip_htons>
 801c722:	4603      	mov	r3, r0
 801c724:	461a      	mov	r2, r3
 801c726:	697b      	ldr	r3, [r7, #20]
 801c728:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c72a:	887b      	ldrh	r3, [r7, #2]
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7f8 fac9 	bl	8014cc4 <lwip_htons>
 801c732:	4603      	mov	r3, r0
 801c734:	461a      	mov	r2, r3
 801c736:	697b      	ldr	r3, [r7, #20]
 801c738:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c73a:	697b      	ldr	r3, [r7, #20]
 801c73c:	2200      	movs	r2, #0
 801c73e:	719a      	strb	r2, [r3, #6]
 801c740:	2200      	movs	r2, #0
 801c742:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c744:	69fb      	ldr	r3, [r7, #28]
 801c746:	891b      	ldrh	r3, [r3, #8]
 801c748:	4618      	mov	r0, r3
 801c74a:	f7f8 fabb 	bl	8014cc4 <lwip_htons>
 801c74e:	4603      	mov	r3, r0
 801c750:	461a      	mov	r2, r3
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c756:	2311      	movs	r3, #17
 801c758:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	7a9b      	ldrb	r3, [r3, #10]
 801c75e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	7a5b      	ldrb	r3, [r3, #9]
 801c764:	7cb9      	ldrb	r1, [r7, #18]
 801c766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c768:	9202      	str	r2, [sp, #8]
 801c76a:	7cfa      	ldrb	r2, [r7, #19]
 801c76c:	9201      	str	r2, [sp, #4]
 801c76e:	9300      	str	r3, [sp, #0]
 801c770:	460b      	mov	r3, r1
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c776:	69f8      	ldr	r0, [r7, #28]
 801c778:	f003 fd54 	bl	8020224 <ip4_output_if_src>
 801c77c:	4603      	mov	r3, r0
 801c77e:	76fb      	strb	r3, [r7, #27]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801c780:	4b11      	ldr	r3, [pc, #68]	@ (801c7c8 <udp_sendto_if_src+0x150>)
 801c782:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801c786:	3301      	adds	r3, #1
 801c788:	4a0f      	ldr	r2, [pc, #60]	@ (801c7c8 <udp_sendto_if_src+0x150>)
 801c78a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c78e:	69fa      	ldr	r2, [r7, #28]
 801c790:	68bb      	ldr	r3, [r7, #8]
 801c792:	429a      	cmp	r2, r3
 801c794:	d004      	beq.n	801c7a0 <udp_sendto_if_src+0x128>
    /* free the header pbuf */
    pbuf_free(q);
 801c796:	69f8      	ldr	r0, [r7, #28]
 801c798:	f7f9 fd3a 	bl	8016210 <pbuf_free>
    q = NULL;
 801c79c:	2300      	movs	r3, #0
 801c79e:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801c7a0:	4b09      	ldr	r3, [pc, #36]	@ (801c7c8 <udp_sendto_if_src+0x150>)
 801c7a2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801c7a6:	3301      	adds	r3, #1
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	4b07      	ldr	r3, [pc, #28]	@ (801c7c8 <udp_sendto_if_src+0x150>)
 801c7ac:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801c7b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	3720      	adds	r7, #32
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}
 801c7bc:	08027300 	.word	0x08027300
 801c7c0:	0802736c 	.word	0x0802736c
 801c7c4:	08027344 	.word	0x08027344
 801c7c8:	2000bbec 	.word	0x2000bbec

0801c7cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b086      	sub	sp, #24
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	60f8      	str	r0, [r7, #12]
 801c7d4:	60b9      	str	r1, [r7, #8]
 801c7d6:	4613      	mov	r3, r2
 801c7d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c7da:	68bb      	ldr	r3, [r7, #8]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d101      	bne.n	801c7e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c7e0:	4b30      	ldr	r3, [pc, #192]	@ (801c8a4 <udp_bind+0xd8>)
 801c7e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d002      	beq.n	801c7f0 <udp_bind+0x24>
 801c7ea:	68bb      	ldr	r3, [r7, #8]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d102      	bne.n	801c7f6 <udp_bind+0x2a>
    return ERR_VAL;
 801c7f0:	f06f 0305 	mvn.w	r3, #5
 801c7f4:	e052      	b.n	801c89c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c7fa:	4b2b      	ldr	r3, [pc, #172]	@ (801c8a8 <udp_bind+0xdc>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	617b      	str	r3, [r7, #20]
 801c800:	e009      	b.n	801c816 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c802:	68fa      	ldr	r2, [r7, #12]
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	429a      	cmp	r2, r3
 801c808:	d102      	bne.n	801c810 <udp_bind+0x44>
      rebind = 1;
 801c80a:	2301      	movs	r3, #1
 801c80c:	74fb      	strb	r3, [r7, #19]
      break;
 801c80e:	e005      	b.n	801c81c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c810:	697b      	ldr	r3, [r7, #20]
 801c812:	68db      	ldr	r3, [r3, #12]
 801c814:	617b      	str	r3, [r7, #20]
 801c816:	697b      	ldr	r3, [r7, #20]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d1f2      	bne.n	801c802 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801c81c:	88fb      	ldrh	r3, [r7, #6]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d109      	bne.n	801c836 <udp_bind+0x6a>
    port = udp_new_port();
 801c822:	f7ff fd09 	bl	801c238 <udp_new_port>
 801c826:	4603      	mov	r3, r0
 801c828:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c82a:	88fb      	ldrh	r3, [r7, #6]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d11e      	bne.n	801c86e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c830:	f06f 0307 	mvn.w	r3, #7
 801c834:	e032      	b.n	801c89c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c836:	4b1c      	ldr	r3, [pc, #112]	@ (801c8a8 <udp_bind+0xdc>)
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	617b      	str	r3, [r7, #20]
 801c83c:	e014      	b.n	801c868 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801c83e:	68fa      	ldr	r2, [r7, #12]
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	429a      	cmp	r2, r3
 801c844:	d00d      	beq.n	801c862 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	8a5b      	ldrh	r3, [r3, #18]
 801c84a:	88fa      	ldrh	r2, [r7, #6]
 801c84c:	429a      	cmp	r2, r3
 801c84e:	d108      	bne.n	801c862 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	681a      	ldr	r2, [r3, #0]
 801c854:	68bb      	ldr	r3, [r7, #8]
 801c856:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c858:	429a      	cmp	r2, r3
 801c85a:	d102      	bne.n	801c862 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c85c:	f06f 0307 	mvn.w	r3, #7
 801c860:	e01c      	b.n	801c89c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	68db      	ldr	r3, [r3, #12]
 801c866:	617b      	str	r3, [r7, #20]
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d1e7      	bne.n	801c83e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c86e:	68bb      	ldr	r3, [r7, #8]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d002      	beq.n	801c87a <udp_bind+0xae>
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	e000      	b.n	801c87c <udp_bind+0xb0>
 801c87a:	2300      	movs	r3, #0
 801c87c:	68fa      	ldr	r2, [r7, #12]
 801c87e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	88fa      	ldrh	r2, [r7, #6]
 801c884:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c886:	7cfb      	ldrb	r3, [r7, #19]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d106      	bne.n	801c89a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c88c:	4b06      	ldr	r3, [pc, #24]	@ (801c8a8 <udp_bind+0xdc>)
 801c88e:	681a      	ldr	r2, [r3, #0]
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c894:	4a04      	ldr	r2, [pc, #16]	@ (801c8a8 <udp_bind+0xdc>)
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c89a:	2300      	movs	r3, #0
}
 801c89c:	4618      	mov	r0, r3
 801c89e:	3718      	adds	r7, #24
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	bd80      	pop	{r7, pc}
 801c8a4:	08032ed0 	.word	0x08032ed0
 801c8a8:	2000bde0 	.word	0x2000bde0

0801c8ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b086      	sub	sp, #24
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	60f8      	str	r0, [r7, #12]
 801c8b4:	60b9      	str	r1, [r7, #8]
 801c8b6:	4613      	mov	r3, r2
 801c8b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d002      	beq.n	801c8c6 <udp_connect+0x1a>
 801c8c0:	68bb      	ldr	r3, [r7, #8]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d102      	bne.n	801c8cc <udp_connect+0x20>
    return ERR_VAL;
 801c8c6:	f06f 0305 	mvn.w	r3, #5
 801c8ca:	e03e      	b.n	801c94a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	8a5b      	ldrh	r3, [r3, #18]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d10f      	bne.n	801c8f4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c8d4:	68f9      	ldr	r1, [r7, #12]
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	8a5b      	ldrh	r3, [r3, #18]
 801c8da:	461a      	mov	r2, r3
 801c8dc:	68f8      	ldr	r0, [r7, #12]
 801c8de:	f7ff ff75 	bl	801c7cc <udp_bind>
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d002      	beq.n	801c8f4 <udp_connect+0x48>
      return err;
 801c8ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8f2:	e02a      	b.n	801c94a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c8f4:	68bb      	ldr	r3, [r7, #8]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d002      	beq.n	801c900 <udp_connect+0x54>
 801c8fa:	68bb      	ldr	r3, [r7, #8]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	e000      	b.n	801c902 <udp_connect+0x56>
 801c900:	2300      	movs	r3, #0
 801c902:	68fa      	ldr	r2, [r7, #12]
 801c904:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	88fa      	ldrh	r2, [r7, #6]
 801c90a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	7c1b      	ldrb	r3, [r3, #16]
 801c910:	f043 0304 	orr.w	r3, r3, #4
 801c914:	b2da      	uxtb	r2, r3
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c91a:	4b0e      	ldr	r3, [pc, #56]	@ (801c954 <udp_connect+0xa8>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	617b      	str	r3, [r7, #20]
 801c920:	e008      	b.n	801c934 <udp_connect+0x88>
    if (pcb == ipcb) {
 801c922:	68fa      	ldr	r2, [r7, #12]
 801c924:	697b      	ldr	r3, [r7, #20]
 801c926:	429a      	cmp	r2, r3
 801c928:	d101      	bne.n	801c92e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801c92a:	2300      	movs	r3, #0
 801c92c:	e00d      	b.n	801c94a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c92e:	697b      	ldr	r3, [r7, #20]
 801c930:	68db      	ldr	r3, [r3, #12]
 801c932:	617b      	str	r3, [r7, #20]
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	2b00      	cmp	r3, #0
 801c938:	d1f3      	bne.n	801c922 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c93a:	4b06      	ldr	r3, [pc, #24]	@ (801c954 <udp_connect+0xa8>)
 801c93c:	681a      	ldr	r2, [r3, #0]
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c942:	4a04      	ldr	r2, [pc, #16]	@ (801c954 <udp_connect+0xa8>)
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c948:	2300      	movs	r3, #0
}
 801c94a:	4618      	mov	r0, r3
 801c94c:	3718      	adds	r7, #24
 801c94e:	46bd      	mov	sp, r7
 801c950:	bd80      	pop	{r7, pc}
 801c952:	bf00      	nop
 801c954:	2000bde0 	.word	0x2000bde0

0801c958 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c958:	b480      	push	{r7}
 801c95a:	b085      	sub	sp, #20
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	60f8      	str	r0, [r7, #12]
 801c960:	60b9      	str	r1, [r7, #8]
 801c962:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	68ba      	ldr	r2, [r7, #8]
 801c968:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	687a      	ldr	r2, [r7, #4]
 801c96e:	61da      	str	r2, [r3, #28]
}
 801c970:	bf00      	nop
 801c972:	3714      	adds	r7, #20
 801c974:	46bd      	mov	sp, r7
 801c976:	bc80      	pop	{r7}
 801c978:	4770      	bx	lr
	...

0801c97c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b084      	sub	sp, #16
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c984:	4b15      	ldr	r3, [pc, #84]	@ (801c9dc <udp_remove+0x60>)
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	429a      	cmp	r2, r3
 801c98c:	d105      	bne.n	801c99a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c98e:	4b13      	ldr	r3, [pc, #76]	@ (801c9dc <udp_remove+0x60>)
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	68db      	ldr	r3, [r3, #12]
 801c994:	4a11      	ldr	r2, [pc, #68]	@ (801c9dc <udp_remove+0x60>)
 801c996:	6013      	str	r3, [r2, #0]
 801c998:	e017      	b.n	801c9ca <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c99a:	4b10      	ldr	r3, [pc, #64]	@ (801c9dc <udp_remove+0x60>)
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	60fb      	str	r3, [r7, #12]
 801c9a0:	e010      	b.n	801c9c4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	68db      	ldr	r3, [r3, #12]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d009      	beq.n	801c9be <udp_remove+0x42>
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	68db      	ldr	r3, [r3, #12]
 801c9ae:	687a      	ldr	r2, [r7, #4]
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	d104      	bne.n	801c9be <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	68da      	ldr	r2, [r3, #12]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	60da      	str	r2, [r3, #12]
        break;
 801c9bc:	e005      	b.n	801c9ca <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	68db      	ldr	r3, [r3, #12]
 801c9c2:	60fb      	str	r3, [r7, #12]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d1eb      	bne.n	801c9a2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c9ca:	6879      	ldr	r1, [r7, #4]
 801c9cc:	2000      	movs	r0, #0
 801c9ce:	f7f8 fe75 	bl	80156bc <memp_free>
}
 801c9d2:	bf00      	nop
 801c9d4:	3710      	adds	r7, #16
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	2000bde0 	.word	0x2000bde0

0801c9e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c9e6:	2000      	movs	r0, #0
 801c9e8:	f7f8 fe16 	bl	8015618 <memp_malloc>
 801c9ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d007      	beq.n	801ca04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c9f4:	2220      	movs	r2, #32
 801c9f6:	2100      	movs	r1, #0
 801c9f8:	6878      	ldr	r0, [r7, #4]
 801c9fa:	f005 fdfd 	bl	80225f8 <memset>
    pcb->ttl = UDP_TTL;
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	22ff      	movs	r2, #255	@ 0xff
 801ca02:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ca04:	687b      	ldr	r3, [r7, #4]
}
 801ca06:	4618      	mov	r0, r3
 801ca08:	3708      	adds	r7, #8
 801ca0a:	46bd      	mov	sp, r7
 801ca0c:	bd80      	pop	{r7, pc}

0801ca0e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ca0e:	b580      	push	{r7, lr}
 801ca10:	b084      	sub	sp, #16
 801ca12:	af00      	add	r7, sp, #0
 801ca14:	4603      	mov	r3, r0
 801ca16:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801ca18:	f7ff ffe2 	bl	801c9e0 <udp_new>
 801ca1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
}
 801ca20:	4618      	mov	r0, r3
 801ca22:	3710      	adds	r7, #16
 801ca24:	46bd      	mov	sp, r7
 801ca26:	bd80      	pop	{r7, pc}

0801ca28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801ca28:	b480      	push	{r7}
 801ca2a:	b085      	sub	sp, #20
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
 801ca30:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d01e      	beq.n	801ca76 <udp_netif_ip_addr_changed+0x4e>
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d01a      	beq.n	801ca76 <udp_netif_ip_addr_changed+0x4e>
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d017      	beq.n	801ca76 <udp_netif_ip_addr_changed+0x4e>
 801ca46:	683b      	ldr	r3, [r7, #0]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d013      	beq.n	801ca76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ca4e:	4b0c      	ldr	r3, [pc, #48]	@ (801ca80 <udp_netif_ip_addr_changed+0x58>)
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	60fb      	str	r3, [r7, #12]
 801ca54:	e00c      	b.n	801ca70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681a      	ldr	r2, [r3, #0]
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	429a      	cmp	r2, r3
 801ca60:	d103      	bne.n	801ca6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ca62:	683b      	ldr	r3, [r7, #0]
 801ca64:	681a      	ldr	r2, [r3, #0]
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	68db      	ldr	r3, [r3, #12]
 801ca6e:	60fb      	str	r3, [r7, #12]
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d1ef      	bne.n	801ca56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ca76:	bf00      	nop
 801ca78:	3714      	adds	r7, #20
 801ca7a:	46bd      	mov	sp, r7
 801ca7c:	bc80      	pop	{r7}
 801ca7e:	4770      	bx	lr
 801ca80:	2000bde0 	.word	0x2000bde0

0801ca84 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801ca88:	4b20      	ldr	r3, [pc, #128]	@ (801cb0c <dhcp_inc_pcb_refcount+0x88>)
 801ca8a:	781b      	ldrb	r3, [r3, #0]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d133      	bne.n	801caf8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801ca90:	4b1f      	ldr	r3, [pc, #124]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d005      	beq.n	801caa4 <dhcp_inc_pcb_refcount+0x20>
 801ca98:	4b1e      	ldr	r3, [pc, #120]	@ (801cb14 <dhcp_inc_pcb_refcount+0x90>)
 801ca9a:	22d9      	movs	r2, #217	@ 0xd9
 801ca9c:	491e      	ldr	r1, [pc, #120]	@ (801cb18 <dhcp_inc_pcb_refcount+0x94>)
 801ca9e:	481f      	ldr	r0, [pc, #124]	@ (801cb1c <dhcp_inc_pcb_refcount+0x98>)
 801caa0:	f005 fbd4 	bl	802224c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801caa4:	f7ff ff9c 	bl	801c9e0 <udp_new>
 801caa8:	4603      	mov	r3, r0
 801caaa:	4a19      	ldr	r2, [pc, #100]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801caac:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801caae:	4b18      	ldr	r3, [pc, #96]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d102      	bne.n	801cabc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801cab6:	f04f 33ff 	mov.w	r3, #4294967295
 801caba:	e024      	b.n	801cb06 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801cabc:	4b14      	ldr	r3, [pc, #80]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	7a1a      	ldrb	r2, [r3, #8]
 801cac2:	4b13      	ldr	r3, [pc, #76]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	f042 0220 	orr.w	r2, r2, #32
 801caca:	b2d2      	uxtb	r2, r2
 801cacc:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801cace:	4b10      	ldr	r3, [pc, #64]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	2244      	movs	r2, #68	@ 0x44
 801cad4:	4912      	ldr	r1, [pc, #72]	@ (801cb20 <dhcp_inc_pcb_refcount+0x9c>)
 801cad6:	4618      	mov	r0, r3
 801cad8:	f7ff fe78 	bl	801c7cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801cadc:	4b0c      	ldr	r3, [pc, #48]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	2243      	movs	r2, #67	@ 0x43
 801cae2:	490f      	ldr	r1, [pc, #60]	@ (801cb20 <dhcp_inc_pcb_refcount+0x9c>)
 801cae4:	4618      	mov	r0, r3
 801cae6:	f7ff fee1 	bl	801c8ac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801caea:	4b09      	ldr	r3, [pc, #36]	@ (801cb10 <dhcp_inc_pcb_refcount+0x8c>)
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	2200      	movs	r2, #0
 801caf0:	490c      	ldr	r1, [pc, #48]	@ (801cb24 <dhcp_inc_pcb_refcount+0xa0>)
 801caf2:	4618      	mov	r0, r3
 801caf4:	f7ff ff30 	bl	801c958 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801caf8:	4b04      	ldr	r3, [pc, #16]	@ (801cb0c <dhcp_inc_pcb_refcount+0x88>)
 801cafa:	781b      	ldrb	r3, [r3, #0]
 801cafc:	3301      	adds	r3, #1
 801cafe:	b2da      	uxtb	r2, r3
 801cb00:	4b02      	ldr	r3, [pc, #8]	@ (801cb0c <dhcp_inc_pcb_refcount+0x88>)
 801cb02:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801cb04:	2300      	movs	r3, #0
}
 801cb06:	4618      	mov	r0, r3
 801cb08:	bd80      	pop	{r7, pc}
 801cb0a:	bf00      	nop
 801cb0c:	2000be10 	.word	0x2000be10
 801cb10:	2000be0c 	.word	0x2000be0c
 801cb14:	0802739c 	.word	0x0802739c
 801cb18:	080273d4 	.word	0x080273d4
 801cb1c:	080273fc 	.word	0x080273fc
 801cb20:	08032ed0 	.word	0x08032ed0
 801cb24:	0801e239 	.word	0x0801e239

0801cb28 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801cb2c:	4b0e      	ldr	r3, [pc, #56]	@ (801cb68 <dhcp_dec_pcb_refcount+0x40>)
 801cb2e:	781b      	ldrb	r3, [r3, #0]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d105      	bne.n	801cb40 <dhcp_dec_pcb_refcount+0x18>
 801cb34:	4b0d      	ldr	r3, [pc, #52]	@ (801cb6c <dhcp_dec_pcb_refcount+0x44>)
 801cb36:	22f3      	movs	r2, #243	@ 0xf3
 801cb38:	490d      	ldr	r1, [pc, #52]	@ (801cb70 <dhcp_dec_pcb_refcount+0x48>)
 801cb3a:	480e      	ldr	r0, [pc, #56]	@ (801cb74 <dhcp_dec_pcb_refcount+0x4c>)
 801cb3c:	f005 fb86 	bl	802224c <iprintf>
  dhcp_pcb_refcount--;
 801cb40:	4b09      	ldr	r3, [pc, #36]	@ (801cb68 <dhcp_dec_pcb_refcount+0x40>)
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	3b01      	subs	r3, #1
 801cb46:	b2da      	uxtb	r2, r3
 801cb48:	4b07      	ldr	r3, [pc, #28]	@ (801cb68 <dhcp_dec_pcb_refcount+0x40>)
 801cb4a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801cb4c:	4b06      	ldr	r3, [pc, #24]	@ (801cb68 <dhcp_dec_pcb_refcount+0x40>)
 801cb4e:	781b      	ldrb	r3, [r3, #0]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d107      	bne.n	801cb64 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801cb54:	4b08      	ldr	r3, [pc, #32]	@ (801cb78 <dhcp_dec_pcb_refcount+0x50>)
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f7ff ff0f 	bl	801c97c <udp_remove>
    dhcp_pcb = NULL;
 801cb5e:	4b06      	ldr	r3, [pc, #24]	@ (801cb78 <dhcp_dec_pcb_refcount+0x50>)
 801cb60:	2200      	movs	r2, #0
 801cb62:	601a      	str	r2, [r3, #0]
  }
}
 801cb64:	bf00      	nop
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	2000be10 	.word	0x2000be10
 801cb6c:	0802739c 	.word	0x0802739c
 801cb70:	08027424 	.word	0x08027424
 801cb74:	080273fc 	.word	0x080273fc
 801cb78:	2000be0c 	.word	0x2000be0c

0801cb7c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b084      	sub	sp, #16
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb88:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801cb8a:	210c      	movs	r1, #12
 801cb8c:	68f8      	ldr	r0, [r7, #12]
 801cb8e:	f000 ffb1 	bl	801daf4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801cb92:	4b06      	ldr	r3, [pc, #24]	@ (801cbac <dhcp_handle_nak+0x30>)
 801cb94:	4a05      	ldr	r2, [pc, #20]	@ (801cbac <dhcp_handle_nak+0x30>)
 801cb96:	4905      	ldr	r1, [pc, #20]	@ (801cbac <dhcp_handle_nak+0x30>)
 801cb98:	6878      	ldr	r0, [r7, #4]
 801cb9a:	f7f8 fe1d 	bl	80157d8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801cb9e:	6878      	ldr	r0, [r7, #4]
 801cba0:	f000 fbe2 	bl	801d368 <dhcp_discover>
}
 801cba4:	bf00      	nop
 801cba6:	3710      	adds	r7, #16
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd80      	pop	{r7, pc}
 801cbac:	08032ed0 	.word	0x08032ed0

0801cbb0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b084      	sub	sp, #16
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbbc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801cbbe:	2108      	movs	r1, #8
 801cbc0:	68f8      	ldr	r0, [r7, #12]
 801cbc2:	f000 ff97 	bl	801daf4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	3328      	adds	r3, #40	@ 0x28
 801cbca:	2200      	movs	r2, #0
 801cbcc:	4619      	mov	r1, r3
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f002 fbda 	bl	801f388 <etharp_query>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	7a9b      	ldrb	r3, [r3, #10]
 801cbdc:	2bff      	cmp	r3, #255	@ 0xff
 801cbde:	d005      	beq.n	801cbec <dhcp_check+0x3c>
    dhcp->tries++;
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	7a9b      	ldrb	r3, [r3, #10]
 801cbe4:	3301      	adds	r3, #1
 801cbe6:	b2da      	uxtb	r2, r3
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801cbec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801cbf0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cbf2:	893b      	ldrh	r3, [r7, #8]
 801cbf4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cbf8:	4a06      	ldr	r2, [pc, #24]	@ (801cc14 <dhcp_check+0x64>)
 801cbfa:	fb82 1203 	smull	r1, r2, r2, r3
 801cbfe:	1152      	asrs	r2, r2, #5
 801cc00:	17db      	asrs	r3, r3, #31
 801cc02:	1ad3      	subs	r3, r2, r3
 801cc04:	b29a      	uxth	r2, r3
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801cc0a:	bf00      	nop
 801cc0c:	3710      	adds	r7, #16
 801cc0e:	46bd      	mov	sp, r7
 801cc10:	bd80      	pop	{r7, pc}
 801cc12:	bf00      	nop
 801cc14:	10624dd3 	.word	0x10624dd3

0801cc18 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b084      	sub	sp, #16
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc24:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801cc26:	4b0c      	ldr	r3, [pc, #48]	@ (801cc58 <dhcp_handle_offer+0x40>)
 801cc28:	789b      	ldrb	r3, [r3, #2]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d00f      	beq.n	801cc4e <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cc2e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc5c <dhcp_handle_offer+0x44>)
 801cc30:	689b      	ldr	r3, [r3, #8]
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7f8 f853 	bl	8014cde <lwip_htonl>
 801cc38:	4602      	mov	r2, r0
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	685b      	ldr	r3, [r3, #4]
 801cc42:	691a      	ldr	r2, [r3, #16]
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	629a      	str	r2, [r3, #40]	@ 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801cc48:	6878      	ldr	r0, [r7, #4]
 801cc4a:	f000 f809 	bl	801cc60 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801cc4e:	bf00      	nop
 801cc50:	3710      	adds	r7, #16
 801cc52:	46bd      	mov	sp, r7
 801cc54:	bd80      	pop	{r7, pc}
 801cc56:	bf00      	nop
 801cc58:	2000be04 	.word	0x2000be04
 801cc5c:	2000bde4 	.word	0x2000bde4

0801cc60 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b088      	sub	sp, #32
 801cc64:	af02      	add	r7, sp, #8
 801cc66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc6c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801cc6e:	2101      	movs	r1, #1
 801cc70:	6938      	ldr	r0, [r7, #16]
 801cc72:	f000 ff3f 	bl	801daf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801cc76:	2203      	movs	r2, #3
 801cc78:	6939      	ldr	r1, [r7, #16]
 801cc7a:	6878      	ldr	r0, [r7, #4]
 801cc7c:	f001 fbc2 	bl	801e404 <dhcp_create_msg>
 801cc80:	4603      	mov	r3, r0
 801cc82:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d159      	bne.n	801cd40 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cc8c:	2202      	movs	r2, #2
 801cc8e:	2139      	movs	r1, #57	@ 0x39
 801cc90:	6938      	ldr	r0, [r7, #16]
 801cc92:	f000 ff49 	bl	801db28 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cc9a:	4619      	mov	r1, r3
 801cc9c:	6938      	ldr	r0, [r7, #16]
 801cc9e:	f000 ffa5 	bl	801dbec <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801cca2:	2204      	movs	r2, #4
 801cca4:	2132      	movs	r1, #50	@ 0x32
 801cca6:	6938      	ldr	r0, [r7, #16]
 801cca8:	f000 ff3e 	bl	801db28 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ccac:	693b      	ldr	r3, [r7, #16]
 801ccae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f7f8 f814 	bl	8014cde <lwip_htonl>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	4619      	mov	r1, r3
 801ccba:	6938      	ldr	r0, [r7, #16]
 801ccbc:	f000 ffd0 	bl	801dc60 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801ccc0:	2204      	movs	r2, #4
 801ccc2:	2136      	movs	r1, #54	@ 0x36
 801ccc4:	6938      	ldr	r0, [r7, #16]
 801ccc6:	f000 ff2f 	bl	801db28 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801ccca:	693b      	ldr	r3, [r7, #16]
 801cccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ccce:	4618      	mov	r0, r3
 801ccd0:	f7f8 f805 	bl	8014cde <lwip_htonl>
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	4619      	mov	r1, r3
 801ccd8:	6938      	ldr	r0, [r7, #16]
 801ccda:	f000 ffc1 	bl	801dc60 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ccde:	2203      	movs	r2, #3
 801cce0:	2137      	movs	r1, #55	@ 0x37
 801cce2:	6938      	ldr	r0, [r7, #16]
 801cce4:	f000 ff20 	bl	801db28 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cce8:	2300      	movs	r3, #0
 801ccea:	75fb      	strb	r3, [r7, #23]
 801ccec:	e009      	b.n	801cd02 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801ccee:	7dfb      	ldrb	r3, [r7, #23]
 801ccf0:	4a29      	ldr	r2, [pc, #164]	@ (801cd98 <dhcp_select+0x138>)
 801ccf2:	5cd3      	ldrb	r3, [r2, r3]
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	6938      	ldr	r0, [r7, #16]
 801ccf8:	f000 ff50 	bl	801db9c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ccfc:	7dfb      	ldrb	r3, [r7, #23]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	75fb      	strb	r3, [r7, #23]
 801cd02:	7dfb      	ldrb	r3, [r7, #23]
 801cd04:	2b02      	cmp	r3, #2
 801cd06:	d9f2      	bls.n	801ccee <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801cd08:	6938      	ldr	r0, [r7, #16]
 801cd0a:	f001 fd1f 	bl	801e74c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cd0e:	693b      	ldr	r3, [r7, #16]
 801cd10:	68da      	ldr	r2, [r3, #12]
 801cd12:	693b      	ldr	r3, [r7, #16]
 801cd14:	8a9b      	ldrh	r3, [r3, #20]
 801cd16:	33f0      	adds	r3, #240	@ 0xf0
 801cd18:	b29b      	uxth	r3, r3
 801cd1a:	4619      	mov	r1, r3
 801cd1c:	4610      	mov	r0, r2
 801cd1e:	f7f9 f903 	bl	8015f28 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801cd22:	4b1e      	ldr	r3, [pc, #120]	@ (801cd9c <dhcp_select+0x13c>)
 801cd24:	6818      	ldr	r0, [r3, #0]
 801cd26:	693b      	ldr	r3, [r7, #16]
 801cd28:	68d9      	ldr	r1, [r3, #12]
 801cd2a:	4b1d      	ldr	r3, [pc, #116]	@ (801cda0 <dhcp_select+0x140>)
 801cd2c:	9301      	str	r3, [sp, #4]
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	9300      	str	r3, [sp, #0]
 801cd32:	2343      	movs	r3, #67	@ 0x43
 801cd34:	4a1b      	ldr	r2, [pc, #108]	@ (801cda4 <dhcp_select+0x144>)
 801cd36:	f7ff fc9f 	bl	801c678 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801cd3a:	6938      	ldr	r0, [r7, #16]
 801cd3c:	f001 fcc4 	bl	801e6c8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cd40:	693b      	ldr	r3, [r7, #16]
 801cd42:	7a9b      	ldrb	r3, [r3, #10]
 801cd44:	2bff      	cmp	r3, #255	@ 0xff
 801cd46:	d005      	beq.n	801cd54 <dhcp_select+0xf4>
    dhcp->tries++;
 801cd48:	693b      	ldr	r3, [r7, #16]
 801cd4a:	7a9b      	ldrb	r3, [r3, #10]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	b2da      	uxtb	r2, r3
 801cd50:	693b      	ldr	r3, [r7, #16]
 801cd52:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801cd54:	693b      	ldr	r3, [r7, #16]
 801cd56:	7a9b      	ldrb	r3, [r3, #10]
 801cd58:	2b05      	cmp	r3, #5
 801cd5a:	d807      	bhi.n	801cd6c <dhcp_select+0x10c>
 801cd5c:	693b      	ldr	r3, [r7, #16]
 801cd5e:	7a9b      	ldrb	r3, [r3, #10]
 801cd60:	461a      	mov	r2, r3
 801cd62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801cd66:	4093      	lsls	r3, r2
 801cd68:	b29b      	uxth	r3, r3
 801cd6a:	e001      	b.n	801cd70 <dhcp_select+0x110>
 801cd6c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801cd70:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cd72:	89bb      	ldrh	r3, [r7, #12]
 801cd74:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cd78:	4a0b      	ldr	r2, [pc, #44]	@ (801cda8 <dhcp_select+0x148>)
 801cd7a:	fb82 1203 	smull	r1, r2, r2, r3
 801cd7e:	1152      	asrs	r2, r2, #5
 801cd80:	17db      	asrs	r3, r3, #31
 801cd82:	1ad3      	subs	r3, r2, r3
 801cd84:	b29a      	uxth	r2, r3
 801cd86:	693b      	ldr	r3, [r7, #16]
 801cd88:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	3718      	adds	r7, #24
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd80      	pop	{r7, pc}
 801cd96:	bf00      	nop
 801cd98:	20000124 	.word	0x20000124
 801cd9c:	2000be0c 	.word	0x2000be0c
 801cda0:	08032ed0 	.word	0x08032ed0
 801cda4:	08032ed4 	.word	0x08032ed4
 801cda8:	10624dd3 	.word	0x10624dd3

0801cdac <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b082      	sub	sp, #8
 801cdb0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801cdb2:	4b27      	ldr	r3, [pc, #156]	@ (801ce50 <dhcp_coarse_tmr+0xa4>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 801cdb8:	e042      	b.n	801ce40 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cdbe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d039      	beq.n	801ce3a <dhcp_coarse_tmr+0x8e>
 801cdc6:	683b      	ldr	r3, [r7, #0]
 801cdc8:	7a5b      	ldrb	r3, [r3, #9]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d035      	beq.n	801ce3a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d012      	beq.n	801cdfc <dhcp_coarse_tmr+0x50>
 801cdd6:	683b      	ldr	r3, [r7, #0]
 801cdd8:	8c1b      	ldrh	r3, [r3, #32]
 801cdda:	3301      	adds	r3, #1
 801cddc:	b29a      	uxth	r2, r3
 801cdde:	683b      	ldr	r3, [r7, #0]
 801cde0:	841a      	strh	r2, [r3, #32]
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	8c1a      	ldrh	r2, [r3, #32]
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cdea:	429a      	cmp	r2, r3
 801cdec:	d106      	bne.n	801cdfc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801cdee:	6878      	ldr	r0, [r7, #4]
 801cdf0:	f000 fdc0 	bl	801d974 <dhcp_release>
        dhcp_discover(netif);
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f000 fab7 	bl	801d368 <dhcp_discover>
 801cdfa:	e01e      	b.n	801ce3a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801cdfc:	683b      	ldr	r3, [r7, #0]
 801cdfe:	8bdb      	ldrh	r3, [r3, #30]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d00b      	beq.n	801ce1c <dhcp_coarse_tmr+0x70>
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	8bdb      	ldrh	r3, [r3, #30]
 801ce08:	1e5a      	subs	r2, r3, #1
 801ce0a:	b291      	uxth	r1, r2
 801ce0c:	683a      	ldr	r2, [r7, #0]
 801ce0e:	83d1      	strh	r1, [r2, #30]
 801ce10:	2b01      	cmp	r3, #1
 801ce12:	d103      	bne.n	801ce1c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801ce14:	6878      	ldr	r0, [r7, #4]
 801ce16:	f000 f8c6 	bl	801cfa6 <dhcp_t2_timeout>
 801ce1a:	e00e      	b.n	801ce3a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801ce1c:	683b      	ldr	r3, [r7, #0]
 801ce1e:	8b9b      	ldrh	r3, [r3, #28]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d00a      	beq.n	801ce3a <dhcp_coarse_tmr+0x8e>
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	8b9b      	ldrh	r3, [r3, #28]
 801ce28:	1e5a      	subs	r2, r3, #1
 801ce2a:	b291      	uxth	r1, r2
 801ce2c:	683a      	ldr	r2, [r7, #0]
 801ce2e:	8391      	strh	r1, [r2, #28]
 801ce30:	2b01      	cmp	r3, #1
 801ce32:	d102      	bne.n	801ce3a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801ce34:	6878      	ldr	r0, [r7, #4]
 801ce36:	f000 f888 	bl	801cf4a <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d1b9      	bne.n	801cdba <dhcp_coarse_tmr+0xe>
  }
}
 801ce46:	bf00      	nop
 801ce48:	bf00      	nop
 801ce4a:	3708      	adds	r7, #8
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	bd80      	pop	{r7, pc}
 801ce50:	2000bbe0 	.word	0x2000bbe0

0801ce54 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801ce5a:	4b16      	ldr	r3, [pc, #88]	@ (801ceb4 <dhcp_fine_tmr+0x60>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801ce60:	e020      	b.n	801cea4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce66:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801ce68:	683b      	ldr	r3, [r7, #0]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d017      	beq.n	801ce9e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	8adb      	ldrh	r3, [r3, #22]
 801ce72:	2b01      	cmp	r3, #1
 801ce74:	d906      	bls.n	801ce84 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801ce76:	683b      	ldr	r3, [r7, #0]
 801ce78:	8adb      	ldrh	r3, [r3, #22]
 801ce7a:	3b01      	subs	r3, #1
 801ce7c:	b29a      	uxth	r2, r3
 801ce7e:	683b      	ldr	r3, [r7, #0]
 801ce80:	82da      	strh	r2, [r3, #22]
 801ce82:	e00c      	b.n	801ce9e <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801ce84:	683b      	ldr	r3, [r7, #0]
 801ce86:	8adb      	ldrh	r3, [r3, #22]
 801ce88:	2b01      	cmp	r3, #1
 801ce8a:	d108      	bne.n	801ce9e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	8adb      	ldrh	r3, [r3, #22]
 801ce90:	3b01      	subs	r3, #1
 801ce92:	b29a      	uxth	r2, r3
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801ce98:	6878      	ldr	r0, [r7, #4]
 801ce9a:	f000 f80d 	bl	801ceb8 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d1db      	bne.n	801ce62 <dhcp_fine_tmr+0xe>
  }
}
 801ceaa:	bf00      	nop
 801ceac:	bf00      	nop
 801ceae:	3708      	adds	r7, #8
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd80      	pop	{r7, pc}
 801ceb4:	2000bbe0 	.word	0x2000bbe0

0801ceb8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b084      	sub	sp, #16
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cec4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	7a5b      	ldrb	r3, [r3, #9]
 801ceca:	2b0c      	cmp	r3, #12
 801cecc:	d003      	beq.n	801ced6 <dhcp_timeout+0x1e>
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	7a5b      	ldrb	r3, [r3, #9]
 801ced2:	2b06      	cmp	r3, #6
 801ced4:	d103      	bne.n	801cede <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801ced6:	6878      	ldr	r0, [r7, #4]
 801ced8:	f000 fa46 	bl	801d368 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801cedc:	e031      	b.n	801cf42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	7a5b      	ldrb	r3, [r3, #9]
 801cee2:	2b01      	cmp	r3, #1
 801cee4:	d10e      	bne.n	801cf04 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	7a9b      	ldrb	r3, [r3, #10]
 801ceea:	2b05      	cmp	r3, #5
 801ceec:	d803      	bhi.n	801cef6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801ceee:	6878      	ldr	r0, [r7, #4]
 801cef0:	f7ff feb6 	bl	801cc60 <dhcp_select>
}
 801cef4:	e025      	b.n	801cf42 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f000 fd3c 	bl	801d974 <dhcp_release>
      dhcp_discover(netif);
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f000 fa33 	bl	801d368 <dhcp_discover>
}
 801cf02:	e01e      	b.n	801cf42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	7a5b      	ldrb	r3, [r3, #9]
 801cf08:	2b08      	cmp	r3, #8
 801cf0a:	d10b      	bne.n	801cf24 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	7a9b      	ldrb	r3, [r3, #10]
 801cf10:	2b01      	cmp	r3, #1
 801cf12:	d803      	bhi.n	801cf1c <dhcp_timeout+0x64>
      dhcp_check(netif);
 801cf14:	6878      	ldr	r0, [r7, #4]
 801cf16:	f7ff fe4b 	bl	801cbb0 <dhcp_check>
}
 801cf1a:	e012      	b.n	801cf42 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801cf1c:	6878      	ldr	r0, [r7, #4]
 801cf1e:	f000 faaf 	bl	801d480 <dhcp_bind>
}
 801cf22:	e00e      	b.n	801cf42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	7a5b      	ldrb	r3, [r3, #9]
 801cf28:	2b03      	cmp	r3, #3
 801cf2a:	d10a      	bne.n	801cf42 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	7a9b      	ldrb	r3, [r3, #10]
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	d803      	bhi.n	801cf3c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801cf34:	6878      	ldr	r0, [r7, #4]
 801cf36:	f000 fc89 	bl	801d84c <dhcp_reboot>
}
 801cf3a:	e002      	b.n	801cf42 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801cf3c:	6878      	ldr	r0, [r7, #4]
 801cf3e:	f000 fa13 	bl	801d368 <dhcp_discover>
}
 801cf42:	bf00      	nop
 801cf44:	3710      	adds	r7, #16
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bd80      	pop	{r7, pc}

0801cf4a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801cf4a:	b580      	push	{r7, lr}
 801cf4c:	b084      	sub	sp, #16
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	7a5b      	ldrb	r3, [r3, #9]
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d007      	beq.n	801cf70 <dhcp_t1_timeout+0x26>
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	7a5b      	ldrb	r3, [r3, #9]
 801cf64:	2b0a      	cmp	r3, #10
 801cf66:	d003      	beq.n	801cf70 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cf6c:	2b05      	cmp	r3, #5
 801cf6e:	d116      	bne.n	801cf9e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	f000 fb5f 	bl	801d634 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	8b5b      	ldrh	r3, [r3, #26]
 801cf7a:	461a      	mov	r2, r3
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	8c1b      	ldrh	r3, [r3, #32]
 801cf80:	1ad3      	subs	r3, r2, r3
 801cf82:	2b01      	cmp	r3, #1
 801cf84:	dd0b      	ble.n	801cf9e <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	8b5b      	ldrh	r3, [r3, #26]
 801cf8a:	461a      	mov	r2, r3
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	8c1b      	ldrh	r3, [r3, #32]
 801cf90:	1ad3      	subs	r3, r2, r3
 801cf92:	0fda      	lsrs	r2, r3, #31
 801cf94:	4413      	add	r3, r2
 801cf96:	105b      	asrs	r3, r3, #1
 801cf98:	b29a      	uxth	r2, r3
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801cf9e:	bf00      	nop
 801cfa0:	3710      	adds	r7, #16
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	bd80      	pop	{r7, pc}

0801cfa6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801cfa6:	b580      	push	{r7, lr}
 801cfa8:	b084      	sub	sp, #16
 801cfaa:	af00      	add	r7, sp, #0
 801cfac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfb2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	7a5b      	ldrb	r3, [r3, #9]
 801cfb8:	2b01      	cmp	r3, #1
 801cfba:	d00b      	beq.n	801cfd4 <dhcp_t2_timeout+0x2e>
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	7a5b      	ldrb	r3, [r3, #9]
 801cfc0:	2b0a      	cmp	r3, #10
 801cfc2:	d007      	beq.n	801cfd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cfc8:	2b05      	cmp	r3, #5
 801cfca:	d003      	beq.n	801cfd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	7a5b      	ldrb	r3, [r3, #9]
 801cfd0:	2b04      	cmp	r3, #4
 801cfd2:	d116      	bne.n	801d002 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f000 fbb3 	bl	801d740 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cfde:	461a      	mov	r2, r3
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	8c1b      	ldrh	r3, [r3, #32]
 801cfe4:	1ad3      	subs	r3, r2, r3
 801cfe6:	2b01      	cmp	r3, #1
 801cfe8:	dd0b      	ble.n	801d002 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cfee:	461a      	mov	r2, r3
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	8c1b      	ldrh	r3, [r3, #32]
 801cff4:	1ad3      	subs	r3, r2, r3
 801cff6:	0fda      	lsrs	r2, r3, #31
 801cff8:	4413      	add	r3, r2
 801cffa:	105b      	asrs	r3, r3, #1
 801cffc:	b29a      	uxth	r2, r3
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801d002:	bf00      	nop
 801d004:	3710      	adds	r7, #16
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}
	...

0801d00c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d018:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	2200      	movs	r2, #0
 801d01e:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	2200      	movs	r2, #0
 801d024:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801d026:	4b27      	ldr	r3, [pc, #156]	@ (801d0c4 <dhcp_handle_ack+0xb8>)
 801d028:	78db      	ldrb	r3, [r3, #3]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d003      	beq.n	801d036 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801d02e:	4b26      	ldr	r3, [pc, #152]	@ (801d0c8 <dhcp_handle_ack+0xbc>)
 801d030:	68da      	ldr	r2, [r3, #12]
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801d036:	4b23      	ldr	r3, [pc, #140]	@ (801d0c4 <dhcp_handle_ack+0xb8>)
 801d038:	791b      	ldrb	r3, [r3, #4]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d004      	beq.n	801d048 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801d03e:	4b22      	ldr	r3, [pc, #136]	@ (801d0c8 <dhcp_handle_ack+0xbc>)
 801d040:	691a      	ldr	r2, [r3, #16]
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	639a      	str	r2, [r3, #56]	@ 0x38
 801d046:	e004      	b.n	801d052 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d04c:	085a      	lsrs	r2, r3, #1
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801d052:	4b1c      	ldr	r3, [pc, #112]	@ (801d0c4 <dhcp_handle_ack+0xb8>)
 801d054:	795b      	ldrb	r3, [r3, #5]
 801d056:	2b00      	cmp	r3, #0
 801d058:	d004      	beq.n	801d064 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801d05a:	4b1b      	ldr	r3, [pc, #108]	@ (801d0c8 <dhcp_handle_ack+0xbc>)
 801d05c:	695a      	ldr	r2, [r3, #20]
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	63da      	str	r2, [r3, #60]	@ 0x3c
 801d062:	e007      	b.n	801d074 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d068:	4613      	mov	r3, r2
 801d06a:	00db      	lsls	r3, r3, #3
 801d06c:	1a9b      	subs	r3, r3, r2
 801d06e:	08da      	lsrs	r2, r3, #3
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	685b      	ldr	r3, [r3, #4]
 801d078:	691a      	ldr	r2, [r3, #16]
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	629a      	str	r2, [r3, #40]	@ 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d07e:	4b11      	ldr	r3, [pc, #68]	@ (801d0c4 <dhcp_handle_ack+0xb8>)
 801d080:	799b      	ldrb	r3, [r3, #6]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d00b      	beq.n	801d09e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801d086:	4b10      	ldr	r3, [pc, #64]	@ (801d0c8 <dhcp_handle_ack+0xbc>)
 801d088:	699b      	ldr	r3, [r3, #24]
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f7 fe27 	bl	8014cde <lwip_htonl>
 801d090:	4602      	mov	r2, r0
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	62da      	str	r2, [r3, #44]	@ 0x2c
    dhcp->subnet_mask_given = 1;
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	2201      	movs	r2, #1
 801d09a:	72da      	strb	r2, [r3, #11]
 801d09c:	e002      	b.n	801d0a4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801d0a4:	4b07      	ldr	r3, [pc, #28]	@ (801d0c4 <dhcp_handle_ack+0xb8>)
 801d0a6:	79db      	ldrb	r3, [r3, #7]
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d007      	beq.n	801d0bc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801d0ac:	4b06      	ldr	r3, [pc, #24]	@ (801d0c8 <dhcp_handle_ack+0xbc>)
 801d0ae:	69db      	ldr	r3, [r3, #28]
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f7f7 fe14 	bl	8014cde <lwip_htonl>
 801d0b6:	4602      	mov	r2, r0
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	631a      	str	r2, [r3, #48]	@ 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801d0bc:	bf00      	nop
 801d0be:	3710      	adds	r7, #16
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}
 801d0c4:	2000be04 	.word	0x2000be04
 801d0c8:	2000bde4 	.word	0x2000bde4

0801d0cc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b084      	sub	sp, #16
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d109      	bne.n	801d0ee <dhcp_start+0x22>
 801d0da:	4b3c      	ldr	r3, [pc, #240]	@ (801d1cc <dhcp_start+0x100>)
 801d0dc:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801d0e0:	493b      	ldr	r1, [pc, #236]	@ (801d1d0 <dhcp_start+0x104>)
 801d0e2:	483c      	ldr	r0, [pc, #240]	@ (801d1d4 <dhcp_start+0x108>)
 801d0e4:	f005 f8b2 	bl	802224c <iprintf>
 801d0e8:	f06f 030f 	mvn.w	r3, #15
 801d0ec:	e069      	b.n	801d1c2 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801d0f4:	f003 0301 	and.w	r3, r3, #1
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d109      	bne.n	801d110 <dhcp_start+0x44>
 801d0fc:	4b33      	ldr	r3, [pc, #204]	@ (801d1cc <dhcp_start+0x100>)
 801d0fe:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801d102:	4935      	ldr	r1, [pc, #212]	@ (801d1d8 <dhcp_start+0x10c>)
 801d104:	4833      	ldr	r0, [pc, #204]	@ (801d1d4 <dhcp_start+0x108>)
 801d106:	f005 f8a1 	bl	802224c <iprintf>
 801d10a:	f06f 030f 	mvn.w	r3, #15
 801d10e:	e058      	b.n	801d1c2 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d114:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d11a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801d11e:	d202      	bcs.n	801d126 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801d120:	f04f 33ff 	mov.w	r3, #4294967295
 801d124:	e04d      	b.n	801d1c2 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801d126:	68fb      	ldr	r3, [r7, #12]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d10d      	bne.n	801d148 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801d12c:	2040      	movs	r0, #64	@ 0x40
 801d12e:	f7f8 f8c5 	bl	80152bc <mem_malloc>
 801d132:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d102      	bne.n	801d140 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801d13a:	f04f 33ff 	mov.w	r3, #4294967295
 801d13e:	e040      	b.n	801d1c2 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	68fa      	ldr	r2, [r7, #12]
 801d144:	625a      	str	r2, [r3, #36]	@ 0x24
 801d146:	e01b      	b.n	801d180 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	68db      	ldr	r3, [r3, #12]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d006      	beq.n	801d15e <dhcp_start+0x92>
 801d150:	4b1e      	ldr	r3, [pc, #120]	@ (801d1cc <dhcp_start+0x100>)
 801d152:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 801d156:	4921      	ldr	r1, [pc, #132]	@ (801d1dc <dhcp_start+0x110>)
 801d158:	481e      	ldr	r0, [pc, #120]	@ (801d1d4 <dhcp_start+0x108>)
 801d15a:	f005 f877 	bl	802224c <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	685b      	ldr	r3, [r3, #4]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d006      	beq.n	801d174 <dhcp_start+0xa8>
 801d166:	4b19      	ldr	r3, [pc, #100]	@ (801d1cc <dhcp_start+0x100>)
 801d168:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801d16c:	491c      	ldr	r1, [pc, #112]	@ (801d1e0 <dhcp_start+0x114>)
 801d16e:	4819      	ldr	r0, [pc, #100]	@ (801d1d4 <dhcp_start+0x108>)
 801d170:	f005 f86c 	bl	802224c <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	7a1b      	ldrb	r3, [r3, #8]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d001      	beq.n	801d180 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d17c:	f7ff fcd4 	bl	801cb28 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801d180:	2240      	movs	r2, #64	@ 0x40
 801d182:	2100      	movs	r1, #0
 801d184:	68f8      	ldr	r0, [r7, #12]
 801d186:	f005 fa37 	bl	80225f8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801d18a:	f7ff fc7b 	bl	801ca84 <dhcp_inc_pcb_refcount>
 801d18e:	4603      	mov	r3, r0
 801d190:	2b00      	cmp	r3, #0
 801d192:	d002      	beq.n	801d19a <dhcp_start+0xce>
    return ERR_MEM;
 801d194:	f04f 33ff 	mov.w	r3, #4294967295
 801d198:	e013      	b.n	801d1c2 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	2201      	movs	r2, #1
 801d19e:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801d1a0:	6878      	ldr	r0, [r7, #4]
 801d1a2:	f000 f8e1 	bl	801d368 <dhcp_discover>
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801d1aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d005      	beq.n	801d1be <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801d1b2:	6878      	ldr	r0, [r7, #4]
 801d1b4:	f000 fc66 	bl	801da84 <dhcp_stop>
    return ERR_MEM;
 801d1b8:	f04f 33ff 	mov.w	r3, #4294967295
 801d1bc:	e001      	b.n	801d1c2 <dhcp_start+0xf6>
  }
  return result;
 801d1be:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	3710      	adds	r7, #16
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	bd80      	pop	{r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	0802739c 	.word	0x0802739c
 801d1d0:	08027448 	.word	0x08027448
 801d1d4:	080273fc 	.word	0x080273fc
 801d1d8:	0802748c 	.word	0x0802748c
 801d1dc:	080274b0 	.word	0x080274b0
 801d1e0:	080274c8 	.word	0x080274c8

0801d1e4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b084      	sub	sp, #16
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1f0:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d01a      	beq.n	801d22e <dhcp_network_changed+0x4a>
    return;
  switch (dhcp->state) {
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	7a5b      	ldrb	r3, [r3, #9]
 801d1fc:	2b0a      	cmp	r3, #10
 801d1fe:	d008      	beq.n	801d212 <dhcp_network_changed+0x2e>
 801d200:	2b0a      	cmp	r3, #10
 801d202:	dc0d      	bgt.n	801d220 <dhcp_network_changed+0x3c>
 801d204:	2b00      	cmp	r3, #0
 801d206:	d014      	beq.n	801d232 <dhcp_network_changed+0x4e>
 801d208:	2b00      	cmp	r3, #0
 801d20a:	db09      	blt.n	801d220 <dhcp_network_changed+0x3c>
 801d20c:	3b03      	subs	r3, #3
 801d20e:	2b02      	cmp	r3, #2
 801d210:	d806      	bhi.n	801d220 <dhcp_network_changed+0x3c>
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	2200      	movs	r2, #0
 801d216:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 801d218:	6878      	ldr	r0, [r7, #4]
 801d21a:	f000 fb17 	bl	801d84c <dhcp_reboot>
    break;
 801d21e:	e009      	b.n	801d234 <dhcp_network_changed+0x50>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	2200      	movs	r2, #0
 801d224:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 801d226:	6878      	ldr	r0, [r7, #4]
 801d228:	f000 f89e 	bl	801d368 <dhcp_discover>
    break;
 801d22c:	e002      	b.n	801d234 <dhcp_network_changed+0x50>
    return;
 801d22e:	bf00      	nop
 801d230:	e000      	b.n	801d234 <dhcp_network_changed+0x50>
    break;
 801d232:	bf00      	nop
  }
}
 801d234:	3710      	adds	r7, #16
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}
	...

0801d23c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b084      	sub	sp, #16
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d107      	bne.n	801d25c <dhcp_arp_reply+0x20>
 801d24c:	4b0e      	ldr	r3, [pc, #56]	@ (801d288 <dhcp_arp_reply+0x4c>)
 801d24e:	f240 327b 	movw	r2, #891	@ 0x37b
 801d252:	490e      	ldr	r1, [pc, #56]	@ (801d28c <dhcp_arp_reply+0x50>)
 801d254:	480e      	ldr	r0, [pc, #56]	@ (801d290 <dhcp_arp_reply+0x54>)
 801d256:	f004 fff9 	bl	802224c <iprintf>
 801d25a:	e012      	b.n	801d282 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d260:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d00c      	beq.n	801d282 <dhcp_arp_reply+0x46>
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	7a5b      	ldrb	r3, [r3, #9]
 801d26c:	2b08      	cmp	r3, #8
 801d26e:	d108      	bne.n	801d282 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801d270:	683b      	ldr	r3, [r7, #0]
 801d272:	681a      	ldr	r2, [r3, #0]
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d278:	429a      	cmp	r2, r3
 801d27a:	d102      	bne.n	801d282 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801d27c:	6878      	ldr	r0, [r7, #4]
 801d27e:	f000 f809 	bl	801d294 <dhcp_decline>
    }
  }
}
 801d282:	3710      	adds	r7, #16
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}
 801d288:	0802739c 	.word	0x0802739c
 801d28c:	08027448 	.word	0x08027448
 801d290:	080273fc 	.word	0x080273fc

0801d294 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b086      	sub	sp, #24
 801d298:	af02      	add	r7, sp, #8
 801d29a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2a0:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801d2a6:	210c      	movs	r1, #12
 801d2a8:	68f8      	ldr	r0, [r7, #12]
 801d2aa:	f000 fc23 	bl	801daf4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801d2ae:	2204      	movs	r2, #4
 801d2b0:	68f9      	ldr	r1, [r7, #12]
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	f001 f8a6 	bl	801e404 <dhcp_create_msg>
 801d2b8:	4603      	mov	r3, r0
 801d2ba:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801d2bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d12a      	bne.n	801d31a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801d2c4:	2204      	movs	r2, #4
 801d2c6:	2132      	movs	r1, #50	@ 0x32
 801d2c8:	68f8      	ldr	r0, [r7, #12]
 801d2ca:	f000 fc2d 	bl	801db28 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f7f7 fd03 	bl	8014cde <lwip_htonl>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	4619      	mov	r1, r3
 801d2dc:	68f8      	ldr	r0, [r7, #12]
 801d2de:	f000 fcbf 	bl	801dc60 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801d2e2:	68f8      	ldr	r0, [r7, #12]
 801d2e4:	f001 fa32 	bl	801e74c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	68da      	ldr	r2, [r3, #12]
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	8a9b      	ldrh	r3, [r3, #20]
 801d2f0:	33f0      	adds	r3, #240	@ 0xf0
 801d2f2:	b29b      	uxth	r3, r3
 801d2f4:	4619      	mov	r1, r3
 801d2f6:	4610      	mov	r0, r2
 801d2f8:	f7f8 fe16 	bl	8015f28 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801d2fc:	4b16      	ldr	r3, [pc, #88]	@ (801d358 <dhcp_decline+0xc4>)
 801d2fe:	6818      	ldr	r0, [r3, #0]
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	68d9      	ldr	r1, [r3, #12]
 801d304:	4b15      	ldr	r3, [pc, #84]	@ (801d35c <dhcp_decline+0xc8>)
 801d306:	9301      	str	r3, [sp, #4]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	9300      	str	r3, [sp, #0]
 801d30c:	2343      	movs	r3, #67	@ 0x43
 801d30e:	4a14      	ldr	r2, [pc, #80]	@ (801d360 <dhcp_decline+0xcc>)
 801d310:	f7ff f9b2 	bl	801c678 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801d314:	68f8      	ldr	r0, [r7, #12]
 801d316:	f001 f9d7 	bl	801e6c8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	7a9b      	ldrb	r3, [r3, #10]
 801d31e:	2bff      	cmp	r3, #255	@ 0xff
 801d320:	d005      	beq.n	801d32e <dhcp_decline+0x9a>
    dhcp->tries++;
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	7a9b      	ldrb	r3, [r3, #10]
 801d326:	3301      	adds	r3, #1
 801d328:	b2da      	uxtb	r2, r3
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801d32e:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d332:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d334:	893b      	ldrh	r3, [r7, #8]
 801d336:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d33a:	4a0a      	ldr	r2, [pc, #40]	@ (801d364 <dhcp_decline+0xd0>)
 801d33c:	fb82 1203 	smull	r1, r2, r2, r3
 801d340:	1152      	asrs	r2, r2, #5
 801d342:	17db      	asrs	r3, r3, #31
 801d344:	1ad3      	subs	r3, r2, r3
 801d346:	b29a      	uxth	r2, r3
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d34c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d350:	4618      	mov	r0, r3
 801d352:	3710      	adds	r7, #16
 801d354:	46bd      	mov	sp, r7
 801d356:	bd80      	pop	{r7, pc}
 801d358:	2000be0c 	.word	0x2000be0c
 801d35c:	08032ed0 	.word	0x08032ed0
 801d360:	08032ed4 	.word	0x08032ed4
 801d364:	10624dd3 	.word	0x10624dd3

0801d368 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801d368:	b580      	push	{r7, lr}
 801d36a:	b088      	sub	sp, #32
 801d36c:	af02      	add	r7, sp, #8
 801d36e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d374:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801d376:	2300      	movs	r3, #0
 801d378:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801d37a:	693b      	ldr	r3, [r7, #16]
 801d37c:	2200      	movs	r2, #0
 801d37e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801d380:	2106      	movs	r1, #6
 801d382:	6938      	ldr	r0, [r7, #16]
 801d384:	f000 fbb6 	bl	801daf4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801d388:	2201      	movs	r2, #1
 801d38a:	6939      	ldr	r1, [r7, #16]
 801d38c:	6878      	ldr	r0, [r7, #4]
 801d38e:	f001 f839 	bl	801e404 <dhcp_create_msg>
 801d392:	4603      	mov	r3, r0
 801d394:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d13b      	bne.n	801d416 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d39e:	2202      	movs	r2, #2
 801d3a0:	2139      	movs	r1, #57	@ 0x39
 801d3a2:	6938      	ldr	r0, [r7, #16]
 801d3a4:	f000 fbc0 	bl	801db28 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d3ac:	4619      	mov	r1, r3
 801d3ae:	6938      	ldr	r0, [r7, #16]
 801d3b0:	f000 fc1c 	bl	801dbec <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d3b4:	2203      	movs	r2, #3
 801d3b6:	2137      	movs	r1, #55	@ 0x37
 801d3b8:	6938      	ldr	r0, [r7, #16]
 801d3ba:	f000 fbb5 	bl	801db28 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3be:	2300      	movs	r3, #0
 801d3c0:	75fb      	strb	r3, [r7, #23]
 801d3c2:	e009      	b.n	801d3d8 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d3c4:	7dfb      	ldrb	r3, [r7, #23]
 801d3c6:	4a29      	ldr	r2, [pc, #164]	@ (801d46c <dhcp_discover+0x104>)
 801d3c8:	5cd3      	ldrb	r3, [r2, r3]
 801d3ca:	4619      	mov	r1, r3
 801d3cc:	6938      	ldr	r0, [r7, #16]
 801d3ce:	f000 fbe5 	bl	801db9c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3d2:	7dfb      	ldrb	r3, [r7, #23]
 801d3d4:	3301      	adds	r3, #1
 801d3d6:	75fb      	strb	r3, [r7, #23]
 801d3d8:	7dfb      	ldrb	r3, [r7, #23]
 801d3da:	2b02      	cmp	r3, #2
 801d3dc:	d9f2      	bls.n	801d3c4 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801d3de:	6938      	ldr	r0, [r7, #16]
 801d3e0:	f001 f9b4 	bl	801e74c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d3e4:	693b      	ldr	r3, [r7, #16]
 801d3e6:	68da      	ldr	r2, [r3, #12]
 801d3e8:	693b      	ldr	r3, [r7, #16]
 801d3ea:	8a9b      	ldrh	r3, [r3, #20]
 801d3ec:	33f0      	adds	r3, #240	@ 0xf0
 801d3ee:	b29b      	uxth	r3, r3
 801d3f0:	4619      	mov	r1, r3
 801d3f2:	4610      	mov	r0, r2
 801d3f4:	f7f8 fd98 	bl	8015f28 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801d3f8:	4b1d      	ldr	r3, [pc, #116]	@ (801d470 <dhcp_discover+0x108>)
 801d3fa:	6818      	ldr	r0, [r3, #0]
 801d3fc:	693b      	ldr	r3, [r7, #16]
 801d3fe:	68d9      	ldr	r1, [r3, #12]
 801d400:	4b1c      	ldr	r3, [pc, #112]	@ (801d474 <dhcp_discover+0x10c>)
 801d402:	9301      	str	r3, [sp, #4]
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	9300      	str	r3, [sp, #0]
 801d408:	2343      	movs	r3, #67	@ 0x43
 801d40a:	4a1b      	ldr	r2, [pc, #108]	@ (801d478 <dhcp_discover+0x110>)
 801d40c:	f7ff f934 	bl	801c678 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 801d410:	6938      	ldr	r0, [r7, #16]
 801d412:	f001 f959 	bl	801e6c8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d416:	693b      	ldr	r3, [r7, #16]
 801d418:	7a9b      	ldrb	r3, [r3, #10]
 801d41a:	2bff      	cmp	r3, #255	@ 0xff
 801d41c:	d005      	beq.n	801d42a <dhcp_discover+0xc2>
    dhcp->tries++;
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	7a9b      	ldrb	r3, [r3, #10]
 801d422:	3301      	adds	r3, #1
 801d424:	b2da      	uxtb	r2, r3
 801d426:	693b      	ldr	r3, [r7, #16]
 801d428:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801d42a:	693b      	ldr	r3, [r7, #16]
 801d42c:	7a9b      	ldrb	r3, [r3, #10]
 801d42e:	2b05      	cmp	r3, #5
 801d430:	d807      	bhi.n	801d442 <dhcp_discover+0xda>
 801d432:	693b      	ldr	r3, [r7, #16]
 801d434:	7a9b      	ldrb	r3, [r3, #10]
 801d436:	461a      	mov	r2, r3
 801d438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d43c:	4093      	lsls	r3, r2
 801d43e:	b29b      	uxth	r3, r3
 801d440:	e001      	b.n	801d446 <dhcp_discover+0xde>
 801d442:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801d446:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d448:	89bb      	ldrh	r3, [r7, #12]
 801d44a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d44e:	4a0b      	ldr	r2, [pc, #44]	@ (801d47c <dhcp_discover+0x114>)
 801d450:	fb82 1203 	smull	r1, r2, r2, r3
 801d454:	1152      	asrs	r2, r2, #5
 801d456:	17db      	asrs	r3, r3, #31
 801d458:	1ad3      	subs	r3, r2, r3
 801d45a:	b29a      	uxth	r2, r3
 801d45c:	693b      	ldr	r3, [r7, #16]
 801d45e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d464:	4618      	mov	r0, r3
 801d466:	3718      	adds	r7, #24
 801d468:	46bd      	mov	sp, r7
 801d46a:	bd80      	pop	{r7, pc}
 801d46c:	20000124 	.word	0x20000124
 801d470:	2000be0c 	.word	0x2000be0c
 801d474:	08032ed0 	.word	0x08032ed0
 801d478:	08032ed4 	.word	0x08032ed4
 801d47c:	10624dd3 	.word	0x10624dd3

0801d480 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b088      	sub	sp, #32
 801d484:	af00      	add	r7, sp, #0
 801d486:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d107      	bne.n	801d49e <dhcp_bind+0x1e>
 801d48e:	4b64      	ldr	r3, [pc, #400]	@ (801d620 <dhcp_bind+0x1a0>)
 801d490:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d494:	4963      	ldr	r1, [pc, #396]	@ (801d624 <dhcp_bind+0x1a4>)
 801d496:	4864      	ldr	r0, [pc, #400]	@ (801d628 <dhcp_bind+0x1a8>)
 801d498:	f004 fed8 	bl	802224c <iprintf>
 801d49c:	e0bc      	b.n	801d618 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4a2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d4a4:	69bb      	ldr	r3, [r7, #24]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d107      	bne.n	801d4ba <dhcp_bind+0x3a>
 801d4aa:	4b5d      	ldr	r3, [pc, #372]	@ (801d620 <dhcp_bind+0x1a0>)
 801d4ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801d4b0:	495e      	ldr	r1, [pc, #376]	@ (801d62c <dhcp_bind+0x1ac>)
 801d4b2:	485d      	ldr	r0, [pc, #372]	@ (801d628 <dhcp_bind+0x1a8>)
 801d4b4:	f004 feca 	bl	802224c <iprintf>
 801d4b8:	e0ae      	b.n	801d618 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801d4ba:	69bb      	ldr	r3, [r7, #24]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d4c0:	69bb      	ldr	r3, [r7, #24]
 801d4c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4c8:	d019      	beq.n	801d4fe <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d4ca:	69bb      	ldr	r3, [r7, #24]
 801d4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d4ce:	331e      	adds	r3, #30
 801d4d0:	4a57      	ldr	r2, [pc, #348]	@ (801d630 <dhcp_bind+0x1b0>)
 801d4d2:	fba2 2303 	umull	r2, r3, r2, r3
 801d4d6:	095b      	lsrs	r3, r3, #5
 801d4d8:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801d4da:	69fb      	ldr	r3, [r7, #28]
 801d4dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d4e0:	d302      	bcc.n	801d4e8 <dhcp_bind+0x68>
       timeout = 0xffff;
 801d4e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d4e6:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801d4e8:	69fb      	ldr	r3, [r7, #28]
 801d4ea:	b29a      	uxth	r2, r3
 801d4ec:	69bb      	ldr	r3, [r7, #24]
 801d4ee:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 801d4f0:	69bb      	ldr	r3, [r7, #24]
 801d4f2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d102      	bne.n	801d4fe <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801d4f8:	69bb      	ldr	r3, [r7, #24]
 801d4fa:	2201      	movs	r2, #1
 801d4fc:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d4fe:	69bb      	ldr	r3, [r7, #24]
 801d500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d502:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d506:	d01d      	beq.n	801d544 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d508:	69bb      	ldr	r3, [r7, #24]
 801d50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d50c:	331e      	adds	r3, #30
 801d50e:	4a48      	ldr	r2, [pc, #288]	@ (801d630 <dhcp_bind+0x1b0>)
 801d510:	fba2 2303 	umull	r2, r3, r2, r3
 801d514:	095b      	lsrs	r3, r3, #5
 801d516:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d518:	69fb      	ldr	r3, [r7, #28]
 801d51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d51e:	d302      	bcc.n	801d526 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801d520:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d524:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801d526:	69fb      	ldr	r3, [r7, #28]
 801d528:	b29a      	uxth	r2, r3
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801d52e:	69bb      	ldr	r3, [r7, #24]
 801d530:	8b1b      	ldrh	r3, [r3, #24]
 801d532:	2b00      	cmp	r3, #0
 801d534:	d102      	bne.n	801d53c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801d536:	69bb      	ldr	r3, [r7, #24]
 801d538:	2201      	movs	r2, #1
 801d53a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d53c:	69bb      	ldr	r3, [r7, #24]
 801d53e:	8b1a      	ldrh	r2, [r3, #24]
 801d540:	69bb      	ldr	r3, [r7, #24]
 801d542:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d544:	69bb      	ldr	r3, [r7, #24]
 801d546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d54c:	d01d      	beq.n	801d58a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d54e:	69bb      	ldr	r3, [r7, #24]
 801d550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d552:	331e      	adds	r3, #30
 801d554:	4a36      	ldr	r2, [pc, #216]	@ (801d630 <dhcp_bind+0x1b0>)
 801d556:	fba2 2303 	umull	r2, r3, r2, r3
 801d55a:	095b      	lsrs	r3, r3, #5
 801d55c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801d55e:	69fb      	ldr	r3, [r7, #28]
 801d560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d564:	d302      	bcc.n	801d56c <dhcp_bind+0xec>
      timeout = 0xffff;
 801d566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d56a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801d56c:	69fb      	ldr	r3, [r7, #28]
 801d56e:	b29a      	uxth	r2, r3
 801d570:	69bb      	ldr	r3, [r7, #24]
 801d572:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 801d574:	69bb      	ldr	r3, [r7, #24]
 801d576:	8b5b      	ldrh	r3, [r3, #26]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d102      	bne.n	801d582 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d57c:	69bb      	ldr	r3, [r7, #24]
 801d57e:	2201      	movs	r2, #1
 801d580:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d582:	69bb      	ldr	r3, [r7, #24]
 801d584:	8b5a      	ldrh	r2, [r3, #26]
 801d586:	69bb      	ldr	r3, [r7, #24]
 801d588:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d58a:	69bb      	ldr	r3, [r7, #24]
 801d58c:	8b1a      	ldrh	r2, [r3, #24]
 801d58e:	69bb      	ldr	r3, [r7, #24]
 801d590:	8b5b      	ldrh	r3, [r3, #26]
 801d592:	429a      	cmp	r2, r3
 801d594:	d306      	bcc.n	801d5a4 <dhcp_bind+0x124>
 801d596:	69bb      	ldr	r3, [r7, #24]
 801d598:	8b5b      	ldrh	r3, [r3, #26]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d002      	beq.n	801d5a4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d59e:	69bb      	ldr	r3, [r7, #24]
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801d5a4:	69bb      	ldr	r3, [r7, #24]
 801d5a6:	7adb      	ldrb	r3, [r3, #11]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d003      	beq.n	801d5b4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d5ac:	69bb      	ldr	r3, [r7, #24]
 801d5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5b0:	613b      	str	r3, [r7, #16]
 801d5b2:	e014      	b.n	801d5de <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d5b4:	69bb      	ldr	r3, [r7, #24]
 801d5b6:	3328      	adds	r3, #40	@ 0x28
 801d5b8:	781b      	ldrb	r3, [r3, #0]
 801d5ba:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	db02      	blt.n	801d5ca <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d5c4:	23ff      	movs	r3, #255	@ 0xff
 801d5c6:	613b      	str	r3, [r7, #16]
 801d5c8:	e009      	b.n	801d5de <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d5ca:	7dfb      	ldrb	r3, [r7, #23]
 801d5cc:	2bbf      	cmp	r3, #191	@ 0xbf
 801d5ce:	d903      	bls.n	801d5d8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d5d0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801d5d4:	613b      	str	r3, [r7, #16]
 801d5d6:	e002      	b.n	801d5de <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d5d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d5dc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d5de:	69bb      	ldr	r3, [r7, #24]
 801d5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d5e2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d108      	bne.n	801d5fc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d5ea:	69bb      	ldr	r3, [r7, #24]
 801d5ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d5ee:	693b      	ldr	r3, [r7, #16]
 801d5f0:	4013      	ands	r3, r2
 801d5f2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d5fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d5fc:	210a      	movs	r1, #10
 801d5fe:	69b8      	ldr	r0, [r7, #24]
 801d600:	f000 fa78 	bl	801daf4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d604:	69bb      	ldr	r3, [r7, #24]
 801d606:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801d60a:	f107 030c 	add.w	r3, r7, #12
 801d60e:	f107 0210 	add.w	r2, r7, #16
 801d612:	6878      	ldr	r0, [r7, #4]
 801d614:	f7f8 f8e0 	bl	80157d8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d618:	3720      	adds	r7, #32
 801d61a:	46bd      	mov	sp, r7
 801d61c:	bd80      	pop	{r7, pc}
 801d61e:	bf00      	nop
 801d620:	0802739c 	.word	0x0802739c
 801d624:	080274dc 	.word	0x080274dc
 801d628:	080273fc 	.word	0x080273fc
 801d62c:	080274f8 	.word	0x080274f8
 801d630:	88888889 	.word	0x88888889

0801d634 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d634:	b580      	push	{r7, lr}
 801d636:	b088      	sub	sp, #32
 801d638:	af02      	add	r7, sp, #8
 801d63a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d640:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d642:	2105      	movs	r1, #5
 801d644:	6938      	ldr	r0, [r7, #16]
 801d646:	f000 fa55 	bl	801daf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d64a:	2203      	movs	r2, #3
 801d64c:	6939      	ldr	r1, [r7, #16]
 801d64e:	6878      	ldr	r0, [r7, #4]
 801d650:	f000 fed8 	bl	801e404 <dhcp_create_msg>
 801d654:	4603      	mov	r3, r0
 801d656:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d13b      	bne.n	801d6d8 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d660:	2202      	movs	r2, #2
 801d662:	2139      	movs	r1, #57	@ 0x39
 801d664:	6938      	ldr	r0, [r7, #16]
 801d666:	f000 fa5f 	bl	801db28 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d66e:	4619      	mov	r1, r3
 801d670:	6938      	ldr	r0, [r7, #16]
 801d672:	f000 fabb 	bl	801dbec <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d676:	2203      	movs	r2, #3
 801d678:	2137      	movs	r1, #55	@ 0x37
 801d67a:	6938      	ldr	r0, [r7, #16]
 801d67c:	f000 fa54 	bl	801db28 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d680:	2300      	movs	r3, #0
 801d682:	75fb      	strb	r3, [r7, #23]
 801d684:	e009      	b.n	801d69a <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d686:	7dfb      	ldrb	r3, [r7, #23]
 801d688:	4a2a      	ldr	r2, [pc, #168]	@ (801d734 <dhcp_renew+0x100>)
 801d68a:	5cd3      	ldrb	r3, [r2, r3]
 801d68c:	4619      	mov	r1, r3
 801d68e:	6938      	ldr	r0, [r7, #16]
 801d690:	f000 fa84 	bl	801db9c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d694:	7dfb      	ldrb	r3, [r7, #23]
 801d696:	3301      	adds	r3, #1
 801d698:	75fb      	strb	r3, [r7, #23]
 801d69a:	7dfb      	ldrb	r3, [r7, #23]
 801d69c:	2b02      	cmp	r3, #2
 801d69e:	d9f2      	bls.n	801d686 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 801d6a0:	6938      	ldr	r0, [r7, #16]
 801d6a2:	f001 f853 	bl	801e74c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d6a6:	693b      	ldr	r3, [r7, #16]
 801d6a8:	68da      	ldr	r2, [r3, #12]
 801d6aa:	693b      	ldr	r3, [r7, #16]
 801d6ac:	8a9b      	ldrh	r3, [r3, #20]
 801d6ae:	33f0      	adds	r3, #240	@ 0xf0
 801d6b0:	b29b      	uxth	r3, r3
 801d6b2:	4619      	mov	r1, r3
 801d6b4:	4610      	mov	r0, r2
 801d6b6:	f7f8 fc37 	bl	8015f28 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801d6ba:	4b1f      	ldr	r3, [pc, #124]	@ (801d738 <dhcp_renew+0x104>)
 801d6bc:	6818      	ldr	r0, [r3, #0]
 801d6be:	693b      	ldr	r3, [r7, #16]
 801d6c0:	68d9      	ldr	r1, [r3, #12]
 801d6c2:	693b      	ldr	r3, [r7, #16]
 801d6c4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	9300      	str	r3, [sp, #0]
 801d6cc:	2343      	movs	r3, #67	@ 0x43
 801d6ce:	f7fe ff95 	bl	801c5fc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d6d2:	6938      	ldr	r0, [r7, #16]
 801d6d4:	f000 fff8 	bl	801e6c8 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d6d8:	693b      	ldr	r3, [r7, #16]
 801d6da:	7a9b      	ldrb	r3, [r3, #10]
 801d6dc:	2bff      	cmp	r3, #255	@ 0xff
 801d6de:	d005      	beq.n	801d6ec <dhcp_renew+0xb8>
    dhcp->tries++;
 801d6e0:	693b      	ldr	r3, [r7, #16]
 801d6e2:	7a9b      	ldrb	r3, [r3, #10]
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	b2da      	uxtb	r2, r3
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801d6ec:	693b      	ldr	r3, [r7, #16]
 801d6ee:	7a9b      	ldrb	r3, [r3, #10]
 801d6f0:	2b09      	cmp	r3, #9
 801d6f2:	d809      	bhi.n	801d708 <dhcp_renew+0xd4>
 801d6f4:	693b      	ldr	r3, [r7, #16]
 801d6f6:	7a9b      	ldrb	r3, [r3, #10]
 801d6f8:	461a      	mov	r2, r3
 801d6fa:	0152      	lsls	r2, r2, #5
 801d6fc:	1ad2      	subs	r2, r2, r3
 801d6fe:	0092      	lsls	r2, r2, #2
 801d700:	4413      	add	r3, r2
 801d702:	011b      	lsls	r3, r3, #4
 801d704:	b29b      	uxth	r3, r3
 801d706:	e001      	b.n	801d70c <dhcp_renew+0xd8>
 801d708:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801d70c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d70e:	89bb      	ldrh	r3, [r7, #12]
 801d710:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d714:	4a09      	ldr	r2, [pc, #36]	@ (801d73c <dhcp_renew+0x108>)
 801d716:	fb82 1203 	smull	r1, r2, r2, r3
 801d71a:	1152      	asrs	r2, r2, #5
 801d71c:	17db      	asrs	r3, r3, #31
 801d71e:	1ad3      	subs	r3, r2, r3
 801d720:	b29a      	uxth	r2, r3
 801d722:	693b      	ldr	r3, [r7, #16]
 801d724:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d72a:	4618      	mov	r0, r3
 801d72c:	3718      	adds	r7, #24
 801d72e:	46bd      	mov	sp, r7
 801d730:	bd80      	pop	{r7, pc}
 801d732:	bf00      	nop
 801d734:	20000124 	.word	0x20000124
 801d738:	2000be0c 	.word	0x2000be0c
 801d73c:	10624dd3 	.word	0x10624dd3

0801d740 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b088      	sub	sp, #32
 801d744:	af02      	add	r7, sp, #8
 801d746:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d74c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d74e:	2104      	movs	r1, #4
 801d750:	6938      	ldr	r0, [r7, #16]
 801d752:	f000 f9cf 	bl	801daf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d756:	2203      	movs	r2, #3
 801d758:	6939      	ldr	r1, [r7, #16]
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	f000 fe52 	bl	801e404 <dhcp_create_msg>
 801d760:	4603      	mov	r3, r0
 801d762:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d139      	bne.n	801d7e0 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d76c:	2202      	movs	r2, #2
 801d76e:	2139      	movs	r1, #57	@ 0x39
 801d770:	6938      	ldr	r0, [r7, #16]
 801d772:	f000 f9d9 	bl	801db28 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d77a:	4619      	mov	r1, r3
 801d77c:	6938      	ldr	r0, [r7, #16]
 801d77e:	f000 fa35 	bl	801dbec <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d782:	2203      	movs	r2, #3
 801d784:	2137      	movs	r1, #55	@ 0x37
 801d786:	6938      	ldr	r0, [r7, #16]
 801d788:	f000 f9ce 	bl	801db28 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d78c:	2300      	movs	r3, #0
 801d78e:	75fb      	strb	r3, [r7, #23]
 801d790:	e009      	b.n	801d7a6 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d792:	7dfb      	ldrb	r3, [r7, #23]
 801d794:	4a29      	ldr	r2, [pc, #164]	@ (801d83c <dhcp_rebind+0xfc>)
 801d796:	5cd3      	ldrb	r3, [r2, r3]
 801d798:	4619      	mov	r1, r3
 801d79a:	6938      	ldr	r0, [r7, #16]
 801d79c:	f000 f9fe 	bl	801db9c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d7a0:	7dfb      	ldrb	r3, [r7, #23]
 801d7a2:	3301      	adds	r3, #1
 801d7a4:	75fb      	strb	r3, [r7, #23]
 801d7a6:	7dfb      	ldrb	r3, [r7, #23]
 801d7a8:	2b02      	cmp	r3, #2
 801d7aa:	d9f2      	bls.n	801d792 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801d7ac:	6938      	ldr	r0, [r7, #16]
 801d7ae:	f000 ffcd 	bl	801e74c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d7b2:	693b      	ldr	r3, [r7, #16]
 801d7b4:	68da      	ldr	r2, [r3, #12]
 801d7b6:	693b      	ldr	r3, [r7, #16]
 801d7b8:	8a9b      	ldrh	r3, [r3, #20]
 801d7ba:	33f0      	adds	r3, #240	@ 0xf0
 801d7bc:	b29b      	uxth	r3, r3
 801d7be:	4619      	mov	r1, r3
 801d7c0:	4610      	mov	r0, r2
 801d7c2:	f7f8 fbb1 	bl	8015f28 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d7c6:	4b1e      	ldr	r3, [pc, #120]	@ (801d840 <dhcp_rebind+0x100>)
 801d7c8:	6818      	ldr	r0, [r3, #0]
 801d7ca:	693b      	ldr	r3, [r7, #16]
 801d7cc:	68d9      	ldr	r1, [r3, #12]
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	9300      	str	r3, [sp, #0]
 801d7d2:	2343      	movs	r3, #67	@ 0x43
 801d7d4:	4a1b      	ldr	r2, [pc, #108]	@ (801d844 <dhcp_rebind+0x104>)
 801d7d6:	f7fe ff11 	bl	801c5fc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d7da:	6938      	ldr	r0, [r7, #16]
 801d7dc:	f000 ff74 	bl	801e6c8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d7e0:	693b      	ldr	r3, [r7, #16]
 801d7e2:	7a9b      	ldrb	r3, [r3, #10]
 801d7e4:	2bff      	cmp	r3, #255	@ 0xff
 801d7e6:	d005      	beq.n	801d7f4 <dhcp_rebind+0xb4>
    dhcp->tries++;
 801d7e8:	693b      	ldr	r3, [r7, #16]
 801d7ea:	7a9b      	ldrb	r3, [r3, #10]
 801d7ec:	3301      	adds	r3, #1
 801d7ee:	b2da      	uxtb	r2, r3
 801d7f0:	693b      	ldr	r3, [r7, #16]
 801d7f2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d7f4:	693b      	ldr	r3, [r7, #16]
 801d7f6:	7a9b      	ldrb	r3, [r3, #10]
 801d7f8:	2b09      	cmp	r3, #9
 801d7fa:	d809      	bhi.n	801d810 <dhcp_rebind+0xd0>
 801d7fc:	693b      	ldr	r3, [r7, #16]
 801d7fe:	7a9b      	ldrb	r3, [r3, #10]
 801d800:	461a      	mov	r2, r3
 801d802:	0152      	lsls	r2, r2, #5
 801d804:	1ad2      	subs	r2, r2, r3
 801d806:	0092      	lsls	r2, r2, #2
 801d808:	4413      	add	r3, r2
 801d80a:	00db      	lsls	r3, r3, #3
 801d80c:	b29b      	uxth	r3, r3
 801d80e:	e001      	b.n	801d814 <dhcp_rebind+0xd4>
 801d810:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d814:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d816:	89bb      	ldrh	r3, [r7, #12]
 801d818:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d81c:	4a0a      	ldr	r2, [pc, #40]	@ (801d848 <dhcp_rebind+0x108>)
 801d81e:	fb82 1203 	smull	r1, r2, r2, r3
 801d822:	1152      	asrs	r2, r2, #5
 801d824:	17db      	asrs	r3, r3, #31
 801d826:	1ad3      	subs	r3, r2, r3
 801d828:	b29a      	uxth	r2, r3
 801d82a:	693b      	ldr	r3, [r7, #16]
 801d82c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d832:	4618      	mov	r0, r3
 801d834:	3718      	adds	r7, #24
 801d836:	46bd      	mov	sp, r7
 801d838:	bd80      	pop	{r7, pc}
 801d83a:	bf00      	nop
 801d83c:	20000124 	.word	0x20000124
 801d840:	2000be0c 	.word	0x2000be0c
 801d844:	08032ed4 	.word	0x08032ed4
 801d848:	10624dd3 	.word	0x10624dd3

0801d84c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b088      	sub	sp, #32
 801d850:	af02      	add	r7, sp, #8
 801d852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d858:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d85a:	2103      	movs	r1, #3
 801d85c:	6938      	ldr	r0, [r7, #16]
 801d85e:	f000 f949 	bl	801daf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d862:	2203      	movs	r2, #3
 801d864:	6939      	ldr	r1, [r7, #16]
 801d866:	6878      	ldr	r0, [r7, #4]
 801d868:	f000 fdcc 	bl	801e404 <dhcp_create_msg>
 801d86c:	4603      	mov	r3, r0
 801d86e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d147      	bne.n	801d908 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d878:	2202      	movs	r2, #2
 801d87a:	2139      	movs	r1, #57	@ 0x39
 801d87c:	6938      	ldr	r0, [r7, #16]
 801d87e:	f000 f953 	bl	801db28 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d882:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801d886:	6938      	ldr	r0, [r7, #16]
 801d888:	f000 f9b0 	bl	801dbec <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801d88c:	2204      	movs	r2, #4
 801d88e:	2132      	movs	r1, #50	@ 0x32
 801d890:	6938      	ldr	r0, [r7, #16]
 801d892:	f000 f949 	bl	801db28 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d89a:	4618      	mov	r0, r3
 801d89c:	f7f7 fa1f 	bl	8014cde <lwip_htonl>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	6938      	ldr	r0, [r7, #16]
 801d8a6:	f000 f9db 	bl	801dc60 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d8aa:	2203      	movs	r2, #3
 801d8ac:	2137      	movs	r1, #55	@ 0x37
 801d8ae:	6938      	ldr	r0, [r7, #16]
 801d8b0:	f000 f93a 	bl	801db28 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	75fb      	strb	r3, [r7, #23]
 801d8b8:	e009      	b.n	801d8ce <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d8ba:	7dfb      	ldrb	r3, [r7, #23]
 801d8bc:	4a29      	ldr	r2, [pc, #164]	@ (801d964 <dhcp_reboot+0x118>)
 801d8be:	5cd3      	ldrb	r3, [r2, r3]
 801d8c0:	4619      	mov	r1, r3
 801d8c2:	6938      	ldr	r0, [r7, #16]
 801d8c4:	f000 f96a 	bl	801db9c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d8c8:	7dfb      	ldrb	r3, [r7, #23]
 801d8ca:	3301      	adds	r3, #1
 801d8cc:	75fb      	strb	r3, [r7, #23]
 801d8ce:	7dfb      	ldrb	r3, [r7, #23]
 801d8d0:	2b02      	cmp	r3, #2
 801d8d2:	d9f2      	bls.n	801d8ba <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801d8d4:	6938      	ldr	r0, [r7, #16]
 801d8d6:	f000 ff39 	bl	801e74c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d8da:	693b      	ldr	r3, [r7, #16]
 801d8dc:	68da      	ldr	r2, [r3, #12]
 801d8de:	693b      	ldr	r3, [r7, #16]
 801d8e0:	8a9b      	ldrh	r3, [r3, #20]
 801d8e2:	33f0      	adds	r3, #240	@ 0xf0
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	4619      	mov	r1, r3
 801d8e8:	4610      	mov	r0, r2
 801d8ea:	f7f8 fb1d 	bl	8015f28 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d8ee:	4b1e      	ldr	r3, [pc, #120]	@ (801d968 <dhcp_reboot+0x11c>)
 801d8f0:	6818      	ldr	r0, [r3, #0]
 801d8f2:	693b      	ldr	r3, [r7, #16]
 801d8f4:	68d9      	ldr	r1, [r3, #12]
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	9300      	str	r3, [sp, #0]
 801d8fa:	2343      	movs	r3, #67	@ 0x43
 801d8fc:	4a1b      	ldr	r2, [pc, #108]	@ (801d96c <dhcp_reboot+0x120>)
 801d8fe:	f7fe fe7d 	bl	801c5fc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d902:	6938      	ldr	r0, [r7, #16]
 801d904:	f000 fee0 	bl	801e6c8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d908:	693b      	ldr	r3, [r7, #16]
 801d90a:	7a9b      	ldrb	r3, [r3, #10]
 801d90c:	2bff      	cmp	r3, #255	@ 0xff
 801d90e:	d005      	beq.n	801d91c <dhcp_reboot+0xd0>
    dhcp->tries++;
 801d910:	693b      	ldr	r3, [r7, #16]
 801d912:	7a9b      	ldrb	r3, [r3, #10]
 801d914:	3301      	adds	r3, #1
 801d916:	b2da      	uxtb	r2, r3
 801d918:	693b      	ldr	r3, [r7, #16]
 801d91a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d91c:	693b      	ldr	r3, [r7, #16]
 801d91e:	7a9b      	ldrb	r3, [r3, #10]
 801d920:	2b09      	cmp	r3, #9
 801d922:	d809      	bhi.n	801d938 <dhcp_reboot+0xec>
 801d924:	693b      	ldr	r3, [r7, #16]
 801d926:	7a9b      	ldrb	r3, [r3, #10]
 801d928:	461a      	mov	r2, r3
 801d92a:	0152      	lsls	r2, r2, #5
 801d92c:	1ad2      	subs	r2, r2, r3
 801d92e:	0092      	lsls	r2, r2, #2
 801d930:	4413      	add	r3, r2
 801d932:	00db      	lsls	r3, r3, #3
 801d934:	b29b      	uxth	r3, r3
 801d936:	e001      	b.n	801d93c <dhcp_reboot+0xf0>
 801d938:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d93c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d93e:	89bb      	ldrh	r3, [r7, #12]
 801d940:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d944:	4a0a      	ldr	r2, [pc, #40]	@ (801d970 <dhcp_reboot+0x124>)
 801d946:	fb82 1203 	smull	r1, r2, r2, r3
 801d94a:	1152      	asrs	r2, r2, #5
 801d94c:	17db      	asrs	r3, r3, #31
 801d94e:	1ad3      	subs	r3, r2, r3
 801d950:	b29a      	uxth	r2, r3
 801d952:	693b      	ldr	r3, [r7, #16]
 801d954:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3718      	adds	r7, #24
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}
 801d962:	bf00      	nop
 801d964:	20000124 	.word	0x20000124
 801d968:	2000be0c 	.word	0x2000be0c
 801d96c:	08032ed4 	.word	0x08032ed4
 801d970:	10624dd3 	.word	0x10624dd3

0801d974 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b088      	sub	sp, #32
 801d978:	af02      	add	r7, sp, #8
 801d97a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d980:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d102      	bne.n	801d98e <dhcp_release+0x1a>
    return ERR_ARG;
 801d988:	f06f 030f 	mvn.w	r3, #15
 801d98c:	e072      	b.n	801da74 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d98e:	697b      	ldr	r3, [r7, #20]
 801d990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d992:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801d994:	6878      	ldr	r0, [r7, #4]
 801d996:	f000 ff33 	bl	801e800 <dhcp_supplied_address>
 801d99a:	4603      	mov	r3, r0
 801d99c:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d99e:	2100      	movs	r1, #0
 801d9a0:	6978      	ldr	r0, [r7, #20]
 801d9a2:	f000 f8a7 	bl	801daf4 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d9a6:	697b      	ldr	r3, [r7, #20]
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d9ac:	697b      	ldr	r3, [r7, #20]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d9b2:	697b      	ldr	r3, [r7, #20]
 801d9b4:	2200      	movs	r2, #0
 801d9b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	2200      	movs	r2, #0
 801d9bc:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d9be:	697b      	ldr	r3, [r7, #20]
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 801d9c4:	697b      	ldr	r3, [r7, #20]
 801d9c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d9c8:	697b      	ldr	r3, [r7, #20]
 801d9ca:	639a      	str	r2, [r3, #56]	@ 0x38
 801d9cc:	697b      	ldr	r3, [r7, #20]
 801d9ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d9d0:	697b      	ldr	r3, [r7, #20]
 801d9d2:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d9d4:	697b      	ldr	r3, [r7, #20]
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	845a      	strh	r2, [r3, #34]	@ 0x22
 801d9da:	697b      	ldr	r3, [r7, #20]
 801d9dc:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 801d9de:	697b      	ldr	r3, [r7, #20]
 801d9e0:	841a      	strh	r2, [r3, #32]
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	8c1a      	ldrh	r2, [r3, #32]
 801d9e6:	697b      	ldr	r3, [r7, #20]
 801d9e8:	83da      	strh	r2, [r3, #30]
 801d9ea:	697b      	ldr	r3, [r7, #20]
 801d9ec:	8bda      	ldrh	r2, [r3, #30]
 801d9ee:	697b      	ldr	r3, [r7, #20]
 801d9f0:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801d9f2:	7cfb      	ldrb	r3, [r7, #19]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d101      	bne.n	801d9fc <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	e03b      	b.n	801da74 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801d9fc:	2207      	movs	r2, #7
 801d9fe:	6979      	ldr	r1, [r7, #20]
 801da00:	6878      	ldr	r0, [r7, #4]
 801da02:	f000 fcff 	bl	801e404 <dhcp_create_msg>
 801da06:	4603      	mov	r3, r0
 801da08:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801da0a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d128      	bne.n	801da64 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801da12:	2204      	movs	r2, #4
 801da14:	2136      	movs	r1, #54	@ 0x36
 801da16:	6978      	ldr	r0, [r7, #20]
 801da18:	f000 f886 	bl	801db28 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	4618      	mov	r0, r3
 801da20:	f7f7 f95d 	bl	8014cde <lwip_htonl>
 801da24:	4603      	mov	r3, r0
 801da26:	4619      	mov	r1, r3
 801da28:	6978      	ldr	r0, [r7, #20]
 801da2a:	f000 f919 	bl	801dc60 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801da2e:	6978      	ldr	r0, [r7, #20]
 801da30:	f000 fe8c 	bl	801e74c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801da34:	697b      	ldr	r3, [r7, #20]
 801da36:	68da      	ldr	r2, [r3, #12]
 801da38:	697b      	ldr	r3, [r7, #20]
 801da3a:	8a9b      	ldrh	r3, [r3, #20]
 801da3c:	33f0      	adds	r3, #240	@ 0xf0
 801da3e:	b29b      	uxth	r3, r3
 801da40:	4619      	mov	r1, r3
 801da42:	4610      	mov	r0, r2
 801da44:	f7f8 fa70 	bl	8015f28 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801da48:	4b0c      	ldr	r3, [pc, #48]	@ (801da7c <dhcp_release+0x108>)
 801da4a:	6818      	ldr	r0, [r3, #0]
 801da4c:	697b      	ldr	r3, [r7, #20]
 801da4e:	68d9      	ldr	r1, [r3, #12]
 801da50:	f107 020c 	add.w	r2, r7, #12
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	9300      	str	r3, [sp, #0]
 801da58:	2343      	movs	r3, #67	@ 0x43
 801da5a:	f7fe fdcf 	bl	801c5fc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801da5e:	6978      	ldr	r0, [r7, #20]
 801da60:	f000 fe32 	bl	801e6c8 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801da64:	4b06      	ldr	r3, [pc, #24]	@ (801da80 <dhcp_release+0x10c>)
 801da66:	4a06      	ldr	r2, [pc, #24]	@ (801da80 <dhcp_release+0x10c>)
 801da68:	4905      	ldr	r1, [pc, #20]	@ (801da80 <dhcp_release+0x10c>)
 801da6a:	6878      	ldr	r0, [r7, #4]
 801da6c:	f7f7 feb4 	bl	80157d8 <netif_set_addr>

  return result;
 801da70:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801da74:	4618      	mov	r0, r3
 801da76:	3718      	adds	r7, #24
 801da78:	46bd      	mov	sp, r7
 801da7a:	bd80      	pop	{r7, pc}
 801da7c:	2000be0c 	.word	0x2000be0c
 801da80:	08032ed0 	.word	0x08032ed0

0801da84 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b084      	sub	sp, #16
 801da88:	af00      	add	r7, sp, #0
 801da8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d107      	bne.n	801daa2 <dhcp_stop+0x1e>
 801da92:	4b14      	ldr	r3, [pc, #80]	@ (801dae4 <dhcp_stop+0x60>)
 801da94:	f240 5242 	movw	r2, #1346	@ 0x542
 801da98:	4913      	ldr	r1, [pc, #76]	@ (801dae8 <dhcp_stop+0x64>)
 801da9a:	4814      	ldr	r0, [pc, #80]	@ (801daec <dhcp_stop+0x68>)
 801da9c:	f004 fbd6 	bl	802224c <iprintf>
 801daa0:	e01d      	b.n	801dade <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801daa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d017      	beq.n	801dade <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	685b      	ldr	r3, [r3, #4]
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	d006      	beq.n	801dac4 <dhcp_stop+0x40>
 801dab6:	4b0b      	ldr	r3, [pc, #44]	@ (801dae4 <dhcp_stop+0x60>)
 801dab8:	f240 524f 	movw	r2, #1359	@ 0x54f
 801dabc:	490c      	ldr	r1, [pc, #48]	@ (801daf0 <dhcp_stop+0x6c>)
 801dabe:	480b      	ldr	r0, [pc, #44]	@ (801daec <dhcp_stop+0x68>)
 801dac0:	f004 fbc4 	bl	802224c <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801dac4:	2100      	movs	r1, #0
 801dac6:	68f8      	ldr	r0, [r7, #12]
 801dac8:	f000 f814 	bl	801daf4 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	7a1b      	ldrb	r3, [r3, #8]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d004      	beq.n	801dade <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801dad4:	f7ff f828 	bl	801cb28 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	2200      	movs	r2, #0
 801dadc:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801dade:	3710      	adds	r7, #16
 801dae0:	46bd      	mov	sp, r7
 801dae2:	bd80      	pop	{r7, pc}
 801dae4:	0802739c 	.word	0x0802739c
 801dae8:	08027510 	.word	0x08027510
 801daec:	080273fc 	.word	0x080273fc
 801daf0:	080274c8 	.word	0x080274c8

0801daf4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801daf4:	b480      	push	{r7}
 801daf6:	b083      	sub	sp, #12
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]
 801dafc:	460b      	mov	r3, r1
 801dafe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	7a5b      	ldrb	r3, [r3, #9]
 801db04:	78fa      	ldrb	r2, [r7, #3]
 801db06:	429a      	cmp	r2, r3
 801db08:	d008      	beq.n	801db1c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	78fa      	ldrb	r2, [r7, #3]
 801db0e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	2200      	movs	r2, #0
 801db14:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	2200      	movs	r2, #0
 801db1a:	82da      	strh	r2, [r3, #22]
  }
}
 801db1c:	bf00      	nop
 801db1e:	370c      	adds	r7, #12
 801db20:	46bd      	mov	sp, r7
 801db22:	bc80      	pop	{r7}
 801db24:	4770      	bx	lr
	...

0801db28 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b082      	sub	sp, #8
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
 801db30:	460b      	mov	r3, r1
 801db32:	70fb      	strb	r3, [r7, #3]
 801db34:	4613      	mov	r3, r2
 801db36:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	8a9b      	ldrh	r3, [r3, #20]
 801db3c:	461a      	mov	r2, r3
 801db3e:	78bb      	ldrb	r3, [r7, #2]
 801db40:	4413      	add	r3, r2
 801db42:	3302      	adds	r3, #2
 801db44:	2b44      	cmp	r3, #68	@ 0x44
 801db46:	d906      	bls.n	801db56 <dhcp_option+0x2e>
 801db48:	4b11      	ldr	r3, [pc, #68]	@ (801db90 <dhcp_option+0x68>)
 801db4a:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801db4e:	4911      	ldr	r1, [pc, #68]	@ (801db94 <dhcp_option+0x6c>)
 801db50:	4811      	ldr	r0, [pc, #68]	@ (801db98 <dhcp_option+0x70>)
 801db52:	f004 fb7b 	bl	802224c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	691a      	ldr	r2, [r3, #16]
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	8a9b      	ldrh	r3, [r3, #20]
 801db5e:	1c59      	adds	r1, r3, #1
 801db60:	b288      	uxth	r0, r1
 801db62:	6879      	ldr	r1, [r7, #4]
 801db64:	8288      	strh	r0, [r1, #20]
 801db66:	4413      	add	r3, r2
 801db68:	78fa      	ldrb	r2, [r7, #3]
 801db6a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	691a      	ldr	r2, [r3, #16]
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	8a9b      	ldrh	r3, [r3, #20]
 801db76:	1c59      	adds	r1, r3, #1
 801db78:	b288      	uxth	r0, r1
 801db7a:	6879      	ldr	r1, [r7, #4]
 801db7c:	8288      	strh	r0, [r1, #20]
 801db7e:	4413      	add	r3, r2
 801db80:	78ba      	ldrb	r2, [r7, #2]
 801db82:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801db86:	bf00      	nop
 801db88:	3708      	adds	r7, #8
 801db8a:	46bd      	mov	sp, r7
 801db8c:	bd80      	pop	{r7, pc}
 801db8e:	bf00      	nop
 801db90:	0802739c 	.word	0x0802739c
 801db94:	0802752c 	.word	0x0802752c
 801db98:	080273fc 	.word	0x080273fc

0801db9c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801db9c:	b580      	push	{r7, lr}
 801db9e:	b082      	sub	sp, #8
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
 801dba4:	460b      	mov	r3, r1
 801dba6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	8a9b      	ldrh	r3, [r3, #20]
 801dbac:	2b43      	cmp	r3, #67	@ 0x43
 801dbae:	d906      	bls.n	801dbbe <dhcp_option_byte+0x22>
 801dbb0:	4b0b      	ldr	r3, [pc, #44]	@ (801dbe0 <dhcp_option_byte+0x44>)
 801dbb2:	f240 527b 	movw	r2, #1403	@ 0x57b
 801dbb6:	490b      	ldr	r1, [pc, #44]	@ (801dbe4 <dhcp_option_byte+0x48>)
 801dbb8:	480b      	ldr	r0, [pc, #44]	@ (801dbe8 <dhcp_option_byte+0x4c>)
 801dbba:	f004 fb47 	bl	802224c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	691a      	ldr	r2, [r3, #16]
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	8a9b      	ldrh	r3, [r3, #20]
 801dbc6:	1c59      	adds	r1, r3, #1
 801dbc8:	b288      	uxth	r0, r1
 801dbca:	6879      	ldr	r1, [r7, #4]
 801dbcc:	8288      	strh	r0, [r1, #20]
 801dbce:	4413      	add	r3, r2
 801dbd0:	78fa      	ldrb	r2, [r7, #3]
 801dbd2:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dbd6:	bf00      	nop
 801dbd8:	3708      	adds	r7, #8
 801dbda:	46bd      	mov	sp, r7
 801dbdc:	bd80      	pop	{r7, pc}
 801dbde:	bf00      	nop
 801dbe0:	0802739c 	.word	0x0802739c
 801dbe4:	08027574 	.word	0x08027574
 801dbe8:	080273fc 	.word	0x080273fc

0801dbec <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801dbec:	b590      	push	{r4, r7, lr}
 801dbee:	b083      	sub	sp, #12
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
 801dbf4:	460b      	mov	r3, r1
 801dbf6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	8a9b      	ldrh	r3, [r3, #20]
 801dbfc:	3302      	adds	r3, #2
 801dbfe:	2b44      	cmp	r3, #68	@ 0x44
 801dc00:	d906      	bls.n	801dc10 <dhcp_option_short+0x24>
 801dc02:	4b14      	ldr	r3, [pc, #80]	@ (801dc54 <dhcp_option_short+0x68>)
 801dc04:	f240 5282 	movw	r2, #1410	@ 0x582
 801dc08:	4913      	ldr	r1, [pc, #76]	@ (801dc58 <dhcp_option_short+0x6c>)
 801dc0a:	4814      	ldr	r0, [pc, #80]	@ (801dc5c <dhcp_option_short+0x70>)
 801dc0c:	f004 fb1e 	bl	802224c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801dc10:	887b      	ldrh	r3, [r7, #2]
 801dc12:	0a1b      	lsrs	r3, r3, #8
 801dc14:	b298      	uxth	r0, r3
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	691a      	ldr	r2, [r3, #16]
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	8a9b      	ldrh	r3, [r3, #20]
 801dc1e:	1c59      	adds	r1, r3, #1
 801dc20:	b28c      	uxth	r4, r1
 801dc22:	6879      	ldr	r1, [r7, #4]
 801dc24:	828c      	strh	r4, [r1, #20]
 801dc26:	b2c1      	uxtb	r1, r0
 801dc28:	4413      	add	r3, r2
 801dc2a:	460a      	mov	r2, r1
 801dc2c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	691a      	ldr	r2, [r3, #16]
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	8a9b      	ldrh	r3, [r3, #20]
 801dc38:	1c59      	adds	r1, r3, #1
 801dc3a:	b288      	uxth	r0, r1
 801dc3c:	6879      	ldr	r1, [r7, #4]
 801dc3e:	8288      	strh	r0, [r1, #20]
 801dc40:	8879      	ldrh	r1, [r7, #2]
 801dc42:	b2c9      	uxtb	r1, r1
 801dc44:	4413      	add	r3, r2
 801dc46:	460a      	mov	r2, r1
 801dc48:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dc4c:	bf00      	nop
 801dc4e:	370c      	adds	r7, #12
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd90      	pop	{r4, r7, pc}
 801dc54:	0802739c 	.word	0x0802739c
 801dc58:	080275b0 	.word	0x080275b0
 801dc5c:	080273fc 	.word	0x080273fc

0801dc60 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 801dc60:	b590      	push	{r4, r7, lr}
 801dc62:	b083      	sub	sp, #12
 801dc64:	af00      	add	r7, sp, #0
 801dc66:	6078      	str	r0, [r7, #4]
 801dc68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	8a9b      	ldrh	r3, [r3, #20]
 801dc6e:	3304      	adds	r3, #4
 801dc70:	2b44      	cmp	r3, #68	@ 0x44
 801dc72:	d906      	bls.n	801dc82 <dhcp_option_long+0x22>
 801dc74:	4b22      	ldr	r3, [pc, #136]	@ (801dd00 <dhcp_option_long+0xa0>)
 801dc76:	f240 528a 	movw	r2, #1418	@ 0x58a
 801dc7a:	4922      	ldr	r1, [pc, #136]	@ (801dd04 <dhcp_option_long+0xa4>)
 801dc7c:	4822      	ldr	r0, [pc, #136]	@ (801dd08 <dhcp_option_long+0xa8>)
 801dc7e:	f004 fae5 	bl	802224c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801dc82:	683b      	ldr	r3, [r7, #0]
 801dc84:	0e18      	lsrs	r0, r3, #24
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	691a      	ldr	r2, [r3, #16]
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	8a9b      	ldrh	r3, [r3, #20]
 801dc8e:	1c59      	adds	r1, r3, #1
 801dc90:	b28c      	uxth	r4, r1
 801dc92:	6879      	ldr	r1, [r7, #4]
 801dc94:	828c      	strh	r4, [r1, #20]
 801dc96:	b2c1      	uxtb	r1, r0
 801dc98:	4413      	add	r3, r2
 801dc9a:	460a      	mov	r2, r1
 801dc9c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801dca0:	683b      	ldr	r3, [r7, #0]
 801dca2:	0c18      	lsrs	r0, r3, #16
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	691a      	ldr	r2, [r3, #16]
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	8a9b      	ldrh	r3, [r3, #20]
 801dcac:	1c59      	adds	r1, r3, #1
 801dcae:	b28c      	uxth	r4, r1
 801dcb0:	6879      	ldr	r1, [r7, #4]
 801dcb2:	828c      	strh	r4, [r1, #20]
 801dcb4:	b2c1      	uxtb	r1, r0
 801dcb6:	4413      	add	r3, r2
 801dcb8:	460a      	mov	r2, r1
 801dcba:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	0a18      	lsrs	r0, r3, #8
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	691a      	ldr	r2, [r3, #16]
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	8a9b      	ldrh	r3, [r3, #20]
 801dcca:	1c59      	adds	r1, r3, #1
 801dccc:	b28c      	uxth	r4, r1
 801dcce:	6879      	ldr	r1, [r7, #4]
 801dcd0:	828c      	strh	r4, [r1, #20]
 801dcd2:	b2c1      	uxtb	r1, r0
 801dcd4:	4413      	add	r3, r2
 801dcd6:	460a      	mov	r2, r1
 801dcd8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	691a      	ldr	r2, [r3, #16]
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	8a9b      	ldrh	r3, [r3, #20]
 801dce4:	1c59      	adds	r1, r3, #1
 801dce6:	b288      	uxth	r0, r1
 801dce8:	6879      	ldr	r1, [r7, #4]
 801dcea:	8288      	strh	r0, [r1, #20]
 801dcec:	6839      	ldr	r1, [r7, #0]
 801dcee:	b2c9      	uxtb	r1, r1
 801dcf0:	4413      	add	r3, r2
 801dcf2:	460a      	mov	r2, r1
 801dcf4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801dcf8:	bf00      	nop
 801dcfa:	370c      	adds	r7, #12
 801dcfc:	46bd      	mov	sp, r7
 801dcfe:	bd90      	pop	{r4, r7, pc}
 801dd00:	0802739c 	.word	0x0802739c
 801dd04:	080275f4 	.word	0x080275f4
 801dd08:	080273fc 	.word	0x080273fc

0801dd0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b08e      	sub	sp, #56	@ 0x38
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
 801dd14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801dd16:	2300      	movs	r3, #0
 801dd18:	627b      	str	r3, [r7, #36]	@ 0x24
  int parse_sname_as_options = 0;
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801dd1e:	2208      	movs	r2, #8
 801dd20:	2100      	movs	r1, #0
 801dd22:	48b3      	ldr	r0, [pc, #716]	@ (801dff0 <dhcp_parse_reply+0x2e4>)
 801dd24:	f004 fc68 	bl	80225f8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801dd28:	683b      	ldr	r3, [r7, #0]
 801dd2a:	895b      	ldrh	r3, [r3, #10]
 801dd2c:	2b2b      	cmp	r3, #43	@ 0x2b
 801dd2e:	d802      	bhi.n	801dd36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801dd30:	f06f 0301 	mvn.w	r3, #1
 801dd34:	e26a      	b.n	801e20c <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	685a      	ldr	r2, [r3, #4]
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801dd3e:	23f0      	movs	r3, #240	@ 0xf0
 801dd40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801dd42:	683b      	ldr	r3, [r7, #0]
 801dd44:	891b      	ldrh	r3, [r3, #8]
 801dd46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
again:
  q = p;
 801dd48:	683b      	ldr	r3, [r7, #0]
 801dd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801dd4c:	e00c      	b.n	801dd68 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801dd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd50:	895b      	ldrh	r3, [r3, #10]
 801dd52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dd54:	1ad3      	subs	r3, r2, r3
 801dd56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max -= q->len;
 801dd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd5a:	895b      	ldrh	r3, [r3, #10]
 801dd5c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801dd5e:	1ad3      	subs	r3, r2, r3
 801dd60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    q = q->next;
 801dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801dd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d004      	beq.n	801dd78 <dhcp_parse_reply+0x6c>
 801dd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd70:	895b      	ldrh	r3, [r3, #10]
 801dd72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dd74:	429a      	cmp	r2, r3
 801dd76:	d2ea      	bcs.n	801dd4e <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801dd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d102      	bne.n	801dd84 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801dd7e:	f06f 0301 	mvn.w	r3, #1
 801dd82:	e243      	b.n	801e20c <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801dd84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801dd86:	867b      	strh	r3, [r7, #50]	@ 0x32
  offset_max = options_idx_max;
 801dd88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801dd8a:	863b      	strh	r3, [r7, #48]	@ 0x30
  options = (u8_t*)q->payload;
 801dd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd8e:	685b      	ldr	r3, [r3, #4]
 801dd90:	637b      	str	r3, [r7, #52]	@ 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dd92:	e1fb      	b.n	801e18c <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801dd94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dd96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dd98:	4413      	add	r3, r2
 801dd9a:	781b      	ldrb	r3, [r3, #0]
 801dd9c:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801dd9e:	2300      	movs	r3, #0
 801dda0:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801dda2:	f04f 33ff 	mov.w	r3, #4294967295
 801dda6:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801dda8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801ddaa:	3302      	adds	r3, #2
 801ddac:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801ddae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801ddb0:	3301      	adds	r3, #1
 801ddb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ddb4:	8952      	ldrh	r2, [r2, #10]
 801ddb6:	4293      	cmp	r3, r2
 801ddb8:	da06      	bge.n	801ddc8 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801ddba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801ddbc:	3301      	adds	r3, #1
 801ddbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ddc0:	4413      	add	r3, r2
 801ddc2:	781b      	ldrb	r3, [r3, #0]
 801ddc4:	77fb      	strb	r3, [r7, #31]
 801ddc6:	e00a      	b.n	801ddde <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801ddc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d004      	beq.n	801ddda <dhcp_parse_reply+0xce>
 801ddd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	781b      	ldrb	r3, [r3, #0]
 801ddd8:	e000      	b.n	801dddc <dhcp_parse_reply+0xd0>
 801ddda:	2300      	movs	r3, #0
 801dddc:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ddde:	7ffb      	ldrb	r3, [r7, #31]
 801dde0:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801dde2:	7d7b      	ldrb	r3, [r7, #21]
 801dde4:	2b3b      	cmp	r3, #59	@ 0x3b
 801dde6:	f200 8121 	bhi.w	801e02c <dhcp_parse_reply+0x320>
 801ddea:	a201      	add	r2, pc, #4	@ (adr r2, 801ddf0 <dhcp_parse_reply+0xe4>)
 801ddec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddf0:	0801dee1 	.word	0x0801dee1
 801ddf4:	0801def1 	.word	0x0801def1
 801ddf8:	0801e02d 	.word	0x0801e02d
 801ddfc:	0801df11 	.word	0x0801df11
 801de00:	0801e02d 	.word	0x0801e02d
 801de04:	0801e02d 	.word	0x0801e02d
 801de08:	0801e02d 	.word	0x0801e02d
 801de0c:	0801e02d 	.word	0x0801e02d
 801de10:	0801e02d 	.word	0x0801e02d
 801de14:	0801e02d 	.word	0x0801e02d
 801de18:	0801e02d 	.word	0x0801e02d
 801de1c:	0801e02d 	.word	0x0801e02d
 801de20:	0801e02d 	.word	0x0801e02d
 801de24:	0801e02d 	.word	0x0801e02d
 801de28:	0801e02d 	.word	0x0801e02d
 801de2c:	0801e02d 	.word	0x0801e02d
 801de30:	0801e02d 	.word	0x0801e02d
 801de34:	0801e02d 	.word	0x0801e02d
 801de38:	0801e02d 	.word	0x0801e02d
 801de3c:	0801e02d 	.word	0x0801e02d
 801de40:	0801e02d 	.word	0x0801e02d
 801de44:	0801e02d 	.word	0x0801e02d
 801de48:	0801e02d 	.word	0x0801e02d
 801de4c:	0801e02d 	.word	0x0801e02d
 801de50:	0801e02d 	.word	0x0801e02d
 801de54:	0801e02d 	.word	0x0801e02d
 801de58:	0801e02d 	.word	0x0801e02d
 801de5c:	0801e02d 	.word	0x0801e02d
 801de60:	0801e02d 	.word	0x0801e02d
 801de64:	0801e02d 	.word	0x0801e02d
 801de68:	0801e02d 	.word	0x0801e02d
 801de6c:	0801e02d 	.word	0x0801e02d
 801de70:	0801e02d 	.word	0x0801e02d
 801de74:	0801e02d 	.word	0x0801e02d
 801de78:	0801e02d 	.word	0x0801e02d
 801de7c:	0801e02d 	.word	0x0801e02d
 801de80:	0801e02d 	.word	0x0801e02d
 801de84:	0801e02d 	.word	0x0801e02d
 801de88:	0801e02d 	.word	0x0801e02d
 801de8c:	0801e02d 	.word	0x0801e02d
 801de90:	0801e02d 	.word	0x0801e02d
 801de94:	0801e02d 	.word	0x0801e02d
 801de98:	0801e02d 	.word	0x0801e02d
 801de9c:	0801e02d 	.word	0x0801e02d
 801dea0:	0801e02d 	.word	0x0801e02d
 801dea4:	0801e02d 	.word	0x0801e02d
 801dea8:	0801e02d 	.word	0x0801e02d
 801deac:	0801e02d 	.word	0x0801e02d
 801deb0:	0801e02d 	.word	0x0801e02d
 801deb4:	0801e02d 	.word	0x0801e02d
 801deb8:	0801e02d 	.word	0x0801e02d
 801debc:	0801df37 	.word	0x0801df37
 801dec0:	0801df57 	.word	0x0801df57
 801dec4:	0801df91 	.word	0x0801df91
 801dec8:	0801dfb1 	.word	0x0801dfb1
 801decc:	0801e02d 	.word	0x0801e02d
 801ded0:	0801e02d 	.word	0x0801e02d
 801ded4:	0801e02d 	.word	0x0801e02d
 801ded8:	0801dfd1 	.word	0x0801dfd1
 801dedc:	0801e00d 	.word	0x0801e00d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801dee0:	2300      	movs	r3, #0
 801dee2:	77fb      	strb	r3, [r7, #31]
 801dee4:	7ffb      	ldrb	r3, [r7, #31]
 801dee6:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801dee8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801deea:	3b01      	subs	r3, #1
 801deec:	867b      	strh	r3, [r7, #50]	@ 0x32
        break;
 801deee:	e0a0      	b.n	801e032 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801def0:	7ffb      	ldrb	r3, [r7, #31]
 801def2:	2b04      	cmp	r3, #4
 801def4:	d009      	beq.n	801df0a <dhcp_parse_reply+0x1fe>
 801def6:	4b3f      	ldr	r3, [pc, #252]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801def8:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 801defc:	493e      	ldr	r1, [pc, #248]	@ (801dff8 <dhcp_parse_reply+0x2ec>)
 801defe:	483f      	ldr	r0, [pc, #252]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801df00:	f004 f9a4 	bl	802224c <iprintf>
 801df04:	f06f 0305 	mvn.w	r3, #5
 801df08:	e180      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801df0a:	2306      	movs	r3, #6
 801df0c:	61bb      	str	r3, [r7, #24]
        break;
 801df0e:	e090      	b.n	801e032 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801df10:	2304      	movs	r3, #4
 801df12:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801df14:	7ffa      	ldrb	r2, [r7, #31]
 801df16:	7fbb      	ldrb	r3, [r7, #30]
 801df18:	429a      	cmp	r2, r3
 801df1a:	d209      	bcs.n	801df30 <dhcp_parse_reply+0x224>
 801df1c:	4b35      	ldr	r3, [pc, #212]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801df1e:	f240 52fb 	movw	r2, #1531	@ 0x5fb
 801df22:	4937      	ldr	r1, [pc, #220]	@ (801e000 <dhcp_parse_reply+0x2f4>)
 801df24:	4835      	ldr	r0, [pc, #212]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801df26:	f004 f991 	bl	802224c <iprintf>
 801df2a:	f06f 0305 	mvn.w	r3, #5
 801df2e:	e16d      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801df30:	2307      	movs	r3, #7
 801df32:	61bb      	str	r3, [r7, #24]
        break;
 801df34:	e07d      	b.n	801e032 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801df36:	7ffb      	ldrb	r3, [r7, #31]
 801df38:	2b04      	cmp	r3, #4
 801df3a:	d009      	beq.n	801df50 <dhcp_parse_reply+0x244>
 801df3c:	4b2d      	ldr	r3, [pc, #180]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801df3e:	f240 6209 	movw	r2, #1545	@ 0x609
 801df42:	492d      	ldr	r1, [pc, #180]	@ (801dff8 <dhcp_parse_reply+0x2ec>)
 801df44:	482d      	ldr	r0, [pc, #180]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801df46:	f004 f981 	bl	802224c <iprintf>
 801df4a:	f06f 0305 	mvn.w	r3, #5
 801df4e:	e15d      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801df50:	2303      	movs	r3, #3
 801df52:	61bb      	str	r3, [r7, #24]
        break;
 801df54:	e06d      	b.n	801e032 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801df56:	7ffb      	ldrb	r3, [r7, #31]
 801df58:	2b01      	cmp	r3, #1
 801df5a:	d009      	beq.n	801df70 <dhcp_parse_reply+0x264>
 801df5c:	4b25      	ldr	r3, [pc, #148]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801df5e:	f240 6217 	movw	r2, #1559	@ 0x617
 801df62:	4928      	ldr	r1, [pc, #160]	@ (801e004 <dhcp_parse_reply+0x2f8>)
 801df64:	4825      	ldr	r0, [pc, #148]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801df66:	f004 f971 	bl	802224c <iprintf>
 801df6a:	f06f 0305 	mvn.w	r3, #5
 801df6e:	e14d      	b.n	801e20c <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801df70:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801df72:	2bf0      	cmp	r3, #240	@ 0xf0
 801df74:	d009      	beq.n	801df8a <dhcp_parse_reply+0x27e>
 801df76:	4b1f      	ldr	r3, [pc, #124]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801df78:	f240 6219 	movw	r2, #1561	@ 0x619
 801df7c:	4922      	ldr	r1, [pc, #136]	@ (801e008 <dhcp_parse_reply+0x2fc>)
 801df7e:	481f      	ldr	r0, [pc, #124]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801df80:	f004 f964 	bl	802224c <iprintf>
 801df84:	f06f 0305 	mvn.w	r3, #5
 801df88:	e140      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801df8a:	2300      	movs	r3, #0
 801df8c:	61bb      	str	r3, [r7, #24]
        break;
 801df8e:	e050      	b.n	801e032 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801df90:	7ffb      	ldrb	r3, [r7, #31]
 801df92:	2b01      	cmp	r3, #1
 801df94:	d009      	beq.n	801dfaa <dhcp_parse_reply+0x29e>
 801df96:	4b17      	ldr	r3, [pc, #92]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801df98:	f240 621d 	movw	r2, #1565	@ 0x61d
 801df9c:	4919      	ldr	r1, [pc, #100]	@ (801e004 <dhcp_parse_reply+0x2f8>)
 801df9e:	4817      	ldr	r0, [pc, #92]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801dfa0:	f004 f954 	bl	802224c <iprintf>
 801dfa4:	f06f 0305 	mvn.w	r3, #5
 801dfa8:	e130      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801dfaa:	2301      	movs	r3, #1
 801dfac:	61bb      	str	r3, [r7, #24]
        break;
 801dfae:	e040      	b.n	801e032 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dfb0:	7ffb      	ldrb	r3, [r7, #31]
 801dfb2:	2b04      	cmp	r3, #4
 801dfb4:	d009      	beq.n	801dfca <dhcp_parse_reply+0x2be>
 801dfb6:	4b0f      	ldr	r3, [pc, #60]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801dfb8:	f240 6221 	movw	r2, #1569	@ 0x621
 801dfbc:	490e      	ldr	r1, [pc, #56]	@ (801dff8 <dhcp_parse_reply+0x2ec>)
 801dfbe:	480f      	ldr	r0, [pc, #60]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801dfc0:	f004 f944 	bl	802224c <iprintf>
 801dfc4:	f06f 0305 	mvn.w	r3, #5
 801dfc8:	e120      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801dfca:	2302      	movs	r3, #2
 801dfcc:	61bb      	str	r3, [r7, #24]
        break;
 801dfce:	e030      	b.n	801e032 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dfd0:	7ffb      	ldrb	r3, [r7, #31]
 801dfd2:	2b04      	cmp	r3, #4
 801dfd4:	d009      	beq.n	801dfea <dhcp_parse_reply+0x2de>
 801dfd6:	4b07      	ldr	r3, [pc, #28]	@ (801dff4 <dhcp_parse_reply+0x2e8>)
 801dfd8:	f240 6225 	movw	r2, #1573	@ 0x625
 801dfdc:	4906      	ldr	r1, [pc, #24]	@ (801dff8 <dhcp_parse_reply+0x2ec>)
 801dfde:	4807      	ldr	r0, [pc, #28]	@ (801dffc <dhcp_parse_reply+0x2f0>)
 801dfe0:	f004 f934 	bl	802224c <iprintf>
 801dfe4:	f06f 0305 	mvn.w	r3, #5
 801dfe8:	e110      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801dfea:	2304      	movs	r3, #4
 801dfec:	61bb      	str	r3, [r7, #24]
        break;
 801dfee:	e020      	b.n	801e032 <dhcp_parse_reply+0x326>
 801dff0:	2000be04 	.word	0x2000be04
 801dff4:	0802739c 	.word	0x0802739c
 801dff8:	08027634 	.word	0x08027634
 801dffc:	080273fc 	.word	0x080273fc
 801e000:	08027640 	.word	0x08027640
 801e004:	08027654 	.word	0x08027654
 801e008:	08027660 	.word	0x08027660
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801e00c:	7ffb      	ldrb	r3, [r7, #31]
 801e00e:	2b04      	cmp	r3, #4
 801e010:	d009      	beq.n	801e026 <dhcp_parse_reply+0x31a>
 801e012:	4b80      	ldr	r3, [pc, #512]	@ (801e214 <dhcp_parse_reply+0x508>)
 801e014:	f240 6229 	movw	r2, #1577	@ 0x629
 801e018:	497f      	ldr	r1, [pc, #508]	@ (801e218 <dhcp_parse_reply+0x50c>)
 801e01a:	4880      	ldr	r0, [pc, #512]	@ (801e21c <dhcp_parse_reply+0x510>)
 801e01c:	f004 f916 	bl	802224c <iprintf>
 801e020:	f06f 0305 	mvn.w	r3, #5
 801e024:	e0f2      	b.n	801e20c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801e026:	2305      	movs	r3, #5
 801e028:	61bb      	str	r3, [r7, #24]
        break;
 801e02a:	e002      	b.n	801e032 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 801e02c:	2300      	movs	r3, #0
 801e02e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 801e030:	bf00      	nop
    }
    offset += len + 2;
 801e032:	7ffb      	ldrb	r3, [r7, #31]
 801e034:	b29a      	uxth	r2, r3
 801e036:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801e038:	4413      	add	r3, r2
 801e03a:	b29b      	uxth	r3, r3
 801e03c:	3302      	adds	r3, #2
 801e03e:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (decode_len > 0) {
 801e040:	7fbb      	ldrb	r3, [r7, #30]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d079      	beq.n	801e13a <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801e046:	2300      	movs	r3, #0
 801e048:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801e04a:	69bb      	ldr	r3, [r7, #24]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	db02      	blt.n	801e056 <dhcp_parse_reply+0x34a>
 801e050:	69bb      	ldr	r3, [r7, #24]
 801e052:	2b07      	cmp	r3, #7
 801e054:	dd06      	ble.n	801e064 <dhcp_parse_reply+0x358>
 801e056:	4b6f      	ldr	r3, [pc, #444]	@ (801e214 <dhcp_parse_reply+0x508>)
 801e058:	f240 6236 	movw	r2, #1590	@ 0x636
 801e05c:	4970      	ldr	r1, [pc, #448]	@ (801e220 <dhcp_parse_reply+0x514>)
 801e05e:	486f      	ldr	r0, [pc, #444]	@ (801e21c <dhcp_parse_reply+0x510>)
 801e060:	f004 f8f4 	bl	802224c <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801e064:	4a6f      	ldr	r2, [pc, #444]	@ (801e224 <dhcp_parse_reply+0x518>)
 801e066:	69bb      	ldr	r3, [r7, #24]
 801e068:	4413      	add	r3, r2
 801e06a:	781b      	ldrb	r3, [r3, #0]
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	d164      	bne.n	801e13a <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 801e070:	7fbb      	ldrb	r3, [r7, #30]
 801e072:	2b04      	cmp	r3, #4
 801e074:	bf28      	it	cs
 801e076:	2304      	movcs	r3, #4
 801e078:	b2db      	uxtb	r3, r3
 801e07a:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801e07c:	8afb      	ldrh	r3, [r7, #22]
 801e07e:	8a7a      	ldrh	r2, [r7, #18]
 801e080:	f107 0108 	add.w	r1, r7, #8
 801e084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e086:	f7f8 fac1 	bl	801660c <pbuf_copy_partial>
 801e08a:	4603      	mov	r3, r0
 801e08c:	461a      	mov	r2, r3
 801e08e:	8a7b      	ldrh	r3, [r7, #18]
 801e090:	4293      	cmp	r3, r2
 801e092:	d002      	beq.n	801e09a <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801e094:	f06f 0301 	mvn.w	r3, #1
 801e098:	e0b8      	b.n	801e20c <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801e09a:	7fbb      	ldrb	r3, [r7, #30]
 801e09c:	2b04      	cmp	r3, #4
 801e09e:	d927      	bls.n	801e0f0 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801e0a0:	7fbb      	ldrb	r3, [r7, #30]
 801e0a2:	f003 0303 	and.w	r3, r3, #3
 801e0a6:	b2db      	uxtb	r3, r3
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d009      	beq.n	801e0c0 <dhcp_parse_reply+0x3b4>
 801e0ac:	4b59      	ldr	r3, [pc, #356]	@ (801e214 <dhcp_parse_reply+0x508>)
 801e0ae:	f240 623e 	movw	r2, #1598	@ 0x63e
 801e0b2:	495d      	ldr	r1, [pc, #372]	@ (801e228 <dhcp_parse_reply+0x51c>)
 801e0b4:	4859      	ldr	r0, [pc, #356]	@ (801e21c <dhcp_parse_reply+0x510>)
 801e0b6:	f004 f8c9 	bl	802224c <iprintf>
 801e0ba:	f06f 0305 	mvn.w	r3, #5
 801e0be:	e0a5      	b.n	801e20c <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 801e0c0:	4a58      	ldr	r2, [pc, #352]	@ (801e224 <dhcp_parse_reply+0x518>)
 801e0c2:	69bb      	ldr	r3, [r7, #24]
 801e0c4:	4413      	add	r3, r2
 801e0c6:	2201      	movs	r2, #1
 801e0c8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801e0ca:	68bb      	ldr	r3, [r7, #8]
 801e0cc:	4618      	mov	r0, r3
 801e0ce:	f7f6 fe06 	bl	8014cde <lwip_htonl>
 801e0d2:	4602      	mov	r2, r0
 801e0d4:	4955      	ldr	r1, [pc, #340]	@ (801e22c <dhcp_parse_reply+0x520>)
 801e0d6:	69bb      	ldr	r3, [r7, #24]
 801e0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 801e0dc:	7fbb      	ldrb	r3, [r7, #30]
 801e0de:	3b04      	subs	r3, #4
 801e0e0:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801e0e2:	8afb      	ldrh	r3, [r7, #22]
 801e0e4:	3304      	adds	r3, #4
 801e0e6:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801e0e8:	69bb      	ldr	r3, [r7, #24]
 801e0ea:	3301      	adds	r3, #1
 801e0ec:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801e0ee:	e7ac      	b.n	801e04a <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 801e0f0:	7fbb      	ldrb	r3, [r7, #30]
 801e0f2:	2b04      	cmp	r3, #4
 801e0f4:	d106      	bne.n	801e104 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801e0f6:	68bb      	ldr	r3, [r7, #8]
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f7f6 fdf0 	bl	8014cde <lwip_htonl>
 801e0fe:	4603      	mov	r3, r0
 801e100:	60bb      	str	r3, [r7, #8]
 801e102:	e010      	b.n	801e126 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801e104:	7fbb      	ldrb	r3, [r7, #30]
 801e106:	2b01      	cmp	r3, #1
 801e108:	d009      	beq.n	801e11e <dhcp_parse_reply+0x412>
 801e10a:	4b42      	ldr	r3, [pc, #264]	@ (801e214 <dhcp_parse_reply+0x508>)
 801e10c:	f44f 62c9 	mov.w	r2, #1608	@ 0x648
 801e110:	4947      	ldr	r1, [pc, #284]	@ (801e230 <dhcp_parse_reply+0x524>)
 801e112:	4842      	ldr	r0, [pc, #264]	@ (801e21c <dhcp_parse_reply+0x510>)
 801e114:	f004 f89a 	bl	802224c <iprintf>
 801e118:	f06f 0305 	mvn.w	r3, #5
 801e11c:	e076      	b.n	801e20c <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 801e11e:	f107 0308 	add.w	r3, r7, #8
 801e122:	781b      	ldrb	r3, [r3, #0]
 801e124:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801e126:	4a3f      	ldr	r2, [pc, #252]	@ (801e224 <dhcp_parse_reply+0x518>)
 801e128:	69bb      	ldr	r3, [r7, #24]
 801e12a:	4413      	add	r3, r2
 801e12c:	2201      	movs	r2, #1
 801e12e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 801e130:	68ba      	ldr	r2, [r7, #8]
 801e132:	493e      	ldr	r1, [pc, #248]	@ (801e22c <dhcp_parse_reply+0x520>)
 801e134:	69bb      	ldr	r3, [r7, #24]
 801e136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801e13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e13c:	895b      	ldrh	r3, [r3, #10]
 801e13e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e140:	429a      	cmp	r2, r3
 801e142:	d323      	bcc.n	801e18c <dhcp_parse_reply+0x480>
      offset -= q->len;
 801e144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e146:	895b      	ldrh	r3, [r3, #10]
 801e148:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e14a:	1ad3      	subs	r3, r2, r3
 801e14c:	867b      	strh	r3, [r7, #50]	@ 0x32
      offset_max -= q->len;
 801e14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e150:	895b      	ldrh	r3, [r3, #10]
 801e152:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801e154:	1ad3      	subs	r3, r2, r3
 801e156:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((offset < offset_max) && offset_max) {
 801e158:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e15a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e15c:	429a      	cmp	r2, r3
 801e15e:	d223      	bcs.n	801e1a8 <dhcp_parse_reply+0x49c>
 801e160:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e162:	2b00      	cmp	r3, #0
 801e164:	d020      	beq.n	801e1a8 <dhcp_parse_reply+0x49c>
        q = q->next;
 801e166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	62bb      	str	r3, [r7, #40]	@ 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801e16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d109      	bne.n	801e186 <dhcp_parse_reply+0x47a>
 801e172:	4b28      	ldr	r3, [pc, #160]	@ (801e214 <dhcp_parse_reply+0x508>)
 801e174:	f240 6254 	movw	r2, #1620	@ 0x654
 801e178:	492e      	ldr	r1, [pc, #184]	@ (801e234 <dhcp_parse_reply+0x528>)
 801e17a:	4828      	ldr	r0, [pc, #160]	@ (801e21c <dhcp_parse_reply+0x510>)
 801e17c:	f004 f866 	bl	802224c <iprintf>
 801e180:	f06f 0305 	mvn.w	r3, #5
 801e184:	e042      	b.n	801e20c <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801e186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e188:	685b      	ldr	r3, [r3, #4]
 801e18a:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d00a      	beq.n	801e1a8 <dhcp_parse_reply+0x49c>
 801e192:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801e194:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e196:	429a      	cmp	r2, r3
 801e198:	d206      	bcs.n	801e1a8 <dhcp_parse_reply+0x49c>
 801e19a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801e19c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e19e:	4413      	add	r3, r2
 801e1a0:	781b      	ldrb	r3, [r3, #0]
 801e1a2:	2bff      	cmp	r3, #255	@ 0xff
 801e1a4:	f47f adf6 	bne.w	801dd94 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801e1a8:	4b1e      	ldr	r3, [pc, #120]	@ (801e224 <dhcp_parse_reply+0x518>)
 801e1aa:	781b      	ldrb	r3, [r3, #0]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d018      	beq.n	801e1e2 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e1b0:	4b1e      	ldr	r3, [pc, #120]	@ (801e22c <dhcp_parse_reply+0x520>)
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801e1b6:	4b1b      	ldr	r3, [pc, #108]	@ (801e224 <dhcp_parse_reply+0x518>)
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801e1bc:	68fb      	ldr	r3, [r7, #12]
 801e1be:	2b01      	cmp	r3, #1
 801e1c0:	d102      	bne.n	801e1c8 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 801e1c2:	2301      	movs	r3, #1
 801e1c4:	627b      	str	r3, [r7, #36]	@ 0x24
 801e1c6:	e00c      	b.n	801e1e2 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	2b02      	cmp	r3, #2
 801e1cc:	d102      	bne.n	801e1d4 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801e1ce:	2301      	movs	r3, #1
 801e1d0:	623b      	str	r3, [r7, #32]
 801e1d2:	e006      	b.n	801e1e2 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	2b03      	cmp	r3, #3
 801e1d8:	d103      	bne.n	801e1e2 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801e1da:	2301      	movs	r3, #1
 801e1dc:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801e1de:	2301      	movs	r3, #1
 801e1e0:	627b      	str	r3, [r7, #36]	@ 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 801e1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d006      	beq.n	801e1f6 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	627b      	str	r3, [r7, #36]	@ 0x24
    options_idx = DHCP_FILE_OFS;
 801e1ec:	236c      	movs	r3, #108	@ 0x6c
 801e1ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801e1f0:	23ec      	movs	r3, #236	@ 0xec
 801e1f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801e1f4:	e5a8      	b.n	801dd48 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801e1f6:	6a3b      	ldr	r3, [r7, #32]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d006      	beq.n	801e20a <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 801e200:	232c      	movs	r3, #44	@ 0x2c
 801e202:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801e204:	236c      	movs	r3, #108	@ 0x6c
 801e206:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801e208:	e59e      	b.n	801dd48 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801e20a:	2300      	movs	r3, #0
}
 801e20c:	4618      	mov	r0, r3
 801e20e:	3738      	adds	r7, #56	@ 0x38
 801e210:	46bd      	mov	sp, r7
 801e212:	bd80      	pop	{r7, pc}
 801e214:	0802739c 	.word	0x0802739c
 801e218:	08027634 	.word	0x08027634
 801e21c:	080273fc 	.word	0x080273fc
 801e220:	08027678 	.word	0x08027678
 801e224:	2000be04 	.word	0x2000be04
 801e228:	0802768c 	.word	0x0802768c
 801e22c:	2000bde4 	.word	0x2000bde4
 801e230:	080276a4 	.word	0x080276a4
 801e234:	080276b8 	.word	0x080276b8

0801e238 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801e238:	b580      	push	{r7, lr}
 801e23a:	b08a      	sub	sp, #40	@ 0x28
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	60f8      	str	r0, [r7, #12]
 801e240:	60b9      	str	r1, [r7, #8]
 801e242:	607a      	str	r2, [r7, #4]
 801e244:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801e246:	4b69      	ldr	r3, [pc, #420]	@ (801e3ec <dhcp_recv+0x1b4>)
 801e248:	685b      	ldr	r3, [r3, #4]
 801e24a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e24c:	6a3b      	ldr	r3, [r7, #32]
 801e24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e250:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	685b      	ldr	r3, [r3, #4]
 801e256:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801e258:	69fb      	ldr	r3, [r7, #28]
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	f000 80a9 	beq.w	801e3b2 <dhcp_recv+0x17a>
 801e260:	69fb      	ldr	r3, [r7, #28]
 801e262:	7a1b      	ldrb	r3, [r3, #8]
 801e264:	2b00      	cmp	r3, #0
 801e266:	f000 80a4 	beq.w	801e3b2 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801e26a:	69fb      	ldr	r3, [r7, #28]
 801e26c:	685b      	ldr	r3, [r3, #4]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d006      	beq.n	801e280 <dhcp_recv+0x48>
 801e272:	4b5f      	ldr	r3, [pc, #380]	@ (801e3f0 <dhcp_recv+0x1b8>)
 801e274:	f44f 62d5 	mov.w	r2, #1704	@ 0x6a8
 801e278:	495e      	ldr	r1, [pc, #376]	@ (801e3f4 <dhcp_recv+0x1bc>)
 801e27a:	485f      	ldr	r0, [pc, #380]	@ (801e3f8 <dhcp_recv+0x1c0>)
 801e27c:	f003 ffe6 	bl	802224c <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	895b      	ldrh	r3, [r3, #10]
 801e284:	2b2b      	cmp	r3, #43	@ 0x2b
 801e286:	f240 8096 	bls.w	801e3b6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801e28a:	69bb      	ldr	r3, [r7, #24]
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	2b02      	cmp	r3, #2
 801e290:	f040 8093 	bne.w	801e3ba <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801e294:	2300      	movs	r3, #0
 801e296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e29a:	e012      	b.n	801e2c2 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801e29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2a0:	6a3a      	ldr	r2, [r7, #32]
 801e2a2:	4413      	add	r3, r2
 801e2a4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2ac:	69b9      	ldr	r1, [r7, #24]
 801e2ae:	440b      	add	r3, r1
 801e2b0:	7f1b      	ldrb	r3, [r3, #28]
 801e2b2:	429a      	cmp	r2, r3
 801e2b4:	f040 8083 	bne.w	801e3be <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801e2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2bc:	3301      	adds	r3, #1
 801e2be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e2c2:	6a3b      	ldr	r3, [r7, #32]
 801e2c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e2c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	d207      	bcs.n	801e2e0 <dhcp_recv+0xa8>
 801e2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2d4:	2b05      	cmp	r3, #5
 801e2d6:	d803      	bhi.n	801e2e0 <dhcp_recv+0xa8>
 801e2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e2dc:	2b0f      	cmp	r3, #15
 801e2de:	d9dd      	bls.n	801e29c <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801e2e0:	69bb      	ldr	r3, [r7, #24]
 801e2e2:	685b      	ldr	r3, [r3, #4]
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f7f6 fcfa 	bl	8014cde <lwip_htonl>
 801e2ea:	4602      	mov	r2, r0
 801e2ec:	69fb      	ldr	r3, [r7, #28]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	429a      	cmp	r2, r3
 801e2f2:	d166      	bne.n	801e3c2 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 801e2f4:	6879      	ldr	r1, [r7, #4]
 801e2f6:	69f8      	ldr	r0, [r7, #28]
 801e2f8:	f7ff fd08 	bl	801dd0c <dhcp_parse_reply>
 801e2fc:	4603      	mov	r3, r0
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d161      	bne.n	801e3c6 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801e302:	4b3e      	ldr	r3, [pc, #248]	@ (801e3fc <dhcp_recv+0x1c4>)
 801e304:	785b      	ldrb	r3, [r3, #1]
 801e306:	2b00      	cmp	r3, #0
 801e308:	d05f      	beq.n	801e3ca <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e30a:	4b3d      	ldr	r3, [pc, #244]	@ (801e400 <dhcp_recv+0x1c8>)
 801e30c:	685b      	ldr	r3, [r3, #4]
 801e30e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801e310:	7dfb      	ldrb	r3, [r7, #23]
 801e312:	2b05      	cmp	r3, #5
 801e314:	d128      	bne.n	801e368 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e316:	69fb      	ldr	r3, [r7, #28]
 801e318:	7a5b      	ldrb	r3, [r3, #9]
 801e31a:	2b01      	cmp	r3, #1
 801e31c:	d111      	bne.n	801e342 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 801e31e:	6a38      	ldr	r0, [r7, #32]
 801e320:	f7fe fe74 	bl	801d00c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e324:	6a3b      	ldr	r3, [r7, #32]
 801e326:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801e32a:	f003 0308 	and.w	r3, r3, #8
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d003      	beq.n	801e33a <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801e332:	6a38      	ldr	r0, [r7, #32]
 801e334:	f7fe fc3c 	bl	801cbb0 <dhcp_check>
 801e338:	e04a      	b.n	801e3d0 <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801e33a:	6a38      	ldr	r0, [r7, #32]
 801e33c:	f7ff f8a0 	bl	801d480 <dhcp_bind>
 801e340:	e046      	b.n	801e3d0 <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e342:	69fb      	ldr	r3, [r7, #28]
 801e344:	7a5b      	ldrb	r3, [r3, #9]
 801e346:	2b03      	cmp	r3, #3
 801e348:	d007      	beq.n	801e35a <dhcp_recv+0x122>
 801e34a:	69fb      	ldr	r3, [r7, #28]
 801e34c:	7a5b      	ldrb	r3, [r3, #9]
 801e34e:	2b04      	cmp	r3, #4
 801e350:	d003      	beq.n	801e35a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801e352:	69fb      	ldr	r3, [r7, #28]
 801e354:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e356:	2b05      	cmp	r3, #5
 801e358:	d13a      	bne.n	801e3d0 <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801e35a:	6a38      	ldr	r0, [r7, #32]
 801e35c:	f7fe fe56 	bl	801d00c <dhcp_handle_ack>
      dhcp_bind(netif);
 801e360:	6a38      	ldr	r0, [r7, #32]
 801e362:	f7ff f88d 	bl	801d480 <dhcp_bind>
 801e366:	e033      	b.n	801e3d0 <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801e368:	7dfb      	ldrb	r3, [r7, #23]
 801e36a:	2b06      	cmp	r3, #6
 801e36c:	d113      	bne.n	801e396 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e36e:	69fb      	ldr	r3, [r7, #28]
 801e370:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 801e372:	2b03      	cmp	r3, #3
 801e374:	d00b      	beq.n	801e38e <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e376:	69fb      	ldr	r3, [r7, #28]
 801e378:	7a5b      	ldrb	r3, [r3, #9]
 801e37a:	2b01      	cmp	r3, #1
 801e37c:	d007      	beq.n	801e38e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e37e:	69fb      	ldr	r3, [r7, #28]
 801e380:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e382:	2b04      	cmp	r3, #4
 801e384:	d003      	beq.n	801e38e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e386:	69fb      	ldr	r3, [r7, #28]
 801e388:	7a5b      	ldrb	r3, [r3, #9]
 801e38a:	2b05      	cmp	r3, #5
 801e38c:	d103      	bne.n	801e396 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801e38e:	6a38      	ldr	r0, [r7, #32]
 801e390:	f7fe fbf4 	bl	801cb7c <dhcp_handle_nak>
 801e394:	e01c      	b.n	801e3d0 <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801e396:	7dfb      	ldrb	r3, [r7, #23]
 801e398:	2b02      	cmp	r3, #2
 801e39a:	d118      	bne.n	801e3ce <dhcp_recv+0x196>
 801e39c:	69fb      	ldr	r3, [r7, #28]
 801e39e:	7a5b      	ldrb	r3, [r3, #9]
 801e3a0:	2b06      	cmp	r3, #6
 801e3a2:	d114      	bne.n	801e3ce <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 801e3a4:	69fb      	ldr	r3, [r7, #28]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801e3aa:	6a38      	ldr	r0, [r7, #32]
 801e3ac:	f7fe fc34 	bl	801cc18 <dhcp_handle_offer>
 801e3b0:	e00e      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3b2:	bf00      	nop
 801e3b4:	e00c      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3b6:	bf00      	nop
 801e3b8:	e00a      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3ba:	bf00      	nop
 801e3bc:	e008      	b.n	801e3d0 <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 801e3be:	bf00      	nop
 801e3c0:	e006      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3c2:	bf00      	nop
 801e3c4:	e004      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3c6:	bf00      	nop
 801e3c8:	e002      	b.n	801e3d0 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801e3ca:	bf00      	nop
 801e3cc:	e000      	b.n	801e3d0 <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 801e3ce:	bf00      	nop
  if (dhcp != NULL) {
 801e3d0:	69fb      	ldr	r3, [r7, #28]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d002      	beq.n	801e3dc <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 801e3d6:	69fb      	ldr	r3, [r7, #28]
 801e3d8:	2200      	movs	r2, #0
 801e3da:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801e3dc:	6878      	ldr	r0, [r7, #4]
 801e3de:	f7f7 ff17 	bl	8016210 <pbuf_free>
}
 801e3e2:	bf00      	nop
 801e3e4:	3728      	adds	r7, #40	@ 0x28
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	bd80      	pop	{r7, pc}
 801e3ea:	bf00      	nop
 801e3ec:	20008604 	.word	0x20008604
 801e3f0:	0802739c 	.word	0x0802739c
 801e3f4:	080274c8 	.word	0x080274c8
 801e3f8:	080273fc 	.word	0x080273fc
 801e3fc:	2000be04 	.word	0x2000be04
 801e400:	2000bde4 	.word	0x2000bde4

0801e404 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801e404:	b590      	push	{r4, r7, lr}
 801e406:	b087      	sub	sp, #28
 801e408:	af00      	add	r7, sp, #0
 801e40a:	60f8      	str	r0, [r7, #12]
 801e40c:	60b9      	str	r1, [r7, #8]
 801e40e:	4613      	mov	r3, r2
 801e410:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	2b00      	cmp	r3, #0
 801e416:	d109      	bne.n	801e42c <dhcp_create_msg+0x28>
 801e418:	4ba3      	ldr	r3, [pc, #652]	@ (801e6a8 <dhcp_create_msg+0x2a4>)
 801e41a:	f240 721d 	movw	r2, #1821	@ 0x71d
 801e41e:	49a3      	ldr	r1, [pc, #652]	@ (801e6ac <dhcp_create_msg+0x2a8>)
 801e420:	48a3      	ldr	r0, [pc, #652]	@ (801e6b0 <dhcp_create_msg+0x2ac>)
 801e422:	f003 ff13 	bl	802224c <iprintf>
 801e426:	f06f 030f 	mvn.w	r3, #15
 801e42a:	e138      	b.n	801e69e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801e42c:	68bb      	ldr	r3, [r7, #8]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d109      	bne.n	801e446 <dhcp_create_msg+0x42>
 801e432:	4b9d      	ldr	r3, [pc, #628]	@ (801e6a8 <dhcp_create_msg+0x2a4>)
 801e434:	f240 721e 	movw	r2, #1822	@ 0x71e
 801e438:	499e      	ldr	r1, [pc, #632]	@ (801e6b4 <dhcp_create_msg+0x2b0>)
 801e43a:	489d      	ldr	r0, [pc, #628]	@ (801e6b0 <dhcp_create_msg+0x2ac>)
 801e43c:	f003 ff06 	bl	802224c <iprintf>
 801e440:	f06f 0305 	mvn.w	r3, #5
 801e444:	e12b      	b.n	801e69e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801e446:	68bb      	ldr	r3, [r7, #8]
 801e448:	68db      	ldr	r3, [r3, #12]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d006      	beq.n	801e45c <dhcp_create_msg+0x58>
 801e44e:	4b96      	ldr	r3, [pc, #600]	@ (801e6a8 <dhcp_create_msg+0x2a4>)
 801e450:	f240 721f 	movw	r2, #1823	@ 0x71f
 801e454:	4998      	ldr	r1, [pc, #608]	@ (801e6b8 <dhcp_create_msg+0x2b4>)
 801e456:	4896      	ldr	r0, [pc, #600]	@ (801e6b0 <dhcp_create_msg+0x2ac>)
 801e458:	f003 fef8 	bl	802224c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801e45c:	68bb      	ldr	r3, [r7, #8]
 801e45e:	691b      	ldr	r3, [r3, #16]
 801e460:	2b00      	cmp	r3, #0
 801e462:	d006      	beq.n	801e472 <dhcp_create_msg+0x6e>
 801e464:	4b90      	ldr	r3, [pc, #576]	@ (801e6a8 <dhcp_create_msg+0x2a4>)
 801e466:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 801e46a:	4994      	ldr	r1, [pc, #592]	@ (801e6bc <dhcp_create_msg+0x2b8>)
 801e46c:	4890      	ldr	r0, [pc, #576]	@ (801e6b0 <dhcp_create_msg+0x2ac>)
 801e46e:	f003 feed 	bl	802224c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e472:	2200      	movs	r2, #0
 801e474:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801e478:	2000      	movs	r0, #0
 801e47a:	f7f7 fb51 	bl	8015b20 <pbuf_alloc>
 801e47e:	4602      	mov	r2, r0
 801e480:	68bb      	ldr	r3, [r7, #8]
 801e482:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 801e484:	68bb      	ldr	r3, [r7, #8]
 801e486:	68db      	ldr	r3, [r3, #12]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d102      	bne.n	801e492 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801e48c:	f04f 33ff 	mov.w	r3, #4294967295
 801e490:	e105      	b.n	801e69e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e492:	68bb      	ldr	r3, [r7, #8]
 801e494:	68db      	ldr	r3, [r3, #12]
 801e496:	895b      	ldrh	r3, [r3, #10]
 801e498:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801e49c:	d206      	bcs.n	801e4ac <dhcp_create_msg+0xa8>
 801e49e:	4b82      	ldr	r3, [pc, #520]	@ (801e6a8 <dhcp_create_msg+0x2a4>)
 801e4a0:	f240 7227 	movw	r2, #1831	@ 0x727
 801e4a4:	4986      	ldr	r1, [pc, #536]	@ (801e6c0 <dhcp_create_msg+0x2bc>)
 801e4a6:	4882      	ldr	r0, [pc, #520]	@ (801e6b0 <dhcp_create_msg+0x2ac>)
 801e4a8:	f003 fed0 	bl	802224c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e4ac:	79fb      	ldrb	r3, [r7, #7]
 801e4ae:	2b03      	cmp	r3, #3
 801e4b0:	d103      	bne.n	801e4ba <dhcp_create_msg+0xb6>
 801e4b2:	68bb      	ldr	r3, [r7, #8]
 801e4b4:	7a5b      	ldrb	r3, [r3, #9]
 801e4b6:	2b03      	cmp	r3, #3
 801e4b8:	d10d      	bne.n	801e4d6 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e4ba:	68bb      	ldr	r3, [r7, #8]
 801e4bc:	7a9b      	ldrb	r3, [r3, #10]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d105      	bne.n	801e4ce <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801e4c2:	f003 f8d9 	bl	8021678 <rand>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	461a      	mov	r2, r3
 801e4ca:	4b7e      	ldr	r3, [pc, #504]	@ (801e6c4 <dhcp_create_msg+0x2c0>)
 801e4cc:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801e4ce:	4b7d      	ldr	r3, [pc, #500]	@ (801e6c4 <dhcp_create_msg+0x2c0>)
 801e4d0:	681a      	ldr	r2, [r3, #0]
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 801e4d6:	68bb      	ldr	r3, [r7, #8]
 801e4d8:	68db      	ldr	r3, [r3, #12]
 801e4da:	685a      	ldr	r2, [r3, #4]
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801e4e0:	68bb      	ldr	r3, [r7, #8]
 801e4e2:	691b      	ldr	r3, [r3, #16]
 801e4e4:	2201      	movs	r2, #1
 801e4e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801e4e8:	68bb      	ldr	r3, [r7, #8]
 801e4ea:	691b      	ldr	r3, [r3, #16]
 801e4ec:	2201      	movs	r2, #1
 801e4ee:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801e4f0:	68bb      	ldr	r3, [r7, #8]
 801e4f2:	691b      	ldr	r3, [r3, #16]
 801e4f4:	68fa      	ldr	r2, [r7, #12]
 801e4f6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 801e4fa:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801e4fc:	68bb      	ldr	r3, [r7, #8]
 801e4fe:	691b      	ldr	r3, [r3, #16]
 801e500:	2200      	movs	r2, #0
 801e502:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801e504:	68bb      	ldr	r3, [r7, #8]
 801e506:	681a      	ldr	r2, [r3, #0]
 801e508:	68bb      	ldr	r3, [r7, #8]
 801e50a:	691c      	ldr	r4, [r3, #16]
 801e50c:	4610      	mov	r0, r2
 801e50e:	f7f6 fbe6 	bl	8014cde <lwip_htonl>
 801e512:	4603      	mov	r3, r0
 801e514:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801e516:	68bb      	ldr	r3, [r7, #8]
 801e518:	691b      	ldr	r3, [r3, #16]
 801e51a:	2200      	movs	r2, #0
 801e51c:	721a      	strb	r2, [r3, #8]
 801e51e:	2200      	movs	r2, #0
 801e520:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801e522:	68bb      	ldr	r3, [r7, #8]
 801e524:	691b      	ldr	r3, [r3, #16]
 801e526:	2200      	movs	r2, #0
 801e528:	729a      	strb	r2, [r3, #10]
 801e52a:	2200      	movs	r2, #0
 801e52c:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801e52e:	68bb      	ldr	r3, [r7, #8]
 801e530:	691b      	ldr	r3, [r3, #16]
 801e532:	2200      	movs	r2, #0
 801e534:	731a      	strb	r2, [r3, #12]
 801e536:	2200      	movs	r2, #0
 801e538:	735a      	strb	r2, [r3, #13]
 801e53a:	2200      	movs	r2, #0
 801e53c:	739a      	strb	r2, [r3, #14]
 801e53e:	2200      	movs	r2, #0
 801e540:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e542:	79fb      	ldrb	r3, [r7, #7]
 801e544:	2b08      	cmp	r3, #8
 801e546:	d010      	beq.n	801e56a <dhcp_create_msg+0x166>
 801e548:	79fb      	ldrb	r3, [r7, #7]
 801e54a:	2b04      	cmp	r3, #4
 801e54c:	d00d      	beq.n	801e56a <dhcp_create_msg+0x166>
 801e54e:	79fb      	ldrb	r3, [r7, #7]
 801e550:	2b07      	cmp	r3, #7
 801e552:	d00a      	beq.n	801e56a <dhcp_create_msg+0x166>
 801e554:	79fb      	ldrb	r3, [r7, #7]
 801e556:	2b03      	cmp	r3, #3
 801e558:	d10d      	bne.n	801e576 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801e55a:	68bb      	ldr	r3, [r7, #8]
 801e55c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e55e:	2b05      	cmp	r3, #5
 801e560:	d003      	beq.n	801e56a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801e562:	68bb      	ldr	r3, [r7, #8]
 801e564:	7a5b      	ldrb	r3, [r3, #9]
 801e566:	2b04      	cmp	r3, #4
 801e568:	d105      	bne.n	801e576 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	1d1a      	adds	r2, r3, #4
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	691b      	ldr	r3, [r3, #16]
 801e572:	6812      	ldr	r2, [r2, #0]
 801e574:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801e576:	68bb      	ldr	r3, [r7, #8]
 801e578:	691b      	ldr	r3, [r3, #16]
 801e57a:	2200      	movs	r2, #0
 801e57c:	741a      	strb	r2, [r3, #16]
 801e57e:	2200      	movs	r2, #0
 801e580:	745a      	strb	r2, [r3, #17]
 801e582:	2200      	movs	r2, #0
 801e584:	749a      	strb	r2, [r3, #18]
 801e586:	2200      	movs	r2, #0
 801e588:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801e58a:	68bb      	ldr	r3, [r7, #8]
 801e58c:	691b      	ldr	r3, [r3, #16]
 801e58e:	2200      	movs	r2, #0
 801e590:	751a      	strb	r2, [r3, #20]
 801e592:	2200      	movs	r2, #0
 801e594:	755a      	strb	r2, [r3, #21]
 801e596:	2200      	movs	r2, #0
 801e598:	759a      	strb	r2, [r3, #22]
 801e59a:	2200      	movs	r2, #0
 801e59c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801e59e:	68bb      	ldr	r3, [r7, #8]
 801e5a0:	691b      	ldr	r3, [r3, #16]
 801e5a2:	2200      	movs	r2, #0
 801e5a4:	761a      	strb	r2, [r3, #24]
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	765a      	strb	r2, [r3, #25]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	769a      	strb	r2, [r3, #26]
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	82fb      	strh	r3, [r7, #22]
 801e5b6:	e019      	b.n	801e5ec <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e5be:	461a      	mov	r2, r3
 801e5c0:	8afb      	ldrh	r3, [r7, #22]
 801e5c2:	4293      	cmp	r3, r2
 801e5c4:	d208      	bcs.n	801e5d8 <dhcp_create_msg+0x1d4>
 801e5c6:	8afb      	ldrh	r3, [r7, #22]
 801e5c8:	2b05      	cmp	r3, #5
 801e5ca:	d805      	bhi.n	801e5d8 <dhcp_create_msg+0x1d4>
 801e5cc:	8afb      	ldrh	r3, [r7, #22]
 801e5ce:	68fa      	ldr	r2, [r7, #12]
 801e5d0:	4413      	add	r3, r2
 801e5d2:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 801e5d6:	e000      	b.n	801e5da <dhcp_create_msg+0x1d6>
 801e5d8:	2100      	movs	r1, #0
 801e5da:	68bb      	ldr	r3, [r7, #8]
 801e5dc:	691a      	ldr	r2, [r3, #16]
 801e5de:	8afb      	ldrh	r3, [r7, #22]
 801e5e0:	4413      	add	r3, r2
 801e5e2:	460a      	mov	r2, r1
 801e5e4:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801e5e6:	8afb      	ldrh	r3, [r7, #22]
 801e5e8:	3301      	adds	r3, #1
 801e5ea:	82fb      	strh	r3, [r7, #22]
 801e5ec:	8afb      	ldrh	r3, [r7, #22]
 801e5ee:	2b0f      	cmp	r3, #15
 801e5f0:	d9e2      	bls.n	801e5b8 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	82fb      	strh	r3, [r7, #22]
 801e5f6:	e009      	b.n	801e60c <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801e5f8:	68bb      	ldr	r3, [r7, #8]
 801e5fa:	691a      	ldr	r2, [r3, #16]
 801e5fc:	8afb      	ldrh	r3, [r7, #22]
 801e5fe:	4413      	add	r3, r2
 801e600:	2200      	movs	r2, #0
 801e602:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e606:	8afb      	ldrh	r3, [r7, #22]
 801e608:	3301      	adds	r3, #1
 801e60a:	82fb      	strh	r3, [r7, #22]
 801e60c:	8afb      	ldrh	r3, [r7, #22]
 801e60e:	2b3f      	cmp	r3, #63	@ 0x3f
 801e610:	d9f2      	bls.n	801e5f8 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e612:	2300      	movs	r3, #0
 801e614:	82fb      	strh	r3, [r7, #22]
 801e616:	e009      	b.n	801e62c <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801e618:	68bb      	ldr	r3, [r7, #8]
 801e61a:	691a      	ldr	r2, [r3, #16]
 801e61c:	8afb      	ldrh	r3, [r7, #22]
 801e61e:	4413      	add	r3, r2
 801e620:	2200      	movs	r2, #0
 801e622:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e626:	8afb      	ldrh	r3, [r7, #22]
 801e628:	3301      	adds	r3, #1
 801e62a:	82fb      	strh	r3, [r7, #22]
 801e62c:	8afb      	ldrh	r3, [r7, #22]
 801e62e:	2b7f      	cmp	r3, #127	@ 0x7f
 801e630:	d9f2      	bls.n	801e618 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e632:	68bb      	ldr	r3, [r7, #8]
 801e634:	691b      	ldr	r3, [r3, #16]
 801e636:	2200      	movs	r2, #0
 801e638:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e63c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801e640:	2200      	movs	r2, #0
 801e642:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801e646:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801e64a:	2200      	movs	r2, #0
 801e64c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801e650:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801e654:	2200      	movs	r2, #0
 801e656:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e65a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 801e65e:	68bb      	ldr	r3, [r7, #8]
 801e660:	2200      	movs	r2, #0
 801e662:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e664:	2300      	movs	r3, #0
 801e666:	82fb      	strh	r3, [r7, #22]
 801e668:	e00b      	b.n	801e682 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	691a      	ldr	r2, [r3, #16]
 801e66e:	8afb      	ldrh	r3, [r7, #22]
 801e670:	8af9      	ldrh	r1, [r7, #22]
 801e672:	b2c9      	uxtb	r1, r1
 801e674:	4413      	add	r3, r2
 801e676:	460a      	mov	r2, r1
 801e678:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e67c:	8afb      	ldrh	r3, [r7, #22]
 801e67e:	3301      	adds	r3, #1
 801e680:	82fb      	strh	r3, [r7, #22]
 801e682:	8afb      	ldrh	r3, [r7, #22]
 801e684:	2b43      	cmp	r3, #67	@ 0x43
 801e686:	d9f0      	bls.n	801e66a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e688:	2201      	movs	r2, #1
 801e68a:	2135      	movs	r1, #53	@ 0x35
 801e68c:	68b8      	ldr	r0, [r7, #8]
 801e68e:	f7ff fa4b 	bl	801db28 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801e692:	79fb      	ldrb	r3, [r7, #7]
 801e694:	4619      	mov	r1, r3
 801e696:	68b8      	ldr	r0, [r7, #8]
 801e698:	f7ff fa80 	bl	801db9c <dhcp_option_byte>
  return ERR_OK;
 801e69c:	2300      	movs	r3, #0
}
 801e69e:	4618      	mov	r0, r3
 801e6a0:	371c      	adds	r7, #28
 801e6a2:	46bd      	mov	sp, r7
 801e6a4:	bd90      	pop	{r4, r7, pc}
 801e6a6:	bf00      	nop
 801e6a8:	0802739c 	.word	0x0802739c
 801e6ac:	080276cc 	.word	0x080276cc
 801e6b0:	080273fc 	.word	0x080273fc
 801e6b4:	080276ec 	.word	0x080276ec
 801e6b8:	0802770c 	.word	0x0802770c
 801e6bc:	08027734 	.word	0x08027734
 801e6c0:	0802775c 	.word	0x0802775c
 801e6c4:	2000be14 	.word	0x2000be14

0801e6c8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b082      	sub	sp, #8
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d107      	bne.n	801e6e6 <dhcp_delete_msg+0x1e>
 801e6d6:	4b18      	ldr	r3, [pc, #96]	@ (801e738 <dhcp_delete_msg+0x70>)
 801e6d8:	f240 726d 	movw	r2, #1901	@ 0x76d
 801e6dc:	4917      	ldr	r1, [pc, #92]	@ (801e73c <dhcp_delete_msg+0x74>)
 801e6de:	4818      	ldr	r0, [pc, #96]	@ (801e740 <dhcp_delete_msg+0x78>)
 801e6e0:	f003 fdb4 	bl	802224c <iprintf>
 801e6e4:	e024      	b.n	801e730 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	68db      	ldr	r3, [r3, #12]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d106      	bne.n	801e6fc <dhcp_delete_msg+0x34>
 801e6ee:	4b12      	ldr	r3, [pc, #72]	@ (801e738 <dhcp_delete_msg+0x70>)
 801e6f0:	f240 726e 	movw	r2, #1902	@ 0x76e
 801e6f4:	4913      	ldr	r1, [pc, #76]	@ (801e744 <dhcp_delete_msg+0x7c>)
 801e6f6:	4812      	ldr	r0, [pc, #72]	@ (801e740 <dhcp_delete_msg+0x78>)
 801e6f8:	f003 fda8 	bl	802224c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	691b      	ldr	r3, [r3, #16]
 801e700:	2b00      	cmp	r3, #0
 801e702:	d106      	bne.n	801e712 <dhcp_delete_msg+0x4a>
 801e704:	4b0c      	ldr	r3, [pc, #48]	@ (801e738 <dhcp_delete_msg+0x70>)
 801e706:	f240 726f 	movw	r2, #1903	@ 0x76f
 801e70a:	490f      	ldr	r1, [pc, #60]	@ (801e748 <dhcp_delete_msg+0x80>)
 801e70c:	480c      	ldr	r0, [pc, #48]	@ (801e740 <dhcp_delete_msg+0x78>)
 801e70e:	f003 fd9d 	bl	802224c <iprintf>
  if (dhcp->p_out != NULL) {
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	68db      	ldr	r3, [r3, #12]
 801e716:	2b00      	cmp	r3, #0
 801e718:	d004      	beq.n	801e724 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	68db      	ldr	r3, [r3, #12]
 801e71e:	4618      	mov	r0, r3
 801e720:	f7f7 fd76 	bl	8016210 <pbuf_free>
  }
  dhcp->p_out = NULL;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	2200      	movs	r2, #0
 801e728:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	2200      	movs	r2, #0
 801e72e:	611a      	str	r2, [r3, #16]
}
 801e730:	3708      	adds	r7, #8
 801e732:	46bd      	mov	sp, r7
 801e734:	bd80      	pop	{r7, pc}
 801e736:	bf00      	nop
 801e738:	0802739c 	.word	0x0802739c
 801e73c:	0802779c 	.word	0x0802779c
 801e740:	080273fc 	.word	0x080273fc
 801e744:	080277bc 	.word	0x080277bc
 801e748:	080277e4 	.word	0x080277e4

0801e74c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b082      	sub	sp, #8
 801e750:	af00      	add	r7, sp, #0
 801e752:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d107      	bne.n	801e76a <dhcp_option_trailer+0x1e>
 801e75a:	4b24      	ldr	r3, [pc, #144]	@ (801e7ec <dhcp_option_trailer+0xa0>)
 801e75c:	f240 7282 	movw	r2, #1922	@ 0x782
 801e760:	4923      	ldr	r1, [pc, #140]	@ (801e7f0 <dhcp_option_trailer+0xa4>)
 801e762:	4824      	ldr	r0, [pc, #144]	@ (801e7f4 <dhcp_option_trailer+0xa8>)
 801e764:	f003 fd72 	bl	802224c <iprintf>
 801e768:	e03c      	b.n	801e7e4 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	691b      	ldr	r3, [r3, #16]
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d106      	bne.n	801e780 <dhcp_option_trailer+0x34>
 801e772:	4b1e      	ldr	r3, [pc, #120]	@ (801e7ec <dhcp_option_trailer+0xa0>)
 801e774:	f240 7283 	movw	r2, #1923	@ 0x783
 801e778:	491f      	ldr	r1, [pc, #124]	@ (801e7f8 <dhcp_option_trailer+0xac>)
 801e77a:	481e      	ldr	r0, [pc, #120]	@ (801e7f4 <dhcp_option_trailer+0xa8>)
 801e77c:	f003 fd66 	bl	802224c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	8a9b      	ldrh	r3, [r3, #20]
 801e784:	2b43      	cmp	r3, #67	@ 0x43
 801e786:	d906      	bls.n	801e796 <dhcp_option_trailer+0x4a>
 801e788:	4b18      	ldr	r3, [pc, #96]	@ (801e7ec <dhcp_option_trailer+0xa0>)
 801e78a:	f240 7284 	movw	r2, #1924	@ 0x784
 801e78e:	491b      	ldr	r1, [pc, #108]	@ (801e7fc <dhcp_option_trailer+0xb0>)
 801e790:	4818      	ldr	r0, [pc, #96]	@ (801e7f4 <dhcp_option_trailer+0xa8>)
 801e792:	f003 fd5b 	bl	802224c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	691a      	ldr	r2, [r3, #16]
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	8a9b      	ldrh	r3, [r3, #20]
 801e79e:	1c59      	adds	r1, r3, #1
 801e7a0:	b288      	uxth	r0, r1
 801e7a2:	6879      	ldr	r1, [r7, #4]
 801e7a4:	8288      	strh	r0, [r1, #20]
 801e7a6:	4413      	add	r3, r2
 801e7a8:	22ff      	movs	r2, #255	@ 0xff
 801e7aa:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7ae:	e00b      	b.n	801e7c8 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	691a      	ldr	r2, [r3, #16]
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	8a9b      	ldrh	r3, [r3, #20]
 801e7b8:	1c59      	adds	r1, r3, #1
 801e7ba:	b288      	uxth	r0, r1
 801e7bc:	6879      	ldr	r1, [r7, #4]
 801e7be:	8288      	strh	r0, [r1, #20]
 801e7c0:	4413      	add	r3, r2
 801e7c2:	2200      	movs	r2, #0
 801e7c4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	8a9b      	ldrh	r3, [r3, #20]
 801e7cc:	2b43      	cmp	r3, #67	@ 0x43
 801e7ce:	d905      	bls.n	801e7dc <dhcp_option_trailer+0x90>
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	8a9b      	ldrh	r3, [r3, #20]
 801e7d4:	f003 0303 	and.w	r3, r3, #3
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d003      	beq.n	801e7e4 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e7e0:	2b43      	cmp	r3, #67	@ 0x43
 801e7e2:	d9e5      	bls.n	801e7b0 <dhcp_option_trailer+0x64>
  }
}
 801e7e4:	3708      	adds	r7, #8
 801e7e6:	46bd      	mov	sp, r7
 801e7e8:	bd80      	pop	{r7, pc}
 801e7ea:	bf00      	nop
 801e7ec:	0802739c 	.word	0x0802739c
 801e7f0:	0802780c 	.word	0x0802780c
 801e7f4:	080273fc 	.word	0x080273fc
 801e7f8:	08027830 	.word	0x08027830
 801e7fc:	0802785c 	.word	0x0802785c

0801e800 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e800:	b480      	push	{r7}
 801e802:	b085      	sub	sp, #20
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d017      	beq.n	801e83e <dhcp_supplied_address+0x3e>
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e812:	2b00      	cmp	r3, #0
 801e814:	d013      	beq.n	801e83e <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e81a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	7a5b      	ldrb	r3, [r3, #9]
 801e820:	2b0a      	cmp	r3, #10
 801e822:	d007      	beq.n	801e834 <dhcp_supplied_address+0x34>
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	7a5b      	ldrb	r3, [r3, #9]
 801e828:	2b05      	cmp	r3, #5
 801e82a:	d003      	beq.n	801e834 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e830:	2b04      	cmp	r3, #4
 801e832:	d101      	bne.n	801e838 <dhcp_supplied_address+0x38>
 801e834:	2301      	movs	r3, #1
 801e836:	e000      	b.n	801e83a <dhcp_supplied_address+0x3a>
 801e838:	2300      	movs	r3, #0
 801e83a:	b2db      	uxtb	r3, r3
 801e83c:	e000      	b.n	801e840 <dhcp_supplied_address+0x40>
  }
  return 0;
 801e83e:	2300      	movs	r3, #0
}
 801e840:	4618      	mov	r0, r3
 801e842:	3714      	adds	r7, #20
 801e844:	46bd      	mov	sp, r7
 801e846:	bc80      	pop	{r7}
 801e848:	4770      	bx	lr
	...

0801e84c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e84c:	b580      	push	{r7, lr}
 801e84e:	b082      	sub	sp, #8
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e854:	4915      	ldr	r1, [pc, #84]	@ (801e8ac <etharp_free_entry+0x60>)
 801e856:	687a      	ldr	r2, [r7, #4]
 801e858:	4613      	mov	r3, r2
 801e85a:	005b      	lsls	r3, r3, #1
 801e85c:	4413      	add	r3, r2
 801e85e:	00db      	lsls	r3, r3, #3
 801e860:	440b      	add	r3, r1
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d013      	beq.n	801e890 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e868:	4910      	ldr	r1, [pc, #64]	@ (801e8ac <etharp_free_entry+0x60>)
 801e86a:	687a      	ldr	r2, [r7, #4]
 801e86c:	4613      	mov	r3, r2
 801e86e:	005b      	lsls	r3, r3, #1
 801e870:	4413      	add	r3, r2
 801e872:	00db      	lsls	r3, r3, #3
 801e874:	440b      	add	r3, r1
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	4618      	mov	r0, r3
 801e87a:	f7f7 fcc9 	bl	8016210 <pbuf_free>
    arp_table[i].q = NULL;
 801e87e:	490b      	ldr	r1, [pc, #44]	@ (801e8ac <etharp_free_entry+0x60>)
 801e880:	687a      	ldr	r2, [r7, #4]
 801e882:	4613      	mov	r3, r2
 801e884:	005b      	lsls	r3, r3, #1
 801e886:	4413      	add	r3, r2
 801e888:	00db      	lsls	r3, r3, #3
 801e88a:	440b      	add	r3, r1
 801e88c:	2200      	movs	r2, #0
 801e88e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e890:	4906      	ldr	r1, [pc, #24]	@ (801e8ac <etharp_free_entry+0x60>)
 801e892:	687a      	ldr	r2, [r7, #4]
 801e894:	4613      	mov	r3, r2
 801e896:	005b      	lsls	r3, r3, #1
 801e898:	4413      	add	r3, r2
 801e89a:	00db      	lsls	r3, r3, #3
 801e89c:	440b      	add	r3, r1
 801e89e:	3314      	adds	r3, #20
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e8a4:	bf00      	nop
 801e8a6:	3708      	adds	r7, #8
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}
 801e8ac:	2000be18 	.word	0x2000be18

0801e8b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b082      	sub	sp, #8
 801e8b4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e8b6:	2300      	movs	r3, #0
 801e8b8:	71fb      	strb	r3, [r7, #7]
 801e8ba:	e096      	b.n	801e9ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e8bc:	79fa      	ldrb	r2, [r7, #7]
 801e8be:	494f      	ldr	r1, [pc, #316]	@ (801e9fc <etharp_tmr+0x14c>)
 801e8c0:	4613      	mov	r3, r2
 801e8c2:	005b      	lsls	r3, r3, #1
 801e8c4:	4413      	add	r3, r2
 801e8c6:	00db      	lsls	r3, r3, #3
 801e8c8:	440b      	add	r3, r1
 801e8ca:	3314      	adds	r3, #20
 801e8cc:	781b      	ldrb	r3, [r3, #0]
 801e8ce:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801e8d0:	79bb      	ldrb	r3, [r7, #6]
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	f000 8086 	beq.w	801e9e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801e8d8:	79fa      	ldrb	r2, [r7, #7]
 801e8da:	4948      	ldr	r1, [pc, #288]	@ (801e9fc <etharp_tmr+0x14c>)
 801e8dc:	4613      	mov	r3, r2
 801e8de:	005b      	lsls	r3, r3, #1
 801e8e0:	4413      	add	r3, r2
 801e8e2:	00db      	lsls	r3, r3, #3
 801e8e4:	440b      	add	r3, r1
 801e8e6:	3312      	adds	r3, #18
 801e8e8:	881b      	ldrh	r3, [r3, #0]
 801e8ea:	3301      	adds	r3, #1
 801e8ec:	b298      	uxth	r0, r3
 801e8ee:	4943      	ldr	r1, [pc, #268]	@ (801e9fc <etharp_tmr+0x14c>)
 801e8f0:	4613      	mov	r3, r2
 801e8f2:	005b      	lsls	r3, r3, #1
 801e8f4:	4413      	add	r3, r2
 801e8f6:	00db      	lsls	r3, r3, #3
 801e8f8:	440b      	add	r3, r1
 801e8fa:	3312      	adds	r3, #18
 801e8fc:	4602      	mov	r2, r0
 801e8fe:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e900:	79fa      	ldrb	r2, [r7, #7]
 801e902:	493e      	ldr	r1, [pc, #248]	@ (801e9fc <etharp_tmr+0x14c>)
 801e904:	4613      	mov	r3, r2
 801e906:	005b      	lsls	r3, r3, #1
 801e908:	4413      	add	r3, r2
 801e90a:	00db      	lsls	r3, r3, #3
 801e90c:	440b      	add	r3, r1
 801e90e:	3312      	adds	r3, #18
 801e910:	881b      	ldrh	r3, [r3, #0]
 801e912:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801e916:	d215      	bcs.n	801e944 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e918:	79fa      	ldrb	r2, [r7, #7]
 801e91a:	4938      	ldr	r1, [pc, #224]	@ (801e9fc <etharp_tmr+0x14c>)
 801e91c:	4613      	mov	r3, r2
 801e91e:	005b      	lsls	r3, r3, #1
 801e920:	4413      	add	r3, r2
 801e922:	00db      	lsls	r3, r3, #3
 801e924:	440b      	add	r3, r1
 801e926:	3314      	adds	r3, #20
 801e928:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e92a:	2b01      	cmp	r3, #1
 801e92c:	d10f      	bne.n	801e94e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e92e:	79fa      	ldrb	r2, [r7, #7]
 801e930:	4932      	ldr	r1, [pc, #200]	@ (801e9fc <etharp_tmr+0x14c>)
 801e932:	4613      	mov	r3, r2
 801e934:	005b      	lsls	r3, r3, #1
 801e936:	4413      	add	r3, r2
 801e938:	00db      	lsls	r3, r3, #3
 801e93a:	440b      	add	r3, r1
 801e93c:	3312      	adds	r3, #18
 801e93e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e940:	2b04      	cmp	r3, #4
 801e942:	d904      	bls.n	801e94e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e944:	79fb      	ldrb	r3, [r7, #7]
 801e946:	4618      	mov	r0, r3
 801e948:	f7ff ff80 	bl	801e84c <etharp_free_entry>
 801e94c:	e04a      	b.n	801e9e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e94e:	79fa      	ldrb	r2, [r7, #7]
 801e950:	492a      	ldr	r1, [pc, #168]	@ (801e9fc <etharp_tmr+0x14c>)
 801e952:	4613      	mov	r3, r2
 801e954:	005b      	lsls	r3, r3, #1
 801e956:	4413      	add	r3, r2
 801e958:	00db      	lsls	r3, r3, #3
 801e95a:	440b      	add	r3, r1
 801e95c:	3314      	adds	r3, #20
 801e95e:	781b      	ldrb	r3, [r3, #0]
 801e960:	2b03      	cmp	r3, #3
 801e962:	d10a      	bne.n	801e97a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e964:	79fa      	ldrb	r2, [r7, #7]
 801e966:	4925      	ldr	r1, [pc, #148]	@ (801e9fc <etharp_tmr+0x14c>)
 801e968:	4613      	mov	r3, r2
 801e96a:	005b      	lsls	r3, r3, #1
 801e96c:	4413      	add	r3, r2
 801e96e:	00db      	lsls	r3, r3, #3
 801e970:	440b      	add	r3, r1
 801e972:	3314      	adds	r3, #20
 801e974:	2204      	movs	r2, #4
 801e976:	701a      	strb	r2, [r3, #0]
 801e978:	e034      	b.n	801e9e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e97a:	79fa      	ldrb	r2, [r7, #7]
 801e97c:	491f      	ldr	r1, [pc, #124]	@ (801e9fc <etharp_tmr+0x14c>)
 801e97e:	4613      	mov	r3, r2
 801e980:	005b      	lsls	r3, r3, #1
 801e982:	4413      	add	r3, r2
 801e984:	00db      	lsls	r3, r3, #3
 801e986:	440b      	add	r3, r1
 801e988:	3314      	adds	r3, #20
 801e98a:	781b      	ldrb	r3, [r3, #0]
 801e98c:	2b04      	cmp	r3, #4
 801e98e:	d10a      	bne.n	801e9a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e990:	79fa      	ldrb	r2, [r7, #7]
 801e992:	491a      	ldr	r1, [pc, #104]	@ (801e9fc <etharp_tmr+0x14c>)
 801e994:	4613      	mov	r3, r2
 801e996:	005b      	lsls	r3, r3, #1
 801e998:	4413      	add	r3, r2
 801e99a:	00db      	lsls	r3, r3, #3
 801e99c:	440b      	add	r3, r1
 801e99e:	3314      	adds	r3, #20
 801e9a0:	2202      	movs	r2, #2
 801e9a2:	701a      	strb	r2, [r3, #0]
 801e9a4:	e01e      	b.n	801e9e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e9a6:	79fa      	ldrb	r2, [r7, #7]
 801e9a8:	4914      	ldr	r1, [pc, #80]	@ (801e9fc <etharp_tmr+0x14c>)
 801e9aa:	4613      	mov	r3, r2
 801e9ac:	005b      	lsls	r3, r3, #1
 801e9ae:	4413      	add	r3, r2
 801e9b0:	00db      	lsls	r3, r3, #3
 801e9b2:	440b      	add	r3, r1
 801e9b4:	3314      	adds	r3, #20
 801e9b6:	781b      	ldrb	r3, [r3, #0]
 801e9b8:	2b01      	cmp	r3, #1
 801e9ba:	d113      	bne.n	801e9e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e9bc:	79fa      	ldrb	r2, [r7, #7]
 801e9be:	490f      	ldr	r1, [pc, #60]	@ (801e9fc <etharp_tmr+0x14c>)
 801e9c0:	4613      	mov	r3, r2
 801e9c2:	005b      	lsls	r3, r3, #1
 801e9c4:	4413      	add	r3, r2
 801e9c6:	00db      	lsls	r3, r3, #3
 801e9c8:	440b      	add	r3, r1
 801e9ca:	3308      	adds	r3, #8
 801e9cc:	6818      	ldr	r0, [r3, #0]
 801e9ce:	79fa      	ldrb	r2, [r7, #7]
 801e9d0:	4613      	mov	r3, r2
 801e9d2:	005b      	lsls	r3, r3, #1
 801e9d4:	4413      	add	r3, r2
 801e9d6:	00db      	lsls	r3, r3, #3
 801e9d8:	4a08      	ldr	r2, [pc, #32]	@ (801e9fc <etharp_tmr+0x14c>)
 801e9da:	4413      	add	r3, r2
 801e9dc:	3304      	adds	r3, #4
 801e9de:	4619      	mov	r1, r3
 801e9e0:	f000 fee8 	bl	801f7b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e9e4:	79fb      	ldrb	r3, [r7, #7]
 801e9e6:	3301      	adds	r3, #1
 801e9e8:	71fb      	strb	r3, [r7, #7]
 801e9ea:	79fb      	ldrb	r3, [r7, #7]
 801e9ec:	2b09      	cmp	r3, #9
 801e9ee:	f67f af65 	bls.w	801e8bc <etharp_tmr+0xc>
      }
    }
  }
}
 801e9f2:	bf00      	nop
 801e9f4:	bf00      	nop
 801e9f6:	3708      	adds	r7, #8
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	bd80      	pop	{r7, pc}
 801e9fc:	2000be18 	.word	0x2000be18

0801ea00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b088      	sub	sp, #32
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	60f8      	str	r0, [r7, #12]
 801ea08:	460b      	mov	r3, r1
 801ea0a:	607a      	str	r2, [r7, #4]
 801ea0c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ea0e:	230a      	movs	r3, #10
 801ea10:	77fb      	strb	r3, [r7, #31]
 801ea12:	230a      	movs	r3, #10
 801ea14:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801ea16:	230a      	movs	r3, #10
 801ea18:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801ea1a:	2300      	movs	r3, #0
 801ea1c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801ea1e:	230a      	movs	r3, #10
 801ea20:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ea22:	2300      	movs	r3, #0
 801ea24:	833b      	strh	r3, [r7, #24]
 801ea26:	2300      	movs	r3, #0
 801ea28:	82fb      	strh	r3, [r7, #22]
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ea2e:	2300      	movs	r3, #0
 801ea30:	773b      	strb	r3, [r7, #28]
 801ea32:	e093      	b.n	801eb5c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801ea34:	7f3a      	ldrb	r2, [r7, #28]
 801ea36:	4990      	ldr	r1, [pc, #576]	@ (801ec78 <etharp_find_entry+0x278>)
 801ea38:	4613      	mov	r3, r2
 801ea3a:	005b      	lsls	r3, r3, #1
 801ea3c:	4413      	add	r3, r2
 801ea3e:	00db      	lsls	r3, r3, #3
 801ea40:	440b      	add	r3, r1
 801ea42:	3314      	adds	r3, #20
 801ea44:	781b      	ldrb	r3, [r3, #0]
 801ea46:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ea48:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801ea4c:	2b0a      	cmp	r3, #10
 801ea4e:	d105      	bne.n	801ea5c <etharp_find_entry+0x5c>
 801ea50:	7cfb      	ldrb	r3, [r7, #19]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d102      	bne.n	801ea5c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801ea56:	7f3b      	ldrb	r3, [r7, #28]
 801ea58:	777b      	strb	r3, [r7, #29]
 801ea5a:	e07c      	b.n	801eb56 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ea5c:	7cfb      	ldrb	r3, [r7, #19]
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d079      	beq.n	801eb56 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ea62:	7cfb      	ldrb	r3, [r7, #19]
 801ea64:	2b01      	cmp	r3, #1
 801ea66:	d009      	beq.n	801ea7c <etharp_find_entry+0x7c>
 801ea68:	7cfb      	ldrb	r3, [r7, #19]
 801ea6a:	2b01      	cmp	r3, #1
 801ea6c:	d806      	bhi.n	801ea7c <etharp_find_entry+0x7c>
 801ea6e:	4b83      	ldr	r3, [pc, #524]	@ (801ec7c <etharp_find_entry+0x27c>)
 801ea70:	f240 1225 	movw	r2, #293	@ 0x125
 801ea74:	4982      	ldr	r1, [pc, #520]	@ (801ec80 <etharp_find_entry+0x280>)
 801ea76:	4883      	ldr	r0, [pc, #524]	@ (801ec84 <etharp_find_entry+0x284>)
 801ea78:	f003 fbe8 	bl	802224c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d00f      	beq.n	801eaa2 <etharp_find_entry+0xa2>
 801ea82:	68fb      	ldr	r3, [r7, #12]
 801ea84:	6819      	ldr	r1, [r3, #0]
 801ea86:	7f3a      	ldrb	r2, [r7, #28]
 801ea88:	487b      	ldr	r0, [pc, #492]	@ (801ec78 <etharp_find_entry+0x278>)
 801ea8a:	4613      	mov	r3, r2
 801ea8c:	005b      	lsls	r3, r3, #1
 801ea8e:	4413      	add	r3, r2
 801ea90:	00db      	lsls	r3, r3, #3
 801ea92:	4403      	add	r3, r0
 801ea94:	3304      	adds	r3, #4
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4299      	cmp	r1, r3
 801ea9a:	d102      	bne.n	801eaa2 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ea9c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801eaa0:	e0e5      	b.n	801ec6e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801eaa2:	7cfb      	ldrb	r3, [r7, #19]
 801eaa4:	2b01      	cmp	r3, #1
 801eaa6:	d13b      	bne.n	801eb20 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801eaa8:	7f3a      	ldrb	r2, [r7, #28]
 801eaaa:	4973      	ldr	r1, [pc, #460]	@ (801ec78 <etharp_find_entry+0x278>)
 801eaac:	4613      	mov	r3, r2
 801eaae:	005b      	lsls	r3, r3, #1
 801eab0:	4413      	add	r3, r2
 801eab2:	00db      	lsls	r3, r3, #3
 801eab4:	440b      	add	r3, r1
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d018      	beq.n	801eaee <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801eabc:	7f3a      	ldrb	r2, [r7, #28]
 801eabe:	496e      	ldr	r1, [pc, #440]	@ (801ec78 <etharp_find_entry+0x278>)
 801eac0:	4613      	mov	r3, r2
 801eac2:	005b      	lsls	r3, r3, #1
 801eac4:	4413      	add	r3, r2
 801eac6:	00db      	lsls	r3, r3, #3
 801eac8:	440b      	add	r3, r1
 801eaca:	3312      	adds	r3, #18
 801eacc:	881b      	ldrh	r3, [r3, #0]
 801eace:	8b3a      	ldrh	r2, [r7, #24]
 801ead0:	429a      	cmp	r2, r3
 801ead2:	d840      	bhi.n	801eb56 <etharp_find_entry+0x156>
            old_queue = i;
 801ead4:	7f3b      	ldrb	r3, [r7, #28]
 801ead6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801ead8:	7f3a      	ldrb	r2, [r7, #28]
 801eada:	4967      	ldr	r1, [pc, #412]	@ (801ec78 <etharp_find_entry+0x278>)
 801eadc:	4613      	mov	r3, r2
 801eade:	005b      	lsls	r3, r3, #1
 801eae0:	4413      	add	r3, r2
 801eae2:	00db      	lsls	r3, r3, #3
 801eae4:	440b      	add	r3, r1
 801eae6:	3312      	adds	r3, #18
 801eae8:	881b      	ldrh	r3, [r3, #0]
 801eaea:	833b      	strh	r3, [r7, #24]
 801eaec:	e033      	b.n	801eb56 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801eaee:	7f3a      	ldrb	r2, [r7, #28]
 801eaf0:	4961      	ldr	r1, [pc, #388]	@ (801ec78 <etharp_find_entry+0x278>)
 801eaf2:	4613      	mov	r3, r2
 801eaf4:	005b      	lsls	r3, r3, #1
 801eaf6:	4413      	add	r3, r2
 801eaf8:	00db      	lsls	r3, r3, #3
 801eafa:	440b      	add	r3, r1
 801eafc:	3312      	adds	r3, #18
 801eafe:	881b      	ldrh	r3, [r3, #0]
 801eb00:	8afa      	ldrh	r2, [r7, #22]
 801eb02:	429a      	cmp	r2, r3
 801eb04:	d827      	bhi.n	801eb56 <etharp_find_entry+0x156>
            old_pending = i;
 801eb06:	7f3b      	ldrb	r3, [r7, #28]
 801eb08:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801eb0a:	7f3a      	ldrb	r2, [r7, #28]
 801eb0c:	495a      	ldr	r1, [pc, #360]	@ (801ec78 <etharp_find_entry+0x278>)
 801eb0e:	4613      	mov	r3, r2
 801eb10:	005b      	lsls	r3, r3, #1
 801eb12:	4413      	add	r3, r2
 801eb14:	00db      	lsls	r3, r3, #3
 801eb16:	440b      	add	r3, r1
 801eb18:	3312      	adds	r3, #18
 801eb1a:	881b      	ldrh	r3, [r3, #0]
 801eb1c:	82fb      	strh	r3, [r7, #22]
 801eb1e:	e01a      	b.n	801eb56 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801eb20:	7cfb      	ldrb	r3, [r7, #19]
 801eb22:	2b01      	cmp	r3, #1
 801eb24:	d917      	bls.n	801eb56 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801eb26:	7f3a      	ldrb	r2, [r7, #28]
 801eb28:	4953      	ldr	r1, [pc, #332]	@ (801ec78 <etharp_find_entry+0x278>)
 801eb2a:	4613      	mov	r3, r2
 801eb2c:	005b      	lsls	r3, r3, #1
 801eb2e:	4413      	add	r3, r2
 801eb30:	00db      	lsls	r3, r3, #3
 801eb32:	440b      	add	r3, r1
 801eb34:	3312      	adds	r3, #18
 801eb36:	881b      	ldrh	r3, [r3, #0]
 801eb38:	8aba      	ldrh	r2, [r7, #20]
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	d80b      	bhi.n	801eb56 <etharp_find_entry+0x156>
            old_stable = i;
 801eb3e:	7f3b      	ldrb	r3, [r7, #28]
 801eb40:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801eb42:	7f3a      	ldrb	r2, [r7, #28]
 801eb44:	494c      	ldr	r1, [pc, #304]	@ (801ec78 <etharp_find_entry+0x278>)
 801eb46:	4613      	mov	r3, r2
 801eb48:	005b      	lsls	r3, r3, #1
 801eb4a:	4413      	add	r3, r2
 801eb4c:	00db      	lsls	r3, r3, #3
 801eb4e:	440b      	add	r3, r1
 801eb50:	3312      	adds	r3, #18
 801eb52:	881b      	ldrh	r3, [r3, #0]
 801eb54:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eb56:	7f3b      	ldrb	r3, [r7, #28]
 801eb58:	3301      	adds	r3, #1
 801eb5a:	773b      	strb	r3, [r7, #28]
 801eb5c:	7f3b      	ldrb	r3, [r7, #28]
 801eb5e:	2b09      	cmp	r3, #9
 801eb60:	f67f af68 	bls.w	801ea34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801eb64:	7afb      	ldrb	r3, [r7, #11]
 801eb66:	f003 0302 	and.w	r3, r3, #2
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d108      	bne.n	801eb80 <etharp_find_entry+0x180>
 801eb6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801eb72:	2b0a      	cmp	r3, #10
 801eb74:	d107      	bne.n	801eb86 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801eb76:	7afb      	ldrb	r3, [r7, #11]
 801eb78:	f003 0301 	and.w	r3, r3, #1
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d102      	bne.n	801eb86 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801eb80:	f04f 33ff 	mov.w	r3, #4294967295
 801eb84:	e073      	b.n	801ec6e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801eb86:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801eb8a:	2b09      	cmp	r3, #9
 801eb8c:	dc02      	bgt.n	801eb94 <etharp_find_entry+0x194>
    i = empty;
 801eb8e:	7f7b      	ldrb	r3, [r7, #29]
 801eb90:	773b      	strb	r3, [r7, #28]
 801eb92:	e036      	b.n	801ec02 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801eb94:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801eb98:	2b09      	cmp	r3, #9
 801eb9a:	dc13      	bgt.n	801ebc4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801eb9c:	7fbb      	ldrb	r3, [r7, #30]
 801eb9e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801eba0:	7f3a      	ldrb	r2, [r7, #28]
 801eba2:	4935      	ldr	r1, [pc, #212]	@ (801ec78 <etharp_find_entry+0x278>)
 801eba4:	4613      	mov	r3, r2
 801eba6:	005b      	lsls	r3, r3, #1
 801eba8:	4413      	add	r3, r2
 801ebaa:	00db      	lsls	r3, r3, #3
 801ebac:	440b      	add	r3, r1
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d018      	beq.n	801ebe6 <etharp_find_entry+0x1e6>
 801ebb4:	4b31      	ldr	r3, [pc, #196]	@ (801ec7c <etharp_find_entry+0x27c>)
 801ebb6:	f240 126f 	movw	r2, #367	@ 0x16f
 801ebba:	4933      	ldr	r1, [pc, #204]	@ (801ec88 <etharp_find_entry+0x288>)
 801ebbc:	4831      	ldr	r0, [pc, #196]	@ (801ec84 <etharp_find_entry+0x284>)
 801ebbe:	f003 fb45 	bl	802224c <iprintf>
 801ebc2:	e010      	b.n	801ebe6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ebc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ebc8:	2b09      	cmp	r3, #9
 801ebca:	dc02      	bgt.n	801ebd2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801ebcc:	7ffb      	ldrb	r3, [r7, #31]
 801ebce:	773b      	strb	r3, [r7, #28]
 801ebd0:	e009      	b.n	801ebe6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ebd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ebd6:	2b09      	cmp	r3, #9
 801ebd8:	dc02      	bgt.n	801ebe0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ebda:	7efb      	ldrb	r3, [r7, #27]
 801ebdc:	773b      	strb	r3, [r7, #28]
 801ebde:	e002      	b.n	801ebe6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801ebe0:	f04f 33ff 	mov.w	r3, #4294967295
 801ebe4:	e043      	b.n	801ec6e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ebe6:	7f3b      	ldrb	r3, [r7, #28]
 801ebe8:	2b09      	cmp	r3, #9
 801ebea:	d906      	bls.n	801ebfa <etharp_find_entry+0x1fa>
 801ebec:	4b23      	ldr	r3, [pc, #140]	@ (801ec7c <etharp_find_entry+0x27c>)
 801ebee:	f240 1281 	movw	r2, #385	@ 0x181
 801ebf2:	4926      	ldr	r1, [pc, #152]	@ (801ec8c <etharp_find_entry+0x28c>)
 801ebf4:	4823      	ldr	r0, [pc, #140]	@ (801ec84 <etharp_find_entry+0x284>)
 801ebf6:	f003 fb29 	bl	802224c <iprintf>
    etharp_free_entry(i);
 801ebfa:	7f3b      	ldrb	r3, [r7, #28]
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7ff fe25 	bl	801e84c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ec02:	7f3b      	ldrb	r3, [r7, #28]
 801ec04:	2b09      	cmp	r3, #9
 801ec06:	d906      	bls.n	801ec16 <etharp_find_entry+0x216>
 801ec08:	4b1c      	ldr	r3, [pc, #112]	@ (801ec7c <etharp_find_entry+0x27c>)
 801ec0a:	f240 1285 	movw	r2, #389	@ 0x185
 801ec0e:	491f      	ldr	r1, [pc, #124]	@ (801ec8c <etharp_find_entry+0x28c>)
 801ec10:	481c      	ldr	r0, [pc, #112]	@ (801ec84 <etharp_find_entry+0x284>)
 801ec12:	f003 fb1b 	bl	802224c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ec16:	7f3a      	ldrb	r2, [r7, #28]
 801ec18:	4917      	ldr	r1, [pc, #92]	@ (801ec78 <etharp_find_entry+0x278>)
 801ec1a:	4613      	mov	r3, r2
 801ec1c:	005b      	lsls	r3, r3, #1
 801ec1e:	4413      	add	r3, r2
 801ec20:	00db      	lsls	r3, r3, #3
 801ec22:	440b      	add	r3, r1
 801ec24:	3314      	adds	r3, #20
 801ec26:	781b      	ldrb	r3, [r3, #0]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d006      	beq.n	801ec3a <etharp_find_entry+0x23a>
 801ec2c:	4b13      	ldr	r3, [pc, #76]	@ (801ec7c <etharp_find_entry+0x27c>)
 801ec2e:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 801ec32:	4917      	ldr	r1, [pc, #92]	@ (801ec90 <etharp_find_entry+0x290>)
 801ec34:	4813      	ldr	r0, [pc, #76]	@ (801ec84 <etharp_find_entry+0x284>)
 801ec36:	f003 fb09 	bl	802224c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d00a      	beq.n	801ec56 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ec40:	7f3a      	ldrb	r2, [r7, #28]
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	6819      	ldr	r1, [r3, #0]
 801ec46:	480c      	ldr	r0, [pc, #48]	@ (801ec78 <etharp_find_entry+0x278>)
 801ec48:	4613      	mov	r3, r2
 801ec4a:	005b      	lsls	r3, r3, #1
 801ec4c:	4413      	add	r3, r2
 801ec4e:	00db      	lsls	r3, r3, #3
 801ec50:	4403      	add	r3, r0
 801ec52:	3304      	adds	r3, #4
 801ec54:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ec56:	7f3a      	ldrb	r2, [r7, #28]
 801ec58:	4907      	ldr	r1, [pc, #28]	@ (801ec78 <etharp_find_entry+0x278>)
 801ec5a:	4613      	mov	r3, r2
 801ec5c:	005b      	lsls	r3, r3, #1
 801ec5e:	4413      	add	r3, r2
 801ec60:	00db      	lsls	r3, r3, #3
 801ec62:	440b      	add	r3, r1
 801ec64:	3312      	adds	r3, #18
 801ec66:	2200      	movs	r2, #0
 801ec68:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801ec6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801ec6e:	4618      	mov	r0, r3
 801ec70:	3720      	adds	r7, #32
 801ec72:	46bd      	mov	sp, r7
 801ec74:	bd80      	pop	{r7, pc}
 801ec76:	bf00      	nop
 801ec78:	2000be18 	.word	0x2000be18
 801ec7c:	0802789c 	.word	0x0802789c
 801ec80:	080278d4 	.word	0x080278d4
 801ec84:	08027914 	.word	0x08027914
 801ec88:	0802793c 	.word	0x0802793c
 801ec8c:	08027954 	.word	0x08027954
 801ec90:	08027968 	.word	0x08027968

0801ec94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ec94:	b580      	push	{r7, lr}
 801ec96:	b088      	sub	sp, #32
 801ec98:	af02      	add	r7, sp, #8
 801ec9a:	60f8      	str	r0, [r7, #12]
 801ec9c:	60b9      	str	r1, [r7, #8]
 801ec9e:	607a      	str	r2, [r7, #4]
 801eca0:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801eca8:	2b06      	cmp	r3, #6
 801ecaa:	d006      	beq.n	801ecba <etharp_update_arp_entry+0x26>
 801ecac:	4b48      	ldr	r3, [pc, #288]	@ (801edd0 <etharp_update_arp_entry+0x13c>)
 801ecae:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801ecb2:	4948      	ldr	r1, [pc, #288]	@ (801edd4 <etharp_update_arp_entry+0x140>)
 801ecb4:	4848      	ldr	r0, [pc, #288]	@ (801edd8 <etharp_update_arp_entry+0x144>)
 801ecb6:	f003 fac9 	bl	802224c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ecba:	68bb      	ldr	r3, [r7, #8]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d012      	beq.n	801ece6 <etharp_update_arp_entry+0x52>
 801ecc0:	68bb      	ldr	r3, [r7, #8]
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d00e      	beq.n	801ece6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ecc8:	68bb      	ldr	r3, [r7, #8]
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	68f9      	ldr	r1, [r7, #12]
 801ecce:	4618      	mov	r0, r3
 801ecd0:	f001 fb70 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801ecd4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d105      	bne.n	801ece6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ecda:	68bb      	ldr	r3, [r7, #8]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ece2:	2be0      	cmp	r3, #224	@ 0xe0
 801ece4:	d102      	bne.n	801ecec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ece6:	f06f 030f 	mvn.w	r3, #15
 801ecea:	e06c      	b.n	801edc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ecec:	78fb      	ldrb	r3, [r7, #3]
 801ecee:	68fa      	ldr	r2, [r7, #12]
 801ecf0:	4619      	mov	r1, r3
 801ecf2:	68b8      	ldr	r0, [r7, #8]
 801ecf4:	f7ff fe84 	bl	801ea00 <etharp_find_entry>
 801ecf8:	4603      	mov	r3, r0
 801ecfa:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ecfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	da02      	bge.n	801ed0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ed04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ed08:	e05d      	b.n	801edc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ed0a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed0e:	4933      	ldr	r1, [pc, #204]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed10:	4613      	mov	r3, r2
 801ed12:	005b      	lsls	r3, r3, #1
 801ed14:	4413      	add	r3, r2
 801ed16:	00db      	lsls	r3, r3, #3
 801ed18:	440b      	add	r3, r1
 801ed1a:	3314      	adds	r3, #20
 801ed1c:	2202      	movs	r2, #2
 801ed1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ed20:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed24:	492d      	ldr	r1, [pc, #180]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed26:	4613      	mov	r3, r2
 801ed28:	005b      	lsls	r3, r3, #1
 801ed2a:	4413      	add	r3, r2
 801ed2c:	00db      	lsls	r3, r3, #3
 801ed2e:	440b      	add	r3, r1
 801ed30:	3308      	adds	r3, #8
 801ed32:	68fa      	ldr	r2, [r7, #12]
 801ed34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801ed36:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed3a:	4613      	mov	r3, r2
 801ed3c:	005b      	lsls	r3, r3, #1
 801ed3e:	4413      	add	r3, r2
 801ed40:	00db      	lsls	r3, r3, #3
 801ed42:	3308      	adds	r3, #8
 801ed44:	4a25      	ldr	r2, [pc, #148]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed46:	4413      	add	r3, r2
 801ed48:	3304      	adds	r3, #4
 801ed4a:	2206      	movs	r2, #6
 801ed4c:	6879      	ldr	r1, [r7, #4]
 801ed4e:	4618      	mov	r0, r3
 801ed50:	f003 fd77 	bl	8022842 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ed54:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed58:	4920      	ldr	r1, [pc, #128]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed5a:	4613      	mov	r3, r2
 801ed5c:	005b      	lsls	r3, r3, #1
 801ed5e:	4413      	add	r3, r2
 801ed60:	00db      	lsls	r3, r3, #3
 801ed62:	440b      	add	r3, r1
 801ed64:	3312      	adds	r3, #18
 801ed66:	2200      	movs	r2, #0
 801ed68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ed6a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed6e:	491b      	ldr	r1, [pc, #108]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed70:	4613      	mov	r3, r2
 801ed72:	005b      	lsls	r3, r3, #1
 801ed74:	4413      	add	r3, r2
 801ed76:	00db      	lsls	r3, r3, #3
 801ed78:	440b      	add	r3, r1
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d021      	beq.n	801edc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ed80:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed84:	4915      	ldr	r1, [pc, #84]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed86:	4613      	mov	r3, r2
 801ed88:	005b      	lsls	r3, r3, #1
 801ed8a:	4413      	add	r3, r2
 801ed8c:	00db      	lsls	r3, r3, #3
 801ed8e:	440b      	add	r3, r1
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ed94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed98:	4910      	ldr	r1, [pc, #64]	@ (801eddc <etharp_update_arp_entry+0x148>)
 801ed9a:	4613      	mov	r3, r2
 801ed9c:	005b      	lsls	r3, r3, #1
 801ed9e:	4413      	add	r3, r2
 801eda0:	00db      	lsls	r3, r3, #3
 801eda2:	440b      	add	r3, r1
 801eda4:	2200      	movs	r2, #0
 801eda6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801edae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801edb2:	9300      	str	r3, [sp, #0]
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	6939      	ldr	r1, [r7, #16]
 801edb8:	68f8      	ldr	r0, [r7, #12]
 801edba:	f002 fc09 	bl	80215d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801edbe:	6938      	ldr	r0, [r7, #16]
 801edc0:	f7f7 fa26 	bl	8016210 <pbuf_free>
  }
  return ERR_OK;
 801edc4:	2300      	movs	r3, #0
}
 801edc6:	4618      	mov	r0, r3
 801edc8:	3718      	adds	r7, #24
 801edca:	46bd      	mov	sp, r7
 801edcc:	bd80      	pop	{r7, pc}
 801edce:	bf00      	nop
 801edd0:	0802789c 	.word	0x0802789c
 801edd4:	08027994 	.word	0x08027994
 801edd8:	08027914 	.word	0x08027914
 801eddc:	2000be18 	.word	0x2000be18

0801ede0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ede0:	b580      	push	{r7, lr}
 801ede2:	b084      	sub	sp, #16
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ede8:	2300      	movs	r3, #0
 801edea:	73fb      	strb	r3, [r7, #15]
 801edec:	e01f      	b.n	801ee2e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801edee:	7bfa      	ldrb	r2, [r7, #15]
 801edf0:	4913      	ldr	r1, [pc, #76]	@ (801ee40 <etharp_cleanup_netif+0x60>)
 801edf2:	4613      	mov	r3, r2
 801edf4:	005b      	lsls	r3, r3, #1
 801edf6:	4413      	add	r3, r2
 801edf8:	00db      	lsls	r3, r3, #3
 801edfa:	440b      	add	r3, r1
 801edfc:	3314      	adds	r3, #20
 801edfe:	781b      	ldrb	r3, [r3, #0]
 801ee00:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ee02:	7bbb      	ldrb	r3, [r7, #14]
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d00f      	beq.n	801ee28 <etharp_cleanup_netif+0x48>
 801ee08:	7bfa      	ldrb	r2, [r7, #15]
 801ee0a:	490d      	ldr	r1, [pc, #52]	@ (801ee40 <etharp_cleanup_netif+0x60>)
 801ee0c:	4613      	mov	r3, r2
 801ee0e:	005b      	lsls	r3, r3, #1
 801ee10:	4413      	add	r3, r2
 801ee12:	00db      	lsls	r3, r3, #3
 801ee14:	440b      	add	r3, r1
 801ee16:	3308      	adds	r3, #8
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	687a      	ldr	r2, [r7, #4]
 801ee1c:	429a      	cmp	r2, r3
 801ee1e:	d103      	bne.n	801ee28 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801ee20:	7bfb      	ldrb	r3, [r7, #15]
 801ee22:	4618      	mov	r0, r3
 801ee24:	f7ff fd12 	bl	801e84c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ee28:	7bfb      	ldrb	r3, [r7, #15]
 801ee2a:	3301      	adds	r3, #1
 801ee2c:	73fb      	strb	r3, [r7, #15]
 801ee2e:	7bfb      	ldrb	r3, [r7, #15]
 801ee30:	2b09      	cmp	r3, #9
 801ee32:	d9dc      	bls.n	801edee <etharp_cleanup_netif+0xe>
    }
  }
}
 801ee34:	bf00      	nop
 801ee36:	bf00      	nop
 801ee38:	3710      	adds	r7, #16
 801ee3a:	46bd      	mov	sp, r7
 801ee3c:	bd80      	pop	{r7, pc}
 801ee3e:	bf00      	nop
 801ee40:	2000be18 	.word	0x2000be18

0801ee44 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 801ee44:	b580      	push	{r7, lr}
 801ee46:	b084      	sub	sp, #16
 801ee48:	af00      	add	r7, sp, #0
 801ee4a:	60b9      	str	r1, [r7, #8]
 801ee4c:	607a      	str	r2, [r7, #4]
 801ee4e:	603b      	str	r3, [r7, #0]
 801ee50:	4603      	mov	r3, r0
 801ee52:	73fb      	strb	r3, [r7, #15]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ee54:	68bb      	ldr	r3, [r7, #8]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d106      	bne.n	801ee68 <etharp_get_entry+0x24>
 801ee5a:	4b28      	ldr	r3, [pc, #160]	@ (801eefc <etharp_get_entry+0xb8>)
 801ee5c:	f240 2266 	movw	r2, #614	@ 0x266
 801ee60:	4927      	ldr	r1, [pc, #156]	@ (801ef00 <etharp_get_entry+0xbc>)
 801ee62:	4828      	ldr	r0, [pc, #160]	@ (801ef04 <etharp_get_entry+0xc0>)
 801ee64:	f003 f9f2 	bl	802224c <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d106      	bne.n	801ee7c <etharp_get_entry+0x38>
 801ee6e:	4b23      	ldr	r3, [pc, #140]	@ (801eefc <etharp_get_entry+0xb8>)
 801ee70:	f240 2267 	movw	r2, #615	@ 0x267
 801ee74:	4924      	ldr	r1, [pc, #144]	@ (801ef08 <etharp_get_entry+0xc4>)
 801ee76:	4823      	ldr	r0, [pc, #140]	@ (801ef04 <etharp_get_entry+0xc0>)
 801ee78:	f003 f9e8 	bl	802224c <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 801ee7c:	683b      	ldr	r3, [r7, #0]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d106      	bne.n	801ee90 <etharp_get_entry+0x4c>
 801ee82:	4b1e      	ldr	r3, [pc, #120]	@ (801eefc <etharp_get_entry+0xb8>)
 801ee84:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801ee88:	4920      	ldr	r1, [pc, #128]	@ (801ef0c <etharp_get_entry+0xc8>)
 801ee8a:	481e      	ldr	r0, [pc, #120]	@ (801ef04 <etharp_get_entry+0xc0>)
 801ee8c:	f003 f9de 	bl	802224c <iprintf>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 801ee90:	7bfb      	ldrb	r3, [r7, #15]
 801ee92:	2b09      	cmp	r3, #9
 801ee94:	d82c      	bhi.n	801eef0 <etharp_get_entry+0xac>
 801ee96:	7bfa      	ldrb	r2, [r7, #15]
 801ee98:	491d      	ldr	r1, [pc, #116]	@ (801ef10 <etharp_get_entry+0xcc>)
 801ee9a:	4613      	mov	r3, r2
 801ee9c:	005b      	lsls	r3, r3, #1
 801ee9e:	4413      	add	r3, r2
 801eea0:	00db      	lsls	r3, r3, #3
 801eea2:	440b      	add	r3, r1
 801eea4:	3314      	adds	r3, #20
 801eea6:	781b      	ldrb	r3, [r3, #0]
 801eea8:	2b01      	cmp	r3, #1
 801eeaa:	d921      	bls.n	801eef0 <etharp_get_entry+0xac>
    *ipaddr  = &arp_table[i].ipaddr;
 801eeac:	7bfa      	ldrb	r2, [r7, #15]
 801eeae:	4613      	mov	r3, r2
 801eeb0:	005b      	lsls	r3, r3, #1
 801eeb2:	4413      	add	r3, r2
 801eeb4:	00db      	lsls	r3, r3, #3
 801eeb6:	4a16      	ldr	r2, [pc, #88]	@ (801ef10 <etharp_get_entry+0xcc>)
 801eeb8:	4413      	add	r3, r2
 801eeba:	1d1a      	adds	r2, r3, #4
 801eebc:	68bb      	ldr	r3, [r7, #8]
 801eebe:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 801eec0:	7bfa      	ldrb	r2, [r7, #15]
 801eec2:	4913      	ldr	r1, [pc, #76]	@ (801ef10 <etharp_get_entry+0xcc>)
 801eec4:	4613      	mov	r3, r2
 801eec6:	005b      	lsls	r3, r3, #1
 801eec8:	4413      	add	r3, r2
 801eeca:	00db      	lsls	r3, r3, #3
 801eecc:	440b      	add	r3, r1
 801eece:	3308      	adds	r3, #8
 801eed0:	681a      	ldr	r2, [r3, #0]
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801eed6:	7bfa      	ldrb	r2, [r7, #15]
 801eed8:	4613      	mov	r3, r2
 801eeda:	005b      	lsls	r3, r3, #1
 801eedc:	4413      	add	r3, r2
 801eede:	00db      	lsls	r3, r3, #3
 801eee0:	3308      	adds	r3, #8
 801eee2:	4a0b      	ldr	r2, [pc, #44]	@ (801ef10 <etharp_get_entry+0xcc>)
 801eee4:	4413      	add	r3, r2
 801eee6:	1d1a      	adds	r2, r3, #4
 801eee8:	683b      	ldr	r3, [r7, #0]
 801eeea:	601a      	str	r2, [r3, #0]
    return 1;
 801eeec:	2301      	movs	r3, #1
 801eeee:	e000      	b.n	801eef2 <etharp_get_entry+0xae>
  } else {
    return 0;
 801eef0:	2300      	movs	r3, #0
  }
}
 801eef2:	4618      	mov	r0, r3
 801eef4:	3710      	adds	r7, #16
 801eef6:	46bd      	mov	sp, r7
 801eef8:	bd80      	pop	{r7, pc}
 801eefa:	bf00      	nop
 801eefc:	0802789c 	.word	0x0802789c
 801ef00:	080279dc 	.word	0x080279dc
 801ef04:	08027914 	.word	0x08027914
 801ef08:	080279ec 	.word	0x080279ec
 801ef0c:	080279fc 	.word	0x080279fc
 801ef10:	2000be18 	.word	0x2000be18

0801ef14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ef14:	b5b0      	push	{r4, r5, r7, lr}
 801ef16:	b08a      	sub	sp, #40	@ 0x28
 801ef18:	af04      	add	r7, sp, #16
 801ef1a:	6078      	str	r0, [r7, #4]
 801ef1c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ef1e:	683b      	ldr	r3, [r7, #0]
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	d107      	bne.n	801ef34 <etharp_input+0x20>
 801ef24:	4b4c      	ldr	r3, [pc, #304]	@ (801f058 <etharp_input+0x144>)
 801ef26:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801ef2a:	494c      	ldr	r1, [pc, #304]	@ (801f05c <etharp_input+0x148>)
 801ef2c:	484c      	ldr	r0, [pc, #304]	@ (801f060 <etharp_input+0x14c>)
 801ef2e:	f003 f98d 	bl	802224c <iprintf>
 801ef32:	e08d      	b.n	801f050 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	685b      	ldr	r3, [r3, #4]
 801ef38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801ef3a:	693b      	ldr	r3, [r7, #16]
 801ef3c:	881b      	ldrh	r3, [r3, #0]
 801ef3e:	b29b      	uxth	r3, r3
 801ef40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ef44:	d10c      	bne.n	801ef60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ef46:	693b      	ldr	r3, [r7, #16]
 801ef48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801ef4a:	2b06      	cmp	r3, #6
 801ef4c:	d108      	bne.n	801ef60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ef4e:	693b      	ldr	r3, [r7, #16]
 801ef50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ef52:	2b04      	cmp	r3, #4
 801ef54:	d104      	bne.n	801ef60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ef56:	693b      	ldr	r3, [r7, #16]
 801ef58:	885b      	ldrh	r3, [r3, #2]
 801ef5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ef5c:	2b08      	cmp	r3, #8
 801ef5e:	d00f      	beq.n	801ef80 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801ef60:	4b40      	ldr	r3, [pc, #256]	@ (801f064 <etharp_input+0x150>)
 801ef62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ef64:	3301      	adds	r3, #1
 801ef66:	b29a      	uxth	r2, r3
 801ef68:	4b3e      	ldr	r3, [pc, #248]	@ (801f064 <etharp_input+0x150>)
 801ef6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ef6c:	4b3d      	ldr	r3, [pc, #244]	@ (801f064 <etharp_input+0x150>)
 801ef6e:	8bdb      	ldrh	r3, [r3, #30]
 801ef70:	3301      	adds	r3, #1
 801ef72:	b29a      	uxth	r2, r3
 801ef74:	4b3b      	ldr	r3, [pc, #236]	@ (801f064 <etharp_input+0x150>)
 801ef76:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801ef78:	6878      	ldr	r0, [r7, #4]
 801ef7a:	f7f7 f949 	bl	8016210 <pbuf_free>
    return;
 801ef7e:	e067      	b.n	801f050 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 801ef80:	4b38      	ldr	r3, [pc, #224]	@ (801f064 <etharp_input+0x150>)
 801ef82:	8b5b      	ldrh	r3, [r3, #26]
 801ef84:	3301      	adds	r3, #1
 801ef86:	b29a      	uxth	r2, r3
 801ef88:	4b36      	ldr	r3, [pc, #216]	@ (801f064 <etharp_input+0x150>)
 801ef8a:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801ef8c:	693b      	ldr	r3, [r7, #16]
 801ef8e:	330e      	adds	r3, #14
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801ef94:	693b      	ldr	r3, [r7, #16]
 801ef96:	3318      	adds	r3, #24
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ef9c:	683b      	ldr	r3, [r7, #0]
 801ef9e:	3304      	adds	r3, #4
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d102      	bne.n	801efac <etharp_input+0x98>
    for_us = 0;
 801efa6:	2300      	movs	r3, #0
 801efa8:	75fb      	strb	r3, [r7, #23]
 801efaa:	e009      	b.n	801efc0 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801efac:	68ba      	ldr	r2, [r7, #8]
 801efae:	683b      	ldr	r3, [r7, #0]
 801efb0:	3304      	adds	r3, #4
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	429a      	cmp	r2, r3
 801efb6:	bf0c      	ite	eq
 801efb8:	2301      	moveq	r3, #1
 801efba:	2300      	movne	r3, #0
 801efbc:	b2db      	uxtb	r3, r3
 801efbe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801efc0:	693b      	ldr	r3, [r7, #16]
 801efc2:	f103 0208 	add.w	r2, r3, #8
 801efc6:	7dfb      	ldrb	r3, [r7, #23]
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d001      	beq.n	801efd0 <etharp_input+0xbc>
 801efcc:	2301      	movs	r3, #1
 801efce:	e000      	b.n	801efd2 <etharp_input+0xbe>
 801efd0:	2302      	movs	r3, #2
 801efd2:	f107 010c 	add.w	r1, r7, #12
 801efd6:	6838      	ldr	r0, [r7, #0]
 801efd8:	f7ff fe5c 	bl	801ec94 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801efdc:	693b      	ldr	r3, [r7, #16]
 801efde:	88db      	ldrh	r3, [r3, #6]
 801efe0:	b29b      	uxth	r3, r3
 801efe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801efe6:	d003      	beq.n	801eff0 <etharp_input+0xdc>
 801efe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801efec:	d01e      	beq.n	801f02c <etharp_input+0x118>
 801efee:	e024      	b.n	801f03a <etharp_input+0x126>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 801eff0:	7dfb      	ldrb	r3, [r7, #23]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d028      	beq.n	801f048 <etharp_input+0x134>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801effc:	693b      	ldr	r3, [r7, #16]
 801effe:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801f002:	683b      	ldr	r3, [r7, #0]
 801f004:	f103 052d 	add.w	r5, r3, #45	@ 0x2d
 801f008:	683b      	ldr	r3, [r7, #0]
 801f00a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801f00c:	693a      	ldr	r2, [r7, #16]
 801f00e:	3208      	adds	r2, #8
      etharp_raw(netif,
 801f010:	2102      	movs	r1, #2
 801f012:	9103      	str	r1, [sp, #12]
 801f014:	f107 010c 	add.w	r1, r7, #12
 801f018:	9102      	str	r1, [sp, #8]
 801f01a:	9201      	str	r2, [sp, #4]
 801f01c:	9300      	str	r3, [sp, #0]
 801f01e:	462b      	mov	r3, r5
 801f020:	4622      	mov	r2, r4
 801f022:	4601      	mov	r1, r0
 801f024:	6838      	ldr	r0, [r7, #0]
 801f026:	f000 fb09 	bl	801f63c <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 801f02a:	e00d      	b.n	801f048 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 801f02c:	f107 030c 	add.w	r3, r7, #12
 801f030:	4619      	mov	r1, r3
 801f032:	6838      	ldr	r0, [r7, #0]
 801f034:	f7fe f902 	bl	801d23c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 801f038:	e007      	b.n	801f04a <etharp_input+0x136>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 801f03a:	4b0a      	ldr	r3, [pc, #40]	@ (801f064 <etharp_input+0x150>)
 801f03c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801f03e:	3301      	adds	r3, #1
 801f040:	b29a      	uxth	r2, r3
 801f042:	4b08      	ldr	r3, [pc, #32]	@ (801f064 <etharp_input+0x150>)
 801f044:	859a      	strh	r2, [r3, #44]	@ 0x2c
    break;
 801f046:	e000      	b.n	801f04a <etharp_input+0x136>
    break;
 801f048:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801f04a:	6878      	ldr	r0, [r7, #4]
 801f04c:	f7f7 f8e0 	bl	8016210 <pbuf_free>
}
 801f050:	3718      	adds	r7, #24
 801f052:	46bd      	mov	sp, r7
 801f054:	bdb0      	pop	{r4, r5, r7, pc}
 801f056:	bf00      	nop
 801f058:	0802789c 	.word	0x0802789c
 801f05c:	080279ec 	.word	0x080279ec
 801f060:	08027914 	.word	0x08027914
 801f064:	2000bbec 	.word	0x2000bbec

0801f068 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801f068:	b580      	push	{r7, lr}
 801f06a:	b086      	sub	sp, #24
 801f06c:	af02      	add	r7, sp, #8
 801f06e:	60f8      	str	r0, [r7, #12]
 801f070:	60b9      	str	r1, [r7, #8]
 801f072:	4613      	mov	r3, r2
 801f074:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f076:	79fa      	ldrb	r2, [r7, #7]
 801f078:	4944      	ldr	r1, [pc, #272]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f07a:	4613      	mov	r3, r2
 801f07c:	005b      	lsls	r3, r3, #1
 801f07e:	4413      	add	r3, r2
 801f080:	00db      	lsls	r3, r3, #3
 801f082:	440b      	add	r3, r1
 801f084:	3314      	adds	r3, #20
 801f086:	781b      	ldrb	r3, [r3, #0]
 801f088:	2b01      	cmp	r3, #1
 801f08a:	d806      	bhi.n	801f09a <etharp_output_to_arp_index+0x32>
 801f08c:	4b40      	ldr	r3, [pc, #256]	@ (801f190 <etharp_output_to_arp_index+0x128>)
 801f08e:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801f092:	4940      	ldr	r1, [pc, #256]	@ (801f194 <etharp_output_to_arp_index+0x12c>)
 801f094:	4840      	ldr	r0, [pc, #256]	@ (801f198 <etharp_output_to_arp_index+0x130>)
 801f096:	f003 f8d9 	bl	802224c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f09a:	79fa      	ldrb	r2, [r7, #7]
 801f09c:	493b      	ldr	r1, [pc, #236]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f09e:	4613      	mov	r3, r2
 801f0a0:	005b      	lsls	r3, r3, #1
 801f0a2:	4413      	add	r3, r2
 801f0a4:	00db      	lsls	r3, r3, #3
 801f0a6:	440b      	add	r3, r1
 801f0a8:	3314      	adds	r3, #20
 801f0aa:	781b      	ldrb	r3, [r3, #0]
 801f0ac:	2b02      	cmp	r3, #2
 801f0ae:	d153      	bne.n	801f158 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801f0b0:	79fa      	ldrb	r2, [r7, #7]
 801f0b2:	4936      	ldr	r1, [pc, #216]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f0b4:	4613      	mov	r3, r2
 801f0b6:	005b      	lsls	r3, r3, #1
 801f0b8:	4413      	add	r3, r2
 801f0ba:	00db      	lsls	r3, r3, #3
 801f0bc:	440b      	add	r3, r1
 801f0be:	3312      	adds	r3, #18
 801f0c0:	881b      	ldrh	r3, [r3, #0]
 801f0c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801f0c6:	d919      	bls.n	801f0fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f0c8:	79fa      	ldrb	r2, [r7, #7]
 801f0ca:	4613      	mov	r3, r2
 801f0cc:	005b      	lsls	r3, r3, #1
 801f0ce:	4413      	add	r3, r2
 801f0d0:	00db      	lsls	r3, r3, #3
 801f0d2:	4a2e      	ldr	r2, [pc, #184]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f0d4:	4413      	add	r3, r2
 801f0d6:	3304      	adds	r3, #4
 801f0d8:	4619      	mov	r1, r3
 801f0da:	68f8      	ldr	r0, [r7, #12]
 801f0dc:	f000 fb6a 	bl	801f7b4 <etharp_request>
 801f0e0:	4603      	mov	r3, r0
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d138      	bne.n	801f158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f0e6:	79fa      	ldrb	r2, [r7, #7]
 801f0e8:	4928      	ldr	r1, [pc, #160]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f0ea:	4613      	mov	r3, r2
 801f0ec:	005b      	lsls	r3, r3, #1
 801f0ee:	4413      	add	r3, r2
 801f0f0:	00db      	lsls	r3, r3, #3
 801f0f2:	440b      	add	r3, r1
 801f0f4:	3314      	adds	r3, #20
 801f0f6:	2203      	movs	r2, #3
 801f0f8:	701a      	strb	r2, [r3, #0]
 801f0fa:	e02d      	b.n	801f158 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801f0fc:	79fa      	ldrb	r2, [r7, #7]
 801f0fe:	4923      	ldr	r1, [pc, #140]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f100:	4613      	mov	r3, r2
 801f102:	005b      	lsls	r3, r3, #1
 801f104:	4413      	add	r3, r2
 801f106:	00db      	lsls	r3, r3, #3
 801f108:	440b      	add	r3, r1
 801f10a:	3312      	adds	r3, #18
 801f10c:	881b      	ldrh	r3, [r3, #0]
 801f10e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801f112:	d321      	bcc.n	801f158 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f114:	79fa      	ldrb	r2, [r7, #7]
 801f116:	4613      	mov	r3, r2
 801f118:	005b      	lsls	r3, r3, #1
 801f11a:	4413      	add	r3, r2
 801f11c:	00db      	lsls	r3, r3, #3
 801f11e:	4a1b      	ldr	r2, [pc, #108]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f120:	4413      	add	r3, r2
 801f122:	1d19      	adds	r1, r3, #4
 801f124:	79fa      	ldrb	r2, [r7, #7]
 801f126:	4613      	mov	r3, r2
 801f128:	005b      	lsls	r3, r3, #1
 801f12a:	4413      	add	r3, r2
 801f12c:	00db      	lsls	r3, r3, #3
 801f12e:	3308      	adds	r3, #8
 801f130:	4a16      	ldr	r2, [pc, #88]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f132:	4413      	add	r3, r2
 801f134:	3304      	adds	r3, #4
 801f136:	461a      	mov	r2, r3
 801f138:	68f8      	ldr	r0, [r7, #12]
 801f13a:	f000 fb19 	bl	801f770 <etharp_request_dst>
 801f13e:	4603      	mov	r3, r0
 801f140:	2b00      	cmp	r3, #0
 801f142:	d109      	bne.n	801f158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f144:	79fa      	ldrb	r2, [r7, #7]
 801f146:	4911      	ldr	r1, [pc, #68]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f148:	4613      	mov	r3, r2
 801f14a:	005b      	lsls	r3, r3, #1
 801f14c:	4413      	add	r3, r2
 801f14e:	00db      	lsls	r3, r3, #3
 801f150:	440b      	add	r3, r1
 801f152:	3314      	adds	r3, #20
 801f154:	2203      	movs	r2, #3
 801f156:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 801f15e:	79fa      	ldrb	r2, [r7, #7]
 801f160:	4613      	mov	r3, r2
 801f162:	005b      	lsls	r3, r3, #1
 801f164:	4413      	add	r3, r2
 801f166:	00db      	lsls	r3, r3, #3
 801f168:	3308      	adds	r3, #8
 801f16a:	4a08      	ldr	r2, [pc, #32]	@ (801f18c <etharp_output_to_arp_index+0x124>)
 801f16c:	4413      	add	r3, r2
 801f16e:	3304      	adds	r3, #4
 801f170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f174:	9200      	str	r2, [sp, #0]
 801f176:	460a      	mov	r2, r1
 801f178:	68b9      	ldr	r1, [r7, #8]
 801f17a:	68f8      	ldr	r0, [r7, #12]
 801f17c:	f002 fa28 	bl	80215d0 <ethernet_output>
 801f180:	4603      	mov	r3, r0
}
 801f182:	4618      	mov	r0, r3
 801f184:	3710      	adds	r7, #16
 801f186:	46bd      	mov	sp, r7
 801f188:	bd80      	pop	{r7, pc}
 801f18a:	bf00      	nop
 801f18c:	2000be18 	.word	0x2000be18
 801f190:	0802789c 	.word	0x0802789c
 801f194:	08027a0c 	.word	0x08027a0c
 801f198:	08027914 	.word	0x08027914

0801f19c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801f19c:	b580      	push	{r7, lr}
 801f19e:	b08a      	sub	sp, #40	@ 0x28
 801f1a0:	af02      	add	r7, sp, #8
 801f1a2:	60f8      	str	r0, [r7, #12]
 801f1a4:	60b9      	str	r1, [r7, #8]
 801f1a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d106      	bne.n	801f1c0 <etharp_output+0x24>
 801f1b2:	4b6c      	ldr	r3, [pc, #432]	@ (801f364 <etharp_output+0x1c8>)
 801f1b4:	f240 321b 	movw	r2, #795	@ 0x31b
 801f1b8:	496b      	ldr	r1, [pc, #428]	@ (801f368 <etharp_output+0x1cc>)
 801f1ba:	486c      	ldr	r0, [pc, #432]	@ (801f36c <etharp_output+0x1d0>)
 801f1bc:	f003 f846 	bl	802224c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f1c0:	68bb      	ldr	r3, [r7, #8]
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d106      	bne.n	801f1d4 <etharp_output+0x38>
 801f1c6:	4b67      	ldr	r3, [pc, #412]	@ (801f364 <etharp_output+0x1c8>)
 801f1c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801f1cc:	4968      	ldr	r1, [pc, #416]	@ (801f370 <etharp_output+0x1d4>)
 801f1ce:	4867      	ldr	r0, [pc, #412]	@ (801f36c <etharp_output+0x1d0>)
 801f1d0:	f003 f83c 	bl	802224c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d106      	bne.n	801f1e8 <etharp_output+0x4c>
 801f1da:	4b62      	ldr	r3, [pc, #392]	@ (801f364 <etharp_output+0x1c8>)
 801f1dc:	f240 321d 	movw	r2, #797	@ 0x31d
 801f1e0:	4964      	ldr	r1, [pc, #400]	@ (801f374 <etharp_output+0x1d8>)
 801f1e2:	4862      	ldr	r0, [pc, #392]	@ (801f36c <etharp_output+0x1d0>)
 801f1e4:	f003 f832 	bl	802224c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	68f9      	ldr	r1, [r7, #12]
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	f001 f8e0 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801f1f4:	4603      	mov	r3, r0
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d002      	beq.n	801f200 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801f1fa:	4b5f      	ldr	r3, [pc, #380]	@ (801f378 <etharp_output+0x1dc>)
 801f1fc:	61fb      	str	r3, [r7, #28]
 801f1fe:	e0a1      	b.n	801f344 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f208:	2be0      	cmp	r3, #224	@ 0xe0
 801f20a:	d118      	bne.n	801f23e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f20c:	2301      	movs	r3, #1
 801f20e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801f210:	2300      	movs	r3, #0
 801f212:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f214:	235e      	movs	r3, #94	@ 0x5e
 801f216:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	3301      	adds	r3, #1
 801f21c:	781b      	ldrb	r3, [r3, #0]
 801f21e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f222:	b2db      	uxtb	r3, r3
 801f224:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	3302      	adds	r3, #2
 801f22a:	781b      	ldrb	r3, [r3, #0]
 801f22c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	3303      	adds	r3, #3
 801f232:	781b      	ldrb	r3, [r3, #0]
 801f234:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801f236:	f107 0310 	add.w	r3, r7, #16
 801f23a:	61fb      	str	r3, [r7, #28]
 801f23c:	e082      	b.n	801f344 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	681a      	ldr	r2, [r3, #0]
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	3304      	adds	r3, #4
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	405a      	eors	r2, r3
 801f24a:	68fb      	ldr	r3, [r7, #12]
 801f24c:	3308      	adds	r3, #8
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	4013      	ands	r3, r2
 801f252:	2b00      	cmp	r3, #0
 801f254:	d012      	beq.n	801f27c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f25c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801f260:	4293      	cmp	r3, r2
 801f262:	d00b      	beq.n	801f27c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	330c      	adds	r3, #12
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d003      	beq.n	801f276 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	330c      	adds	r3, #12
 801f272:	61bb      	str	r3, [r7, #24]
 801f274:	e002      	b.n	801f27c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801f276:	f06f 0303 	mvn.w	r3, #3
 801f27a:	e06f      	b.n	801f35c <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f27c:	4b3f      	ldr	r3, [pc, #252]	@ (801f37c <etharp_output+0x1e0>)
 801f27e:	781b      	ldrb	r3, [r3, #0]
 801f280:	4619      	mov	r1, r3
 801f282:	4a3f      	ldr	r2, [pc, #252]	@ (801f380 <etharp_output+0x1e4>)
 801f284:	460b      	mov	r3, r1
 801f286:	005b      	lsls	r3, r3, #1
 801f288:	440b      	add	r3, r1
 801f28a:	00db      	lsls	r3, r3, #3
 801f28c:	4413      	add	r3, r2
 801f28e:	3314      	adds	r3, #20
 801f290:	781b      	ldrb	r3, [r3, #0]
 801f292:	2b01      	cmp	r3, #1
 801f294:	d91d      	bls.n	801f2d2 <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801f296:	69bb      	ldr	r3, [r7, #24]
 801f298:	681a      	ldr	r2, [r3, #0]
 801f29a:	4b38      	ldr	r3, [pc, #224]	@ (801f37c <etharp_output+0x1e0>)
 801f29c:	781b      	ldrb	r3, [r3, #0]
 801f29e:	4618      	mov	r0, r3
 801f2a0:	4937      	ldr	r1, [pc, #220]	@ (801f380 <etharp_output+0x1e4>)
 801f2a2:	4603      	mov	r3, r0
 801f2a4:	005b      	lsls	r3, r3, #1
 801f2a6:	4403      	add	r3, r0
 801f2a8:	00db      	lsls	r3, r3, #3
 801f2aa:	440b      	add	r3, r1
 801f2ac:	3304      	adds	r3, #4
 801f2ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f2b0:	429a      	cmp	r2, r3
 801f2b2:	d10e      	bne.n	801f2d2 <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801f2b4:	4b33      	ldr	r3, [pc, #204]	@ (801f384 <etharp_output+0x1e8>)
 801f2b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801f2b8:	3301      	adds	r3, #1
 801f2ba:	b29a      	uxth	r2, r3
 801f2bc:	4b31      	ldr	r3, [pc, #196]	@ (801f384 <etharp_output+0x1e8>)
 801f2be:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f2c0:	4b2e      	ldr	r3, [pc, #184]	@ (801f37c <etharp_output+0x1e0>)
 801f2c2:	781b      	ldrb	r3, [r3, #0]
 801f2c4:	461a      	mov	r2, r3
 801f2c6:	68b9      	ldr	r1, [r7, #8]
 801f2c8:	68f8      	ldr	r0, [r7, #12]
 801f2ca:	f7ff fecd 	bl	801f068 <etharp_output_to_arp_index>
 801f2ce:	4603      	mov	r3, r0
 801f2d0:	e044      	b.n	801f35c <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f2d2:	2300      	movs	r3, #0
 801f2d4:	75fb      	strb	r3, [r7, #23]
 801f2d6:	e02a      	b.n	801f32e <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f2d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801f2dc:	4928      	ldr	r1, [pc, #160]	@ (801f380 <etharp_output+0x1e4>)
 801f2de:	4613      	mov	r3, r2
 801f2e0:	005b      	lsls	r3, r3, #1
 801f2e2:	4413      	add	r3, r2
 801f2e4:	00db      	lsls	r3, r3, #3
 801f2e6:	440b      	add	r3, r1
 801f2e8:	3314      	adds	r3, #20
 801f2ea:	781b      	ldrb	r3, [r3, #0]
 801f2ec:	2b01      	cmp	r3, #1
 801f2ee:	d918      	bls.n	801f322 <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801f2f0:	69bb      	ldr	r3, [r7, #24]
 801f2f2:	6819      	ldr	r1, [r3, #0]
 801f2f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801f2f8:	4821      	ldr	r0, [pc, #132]	@ (801f380 <etharp_output+0x1e4>)
 801f2fa:	4613      	mov	r3, r2
 801f2fc:	005b      	lsls	r3, r3, #1
 801f2fe:	4413      	add	r3, r2
 801f300:	00db      	lsls	r3, r3, #3
 801f302:	4403      	add	r3, r0
 801f304:	3304      	adds	r3, #4
 801f306:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f308:	4299      	cmp	r1, r3
 801f30a:	d10a      	bne.n	801f322 <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801f30c:	7dfa      	ldrb	r2, [r7, #23]
 801f30e:	4b1b      	ldr	r3, [pc, #108]	@ (801f37c <etharp_output+0x1e0>)
 801f310:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801f312:	7dfb      	ldrb	r3, [r7, #23]
 801f314:	461a      	mov	r2, r3
 801f316:	68b9      	ldr	r1, [r7, #8]
 801f318:	68f8      	ldr	r0, [r7, #12]
 801f31a:	f7ff fea5 	bl	801f068 <etharp_output_to_arp_index>
 801f31e:	4603      	mov	r3, r0
 801f320:	e01c      	b.n	801f35c <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f326:	b2db      	uxtb	r3, r3
 801f328:	3301      	adds	r3, #1
 801f32a:	b2db      	uxtb	r3, r3
 801f32c:	75fb      	strb	r3, [r7, #23]
 801f32e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f332:	2b09      	cmp	r3, #9
 801f334:	ddd0      	ble.n	801f2d8 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801f336:	68ba      	ldr	r2, [r7, #8]
 801f338:	69b9      	ldr	r1, [r7, #24]
 801f33a:	68f8      	ldr	r0, [r7, #12]
 801f33c:	f000 f824 	bl	801f388 <etharp_query>
 801f340:	4603      	mov	r3, r0
 801f342:	e00b      	b.n	801f35c <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801f34a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f34e:	9300      	str	r3, [sp, #0]
 801f350:	69fb      	ldr	r3, [r7, #28]
 801f352:	68b9      	ldr	r1, [r7, #8]
 801f354:	68f8      	ldr	r0, [r7, #12]
 801f356:	f002 f93b 	bl	80215d0 <ethernet_output>
 801f35a:	4603      	mov	r3, r0
}
 801f35c:	4618      	mov	r0, r3
 801f35e:	3720      	adds	r7, #32
 801f360:	46bd      	mov	sp, r7
 801f362:	bd80      	pop	{r7, pc}
 801f364:	0802789c 	.word	0x0802789c
 801f368:	080279ec 	.word	0x080279ec
 801f36c:	08027914 	.word	0x08027914
 801f370:	08027a3c 	.word	0x08027a3c
 801f374:	080279dc 	.word	0x080279dc
 801f378:	08032ed8 	.word	0x08032ed8
 801f37c:	2000bf08 	.word	0x2000bf08
 801f380:	2000be18 	.word	0x2000be18
 801f384:	2000bbec 	.word	0x2000bbec

0801f388 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801f388:	b580      	push	{r7, lr}
 801f38a:	b08c      	sub	sp, #48	@ 0x30
 801f38c:	af02      	add	r7, sp, #8
 801f38e:	60f8      	str	r0, [r7, #12]
 801f390:	60b9      	str	r1, [r7, #8]
 801f392:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	332d      	adds	r3, #45	@ 0x2d
 801f398:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801f39a:	23ff      	movs	r3, #255	@ 0xff
 801f39c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f3a4:	68bb      	ldr	r3, [r7, #8]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	68f9      	ldr	r1, [r7, #12]
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	f001 f802 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801f3b0:	4603      	mov	r3, r0
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d10c      	bne.n	801f3d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f3be:	2be0      	cmp	r3, #224	@ 0xe0
 801f3c0:	d006      	beq.n	801f3d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f3c2:	68bb      	ldr	r3, [r7, #8]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d003      	beq.n	801f3d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801f3c8:	68bb      	ldr	r3, [r7, #8]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d102      	bne.n	801f3d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f3d0:	f06f 030f 	mvn.w	r3, #15
 801f3d4:	e11d      	b.n	801f612 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801f3d6:	68fa      	ldr	r2, [r7, #12]
 801f3d8:	2101      	movs	r1, #1
 801f3da:	68b8      	ldr	r0, [r7, #8]
 801f3dc:	f7ff fb10 	bl	801ea00 <etharp_find_entry>
 801f3e0:	4603      	mov	r3, r0
 801f3e2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801f3e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	da0b      	bge.n	801f404 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d005      	beq.n	801f3fe <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801f3f2:	4b8a      	ldr	r3, [pc, #552]	@ (801f61c <etharp_query+0x294>)
 801f3f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f3f6:	3301      	adds	r3, #1
 801f3f8:	b29a      	uxth	r2, r3
 801f3fa:	4b88      	ldr	r3, [pc, #544]	@ (801f61c <etharp_query+0x294>)
 801f3fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i;
 801f3fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f402:	e106      	b.n	801f612 <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801f404:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f408:	4985      	ldr	r1, [pc, #532]	@ (801f620 <etharp_query+0x298>)
 801f40a:	4613      	mov	r3, r2
 801f40c:	005b      	lsls	r3, r3, #1
 801f40e:	4413      	add	r3, r2
 801f410:	00db      	lsls	r3, r3, #3
 801f412:	440b      	add	r3, r1
 801f414:	3314      	adds	r3, #20
 801f416:	781b      	ldrb	r3, [r3, #0]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d117      	bne.n	801f44c <etharp_query+0xc4>
    is_new_entry = 1;
 801f41c:	2301      	movs	r3, #1
 801f41e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f420:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f424:	497e      	ldr	r1, [pc, #504]	@ (801f620 <etharp_query+0x298>)
 801f426:	4613      	mov	r3, r2
 801f428:	005b      	lsls	r3, r3, #1
 801f42a:	4413      	add	r3, r2
 801f42c:	00db      	lsls	r3, r3, #3
 801f42e:	440b      	add	r3, r1
 801f430:	3314      	adds	r3, #20
 801f432:	2201      	movs	r2, #1
 801f434:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801f436:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f43a:	4979      	ldr	r1, [pc, #484]	@ (801f620 <etharp_query+0x298>)
 801f43c:	4613      	mov	r3, r2
 801f43e:	005b      	lsls	r3, r3, #1
 801f440:	4413      	add	r3, r2
 801f442:	00db      	lsls	r3, r3, #3
 801f444:	440b      	add	r3, r1
 801f446:	3308      	adds	r3, #8
 801f448:	68fa      	ldr	r2, [r7, #12]
 801f44a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801f44c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f450:	4973      	ldr	r1, [pc, #460]	@ (801f620 <etharp_query+0x298>)
 801f452:	4613      	mov	r3, r2
 801f454:	005b      	lsls	r3, r3, #1
 801f456:	4413      	add	r3, r2
 801f458:	00db      	lsls	r3, r3, #3
 801f45a:	440b      	add	r3, r1
 801f45c:	3314      	adds	r3, #20
 801f45e:	781b      	ldrb	r3, [r3, #0]
 801f460:	2b01      	cmp	r3, #1
 801f462:	d012      	beq.n	801f48a <etharp_query+0x102>
 801f464:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f468:	496d      	ldr	r1, [pc, #436]	@ (801f620 <etharp_query+0x298>)
 801f46a:	4613      	mov	r3, r2
 801f46c:	005b      	lsls	r3, r3, #1
 801f46e:	4413      	add	r3, r2
 801f470:	00db      	lsls	r3, r3, #3
 801f472:	440b      	add	r3, r1
 801f474:	3314      	adds	r3, #20
 801f476:	781b      	ldrb	r3, [r3, #0]
 801f478:	2b01      	cmp	r3, #1
 801f47a:	d806      	bhi.n	801f48a <etharp_query+0x102>
 801f47c:	4b69      	ldr	r3, [pc, #420]	@ (801f624 <etharp_query+0x29c>)
 801f47e:	f240 32c7 	movw	r2, #967	@ 0x3c7
 801f482:	4969      	ldr	r1, [pc, #420]	@ (801f628 <etharp_query+0x2a0>)
 801f484:	4869      	ldr	r0, [pc, #420]	@ (801f62c <etharp_query+0x2a4>)
 801f486:	f002 fee1 	bl	802224c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801f48a:	6a3b      	ldr	r3, [r7, #32]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d102      	bne.n	801f496 <etharp_query+0x10e>
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2b00      	cmp	r3, #0
 801f494:	d10c      	bne.n	801f4b0 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801f496:	68b9      	ldr	r1, [r7, #8]
 801f498:	68f8      	ldr	r0, [r7, #12]
 801f49a:	f000 f98b 	bl	801f7b4 <etharp_request>
 801f49e:	4603      	mov	r3, r0
 801f4a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d102      	bne.n	801f4b0 <etharp_query+0x128>
      return result;
 801f4aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801f4ae:	e0b0      	b.n	801f612 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d106      	bne.n	801f4c4 <etharp_query+0x13c>
 801f4b6:	4b5b      	ldr	r3, [pc, #364]	@ (801f624 <etharp_query+0x29c>)
 801f4b8:	f240 32db 	movw	r2, #987	@ 0x3db
 801f4bc:	495c      	ldr	r1, [pc, #368]	@ (801f630 <etharp_query+0x2a8>)
 801f4be:	485b      	ldr	r0, [pc, #364]	@ (801f62c <etharp_query+0x2a4>)
 801f4c0:	f002 fec4 	bl	802224c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f4c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f4c8:	4955      	ldr	r1, [pc, #340]	@ (801f620 <etharp_query+0x298>)
 801f4ca:	4613      	mov	r3, r2
 801f4cc:	005b      	lsls	r3, r3, #1
 801f4ce:	4413      	add	r3, r2
 801f4d0:	00db      	lsls	r3, r3, #3
 801f4d2:	440b      	add	r3, r1
 801f4d4:	3314      	adds	r3, #20
 801f4d6:	781b      	ldrb	r3, [r3, #0]
 801f4d8:	2b01      	cmp	r3, #1
 801f4da:	d918      	bls.n	801f50e <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801f4dc:	7cfa      	ldrb	r2, [r7, #19]
 801f4de:	4b55      	ldr	r3, [pc, #340]	@ (801f634 <etharp_query+0x2ac>)
 801f4e0:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f4e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f4e6:	4613      	mov	r3, r2
 801f4e8:	005b      	lsls	r3, r3, #1
 801f4ea:	4413      	add	r3, r2
 801f4ec:	00db      	lsls	r3, r3, #3
 801f4ee:	3308      	adds	r3, #8
 801f4f0:	4a4b      	ldr	r2, [pc, #300]	@ (801f620 <etharp_query+0x298>)
 801f4f2:	4413      	add	r3, r2
 801f4f4:	3304      	adds	r3, #4
 801f4f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f4fa:	9200      	str	r2, [sp, #0]
 801f4fc:	697a      	ldr	r2, [r7, #20]
 801f4fe:	6879      	ldr	r1, [r7, #4]
 801f500:	68f8      	ldr	r0, [r7, #12]
 801f502:	f002 f865 	bl	80215d0 <ethernet_output>
 801f506:	4603      	mov	r3, r0
 801f508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801f50c:	e07f      	b.n	801f60e <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f50e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f512:	4943      	ldr	r1, [pc, #268]	@ (801f620 <etharp_query+0x298>)
 801f514:	4613      	mov	r3, r2
 801f516:	005b      	lsls	r3, r3, #1
 801f518:	4413      	add	r3, r2
 801f51a:	00db      	lsls	r3, r3, #3
 801f51c:	440b      	add	r3, r1
 801f51e:	3314      	adds	r3, #20
 801f520:	781b      	ldrb	r3, [r3, #0]
 801f522:	2b01      	cmp	r3, #1
 801f524:	d173      	bne.n	801f60e <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f526:	2300      	movs	r3, #0
 801f528:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f52e:	e01a      	b.n	801f566 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f530:	69fb      	ldr	r3, [r7, #28]
 801f532:	895a      	ldrh	r2, [r3, #10]
 801f534:	69fb      	ldr	r3, [r7, #28]
 801f536:	891b      	ldrh	r3, [r3, #8]
 801f538:	429a      	cmp	r2, r3
 801f53a:	d10a      	bne.n	801f552 <etharp_query+0x1ca>
 801f53c:	69fb      	ldr	r3, [r7, #28]
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	2b00      	cmp	r3, #0
 801f542:	d006      	beq.n	801f552 <etharp_query+0x1ca>
 801f544:	4b37      	ldr	r3, [pc, #220]	@ (801f624 <etharp_query+0x29c>)
 801f546:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801f54a:	493b      	ldr	r1, [pc, #236]	@ (801f638 <etharp_query+0x2b0>)
 801f54c:	4837      	ldr	r0, [pc, #220]	@ (801f62c <etharp_query+0x2a4>)
 801f54e:	f002 fe7d 	bl	802224c <iprintf>
      if (p->type != PBUF_ROM) {
 801f552:	69fb      	ldr	r3, [r7, #28]
 801f554:	7b1b      	ldrb	r3, [r3, #12]
 801f556:	2b01      	cmp	r3, #1
 801f558:	d002      	beq.n	801f560 <etharp_query+0x1d8>
        copy_needed = 1;
 801f55a:	2301      	movs	r3, #1
 801f55c:	61bb      	str	r3, [r7, #24]
        break;
 801f55e:	e005      	b.n	801f56c <etharp_query+0x1e4>
      }
      p = p->next;
 801f560:	69fb      	ldr	r3, [r7, #28]
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f566:	69fb      	ldr	r3, [r7, #28]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d1e1      	bne.n	801f530 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 801f56c:	69bb      	ldr	r3, [r7, #24]
 801f56e:	2b00      	cmp	r3, #0
 801f570:	d017      	beq.n	801f5a2 <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801f572:	69fb      	ldr	r3, [r7, #28]
 801f574:	891b      	ldrh	r3, [r3, #8]
 801f576:	2200      	movs	r2, #0
 801f578:	4619      	mov	r1, r3
 801f57a:	2002      	movs	r0, #2
 801f57c:	f7f6 fad0 	bl	8015b20 <pbuf_alloc>
 801f580:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801f582:	69fb      	ldr	r3, [r7, #28]
 801f584:	2b00      	cmp	r3, #0
 801f586:	d011      	beq.n	801f5ac <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 801f588:	6879      	ldr	r1, [r7, #4]
 801f58a:	69f8      	ldr	r0, [r7, #28]
 801f58c:	f7f6 ff72 	bl	8016474 <pbuf_copy>
 801f590:	4603      	mov	r3, r0
 801f592:	2b00      	cmp	r3, #0
 801f594:	d00a      	beq.n	801f5ac <etharp_query+0x224>
          pbuf_free(p);
 801f596:	69f8      	ldr	r0, [r7, #28]
 801f598:	f7f6 fe3a 	bl	8016210 <pbuf_free>
          p = NULL;
 801f59c:	2300      	movs	r3, #0
 801f59e:	61fb      	str	r3, [r7, #28]
 801f5a0:	e004      	b.n	801f5ac <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f5a6:	69f8      	ldr	r0, [r7, #28]
 801f5a8:	f7f6 fedc 	bl	8016364 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f5ac:	69fb      	ldr	r3, [r7, #28]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d024      	beq.n	801f5fc <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f5b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5b6:	491a      	ldr	r1, [pc, #104]	@ (801f620 <etharp_query+0x298>)
 801f5b8:	4613      	mov	r3, r2
 801f5ba:	005b      	lsls	r3, r3, #1
 801f5bc:	4413      	add	r3, r2
 801f5be:	00db      	lsls	r3, r3, #3
 801f5c0:	440b      	add	r3, r1
 801f5c2:	681b      	ldr	r3, [r3, #0]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	d00b      	beq.n	801f5e0 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801f5c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5cc:	4914      	ldr	r1, [pc, #80]	@ (801f620 <etharp_query+0x298>)
 801f5ce:	4613      	mov	r3, r2
 801f5d0:	005b      	lsls	r3, r3, #1
 801f5d2:	4413      	add	r3, r2
 801f5d4:	00db      	lsls	r3, r3, #3
 801f5d6:	440b      	add	r3, r1
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7f6 fe18 	bl	8016210 <pbuf_free>
      }
      arp_table[i].q = p;
 801f5e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f5e4:	490e      	ldr	r1, [pc, #56]	@ (801f620 <etharp_query+0x298>)
 801f5e6:	4613      	mov	r3, r2
 801f5e8:	005b      	lsls	r3, r3, #1
 801f5ea:	4413      	add	r3, r2
 801f5ec:	00db      	lsls	r3, r3, #3
 801f5ee:	440b      	add	r3, r1
 801f5f0:	69fa      	ldr	r2, [r7, #28]
 801f5f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801f5fa:	e008      	b.n	801f60e <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801f5fc:	4b07      	ldr	r3, [pc, #28]	@ (801f61c <etharp_query+0x294>)
 801f5fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f600:	3301      	adds	r3, #1
 801f602:	b29a      	uxth	r2, r3
 801f604:	4b05      	ldr	r3, [pc, #20]	@ (801f61c <etharp_query+0x294>)
 801f606:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f608:	23ff      	movs	r3, #255	@ 0xff
 801f60a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801f60e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801f612:	4618      	mov	r0, r3
 801f614:	3728      	adds	r7, #40	@ 0x28
 801f616:	46bd      	mov	sp, r7
 801f618:	bd80      	pop	{r7, pc}
 801f61a:	bf00      	nop
 801f61c:	2000bbec 	.word	0x2000bbec
 801f620:	2000be18 	.word	0x2000be18
 801f624:	0802789c 	.word	0x0802789c
 801f628:	08027a48 	.word	0x08027a48
 801f62c:	08027914 	.word	0x08027914
 801f630:	08027a3c 	.word	0x08027a3c
 801f634:	2000bf08 	.word	0x2000bf08
 801f638:	08027a70 	.word	0x08027a70

0801f63c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f63c:	b580      	push	{r7, lr}
 801f63e:	b08a      	sub	sp, #40	@ 0x28
 801f640:	af02      	add	r7, sp, #8
 801f642:	60f8      	str	r0, [r7, #12]
 801f644:	60b9      	str	r1, [r7, #8]
 801f646:	607a      	str	r2, [r7, #4]
 801f648:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f64a:	2300      	movs	r3, #0
 801f64c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	2b00      	cmp	r3, #0
 801f652:	d106      	bne.n	801f662 <etharp_raw+0x26>
 801f654:	4b40      	ldr	r3, [pc, #256]	@ (801f758 <etharp_raw+0x11c>)
 801f656:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 801f65a:	4940      	ldr	r1, [pc, #256]	@ (801f75c <etharp_raw+0x120>)
 801f65c:	4840      	ldr	r0, [pc, #256]	@ (801f760 <etharp_raw+0x124>)
 801f65e:	f002 fdf5 	bl	802224c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f662:	2200      	movs	r2, #0
 801f664:	211c      	movs	r1, #28
 801f666:	2002      	movs	r0, #2
 801f668:	f7f6 fa5a 	bl	8015b20 <pbuf_alloc>
 801f66c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f66e:	69bb      	ldr	r3, [r7, #24]
 801f670:	2b00      	cmp	r3, #0
 801f672:	d108      	bne.n	801f686 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801f674:	4b3b      	ldr	r3, [pc, #236]	@ (801f764 <etharp_raw+0x128>)
 801f676:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f678:	3301      	adds	r3, #1
 801f67a:	b29a      	uxth	r2, r3
 801f67c:	4b39      	ldr	r3, [pc, #228]	@ (801f764 <etharp_raw+0x128>)
 801f67e:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801f680:	f04f 33ff 	mov.w	r3, #4294967295
 801f684:	e063      	b.n	801f74e <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f686:	69bb      	ldr	r3, [r7, #24]
 801f688:	895b      	ldrh	r3, [r3, #10]
 801f68a:	2b1b      	cmp	r3, #27
 801f68c:	d806      	bhi.n	801f69c <etharp_raw+0x60>
 801f68e:	4b32      	ldr	r3, [pc, #200]	@ (801f758 <etharp_raw+0x11c>)
 801f690:	f240 4263 	movw	r2, #1123	@ 0x463
 801f694:	4934      	ldr	r1, [pc, #208]	@ (801f768 <etharp_raw+0x12c>)
 801f696:	4832      	ldr	r0, [pc, #200]	@ (801f760 <etharp_raw+0x124>)
 801f698:	f002 fdd8 	bl	802224c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f69c:	69bb      	ldr	r3, [r7, #24]
 801f69e:	685b      	ldr	r3, [r3, #4]
 801f6a0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f6a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f7f5 fb0d 	bl	8014cc4 <lwip_htons>
 801f6aa:	4603      	mov	r3, r0
 801f6ac:	461a      	mov	r2, r3
 801f6ae:	697b      	ldr	r3, [r7, #20]
 801f6b0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f6b8:	2b06      	cmp	r3, #6
 801f6ba:	d006      	beq.n	801f6ca <etharp_raw+0x8e>
 801f6bc:	4b26      	ldr	r3, [pc, #152]	@ (801f758 <etharp_raw+0x11c>)
 801f6be:	f240 426a 	movw	r2, #1130	@ 0x46a
 801f6c2:	492a      	ldr	r1, [pc, #168]	@ (801f76c <etharp_raw+0x130>)
 801f6c4:	4826      	ldr	r0, [pc, #152]	@ (801f760 <etharp_raw+0x124>)
 801f6c6:	f002 fdc1 	bl	802224c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801f6ca:	697b      	ldr	r3, [r7, #20]
 801f6cc:	3308      	adds	r3, #8
 801f6ce:	2206      	movs	r2, #6
 801f6d0:	6839      	ldr	r1, [r7, #0]
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	f003 f8b5 	bl	8022842 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801f6d8:	697b      	ldr	r3, [r7, #20]
 801f6da:	3312      	adds	r3, #18
 801f6dc:	2206      	movs	r2, #6
 801f6de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f003 f8ae 	bl	8022842 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801f6e6:	697b      	ldr	r3, [r7, #20]
 801f6e8:	330e      	adds	r3, #14
 801f6ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f6ec:	6812      	ldr	r2, [r2, #0]
 801f6ee:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801f6f0:	697b      	ldr	r3, [r7, #20]
 801f6f2:	3318      	adds	r3, #24
 801f6f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f6f6:	6812      	ldr	r2, [r2, #0]
 801f6f8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801f6fa:	697b      	ldr	r3, [r7, #20]
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	701a      	strb	r2, [r3, #0]
 801f700:	2200      	movs	r2, #0
 801f702:	f042 0201 	orr.w	r2, r2, #1
 801f706:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f708:	697b      	ldr	r3, [r7, #20]
 801f70a:	2200      	movs	r2, #0
 801f70c:	f042 0208 	orr.w	r2, r2, #8
 801f710:	709a      	strb	r2, [r3, #2]
 801f712:	2200      	movs	r2, #0
 801f714:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f716:	697b      	ldr	r3, [r7, #20]
 801f718:	2206      	movs	r2, #6
 801f71a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f71c:	697b      	ldr	r3, [r7, #20]
 801f71e:	2204      	movs	r2, #4
 801f720:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f722:	f640 0306 	movw	r3, #2054	@ 0x806
 801f726:	9300      	str	r3, [sp, #0]
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	68ba      	ldr	r2, [r7, #8]
 801f72c:	69b9      	ldr	r1, [r7, #24]
 801f72e:	68f8      	ldr	r0, [r7, #12]
 801f730:	f001 ff4e 	bl	80215d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801f734:	4b0b      	ldr	r3, [pc, #44]	@ (801f764 <etharp_raw+0x128>)
 801f736:	8b1b      	ldrh	r3, [r3, #24]
 801f738:	3301      	adds	r3, #1
 801f73a:	b29a      	uxth	r2, r3
 801f73c:	4b09      	ldr	r3, [pc, #36]	@ (801f764 <etharp_raw+0x128>)
 801f73e:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801f740:	69b8      	ldr	r0, [r7, #24]
 801f742:	f7f6 fd65 	bl	8016210 <pbuf_free>
  p = NULL;
 801f746:	2300      	movs	r3, #0
 801f748:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f74a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f74e:	4618      	mov	r0, r3
 801f750:	3720      	adds	r7, #32
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}
 801f756:	bf00      	nop
 801f758:	0802789c 	.word	0x0802789c
 801f75c:	080279ec 	.word	0x080279ec
 801f760:	08027914 	.word	0x08027914
 801f764:	2000bbec 	.word	0x2000bbec
 801f768:	08027a8c 	.word	0x08027a8c
 801f76c:	08027ac0 	.word	0x08027ac0

0801f770 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801f770:	b580      	push	{r7, lr}
 801f772:	b088      	sub	sp, #32
 801f774:	af04      	add	r7, sp, #16
 801f776:	60f8      	str	r0, [r7, #12]
 801f778:	60b9      	str	r1, [r7, #8]
 801f77a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f78c:	2201      	movs	r2, #1
 801f78e:	9203      	str	r2, [sp, #12]
 801f790:	68ba      	ldr	r2, [r7, #8]
 801f792:	9202      	str	r2, [sp, #8]
 801f794:	4a06      	ldr	r2, [pc, #24]	@ (801f7b0 <etharp_request_dst+0x40>)
 801f796:	9201      	str	r2, [sp, #4]
 801f798:	9300      	str	r3, [sp, #0]
 801f79a:	4603      	mov	r3, r0
 801f79c:	687a      	ldr	r2, [r7, #4]
 801f79e:	68f8      	ldr	r0, [r7, #12]
 801f7a0:	f7ff ff4c 	bl	801f63c <etharp_raw>
 801f7a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f7a6:	4618      	mov	r0, r3
 801f7a8:	3710      	adds	r7, #16
 801f7aa:	46bd      	mov	sp, r7
 801f7ac:	bd80      	pop	{r7, pc}
 801f7ae:	bf00      	nop
 801f7b0:	08032ee0 	.word	0x08032ee0

0801f7b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f7b4:	b580      	push	{r7, lr}
 801f7b6:	b082      	sub	sp, #8
 801f7b8:	af00      	add	r7, sp, #0
 801f7ba:	6078      	str	r0, [r7, #4]
 801f7bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f7be:	4a05      	ldr	r2, [pc, #20]	@ (801f7d4 <etharp_request+0x20>)
 801f7c0:	6839      	ldr	r1, [r7, #0]
 801f7c2:	6878      	ldr	r0, [r7, #4]
 801f7c4:	f7ff ffd4 	bl	801f770 <etharp_request_dst>
 801f7c8:	4603      	mov	r3, r0
}
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	3708      	adds	r7, #8
 801f7ce:	46bd      	mov	sp, r7
 801f7d0:	bd80      	pop	{r7, pc}
 801f7d2:	bf00      	nop
 801f7d4:	08032ed8 	.word	0x08032ed8

0801f7d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b08e      	sub	sp, #56	@ 0x38
 801f7dc:	af04      	add	r7, sp, #16
 801f7de:	6078      	str	r0, [r7, #4]
 801f7e0:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 801f7e2:	4baa      	ldr	r3, [pc, #680]	@ (801fa8c <icmp_input+0x2b4>)
 801f7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f7e8:	3301      	adds	r3, #1
 801f7ea:	b29a      	uxth	r2, r3
 801f7ec:	4ba7      	ldr	r3, [pc, #668]	@ (801fa8c <icmp_input+0x2b4>)
 801f7ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 801f7f2:	4ba6      	ldr	r3, [pc, #664]	@ (801fa8c <icmp_input+0x2b4>)
 801f7f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801f7f8:	3301      	adds	r3, #1
 801f7fa:	4aa4      	ldr	r2, [pc, #656]	@ (801fa8c <icmp_input+0x2b4>)
 801f7fc:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c

  iphdr_in = ip4_current_header();
 801f800:	4ba3      	ldr	r3, [pc, #652]	@ (801fa90 <icmp_input+0x2b8>)
 801f802:	689b      	ldr	r3, [r3, #8]
 801f804:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f808:	781b      	ldrb	r3, [r3, #0]
 801f80a:	f003 030f 	and.w	r3, r3, #15
 801f80e:	b29b      	uxth	r3, r3
 801f810:	009b      	lsls	r3, r3, #2
 801f812:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801f814:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f816:	2b13      	cmp	r3, #19
 801f818:	f240 817f 	bls.w	801fb1a <icmp_input+0x342>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	895b      	ldrh	r3, [r3, #10]
 801f820:	2b03      	cmp	r3, #3
 801f822:	f240 817c 	bls.w	801fb1e <icmp_input+0x346>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	685b      	ldr	r3, [r3, #4]
 801f82a:	781b      	ldrb	r3, [r3, #0]
 801f82c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f830:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f834:	2b00      	cmp	r3, #0
 801f836:	d002      	beq.n	801f83e <icmp_input+0x66>
 801f838:	2b08      	cmp	r3, #8
 801f83a:	d008      	beq.n	801f84e <icmp_input+0x76>
 801f83c:	e0dd      	b.n	801f9fa <icmp_input+0x222>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
 801f83e:	4b93      	ldr	r3, [pc, #588]	@ (801fa8c <icmp_input+0x2b4>)
 801f840:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801f844:	3301      	adds	r3, #1
 801f846:	4a91      	ldr	r2, [pc, #580]	@ (801fa8c <icmp_input+0x2b4>)
 801f848:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
    break;
 801f84c:	e161      	b.n	801fb12 <icmp_input+0x33a>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
 801f84e:	4b8f      	ldr	r3, [pc, #572]	@ (801fa8c <icmp_input+0x2b4>)
 801f850:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801f854:	3301      	adds	r3, #1
 801f856:	4a8d      	ldr	r2, [pc, #564]	@ (801fa8c <icmp_input+0x2b4>)
 801f858:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
    src = ip4_current_dest_addr();
 801f85c:	4b8d      	ldr	r3, [pc, #564]	@ (801fa94 <icmp_input+0x2bc>)
 801f85e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f860:	4b8b      	ldr	r3, [pc, #556]	@ (801fa90 <icmp_input+0x2b8>)
 801f862:	695b      	ldr	r3, [r3, #20]
 801f864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f868:	2be0      	cmp	r3, #224	@ 0xe0
 801f86a:	f000 816e 	beq.w	801fb4a <icmp_input+0x372>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f86e:	4b88      	ldr	r3, [pc, #544]	@ (801fa90 <icmp_input+0x2b8>)
 801f870:	695b      	ldr	r3, [r3, #20]
 801f872:	4a87      	ldr	r2, [pc, #540]	@ (801fa90 <icmp_input+0x2b8>)
 801f874:	6812      	ldr	r2, [r2, #0]
 801f876:	4611      	mov	r1, r2
 801f878:	4618      	mov	r0, r3
 801f87a:	f000 fd9b 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801f87e:	4603      	mov	r3, r0
 801f880:	2b00      	cmp	r3, #0
 801f882:	f040 8164 	bne.w	801fb4e <icmp_input+0x376>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	891b      	ldrh	r3, [r3, #8]
 801f88a:	2b07      	cmp	r3, #7
 801f88c:	f240 8149 	bls.w	801fb22 <icmp_input+0x34a>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f890:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f892:	330e      	adds	r3, #14
 801f894:	b29b      	uxth	r3, r3
 801f896:	b21b      	sxth	r3, r3
 801f898:	4619      	mov	r1, r3
 801f89a:	6878      	ldr	r0, [r7, #4]
 801f89c:	f7f6 fc94 	bl	80161c8 <pbuf_header>
 801f8a0:	4603      	mov	r3, r0
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d046      	beq.n	801f934 <icmp_input+0x15c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	891a      	ldrh	r2, [r3, #8]
 801f8aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8ac:	4413      	add	r3, r2
 801f8ae:	b29b      	uxth	r3, r3
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	4619      	mov	r1, r3
 801f8b4:	2002      	movs	r0, #2
 801f8b6:	f7f6 f933 	bl	8015b20 <pbuf_alloc>
 801f8ba:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801f8bc:	69bb      	ldr	r3, [r7, #24]
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	f000 8147 	beq.w	801fb52 <icmp_input+0x37a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f8c4:	69bb      	ldr	r3, [r7, #24]
 801f8c6:	895b      	ldrh	r3, [r3, #10]
 801f8c8:	461a      	mov	r2, r3
 801f8ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8cc:	3308      	adds	r3, #8
 801f8ce:	429a      	cmp	r2, r3
 801f8d0:	d203      	bcs.n	801f8da <icmp_input+0x102>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801f8d2:	69b8      	ldr	r0, [r7, #24]
 801f8d4:	f7f6 fc9c 	bl	8016210 <pbuf_free>
        goto icmperr;
 801f8d8:	e13c      	b.n	801fb54 <icmp_input+0x37c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801f8da:	69bb      	ldr	r3, [r7, #24]
 801f8dc:	685b      	ldr	r3, [r3, #4]
 801f8de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801f8e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f8e2:	4618      	mov	r0, r3
 801f8e4:	f002 ffad 	bl	8022842 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801f8e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f8ea:	425b      	negs	r3, r3
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	b21b      	sxth	r3, r3
 801f8f0:	4619      	mov	r1, r3
 801f8f2:	69b8      	ldr	r0, [r7, #24]
 801f8f4:	f7f6 fc68 	bl	80161c8 <pbuf_header>
 801f8f8:	4603      	mov	r3, r0
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d009      	beq.n	801f912 <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f8fe:	4b66      	ldr	r3, [pc, #408]	@ (801fa98 <icmp_input+0x2c0>)
 801f900:	22af      	movs	r2, #175	@ 0xaf
 801f902:	4966      	ldr	r1, [pc, #408]	@ (801fa9c <icmp_input+0x2c4>)
 801f904:	4866      	ldr	r0, [pc, #408]	@ (801faa0 <icmp_input+0x2c8>)
 801f906:	f002 fca1 	bl	802224c <iprintf>
        pbuf_free(r);
 801f90a:	69b8      	ldr	r0, [r7, #24]
 801f90c:	f7f6 fc80 	bl	8016210 <pbuf_free>
        goto icmperr;
 801f910:	e120      	b.n	801fb54 <icmp_input+0x37c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801f912:	6879      	ldr	r1, [r7, #4]
 801f914:	69b8      	ldr	r0, [r7, #24]
 801f916:	f7f6 fdad 	bl	8016474 <pbuf_copy>
 801f91a:	4603      	mov	r3, r0
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d003      	beq.n	801f928 <icmp_input+0x150>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801f920:	69b8      	ldr	r0, [r7, #24]
 801f922:	f7f6 fc75 	bl	8016210 <pbuf_free>
        goto icmperr;
 801f926:	e115      	b.n	801fb54 <icmp_input+0x37c>
      }
      /* free the original p */
      pbuf_free(p);
 801f928:	6878      	ldr	r0, [r7, #4]
 801f92a:	f7f6 fc71 	bl	8016210 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801f92e:	69bb      	ldr	r3, [r7, #24]
 801f930:	607b      	str	r3, [r7, #4]
 801f932:	e015      	b.n	801f960 <icmp_input+0x188>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f936:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801f93a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801f93e:	33f2      	adds	r3, #242	@ 0xf2
 801f940:	b29b      	uxth	r3, r3
 801f942:	b21b      	sxth	r3, r3
 801f944:	4619      	mov	r1, r3
 801f946:	6878      	ldr	r0, [r7, #4]
 801f948:	f7f6 fc3e 	bl	80161c8 <pbuf_header>
 801f94c:	4603      	mov	r3, r0
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d006      	beq.n	801f960 <icmp_input+0x188>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f952:	4b51      	ldr	r3, [pc, #324]	@ (801fa98 <icmp_input+0x2c0>)
 801f954:	22c0      	movs	r2, #192	@ 0xc0
 801f956:	4953      	ldr	r1, [pc, #332]	@ (801faa4 <icmp_input+0x2cc>)
 801f958:	4851      	ldr	r0, [pc, #324]	@ (801faa0 <icmp_input+0x2c8>)
 801f95a:	f002 fc77 	bl	802224c <iprintf>
        goto icmperr;
 801f95e:	e0f9      	b.n	801fb54 <icmp_input+0x37c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	685b      	ldr	r3, [r3, #4]
 801f964:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801f966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801f96a:	4619      	mov	r1, r3
 801f96c:	6878      	ldr	r0, [r7, #4]
 801f96e:	f7f6 fc2b 	bl	80161c8 <pbuf_header>
 801f972:	4603      	mov	r3, r0
 801f974:	2b00      	cmp	r3, #0
 801f976:	f040 80cb 	bne.w	801fb10 <icmp_input+0x338>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	685b      	ldr	r3, [r3, #4]
 801f97e:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801f980:	69fb      	ldr	r3, [r7, #28]
 801f982:	681a      	ldr	r2, [r3, #0]
 801f984:	693b      	ldr	r3, [r7, #16]
 801f986:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f988:	4b41      	ldr	r3, [pc, #260]	@ (801fa90 <icmp_input+0x2b8>)
 801f98a:	691a      	ldr	r2, [r3, #16]
 801f98c:	693b      	ldr	r3, [r7, #16]
 801f98e:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f990:	697b      	ldr	r3, [r7, #20]
 801f992:	2200      	movs	r2, #0
 801f994:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801f996:	697b      	ldr	r3, [r7, #20]
 801f998:	2200      	movs	r2, #0
 801f99a:	709a      	strb	r2, [r3, #2]
 801f99c:	2200      	movs	r2, #0
 801f99e:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801f9a0:	693b      	ldr	r3, [r7, #16]
 801f9a2:	22ff      	movs	r2, #255	@ 0xff
 801f9a4:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801f9a6:	693b      	ldr	r3, [r7, #16]
 801f9a8:	2200      	movs	r2, #0
 801f9aa:	729a      	strb	r2, [r3, #10]
 801f9ac:	2200      	movs	r2, #0
 801f9ae:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 801f9b0:	4b36      	ldr	r3, [pc, #216]	@ (801fa8c <icmp_input+0x2b4>)
 801f9b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f9b6:	3301      	adds	r3, #1
 801f9b8:	b29a      	uxth	r2, r3
 801f9ba:	4b34      	ldr	r3, [pc, #208]	@ (801fa8c <icmp_input+0x2b4>)
 801f9bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
 801f9c0:	4b32      	ldr	r3, [pc, #200]	@ (801fa8c <icmp_input+0x2b4>)
 801f9c2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801f9c6:	3301      	adds	r3, #1
 801f9c8:	4a30      	ldr	r2, [pc, #192]	@ (801fa8c <icmp_input+0x2b4>)
 801f9ca:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
 801f9ce:	4b2f      	ldr	r3, [pc, #188]	@ (801fa8c <icmp_input+0x2b4>)
 801f9d0:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	4a2d      	ldr	r2, [pc, #180]	@ (801fa8c <icmp_input+0x2b4>)
 801f9d8:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f9dc:	683b      	ldr	r3, [r7, #0]
 801f9de:	9302      	str	r3, [sp, #8]
 801f9e0:	2301      	movs	r3, #1
 801f9e2:	9301      	str	r3, [sp, #4]
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	9300      	str	r3, [sp, #0]
 801f9e8:	23ff      	movs	r3, #255	@ 0xff
 801f9ea:	2200      	movs	r2, #0
 801f9ec:	69f9      	ldr	r1, [r7, #28]
 801f9ee:	6878      	ldr	r0, [r7, #4]
 801f9f0:	f000 fbee 	bl	80201d0 <ip4_output_if>
 801f9f4:	4603      	mov	r3, r0
 801f9f6:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801f9f8:	e08a      	b.n	801fb10 <icmp_input+0x338>
  default:
    if (type == ICMP_DUR) {
 801f9fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f9fe:	2b03      	cmp	r3, #3
 801fa00:	d107      	bne.n	801fa12 <icmp_input+0x23a>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
 801fa02:	4b22      	ldr	r3, [pc, #136]	@ (801fa8c <icmp_input+0x2b4>)
 801fa04:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801fa08:	3301      	adds	r3, #1
 801fa0a:	4a20      	ldr	r2, [pc, #128]	@ (801fa8c <icmp_input+0x2b4>)
 801fa0c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 801fa10:	e06d      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_TE) {
 801fa12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa16:	2b0b      	cmp	r3, #11
 801fa18:	d107      	bne.n	801fa2a <icmp_input+0x252>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
 801fa1a:	4b1c      	ldr	r3, [pc, #112]	@ (801fa8c <icmp_input+0x2b4>)
 801fa1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801fa20:	3301      	adds	r3, #1
 801fa22:	4a1a      	ldr	r2, [pc, #104]	@ (801fa8c <icmp_input+0x2b4>)
 801fa24:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
 801fa28:	e061      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_PP) {
 801fa2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa2e:	2b0c      	cmp	r3, #12
 801fa30:	d107      	bne.n	801fa42 <icmp_input+0x26a>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
 801fa32:	4b16      	ldr	r3, [pc, #88]	@ (801fa8c <icmp_input+0x2b4>)
 801fa34:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801fa38:	3301      	adds	r3, #1
 801fa3a:	4a14      	ldr	r2, [pc, #80]	@ (801fa8c <icmp_input+0x2b4>)
 801fa3c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
 801fa40:	e055      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_SQ) {
 801fa42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa46:	2b04      	cmp	r3, #4
 801fa48:	d107      	bne.n	801fa5a <icmp_input+0x282>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 801fa4a:	4b10      	ldr	r3, [pc, #64]	@ (801fa8c <icmp_input+0x2b4>)
 801fa4c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801fa50:	3301      	adds	r3, #1
 801fa52:	4a0e      	ldr	r2, [pc, #56]	@ (801fa8c <icmp_input+0x2b4>)
 801fa54:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
 801fa58:	e049      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_RD) {
 801fa5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa5e:	2b05      	cmp	r3, #5
 801fa60:	d107      	bne.n	801fa72 <icmp_input+0x29a>
      MIB2_STATS_INC(mib2.icmpinredirects);
 801fa62:	4b0a      	ldr	r3, [pc, #40]	@ (801fa8c <icmp_input+0x2b4>)
 801fa64:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801fa68:	3301      	adds	r3, #1
 801fa6a:	4a08      	ldr	r2, [pc, #32]	@ (801fa8c <icmp_input+0x2b4>)
 801fa6c:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
 801fa70:	e03d      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_TS) {
 801fa72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fa76:	2b0d      	cmp	r3, #13
 801fa78:	d116      	bne.n	801faa8 <icmp_input+0x2d0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
 801fa7a:	4b04      	ldr	r3, [pc, #16]	@ (801fa8c <icmp_input+0x2b4>)
 801fa7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801fa80:	3301      	adds	r3, #1
 801fa82:	4a02      	ldr	r2, [pc, #8]	@ (801fa8c <icmp_input+0x2b4>)
 801fa84:	f8c2 3170 	str.w	r3, [r2, #368]	@ 0x170
 801fa88:	e031      	b.n	801faee <icmp_input+0x316>
 801fa8a:	bf00      	nop
 801fa8c:	2000bbec 	.word	0x2000bbec
 801fa90:	20008604 	.word	0x20008604
 801fa94:	20008618 	.word	0x20008618
 801fa98:	08027b04 	.word	0x08027b04
 801fa9c:	08027b3c 	.word	0x08027b3c
 801faa0:	08027b74 	.word	0x08027b74
 801faa4:	08027b9c 	.word	0x08027b9c
    } else if (type == ICMP_TSR) {
 801faa8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801faac:	2b0e      	cmp	r3, #14
 801faae:	d107      	bne.n	801fac0 <icmp_input+0x2e8>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
 801fab0:	4b33      	ldr	r3, [pc, #204]	@ (801fb80 <icmp_input+0x3a8>)
 801fab2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801fab6:	3301      	adds	r3, #1
 801fab8:	4a31      	ldr	r2, [pc, #196]	@ (801fb80 <icmp_input+0x3a8>)
 801faba:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
 801fabe:	e016      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_AM) {
 801fac0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fac4:	2b11      	cmp	r3, #17
 801fac6:	d107      	bne.n	801fad8 <icmp_input+0x300>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
 801fac8:	4b2d      	ldr	r3, [pc, #180]	@ (801fb80 <icmp_input+0x3a8>)
 801faca:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801face:	3301      	adds	r3, #1
 801fad0:	4a2b      	ldr	r2, [pc, #172]	@ (801fb80 <icmp_input+0x3a8>)
 801fad2:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
 801fad6:	e00a      	b.n	801faee <icmp_input+0x316>
    } else if (type == ICMP_AMR) {
 801fad8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801fadc:	2b12      	cmp	r3, #18
 801fade:	d106      	bne.n	801faee <icmp_input+0x316>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 801fae0:	4b27      	ldr	r3, [pc, #156]	@ (801fb80 <icmp_input+0x3a8>)
 801fae2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801fae6:	3301      	adds	r3, #1
 801fae8:	4a25      	ldr	r2, [pc, #148]	@ (801fb80 <icmp_input+0x3a8>)
 801faea:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 801faee:	4b24      	ldr	r3, [pc, #144]	@ (801fb80 <icmp_input+0x3a8>)
 801faf0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801faf4:	3301      	adds	r3, #1
 801faf6:	b29a      	uxth	r2, r3
 801faf8:	4b21      	ldr	r3, [pc, #132]	@ (801fb80 <icmp_input+0x3a8>)
 801fafa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
    ICMP_STATS_INC(icmp.drop);
 801fafe:	4b20      	ldr	r3, [pc, #128]	@ (801fb80 <icmp_input+0x3a8>)
 801fb00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fb04:	3301      	adds	r3, #1
 801fb06:	b29a      	uxth	r2, r3
 801fb08:	4b1d      	ldr	r3, [pc, #116]	@ (801fb80 <icmp_input+0x3a8>)
 801fb0a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801fb0e:	e000      	b.n	801fb12 <icmp_input+0x33a>
    break;
 801fb10:	bf00      	nop
  }
  pbuf_free(p);
 801fb12:	6878      	ldr	r0, [r7, #4]
 801fb14:	f7f6 fb7c 	bl	8016210 <pbuf_free>
  return;
 801fb18:	e02f      	b.n	801fb7a <icmp_input+0x3a2>
    goto lenerr;
 801fb1a:	bf00      	nop
 801fb1c:	e002      	b.n	801fb24 <icmp_input+0x34c>
    goto lenerr;
 801fb1e:	bf00      	nop
 801fb20:	e000      	b.n	801fb24 <icmp_input+0x34c>
      goto lenerr;
 801fb22:	bf00      	nop
lenerr:
  pbuf_free(p);
 801fb24:	6878      	ldr	r0, [r7, #4]
 801fb26:	f7f6 fb73 	bl	8016210 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801fb2a:	4b15      	ldr	r3, [pc, #84]	@ (801fb80 <icmp_input+0x3a8>)
 801fb2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fb30:	3301      	adds	r3, #1
 801fb32:	b29a      	uxth	r2, r3
 801fb34:	4b12      	ldr	r3, [pc, #72]	@ (801fb80 <icmp_input+0x3a8>)
 801fb36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 801fb3a:	4b11      	ldr	r3, [pc, #68]	@ (801fb80 <icmp_input+0x3a8>)
 801fb3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801fb40:	3301      	adds	r3, #1
 801fb42:	4a0f      	ldr	r2, [pc, #60]	@ (801fb80 <icmp_input+0x3a8>)
 801fb44:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801fb48:	e017      	b.n	801fb7a <icmp_input+0x3a2>
      goto icmperr;
 801fb4a:	bf00      	nop
 801fb4c:	e002      	b.n	801fb54 <icmp_input+0x37c>
      goto icmperr;
 801fb4e:	bf00      	nop
 801fb50:	e000      	b.n	801fb54 <icmp_input+0x37c>
        goto icmperr;
 801fb52:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801fb54:	6878      	ldr	r0, [r7, #4]
 801fb56:	f7f6 fb5b 	bl	8016210 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801fb5a:	4b09      	ldr	r3, [pc, #36]	@ (801fb80 <icmp_input+0x3a8>)
 801fb5c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801fb60:	3301      	adds	r3, #1
 801fb62:	b29a      	uxth	r2, r3
 801fb64:	4b06      	ldr	r3, [pc, #24]	@ (801fb80 <icmp_input+0x3a8>)
 801fb66:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801fb6a:	4b05      	ldr	r3, [pc, #20]	@ (801fb80 <icmp_input+0x3a8>)
 801fb6c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801fb70:	3301      	adds	r3, #1
 801fb72:	4a03      	ldr	r2, [pc, #12]	@ (801fb80 <icmp_input+0x3a8>)
 801fb74:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801fb78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801fb7a:	3728      	adds	r7, #40	@ 0x28
 801fb7c:	46bd      	mov	sp, r7
 801fb7e:	bd80      	pop	{r7, pc}
 801fb80:	2000bbec 	.word	0x2000bbec

0801fb84 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b082      	sub	sp, #8
 801fb88:	af00      	add	r7, sp, #0
 801fb8a:	6078      	str	r0, [r7, #4]
 801fb8c:	460b      	mov	r3, r1
 801fb8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801fb90:	4b08      	ldr	r3, [pc, #32]	@ (801fbb4 <icmp_dest_unreach+0x30>)
 801fb92:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801fb96:	3301      	adds	r3, #1
 801fb98:	4a06      	ldr	r2, [pc, #24]	@ (801fbb4 <icmp_dest_unreach+0x30>)
 801fb9a:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
  icmp_send_response(p, ICMP_DUR, t);
 801fb9e:	78fb      	ldrb	r3, [r7, #3]
 801fba0:	461a      	mov	r2, r3
 801fba2:	2103      	movs	r1, #3
 801fba4:	6878      	ldr	r0, [r7, #4]
 801fba6:	f000 f821 	bl	801fbec <icmp_send_response>
}
 801fbaa:	bf00      	nop
 801fbac:	3708      	adds	r7, #8
 801fbae:	46bd      	mov	sp, r7
 801fbb0:	bd80      	pop	{r7, pc}
 801fbb2:	bf00      	nop
 801fbb4:	2000bbec 	.word	0x2000bbec

0801fbb8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801fbb8:	b580      	push	{r7, lr}
 801fbba:	b082      	sub	sp, #8
 801fbbc:	af00      	add	r7, sp, #0
 801fbbe:	6078      	str	r0, [r7, #4]
 801fbc0:	460b      	mov	r3, r1
 801fbc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 801fbc4:	4b08      	ldr	r3, [pc, #32]	@ (801fbe8 <icmp_time_exceeded+0x30>)
 801fbc6:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801fbca:	3301      	adds	r3, #1
 801fbcc:	4a06      	ldr	r2, [pc, #24]	@ (801fbe8 <icmp_time_exceeded+0x30>)
 801fbce:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
  icmp_send_response(p, ICMP_TE, t);
 801fbd2:	78fb      	ldrb	r3, [r7, #3]
 801fbd4:	461a      	mov	r2, r3
 801fbd6:	210b      	movs	r1, #11
 801fbd8:	6878      	ldr	r0, [r7, #4]
 801fbda:	f000 f807 	bl	801fbec <icmp_send_response>
}
 801fbde:	bf00      	nop
 801fbe0:	3708      	adds	r7, #8
 801fbe2:	46bd      	mov	sp, r7
 801fbe4:	bd80      	pop	{r7, pc}
 801fbe6:	bf00      	nop
 801fbe8:	2000bbec 	.word	0x2000bbec

0801fbec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801fbec:	b580      	push	{r7, lr}
 801fbee:	b08c      	sub	sp, #48	@ 0x30
 801fbf0:	af04      	add	r7, sp, #16
 801fbf2:	6078      	str	r0, [r7, #4]
 801fbf4:	460b      	mov	r3, r1
 801fbf6:	70fb      	strb	r3, [r7, #3]
 801fbf8:	4613      	mov	r3, r2
 801fbfa:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 801fbfc:	4b37      	ldr	r3, [pc, #220]	@ (801fcdc <icmp_send_response+0xf0>)
 801fbfe:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801fc02:	3301      	adds	r3, #1
 801fc04:	4a35      	ldr	r2, [pc, #212]	@ (801fcdc <icmp_send_response+0xf0>)
 801fc06:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801fc0a:	2200      	movs	r2, #0
 801fc0c:	2124      	movs	r1, #36	@ 0x24
 801fc0e:	2001      	movs	r0, #1
 801fc10:	f7f5 ff86 	bl	8015b20 <pbuf_alloc>
 801fc14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801fc16:	69fb      	ldr	r3, [r7, #28]
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d107      	bne.n	801fc2c <icmp_send_response+0x40>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 801fc1c:	4b2f      	ldr	r3, [pc, #188]	@ (801fcdc <icmp_send_response+0xf0>)
 801fc1e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801fc22:	3301      	adds	r3, #1
 801fc24:	4a2d      	ldr	r2, [pc, #180]	@ (801fcdc <icmp_send_response+0xf0>)
 801fc26:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
 801fc2a:	e053      	b.n	801fcd4 <icmp_send_response+0xe8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801fc2c:	69fb      	ldr	r3, [r7, #28]
 801fc2e:	895b      	ldrh	r3, [r3, #10]
 801fc30:	2b23      	cmp	r3, #35	@ 0x23
 801fc32:	d806      	bhi.n	801fc42 <icmp_send_response+0x56>
 801fc34:	4b2a      	ldr	r3, [pc, #168]	@ (801fce0 <icmp_send_response+0xf4>)
 801fc36:	f240 1261 	movw	r2, #353	@ 0x161
 801fc3a:	492a      	ldr	r1, [pc, #168]	@ (801fce4 <icmp_send_response+0xf8>)
 801fc3c:	482a      	ldr	r0, [pc, #168]	@ (801fce8 <icmp_send_response+0xfc>)
 801fc3e:	f002 fb05 	bl	802224c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	685b      	ldr	r3, [r3, #4]
 801fc46:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801fc48:	69fb      	ldr	r3, [r7, #28]
 801fc4a:	685b      	ldr	r3, [r3, #4]
 801fc4c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801fc4e:	697b      	ldr	r3, [r7, #20]
 801fc50:	78fa      	ldrb	r2, [r7, #3]
 801fc52:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801fc54:	697b      	ldr	r3, [r7, #20]
 801fc56:	78ba      	ldrb	r2, [r7, #2]
 801fc58:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801fc5a:	697b      	ldr	r3, [r7, #20]
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	711a      	strb	r2, [r3, #4]
 801fc60:	2200      	movs	r2, #0
 801fc62:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801fc64:	697b      	ldr	r3, [r7, #20]
 801fc66:	2200      	movs	r2, #0
 801fc68:	719a      	strb	r2, [r3, #6]
 801fc6a:	2200      	movs	r2, #0
 801fc6c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801fc6e:	69fb      	ldr	r3, [r7, #28]
 801fc70:	685b      	ldr	r3, [r3, #4]
 801fc72:	f103 0008 	add.w	r0, r3, #8
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	685b      	ldr	r3, [r3, #4]
 801fc7a:	221c      	movs	r2, #28
 801fc7c:	4619      	mov	r1, r3
 801fc7e:	f002 fde0 	bl	8022842 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801fc82:	69bb      	ldr	r3, [r7, #24]
 801fc84:	68db      	ldr	r3, [r3, #12]
 801fc86:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801fc88:	f107 030c 	add.w	r3, r7, #12
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	f000 f82d 	bl	801fcec <ip4_route>
 801fc92:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801fc94:	693b      	ldr	r3, [r7, #16]
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d019      	beq.n	801fcce <icmp_send_response+0xe2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801fc9a:	697b      	ldr	r3, [r7, #20]
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	709a      	strb	r2, [r3, #2]
 801fca0:	2200      	movs	r2, #0
 801fca2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801fca4:	4b0d      	ldr	r3, [pc, #52]	@ (801fcdc <icmp_send_response+0xf0>)
 801fca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fcaa:	3301      	adds	r3, #1
 801fcac:	b29a      	uxth	r2, r3
 801fcae:	4b0b      	ldr	r3, [pc, #44]	@ (801fcdc <icmp_send_response+0xf0>)
 801fcb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801fcb4:	f107 020c 	add.w	r2, r7, #12
 801fcb8:	693b      	ldr	r3, [r7, #16]
 801fcba:	9302      	str	r3, [sp, #8]
 801fcbc:	2301      	movs	r3, #1
 801fcbe:	9301      	str	r3, [sp, #4]
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	9300      	str	r3, [sp, #0]
 801fcc4:	23ff      	movs	r3, #255	@ 0xff
 801fcc6:	2100      	movs	r1, #0
 801fcc8:	69f8      	ldr	r0, [r7, #28]
 801fcca:	f000 fa81 	bl	80201d0 <ip4_output_if>
  }
  pbuf_free(q);
 801fcce:	69f8      	ldr	r0, [r7, #28]
 801fcd0:	f7f6 fa9e 	bl	8016210 <pbuf_free>
}
 801fcd4:	3720      	adds	r7, #32
 801fcd6:	46bd      	mov	sp, r7
 801fcd8:	bd80      	pop	{r7, pc}
 801fcda:	bf00      	nop
 801fcdc:	2000bbec 	.word	0x2000bbec
 801fce0:	08027b04 	.word	0x08027b04
 801fce4:	08027bd0 	.word	0x08027bd0
 801fce8:	08027b74 	.word	0x08027b74

0801fcec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801fcec:	b480      	push	{r7}
 801fcee:	b085      	sub	sp, #20
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801fcf4:	4b37      	ldr	r3, [pc, #220]	@ (801fdd4 <ip4_route+0xe8>)
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	60fb      	str	r3, [r7, #12]
 801fcfa:	e036      	b.n	801fd6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fcfc:	68fb      	ldr	r3, [r7, #12]
 801fcfe:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd02:	f003 0301 	and.w	r3, r3, #1
 801fd06:	b2db      	uxtb	r3, r3
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d02b      	beq.n	801fd64 <ip4_route+0x78>
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd12:	089b      	lsrs	r3, r3, #2
 801fd14:	f003 0301 	and.w	r3, r3, #1
 801fd18:	b2db      	uxtb	r3, r3
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d022      	beq.n	801fd64 <ip4_route+0x78>
 801fd1e:	68fb      	ldr	r3, [r7, #12]
 801fd20:	3304      	adds	r3, #4
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d01d      	beq.n	801fd64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	681a      	ldr	r2, [r3, #0]
 801fd2c:	68fb      	ldr	r3, [r7, #12]
 801fd2e:	3304      	adds	r3, #4
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	405a      	eors	r2, r3
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	3308      	adds	r3, #8
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	4013      	ands	r3, r2
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d101      	bne.n	801fd44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	e042      	b.n	801fdca <ip4_route+0xde>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801fd44:	68fb      	ldr	r3, [r7, #12]
 801fd46:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd4a:	f003 0302 	and.w	r3, r3, #2
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d108      	bne.n	801fd64 <ip4_route+0x78>
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	681a      	ldr	r2, [r3, #0]
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	330c      	adds	r3, #12
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	429a      	cmp	r2, r3
 801fd5e:	d101      	bne.n	801fd64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	e032      	b.n	801fdca <ip4_route+0xde>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801fd64:	68fb      	ldr	r3, [r7, #12]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	60fb      	str	r3, [r7, #12]
 801fd6a:	68fb      	ldr	r3, [r7, #12]
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d1c5      	bne.n	801fcfc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fd70:	4b19      	ldr	r3, [pc, #100]	@ (801fdd8 <ip4_route+0xec>)
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d015      	beq.n	801fda4 <ip4_route+0xb8>
 801fd78:	4b17      	ldr	r3, [pc, #92]	@ (801fdd8 <ip4_route+0xec>)
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd80:	f003 0301 	and.w	r3, r3, #1
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d00d      	beq.n	801fda4 <ip4_route+0xb8>
 801fd88:	4b13      	ldr	r3, [pc, #76]	@ (801fdd8 <ip4_route+0xec>)
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fd90:	f003 0304 	and.w	r3, r3, #4
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d005      	beq.n	801fda4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801fd98:	4b0f      	ldr	r3, [pc, #60]	@ (801fdd8 <ip4_route+0xec>)
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	3304      	adds	r3, #4
 801fd9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d110      	bne.n	801fdc6 <ip4_route+0xda>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801fda4:	4b0d      	ldr	r3, [pc, #52]	@ (801fddc <ip4_route+0xf0>)
 801fda6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801fdaa:	3301      	adds	r3, #1
 801fdac:	b29a      	uxth	r2, r3
 801fdae:	4b0b      	ldr	r3, [pc, #44]	@ (801fddc <ip4_route+0xf0>)
 801fdb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801fdb4:	4b09      	ldr	r3, [pc, #36]	@ (801fddc <ip4_route+0xf0>)
 801fdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801fdba:	3301      	adds	r3, #1
 801fdbc:	4a07      	ldr	r2, [pc, #28]	@ (801fddc <ip4_route+0xf0>)
 801fdbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    return NULL;
 801fdc2:	2300      	movs	r3, #0
 801fdc4:	e001      	b.n	801fdca <ip4_route+0xde>
  }

  return netif_default;
 801fdc6:	4b04      	ldr	r3, [pc, #16]	@ (801fdd8 <ip4_route+0xec>)
 801fdc8:	681b      	ldr	r3, [r3, #0]
}
 801fdca:	4618      	mov	r0, r3
 801fdcc:	3714      	adds	r7, #20
 801fdce:	46bd      	mov	sp, r7
 801fdd0:	bc80      	pop	{r7}
 801fdd2:	4770      	bx	lr
 801fdd4:	2000bbe0 	.word	0x2000bbe0
 801fdd8:	2000bbe4 	.word	0x2000bbe4
 801fddc:	2000bbec 	.word	0x2000bbec

0801fde0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801fde0:	b580      	push	{r7, lr}
 801fde2:	b088      	sub	sp, #32
 801fde4:	af00      	add	r7, sp, #0
 801fde6:	6078      	str	r0, [r7, #4]
 801fde8:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801fdea:	2301      	movs	r3, #1
 801fdec:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801fdee:	4b9d      	ldr	r3, [pc, #628]	@ (8020064 <ip4_input+0x284>)
 801fdf0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801fdf4:	3301      	adds	r3, #1
 801fdf6:	b29a      	uxth	r2, r3
 801fdf8:	4b9a      	ldr	r3, [pc, #616]	@ (8020064 <ip4_input+0x284>)
 801fdfa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801fdfe:	4b99      	ldr	r3, [pc, #612]	@ (8020064 <ip4_input+0x284>)
 801fe00:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801fe04:	3301      	adds	r3, #1
 801fe06:	4a97      	ldr	r2, [pc, #604]	@ (8020064 <ip4_input+0x284>)
 801fe08:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	685b      	ldr	r3, [r3, #4]
 801fe10:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801fe12:	69fb      	ldr	r3, [r7, #28]
 801fe14:	781b      	ldrb	r3, [r3, #0]
 801fe16:	091b      	lsrs	r3, r3, #4
 801fe18:	b2db      	uxtb	r3, r3
 801fe1a:	2b04      	cmp	r3, #4
 801fe1c:	d01b      	beq.n	801fe56 <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801fe1e:	6878      	ldr	r0, [r7, #4]
 801fe20:	f7f6 f9f6 	bl	8016210 <pbuf_free>
    IP_STATS_INC(ip.err);
 801fe24:	4b8f      	ldr	r3, [pc, #572]	@ (8020064 <ip4_input+0x284>)
 801fe26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801fe2a:	3301      	adds	r3, #1
 801fe2c:	b29a      	uxth	r2, r3
 801fe2e:	4b8d      	ldr	r3, [pc, #564]	@ (8020064 <ip4_input+0x284>)
 801fe30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801fe34:	4b8b      	ldr	r3, [pc, #556]	@ (8020064 <ip4_input+0x284>)
 801fe36:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fe3a:	3301      	adds	r3, #1
 801fe3c:	b29a      	uxth	r2, r3
 801fe3e:	4b89      	ldr	r3, [pc, #548]	@ (8020064 <ip4_input+0x284>)
 801fe40:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801fe44:	4b87      	ldr	r3, [pc, #540]	@ (8020064 <ip4_input+0x284>)
 801fe46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801fe4a:	3301      	adds	r3, #1
 801fe4c:	4a85      	ldr	r2, [pc, #532]	@ (8020064 <ip4_input+0x284>)
 801fe4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    return ERR_OK;
 801fe52:	2300      	movs	r3, #0
 801fe54:	e1b3      	b.n	80201be <ip4_input+0x3de>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801fe56:	69fb      	ldr	r3, [r7, #28]
 801fe58:	781b      	ldrb	r3, [r3, #0]
 801fe5a:	f003 030f 	and.w	r3, r3, #15
 801fe5e:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801fe60:	89fb      	ldrh	r3, [r7, #14]
 801fe62:	009b      	lsls	r3, r3, #2
 801fe64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fe66:	69fb      	ldr	r3, [r7, #28]
 801fe68:	885b      	ldrh	r3, [r3, #2]
 801fe6a:	b29b      	uxth	r3, r3
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	f7f4 ff29 	bl	8014cc4 <lwip_htons>
 801fe72:	4603      	mov	r3, r0
 801fe74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	891b      	ldrh	r3, [r3, #8]
 801fe7a:	89ba      	ldrh	r2, [r7, #12]
 801fe7c:	429a      	cmp	r2, r3
 801fe7e:	d204      	bcs.n	801fe8a <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801fe80:	89bb      	ldrh	r3, [r7, #12]
 801fe82:	4619      	mov	r1, r3
 801fe84:	6878      	ldr	r0, [r7, #4]
 801fe86:	f7f6 f84f 	bl	8015f28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	895b      	ldrh	r3, [r3, #10]
 801fe8e:	89fa      	ldrh	r2, [r7, #14]
 801fe90:	429a      	cmp	r2, r3
 801fe92:	d807      	bhi.n	801fea4 <ip4_input+0xc4>
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	891b      	ldrh	r3, [r3, #8]
 801fe98:	89ba      	ldrh	r2, [r7, #12]
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	d802      	bhi.n	801fea4 <ip4_input+0xc4>
 801fe9e:	89fb      	ldrh	r3, [r7, #14]
 801fea0:	2b13      	cmp	r3, #19
 801fea2:	d81b      	bhi.n	801fedc <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801fea4:	6878      	ldr	r0, [r7, #4]
 801fea6:	f7f6 f9b3 	bl	8016210 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801feaa:	4b6e      	ldr	r3, [pc, #440]	@ (8020064 <ip4_input+0x284>)
 801feac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801feb0:	3301      	adds	r3, #1
 801feb2:	b29a      	uxth	r2, r3
 801feb4:	4b6b      	ldr	r3, [pc, #428]	@ (8020064 <ip4_input+0x284>)
 801feb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801feba:	4b6a      	ldr	r3, [pc, #424]	@ (8020064 <ip4_input+0x284>)
 801febc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fec0:	3301      	adds	r3, #1
 801fec2:	b29a      	uxth	r2, r3
 801fec4:	4b67      	ldr	r3, [pc, #412]	@ (8020064 <ip4_input+0x284>)
 801fec6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801feca:	4b66      	ldr	r3, [pc, #408]	@ (8020064 <ip4_input+0x284>)
 801fecc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fed0:	3301      	adds	r3, #1
 801fed2:	4a64      	ldr	r2, [pc, #400]	@ (8020064 <ip4_input+0x284>)
 801fed4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    return ERR_OK;
 801fed8:	2300      	movs	r3, #0
 801feda:	e170      	b.n	80201be <ip4_input+0x3de>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801fedc:	69fb      	ldr	r3, [r7, #28]
 801fede:	691b      	ldr	r3, [r3, #16]
 801fee0:	4a61      	ldr	r2, [pc, #388]	@ (8020068 <ip4_input+0x288>)
 801fee2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801fee4:	69fb      	ldr	r3, [r7, #28]
 801fee6:	68db      	ldr	r3, [r3, #12]
 801fee8:	4a5f      	ldr	r2, [pc, #380]	@ (8020068 <ip4_input+0x288>)
 801feea:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801feec:	4b5e      	ldr	r3, [pc, #376]	@ (8020068 <ip4_input+0x288>)
 801feee:	695b      	ldr	r3, [r3, #20]
 801fef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801fef4:	2be0      	cmp	r3, #224	@ 0xe0
 801fef6:	d112      	bne.n	801ff1e <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801fef8:	683b      	ldr	r3, [r7, #0]
 801fefa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fefe:	f003 0301 	and.w	r3, r3, #1
 801ff02:	b2db      	uxtb	r3, r3
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d007      	beq.n	801ff18 <ip4_input+0x138>
 801ff08:	683b      	ldr	r3, [r7, #0]
 801ff0a:	3304      	adds	r3, #4
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d002      	beq.n	801ff18 <ip4_input+0x138>
      netif = inp;
 801ff12:	683b      	ldr	r3, [r7, #0]
 801ff14:	61bb      	str	r3, [r7, #24]
 801ff16:	e041      	b.n	801ff9c <ip4_input+0x1bc>
    } else {
      netif = NULL;
 801ff18:	2300      	movs	r3, #0
 801ff1a:	61bb      	str	r3, [r7, #24]
 801ff1c:	e03e      	b.n	801ff9c <ip4_input+0x1bc>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801ff1e:	2301      	movs	r3, #1
 801ff20:	613b      	str	r3, [r7, #16]
    netif = inp;
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ff26:	69bb      	ldr	r3, [r7, #24]
 801ff28:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801ff2c:	f003 0301 	and.w	r3, r3, #1
 801ff30:	b2db      	uxtb	r3, r3
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d014      	beq.n	801ff60 <ip4_input+0x180>
 801ff36:	69bb      	ldr	r3, [r7, #24]
 801ff38:	3304      	adds	r3, #4
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	d00f      	beq.n	801ff60 <ip4_input+0x180>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ff40:	4b49      	ldr	r3, [pc, #292]	@ (8020068 <ip4_input+0x288>)
 801ff42:	695a      	ldr	r2, [r3, #20]
 801ff44:	69bb      	ldr	r3, [r7, #24]
 801ff46:	3304      	adds	r3, #4
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	429a      	cmp	r2, r3
 801ff4c:	d026      	beq.n	801ff9c <ip4_input+0x1bc>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ff4e:	4b46      	ldr	r3, [pc, #280]	@ (8020068 <ip4_input+0x288>)
 801ff50:	695b      	ldr	r3, [r3, #20]
 801ff52:	69b9      	ldr	r1, [r7, #24]
 801ff54:	4618      	mov	r0, r3
 801ff56:	f000 fa2d 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801ff5a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d11d      	bne.n	801ff9c <ip4_input+0x1bc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801ff60:	693b      	ldr	r3, [r7, #16]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d00d      	beq.n	801ff82 <ip4_input+0x1a2>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801ff66:	4b40      	ldr	r3, [pc, #256]	@ (8020068 <ip4_input+0x288>)
 801ff68:	695b      	ldr	r3, [r3, #20]
 801ff6a:	b2db      	uxtb	r3, r3
 801ff6c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ff6e:	d102      	bne.n	801ff76 <ip4_input+0x196>
          netif = NULL;
 801ff70:	2300      	movs	r3, #0
 801ff72:	61bb      	str	r3, [r7, #24]
          break;
 801ff74:	e012      	b.n	801ff9c <ip4_input+0x1bc>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801ff76:	2300      	movs	r3, #0
 801ff78:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 801ff7a:	4b3c      	ldr	r3, [pc, #240]	@ (802006c <ip4_input+0x28c>)
 801ff7c:	681b      	ldr	r3, [r3, #0]
 801ff7e:	61bb      	str	r3, [r7, #24]
 801ff80:	e002      	b.n	801ff88 <ip4_input+0x1a8>
      } else {
        netif = netif->next;
 801ff82:	69bb      	ldr	r3, [r7, #24]
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801ff88:	69ba      	ldr	r2, [r7, #24]
 801ff8a:	683b      	ldr	r3, [r7, #0]
 801ff8c:	429a      	cmp	r2, r3
 801ff8e:	d102      	bne.n	801ff96 <ip4_input+0x1b6>
        netif = netif->next;
 801ff90:	69bb      	ldr	r3, [r7, #24]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801ff96:	69bb      	ldr	r3, [r7, #24]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d1c4      	bne.n	801ff26 <ip4_input+0x146>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ff9c:	69bb      	ldr	r3, [r7, #24]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d111      	bne.n	801ffc6 <ip4_input+0x1e6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ffa2:	69fb      	ldr	r3, [r7, #28]
 801ffa4:	7a5b      	ldrb	r3, [r3, #9]
 801ffa6:	2b11      	cmp	r3, #17
 801ffa8:	d10d      	bne.n	801ffc6 <ip4_input+0x1e6>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801ffaa:	89fb      	ldrh	r3, [r7, #14]
 801ffac:	69fa      	ldr	r2, [r7, #28]
 801ffae:	4413      	add	r3, r2
 801ffb0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ffb2:	68bb      	ldr	r3, [r7, #8]
 801ffb4:	885b      	ldrh	r3, [r3, #2]
 801ffb6:	b29b      	uxth	r3, r3
 801ffb8:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801ffbc:	d103      	bne.n	801ffc6 <ip4_input+0x1e6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ffbe:	683b      	ldr	r3, [r7, #0]
 801ffc0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ffc6:	697b      	ldr	r3, [r7, #20]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d02d      	beq.n	8020028 <ip4_input+0x248>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ffcc:	4b26      	ldr	r3, [pc, #152]	@ (8020068 <ip4_input+0x288>)
 801ffce:	691b      	ldr	r3, [r3, #16]
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d029      	beq.n	8020028 <ip4_input+0x248>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ffd4:	4b24      	ldr	r3, [pc, #144]	@ (8020068 <ip4_input+0x288>)
 801ffd6:	691b      	ldr	r3, [r3, #16]
 801ffd8:	6839      	ldr	r1, [r7, #0]
 801ffda:	4618      	mov	r0, r3
 801ffdc:	f000 f9ea 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d105      	bne.n	801fff2 <ip4_input+0x212>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ffe6:	4b20      	ldr	r3, [pc, #128]	@ (8020068 <ip4_input+0x288>)
 801ffe8:	691b      	ldr	r3, [r3, #16]
 801ffea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ffee:	2be0      	cmp	r3, #224	@ 0xe0
 801fff0:	d11a      	bne.n	8020028 <ip4_input+0x248>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801fff2:	6878      	ldr	r0, [r7, #4]
 801fff4:	f7f6 f90c 	bl	8016210 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801fff8:	4b1a      	ldr	r3, [pc, #104]	@ (8020064 <ip4_input+0x284>)
 801fffa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fffe:	3301      	adds	r3, #1
 8020000:	b29a      	uxth	r2, r3
 8020002:	4b18      	ldr	r3, [pc, #96]	@ (8020064 <ip4_input+0x284>)
 8020004:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8020008:	4b16      	ldr	r3, [pc, #88]	@ (8020064 <ip4_input+0x284>)
 802000a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 802000e:	3301      	adds	r3, #1
 8020010:	4a14      	ldr	r2, [pc, #80]	@ (8020064 <ip4_input+0x284>)
 8020012:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 8020016:	4b13      	ldr	r3, [pc, #76]	@ (8020064 <ip4_input+0x284>)
 8020018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 802001c:	3301      	adds	r3, #1
 802001e:	4a11      	ldr	r2, [pc, #68]	@ (8020064 <ip4_input+0x284>)
 8020020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      return ERR_OK;
 8020024:	2300      	movs	r3, #0
 8020026:	e0ca      	b.n	80201be <ip4_input+0x3de>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8020028:	69bb      	ldr	r3, [r7, #24]
 802002a:	2b00      	cmp	r3, #0
 802002c:	d120      	bne.n	8020070 <ip4_input+0x290>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 802002e:	4b0d      	ldr	r3, [pc, #52]	@ (8020064 <ip4_input+0x284>)
 8020030:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8020034:	3301      	adds	r3, #1
 8020036:	b29a      	uxth	r2, r3
 8020038:	4b0a      	ldr	r3, [pc, #40]	@ (8020064 <ip4_input+0x284>)
 802003a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 802003e:	4b09      	ldr	r3, [pc, #36]	@ (8020064 <ip4_input+0x284>)
 8020040:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8020044:	3301      	adds	r3, #1
 8020046:	4a07      	ldr	r2, [pc, #28]	@ (8020064 <ip4_input+0x284>)
 8020048:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 802004c:	4b05      	ldr	r3, [pc, #20]	@ (8020064 <ip4_input+0x284>)
 802004e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020052:	3301      	adds	r3, #1
 8020054:	4a03      	ldr	r2, [pc, #12]	@ (8020064 <ip4_input+0x284>)
 8020056:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    }
    pbuf_free(p);
 802005a:	6878      	ldr	r0, [r7, #4]
 802005c:	f7f6 f8d8 	bl	8016210 <pbuf_free>
    return ERR_OK;
 8020060:	2300      	movs	r3, #0
 8020062:	e0ac      	b.n	80201be <ip4_input+0x3de>
 8020064:	2000bbec 	.word	0x2000bbec
 8020068:	20008604 	.word	0x20008604
 802006c:	2000bbe0 	.word	0x2000bbe0
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020070:	69fb      	ldr	r3, [r7, #28]
 8020072:	88db      	ldrh	r3, [r3, #6]
 8020074:	b29b      	uxth	r3, r3
 8020076:	461a      	mov	r2, r3
 8020078:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 802007c:	4013      	ands	r3, r2
 802007e:	2b00      	cmp	r3, #0
 8020080:	d00b      	beq.n	802009a <ip4_input+0x2ba>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8020082:	6878      	ldr	r0, [r7, #4]
 8020084:	f000 fed0 	bl	8020e28 <ip4_reass>
 8020088:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	2b00      	cmp	r3, #0
 802008e:	d101      	bne.n	8020094 <ip4_input+0x2b4>
      return ERR_OK;
 8020090:	2300      	movs	r3, #0
 8020092:	e094      	b.n	80201be <ip4_input+0x3de>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	685b      	ldr	r3, [r3, #4]
 8020098:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802009a:	4a4b      	ldr	r2, [pc, #300]	@ (80201c8 <ip4_input+0x3e8>)
 802009c:	69bb      	ldr	r3, [r7, #24]
 802009e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80200a0:	4a49      	ldr	r2, [pc, #292]	@ (80201c8 <ip4_input+0x3e8>)
 80200a2:	683b      	ldr	r3, [r7, #0]
 80200a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80200a6:	4a48      	ldr	r2, [pc, #288]	@ (80201c8 <ip4_input+0x3e8>)
 80200a8:	69fb      	ldr	r3, [r7, #28]
 80200aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80200ac:	69fb      	ldr	r3, [r7, #28]
 80200ae:	781b      	ldrb	r3, [r3, #0]
 80200b0:	f003 030f 	and.w	r3, r3, #15
 80200b4:	b29b      	uxth	r3, r3
 80200b6:	009b      	lsls	r3, r3, #2
 80200b8:	b29a      	uxth	r2, r3
 80200ba:	4b43      	ldr	r3, [pc, #268]	@ (80201c8 <ip4_input+0x3e8>)
 80200bc:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80200be:	89fb      	ldrh	r3, [r7, #14]
 80200c0:	425b      	negs	r3, r3
 80200c2:	b29b      	uxth	r3, r3
 80200c4:	b21b      	sxth	r3, r3
 80200c6:	4619      	mov	r1, r3
 80200c8:	6878      	ldr	r0, [r7, #4]
 80200ca:	f7f6 f87d 	bl	80161c8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80200ce:	69fb      	ldr	r3, [r7, #28]
 80200d0:	7a5b      	ldrb	r3, [r3, #9]
 80200d2:	2b11      	cmp	r3, #17
 80200d4:	d006      	beq.n	80200e4 <ip4_input+0x304>
 80200d6:	2b11      	cmp	r3, #17
 80200d8:	dc28      	bgt.n	802012c <ip4_input+0x34c>
 80200da:	2b01      	cmp	r3, #1
 80200dc:	d01a      	beq.n	8020114 <ip4_input+0x334>
 80200de:	2b06      	cmp	r3, #6
 80200e0:	d00c      	beq.n	80200fc <ip4_input+0x31c>
 80200e2:	e023      	b.n	802012c <ip4_input+0x34c>
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
 80200e4:	4b39      	ldr	r3, [pc, #228]	@ (80201cc <ip4_input+0x3ec>)
 80200e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80200ea:	3301      	adds	r3, #1
 80200ec:	4a37      	ldr	r2, [pc, #220]	@ (80201cc <ip4_input+0x3ec>)
 80200ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      udp_input(p, inp);
 80200f2:	6839      	ldr	r1, [r7, #0]
 80200f4:	6878      	ldr	r0, [r7, #4]
 80200f6:	f7fc f911 	bl	801c31c <udp_input>
      break;
 80200fa:	e04d      	b.n	8020198 <ip4_input+0x3b8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
 80200fc:	4b33      	ldr	r3, [pc, #204]	@ (80201cc <ip4_input+0x3ec>)
 80200fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020102:	3301      	adds	r3, #1
 8020104:	4a31      	ldr	r2, [pc, #196]	@ (80201cc <ip4_input+0x3ec>)
 8020106:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      tcp_input(p, inp);
 802010a:	6839      	ldr	r1, [r7, #0]
 802010c:	6878      	ldr	r0, [r7, #4]
 802010e:	f7f8 f895 	bl	801823c <tcp_input>
      break;
 8020112:	e041      	b.n	8020198 <ip4_input+0x3b8>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
 8020114:	4b2d      	ldr	r3, [pc, #180]	@ (80201cc <ip4_input+0x3ec>)
 8020116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 802011a:	3301      	adds	r3, #1
 802011c:	4a2b      	ldr	r2, [pc, #172]	@ (80201cc <ip4_input+0x3ec>)
 802011e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      icmp_input(p, inp);
 8020122:	6839      	ldr	r1, [r7, #0]
 8020124:	6878      	ldr	r0, [r7, #4]
 8020126:	f7ff fb57 	bl	801f7d8 <icmp_input>
      break;
 802012a:	e035      	b.n	8020198 <ip4_input+0x3b8>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802012c:	4b26      	ldr	r3, [pc, #152]	@ (80201c8 <ip4_input+0x3e8>)
 802012e:	695b      	ldr	r3, [r3, #20]
 8020130:	69b9      	ldr	r1, [r7, #24]
 8020132:	4618      	mov	r0, r3
 8020134:	f000 f93e 	bl	80203b4 <ip4_addr_isbroadcast_u32>
 8020138:	4603      	mov	r3, r0
 802013a:	2b00      	cmp	r3, #0
 802013c:	d112      	bne.n	8020164 <ip4_input+0x384>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802013e:	4b22      	ldr	r3, [pc, #136]	@ (80201c8 <ip4_input+0x3e8>)
 8020140:	695b      	ldr	r3, [r3, #20]
 8020142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020146:	2be0      	cmp	r3, #224	@ 0xe0
 8020148:	d00c      	beq.n	8020164 <ip4_input+0x384>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 802014a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802014e:	4619      	mov	r1, r3
 8020150:	6878      	ldr	r0, [r7, #4]
 8020152:	f7f6 f84b 	bl	80161ec <pbuf_header_force>
        p->payload = iphdr;
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	69fa      	ldr	r2, [r7, #28]
 802015a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802015c:	2102      	movs	r1, #2
 802015e:	6878      	ldr	r0, [r7, #4]
 8020160:	f7ff fd10 	bl	801fb84 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8020164:	6878      	ldr	r0, [r7, #4]
 8020166:	f7f6 f853 	bl	8016210 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 802016a:	4b18      	ldr	r3, [pc, #96]	@ (80201cc <ip4_input+0x3ec>)
 802016c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8020170:	3301      	adds	r3, #1
 8020172:	b29a      	uxth	r2, r3
 8020174:	4b15      	ldr	r3, [pc, #84]	@ (80201cc <ip4_input+0x3ec>)
 8020176:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      IP_STATS_INC(ip.drop);
 802017a:	4b14      	ldr	r3, [pc, #80]	@ (80201cc <ip4_input+0x3ec>)
 802017c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8020180:	3301      	adds	r3, #1
 8020182:	b29a      	uxth	r2, r3
 8020184:	4b11      	ldr	r3, [pc, #68]	@ (80201cc <ip4_input+0x3ec>)
 8020186:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
 802018a:	4b10      	ldr	r3, [pc, #64]	@ (80201cc <ip4_input+0x3ec>)
 802018c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020190:	3301      	adds	r3, #1
 8020192:	4a0e      	ldr	r2, [pc, #56]	@ (80201cc <ip4_input+0x3ec>)
 8020194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8020198:	4b0b      	ldr	r3, [pc, #44]	@ (80201c8 <ip4_input+0x3e8>)
 802019a:	2200      	movs	r2, #0
 802019c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802019e:	4b0a      	ldr	r3, [pc, #40]	@ (80201c8 <ip4_input+0x3e8>)
 80201a0:	2200      	movs	r2, #0
 80201a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80201a4:	4b08      	ldr	r3, [pc, #32]	@ (80201c8 <ip4_input+0x3e8>)
 80201a6:	2200      	movs	r2, #0
 80201a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80201aa:	4b07      	ldr	r3, [pc, #28]	@ (80201c8 <ip4_input+0x3e8>)
 80201ac:	2200      	movs	r2, #0
 80201ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80201b0:	4b05      	ldr	r3, [pc, #20]	@ (80201c8 <ip4_input+0x3e8>)
 80201b2:	2200      	movs	r2, #0
 80201b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80201b6:	4b04      	ldr	r3, [pc, #16]	@ (80201c8 <ip4_input+0x3e8>)
 80201b8:	2200      	movs	r2, #0
 80201ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80201bc:	2300      	movs	r3, #0
}
 80201be:	4618      	mov	r0, r3
 80201c0:	3720      	adds	r7, #32
 80201c2:	46bd      	mov	sp, r7
 80201c4:	bd80      	pop	{r7, pc}
 80201c6:	bf00      	nop
 80201c8:	20008604 	.word	0x20008604
 80201cc:	2000bbec 	.word	0x2000bbec

080201d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b08a      	sub	sp, #40	@ 0x28
 80201d4:	af04      	add	r7, sp, #16
 80201d6:	60f8      	str	r0, [r7, #12]
 80201d8:	60b9      	str	r1, [r7, #8]
 80201da:	607a      	str	r2, [r7, #4]
 80201dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80201de:	68bb      	ldr	r3, [r7, #8]
 80201e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d009      	beq.n	80201fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80201e8:	68bb      	ldr	r3, [r7, #8]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d003      	beq.n	80201f6 <ip4_output_if+0x26>
 80201ee:	68bb      	ldr	r3, [r7, #8]
 80201f0:	681b      	ldr	r3, [r3, #0]
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d102      	bne.n	80201fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80201f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201f8:	3304      	adds	r3, #4
 80201fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80201fc:	78fa      	ldrb	r2, [r7, #3]
 80201fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020200:	9302      	str	r3, [sp, #8]
 8020202:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8020206:	9301      	str	r3, [sp, #4]
 8020208:	f897 3020 	ldrb.w	r3, [r7, #32]
 802020c:	9300      	str	r3, [sp, #0]
 802020e:	4613      	mov	r3, r2
 8020210:	687a      	ldr	r2, [r7, #4]
 8020212:	6979      	ldr	r1, [r7, #20]
 8020214:	68f8      	ldr	r0, [r7, #12]
 8020216:	f000 f805 	bl	8020224 <ip4_output_if_src>
 802021a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 802021c:	4618      	mov	r0, r3
 802021e:	3718      	adds	r7, #24
 8020220:	46bd      	mov	sp, r7
 8020222:	bd80      	pop	{r7, pc}

08020224 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8020224:	b580      	push	{r7, lr}
 8020226:	b088      	sub	sp, #32
 8020228:	af00      	add	r7, sp, #0
 802022a:	60f8      	str	r0, [r7, #12]
 802022c:	60b9      	str	r1, [r7, #8]
 802022e:	607a      	str	r2, [r7, #4]
 8020230:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	89db      	ldrh	r3, [r3, #14]
 8020236:	2b01      	cmp	r3, #1
 8020238:	d006      	beq.n	8020248 <ip4_output_if_src+0x24>
 802023a:	4b57      	ldr	r3, [pc, #348]	@ (8020398 <ip4_output_if_src+0x174>)
 802023c:	f240 3233 	movw	r2, #819	@ 0x333
 8020240:	4956      	ldr	r1, [pc, #344]	@ (802039c <ip4_output_if_src+0x178>)
 8020242:	4857      	ldr	r0, [pc, #348]	@ (80203a0 <ip4_output_if_src+0x17c>)
 8020244:	f002 f802 	bl	802224c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 8020248:	4b56      	ldr	r3, [pc, #344]	@ (80203a4 <ip4_output_if_src+0x180>)
 802024a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 802024e:	3301      	adds	r3, #1
 8020250:	4a54      	ldr	r2, [pc, #336]	@ (80203a4 <ip4_output_if_src+0x180>)
 8020252:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d06f      	beq.n	802033c <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 802025c:	2314      	movs	r3, #20
 802025e:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8020260:	2114      	movs	r1, #20
 8020262:	68f8      	ldr	r0, [r7, #12]
 8020264:	f7f5 ffb0 	bl	80161c8 <pbuf_header>
 8020268:	4603      	mov	r3, r0
 802026a:	2b00      	cmp	r3, #0
 802026c:	d011      	beq.n	8020292 <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 802026e:	4b4d      	ldr	r3, [pc, #308]	@ (80203a4 <ip4_output_if_src+0x180>)
 8020270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8020274:	3301      	adds	r3, #1
 8020276:	b29a      	uxth	r2, r3
 8020278:	4b4a      	ldr	r3, [pc, #296]	@ (80203a4 <ip4_output_if_src+0x180>)
 802027a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 802027e:	4b49      	ldr	r3, [pc, #292]	@ (80203a4 <ip4_output_if_src+0x180>)
 8020280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020284:	3301      	adds	r3, #1
 8020286:	4a47      	ldr	r2, [pc, #284]	@ (80203a4 <ip4_output_if_src+0x180>)
 8020288:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      return ERR_BUF;
 802028c:	f06f 0301 	mvn.w	r3, #1
 8020290:	e07d      	b.n	802038e <ip4_output_if_src+0x16a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	685b      	ldr	r3, [r3, #4]
 8020296:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020298:	68fb      	ldr	r3, [r7, #12]
 802029a:	895b      	ldrh	r3, [r3, #10]
 802029c:	2b13      	cmp	r3, #19
 802029e:	d806      	bhi.n	80202ae <ip4_output_if_src+0x8a>
 80202a0:	4b3d      	ldr	r3, [pc, #244]	@ (8020398 <ip4_output_if_src+0x174>)
 80202a2:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80202a6:	4940      	ldr	r1, [pc, #256]	@ (80203a8 <ip4_output_if_src+0x184>)
 80202a8:	483d      	ldr	r0, [pc, #244]	@ (80203a0 <ip4_output_if_src+0x17c>)
 80202aa:	f001 ffcf 	bl	802224c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80202ae:	69fb      	ldr	r3, [r7, #28]
 80202b0:	78fa      	ldrb	r2, [r7, #3]
 80202b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80202b4:	69fb      	ldr	r3, [r7, #28]
 80202b6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80202ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	681a      	ldr	r2, [r3, #0]
 80202c0:	69fb      	ldr	r3, [r7, #28]
 80202c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80202c4:	8b7b      	ldrh	r3, [r7, #26]
 80202c6:	089b      	lsrs	r3, r3, #2
 80202c8:	b29b      	uxth	r3, r3
 80202ca:	b2db      	uxtb	r3, r3
 80202cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80202d0:	b2da      	uxtb	r2, r3
 80202d2:	69fb      	ldr	r3, [r7, #28]
 80202d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80202d6:	69fb      	ldr	r3, [r7, #28]
 80202d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80202dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80202de:	68fb      	ldr	r3, [r7, #12]
 80202e0:	891b      	ldrh	r3, [r3, #8]
 80202e2:	4618      	mov	r0, r3
 80202e4:	f7f4 fcee 	bl	8014cc4 <lwip_htons>
 80202e8:	4603      	mov	r3, r0
 80202ea:	461a      	mov	r2, r3
 80202ec:	69fb      	ldr	r3, [r7, #28]
 80202ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80202f0:	69fb      	ldr	r3, [r7, #28]
 80202f2:	2200      	movs	r2, #0
 80202f4:	719a      	strb	r2, [r3, #6]
 80202f6:	2200      	movs	r2, #0
 80202f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80202fa:	4b2c      	ldr	r3, [pc, #176]	@ (80203ac <ip4_output_if_src+0x188>)
 80202fc:	881b      	ldrh	r3, [r3, #0]
 80202fe:	4618      	mov	r0, r3
 8020300:	f7f4 fce0 	bl	8014cc4 <lwip_htons>
 8020304:	4603      	mov	r3, r0
 8020306:	461a      	mov	r2, r3
 8020308:	69fb      	ldr	r3, [r7, #28]
 802030a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802030c:	4b27      	ldr	r3, [pc, #156]	@ (80203ac <ip4_output_if_src+0x188>)
 802030e:	881b      	ldrh	r3, [r3, #0]
 8020310:	3301      	adds	r3, #1
 8020312:	b29a      	uxth	r2, r3
 8020314:	4b25      	ldr	r3, [pc, #148]	@ (80203ac <ip4_output_if_src+0x188>)
 8020316:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020318:	68bb      	ldr	r3, [r7, #8]
 802031a:	2b00      	cmp	r3, #0
 802031c:	d104      	bne.n	8020328 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802031e:	4b24      	ldr	r3, [pc, #144]	@ (80203b0 <ip4_output_if_src+0x18c>)
 8020320:	681a      	ldr	r2, [r3, #0]
 8020322:	69fb      	ldr	r3, [r7, #28]
 8020324:	60da      	str	r2, [r3, #12]
 8020326:	e003      	b.n	8020330 <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020328:	68bb      	ldr	r3, [r7, #8]
 802032a:	681a      	ldr	r2, [r3, #0]
 802032c:	69fb      	ldr	r3, [r7, #28]
 802032e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020330:	69fb      	ldr	r3, [r7, #28]
 8020332:	2200      	movs	r2, #0
 8020334:	729a      	strb	r2, [r3, #10]
 8020336:	2200      	movs	r2, #0
 8020338:	72da      	strb	r2, [r3, #11]
 802033a:	e008      	b.n	802034e <ip4_output_if_src+0x12a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	685b      	ldr	r3, [r3, #4]
 8020340:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020342:	69fb      	ldr	r3, [r7, #28]
 8020344:	691b      	ldr	r3, [r3, #16]
 8020346:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8020348:	f107 0314 	add.w	r3, r7, #20
 802034c:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 802034e:	4b15      	ldr	r3, [pc, #84]	@ (80203a4 <ip4_output_if_src+0x180>)
 8020350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8020354:	3301      	adds	r3, #1
 8020356:	b29a      	uxth	r2, r3
 8020358:	4b12      	ldr	r3, [pc, #72]	@ (80203a4 <ip4_output_if_src+0x180>)
 802035a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802035e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020362:	2b00      	cmp	r3, #0
 8020364:	d00c      	beq.n	8020380 <ip4_output_if_src+0x15c>
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	891a      	ldrh	r2, [r3, #8]
 802036a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802036c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802036e:	429a      	cmp	r2, r3
 8020370:	d906      	bls.n	8020380 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 8020372:	687a      	ldr	r2, [r7, #4]
 8020374:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8020376:	68f8      	ldr	r0, [r7, #12]
 8020378:	f000 ff30 	bl	80211dc <ip4_frag>
 802037c:	4603      	mov	r3, r0
 802037e:	e006      	b.n	802038e <ip4_output_if_src+0x16a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020382:	695b      	ldr	r3, [r3, #20]
 8020384:	687a      	ldr	r2, [r7, #4]
 8020386:	68f9      	ldr	r1, [r7, #12]
 8020388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802038a:	4798      	blx	r3
 802038c:	4603      	mov	r3, r0
}
 802038e:	4618      	mov	r0, r3
 8020390:	3720      	adds	r7, #32
 8020392:	46bd      	mov	sp, r7
 8020394:	bd80      	pop	{r7, pc}
 8020396:	bf00      	nop
 8020398:	08027bfc 	.word	0x08027bfc
 802039c:	08027c30 	.word	0x08027c30
 80203a0:	08027c3c 	.word	0x08027c3c
 80203a4:	2000bbec 	.word	0x2000bbec
 80203a8:	08027c64 	.word	0x08027c64
 80203ac:	2000bf0a 	.word	0x2000bf0a
 80203b0:	08032ed0 	.word	0x08032ed0

080203b4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80203b4:	b480      	push	{r7}
 80203b6:	b085      	sub	sp, #20
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
 80203bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203c8:	d002      	beq.n	80203d0 <ip4_addr_isbroadcast_u32+0x1c>
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d101      	bne.n	80203d4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80203d0:	2301      	movs	r3, #1
 80203d2:	e02a      	b.n	802042a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80203d4:	683b      	ldr	r3, [r7, #0]
 80203d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80203da:	f003 0302 	and.w	r3, r3, #2
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d101      	bne.n	80203e6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80203e2:	2300      	movs	r3, #0
 80203e4:	e021      	b.n	802042a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80203e6:	683b      	ldr	r3, [r7, #0]
 80203e8:	3304      	adds	r3, #4
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	687a      	ldr	r2, [r7, #4]
 80203ee:	429a      	cmp	r2, r3
 80203f0:	d101      	bne.n	80203f6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80203f2:	2300      	movs	r3, #0
 80203f4:	e019      	b.n	802042a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80203f6:	68fa      	ldr	r2, [r7, #12]
 80203f8:	683b      	ldr	r3, [r7, #0]
 80203fa:	3304      	adds	r3, #4
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	405a      	eors	r2, r3
 8020400:	683b      	ldr	r3, [r7, #0]
 8020402:	3308      	adds	r3, #8
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	4013      	ands	r3, r2
 8020408:	2b00      	cmp	r3, #0
 802040a:	d10d      	bne.n	8020428 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802040c:	683b      	ldr	r3, [r7, #0]
 802040e:	3308      	adds	r3, #8
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	43da      	mvns	r2, r3
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8020418:	683b      	ldr	r3, [r7, #0]
 802041a:	3308      	adds	r3, #8
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020420:	429a      	cmp	r2, r3
 8020422:	d101      	bne.n	8020428 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020424:	2301      	movs	r3, #1
 8020426:	e000      	b.n	802042a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8020428:	2300      	movs	r3, #0
  }
}
 802042a:	4618      	mov	r0, r3
 802042c:	3714      	adds	r7, #20
 802042e:	46bd      	mov	sp, r7
 8020430:	bc80      	pop	{r7}
 8020432:	4770      	bx	lr

08020434 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8020434:	b580      	push	{r7, lr}
 8020436:	b084      	sub	sp, #16
 8020438:	af00      	add	r7, sp, #0
 802043a:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 802043c:	f107 030c 	add.w	r3, r7, #12
 8020440:	4619      	mov	r1, r3
 8020442:	6878      	ldr	r0, [r7, #4]
 8020444:	f000 f80c 	bl	8020460 <ip4addr_aton>
 8020448:	4603      	mov	r3, r0
 802044a:	2b00      	cmp	r3, #0
 802044c:	d001      	beq.n	8020452 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	e001      	b.n	8020456 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8020452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020456:	4618      	mov	r0, r3
 8020458:	3710      	adds	r7, #16
 802045a:	46bd      	mov	sp, r7
 802045c:	bd80      	pop	{r7, pc}
	...

08020460 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8020460:	b580      	push	{r7, lr}
 8020462:	b08a      	sub	sp, #40	@ 0x28
 8020464:	af00      	add	r7, sp, #0
 8020466:	6078      	str	r0, [r7, #4]
 8020468:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 802046a:	f107 030c 	add.w	r3, r7, #12
 802046e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	781b      	ldrb	r3, [r3, #0]
 8020474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 8020478:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802047c:	2b2f      	cmp	r3, #47	@ 0x2f
 802047e:	d903      	bls.n	8020488 <ip4addr_aton+0x28>
 8020480:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020484:	2b39      	cmp	r3, #57	@ 0x39
 8020486:	d901      	bls.n	802048c <ip4addr_aton+0x2c>
      return 0;
 8020488:	2300      	movs	r3, #0
 802048a:	e11e      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    val = 0;
 802048c:	2300      	movs	r3, #0
 802048e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8020490:	230a      	movs	r3, #10
 8020492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8020496:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802049a:	2b30      	cmp	r3, #48	@ 0x30
 802049c:	d11c      	bne.n	80204d8 <ip4addr_aton+0x78>
      c = *++cp;
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	3301      	adds	r3, #1
 80204a2:	607b      	str	r3, [r7, #4]
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	781b      	ldrb	r3, [r3, #0]
 80204a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 80204ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204b0:	2b78      	cmp	r3, #120	@ 0x78
 80204b2:	d003      	beq.n	80204bc <ip4addr_aton+0x5c>
 80204b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204b8:	2b58      	cmp	r3, #88	@ 0x58
 80204ba:	d10a      	bne.n	80204d2 <ip4addr_aton+0x72>
        base = 16;
 80204bc:	2310      	movs	r3, #16
 80204be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	3301      	adds	r3, #1
 80204c6:	607b      	str	r3, [r7, #4]
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	781b      	ldrb	r3, [r3, #0]
 80204cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80204d0:	e002      	b.n	80204d8 <ip4addr_aton+0x78>
      } else {
        base = 8;
 80204d2:	2308      	movs	r3, #8
 80204d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 80204d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80204de:	d915      	bls.n	802050c <ip4addr_aton+0xac>
 80204e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204e4:	2b39      	cmp	r3, #57	@ 0x39
 80204e6:	d811      	bhi.n	802050c <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 80204e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80204ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80204ee:	fb03 f202 	mul.w	r2, r3, r2
 80204f2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80204f6:	4413      	add	r3, r2
 80204f8:	3b30      	subs	r3, #48	@ 0x30
 80204fa:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	3301      	adds	r3, #1
 8020500:	607b      	str	r3, [r7, #4]
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	781b      	ldrb	r3, [r3, #0]
 8020506:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 802050a:	e036      	b.n	802057a <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 802050c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8020510:	2b10      	cmp	r3, #16
 8020512:	d133      	bne.n	802057c <ip4addr_aton+0x11c>
 8020514:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020518:	2b2f      	cmp	r3, #47	@ 0x2f
 802051a:	d903      	bls.n	8020524 <ip4addr_aton+0xc4>
 802051c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020520:	2b39      	cmp	r3, #57	@ 0x39
 8020522:	d90f      	bls.n	8020544 <ip4addr_aton+0xe4>
 8020524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020528:	2b60      	cmp	r3, #96	@ 0x60
 802052a:	d903      	bls.n	8020534 <ip4addr_aton+0xd4>
 802052c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020530:	2b66      	cmp	r3, #102	@ 0x66
 8020532:	d907      	bls.n	8020544 <ip4addr_aton+0xe4>
 8020534:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020538:	2b40      	cmp	r3, #64	@ 0x40
 802053a:	d91f      	bls.n	802057c <ip4addr_aton+0x11c>
 802053c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020540:	2b46      	cmp	r3, #70	@ 0x46
 8020542:	d81b      	bhi.n	802057c <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8020544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020546:	011b      	lsls	r3, r3, #4
 8020548:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 802054c:	f102 010a 	add.w	r1, r2, #10
 8020550:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8020554:	2a60      	cmp	r2, #96	@ 0x60
 8020556:	d905      	bls.n	8020564 <ip4addr_aton+0x104>
 8020558:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 802055c:	2a7a      	cmp	r2, #122	@ 0x7a
 802055e:	d801      	bhi.n	8020564 <ip4addr_aton+0x104>
 8020560:	2261      	movs	r2, #97	@ 0x61
 8020562:	e000      	b.n	8020566 <ip4addr_aton+0x106>
 8020564:	2241      	movs	r2, #65	@ 0x41
 8020566:	1a8a      	subs	r2, r1, r2
 8020568:	4313      	orrs	r3, r2
 802056a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	3301      	adds	r3, #1
 8020570:	607b      	str	r3, [r7, #4]
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	781b      	ldrb	r3, [r3, #0]
 8020576:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 802057a:	e7ad      	b.n	80204d8 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 802057c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020580:	2b2e      	cmp	r3, #46	@ 0x2e
 8020582:	d114      	bne.n	80205ae <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8020584:	f107 030c 	add.w	r3, r7, #12
 8020588:	330c      	adds	r3, #12
 802058a:	69fa      	ldr	r2, [r7, #28]
 802058c:	429a      	cmp	r2, r3
 802058e:	d301      	bcc.n	8020594 <ip4addr_aton+0x134>
        return 0;
 8020590:	2300      	movs	r3, #0
 8020592:	e09a      	b.n	80206ca <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 8020594:	69fb      	ldr	r3, [r7, #28]
 8020596:	1d1a      	adds	r2, r3, #4
 8020598:	61fa      	str	r2, [r7, #28]
 802059a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802059c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	3301      	adds	r3, #1
 80205a2:	607b      	str	r3, [r7, #4]
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	781b      	ldrb	r3, [r3, #0]
 80205a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 80205ac:	e764      	b.n	8020478 <ip4addr_aton+0x18>
    } else {
      break;
 80205ae:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 80205b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d019      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205bc:	2b20      	cmp	r3, #32
 80205be:	d015      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205c4:	2b0c      	cmp	r3, #12
 80205c6:	d011      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205cc:	2b0a      	cmp	r3, #10
 80205ce:	d00d      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205d4:	2b0d      	cmp	r3, #13
 80205d6:	d009      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205dc:	2b09      	cmp	r3, #9
 80205de:	d005      	beq.n	80205ec <ip4addr_aton+0x18c>
 80205e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80205e4:	2b0b      	cmp	r3, #11
 80205e6:	d001      	beq.n	80205ec <ip4addr_aton+0x18c>
    return 0;
 80205e8:	2300      	movs	r3, #0
 80205ea:	e06e      	b.n	80206ca <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80205ec:	f107 030c 	add.w	r3, r7, #12
 80205f0:	69fa      	ldr	r2, [r7, #28]
 80205f2:	1ad3      	subs	r3, r2, r3
 80205f4:	109b      	asrs	r3, r3, #2
 80205f6:	3301      	adds	r3, #1
 80205f8:	2b04      	cmp	r3, #4
 80205fa:	d853      	bhi.n	80206a4 <ip4addr_aton+0x244>
 80205fc:	a201      	add	r2, pc, #4	@ (adr r2, 8020604 <ip4addr_aton+0x1a4>)
 80205fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020602:	bf00      	nop
 8020604:	08020619 	.word	0x08020619
 8020608:	080206b5 	.word	0x080206b5
 802060c:	0802061d 	.word	0x0802061d
 8020610:	0802063f 	.word	0x0802063f
 8020614:	0802066d 	.word	0x0802066d

  case 0:
    return 0;       /* initial nondigit */
 8020618:	2300      	movs	r3, #0
 802061a:	e056      	b.n	80206ca <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 802061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802061e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020622:	d301      	bcc.n	8020628 <ip4addr_aton+0x1c8>
      return 0;
 8020624:	2300      	movs	r3, #0
 8020626:	e050      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	2bff      	cmp	r3, #255	@ 0xff
 802062c:	d901      	bls.n	8020632 <ip4addr_aton+0x1d2>
      return 0;
 802062e:	2300      	movs	r3, #0
 8020630:	e04b      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	061b      	lsls	r3, r3, #24
 8020636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020638:	4313      	orrs	r3, r2
 802063a:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 802063c:	e03b      	b.n	80206b6 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 802063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020644:	d301      	bcc.n	802064a <ip4addr_aton+0x1ea>
      return 0;
 8020646:	2300      	movs	r3, #0
 8020648:	e03f      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 802064a:	68fb      	ldr	r3, [r7, #12]
 802064c:	2bff      	cmp	r3, #255	@ 0xff
 802064e:	d802      	bhi.n	8020656 <ip4addr_aton+0x1f6>
 8020650:	693b      	ldr	r3, [r7, #16]
 8020652:	2bff      	cmp	r3, #255	@ 0xff
 8020654:	d901      	bls.n	802065a <ip4addr_aton+0x1fa>
      return 0;
 8020656:	2300      	movs	r3, #0
 8020658:	e037      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 802065a:	68fb      	ldr	r3, [r7, #12]
 802065c:	061a      	lsls	r2, r3, #24
 802065e:	693b      	ldr	r3, [r7, #16]
 8020660:	041b      	lsls	r3, r3, #16
 8020662:	4313      	orrs	r3, r2
 8020664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020666:	4313      	orrs	r3, r2
 8020668:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 802066a:	e024      	b.n	80206b6 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 802066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802066e:	2bff      	cmp	r3, #255	@ 0xff
 8020670:	d901      	bls.n	8020676 <ip4addr_aton+0x216>
      return 0;
 8020672:	2300      	movs	r3, #0
 8020674:	e029      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	2bff      	cmp	r3, #255	@ 0xff
 802067a:	d805      	bhi.n	8020688 <ip4addr_aton+0x228>
 802067c:	693b      	ldr	r3, [r7, #16]
 802067e:	2bff      	cmp	r3, #255	@ 0xff
 8020680:	d802      	bhi.n	8020688 <ip4addr_aton+0x228>
 8020682:	697b      	ldr	r3, [r7, #20]
 8020684:	2bff      	cmp	r3, #255	@ 0xff
 8020686:	d901      	bls.n	802068c <ip4addr_aton+0x22c>
      return 0;
 8020688:	2300      	movs	r3, #0
 802068a:	e01e      	b.n	80206ca <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 802068c:	68fb      	ldr	r3, [r7, #12]
 802068e:	061a      	lsls	r2, r3, #24
 8020690:	693b      	ldr	r3, [r7, #16]
 8020692:	041b      	lsls	r3, r3, #16
 8020694:	431a      	orrs	r2, r3
 8020696:	697b      	ldr	r3, [r7, #20]
 8020698:	021b      	lsls	r3, r3, #8
 802069a:	4313      	orrs	r3, r2
 802069c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802069e:	4313      	orrs	r3, r2
 80206a0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80206a2:	e008      	b.n	80206b6 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 80206a4:	4b0b      	ldr	r3, [pc, #44]	@ (80206d4 <ip4addr_aton+0x274>)
 80206a6:	f240 1203 	movw	r2, #259	@ 0x103
 80206aa:	490b      	ldr	r1, [pc, #44]	@ (80206d8 <ip4addr_aton+0x278>)
 80206ac:	480b      	ldr	r0, [pc, #44]	@ (80206dc <ip4addr_aton+0x27c>)
 80206ae:	f001 fdcd 	bl	802224c <iprintf>
    break;
 80206b2:	e000      	b.n	80206b6 <ip4addr_aton+0x256>
    break;
 80206b4:	bf00      	nop
  }
  if (addr) {
 80206b6:	683b      	ldr	r3, [r7, #0]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d005      	beq.n	80206c8 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80206bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80206be:	f7f4 fb0e 	bl	8014cde <lwip_htonl>
 80206c2:	4602      	mov	r2, r0
 80206c4:	683b      	ldr	r3, [r7, #0]
 80206c6:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80206c8:	2301      	movs	r3, #1
}
 80206ca:	4618      	mov	r0, r3
 80206cc:	3728      	adds	r7, #40	@ 0x28
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}
 80206d2:	bf00      	nop
 80206d4:	08027c94 	.word	0x08027c94
 80206d8:	08027cd0 	.word	0x08027cd0
 80206dc:	08027cdc 	.word	0x08027cdc

080206e0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b082      	sub	sp, #8
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80206e8:	2210      	movs	r2, #16
 80206ea:	4904      	ldr	r1, [pc, #16]	@ (80206fc <ip4addr_ntoa+0x1c>)
 80206ec:	6878      	ldr	r0, [r7, #4]
 80206ee:	f000 f807 	bl	8020700 <ip4addr_ntoa_r>
 80206f2:	4603      	mov	r3, r0
}
 80206f4:	4618      	mov	r0, r3
 80206f6:	3708      	adds	r7, #8
 80206f8:	46bd      	mov	sp, r7
 80206fa:	bd80      	pop	{r7, pc}
 80206fc:	2000bf0c 	.word	0x2000bf0c

08020700 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8020700:	b480      	push	{r7}
 8020702:	b08d      	sub	sp, #52	@ 0x34
 8020704:	af00      	add	r7, sp, #0
 8020706:	60f8      	str	r0, [r7, #12]
 8020708:	60b9      	str	r1, [r7, #8]
 802070a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 802070c:	2300      	movs	r3, #0
 802070e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8020716:	68bb      	ldr	r3, [r7, #8]
 8020718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 802071a:	f107 0318 	add.w	r3, r7, #24
 802071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8020720:	2300      	movs	r3, #0
 8020722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020726:	e058      	b.n	80207da <ip4addr_ntoa_r+0xda>
    i = 0;
 8020728:	2300      	movs	r3, #0
 802072a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 802072e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020730:	781a      	ldrb	r2, [r3, #0]
 8020732:	4b32      	ldr	r3, [pc, #200]	@ (80207fc <ip4addr_ntoa_r+0xfc>)
 8020734:	fba3 1302 	umull	r1, r3, r3, r2
 8020738:	08d9      	lsrs	r1, r3, #3
 802073a:	460b      	mov	r3, r1
 802073c:	009b      	lsls	r3, r3, #2
 802073e:	440b      	add	r3, r1
 8020740:	005b      	lsls	r3, r3, #1
 8020742:	1ad3      	subs	r3, r2, r3
 8020744:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8020746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020748:	781b      	ldrb	r3, [r3, #0]
 802074a:	4a2c      	ldr	r2, [pc, #176]	@ (80207fc <ip4addr_ntoa_r+0xfc>)
 802074c:	fba2 2303 	umull	r2, r3, r2, r3
 8020750:	08db      	lsrs	r3, r3, #3
 8020752:	b2da      	uxtb	r2, r3
 8020754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020756:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8020758:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 802075c:	1c5a      	adds	r2, r3, #1
 802075e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8020762:	4619      	mov	r1, r3
 8020764:	7ffb      	ldrb	r3, [r7, #31]
 8020766:	3330      	adds	r3, #48	@ 0x30
 8020768:	b2da      	uxtb	r2, r3
 802076a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 802076e:	443b      	add	r3, r7
 8020770:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8020774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020776:	781b      	ldrb	r3, [r3, #0]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d1d8      	bne.n	802072e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 802077c:	e011      	b.n	80207a2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802077e:	6a3b      	ldr	r3, [r7, #32]
 8020780:	1c5a      	adds	r2, r3, #1
 8020782:	623a      	str	r2, [r7, #32]
 8020784:	687a      	ldr	r2, [r7, #4]
 8020786:	429a      	cmp	r2, r3
 8020788:	dc01      	bgt.n	802078e <ip4addr_ntoa_r+0x8e>
        return NULL;
 802078a:	2300      	movs	r3, #0
 802078c:	e030      	b.n	80207f0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802078e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8020792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020794:	1c59      	adds	r1, r3, #1
 8020796:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8020798:	3230      	adds	r2, #48	@ 0x30
 802079a:	443a      	add	r2, r7
 802079c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80207a0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80207a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80207a6:	1e5a      	subs	r2, r3, #1
 80207a8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d1e6      	bne.n	802077e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80207b0:	6a3b      	ldr	r3, [r7, #32]
 80207b2:	1c5a      	adds	r2, r3, #1
 80207b4:	623a      	str	r2, [r7, #32]
 80207b6:	687a      	ldr	r2, [r7, #4]
 80207b8:	429a      	cmp	r2, r3
 80207ba:	dc01      	bgt.n	80207c0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80207bc:	2300      	movs	r3, #0
 80207be:	e017      	b.n	80207f0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80207c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207c2:	1c5a      	adds	r2, r3, #1
 80207c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80207c6:	222e      	movs	r2, #46	@ 0x2e
 80207c8:	701a      	strb	r2, [r3, #0]
    ap++;
 80207ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207cc:	3301      	adds	r3, #1
 80207ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80207d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80207d4:	3301      	adds	r3, #1
 80207d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80207da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80207de:	2b03      	cmp	r3, #3
 80207e0:	d9a2      	bls.n	8020728 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80207e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207e4:	3b01      	subs	r3, #1
 80207e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80207e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207ea:	2200      	movs	r2, #0
 80207ec:	701a      	strb	r2, [r3, #0]
  return buf;
 80207ee:	68bb      	ldr	r3, [r7, #8]
}
 80207f0:	4618      	mov	r0, r3
 80207f2:	3734      	adds	r7, #52	@ 0x34
 80207f4:	46bd      	mov	sp, r7
 80207f6:	bc80      	pop	{r7}
 80207f8:	4770      	bx	lr
 80207fa:	bf00      	nop
 80207fc:	cccccccd 	.word	0xcccccccd

08020800 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8020800:	b580      	push	{r7, lr}
 8020802:	b084      	sub	sp, #16
 8020804:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8020806:	2300      	movs	r3, #0
 8020808:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802080a:	4b12      	ldr	r3, [pc, #72]	@ (8020854 <ip_reass_tmr+0x54>)
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8020810:	e018      	b.n	8020844 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	7fdb      	ldrb	r3, [r3, #31]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d00b      	beq.n	8020832 <ip_reass_tmr+0x32>
      r->timer--;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	7fdb      	ldrb	r3, [r3, #31]
 802081e:	3b01      	subs	r3, #1
 8020820:	b2da      	uxtb	r2, r3
 8020822:	68fb      	ldr	r3, [r7, #12]
 8020824:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	60fb      	str	r3, [r7, #12]
 8020830:	e008      	b.n	8020844 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8020832:	68fb      	ldr	r3, [r7, #12]
 8020834:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8020836:	68fb      	ldr	r3, [r7, #12]
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 802083c:	68b9      	ldr	r1, [r7, #8]
 802083e:	6878      	ldr	r0, [r7, #4]
 8020840:	f000 f80a 	bl	8020858 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	2b00      	cmp	r3, #0
 8020848:	d1e3      	bne.n	8020812 <ip_reass_tmr+0x12>
     }
   }
}
 802084a:	bf00      	nop
 802084c:	bf00      	nop
 802084e:	3710      	adds	r7, #16
 8020850:	46bd      	mov	sp, r7
 8020852:	bd80      	pop	{r7, pc}
 8020854:	2000bf1c 	.word	0x2000bf1c

08020858 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020858:	b580      	push	{r7, lr}
 802085a:	b088      	sub	sp, #32
 802085c:	af00      	add	r7, sp, #0
 802085e:	6078      	str	r0, [r7, #4]
 8020860:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8020862:	2300      	movs	r3, #0
 8020864:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020866:	683a      	ldr	r2, [r7, #0]
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	429a      	cmp	r2, r3
 802086c:	d105      	bne.n	802087a <ip_reass_free_complete_datagram+0x22>
 802086e:	4b48      	ldr	r3, [pc, #288]	@ (8020990 <ip_reass_free_complete_datagram+0x138>)
 8020870:	22ab      	movs	r2, #171	@ 0xab
 8020872:	4948      	ldr	r1, [pc, #288]	@ (8020994 <ip_reass_free_complete_datagram+0x13c>)
 8020874:	4848      	ldr	r0, [pc, #288]	@ (8020998 <ip_reass_free_complete_datagram+0x140>)
 8020876:	f001 fce9 	bl	802224c <iprintf>
  if (prev != NULL) {
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	2b00      	cmp	r3, #0
 802087e:	d00a      	beq.n	8020896 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020880:	683b      	ldr	r3, [r7, #0]
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	687a      	ldr	r2, [r7, #4]
 8020886:	429a      	cmp	r2, r3
 8020888:	d005      	beq.n	8020896 <ip_reass_free_complete_datagram+0x3e>
 802088a:	4b41      	ldr	r3, [pc, #260]	@ (8020990 <ip_reass_free_complete_datagram+0x138>)
 802088c:	22ad      	movs	r2, #173	@ 0xad
 802088e:	4943      	ldr	r1, [pc, #268]	@ (802099c <ip_reass_free_complete_datagram+0x144>)
 8020890:	4841      	ldr	r0, [pc, #260]	@ (8020998 <ip_reass_free_complete_datagram+0x140>)
 8020892:	f001 fcdb 	bl	802224c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 8020896:	4b42      	ldr	r3, [pc, #264]	@ (80209a0 <ip_reass_free_complete_datagram+0x148>)
 8020898:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 802089c:	3301      	adds	r3, #1
 802089e:	4a40      	ldr	r2, [pc, #256]	@ (80209a0 <ip_reass_free_complete_datagram+0x148>)
 80208a0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	685b      	ldr	r3, [r3, #4]
 80208a8:	685b      	ldr	r3, [r3, #4]
 80208aa:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80208ac:	697b      	ldr	r3, [r7, #20]
 80208ae:	889b      	ldrh	r3, [r3, #4]
 80208b0:	b29b      	uxth	r3, r3
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d12a      	bne.n	802090c <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	685b      	ldr	r3, [r3, #4]
 80208ba:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80208bc:	697b      	ldr	r3, [r7, #20]
 80208be:	681a      	ldr	r2, [r3, #0]
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80208c4:	69bb      	ldr	r3, [r7, #24]
 80208c6:	6858      	ldr	r0, [r3, #4]
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	3308      	adds	r3, #8
 80208cc:	2214      	movs	r2, #20
 80208ce:	4619      	mov	r1, r3
 80208d0:	f001 ffb7 	bl	8022842 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80208d4:	2101      	movs	r1, #1
 80208d6:	69b8      	ldr	r0, [r7, #24]
 80208d8:	f7ff f96e 	bl	801fbb8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80208dc:	69b8      	ldr	r0, [r7, #24]
 80208de:	f7f5 fd2b 	bl	8016338 <pbuf_clen>
 80208e2:	4603      	mov	r3, r0
 80208e4:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80208e6:	8bfa      	ldrh	r2, [r7, #30]
 80208e8:	8a7b      	ldrh	r3, [r7, #18]
 80208ea:	4413      	add	r3, r2
 80208ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80208f0:	db05      	blt.n	80208fe <ip_reass_free_complete_datagram+0xa6>
 80208f2:	4b27      	ldr	r3, [pc, #156]	@ (8020990 <ip_reass_free_complete_datagram+0x138>)
 80208f4:	22bc      	movs	r2, #188	@ 0xbc
 80208f6:	492b      	ldr	r1, [pc, #172]	@ (80209a4 <ip_reass_free_complete_datagram+0x14c>)
 80208f8:	4827      	ldr	r0, [pc, #156]	@ (8020998 <ip_reass_free_complete_datagram+0x140>)
 80208fa:	f001 fca7 	bl	802224c <iprintf>
    pbufs_freed += clen;
 80208fe:	8bfa      	ldrh	r2, [r7, #30]
 8020900:	8a7b      	ldrh	r3, [r7, #18]
 8020902:	4413      	add	r3, r2
 8020904:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8020906:	69b8      	ldr	r0, [r7, #24]
 8020908:	f7f5 fc82 	bl	8016210 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	685b      	ldr	r3, [r3, #4]
 8020910:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8020912:	e01f      	b.n	8020954 <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020914:	69bb      	ldr	r3, [r7, #24]
 8020916:	685b      	ldr	r3, [r3, #4]
 8020918:	617b      	str	r3, [r7, #20]
    pcur = p;
 802091a:	69bb      	ldr	r3, [r7, #24]
 802091c:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 802091e:	697b      	ldr	r3, [r7, #20]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020924:	68f8      	ldr	r0, [r7, #12]
 8020926:	f7f5 fd07 	bl	8016338 <pbuf_clen>
 802092a:	4603      	mov	r3, r0
 802092c:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802092e:	8bfa      	ldrh	r2, [r7, #30]
 8020930:	8a7b      	ldrh	r3, [r7, #18]
 8020932:	4413      	add	r3, r2
 8020934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020938:	db05      	blt.n	8020946 <ip_reass_free_complete_datagram+0xee>
 802093a:	4b15      	ldr	r3, [pc, #84]	@ (8020990 <ip_reass_free_complete_datagram+0x138>)
 802093c:	22cc      	movs	r2, #204	@ 0xcc
 802093e:	4919      	ldr	r1, [pc, #100]	@ (80209a4 <ip_reass_free_complete_datagram+0x14c>)
 8020940:	4815      	ldr	r0, [pc, #84]	@ (8020998 <ip_reass_free_complete_datagram+0x140>)
 8020942:	f001 fc83 	bl	802224c <iprintf>
    pbufs_freed += clen;
 8020946:	8bfa      	ldrh	r2, [r7, #30]
 8020948:	8a7b      	ldrh	r3, [r7, #18]
 802094a:	4413      	add	r3, r2
 802094c:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 802094e:	68f8      	ldr	r0, [r7, #12]
 8020950:	f7f5 fc5e 	bl	8016210 <pbuf_free>
  while (p != NULL) {
 8020954:	69bb      	ldr	r3, [r7, #24]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d1dc      	bne.n	8020914 <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802095a:	6839      	ldr	r1, [r7, #0]
 802095c:	6878      	ldr	r0, [r7, #4]
 802095e:	f000 f8cb 	bl	8020af8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8020962:	4b11      	ldr	r3, [pc, #68]	@ (80209a8 <ip_reass_free_complete_datagram+0x150>)
 8020964:	881b      	ldrh	r3, [r3, #0]
 8020966:	8bfa      	ldrh	r2, [r7, #30]
 8020968:	429a      	cmp	r2, r3
 802096a:	d905      	bls.n	8020978 <ip_reass_free_complete_datagram+0x120>
 802096c:	4b08      	ldr	r3, [pc, #32]	@ (8020990 <ip_reass_free_complete_datagram+0x138>)
 802096e:	22d2      	movs	r2, #210	@ 0xd2
 8020970:	490e      	ldr	r1, [pc, #56]	@ (80209ac <ip_reass_free_complete_datagram+0x154>)
 8020972:	4809      	ldr	r0, [pc, #36]	@ (8020998 <ip_reass_free_complete_datagram+0x140>)
 8020974:	f001 fc6a 	bl	802224c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8020978:	4b0b      	ldr	r3, [pc, #44]	@ (80209a8 <ip_reass_free_complete_datagram+0x150>)
 802097a:	881a      	ldrh	r2, [r3, #0]
 802097c:	8bfb      	ldrh	r3, [r7, #30]
 802097e:	1ad3      	subs	r3, r2, r3
 8020980:	b29a      	uxth	r2, r3
 8020982:	4b09      	ldr	r3, [pc, #36]	@ (80209a8 <ip_reass_free_complete_datagram+0x150>)
 8020984:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020986:	8bfb      	ldrh	r3, [r7, #30]
}
 8020988:	4618      	mov	r0, r3
 802098a:	3720      	adds	r7, #32
 802098c:	46bd      	mov	sp, r7
 802098e:	bd80      	pop	{r7, pc}
 8020990:	08027d04 	.word	0x08027d04
 8020994:	08027d40 	.word	0x08027d40
 8020998:	08027d4c 	.word	0x08027d4c
 802099c:	08027d74 	.word	0x08027d74
 80209a0:	2000bbec 	.word	0x2000bbec
 80209a4:	08027d88 	.word	0x08027d88
 80209a8:	2000bf20 	.word	0x2000bf20
 80209ac:	08027da8 	.word	0x08027da8

080209b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80209b0:	b580      	push	{r7, lr}
 80209b2:	b08a      	sub	sp, #40	@ 0x28
 80209b4:	af00      	add	r7, sp, #0
 80209b6:	6078      	str	r0, [r7, #4]
 80209b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80209ba:	2300      	movs	r3, #0
 80209bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80209be:	2300      	movs	r3, #0
 80209c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80209c2:	2300      	movs	r3, #0
 80209c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80209c6:	2300      	movs	r3, #0
 80209c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80209ca:	2300      	movs	r3, #0
 80209cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80209ce:	4b28      	ldr	r3, [pc, #160]	@ (8020a70 <ip_reass_remove_oldest_datagram+0xc0>)
 80209d0:	681b      	ldr	r3, [r3, #0]
 80209d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80209d4:	e030      	b.n	8020a38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80209d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209d8:	695a      	ldr	r2, [r3, #20]
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	68db      	ldr	r3, [r3, #12]
 80209de:	429a      	cmp	r2, r3
 80209e0:	d10c      	bne.n	80209fc <ip_reass_remove_oldest_datagram+0x4c>
 80209e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209e4:	699a      	ldr	r2, [r3, #24]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	691b      	ldr	r3, [r3, #16]
 80209ea:	429a      	cmp	r2, r3
 80209ec:	d106      	bne.n	80209fc <ip_reass_remove_oldest_datagram+0x4c>
 80209ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209f0:	899a      	ldrh	r2, [r3, #12]
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	889b      	ldrh	r3, [r3, #4]
 80209f6:	b29b      	uxth	r3, r3
 80209f8:	429a      	cmp	r2, r3
 80209fa:	d014      	beq.n	8020a26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80209fc:	693b      	ldr	r3, [r7, #16]
 80209fe:	3301      	adds	r3, #1
 8020a00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8020a02:	6a3b      	ldr	r3, [r7, #32]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d104      	bne.n	8020a12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8020a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020a0c:	69fb      	ldr	r3, [r7, #28]
 8020a0e:	61bb      	str	r3, [r7, #24]
 8020a10:	e009      	b.n	8020a26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8020a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a14:	7fda      	ldrb	r2, [r3, #31]
 8020a16:	6a3b      	ldr	r3, [r7, #32]
 8020a18:	7fdb      	ldrb	r3, [r3, #31]
 8020a1a:	429a      	cmp	r2, r3
 8020a1c:	d803      	bhi.n	8020a26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8020a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020a22:	69fb      	ldr	r3, [r7, #28]
 8020a24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	d001      	beq.n	8020a32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8020a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8020a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8020a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d1cb      	bne.n	80209d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8020a3e:	6a3b      	ldr	r3, [r7, #32]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	d008      	beq.n	8020a56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020a44:	69b9      	ldr	r1, [r7, #24]
 8020a46:	6a38      	ldr	r0, [r7, #32]
 8020a48:	f7ff ff06 	bl	8020858 <ip_reass_free_complete_datagram>
 8020a4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020a4e:	697a      	ldr	r2, [r7, #20]
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	4413      	add	r3, r2
 8020a54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020a56:	697a      	ldr	r2, [r7, #20]
 8020a58:	683b      	ldr	r3, [r7, #0]
 8020a5a:	429a      	cmp	r2, r3
 8020a5c:	da02      	bge.n	8020a64 <ip_reass_remove_oldest_datagram+0xb4>
 8020a5e:	693b      	ldr	r3, [r7, #16]
 8020a60:	2b01      	cmp	r3, #1
 8020a62:	dcac      	bgt.n	80209be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020a64:	697b      	ldr	r3, [r7, #20]
}
 8020a66:	4618      	mov	r0, r3
 8020a68:	3728      	adds	r7, #40	@ 0x28
 8020a6a:	46bd      	mov	sp, r7
 8020a6c:	bd80      	pop	{r7, pc}
 8020a6e:	bf00      	nop
 8020a70:	2000bf1c 	.word	0x2000bf1c

08020a74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020a74:	b580      	push	{r7, lr}
 8020a76:	b084      	sub	sp, #16
 8020a78:	af00      	add	r7, sp, #0
 8020a7a:	6078      	str	r0, [r7, #4]
 8020a7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020a7e:	2004      	movs	r0, #4
 8020a80:	f7f4 fdca 	bl	8015618 <memp_malloc>
 8020a84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020a86:	68fb      	ldr	r3, [r7, #12]
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d116      	bne.n	8020aba <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020a8c:	6839      	ldr	r1, [r7, #0]
 8020a8e:	6878      	ldr	r0, [r7, #4]
 8020a90:	f7ff ff8e 	bl	80209b0 <ip_reass_remove_oldest_datagram>
 8020a94:	4602      	mov	r2, r0
 8020a96:	683b      	ldr	r3, [r7, #0]
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	dc03      	bgt.n	8020aa4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020a9c:	2004      	movs	r0, #4
 8020a9e:	f7f4 fdbb 	bl	8015618 <memp_malloc>
 8020aa2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	d107      	bne.n	8020aba <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8020aaa:	4b11      	ldr	r3, [pc, #68]	@ (8020af0 <ip_reass_enqueue_new_datagram+0x7c>)
 8020aac:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8020aae:	3301      	adds	r3, #1
 8020ab0:	b29a      	uxth	r2, r3
 8020ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8020af0 <ip_reass_enqueue_new_datagram+0x7c>)
 8020ab4:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8020ab6:	2300      	movs	r3, #0
 8020ab8:	e016      	b.n	8020ae8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020aba:	2220      	movs	r2, #32
 8020abc:	2100      	movs	r1, #0
 8020abe:	68f8      	ldr	r0, [r7, #12]
 8020ac0:	f001 fd9a 	bl	80225f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020ac4:	68fb      	ldr	r3, [r7, #12]
 8020ac6:	2203      	movs	r2, #3
 8020ac8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020aca:	4b0a      	ldr	r3, [pc, #40]	@ (8020af4 <ip_reass_enqueue_new_datagram+0x80>)
 8020acc:	681a      	ldr	r2, [r3, #0]
 8020ace:	68fb      	ldr	r3, [r7, #12]
 8020ad0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8020ad2:	4a08      	ldr	r2, [pc, #32]	@ (8020af4 <ip_reass_enqueue_new_datagram+0x80>)
 8020ad4:	68fb      	ldr	r3, [r7, #12]
 8020ad6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020ad8:	68fb      	ldr	r3, [r7, #12]
 8020ada:	3308      	adds	r3, #8
 8020adc:	2214      	movs	r2, #20
 8020ade:	6879      	ldr	r1, [r7, #4]
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	f001 feae 	bl	8022842 <memcpy>
  return ipr;
 8020ae6:	68fb      	ldr	r3, [r7, #12]
}
 8020ae8:	4618      	mov	r0, r3
 8020aea:	3710      	adds	r7, #16
 8020aec:	46bd      	mov	sp, r7
 8020aee:	bd80      	pop	{r7, pc}
 8020af0:	2000bbec 	.word	0x2000bbec
 8020af4:	2000bf1c 	.word	0x2000bf1c

08020af8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020af8:	b580      	push	{r7, lr}
 8020afa:	b082      	sub	sp, #8
 8020afc:	af00      	add	r7, sp, #0
 8020afe:	6078      	str	r0, [r7, #4]
 8020b00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020b02:	4b10      	ldr	r3, [pc, #64]	@ (8020b44 <ip_reass_dequeue_datagram+0x4c>)
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	687a      	ldr	r2, [r7, #4]
 8020b08:	429a      	cmp	r2, r3
 8020b0a:	d104      	bne.n	8020b16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	4a0c      	ldr	r2, [pc, #48]	@ (8020b44 <ip_reass_dequeue_datagram+0x4c>)
 8020b12:	6013      	str	r3, [r2, #0]
 8020b14:	e00d      	b.n	8020b32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020b16:	683b      	ldr	r3, [r7, #0]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d106      	bne.n	8020b2a <ip_reass_dequeue_datagram+0x32>
 8020b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8020b48 <ip_reass_dequeue_datagram+0x50>)
 8020b1e:	f240 1245 	movw	r2, #325	@ 0x145
 8020b22:	490a      	ldr	r1, [pc, #40]	@ (8020b4c <ip_reass_dequeue_datagram+0x54>)
 8020b24:	480a      	ldr	r0, [pc, #40]	@ (8020b50 <ip_reass_dequeue_datagram+0x58>)
 8020b26:	f001 fb91 	bl	802224c <iprintf>
    prev->next = ipr->next;
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	681a      	ldr	r2, [r3, #0]
 8020b2e:	683b      	ldr	r3, [r7, #0]
 8020b30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020b32:	6879      	ldr	r1, [r7, #4]
 8020b34:	2004      	movs	r0, #4
 8020b36:	f7f4 fdc1 	bl	80156bc <memp_free>
}
 8020b3a:	bf00      	nop
 8020b3c:	3708      	adds	r7, #8
 8020b3e:	46bd      	mov	sp, r7
 8020b40:	bd80      	pop	{r7, pc}
 8020b42:	bf00      	nop
 8020b44:	2000bf1c 	.word	0x2000bf1c
 8020b48:	08027d04 	.word	0x08027d04
 8020b4c:	08027dc4 	.word	0x08027dc4
 8020b50:	08027d4c 	.word	0x08027d4c

08020b54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020b54:	b580      	push	{r7, lr}
 8020b56:	b08c      	sub	sp, #48	@ 0x30
 8020b58:	af00      	add	r7, sp, #0
 8020b5a:	60f8      	str	r0, [r7, #12]
 8020b5c:	60b9      	str	r1, [r7, #8]
 8020b5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8020b60:	2300      	movs	r3, #0
 8020b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020b64:	2301      	movs	r3, #1
 8020b66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8020b68:	68bb      	ldr	r3, [r7, #8]
 8020b6a:	685b      	ldr	r3, [r3, #4]
 8020b6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8020b6e:	69fb      	ldr	r3, [r7, #28]
 8020b70:	885b      	ldrh	r3, [r3, #2]
 8020b72:	b29b      	uxth	r3, r3
 8020b74:	4618      	mov	r0, r3
 8020b76:	f7f4 f8a5 	bl	8014cc4 <lwip_htons>
 8020b7a:	4603      	mov	r3, r0
 8020b7c:	461a      	mov	r2, r3
 8020b7e:	69fb      	ldr	r3, [r7, #28]
 8020b80:	781b      	ldrb	r3, [r3, #0]
 8020b82:	f003 030f 	and.w	r3, r3, #15
 8020b86:	b29b      	uxth	r3, r3
 8020b88:	009b      	lsls	r3, r3, #2
 8020b8a:	b29b      	uxth	r3, r3
 8020b8c:	1ad3      	subs	r3, r2, r3
 8020b8e:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8020b90:	69fb      	ldr	r3, [r7, #28]
 8020b92:	88db      	ldrh	r3, [r3, #6]
 8020b94:	b29b      	uxth	r3, r3
 8020b96:	4618      	mov	r0, r3
 8020b98:	f7f4 f894 	bl	8014cc4 <lwip_htons>
 8020b9c:	4603      	mov	r3, r0
 8020b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020ba2:	b29b      	uxth	r3, r3
 8020ba4:	00db      	lsls	r3, r3, #3
 8020ba6:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8020ba8:	68bb      	ldr	r3, [r7, #8]
 8020baa:	685b      	ldr	r3, [r3, #4]
 8020bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8020bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	701a      	strb	r2, [r3, #0]
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	705a      	strb	r2, [r3, #1]
 8020bb8:	2200      	movs	r2, #0
 8020bba:	709a      	strb	r2, [r3, #2]
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8020bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bc2:	8b3a      	ldrh	r2, [r7, #24]
 8020bc4:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8020bc6:	8b3a      	ldrh	r2, [r7, #24]
 8020bc8:	8b7b      	ldrh	r3, [r7, #26]
 8020bca:	4413      	add	r3, r2
 8020bcc:	b29a      	uxth	r2, r3
 8020bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bd0:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	685b      	ldr	r3, [r3, #4]
 8020bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8020bd8:	e061      	b.n	8020c9e <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8020bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bdc:	685b      	ldr	r3, [r3, #4]
 8020bde:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8020be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020be2:	889b      	ldrh	r3, [r3, #4]
 8020be4:	b29a      	uxth	r2, r3
 8020be6:	697b      	ldr	r3, [r7, #20]
 8020be8:	889b      	ldrh	r3, [r3, #4]
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	429a      	cmp	r2, r3
 8020bee:	d232      	bcs.n	8020c56 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8020bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020bf4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8020bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d01f      	beq.n	8020c3c <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8020bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020bfe:	889b      	ldrh	r3, [r3, #4]
 8020c00:	b29a      	uxth	r2, r3
 8020c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c04:	88db      	ldrh	r3, [r3, #6]
 8020c06:	b29b      	uxth	r3, r3
 8020c08:	429a      	cmp	r2, r3
 8020c0a:	f0c0 80e3 	bcc.w	8020dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 8020c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c10:	88db      	ldrh	r3, [r3, #6]
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	697b      	ldr	r3, [r7, #20]
 8020c16:	889b      	ldrh	r3, [r3, #4]
 8020c18:	b29b      	uxth	r3, r3
 8020c1a:	429a      	cmp	r2, r3
 8020c1c:	f200 80da 	bhi.w	8020dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8020c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c22:	68ba      	ldr	r2, [r7, #8]
 8020c24:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c28:	88db      	ldrh	r3, [r3, #6]
 8020c2a:	b29a      	uxth	r2, r3
 8020c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c2e:	889b      	ldrh	r3, [r3, #4]
 8020c30:	b29b      	uxth	r3, r3
 8020c32:	429a      	cmp	r2, r3
 8020c34:	d037      	beq.n	8020ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020c36:	2300      	movs	r3, #0
 8020c38:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020c3a:	e034      	b.n	8020ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8020c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c3e:	88db      	ldrh	r3, [r3, #6]
 8020c40:	b29a      	uxth	r2, r3
 8020c42:	697b      	ldr	r3, [r7, #20]
 8020c44:	889b      	ldrh	r3, [r3, #4]
 8020c46:	b29b      	uxth	r3, r3
 8020c48:	429a      	cmp	r2, r3
 8020c4a:	f200 80c5 	bhi.w	8020dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	68ba      	ldr	r2, [r7, #8]
 8020c52:	605a      	str	r2, [r3, #4]
      break;
 8020c54:	e027      	b.n	8020ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8020c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c58:	889b      	ldrh	r3, [r3, #4]
 8020c5a:	b29a      	uxth	r2, r3
 8020c5c:	697b      	ldr	r3, [r7, #20]
 8020c5e:	889b      	ldrh	r3, [r3, #4]
 8020c60:	b29b      	uxth	r3, r3
 8020c62:	429a      	cmp	r2, r3
 8020c64:	f000 80ba 	beq.w	8020ddc <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c6a:	889b      	ldrh	r3, [r3, #4]
 8020c6c:	b29a      	uxth	r2, r3
 8020c6e:	697b      	ldr	r3, [r7, #20]
 8020c70:	88db      	ldrh	r3, [r3, #6]
 8020c72:	b29b      	uxth	r3, r3
 8020c74:	429a      	cmp	r2, r3
 8020c76:	f0c0 80b3 	bcc.w	8020de0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d009      	beq.n	8020c94 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 8020c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c82:	88db      	ldrh	r3, [r3, #6]
 8020c84:	b29a      	uxth	r2, r3
 8020c86:	697b      	ldr	r3, [r7, #20]
 8020c88:	889b      	ldrh	r3, [r3, #4]
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	429a      	cmp	r2, r3
 8020c8e:	d001      	beq.n	8020c94 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020c90:	2300      	movs	r3, #0
 8020c92:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020c94:	697b      	ldr	r3, [r7, #20]
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8020c9a:	697b      	ldr	r3, [r7, #20]
 8020c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8020c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d19a      	bne.n	8020bda <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 8020ca4:	e000      	b.n	8020ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 8020ca6:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020caa:	2b00      	cmp	r3, #0
 8020cac:	d12d      	bne.n	8020d0a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 8020cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	d01c      	beq.n	8020cee <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cb6:	88db      	ldrh	r3, [r3, #6]
 8020cb8:	b29a      	uxth	r2, r3
 8020cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020cbc:	889b      	ldrh	r3, [r3, #4]
 8020cbe:	b29b      	uxth	r3, r3
 8020cc0:	429a      	cmp	r2, r3
 8020cc2:	d906      	bls.n	8020cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 8020cc4:	4b51      	ldr	r3, [pc, #324]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020cc6:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8020cca:	4951      	ldr	r1, [pc, #324]	@ (8020e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020ccc:	4851      	ldr	r0, [pc, #324]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020cce:	f001 fabd 	bl	802224c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8020cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cd4:	68ba      	ldr	r2, [r7, #8]
 8020cd6:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cda:	88db      	ldrh	r3, [r3, #6]
 8020cdc:	b29a      	uxth	r2, r3
 8020cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020ce0:	889b      	ldrh	r3, [r3, #4]
 8020ce2:	b29b      	uxth	r3, r3
 8020ce4:	429a      	cmp	r2, r3
 8020ce6:	d010      	beq.n	8020d0a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8020ce8:	2300      	movs	r3, #0
 8020cea:	623b      	str	r3, [r7, #32]
 8020cec:	e00d      	b.n	8020d0a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	685b      	ldr	r3, [r3, #4]
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	d006      	beq.n	8020d04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8020cf6:	4b45      	ldr	r3, [pc, #276]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020cf8:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8020cfc:	4946      	ldr	r1, [pc, #280]	@ (8020e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020cfe:	4845      	ldr	r0, [pc, #276]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020d00:	f001 faa4 	bl	802224c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	68ba      	ldr	r2, [r7, #8]
 8020d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	2b00      	cmp	r3, #0
 8020d0e:	d105      	bne.n	8020d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 8020d10:	68fb      	ldr	r3, [r7, #12]
 8020d12:	7f9b      	ldrb	r3, [r3, #30]
 8020d14:	f003 0301 	and.w	r3, r3, #1
 8020d18:	2b00      	cmp	r3, #0
 8020d1a:	d059      	beq.n	8020dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8020d1c:	6a3b      	ldr	r3, [r7, #32]
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	d04f      	beq.n	8020dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	685b      	ldr	r3, [r3, #4]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d006      	beq.n	8020d38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8020d2a:	68fb      	ldr	r3, [r7, #12]
 8020d2c:	685b      	ldr	r3, [r3, #4]
 8020d2e:	685b      	ldr	r3, [r3, #4]
 8020d30:	889b      	ldrh	r3, [r3, #4]
 8020d32:	b29b      	uxth	r3, r3
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	d002      	beq.n	8020d3e <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	623b      	str	r3, [r7, #32]
 8020d3c:	e041      	b.n	8020dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8020d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d40:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8020d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d44:	681b      	ldr	r3, [r3, #0]
 8020d46:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020d48:	e012      	b.n	8020d70 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8020d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d4c:	685b      	ldr	r3, [r3, #4]
 8020d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8020d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d52:	88db      	ldrh	r3, [r3, #6]
 8020d54:	b29a      	uxth	r2, r3
 8020d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d58:	889b      	ldrh	r3, [r3, #4]
 8020d5a:	b29b      	uxth	r3, r3
 8020d5c:	429a      	cmp	r2, r3
 8020d5e:	d002      	beq.n	8020d66 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 8020d60:	2300      	movs	r3, #0
 8020d62:	623b      	str	r3, [r7, #32]
            break;
 8020d64:	e007      	b.n	8020d76 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8020d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d68:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8020d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d1e9      	bne.n	8020d4a <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020d76:	6a3b      	ldr	r3, [r7, #32]
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	d022      	beq.n	8020dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8020d7c:	68fb      	ldr	r3, [r7, #12]
 8020d7e:	685b      	ldr	r3, [r3, #4]
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d106      	bne.n	8020d92 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 8020d84:	4b21      	ldr	r3, [pc, #132]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020d86:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 8020d8a:	4924      	ldr	r1, [pc, #144]	@ (8020e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020d8c:	4821      	ldr	r0, [pc, #132]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020d8e:	f001 fa5d 	bl	802224c <iprintf>
          LWIP_ASSERT("sanity check",
 8020d92:	68fb      	ldr	r3, [r7, #12]
 8020d94:	685b      	ldr	r3, [r3, #4]
 8020d96:	685b      	ldr	r3, [r3, #4]
 8020d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020d9a:	429a      	cmp	r2, r3
 8020d9c:	d106      	bne.n	8020dac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 8020d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020da0:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8020da4:	491d      	ldr	r1, [pc, #116]	@ (8020e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020da6:	481b      	ldr	r0, [pc, #108]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020da8:	f001 fa50 	bl	802224c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8020dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d006      	beq.n	8020dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 8020db4:	4b15      	ldr	r3, [pc, #84]	@ (8020e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020db6:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8020dba:	4919      	ldr	r1, [pc, #100]	@ (8020e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020dbc:	4815      	ldr	r0, [pc, #84]	@ (8020e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020dbe:	f001 fa45 	bl	802224c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8020dc2:	6a3b      	ldr	r3, [r7, #32]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	bf14      	ite	ne
 8020dc8:	2301      	movne	r3, #1
 8020dca:	2300      	moveq	r3, #0
 8020dcc:	b2db      	uxtb	r3, r3
 8020dce:	e018      	b.n	8020e02 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	e016      	b.n	8020e02 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8020dd4:	bf00      	nop
 8020dd6:	e004      	b.n	8020de2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8020dd8:	bf00      	nop
 8020dda:	e002      	b.n	8020de2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8020ddc:	bf00      	nop
 8020dde:	e000      	b.n	8020de2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8020de0:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8020de2:	68b8      	ldr	r0, [r7, #8]
 8020de4:	f7f5 faa8 	bl	8016338 <pbuf_clen>
 8020de8:	4603      	mov	r3, r0
 8020dea:	461a      	mov	r2, r3
 8020dec:	4b0d      	ldr	r3, [pc, #52]	@ (8020e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020dee:	881b      	ldrh	r3, [r3, #0]
 8020df0:	1a9b      	subs	r3, r3, r2
 8020df2:	b29a      	uxth	r2, r3
 8020df4:	4b0b      	ldr	r3, [pc, #44]	@ (8020e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020df6:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8020df8:	68b8      	ldr	r0, [r7, #8]
 8020dfa:	f7f5 fa09 	bl	8016210 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020dfe:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8020e02:	4618      	mov	r0, r3
 8020e04:	3730      	adds	r7, #48	@ 0x30
 8020e06:	46bd      	mov	sp, r7
 8020e08:	bd80      	pop	{r7, pc}
 8020e0a:	bf00      	nop
 8020e0c:	08027d04 	.word	0x08027d04
 8020e10:	08027de0 	.word	0x08027de0
 8020e14:	08027d4c 	.word	0x08027d4c
 8020e18:	08027e00 	.word	0x08027e00
 8020e1c:	08027e38 	.word	0x08027e38
 8020e20:	08027e48 	.word	0x08027e48
 8020e24:	2000bf20 	.word	0x2000bf20

08020e28 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b08e      	sub	sp, #56	@ 0x38
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8020e30:	4b9d      	ldr	r3, [pc, #628]	@ (80210a8 <ip4_reass+0x280>)
 8020e32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020e34:	3301      	adds	r3, #1
 8020e36:	b29a      	uxth	r2, r3
 8020e38:	4b9b      	ldr	r3, [pc, #620]	@ (80210a8 <ip4_reass+0x280>)
 8020e3a:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8020e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80210a8 <ip4_reass+0x280>)
 8020e3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8020e42:	3301      	adds	r3, #1
 8020e44:	4a98      	ldr	r2, [pc, #608]	@ (80210a8 <ip4_reass+0x280>)
 8020e46:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  fraghdr = (struct ip_hdr*)p->payload;
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	685b      	ldr	r3, [r3, #4]
 8020e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8020e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e52:	781b      	ldrb	r3, [r3, #0]
 8020e54:	f003 030f 	and.w	r3, r3, #15
 8020e58:	2b05      	cmp	r3, #5
 8020e5a:	d008      	beq.n	8020e6e <ip4_reass+0x46>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8020e5c:	4b92      	ldr	r3, [pc, #584]	@ (80210a8 <ip4_reass+0x280>)
 8020e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8020e62:	3301      	adds	r3, #1
 8020e64:	b29a      	uxth	r2, r3
 8020e66:	4b90      	ldr	r3, [pc, #576]	@ (80210a8 <ip4_reass+0x280>)
 8020e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 8020e6c:	e14c      	b.n	8021108 <ip4_reass+0x2e0>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8020e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e70:	88db      	ldrh	r3, [r3, #6]
 8020e72:	b29b      	uxth	r3, r3
 8020e74:	4618      	mov	r0, r3
 8020e76:	f7f3 ff25 	bl	8014cc4 <lwip_htons>
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020e80:	b29b      	uxth	r3, r3
 8020e82:	00db      	lsls	r3, r3, #3
 8020e84:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8020e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e88:	885b      	ldrh	r3, [r3, #2]
 8020e8a:	b29b      	uxth	r3, r3
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	f7f3 ff19 	bl	8014cc4 <lwip_htons>
 8020e92:	4603      	mov	r3, r0
 8020e94:	461a      	mov	r2, r3
 8020e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e98:	781b      	ldrb	r3, [r3, #0]
 8020e9a:	f003 030f 	and.w	r3, r3, #15
 8020e9e:	b29b      	uxth	r3, r3
 8020ea0:	009b      	lsls	r3, r3, #2
 8020ea2:	b29b      	uxth	r3, r3
 8020ea4:	1ad3      	subs	r3, r2, r3
 8020ea6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020ea8:	6878      	ldr	r0, [r7, #4]
 8020eaa:	f7f5 fa45 	bl	8016338 <pbuf_clen>
 8020eae:	4603      	mov	r3, r0
 8020eb0:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80210ac <ip4_reass+0x284>)
 8020eb4:	881b      	ldrh	r3, [r3, #0]
 8020eb6:	461a      	mov	r2, r3
 8020eb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020eba:	4413      	add	r3, r2
 8020ebc:	2b0a      	cmp	r3, #10
 8020ebe:	dd15      	ble.n	8020eec <ip4_reass+0xc4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020ec0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020ec2:	4619      	mov	r1, r3
 8020ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020ec6:	f7ff fd73 	bl	80209b0 <ip_reass_remove_oldest_datagram>
 8020eca:	4603      	mov	r3, r0
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d006      	beq.n	8020ede <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020ed0:	4b76      	ldr	r3, [pc, #472]	@ (80210ac <ip4_reass+0x284>)
 8020ed2:	881b      	ldrh	r3, [r3, #0]
 8020ed4:	461a      	mov	r2, r3
 8020ed6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020ed8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020eda:	2b0a      	cmp	r3, #10
 8020edc:	dd06      	ble.n	8020eec <ip4_reass+0xc4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8020ede:	4b72      	ldr	r3, [pc, #456]	@ (80210a8 <ip4_reass+0x280>)
 8020ee0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8020ee2:	3301      	adds	r3, #1
 8020ee4:	b29a      	uxth	r2, r3
 8020ee6:	4b70      	ldr	r3, [pc, #448]	@ (80210a8 <ip4_reass+0x280>)
 8020ee8:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8020eea:	e10d      	b.n	8021108 <ip4_reass+0x2e0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020eec:	4b70      	ldr	r3, [pc, #448]	@ (80210b0 <ip4_reass+0x288>)
 8020eee:	681b      	ldr	r3, [r3, #0]
 8020ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8020ef2:	e01e      	b.n	8020f32 <ip4_reass+0x10a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ef6:	695a      	ldr	r2, [r3, #20]
 8020ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020efa:	68db      	ldr	r3, [r3, #12]
 8020efc:	429a      	cmp	r2, r3
 8020efe:	d115      	bne.n	8020f2c <ip4_reass+0x104>
 8020f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f02:	699a      	ldr	r2, [r3, #24]
 8020f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f06:	691b      	ldr	r3, [r3, #16]
 8020f08:	429a      	cmp	r2, r3
 8020f0a:	d10f      	bne.n	8020f2c <ip4_reass+0x104>
 8020f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f0e:	899a      	ldrh	r2, [r3, #12]
 8020f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f12:	889b      	ldrh	r3, [r3, #4]
 8020f14:	b29b      	uxth	r3, r3
 8020f16:	429a      	cmp	r2, r3
 8020f18:	d108      	bne.n	8020f2c <ip4_reass+0x104>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8020f1a:	4b63      	ldr	r3, [pc, #396]	@ (80210a8 <ip4_reass+0x280>)
 8020f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8020f20:	3301      	adds	r3, #1
 8020f22:	b29a      	uxth	r2, r3
 8020f24:	4b60      	ldr	r3, [pc, #384]	@ (80210a8 <ip4_reass+0x280>)
 8020f26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8020f2a:	e005      	b.n	8020f38 <ip4_reass+0x110>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8020f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d1dd      	bne.n	8020ef4 <ip4_reass+0xcc>
    }
  }

  if (ipr == NULL) {
 8020f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d109      	bne.n	8020f52 <ip4_reass+0x12a>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8020f3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020f40:	4619      	mov	r1, r3
 8020f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020f44:	f7ff fd96 	bl	8020a74 <ip_reass_enqueue_new_datagram>
 8020f48:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8020f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d11c      	bne.n	8020f8a <ip4_reass+0x162>
      goto nullreturn;
 8020f50:	e0da      	b.n	8021108 <ip4_reass+0x2e0>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f54:	88db      	ldrh	r3, [r3, #6]
 8020f56:	b29b      	uxth	r3, r3
 8020f58:	4618      	mov	r0, r3
 8020f5a:	f7f3 feb3 	bl	8014cc4 <lwip_htons>
 8020f5e:	4603      	mov	r3, r0
 8020f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d110      	bne.n	8020f8a <ip4_reass+0x162>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f6a:	89db      	ldrh	r3, [r3, #14]
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f7f3 fea9 	bl	8014cc4 <lwip_htons>
 8020f72:	4603      	mov	r3, r0
 8020f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	d006      	beq.n	8020f8a <ip4_reass+0x162>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f7e:	3308      	adds	r3, #8
 8020f80:	2214      	movs	r2, #20
 8020f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020f84:	4618      	mov	r0, r3
 8020f86:	f001 fc5c 	bl	8022842 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f8c:	88db      	ldrh	r3, [r3, #6]
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	f003 0320 	and.w	r3, r3, #32
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	bf0c      	ite	eq
 8020f98:	2301      	moveq	r3, #1
 8020f9a:	2300      	movne	r3, #0
 8020f9c:	b2db      	uxtb	r3, r3
 8020f9e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020fa0:	69fb      	ldr	r3, [r7, #28]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d00e      	beq.n	8020fc4 <ip4_reass+0x19c>
    u16_t datagram_len = (u16_t)(offset + len);
 8020fa6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020faa:	4413      	add	r3, r2
 8020fac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020fae:	8b7a      	ldrh	r2, [r7, #26]
 8020fb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020fb2:	429a      	cmp	r2, r3
 8020fb4:	f0c0 80a5 	bcc.w	8021102 <ip4_reass+0x2da>
 8020fb8:	8b7b      	ldrh	r3, [r7, #26]
 8020fba:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8020fbe:	4293      	cmp	r3, r2
 8020fc0:	f200 809f 	bhi.w	8021102 <ip4_reass+0x2da>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020fc4:	69fa      	ldr	r2, [r7, #28]
 8020fc6:	6879      	ldr	r1, [r7, #4]
 8020fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020fca:	f7ff fdc3 	bl	8020b54 <ip_reass_chain_frag_into_datagram_and_validate>
 8020fce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020fd0:	697b      	ldr	r3, [r7, #20]
 8020fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fd6:	f000 8096 	beq.w	8021106 <ip4_reass+0x2de>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020fda:	4b34      	ldr	r3, [pc, #208]	@ (80210ac <ip4_reass+0x284>)
 8020fdc:	881a      	ldrh	r2, [r3, #0]
 8020fde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020fe0:	4413      	add	r3, r2
 8020fe2:	b29a      	uxth	r2, r3
 8020fe4:	4b31      	ldr	r3, [pc, #196]	@ (80210ac <ip4_reass+0x284>)
 8020fe6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020fe8:	69fb      	ldr	r3, [r7, #28]
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d00d      	beq.n	802100a <ip4_reass+0x1e2>
    u16_t datagram_len = (u16_t)(offset + len);
 8020fee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020ff2:	4413      	add	r3, r2
 8020ff4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8020ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ff8:	8a7a      	ldrh	r2, [r7, #18]
 8020ffa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ffe:	7f9b      	ldrb	r3, [r3, #30]
 8021000:	f043 0301 	orr.w	r3, r3, #1
 8021004:	b2da      	uxtb	r2, r3
 8021006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021008:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802100a:	697b      	ldr	r3, [r7, #20]
 802100c:	2b01      	cmp	r3, #1
 802100e:	d176      	bne.n	80210fe <ip4_reass+0x2d6>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8021010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021012:	8b9b      	ldrh	r3, [r3, #28]
 8021014:	3314      	adds	r3, #20
 8021016:	b29a      	uxth	r2, r3
 8021018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802101a:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 802101c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802101e:	685b      	ldr	r3, [r3, #4]
 8021020:	685b      	ldr	r3, [r3, #4]
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8021026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021028:	685b      	ldr	r3, [r3, #4]
 802102a:	685b      	ldr	r3, [r3, #4]
 802102c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021030:	3308      	adds	r3, #8
 8021032:	2214      	movs	r2, #20
 8021034:	4619      	mov	r1, r3
 8021036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021038:	f001 fc03 	bl	8022842 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 802103c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802103e:	8b9b      	ldrh	r3, [r3, #28]
 8021040:	4618      	mov	r0, r3
 8021042:	f7f3 fe3f 	bl	8014cc4 <lwip_htons>
 8021046:	4603      	mov	r3, r0
 8021048:	461a      	mov	r2, r3
 802104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802104c:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802104e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021050:	2200      	movs	r2, #0
 8021052:	719a      	strb	r2, [r3, #6]
 8021054:	2200      	movs	r2, #0
 8021056:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802105a:	2200      	movs	r2, #0
 802105c:	729a      	strb	r2, [r3, #10]
 802105e:	2200      	movs	r2, #0
 8021060:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021064:	685b      	ldr	r3, [r3, #4]
 8021066:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021068:	e00e      	b.n	8021088 <ip4_reass+0x260>
      iprh = (struct ip_reass_helper*)r->payload;
 802106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802106c:	685b      	ldr	r3, [r3, #4]
 802106e:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8021070:	f06f 0113 	mvn.w	r1, #19
 8021074:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8021076:	f7f5 f8a7 	bl	80161c8 <pbuf_header>
      pbuf_cat(p, r);
 802107a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802107c:	6878      	ldr	r0, [r7, #4]
 802107e:	f7f5 f993 	bl	80163a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8021088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802108a:	2b00      	cmp	r3, #0
 802108c:	d1ed      	bne.n	802106a <ip4_reass+0x242>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802108e:	4b08      	ldr	r3, [pc, #32]	@ (80210b0 <ip4_reass+0x288>)
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021094:	429a      	cmp	r2, r3
 8021096:	d102      	bne.n	802109e <ip4_reass+0x276>
      ipr_prev = NULL;
 8021098:	2300      	movs	r3, #0
 802109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802109c:	e017      	b.n	80210ce <ip4_reass+0x2a6>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802109e:	4b04      	ldr	r3, [pc, #16]	@ (80210b0 <ip4_reass+0x288>)
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80210a4:	e00e      	b.n	80210c4 <ip4_reass+0x29c>
 80210a6:	bf00      	nop
 80210a8:	2000bbec 	.word	0x2000bbec
 80210ac:	2000bf20 	.word	0x2000bf20
 80210b0:	2000bf1c 	.word	0x2000bf1c
        if (ipr_prev->next == ipr) {
 80210b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80210ba:	429a      	cmp	r2, r3
 80210bc:	d006      	beq.n	80210cc <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80210be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80210c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d1f4      	bne.n	80210b4 <ip4_reass+0x28c>
 80210ca:	e000      	b.n	80210ce <ip4_reass+0x2a6>
          break;
 80210cc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80210ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80210d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80210d2:	f7ff fd11 	bl	8020af8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80210d6:	6878      	ldr	r0, [r7, #4]
 80210d8:	f7f5 f92e 	bl	8016338 <pbuf_clen>
 80210dc:	4603      	mov	r3, r0
 80210de:	461a      	mov	r2, r3
 80210e0:	4b10      	ldr	r3, [pc, #64]	@ (8021124 <ip4_reass+0x2fc>)
 80210e2:	881b      	ldrh	r3, [r3, #0]
 80210e4:	1a9b      	subs	r3, r3, r2
 80210e6:	b29a      	uxth	r2, r3
 80210e8:	4b0e      	ldr	r3, [pc, #56]	@ (8021124 <ip4_reass+0x2fc>)
 80210ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 80210ec:	4b0e      	ldr	r3, [pc, #56]	@ (8021128 <ip4_reass+0x300>)
 80210ee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80210f2:	3301      	adds	r3, #1
 80210f4:	4a0c      	ldr	r2, [pc, #48]	@ (8021128 <ip4_reass+0x300>)
 80210f6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    /* Return the pbuf chain */
    return p;
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	e00e      	b.n	802111c <ip4_reass+0x2f4>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80210fe:	2300      	movs	r3, #0
 8021100:	e00c      	b.n	802111c <ip4_reass+0x2f4>
      goto nullreturn;
 8021102:	bf00      	nop
 8021104:	e000      	b.n	8021108 <ip4_reass+0x2e0>
    goto nullreturn;
 8021106:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8021108:	4b07      	ldr	r3, [pc, #28]	@ (8021128 <ip4_reass+0x300>)
 802110a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 802110c:	3301      	adds	r3, #1
 802110e:	b29a      	uxth	r2, r3
 8021110:	4b05      	ldr	r3, [pc, #20]	@ (8021128 <ip4_reass+0x300>)
 8021112:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 8021114:	6878      	ldr	r0, [r7, #4]
 8021116:	f7f5 f87b 	bl	8016210 <pbuf_free>
  return NULL;
 802111a:	2300      	movs	r3, #0
}
 802111c:	4618      	mov	r0, r3
 802111e:	3738      	adds	r7, #56	@ 0x38
 8021120:	46bd      	mov	sp, r7
 8021122:	bd80      	pop	{r7, pc}
 8021124:	2000bf20 	.word	0x2000bf20
 8021128:	2000bbec 	.word	0x2000bbec

0802112c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 802112c:	b580      	push	{r7, lr}
 802112e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8021130:	2005      	movs	r0, #5
 8021132:	f7f4 fa71 	bl	8015618 <memp_malloc>
 8021136:	4603      	mov	r3, r0
}
 8021138:	4618      	mov	r0, r3
 802113a:	bd80      	pop	{r7, pc}

0802113c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 802113c:	b580      	push	{r7, lr}
 802113e:	b082      	sub	sp, #8
 8021140:	af00      	add	r7, sp, #0
 8021142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	2b00      	cmp	r3, #0
 8021148:	d106      	bne.n	8021158 <ip_frag_free_pbuf_custom_ref+0x1c>
 802114a:	4b07      	ldr	r3, [pc, #28]	@ (8021168 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802114c:	f240 22ae 	movw	r2, #686	@ 0x2ae
 8021150:	4906      	ldr	r1, [pc, #24]	@ (802116c <ip_frag_free_pbuf_custom_ref+0x30>)
 8021152:	4807      	ldr	r0, [pc, #28]	@ (8021170 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021154:	f001 f87a 	bl	802224c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021158:	6879      	ldr	r1, [r7, #4]
 802115a:	2005      	movs	r0, #5
 802115c:	f7f4 faae 	bl	80156bc <memp_free>
}
 8021160:	bf00      	nop
 8021162:	3708      	adds	r7, #8
 8021164:	46bd      	mov	sp, r7
 8021166:	bd80      	pop	{r7, pc}
 8021168:	08027d04 	.word	0x08027d04
 802116c:	08027e6c 	.word	0x08027e6c
 8021170:	08027d4c 	.word	0x08027d4c

08021174 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021174:	b580      	push	{r7, lr}
 8021176:	b084      	sub	sp, #16
 8021178:	af00      	add	r7, sp, #0
 802117a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021180:	68fb      	ldr	r3, [r7, #12]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d106      	bne.n	8021194 <ipfrag_free_pbuf_custom+0x20>
 8021186:	4b11      	ldr	r3, [pc, #68]	@ (80211cc <ipfrag_free_pbuf_custom+0x58>)
 8021188:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 802118c:	4910      	ldr	r1, [pc, #64]	@ (80211d0 <ipfrag_free_pbuf_custom+0x5c>)
 802118e:	4811      	ldr	r0, [pc, #68]	@ (80211d4 <ipfrag_free_pbuf_custom+0x60>)
 8021190:	f001 f85c 	bl	802224c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8021194:	68fa      	ldr	r2, [r7, #12]
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	429a      	cmp	r2, r3
 802119a:	d006      	beq.n	80211aa <ipfrag_free_pbuf_custom+0x36>
 802119c:	4b0b      	ldr	r3, [pc, #44]	@ (80211cc <ipfrag_free_pbuf_custom+0x58>)
 802119e:	f240 22b9 	movw	r2, #697	@ 0x2b9
 80211a2:	490d      	ldr	r1, [pc, #52]	@ (80211d8 <ipfrag_free_pbuf_custom+0x64>)
 80211a4:	480b      	ldr	r0, [pc, #44]	@ (80211d4 <ipfrag_free_pbuf_custom+0x60>)
 80211a6:	f001 f851 	bl	802224c <iprintf>
  if (pcr->original != NULL) {
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	695b      	ldr	r3, [r3, #20]
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d004      	beq.n	80211bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80211b2:	68fb      	ldr	r3, [r7, #12]
 80211b4:	695b      	ldr	r3, [r3, #20]
 80211b6:	4618      	mov	r0, r3
 80211b8:	f7f5 f82a 	bl	8016210 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80211bc:	68f8      	ldr	r0, [r7, #12]
 80211be:	f7ff ffbd 	bl	802113c <ip_frag_free_pbuf_custom_ref>
}
 80211c2:	bf00      	nop
 80211c4:	3710      	adds	r7, #16
 80211c6:	46bd      	mov	sp, r7
 80211c8:	bd80      	pop	{r7, pc}
 80211ca:	bf00      	nop
 80211cc:	08027d04 	.word	0x08027d04
 80211d0:	08027e78 	.word	0x08027e78
 80211d4:	08027d4c 	.word	0x08027d4c
 80211d8:	08027e84 	.word	0x08027e84

080211dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80211dc:	b580      	push	{r7, lr}
 80211de:	b092      	sub	sp, #72	@ 0x48
 80211e0:	af02      	add	r7, sp, #8
 80211e2:	60f8      	str	r0, [r7, #12]
 80211e4:	60b9      	str	r1, [r7, #8]
 80211e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80211e8:	2300      	movs	r3, #0
 80211ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80211ec:	68bb      	ldr	r3, [r7, #8]
 80211ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80211f0:	3b14      	subs	r3, #20
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	da00      	bge.n	80211f8 <ip4_frag+0x1c>
 80211f6:	3307      	adds	r3, #7
 80211f8:	10db      	asrs	r3, r3, #3
 80211fa:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80211fc:	2314      	movs	r3, #20
 80211fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	685b      	ldr	r3, [r3, #4]
 8021204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 8021206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021208:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 802120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802120c:	781b      	ldrb	r3, [r3, #0]
 802120e:	f003 030f 	and.w	r3, r3, #15
 8021212:	2b05      	cmp	r3, #5
 8021214:	d009      	beq.n	802122a <ip4_frag+0x4e>
 8021216:	4b84      	ldr	r3, [pc, #528]	@ (8021428 <ip4_frag+0x24c>)
 8021218:	f240 22e1 	movw	r2, #737	@ 0x2e1
 802121c:	4983      	ldr	r1, [pc, #524]	@ (802142c <ip4_frag+0x250>)
 802121e:	4884      	ldr	r0, [pc, #528]	@ (8021430 <ip4_frag+0x254>)
 8021220:	f001 f814 	bl	802224c <iprintf>
 8021224:	f06f 0305 	mvn.w	r3, #5
 8021228:	e0fa      	b.n	8021420 <ip4_frag+0x244>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802122c:	88db      	ldrh	r3, [r3, #6]
 802122e:	b29b      	uxth	r3, r3
 8021230:	4618      	mov	r0, r3
 8021232:	f7f3 fd47 	bl	8014cc4 <lwip_htons>
 8021236:	4603      	mov	r3, r0
 8021238:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 802123a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 802123c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021240:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8021242:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8021248:	2b00      	cmp	r3, #0
 802124a:	d009      	beq.n	8021260 <ip4_frag+0x84>
 802124c:	4b76      	ldr	r3, [pc, #472]	@ (8021428 <ip4_frag+0x24c>)
 802124e:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8021252:	4978      	ldr	r1, [pc, #480]	@ (8021434 <ip4_frag+0x258>)
 8021254:	4876      	ldr	r0, [pc, #472]	@ (8021430 <ip4_frag+0x254>)
 8021256:	f000 fff9 	bl	802224c <iprintf>
 802125a:	f06f 0305 	mvn.w	r3, #5
 802125e:	e0df      	b.n	8021420 <ip4_frag+0x244>

  left = p->tot_len - IP_HLEN;
 8021260:	68fb      	ldr	r3, [r7, #12]
 8021262:	891b      	ldrh	r3, [r3, #8]
 8021264:	3b14      	subs	r3, #20
 8021266:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 8021268:	e0c3      	b.n	80213f2 <ip4_frag+0x216>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 802126a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 802126c:	00da      	lsls	r2, r3, #3
 802126e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8021270:	4293      	cmp	r3, r2
 8021272:	bfa8      	it	ge
 8021274:	4613      	movge	r3, r2
 8021276:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021278:	2200      	movs	r2, #0
 802127a:	2114      	movs	r1, #20
 802127c:	2002      	movs	r0, #2
 802127e:	f7f4 fc4f 	bl	8015b20 <pbuf_alloc>
 8021282:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8021284:	6a3b      	ldr	r3, [r7, #32]
 8021286:	2b00      	cmp	r3, #0
 8021288:	f000 80c0 	beq.w	802140c <ip4_frag+0x230>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802128c:	68fb      	ldr	r3, [r7, #12]
 802128e:	895b      	ldrh	r3, [r3, #10]
 8021290:	2b13      	cmp	r3, #19
 8021292:	d806      	bhi.n	80212a2 <ip4_frag+0xc6>
 8021294:	4b64      	ldr	r3, [pc, #400]	@ (8021428 <ip4_frag+0x24c>)
 8021296:	f44f 7242 	mov.w	r2, #776	@ 0x308
 802129a:	4967      	ldr	r1, [pc, #412]	@ (8021438 <ip4_frag+0x25c>)
 802129c:	4864      	ldr	r0, [pc, #400]	@ (8021430 <ip4_frag+0x254>)
 802129e:	f000 ffd5 	bl	802224c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80212a2:	6a3b      	ldr	r3, [r7, #32]
 80212a4:	685b      	ldr	r3, [r3, #4]
 80212a6:	2214      	movs	r2, #20
 80212a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80212aa:	4618      	mov	r0, r3
 80212ac:	f001 fac9 	bl	8022842 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80212b0:	6a3b      	ldr	r3, [r7, #32]
 80212b2:	685b      	ldr	r3, [r3, #4]
 80212b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 80212b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80212b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 80212ba:	e04f      	b.n	802135c <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	895a      	ldrh	r2, [r3, #10]
 80212c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80212c2:	1ad3      	subs	r3, r2, r3
 80212c4:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80212c6:	8b7a      	ldrh	r2, [r7, #26]
 80212c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80212ca:	4293      	cmp	r3, r2
 80212cc:	bf28      	it	cs
 80212ce:	4613      	movcs	r3, r2
 80212d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80212d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d105      	bne.n	80212e4 <ip4_frag+0x108>
        poff = 0;
 80212d8:	2300      	movs	r3, #0
 80212da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 80212dc:	68fb      	ldr	r3, [r7, #12]
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	60fb      	str	r3, [r7, #12]
        continue;
 80212e2:	e03b      	b.n	802135c <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80212e4:	f7ff ff22 	bl	802112c <ip_frag_alloc_pbuf_custom_ref>
 80212e8:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80212ea:	697b      	ldr	r3, [r7, #20]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d103      	bne.n	80212f8 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 80212f0:	6a38      	ldr	r0, [r7, #32]
 80212f2:	f7f4 ff8d 	bl	8016210 <pbuf_free>
        goto memerr;
 80212f6:	e08a      	b.n	802140e <ip4_frag+0x232>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80212f8:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80212fa:	68fb      	ldr	r3, [r7, #12]
 80212fc:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80212fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021300:	4413      	add	r3, r2
 8021302:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8021304:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8021306:	9201      	str	r2, [sp, #4]
 8021308:	9300      	str	r3, [sp, #0]
 802130a:	4603      	mov	r3, r0
 802130c:	2202      	movs	r2, #2
 802130e:	2004      	movs	r0, #4
 8021310:	f7f4 fda0 	bl	8015e54 <pbuf_alloced_custom>
 8021314:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8021316:	693b      	ldr	r3, [r7, #16]
 8021318:	2b00      	cmp	r3, #0
 802131a:	d106      	bne.n	802132a <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 802131c:	6978      	ldr	r0, [r7, #20]
 802131e:	f7ff ff0d 	bl	802113c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021322:	6a38      	ldr	r0, [r7, #32]
 8021324:	f7f4 ff74 	bl	8016210 <pbuf_free>
        goto memerr;
 8021328:	e071      	b.n	802140e <ip4_frag+0x232>
      }
      pbuf_ref(p);
 802132a:	68f8      	ldr	r0, [r7, #12]
 802132c:	f7f5 f81a 	bl	8016364 <pbuf_ref>
      pcr->original = p;
 8021330:	697b      	ldr	r3, [r7, #20]
 8021332:	68fa      	ldr	r2, [r7, #12]
 8021334:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021336:	697b      	ldr	r3, [r7, #20]
 8021338:	4a40      	ldr	r2, [pc, #256]	@ (802143c <ip4_frag+0x260>)
 802133a:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802133c:	6939      	ldr	r1, [r7, #16]
 802133e:	6a38      	ldr	r0, [r7, #32]
 8021340:	f7f5 f832 	bl	80163a8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8021344:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8021346:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8021348:	1ad3      	subs	r3, r2, r3
 802134a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 802134c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802134e:	2b00      	cmp	r3, #0
 8021350:	d004      	beq.n	802135c <ip4_frag+0x180>
        poff = 0;
 8021352:	2300      	movs	r3, #0
 8021354:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8021356:	68fb      	ldr	r3, [r7, #12]
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802135c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802135e:	2b00      	cmp	r3, #0
 8021360:	d1ac      	bne.n	80212bc <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8021362:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021364:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8021366:	4413      	add	r3, r2
 8021368:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802136a:	68bb      	ldr	r3, [r7, #8]
 802136c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802136e:	f1a3 0213 	sub.w	r2, r3, #19
 8021372:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8021374:	429a      	cmp	r2, r3
 8021376:	bfcc      	ite	gt
 8021378:	2301      	movgt	r3, #1
 802137a:	2300      	movle	r3, #0
 802137c:	b2db      	uxtb	r3, r3
 802137e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021380:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8021382:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021386:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 8021388:	69fb      	ldr	r3, [r7, #28]
 802138a:	2b00      	cmp	r3, #0
 802138c:	d103      	bne.n	8021396 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 802138e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021390:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021394:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021396:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021398:	4618      	mov	r0, r3
 802139a:	f7f3 fc93 	bl	8014cc4 <lwip_htons>
 802139e:	4603      	mov	r3, r0
 80213a0:	461a      	mov	r2, r3
 80213a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80213a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80213a8:	3314      	adds	r3, #20
 80213aa:	b29b      	uxth	r3, r3
 80213ac:	4618      	mov	r0, r3
 80213ae:	f7f3 fc89 	bl	8014cc4 <lwip_htons>
 80213b2:	4603      	mov	r3, r0
 80213b4:	461a      	mov	r2, r3
 80213b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80213ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213bc:	2200      	movs	r2, #0
 80213be:	729a      	strb	r2, [r3, #10]
 80213c0:	2200      	movs	r2, #0
 80213c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80213c4:	68bb      	ldr	r3, [r7, #8]
 80213c6:	695b      	ldr	r3, [r3, #20]
 80213c8:	687a      	ldr	r2, [r7, #4]
 80213ca:	6a39      	ldr	r1, [r7, #32]
 80213cc:	68b8      	ldr	r0, [r7, #8]
 80213ce:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80213d0:	4b1b      	ldr	r3, [pc, #108]	@ (8021440 <ip4_frag+0x264>)
 80213d2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80213d4:	3301      	adds	r3, #1
 80213d6:	b29a      	uxth	r2, r3
 80213d8:	4b19      	ldr	r3, [pc, #100]	@ (8021440 <ip4_frag+0x264>)
 80213da:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80213dc:	6a38      	ldr	r0, [r7, #32]
 80213de:	f7f4 ff17 	bl	8016210 <pbuf_free>
    left -= fragsize;
 80213e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80213e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80213e6:	1ad3      	subs	r3, r2, r3
 80213e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 80213ea:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80213ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80213ee:	4413      	add	r3, r2
 80213f0:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 80213f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f47f af38 	bne.w	802126a <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 80213fa:	4b11      	ldr	r3, [pc, #68]	@ (8021440 <ip4_frag+0x264>)
 80213fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8021400:	3301      	adds	r3, #1
 8021402:	4a0f      	ldr	r2, [pc, #60]	@ (8021440 <ip4_frag+0x264>)
 8021404:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  return ERR_OK;
 8021408:	2300      	movs	r3, #0
 802140a:	e009      	b.n	8021420 <ip4_frag+0x244>
      goto memerr;
 802140c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 802140e:	4b0c      	ldr	r3, [pc, #48]	@ (8021440 <ip4_frag+0x264>)
 8021410:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8021414:	3301      	adds	r3, #1
 8021416:	4a0a      	ldr	r2, [pc, #40]	@ (8021440 <ip4_frag+0x264>)
 8021418:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  return ERR_MEM;
 802141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021420:	4618      	mov	r0, r3
 8021422:	3740      	adds	r7, #64	@ 0x40
 8021424:	46bd      	mov	sp, r7
 8021426:	bd80      	pop	{r7, pc}
 8021428:	08027d04 	.word	0x08027d04
 802142c:	08027e90 	.word	0x08027e90
 8021430:	08027d4c 	.word	0x08027d4c
 8021434:	08027eb8 	.word	0x08027eb8
 8021438:	08027ed4 	.word	0x08027ed4
 802143c:	08021175 	.word	0x08021175
 8021440:	2000bbec 	.word	0x2000bbec

08021444 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b086      	sub	sp, #24
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]
 802144c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 802144e:	230e      	movs	r3, #14
 8021450:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	895b      	ldrh	r3, [r3, #10]
 8021456:	2b0e      	cmp	r3, #14
 8021458:	d811      	bhi.n	802147e <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 802145a:	4b5b      	ldr	r3, [pc, #364]	@ (80215c8 <ethernet_input+0x184>)
 802145c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802145e:	3301      	adds	r3, #1
 8021460:	b29a      	uxth	r2, r3
 8021462:	4b59      	ldr	r3, [pc, #356]	@ (80215c8 <ethernet_input+0x184>)
 8021464:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8021466:	4b58      	ldr	r3, [pc, #352]	@ (80215c8 <ethernet_input+0x184>)
 8021468:	8bdb      	ldrh	r3, [r3, #30]
 802146a:	3301      	adds	r3, #1
 802146c:	b29a      	uxth	r2, r3
 802146e:	4b56      	ldr	r3, [pc, #344]	@ (80215c8 <ethernet_input+0x184>)
 8021470:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 8021472:	683b      	ldr	r3, [r7, #0]
 8021474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021476:	1c5a      	adds	r2, r3, #1
 8021478:	683b      	ldr	r3, [r7, #0]
 802147a:	651a      	str	r2, [r3, #80]	@ 0x50
    goto free_and_return;
 802147c:	e09b      	b.n	80215b6 <ethernet_input+0x172>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	685b      	ldr	r3, [r3, #4]
 8021482:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021484:	693b      	ldr	r3, [r7, #16]
 8021486:	7b1a      	ldrb	r2, [r3, #12]
 8021488:	7b5b      	ldrb	r3, [r3, #13]
 802148a:	021b      	lsls	r3, r3, #8
 802148c:	4313      	orrs	r3, r2
 802148e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021490:	693b      	ldr	r3, [r7, #16]
 8021492:	781b      	ldrb	r3, [r3, #0]
 8021494:	f003 0301 	and.w	r3, r3, #1
 8021498:	2b00      	cmp	r3, #0
 802149a:	d023      	beq.n	80214e4 <ethernet_input+0xa0>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802149c:	693b      	ldr	r3, [r7, #16]
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	2b01      	cmp	r3, #1
 80214a2:	d10f      	bne.n	80214c4 <ethernet_input+0x80>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80214a4:	693b      	ldr	r3, [r7, #16]
 80214a6:	785b      	ldrb	r3, [r3, #1]
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d11b      	bne.n	80214e4 <ethernet_input+0xa0>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80214ac:	693b      	ldr	r3, [r7, #16]
 80214ae:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80214b0:	2b5e      	cmp	r3, #94	@ 0x5e
 80214b2:	d117      	bne.n	80214e4 <ethernet_input+0xa0>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	7b5b      	ldrb	r3, [r3, #13]
 80214b8:	f043 0310 	orr.w	r3, r3, #16
 80214bc:	b2da      	uxtb	r2, r3
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	735a      	strb	r2, [r3, #13]
 80214c2:	e00f      	b.n	80214e4 <ethernet_input+0xa0>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80214c4:	693b      	ldr	r3, [r7, #16]
 80214c6:	2206      	movs	r2, #6
 80214c8:	4940      	ldr	r1, [pc, #256]	@ (80215cc <ethernet_input+0x188>)
 80214ca:	4618      	mov	r0, r3
 80214cc:	f001 f86a 	bl	80225a4 <memcmp>
 80214d0:	4603      	mov	r3, r0
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d106      	bne.n	80214e4 <ethernet_input+0xa0>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80214d6:	687b      	ldr	r3, [r7, #4]
 80214d8:	7b5b      	ldrb	r3, [r3, #13]
 80214da:	f043 0308 	orr.w	r3, r3, #8
 80214de:	b2da      	uxtb	r2, r3
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80214e4:	89fb      	ldrh	r3, [r7, #14]
 80214e6:	2b08      	cmp	r3, #8
 80214e8:	d003      	beq.n	80214f2 <ethernet_input+0xae>
 80214ea:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80214ee:	d01e      	beq.n	802152e <ethernet_input+0xea>
 80214f0:	e048      	b.n	8021584 <ethernet_input+0x140>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80214f2:	683b      	ldr	r3, [r7, #0]
 80214f4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80214f8:	f003 0308 	and.w	r3, r3, #8
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d055      	beq.n	80215ac <ethernet_input+0x168>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	895b      	ldrh	r3, [r3, #10]
 8021504:	461a      	mov	r2, r3
 8021506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802150a:	429a      	cmp	r2, r3
 802150c:	db50      	blt.n	80215b0 <ethernet_input+0x16c>
 802150e:	8afb      	ldrh	r3, [r7, #22]
 8021510:	425b      	negs	r3, r3
 8021512:	b29b      	uxth	r3, r3
 8021514:	b21b      	sxth	r3, r3
 8021516:	4619      	mov	r1, r3
 8021518:	6878      	ldr	r0, [r7, #4]
 802151a:	f7f4 fe55 	bl	80161c8 <pbuf_header>
 802151e:	4603      	mov	r3, r0
 8021520:	2b00      	cmp	r3, #0
 8021522:	d145      	bne.n	80215b0 <ethernet_input+0x16c>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8021524:	6839      	ldr	r1, [r7, #0]
 8021526:	6878      	ldr	r0, [r7, #4]
 8021528:	f7fe fc5a 	bl	801fde0 <ip4_input>
      }
      break;
 802152c:	e03c      	b.n	80215a8 <ethernet_input+0x164>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802152e:	683b      	ldr	r3, [r7, #0]
 8021530:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8021534:	f003 0308 	and.w	r3, r3, #8
 8021538:	2b00      	cmp	r3, #0
 802153a:	d03b      	beq.n	80215b4 <ethernet_input+0x170>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	895b      	ldrh	r3, [r3, #10]
 8021540:	461a      	mov	r2, r3
 8021542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021546:	429a      	cmp	r2, r3
 8021548:	db0a      	blt.n	8021560 <ethernet_input+0x11c>
 802154a:	8afb      	ldrh	r3, [r7, #22]
 802154c:	425b      	negs	r3, r3
 802154e:	b29b      	uxth	r3, r3
 8021550:	b21b      	sxth	r3, r3
 8021552:	4619      	mov	r1, r3
 8021554:	6878      	ldr	r0, [r7, #4]
 8021556:	f7f4 fe37 	bl	80161c8 <pbuf_header>
 802155a:	4603      	mov	r3, r0
 802155c:	2b00      	cmp	r3, #0
 802155e:	d00c      	beq.n	802157a <ethernet_input+0x136>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8021560:	4b19      	ldr	r3, [pc, #100]	@ (80215c8 <ethernet_input+0x184>)
 8021562:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8021564:	3301      	adds	r3, #1
 8021566:	b29a      	uxth	r2, r3
 8021568:	4b17      	ldr	r3, [pc, #92]	@ (80215c8 <ethernet_input+0x184>)
 802156a:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 802156c:	4b16      	ldr	r3, [pc, #88]	@ (80215c8 <ethernet_input+0x184>)
 802156e:	8bdb      	ldrh	r3, [r3, #30]
 8021570:	3301      	adds	r3, #1
 8021572:	b29a      	uxth	r2, r3
 8021574:	4b14      	ldr	r3, [pc, #80]	@ (80215c8 <ethernet_input+0x184>)
 8021576:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8021578:	e01d      	b.n	80215b6 <ethernet_input+0x172>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 802157a:	6839      	ldr	r1, [r7, #0]
 802157c:	6878      	ldr	r0, [r7, #4]
 802157e:	f7fd fcc9 	bl	801ef14 <etharp_input>
      }
      break;
 8021582:	e011      	b.n	80215a8 <ethernet_input+0x164>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8021584:	4b10      	ldr	r3, [pc, #64]	@ (80215c8 <ethernet_input+0x184>)
 8021586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8021588:	3301      	adds	r3, #1
 802158a:	b29a      	uxth	r2, r3
 802158c:	4b0e      	ldr	r3, [pc, #56]	@ (80215c8 <ethernet_input+0x184>)
 802158e:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8021590:	4b0d      	ldr	r3, [pc, #52]	@ (80215c8 <ethernet_input+0x184>)
 8021592:	8bdb      	ldrh	r3, [r3, #30]
 8021594:	3301      	adds	r3, #1
 8021596:	b29a      	uxth	r2, r3
 8021598:	4b0b      	ldr	r3, [pc, #44]	@ (80215c8 <ethernet_input+0x184>)
 802159a:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 802159c:	683b      	ldr	r3, [r7, #0]
 802159e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215a0:	1c5a      	adds	r2, r3, #1
 80215a2:	683b      	ldr	r3, [r7, #0]
 80215a4:	655a      	str	r2, [r3, #84]	@ 0x54
      goto free_and_return;
 80215a6:	e006      	b.n	80215b6 <ethernet_input+0x172>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80215a8:	2300      	movs	r3, #0
 80215aa:	e008      	b.n	80215be <ethernet_input+0x17a>
        goto free_and_return;
 80215ac:	bf00      	nop
 80215ae:	e002      	b.n	80215b6 <ethernet_input+0x172>
        goto free_and_return;
 80215b0:	bf00      	nop
 80215b2:	e000      	b.n	80215b6 <ethernet_input+0x172>
        goto free_and_return;
 80215b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80215b6:	6878      	ldr	r0, [r7, #4]
 80215b8:	f7f4 fe2a 	bl	8016210 <pbuf_free>
  return ERR_OK;
 80215bc:	2300      	movs	r3, #0
}
 80215be:	4618      	mov	r0, r3
 80215c0:	3718      	adds	r7, #24
 80215c2:	46bd      	mov	sp, r7
 80215c4:	bd80      	pop	{r7, pc}
 80215c6:	bf00      	nop
 80215c8:	2000bbec 	.word	0x2000bbec
 80215cc:	08032ed8 	.word	0x08032ed8

080215d0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80215d0:	b580      	push	{r7, lr}
 80215d2:	b086      	sub	sp, #24
 80215d4:	af00      	add	r7, sp, #0
 80215d6:	60f8      	str	r0, [r7, #12]
 80215d8:	60b9      	str	r1, [r7, #8]
 80215da:	607a      	str	r2, [r7, #4]
 80215dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80215de:	8c3b      	ldrh	r3, [r7, #32]
 80215e0:	4618      	mov	r0, r3
 80215e2:	f7f3 fb6f 	bl	8014cc4 <lwip_htons>
 80215e6:	4603      	mov	r3, r0
 80215e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80215ea:	210e      	movs	r1, #14
 80215ec:	68b8      	ldr	r0, [r7, #8]
 80215ee:	f7f4 fdeb 	bl	80161c8 <pbuf_header>
 80215f2:	4603      	mov	r3, r0
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d125      	bne.n	8021644 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80215f8:	68bb      	ldr	r3, [r7, #8]
 80215fa:	685b      	ldr	r3, [r3, #4]
 80215fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80215fe:	693b      	ldr	r3, [r7, #16]
 8021600:	8afa      	ldrh	r2, [r7, #22]
 8021602:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8021604:	693b      	ldr	r3, [r7, #16]
 8021606:	2206      	movs	r2, #6
 8021608:	6839      	ldr	r1, [r7, #0]
 802160a:	4618      	mov	r0, r3
 802160c:	f001 f919 	bl	8022842 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8021610:	693b      	ldr	r3, [r7, #16]
 8021612:	3306      	adds	r3, #6
 8021614:	2206      	movs	r2, #6
 8021616:	6879      	ldr	r1, [r7, #4]
 8021618:	4618      	mov	r0, r3
 802161a:	f001 f912 	bl	8022842 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802161e:	68fb      	ldr	r3, [r7, #12]
 8021620:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021624:	2b06      	cmp	r3, #6
 8021626:	d006      	beq.n	8021636 <ethernet_output+0x66>
 8021628:	4b0d      	ldr	r3, [pc, #52]	@ (8021660 <ethernet_output+0x90>)
 802162a:	f240 122b 	movw	r2, #299	@ 0x12b
 802162e:	490d      	ldr	r1, [pc, #52]	@ (8021664 <ethernet_output+0x94>)
 8021630:	480d      	ldr	r0, [pc, #52]	@ (8021668 <ethernet_output+0x98>)
 8021632:	f000 fe0b 	bl	802224c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	699b      	ldr	r3, [r3, #24]
 802163a:	68b9      	ldr	r1, [r7, #8]
 802163c:	68f8      	ldr	r0, [r7, #12]
 802163e:	4798      	blx	r3
 8021640:	4603      	mov	r3, r0
 8021642:	e008      	b.n	8021656 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8021644:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8021646:	4b09      	ldr	r3, [pc, #36]	@ (802166c <ethernet_output+0x9c>)
 8021648:	895b      	ldrh	r3, [r3, #10]
 802164a:	3301      	adds	r3, #1
 802164c:	b29a      	uxth	r2, r3
 802164e:	4b07      	ldr	r3, [pc, #28]	@ (802166c <ethernet_output+0x9c>)
 8021650:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8021652:	f06f 0301 	mvn.w	r3, #1
}
 8021656:	4618      	mov	r0, r3
 8021658:	3718      	adds	r7, #24
 802165a:	46bd      	mov	sp, r7
 802165c:	bd80      	pop	{r7, pc}
 802165e:	bf00      	nop
 8021660:	08027ef4 	.word	0x08027ef4
 8021664:	08027f2c 	.word	0x08027f2c
 8021668:	08027f60 	.word	0x08027f60
 802166c:	2000bbec 	.word	0x2000bbec

08021670 <atoi>:
 8021670:	220a      	movs	r2, #10
 8021672:	2100      	movs	r1, #0
 8021674:	f000 b8ba 	b.w	80217ec <strtol>

08021678 <rand>:
 8021678:	4b16      	ldr	r3, [pc, #88]	@ (80216d4 <rand+0x5c>)
 802167a:	b510      	push	{r4, lr}
 802167c:	681c      	ldr	r4, [r3, #0]
 802167e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021680:	b9b3      	cbnz	r3, 80216b0 <rand+0x38>
 8021682:	2018      	movs	r0, #24
 8021684:	f001 ffb0 	bl	80235e8 <malloc>
 8021688:	4602      	mov	r2, r0
 802168a:	6320      	str	r0, [r4, #48]	@ 0x30
 802168c:	b920      	cbnz	r0, 8021698 <rand+0x20>
 802168e:	2152      	movs	r1, #82	@ 0x52
 8021690:	4b11      	ldr	r3, [pc, #68]	@ (80216d8 <rand+0x60>)
 8021692:	4812      	ldr	r0, [pc, #72]	@ (80216dc <rand+0x64>)
 8021694:	f001 f8e4 	bl	8022860 <__assert_func>
 8021698:	4911      	ldr	r1, [pc, #68]	@ (80216e0 <rand+0x68>)
 802169a:	4b12      	ldr	r3, [pc, #72]	@ (80216e4 <rand+0x6c>)
 802169c:	e9c0 1300 	strd	r1, r3, [r0]
 80216a0:	4b11      	ldr	r3, [pc, #68]	@ (80216e8 <rand+0x70>)
 80216a2:	2100      	movs	r1, #0
 80216a4:	6083      	str	r3, [r0, #8]
 80216a6:	230b      	movs	r3, #11
 80216a8:	8183      	strh	r3, [r0, #12]
 80216aa:	2001      	movs	r0, #1
 80216ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80216b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80216b2:	480e      	ldr	r0, [pc, #56]	@ (80216ec <rand+0x74>)
 80216b4:	690b      	ldr	r3, [r1, #16]
 80216b6:	694c      	ldr	r4, [r1, #20]
 80216b8:	4358      	muls	r0, r3
 80216ba:	4a0d      	ldr	r2, [pc, #52]	@ (80216f0 <rand+0x78>)
 80216bc:	fb02 0004 	mla	r0, r2, r4, r0
 80216c0:	fba3 3202 	umull	r3, r2, r3, r2
 80216c4:	3301      	adds	r3, #1
 80216c6:	eb40 0002 	adc.w	r0, r0, r2
 80216ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80216ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80216d2:	bd10      	pop	{r4, pc}
 80216d4:	20000134 	.word	0x20000134
 80216d8:	08032ee6 	.word	0x08032ee6
 80216dc:	08032efd 	.word	0x08032efd
 80216e0:	abcd330e 	.word	0xabcd330e
 80216e4:	e66d1234 	.word	0xe66d1234
 80216e8:	0005deec 	.word	0x0005deec
 80216ec:	5851f42d 	.word	0x5851f42d
 80216f0:	4c957f2d 	.word	0x4c957f2d

080216f4 <_strtol_l.isra.0>:
 80216f4:	2b24      	cmp	r3, #36	@ 0x24
 80216f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216fa:	4686      	mov	lr, r0
 80216fc:	4690      	mov	r8, r2
 80216fe:	d801      	bhi.n	8021704 <_strtol_l.isra.0+0x10>
 8021700:	2b01      	cmp	r3, #1
 8021702:	d106      	bne.n	8021712 <_strtol_l.isra.0+0x1e>
 8021704:	f001 f862 	bl	80227cc <__errno>
 8021708:	2316      	movs	r3, #22
 802170a:	6003      	str	r3, [r0, #0]
 802170c:	2000      	movs	r0, #0
 802170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021712:	460d      	mov	r5, r1
 8021714:	4833      	ldr	r0, [pc, #204]	@ (80217e4 <_strtol_l.isra.0+0xf0>)
 8021716:	462a      	mov	r2, r5
 8021718:	f815 4b01 	ldrb.w	r4, [r5], #1
 802171c:	5d06      	ldrb	r6, [r0, r4]
 802171e:	f016 0608 	ands.w	r6, r6, #8
 8021722:	d1f8      	bne.n	8021716 <_strtol_l.isra.0+0x22>
 8021724:	2c2d      	cmp	r4, #45	@ 0x2d
 8021726:	d110      	bne.n	802174a <_strtol_l.isra.0+0x56>
 8021728:	2601      	movs	r6, #1
 802172a:	782c      	ldrb	r4, [r5, #0]
 802172c:	1c95      	adds	r5, r2, #2
 802172e:	f033 0210 	bics.w	r2, r3, #16
 8021732:	d115      	bne.n	8021760 <_strtol_l.isra.0+0x6c>
 8021734:	2c30      	cmp	r4, #48	@ 0x30
 8021736:	d10d      	bne.n	8021754 <_strtol_l.isra.0+0x60>
 8021738:	782a      	ldrb	r2, [r5, #0]
 802173a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802173e:	2a58      	cmp	r2, #88	@ 0x58
 8021740:	d108      	bne.n	8021754 <_strtol_l.isra.0+0x60>
 8021742:	786c      	ldrb	r4, [r5, #1]
 8021744:	3502      	adds	r5, #2
 8021746:	2310      	movs	r3, #16
 8021748:	e00a      	b.n	8021760 <_strtol_l.isra.0+0x6c>
 802174a:	2c2b      	cmp	r4, #43	@ 0x2b
 802174c:	bf04      	itt	eq
 802174e:	782c      	ldrbeq	r4, [r5, #0]
 8021750:	1c95      	addeq	r5, r2, #2
 8021752:	e7ec      	b.n	802172e <_strtol_l.isra.0+0x3a>
 8021754:	2b00      	cmp	r3, #0
 8021756:	d1f6      	bne.n	8021746 <_strtol_l.isra.0+0x52>
 8021758:	2c30      	cmp	r4, #48	@ 0x30
 802175a:	bf14      	ite	ne
 802175c:	230a      	movne	r3, #10
 802175e:	2308      	moveq	r3, #8
 8021760:	2200      	movs	r2, #0
 8021762:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8021766:	f10c 3cff 	add.w	ip, ip, #4294967295
 802176a:	fbbc f9f3 	udiv	r9, ip, r3
 802176e:	4610      	mov	r0, r2
 8021770:	fb03 ca19 	mls	sl, r3, r9, ip
 8021774:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8021778:	2f09      	cmp	r7, #9
 802177a:	d80f      	bhi.n	802179c <_strtol_l.isra.0+0xa8>
 802177c:	463c      	mov	r4, r7
 802177e:	42a3      	cmp	r3, r4
 8021780:	dd1b      	ble.n	80217ba <_strtol_l.isra.0+0xc6>
 8021782:	1c57      	adds	r7, r2, #1
 8021784:	d007      	beq.n	8021796 <_strtol_l.isra.0+0xa2>
 8021786:	4581      	cmp	r9, r0
 8021788:	d314      	bcc.n	80217b4 <_strtol_l.isra.0+0xc0>
 802178a:	d101      	bne.n	8021790 <_strtol_l.isra.0+0x9c>
 802178c:	45a2      	cmp	sl, r4
 802178e:	db11      	blt.n	80217b4 <_strtol_l.isra.0+0xc0>
 8021790:	2201      	movs	r2, #1
 8021792:	fb00 4003 	mla	r0, r0, r3, r4
 8021796:	f815 4b01 	ldrb.w	r4, [r5], #1
 802179a:	e7eb      	b.n	8021774 <_strtol_l.isra.0+0x80>
 802179c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80217a0:	2f19      	cmp	r7, #25
 80217a2:	d801      	bhi.n	80217a8 <_strtol_l.isra.0+0xb4>
 80217a4:	3c37      	subs	r4, #55	@ 0x37
 80217a6:	e7ea      	b.n	802177e <_strtol_l.isra.0+0x8a>
 80217a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80217ac:	2f19      	cmp	r7, #25
 80217ae:	d804      	bhi.n	80217ba <_strtol_l.isra.0+0xc6>
 80217b0:	3c57      	subs	r4, #87	@ 0x57
 80217b2:	e7e4      	b.n	802177e <_strtol_l.isra.0+0x8a>
 80217b4:	f04f 32ff 	mov.w	r2, #4294967295
 80217b8:	e7ed      	b.n	8021796 <_strtol_l.isra.0+0xa2>
 80217ba:	1c53      	adds	r3, r2, #1
 80217bc:	d108      	bne.n	80217d0 <_strtol_l.isra.0+0xdc>
 80217be:	2322      	movs	r3, #34	@ 0x22
 80217c0:	4660      	mov	r0, ip
 80217c2:	f8ce 3000 	str.w	r3, [lr]
 80217c6:	f1b8 0f00 	cmp.w	r8, #0
 80217ca:	d0a0      	beq.n	802170e <_strtol_l.isra.0+0x1a>
 80217cc:	1e69      	subs	r1, r5, #1
 80217ce:	e006      	b.n	80217de <_strtol_l.isra.0+0xea>
 80217d0:	b106      	cbz	r6, 80217d4 <_strtol_l.isra.0+0xe0>
 80217d2:	4240      	negs	r0, r0
 80217d4:	f1b8 0f00 	cmp.w	r8, #0
 80217d8:	d099      	beq.n	802170e <_strtol_l.isra.0+0x1a>
 80217da:	2a00      	cmp	r2, #0
 80217dc:	d1f6      	bne.n	80217cc <_strtol_l.isra.0+0xd8>
 80217de:	f8c8 1000 	str.w	r1, [r8]
 80217e2:	e794      	b.n	802170e <_strtol_l.isra.0+0x1a>
 80217e4:	080330c9 	.word	0x080330c9

080217e8 <_strtol_r>:
 80217e8:	f7ff bf84 	b.w	80216f4 <_strtol_l.isra.0>

080217ec <strtol>:
 80217ec:	4613      	mov	r3, r2
 80217ee:	460a      	mov	r2, r1
 80217f0:	4601      	mov	r1, r0
 80217f2:	4802      	ldr	r0, [pc, #8]	@ (80217fc <strtol+0x10>)
 80217f4:	6800      	ldr	r0, [r0, #0]
 80217f6:	f7ff bf7d 	b.w	80216f4 <_strtol_l.isra.0>
 80217fa:	bf00      	nop
 80217fc:	20000134 	.word	0x20000134

08021800 <tolower>:
 8021800:	4b03      	ldr	r3, [pc, #12]	@ (8021810 <tolower+0x10>)
 8021802:	5c1b      	ldrb	r3, [r3, r0]
 8021804:	f003 0303 	and.w	r3, r3, #3
 8021808:	2b01      	cmp	r3, #1
 802180a:	bf08      	it	eq
 802180c:	3020      	addeq	r0, #32
 802180e:	4770      	bx	lr
 8021810:	080330c9 	.word	0x080330c9

08021814 <__cvt>:
 8021814:	2b00      	cmp	r3, #0
 8021816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802181a:	461d      	mov	r5, r3
 802181c:	bfbb      	ittet	lt
 802181e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8021822:	461d      	movlt	r5, r3
 8021824:	2300      	movge	r3, #0
 8021826:	232d      	movlt	r3, #45	@ 0x2d
 8021828:	b088      	sub	sp, #32
 802182a:	4614      	mov	r4, r2
 802182c:	bfb8      	it	lt
 802182e:	4614      	movlt	r4, r2
 8021830:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021832:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8021834:	7013      	strb	r3, [r2, #0]
 8021836:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021838:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 802183c:	f023 0820 	bic.w	r8, r3, #32
 8021840:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8021844:	d005      	beq.n	8021852 <__cvt+0x3e>
 8021846:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802184a:	d100      	bne.n	802184e <__cvt+0x3a>
 802184c:	3601      	adds	r6, #1
 802184e:	2302      	movs	r3, #2
 8021850:	e000      	b.n	8021854 <__cvt+0x40>
 8021852:	2303      	movs	r3, #3
 8021854:	aa07      	add	r2, sp, #28
 8021856:	9204      	str	r2, [sp, #16]
 8021858:	aa06      	add	r2, sp, #24
 802185a:	e9cd a202 	strd	sl, r2, [sp, #8]
 802185e:	e9cd 3600 	strd	r3, r6, [sp]
 8021862:	4622      	mov	r2, r4
 8021864:	462b      	mov	r3, r5
 8021866:	f001 f8a3 	bl	80229b0 <_dtoa_r>
 802186a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 802186e:	4607      	mov	r7, r0
 8021870:	d119      	bne.n	80218a6 <__cvt+0x92>
 8021872:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021874:	07db      	lsls	r3, r3, #31
 8021876:	d50e      	bpl.n	8021896 <__cvt+0x82>
 8021878:	eb00 0906 	add.w	r9, r0, r6
 802187c:	2200      	movs	r2, #0
 802187e:	2300      	movs	r3, #0
 8021880:	4620      	mov	r0, r4
 8021882:	4629      	mov	r1, r5
 8021884:	f7df f8d6 	bl	8000a34 <__aeabi_dcmpeq>
 8021888:	b108      	cbz	r0, 802188e <__cvt+0x7a>
 802188a:	f8cd 901c 	str.w	r9, [sp, #28]
 802188e:	2230      	movs	r2, #48	@ 0x30
 8021890:	9b07      	ldr	r3, [sp, #28]
 8021892:	454b      	cmp	r3, r9
 8021894:	d31e      	bcc.n	80218d4 <__cvt+0xc0>
 8021896:	4638      	mov	r0, r7
 8021898:	9b07      	ldr	r3, [sp, #28]
 802189a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802189c:	1bdb      	subs	r3, r3, r7
 802189e:	6013      	str	r3, [r2, #0]
 80218a0:	b008      	add	sp, #32
 80218a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80218aa:	eb00 0906 	add.w	r9, r0, r6
 80218ae:	d1e5      	bne.n	802187c <__cvt+0x68>
 80218b0:	7803      	ldrb	r3, [r0, #0]
 80218b2:	2b30      	cmp	r3, #48	@ 0x30
 80218b4:	d10a      	bne.n	80218cc <__cvt+0xb8>
 80218b6:	2200      	movs	r2, #0
 80218b8:	2300      	movs	r3, #0
 80218ba:	4620      	mov	r0, r4
 80218bc:	4629      	mov	r1, r5
 80218be:	f7df f8b9 	bl	8000a34 <__aeabi_dcmpeq>
 80218c2:	b918      	cbnz	r0, 80218cc <__cvt+0xb8>
 80218c4:	f1c6 0601 	rsb	r6, r6, #1
 80218c8:	f8ca 6000 	str.w	r6, [sl]
 80218cc:	f8da 3000 	ldr.w	r3, [sl]
 80218d0:	4499      	add	r9, r3
 80218d2:	e7d3      	b.n	802187c <__cvt+0x68>
 80218d4:	1c59      	adds	r1, r3, #1
 80218d6:	9107      	str	r1, [sp, #28]
 80218d8:	701a      	strb	r2, [r3, #0]
 80218da:	e7d9      	b.n	8021890 <__cvt+0x7c>

080218dc <__exponent>:
 80218dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80218de:	2900      	cmp	r1, #0
 80218e0:	bfb6      	itet	lt
 80218e2:	232d      	movlt	r3, #45	@ 0x2d
 80218e4:	232b      	movge	r3, #43	@ 0x2b
 80218e6:	4249      	neglt	r1, r1
 80218e8:	2909      	cmp	r1, #9
 80218ea:	7002      	strb	r2, [r0, #0]
 80218ec:	7043      	strb	r3, [r0, #1]
 80218ee:	dd29      	ble.n	8021944 <__exponent+0x68>
 80218f0:	f10d 0307 	add.w	r3, sp, #7
 80218f4:	461d      	mov	r5, r3
 80218f6:	270a      	movs	r7, #10
 80218f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80218fc:	461a      	mov	r2, r3
 80218fe:	fb07 1416 	mls	r4, r7, r6, r1
 8021902:	3430      	adds	r4, #48	@ 0x30
 8021904:	f802 4c01 	strb.w	r4, [r2, #-1]
 8021908:	460c      	mov	r4, r1
 802190a:	2c63      	cmp	r4, #99	@ 0x63
 802190c:	4631      	mov	r1, r6
 802190e:	f103 33ff 	add.w	r3, r3, #4294967295
 8021912:	dcf1      	bgt.n	80218f8 <__exponent+0x1c>
 8021914:	3130      	adds	r1, #48	@ 0x30
 8021916:	1e94      	subs	r4, r2, #2
 8021918:	f803 1c01 	strb.w	r1, [r3, #-1]
 802191c:	4623      	mov	r3, r4
 802191e:	1c41      	adds	r1, r0, #1
 8021920:	42ab      	cmp	r3, r5
 8021922:	d30a      	bcc.n	802193a <__exponent+0x5e>
 8021924:	f10d 0309 	add.w	r3, sp, #9
 8021928:	1a9b      	subs	r3, r3, r2
 802192a:	42ac      	cmp	r4, r5
 802192c:	bf88      	it	hi
 802192e:	2300      	movhi	r3, #0
 8021930:	3302      	adds	r3, #2
 8021932:	4403      	add	r3, r0
 8021934:	1a18      	subs	r0, r3, r0
 8021936:	b003      	add	sp, #12
 8021938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802193a:	f813 6b01 	ldrb.w	r6, [r3], #1
 802193e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8021942:	e7ed      	b.n	8021920 <__exponent+0x44>
 8021944:	2330      	movs	r3, #48	@ 0x30
 8021946:	3130      	adds	r1, #48	@ 0x30
 8021948:	7083      	strb	r3, [r0, #2]
 802194a:	70c1      	strb	r1, [r0, #3]
 802194c:	1d03      	adds	r3, r0, #4
 802194e:	e7f1      	b.n	8021934 <__exponent+0x58>

08021950 <_printf_float>:
 8021950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021954:	b091      	sub	sp, #68	@ 0x44
 8021956:	460c      	mov	r4, r1
 8021958:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 802195c:	4616      	mov	r6, r2
 802195e:	461f      	mov	r7, r3
 8021960:	4605      	mov	r5, r0
 8021962:	f000 fee9 	bl	8022738 <_localeconv_r>
 8021966:	6803      	ldr	r3, [r0, #0]
 8021968:	4618      	mov	r0, r3
 802196a:	9308      	str	r3, [sp, #32]
 802196c:	f7de fc36 	bl	80001dc <strlen>
 8021970:	2300      	movs	r3, #0
 8021972:	930e      	str	r3, [sp, #56]	@ 0x38
 8021974:	f8d8 3000 	ldr.w	r3, [r8]
 8021978:	9009      	str	r0, [sp, #36]	@ 0x24
 802197a:	3307      	adds	r3, #7
 802197c:	f023 0307 	bic.w	r3, r3, #7
 8021980:	f103 0208 	add.w	r2, r3, #8
 8021984:	f894 a018 	ldrb.w	sl, [r4, #24]
 8021988:	f8d4 b000 	ldr.w	fp, [r4]
 802198c:	f8c8 2000 	str.w	r2, [r8]
 8021990:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021994:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8021998:	930b      	str	r3, [sp, #44]	@ 0x2c
 802199a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 802199e:	f04f 32ff 	mov.w	r2, #4294967295
 80219a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80219a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80219aa:	4b9c      	ldr	r3, [pc, #624]	@ (8021c1c <_printf_float+0x2cc>)
 80219ac:	f7df f874 	bl	8000a98 <__aeabi_dcmpun>
 80219b0:	bb70      	cbnz	r0, 8021a10 <_printf_float+0xc0>
 80219b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80219b6:	f04f 32ff 	mov.w	r2, #4294967295
 80219ba:	4b98      	ldr	r3, [pc, #608]	@ (8021c1c <_printf_float+0x2cc>)
 80219bc:	f7df f84e 	bl	8000a5c <__aeabi_dcmple>
 80219c0:	bb30      	cbnz	r0, 8021a10 <_printf_float+0xc0>
 80219c2:	2200      	movs	r2, #0
 80219c4:	2300      	movs	r3, #0
 80219c6:	4640      	mov	r0, r8
 80219c8:	4649      	mov	r1, r9
 80219ca:	f7df f83d 	bl	8000a48 <__aeabi_dcmplt>
 80219ce:	b110      	cbz	r0, 80219d6 <_printf_float+0x86>
 80219d0:	232d      	movs	r3, #45	@ 0x2d
 80219d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80219d6:	4a92      	ldr	r2, [pc, #584]	@ (8021c20 <_printf_float+0x2d0>)
 80219d8:	4b92      	ldr	r3, [pc, #584]	@ (8021c24 <_printf_float+0x2d4>)
 80219da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80219de:	bf8c      	ite	hi
 80219e0:	4690      	movhi	r8, r2
 80219e2:	4698      	movls	r8, r3
 80219e4:	2303      	movs	r3, #3
 80219e6:	f04f 0900 	mov.w	r9, #0
 80219ea:	6123      	str	r3, [r4, #16]
 80219ec:	f02b 0304 	bic.w	r3, fp, #4
 80219f0:	6023      	str	r3, [r4, #0]
 80219f2:	4633      	mov	r3, r6
 80219f4:	4621      	mov	r1, r4
 80219f6:	4628      	mov	r0, r5
 80219f8:	9700      	str	r7, [sp, #0]
 80219fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80219fc:	f000 f9d4 	bl	8021da8 <_printf_common>
 8021a00:	3001      	adds	r0, #1
 8021a02:	f040 8090 	bne.w	8021b26 <_printf_float+0x1d6>
 8021a06:	f04f 30ff 	mov.w	r0, #4294967295
 8021a0a:	b011      	add	sp, #68	@ 0x44
 8021a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a10:	4642      	mov	r2, r8
 8021a12:	464b      	mov	r3, r9
 8021a14:	4640      	mov	r0, r8
 8021a16:	4649      	mov	r1, r9
 8021a18:	f7df f83e 	bl	8000a98 <__aeabi_dcmpun>
 8021a1c:	b148      	cbz	r0, 8021a32 <_printf_float+0xe2>
 8021a1e:	464b      	mov	r3, r9
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	bfb8      	it	lt
 8021a24:	232d      	movlt	r3, #45	@ 0x2d
 8021a26:	4a80      	ldr	r2, [pc, #512]	@ (8021c28 <_printf_float+0x2d8>)
 8021a28:	bfb8      	it	lt
 8021a2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8021a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8021c2c <_printf_float+0x2dc>)
 8021a30:	e7d3      	b.n	80219da <_printf_float+0x8a>
 8021a32:	6863      	ldr	r3, [r4, #4]
 8021a34:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8021a38:	1c5a      	adds	r2, r3, #1
 8021a3a:	d13f      	bne.n	8021abc <_printf_float+0x16c>
 8021a3c:	2306      	movs	r3, #6
 8021a3e:	6063      	str	r3, [r4, #4]
 8021a40:	2200      	movs	r2, #0
 8021a42:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8021a46:	6023      	str	r3, [r4, #0]
 8021a48:	9206      	str	r2, [sp, #24]
 8021a4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8021a4c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8021a50:	aa0d      	add	r2, sp, #52	@ 0x34
 8021a52:	9203      	str	r2, [sp, #12]
 8021a54:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8021a58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021a5c:	6863      	ldr	r3, [r4, #4]
 8021a5e:	4642      	mov	r2, r8
 8021a60:	9300      	str	r3, [sp, #0]
 8021a62:	4628      	mov	r0, r5
 8021a64:	464b      	mov	r3, r9
 8021a66:	910a      	str	r1, [sp, #40]	@ 0x28
 8021a68:	f7ff fed4 	bl	8021814 <__cvt>
 8021a6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021a6e:	4680      	mov	r8, r0
 8021a70:	2947      	cmp	r1, #71	@ 0x47
 8021a72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021a74:	d128      	bne.n	8021ac8 <_printf_float+0x178>
 8021a76:	1cc8      	adds	r0, r1, #3
 8021a78:	db02      	blt.n	8021a80 <_printf_float+0x130>
 8021a7a:	6863      	ldr	r3, [r4, #4]
 8021a7c:	4299      	cmp	r1, r3
 8021a7e:	dd40      	ble.n	8021b02 <_printf_float+0x1b2>
 8021a80:	f1aa 0a02 	sub.w	sl, sl, #2
 8021a84:	fa5f fa8a 	uxtb.w	sl, sl
 8021a88:	4652      	mov	r2, sl
 8021a8a:	3901      	subs	r1, #1
 8021a8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8021a90:	910d      	str	r1, [sp, #52]	@ 0x34
 8021a92:	f7ff ff23 	bl	80218dc <__exponent>
 8021a96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021a98:	4681      	mov	r9, r0
 8021a9a:	1813      	adds	r3, r2, r0
 8021a9c:	2a01      	cmp	r2, #1
 8021a9e:	6123      	str	r3, [r4, #16]
 8021aa0:	dc02      	bgt.n	8021aa8 <_printf_float+0x158>
 8021aa2:	6822      	ldr	r2, [r4, #0]
 8021aa4:	07d2      	lsls	r2, r2, #31
 8021aa6:	d501      	bpl.n	8021aac <_printf_float+0x15c>
 8021aa8:	3301      	adds	r3, #1
 8021aaa:	6123      	str	r3, [r4, #16]
 8021aac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d09e      	beq.n	80219f2 <_printf_float+0xa2>
 8021ab4:	232d      	movs	r3, #45	@ 0x2d
 8021ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021aba:	e79a      	b.n	80219f2 <_printf_float+0xa2>
 8021abc:	2947      	cmp	r1, #71	@ 0x47
 8021abe:	d1bf      	bne.n	8021a40 <_printf_float+0xf0>
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d1bd      	bne.n	8021a40 <_printf_float+0xf0>
 8021ac4:	2301      	movs	r3, #1
 8021ac6:	e7ba      	b.n	8021a3e <_printf_float+0xee>
 8021ac8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021acc:	d9dc      	bls.n	8021a88 <_printf_float+0x138>
 8021ace:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8021ad2:	d118      	bne.n	8021b06 <_printf_float+0x1b6>
 8021ad4:	2900      	cmp	r1, #0
 8021ad6:	6863      	ldr	r3, [r4, #4]
 8021ad8:	dd0b      	ble.n	8021af2 <_printf_float+0x1a2>
 8021ada:	6121      	str	r1, [r4, #16]
 8021adc:	b913      	cbnz	r3, 8021ae4 <_printf_float+0x194>
 8021ade:	6822      	ldr	r2, [r4, #0]
 8021ae0:	07d0      	lsls	r0, r2, #31
 8021ae2:	d502      	bpl.n	8021aea <_printf_float+0x19a>
 8021ae4:	3301      	adds	r3, #1
 8021ae6:	440b      	add	r3, r1
 8021ae8:	6123      	str	r3, [r4, #16]
 8021aea:	f04f 0900 	mov.w	r9, #0
 8021aee:	65a1      	str	r1, [r4, #88]	@ 0x58
 8021af0:	e7dc      	b.n	8021aac <_printf_float+0x15c>
 8021af2:	b913      	cbnz	r3, 8021afa <_printf_float+0x1aa>
 8021af4:	6822      	ldr	r2, [r4, #0]
 8021af6:	07d2      	lsls	r2, r2, #31
 8021af8:	d501      	bpl.n	8021afe <_printf_float+0x1ae>
 8021afa:	3302      	adds	r3, #2
 8021afc:	e7f4      	b.n	8021ae8 <_printf_float+0x198>
 8021afe:	2301      	movs	r3, #1
 8021b00:	e7f2      	b.n	8021ae8 <_printf_float+0x198>
 8021b02:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8021b06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b08:	4299      	cmp	r1, r3
 8021b0a:	db05      	blt.n	8021b18 <_printf_float+0x1c8>
 8021b0c:	6823      	ldr	r3, [r4, #0]
 8021b0e:	6121      	str	r1, [r4, #16]
 8021b10:	07d8      	lsls	r0, r3, #31
 8021b12:	d5ea      	bpl.n	8021aea <_printf_float+0x19a>
 8021b14:	1c4b      	adds	r3, r1, #1
 8021b16:	e7e7      	b.n	8021ae8 <_printf_float+0x198>
 8021b18:	2900      	cmp	r1, #0
 8021b1a:	bfcc      	ite	gt
 8021b1c:	2201      	movgt	r2, #1
 8021b1e:	f1c1 0202 	rsble	r2, r1, #2
 8021b22:	4413      	add	r3, r2
 8021b24:	e7e0      	b.n	8021ae8 <_printf_float+0x198>
 8021b26:	6823      	ldr	r3, [r4, #0]
 8021b28:	055a      	lsls	r2, r3, #21
 8021b2a:	d407      	bmi.n	8021b3c <_printf_float+0x1ec>
 8021b2c:	6923      	ldr	r3, [r4, #16]
 8021b2e:	4642      	mov	r2, r8
 8021b30:	4631      	mov	r1, r6
 8021b32:	4628      	mov	r0, r5
 8021b34:	47b8      	blx	r7
 8021b36:	3001      	adds	r0, #1
 8021b38:	d12b      	bne.n	8021b92 <_printf_float+0x242>
 8021b3a:	e764      	b.n	8021a06 <_printf_float+0xb6>
 8021b3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021b40:	f240 80dc 	bls.w	8021cfc <_printf_float+0x3ac>
 8021b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021b48:	2200      	movs	r2, #0
 8021b4a:	2300      	movs	r3, #0
 8021b4c:	f7de ff72 	bl	8000a34 <__aeabi_dcmpeq>
 8021b50:	2800      	cmp	r0, #0
 8021b52:	d033      	beq.n	8021bbc <_printf_float+0x26c>
 8021b54:	2301      	movs	r3, #1
 8021b56:	4631      	mov	r1, r6
 8021b58:	4628      	mov	r0, r5
 8021b5a:	4a35      	ldr	r2, [pc, #212]	@ (8021c30 <_printf_float+0x2e0>)
 8021b5c:	47b8      	blx	r7
 8021b5e:	3001      	adds	r0, #1
 8021b60:	f43f af51 	beq.w	8021a06 <_printf_float+0xb6>
 8021b64:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8021b68:	4543      	cmp	r3, r8
 8021b6a:	db02      	blt.n	8021b72 <_printf_float+0x222>
 8021b6c:	6823      	ldr	r3, [r4, #0]
 8021b6e:	07d8      	lsls	r0, r3, #31
 8021b70:	d50f      	bpl.n	8021b92 <_printf_float+0x242>
 8021b72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021b76:	4631      	mov	r1, r6
 8021b78:	4628      	mov	r0, r5
 8021b7a:	47b8      	blx	r7
 8021b7c:	3001      	adds	r0, #1
 8021b7e:	f43f af42 	beq.w	8021a06 <_printf_float+0xb6>
 8021b82:	f04f 0900 	mov.w	r9, #0
 8021b86:	f108 38ff 	add.w	r8, r8, #4294967295
 8021b8a:	f104 0a1a 	add.w	sl, r4, #26
 8021b8e:	45c8      	cmp	r8, r9
 8021b90:	dc09      	bgt.n	8021ba6 <_printf_float+0x256>
 8021b92:	6823      	ldr	r3, [r4, #0]
 8021b94:	079b      	lsls	r3, r3, #30
 8021b96:	f100 8102 	bmi.w	8021d9e <_printf_float+0x44e>
 8021b9a:	68e0      	ldr	r0, [r4, #12]
 8021b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b9e:	4298      	cmp	r0, r3
 8021ba0:	bfb8      	it	lt
 8021ba2:	4618      	movlt	r0, r3
 8021ba4:	e731      	b.n	8021a0a <_printf_float+0xba>
 8021ba6:	2301      	movs	r3, #1
 8021ba8:	4652      	mov	r2, sl
 8021baa:	4631      	mov	r1, r6
 8021bac:	4628      	mov	r0, r5
 8021bae:	47b8      	blx	r7
 8021bb0:	3001      	adds	r0, #1
 8021bb2:	f43f af28 	beq.w	8021a06 <_printf_float+0xb6>
 8021bb6:	f109 0901 	add.w	r9, r9, #1
 8021bba:	e7e8      	b.n	8021b8e <_printf_float+0x23e>
 8021bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	dc38      	bgt.n	8021c34 <_printf_float+0x2e4>
 8021bc2:	2301      	movs	r3, #1
 8021bc4:	4631      	mov	r1, r6
 8021bc6:	4628      	mov	r0, r5
 8021bc8:	4a19      	ldr	r2, [pc, #100]	@ (8021c30 <_printf_float+0x2e0>)
 8021bca:	47b8      	blx	r7
 8021bcc:	3001      	adds	r0, #1
 8021bce:	f43f af1a 	beq.w	8021a06 <_printf_float+0xb6>
 8021bd2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8021bd6:	ea59 0303 	orrs.w	r3, r9, r3
 8021bda:	d102      	bne.n	8021be2 <_printf_float+0x292>
 8021bdc:	6823      	ldr	r3, [r4, #0]
 8021bde:	07d9      	lsls	r1, r3, #31
 8021be0:	d5d7      	bpl.n	8021b92 <_printf_float+0x242>
 8021be2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021be6:	4631      	mov	r1, r6
 8021be8:	4628      	mov	r0, r5
 8021bea:	47b8      	blx	r7
 8021bec:	3001      	adds	r0, #1
 8021bee:	f43f af0a 	beq.w	8021a06 <_printf_float+0xb6>
 8021bf2:	f04f 0a00 	mov.w	sl, #0
 8021bf6:	f104 0b1a 	add.w	fp, r4, #26
 8021bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021bfc:	425b      	negs	r3, r3
 8021bfe:	4553      	cmp	r3, sl
 8021c00:	dc01      	bgt.n	8021c06 <_printf_float+0x2b6>
 8021c02:	464b      	mov	r3, r9
 8021c04:	e793      	b.n	8021b2e <_printf_float+0x1de>
 8021c06:	2301      	movs	r3, #1
 8021c08:	465a      	mov	r2, fp
 8021c0a:	4631      	mov	r1, r6
 8021c0c:	4628      	mov	r0, r5
 8021c0e:	47b8      	blx	r7
 8021c10:	3001      	adds	r0, #1
 8021c12:	f43f aef8 	beq.w	8021a06 <_printf_float+0xb6>
 8021c16:	f10a 0a01 	add.w	sl, sl, #1
 8021c1a:	e7ee      	b.n	8021bfa <_printf_float+0x2aa>
 8021c1c:	7fefffff 	.word	0x7fefffff
 8021c20:	08032f59 	.word	0x08032f59
 8021c24:	08032f55 	.word	0x08032f55
 8021c28:	08032f61 	.word	0x08032f61
 8021c2c:	08032f5d 	.word	0x08032f5d
 8021c30:	080330b9 	.word	0x080330b9
 8021c34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021c36:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021c3a:	4553      	cmp	r3, sl
 8021c3c:	bfa8      	it	ge
 8021c3e:	4653      	movge	r3, sl
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	4699      	mov	r9, r3
 8021c44:	dc36      	bgt.n	8021cb4 <_printf_float+0x364>
 8021c46:	f04f 0b00 	mov.w	fp, #0
 8021c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021c4e:	f104 021a 	add.w	r2, r4, #26
 8021c52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021c54:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c56:	eba3 0309 	sub.w	r3, r3, r9
 8021c5a:	455b      	cmp	r3, fp
 8021c5c:	dc31      	bgt.n	8021cc2 <_printf_float+0x372>
 8021c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c60:	459a      	cmp	sl, r3
 8021c62:	dc3a      	bgt.n	8021cda <_printf_float+0x38a>
 8021c64:	6823      	ldr	r3, [r4, #0]
 8021c66:	07da      	lsls	r2, r3, #31
 8021c68:	d437      	bmi.n	8021cda <_printf_float+0x38a>
 8021c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c6c:	ebaa 0903 	sub.w	r9, sl, r3
 8021c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c72:	ebaa 0303 	sub.w	r3, sl, r3
 8021c76:	4599      	cmp	r9, r3
 8021c78:	bfa8      	it	ge
 8021c7a:	4699      	movge	r9, r3
 8021c7c:	f1b9 0f00 	cmp.w	r9, #0
 8021c80:	dc33      	bgt.n	8021cea <_printf_float+0x39a>
 8021c82:	f04f 0800 	mov.w	r8, #0
 8021c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021c8a:	f104 0b1a 	add.w	fp, r4, #26
 8021c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c90:	ebaa 0303 	sub.w	r3, sl, r3
 8021c94:	eba3 0309 	sub.w	r3, r3, r9
 8021c98:	4543      	cmp	r3, r8
 8021c9a:	f77f af7a 	ble.w	8021b92 <_printf_float+0x242>
 8021c9e:	2301      	movs	r3, #1
 8021ca0:	465a      	mov	r2, fp
 8021ca2:	4631      	mov	r1, r6
 8021ca4:	4628      	mov	r0, r5
 8021ca6:	47b8      	blx	r7
 8021ca8:	3001      	adds	r0, #1
 8021caa:	f43f aeac 	beq.w	8021a06 <_printf_float+0xb6>
 8021cae:	f108 0801 	add.w	r8, r8, #1
 8021cb2:	e7ec      	b.n	8021c8e <_printf_float+0x33e>
 8021cb4:	4642      	mov	r2, r8
 8021cb6:	4631      	mov	r1, r6
 8021cb8:	4628      	mov	r0, r5
 8021cba:	47b8      	blx	r7
 8021cbc:	3001      	adds	r0, #1
 8021cbe:	d1c2      	bne.n	8021c46 <_printf_float+0x2f6>
 8021cc0:	e6a1      	b.n	8021a06 <_printf_float+0xb6>
 8021cc2:	2301      	movs	r3, #1
 8021cc4:	4631      	mov	r1, r6
 8021cc6:	4628      	mov	r0, r5
 8021cc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8021cca:	47b8      	blx	r7
 8021ccc:	3001      	adds	r0, #1
 8021cce:	f43f ae9a 	beq.w	8021a06 <_printf_float+0xb6>
 8021cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cd4:	f10b 0b01 	add.w	fp, fp, #1
 8021cd8:	e7bb      	b.n	8021c52 <_printf_float+0x302>
 8021cda:	4631      	mov	r1, r6
 8021cdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021ce0:	4628      	mov	r0, r5
 8021ce2:	47b8      	blx	r7
 8021ce4:	3001      	adds	r0, #1
 8021ce6:	d1c0      	bne.n	8021c6a <_printf_float+0x31a>
 8021ce8:	e68d      	b.n	8021a06 <_printf_float+0xb6>
 8021cea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cec:	464b      	mov	r3, r9
 8021cee:	4631      	mov	r1, r6
 8021cf0:	4628      	mov	r0, r5
 8021cf2:	4442      	add	r2, r8
 8021cf4:	47b8      	blx	r7
 8021cf6:	3001      	adds	r0, #1
 8021cf8:	d1c3      	bne.n	8021c82 <_printf_float+0x332>
 8021cfa:	e684      	b.n	8021a06 <_printf_float+0xb6>
 8021cfc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021d00:	f1ba 0f01 	cmp.w	sl, #1
 8021d04:	dc01      	bgt.n	8021d0a <_printf_float+0x3ba>
 8021d06:	07db      	lsls	r3, r3, #31
 8021d08:	d536      	bpl.n	8021d78 <_printf_float+0x428>
 8021d0a:	2301      	movs	r3, #1
 8021d0c:	4642      	mov	r2, r8
 8021d0e:	4631      	mov	r1, r6
 8021d10:	4628      	mov	r0, r5
 8021d12:	47b8      	blx	r7
 8021d14:	3001      	adds	r0, #1
 8021d16:	f43f ae76 	beq.w	8021a06 <_printf_float+0xb6>
 8021d1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021d1e:	4631      	mov	r1, r6
 8021d20:	4628      	mov	r0, r5
 8021d22:	47b8      	blx	r7
 8021d24:	3001      	adds	r0, #1
 8021d26:	f43f ae6e 	beq.w	8021a06 <_printf_float+0xb6>
 8021d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021d2e:	2200      	movs	r2, #0
 8021d30:	2300      	movs	r3, #0
 8021d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021d36:	f7de fe7d 	bl	8000a34 <__aeabi_dcmpeq>
 8021d3a:	b9c0      	cbnz	r0, 8021d6e <_printf_float+0x41e>
 8021d3c:	4653      	mov	r3, sl
 8021d3e:	f108 0201 	add.w	r2, r8, #1
 8021d42:	4631      	mov	r1, r6
 8021d44:	4628      	mov	r0, r5
 8021d46:	47b8      	blx	r7
 8021d48:	3001      	adds	r0, #1
 8021d4a:	d10c      	bne.n	8021d66 <_printf_float+0x416>
 8021d4c:	e65b      	b.n	8021a06 <_printf_float+0xb6>
 8021d4e:	2301      	movs	r3, #1
 8021d50:	465a      	mov	r2, fp
 8021d52:	4631      	mov	r1, r6
 8021d54:	4628      	mov	r0, r5
 8021d56:	47b8      	blx	r7
 8021d58:	3001      	adds	r0, #1
 8021d5a:	f43f ae54 	beq.w	8021a06 <_printf_float+0xb6>
 8021d5e:	f108 0801 	add.w	r8, r8, #1
 8021d62:	45d0      	cmp	r8, sl
 8021d64:	dbf3      	blt.n	8021d4e <_printf_float+0x3fe>
 8021d66:	464b      	mov	r3, r9
 8021d68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021d6c:	e6e0      	b.n	8021b30 <_printf_float+0x1e0>
 8021d6e:	f04f 0800 	mov.w	r8, #0
 8021d72:	f104 0b1a 	add.w	fp, r4, #26
 8021d76:	e7f4      	b.n	8021d62 <_printf_float+0x412>
 8021d78:	2301      	movs	r3, #1
 8021d7a:	4642      	mov	r2, r8
 8021d7c:	e7e1      	b.n	8021d42 <_printf_float+0x3f2>
 8021d7e:	2301      	movs	r3, #1
 8021d80:	464a      	mov	r2, r9
 8021d82:	4631      	mov	r1, r6
 8021d84:	4628      	mov	r0, r5
 8021d86:	47b8      	blx	r7
 8021d88:	3001      	adds	r0, #1
 8021d8a:	f43f ae3c 	beq.w	8021a06 <_printf_float+0xb6>
 8021d8e:	f108 0801 	add.w	r8, r8, #1
 8021d92:	68e3      	ldr	r3, [r4, #12]
 8021d94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021d96:	1a5b      	subs	r3, r3, r1
 8021d98:	4543      	cmp	r3, r8
 8021d9a:	dcf0      	bgt.n	8021d7e <_printf_float+0x42e>
 8021d9c:	e6fd      	b.n	8021b9a <_printf_float+0x24a>
 8021d9e:	f04f 0800 	mov.w	r8, #0
 8021da2:	f104 0919 	add.w	r9, r4, #25
 8021da6:	e7f4      	b.n	8021d92 <_printf_float+0x442>

08021da8 <_printf_common>:
 8021da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dac:	4616      	mov	r6, r2
 8021dae:	4698      	mov	r8, r3
 8021db0:	688a      	ldr	r2, [r1, #8]
 8021db2:	690b      	ldr	r3, [r1, #16]
 8021db4:	4607      	mov	r7, r0
 8021db6:	4293      	cmp	r3, r2
 8021db8:	bfb8      	it	lt
 8021dba:	4613      	movlt	r3, r2
 8021dbc:	6033      	str	r3, [r6, #0]
 8021dbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021dc2:	460c      	mov	r4, r1
 8021dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021dc8:	b10a      	cbz	r2, 8021dce <_printf_common+0x26>
 8021dca:	3301      	adds	r3, #1
 8021dcc:	6033      	str	r3, [r6, #0]
 8021dce:	6823      	ldr	r3, [r4, #0]
 8021dd0:	0699      	lsls	r1, r3, #26
 8021dd2:	bf42      	ittt	mi
 8021dd4:	6833      	ldrmi	r3, [r6, #0]
 8021dd6:	3302      	addmi	r3, #2
 8021dd8:	6033      	strmi	r3, [r6, #0]
 8021dda:	6825      	ldr	r5, [r4, #0]
 8021ddc:	f015 0506 	ands.w	r5, r5, #6
 8021de0:	d106      	bne.n	8021df0 <_printf_common+0x48>
 8021de2:	f104 0a19 	add.w	sl, r4, #25
 8021de6:	68e3      	ldr	r3, [r4, #12]
 8021de8:	6832      	ldr	r2, [r6, #0]
 8021dea:	1a9b      	subs	r3, r3, r2
 8021dec:	42ab      	cmp	r3, r5
 8021dee:	dc2b      	bgt.n	8021e48 <_printf_common+0xa0>
 8021df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021df4:	6822      	ldr	r2, [r4, #0]
 8021df6:	3b00      	subs	r3, #0
 8021df8:	bf18      	it	ne
 8021dfa:	2301      	movne	r3, #1
 8021dfc:	0692      	lsls	r2, r2, #26
 8021dfe:	d430      	bmi.n	8021e62 <_printf_common+0xba>
 8021e00:	4641      	mov	r1, r8
 8021e02:	4638      	mov	r0, r7
 8021e04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021e08:	47c8      	blx	r9
 8021e0a:	3001      	adds	r0, #1
 8021e0c:	d023      	beq.n	8021e56 <_printf_common+0xae>
 8021e0e:	6823      	ldr	r3, [r4, #0]
 8021e10:	6922      	ldr	r2, [r4, #16]
 8021e12:	f003 0306 	and.w	r3, r3, #6
 8021e16:	2b04      	cmp	r3, #4
 8021e18:	bf14      	ite	ne
 8021e1a:	2500      	movne	r5, #0
 8021e1c:	6833      	ldreq	r3, [r6, #0]
 8021e1e:	f04f 0600 	mov.w	r6, #0
 8021e22:	bf08      	it	eq
 8021e24:	68e5      	ldreq	r5, [r4, #12]
 8021e26:	f104 041a 	add.w	r4, r4, #26
 8021e2a:	bf08      	it	eq
 8021e2c:	1aed      	subeq	r5, r5, r3
 8021e2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8021e32:	bf08      	it	eq
 8021e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021e38:	4293      	cmp	r3, r2
 8021e3a:	bfc4      	itt	gt
 8021e3c:	1a9b      	subgt	r3, r3, r2
 8021e3e:	18ed      	addgt	r5, r5, r3
 8021e40:	42b5      	cmp	r5, r6
 8021e42:	d11a      	bne.n	8021e7a <_printf_common+0xd2>
 8021e44:	2000      	movs	r0, #0
 8021e46:	e008      	b.n	8021e5a <_printf_common+0xb2>
 8021e48:	2301      	movs	r3, #1
 8021e4a:	4652      	mov	r2, sl
 8021e4c:	4641      	mov	r1, r8
 8021e4e:	4638      	mov	r0, r7
 8021e50:	47c8      	blx	r9
 8021e52:	3001      	adds	r0, #1
 8021e54:	d103      	bne.n	8021e5e <_printf_common+0xb6>
 8021e56:	f04f 30ff 	mov.w	r0, #4294967295
 8021e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e5e:	3501      	adds	r5, #1
 8021e60:	e7c1      	b.n	8021de6 <_printf_common+0x3e>
 8021e62:	2030      	movs	r0, #48	@ 0x30
 8021e64:	18e1      	adds	r1, r4, r3
 8021e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021e6a:	1c5a      	adds	r2, r3, #1
 8021e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021e70:	4422      	add	r2, r4
 8021e72:	3302      	adds	r3, #2
 8021e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021e78:	e7c2      	b.n	8021e00 <_printf_common+0x58>
 8021e7a:	2301      	movs	r3, #1
 8021e7c:	4622      	mov	r2, r4
 8021e7e:	4641      	mov	r1, r8
 8021e80:	4638      	mov	r0, r7
 8021e82:	47c8      	blx	r9
 8021e84:	3001      	adds	r0, #1
 8021e86:	d0e6      	beq.n	8021e56 <_printf_common+0xae>
 8021e88:	3601      	adds	r6, #1
 8021e8a:	e7d9      	b.n	8021e40 <_printf_common+0x98>

08021e8c <_printf_i>:
 8021e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021e90:	7e0f      	ldrb	r7, [r1, #24]
 8021e92:	4691      	mov	r9, r2
 8021e94:	2f78      	cmp	r7, #120	@ 0x78
 8021e96:	4680      	mov	r8, r0
 8021e98:	460c      	mov	r4, r1
 8021e9a:	469a      	mov	sl, r3
 8021e9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021ea2:	d807      	bhi.n	8021eb4 <_printf_i+0x28>
 8021ea4:	2f62      	cmp	r7, #98	@ 0x62
 8021ea6:	d80a      	bhi.n	8021ebe <_printf_i+0x32>
 8021ea8:	2f00      	cmp	r7, #0
 8021eaa:	f000 80d1 	beq.w	8022050 <_printf_i+0x1c4>
 8021eae:	2f58      	cmp	r7, #88	@ 0x58
 8021eb0:	f000 80b8 	beq.w	8022024 <_printf_i+0x198>
 8021eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021ebc:	e03a      	b.n	8021f34 <_printf_i+0xa8>
 8021ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021ec2:	2b15      	cmp	r3, #21
 8021ec4:	d8f6      	bhi.n	8021eb4 <_printf_i+0x28>
 8021ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8021ecc <_printf_i+0x40>)
 8021ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021ecc:	08021f25 	.word	0x08021f25
 8021ed0:	08021f39 	.word	0x08021f39
 8021ed4:	08021eb5 	.word	0x08021eb5
 8021ed8:	08021eb5 	.word	0x08021eb5
 8021edc:	08021eb5 	.word	0x08021eb5
 8021ee0:	08021eb5 	.word	0x08021eb5
 8021ee4:	08021f39 	.word	0x08021f39
 8021ee8:	08021eb5 	.word	0x08021eb5
 8021eec:	08021eb5 	.word	0x08021eb5
 8021ef0:	08021eb5 	.word	0x08021eb5
 8021ef4:	08021eb5 	.word	0x08021eb5
 8021ef8:	08022037 	.word	0x08022037
 8021efc:	08021f63 	.word	0x08021f63
 8021f00:	08021ff1 	.word	0x08021ff1
 8021f04:	08021eb5 	.word	0x08021eb5
 8021f08:	08021eb5 	.word	0x08021eb5
 8021f0c:	08022059 	.word	0x08022059
 8021f10:	08021eb5 	.word	0x08021eb5
 8021f14:	08021f63 	.word	0x08021f63
 8021f18:	08021eb5 	.word	0x08021eb5
 8021f1c:	08021eb5 	.word	0x08021eb5
 8021f20:	08021ff9 	.word	0x08021ff9
 8021f24:	6833      	ldr	r3, [r6, #0]
 8021f26:	1d1a      	adds	r2, r3, #4
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	6032      	str	r2, [r6, #0]
 8021f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021f34:	2301      	movs	r3, #1
 8021f36:	e09c      	b.n	8022072 <_printf_i+0x1e6>
 8021f38:	6833      	ldr	r3, [r6, #0]
 8021f3a:	6820      	ldr	r0, [r4, #0]
 8021f3c:	1d19      	adds	r1, r3, #4
 8021f3e:	6031      	str	r1, [r6, #0]
 8021f40:	0606      	lsls	r6, r0, #24
 8021f42:	d501      	bpl.n	8021f48 <_printf_i+0xbc>
 8021f44:	681d      	ldr	r5, [r3, #0]
 8021f46:	e003      	b.n	8021f50 <_printf_i+0xc4>
 8021f48:	0645      	lsls	r5, r0, #25
 8021f4a:	d5fb      	bpl.n	8021f44 <_printf_i+0xb8>
 8021f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021f50:	2d00      	cmp	r5, #0
 8021f52:	da03      	bge.n	8021f5c <_printf_i+0xd0>
 8021f54:	232d      	movs	r3, #45	@ 0x2d
 8021f56:	426d      	negs	r5, r5
 8021f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021f5c:	230a      	movs	r3, #10
 8021f5e:	4858      	ldr	r0, [pc, #352]	@ (80220c0 <_printf_i+0x234>)
 8021f60:	e011      	b.n	8021f86 <_printf_i+0xfa>
 8021f62:	6821      	ldr	r1, [r4, #0]
 8021f64:	6833      	ldr	r3, [r6, #0]
 8021f66:	0608      	lsls	r0, r1, #24
 8021f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8021f6c:	d402      	bmi.n	8021f74 <_printf_i+0xe8>
 8021f6e:	0649      	lsls	r1, r1, #25
 8021f70:	bf48      	it	mi
 8021f72:	b2ad      	uxthmi	r5, r5
 8021f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8021f76:	6033      	str	r3, [r6, #0]
 8021f78:	bf14      	ite	ne
 8021f7a:	230a      	movne	r3, #10
 8021f7c:	2308      	moveq	r3, #8
 8021f7e:	4850      	ldr	r0, [pc, #320]	@ (80220c0 <_printf_i+0x234>)
 8021f80:	2100      	movs	r1, #0
 8021f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021f86:	6866      	ldr	r6, [r4, #4]
 8021f88:	2e00      	cmp	r6, #0
 8021f8a:	60a6      	str	r6, [r4, #8]
 8021f8c:	db05      	blt.n	8021f9a <_printf_i+0x10e>
 8021f8e:	6821      	ldr	r1, [r4, #0]
 8021f90:	432e      	orrs	r6, r5
 8021f92:	f021 0104 	bic.w	r1, r1, #4
 8021f96:	6021      	str	r1, [r4, #0]
 8021f98:	d04b      	beq.n	8022032 <_printf_i+0x1a6>
 8021f9a:	4616      	mov	r6, r2
 8021f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8021fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8021fa4:	5dc7      	ldrb	r7, [r0, r7]
 8021fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021faa:	462f      	mov	r7, r5
 8021fac:	42bb      	cmp	r3, r7
 8021fae:	460d      	mov	r5, r1
 8021fb0:	d9f4      	bls.n	8021f9c <_printf_i+0x110>
 8021fb2:	2b08      	cmp	r3, #8
 8021fb4:	d10b      	bne.n	8021fce <_printf_i+0x142>
 8021fb6:	6823      	ldr	r3, [r4, #0]
 8021fb8:	07df      	lsls	r7, r3, #31
 8021fba:	d508      	bpl.n	8021fce <_printf_i+0x142>
 8021fbc:	6923      	ldr	r3, [r4, #16]
 8021fbe:	6861      	ldr	r1, [r4, #4]
 8021fc0:	4299      	cmp	r1, r3
 8021fc2:	bfde      	ittt	le
 8021fc4:	2330      	movle	r3, #48	@ 0x30
 8021fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021fce:	1b92      	subs	r2, r2, r6
 8021fd0:	6122      	str	r2, [r4, #16]
 8021fd2:	464b      	mov	r3, r9
 8021fd4:	4621      	mov	r1, r4
 8021fd6:	4640      	mov	r0, r8
 8021fd8:	f8cd a000 	str.w	sl, [sp]
 8021fdc:	aa03      	add	r2, sp, #12
 8021fde:	f7ff fee3 	bl	8021da8 <_printf_common>
 8021fe2:	3001      	adds	r0, #1
 8021fe4:	d14a      	bne.n	802207c <_printf_i+0x1f0>
 8021fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8021fea:	b004      	add	sp, #16
 8021fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ff0:	6823      	ldr	r3, [r4, #0]
 8021ff2:	f043 0320 	orr.w	r3, r3, #32
 8021ff6:	6023      	str	r3, [r4, #0]
 8021ff8:	2778      	movs	r7, #120	@ 0x78
 8021ffa:	4832      	ldr	r0, [pc, #200]	@ (80220c4 <_printf_i+0x238>)
 8021ffc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022000:	6823      	ldr	r3, [r4, #0]
 8022002:	6831      	ldr	r1, [r6, #0]
 8022004:	061f      	lsls	r7, r3, #24
 8022006:	f851 5b04 	ldr.w	r5, [r1], #4
 802200a:	d402      	bmi.n	8022012 <_printf_i+0x186>
 802200c:	065f      	lsls	r7, r3, #25
 802200e:	bf48      	it	mi
 8022010:	b2ad      	uxthmi	r5, r5
 8022012:	6031      	str	r1, [r6, #0]
 8022014:	07d9      	lsls	r1, r3, #31
 8022016:	bf44      	itt	mi
 8022018:	f043 0320 	orrmi.w	r3, r3, #32
 802201c:	6023      	strmi	r3, [r4, #0]
 802201e:	b11d      	cbz	r5, 8022028 <_printf_i+0x19c>
 8022020:	2310      	movs	r3, #16
 8022022:	e7ad      	b.n	8021f80 <_printf_i+0xf4>
 8022024:	4826      	ldr	r0, [pc, #152]	@ (80220c0 <_printf_i+0x234>)
 8022026:	e7e9      	b.n	8021ffc <_printf_i+0x170>
 8022028:	6823      	ldr	r3, [r4, #0]
 802202a:	f023 0320 	bic.w	r3, r3, #32
 802202e:	6023      	str	r3, [r4, #0]
 8022030:	e7f6      	b.n	8022020 <_printf_i+0x194>
 8022032:	4616      	mov	r6, r2
 8022034:	e7bd      	b.n	8021fb2 <_printf_i+0x126>
 8022036:	6833      	ldr	r3, [r6, #0]
 8022038:	6825      	ldr	r5, [r4, #0]
 802203a:	1d18      	adds	r0, r3, #4
 802203c:	6961      	ldr	r1, [r4, #20]
 802203e:	6030      	str	r0, [r6, #0]
 8022040:	062e      	lsls	r6, r5, #24
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	d501      	bpl.n	802204a <_printf_i+0x1be>
 8022046:	6019      	str	r1, [r3, #0]
 8022048:	e002      	b.n	8022050 <_printf_i+0x1c4>
 802204a:	0668      	lsls	r0, r5, #25
 802204c:	d5fb      	bpl.n	8022046 <_printf_i+0x1ba>
 802204e:	8019      	strh	r1, [r3, #0]
 8022050:	2300      	movs	r3, #0
 8022052:	4616      	mov	r6, r2
 8022054:	6123      	str	r3, [r4, #16]
 8022056:	e7bc      	b.n	8021fd2 <_printf_i+0x146>
 8022058:	6833      	ldr	r3, [r6, #0]
 802205a:	2100      	movs	r1, #0
 802205c:	1d1a      	adds	r2, r3, #4
 802205e:	6032      	str	r2, [r6, #0]
 8022060:	681e      	ldr	r6, [r3, #0]
 8022062:	6862      	ldr	r2, [r4, #4]
 8022064:	4630      	mov	r0, r6
 8022066:	f000 fbde 	bl	8022826 <memchr>
 802206a:	b108      	cbz	r0, 8022070 <_printf_i+0x1e4>
 802206c:	1b80      	subs	r0, r0, r6
 802206e:	6060      	str	r0, [r4, #4]
 8022070:	6863      	ldr	r3, [r4, #4]
 8022072:	6123      	str	r3, [r4, #16]
 8022074:	2300      	movs	r3, #0
 8022076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802207a:	e7aa      	b.n	8021fd2 <_printf_i+0x146>
 802207c:	4632      	mov	r2, r6
 802207e:	4649      	mov	r1, r9
 8022080:	4640      	mov	r0, r8
 8022082:	6923      	ldr	r3, [r4, #16]
 8022084:	47d0      	blx	sl
 8022086:	3001      	adds	r0, #1
 8022088:	d0ad      	beq.n	8021fe6 <_printf_i+0x15a>
 802208a:	6823      	ldr	r3, [r4, #0]
 802208c:	079b      	lsls	r3, r3, #30
 802208e:	d413      	bmi.n	80220b8 <_printf_i+0x22c>
 8022090:	68e0      	ldr	r0, [r4, #12]
 8022092:	9b03      	ldr	r3, [sp, #12]
 8022094:	4298      	cmp	r0, r3
 8022096:	bfb8      	it	lt
 8022098:	4618      	movlt	r0, r3
 802209a:	e7a6      	b.n	8021fea <_printf_i+0x15e>
 802209c:	2301      	movs	r3, #1
 802209e:	4632      	mov	r2, r6
 80220a0:	4649      	mov	r1, r9
 80220a2:	4640      	mov	r0, r8
 80220a4:	47d0      	blx	sl
 80220a6:	3001      	adds	r0, #1
 80220a8:	d09d      	beq.n	8021fe6 <_printf_i+0x15a>
 80220aa:	3501      	adds	r5, #1
 80220ac:	68e3      	ldr	r3, [r4, #12]
 80220ae:	9903      	ldr	r1, [sp, #12]
 80220b0:	1a5b      	subs	r3, r3, r1
 80220b2:	42ab      	cmp	r3, r5
 80220b4:	dcf2      	bgt.n	802209c <_printf_i+0x210>
 80220b6:	e7eb      	b.n	8022090 <_printf_i+0x204>
 80220b8:	2500      	movs	r5, #0
 80220ba:	f104 0619 	add.w	r6, r4, #25
 80220be:	e7f5      	b.n	80220ac <_printf_i+0x220>
 80220c0:	08032f65 	.word	0x08032f65
 80220c4:	08032f76 	.word	0x08032f76

080220c8 <std>:
 80220c8:	2300      	movs	r3, #0
 80220ca:	b510      	push	{r4, lr}
 80220cc:	4604      	mov	r4, r0
 80220ce:	e9c0 3300 	strd	r3, r3, [r0]
 80220d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80220d6:	6083      	str	r3, [r0, #8]
 80220d8:	8181      	strh	r1, [r0, #12]
 80220da:	6643      	str	r3, [r0, #100]	@ 0x64
 80220dc:	81c2      	strh	r2, [r0, #14]
 80220de:	6183      	str	r3, [r0, #24]
 80220e0:	4619      	mov	r1, r3
 80220e2:	2208      	movs	r2, #8
 80220e4:	305c      	adds	r0, #92	@ 0x5c
 80220e6:	f000 fa87 	bl	80225f8 <memset>
 80220ea:	4b0d      	ldr	r3, [pc, #52]	@ (8022120 <std+0x58>)
 80220ec:	6224      	str	r4, [r4, #32]
 80220ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80220f0:	4b0c      	ldr	r3, [pc, #48]	@ (8022124 <std+0x5c>)
 80220f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80220f4:	4b0c      	ldr	r3, [pc, #48]	@ (8022128 <std+0x60>)
 80220f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80220f8:	4b0c      	ldr	r3, [pc, #48]	@ (802212c <std+0x64>)
 80220fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80220fc:	4b0c      	ldr	r3, [pc, #48]	@ (8022130 <std+0x68>)
 80220fe:	429c      	cmp	r4, r3
 8022100:	d006      	beq.n	8022110 <std+0x48>
 8022102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022106:	4294      	cmp	r4, r2
 8022108:	d002      	beq.n	8022110 <std+0x48>
 802210a:	33d0      	adds	r3, #208	@ 0xd0
 802210c:	429c      	cmp	r4, r3
 802210e:	d105      	bne.n	802211c <std+0x54>
 8022110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022118:	f000 bb82 	b.w	8022820 <__retarget_lock_init_recursive>
 802211c:	bd10      	pop	{r4, pc}
 802211e:	bf00      	nop
 8022120:	080223f1 	.word	0x080223f1
 8022124:	08022417 	.word	0x08022417
 8022128:	0802244f 	.word	0x0802244f
 802212c:	08022473 	.word	0x08022473
 8022130:	2000bf24 	.word	0x2000bf24

08022134 <stdio_exit_handler>:
 8022134:	4a02      	ldr	r2, [pc, #8]	@ (8022140 <stdio_exit_handler+0xc>)
 8022136:	4903      	ldr	r1, [pc, #12]	@ (8022144 <stdio_exit_handler+0x10>)
 8022138:	4803      	ldr	r0, [pc, #12]	@ (8022148 <stdio_exit_handler+0x14>)
 802213a:	f000 b869 	b.w	8022210 <_fwalk_sglue>
 802213e:	bf00      	nop
 8022140:	20000128 	.word	0x20000128
 8022144:	08024aad 	.word	0x08024aad
 8022148:	20000138 	.word	0x20000138

0802214c <cleanup_stdio>:
 802214c:	6841      	ldr	r1, [r0, #4]
 802214e:	4b0c      	ldr	r3, [pc, #48]	@ (8022180 <cleanup_stdio+0x34>)
 8022150:	b510      	push	{r4, lr}
 8022152:	4299      	cmp	r1, r3
 8022154:	4604      	mov	r4, r0
 8022156:	d001      	beq.n	802215c <cleanup_stdio+0x10>
 8022158:	f002 fca8 	bl	8024aac <_fflush_r>
 802215c:	68a1      	ldr	r1, [r4, #8]
 802215e:	4b09      	ldr	r3, [pc, #36]	@ (8022184 <cleanup_stdio+0x38>)
 8022160:	4299      	cmp	r1, r3
 8022162:	d002      	beq.n	802216a <cleanup_stdio+0x1e>
 8022164:	4620      	mov	r0, r4
 8022166:	f002 fca1 	bl	8024aac <_fflush_r>
 802216a:	68e1      	ldr	r1, [r4, #12]
 802216c:	4b06      	ldr	r3, [pc, #24]	@ (8022188 <cleanup_stdio+0x3c>)
 802216e:	4299      	cmp	r1, r3
 8022170:	d004      	beq.n	802217c <cleanup_stdio+0x30>
 8022172:	4620      	mov	r0, r4
 8022174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022178:	f002 bc98 	b.w	8024aac <_fflush_r>
 802217c:	bd10      	pop	{r4, pc}
 802217e:	bf00      	nop
 8022180:	2000bf24 	.word	0x2000bf24
 8022184:	2000bf8c 	.word	0x2000bf8c
 8022188:	2000bff4 	.word	0x2000bff4

0802218c <global_stdio_init.part.0>:
 802218c:	b510      	push	{r4, lr}
 802218e:	4b0b      	ldr	r3, [pc, #44]	@ (80221bc <global_stdio_init.part.0+0x30>)
 8022190:	4c0b      	ldr	r4, [pc, #44]	@ (80221c0 <global_stdio_init.part.0+0x34>)
 8022192:	4a0c      	ldr	r2, [pc, #48]	@ (80221c4 <global_stdio_init.part.0+0x38>)
 8022194:	4620      	mov	r0, r4
 8022196:	601a      	str	r2, [r3, #0]
 8022198:	2104      	movs	r1, #4
 802219a:	2200      	movs	r2, #0
 802219c:	f7ff ff94 	bl	80220c8 <std>
 80221a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80221a4:	2201      	movs	r2, #1
 80221a6:	2109      	movs	r1, #9
 80221a8:	f7ff ff8e 	bl	80220c8 <std>
 80221ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80221b0:	2202      	movs	r2, #2
 80221b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221b6:	2112      	movs	r1, #18
 80221b8:	f7ff bf86 	b.w	80220c8 <std>
 80221bc:	2000c05c 	.word	0x2000c05c
 80221c0:	2000bf24 	.word	0x2000bf24
 80221c4:	08022135 	.word	0x08022135

080221c8 <__sfp_lock_acquire>:
 80221c8:	4801      	ldr	r0, [pc, #4]	@ (80221d0 <__sfp_lock_acquire+0x8>)
 80221ca:	f000 bb2a 	b.w	8022822 <__retarget_lock_acquire_recursive>
 80221ce:	bf00      	nop
 80221d0:	2000c065 	.word	0x2000c065

080221d4 <__sfp_lock_release>:
 80221d4:	4801      	ldr	r0, [pc, #4]	@ (80221dc <__sfp_lock_release+0x8>)
 80221d6:	f000 bb25 	b.w	8022824 <__retarget_lock_release_recursive>
 80221da:	bf00      	nop
 80221dc:	2000c065 	.word	0x2000c065

080221e0 <__sinit>:
 80221e0:	b510      	push	{r4, lr}
 80221e2:	4604      	mov	r4, r0
 80221e4:	f7ff fff0 	bl	80221c8 <__sfp_lock_acquire>
 80221e8:	6a23      	ldr	r3, [r4, #32]
 80221ea:	b11b      	cbz	r3, 80221f4 <__sinit+0x14>
 80221ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221f0:	f7ff bff0 	b.w	80221d4 <__sfp_lock_release>
 80221f4:	4b04      	ldr	r3, [pc, #16]	@ (8022208 <__sinit+0x28>)
 80221f6:	6223      	str	r3, [r4, #32]
 80221f8:	4b04      	ldr	r3, [pc, #16]	@ (802220c <__sinit+0x2c>)
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d1f5      	bne.n	80221ec <__sinit+0xc>
 8022200:	f7ff ffc4 	bl	802218c <global_stdio_init.part.0>
 8022204:	e7f2      	b.n	80221ec <__sinit+0xc>
 8022206:	bf00      	nop
 8022208:	0802214d 	.word	0x0802214d
 802220c:	2000c05c 	.word	0x2000c05c

08022210 <_fwalk_sglue>:
 8022210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022214:	4607      	mov	r7, r0
 8022216:	4688      	mov	r8, r1
 8022218:	4614      	mov	r4, r2
 802221a:	2600      	movs	r6, #0
 802221c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022220:	f1b9 0901 	subs.w	r9, r9, #1
 8022224:	d505      	bpl.n	8022232 <_fwalk_sglue+0x22>
 8022226:	6824      	ldr	r4, [r4, #0]
 8022228:	2c00      	cmp	r4, #0
 802222a:	d1f7      	bne.n	802221c <_fwalk_sglue+0xc>
 802222c:	4630      	mov	r0, r6
 802222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022232:	89ab      	ldrh	r3, [r5, #12]
 8022234:	2b01      	cmp	r3, #1
 8022236:	d907      	bls.n	8022248 <_fwalk_sglue+0x38>
 8022238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802223c:	3301      	adds	r3, #1
 802223e:	d003      	beq.n	8022248 <_fwalk_sglue+0x38>
 8022240:	4629      	mov	r1, r5
 8022242:	4638      	mov	r0, r7
 8022244:	47c0      	blx	r8
 8022246:	4306      	orrs	r6, r0
 8022248:	3568      	adds	r5, #104	@ 0x68
 802224a:	e7e9      	b.n	8022220 <_fwalk_sglue+0x10>

0802224c <iprintf>:
 802224c:	b40f      	push	{r0, r1, r2, r3}
 802224e:	b507      	push	{r0, r1, r2, lr}
 8022250:	4906      	ldr	r1, [pc, #24]	@ (802226c <iprintf+0x20>)
 8022252:	ab04      	add	r3, sp, #16
 8022254:	6808      	ldr	r0, [r1, #0]
 8022256:	f853 2b04 	ldr.w	r2, [r3], #4
 802225a:	6881      	ldr	r1, [r0, #8]
 802225c:	9301      	str	r3, [sp, #4]
 802225e:	f002 f941 	bl	80244e4 <_vfiprintf_r>
 8022262:	b003      	add	sp, #12
 8022264:	f85d eb04 	ldr.w	lr, [sp], #4
 8022268:	b004      	add	sp, #16
 802226a:	4770      	bx	lr
 802226c:	20000134 	.word	0x20000134

08022270 <_puts_r>:
 8022270:	6a03      	ldr	r3, [r0, #32]
 8022272:	b570      	push	{r4, r5, r6, lr}
 8022274:	4605      	mov	r5, r0
 8022276:	460e      	mov	r6, r1
 8022278:	6884      	ldr	r4, [r0, #8]
 802227a:	b90b      	cbnz	r3, 8022280 <_puts_r+0x10>
 802227c:	f7ff ffb0 	bl	80221e0 <__sinit>
 8022280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022282:	07db      	lsls	r3, r3, #31
 8022284:	d405      	bmi.n	8022292 <_puts_r+0x22>
 8022286:	89a3      	ldrh	r3, [r4, #12]
 8022288:	0598      	lsls	r0, r3, #22
 802228a:	d402      	bmi.n	8022292 <_puts_r+0x22>
 802228c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802228e:	f000 fac8 	bl	8022822 <__retarget_lock_acquire_recursive>
 8022292:	89a3      	ldrh	r3, [r4, #12]
 8022294:	0719      	lsls	r1, r3, #28
 8022296:	d502      	bpl.n	802229e <_puts_r+0x2e>
 8022298:	6923      	ldr	r3, [r4, #16]
 802229a:	2b00      	cmp	r3, #0
 802229c:	d135      	bne.n	802230a <_puts_r+0x9a>
 802229e:	4621      	mov	r1, r4
 80222a0:	4628      	mov	r0, r5
 80222a2:	f000 f929 	bl	80224f8 <__swsetup_r>
 80222a6:	b380      	cbz	r0, 802230a <_puts_r+0x9a>
 80222a8:	f04f 35ff 	mov.w	r5, #4294967295
 80222ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80222ae:	07da      	lsls	r2, r3, #31
 80222b0:	d405      	bmi.n	80222be <_puts_r+0x4e>
 80222b2:	89a3      	ldrh	r3, [r4, #12]
 80222b4:	059b      	lsls	r3, r3, #22
 80222b6:	d402      	bmi.n	80222be <_puts_r+0x4e>
 80222b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80222ba:	f000 fab3 	bl	8022824 <__retarget_lock_release_recursive>
 80222be:	4628      	mov	r0, r5
 80222c0:	bd70      	pop	{r4, r5, r6, pc}
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	da04      	bge.n	80222d0 <_puts_r+0x60>
 80222c6:	69a2      	ldr	r2, [r4, #24]
 80222c8:	429a      	cmp	r2, r3
 80222ca:	dc17      	bgt.n	80222fc <_puts_r+0x8c>
 80222cc:	290a      	cmp	r1, #10
 80222ce:	d015      	beq.n	80222fc <_puts_r+0x8c>
 80222d0:	6823      	ldr	r3, [r4, #0]
 80222d2:	1c5a      	adds	r2, r3, #1
 80222d4:	6022      	str	r2, [r4, #0]
 80222d6:	7019      	strb	r1, [r3, #0]
 80222d8:	68a3      	ldr	r3, [r4, #8]
 80222da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80222de:	3b01      	subs	r3, #1
 80222e0:	60a3      	str	r3, [r4, #8]
 80222e2:	2900      	cmp	r1, #0
 80222e4:	d1ed      	bne.n	80222c2 <_puts_r+0x52>
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	da11      	bge.n	802230e <_puts_r+0x9e>
 80222ea:	4622      	mov	r2, r4
 80222ec:	210a      	movs	r1, #10
 80222ee:	4628      	mov	r0, r5
 80222f0:	f000 f8c3 	bl	802247a <__swbuf_r>
 80222f4:	3001      	adds	r0, #1
 80222f6:	d0d7      	beq.n	80222a8 <_puts_r+0x38>
 80222f8:	250a      	movs	r5, #10
 80222fa:	e7d7      	b.n	80222ac <_puts_r+0x3c>
 80222fc:	4622      	mov	r2, r4
 80222fe:	4628      	mov	r0, r5
 8022300:	f000 f8bb 	bl	802247a <__swbuf_r>
 8022304:	3001      	adds	r0, #1
 8022306:	d1e7      	bne.n	80222d8 <_puts_r+0x68>
 8022308:	e7ce      	b.n	80222a8 <_puts_r+0x38>
 802230a:	3e01      	subs	r6, #1
 802230c:	e7e4      	b.n	80222d8 <_puts_r+0x68>
 802230e:	6823      	ldr	r3, [r4, #0]
 8022310:	1c5a      	adds	r2, r3, #1
 8022312:	6022      	str	r2, [r4, #0]
 8022314:	220a      	movs	r2, #10
 8022316:	701a      	strb	r2, [r3, #0]
 8022318:	e7ee      	b.n	80222f8 <_puts_r+0x88>
	...

0802231c <puts>:
 802231c:	4b02      	ldr	r3, [pc, #8]	@ (8022328 <puts+0xc>)
 802231e:	4601      	mov	r1, r0
 8022320:	6818      	ldr	r0, [r3, #0]
 8022322:	f7ff bfa5 	b.w	8022270 <_puts_r>
 8022326:	bf00      	nop
 8022328:	20000134 	.word	0x20000134

0802232c <sniprintf>:
 802232c:	b40c      	push	{r2, r3}
 802232e:	b530      	push	{r4, r5, lr}
 8022330:	4b18      	ldr	r3, [pc, #96]	@ (8022394 <sniprintf+0x68>)
 8022332:	1e0c      	subs	r4, r1, #0
 8022334:	681d      	ldr	r5, [r3, #0]
 8022336:	b09d      	sub	sp, #116	@ 0x74
 8022338:	da08      	bge.n	802234c <sniprintf+0x20>
 802233a:	238b      	movs	r3, #139	@ 0x8b
 802233c:	f04f 30ff 	mov.w	r0, #4294967295
 8022340:	602b      	str	r3, [r5, #0]
 8022342:	b01d      	add	sp, #116	@ 0x74
 8022344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022348:	b002      	add	sp, #8
 802234a:	4770      	bx	lr
 802234c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022350:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022354:	f04f 0300 	mov.w	r3, #0
 8022358:	931b      	str	r3, [sp, #108]	@ 0x6c
 802235a:	bf0c      	ite	eq
 802235c:	4623      	moveq	r3, r4
 802235e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022362:	9304      	str	r3, [sp, #16]
 8022364:	9307      	str	r3, [sp, #28]
 8022366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802236a:	9002      	str	r0, [sp, #8]
 802236c:	9006      	str	r0, [sp, #24]
 802236e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022372:	4628      	mov	r0, r5
 8022374:	ab21      	add	r3, sp, #132	@ 0x84
 8022376:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022378:	a902      	add	r1, sp, #8
 802237a:	9301      	str	r3, [sp, #4]
 802237c:	f001 fdc0 	bl	8023f00 <_svfiprintf_r>
 8022380:	1c43      	adds	r3, r0, #1
 8022382:	bfbc      	itt	lt
 8022384:	238b      	movlt	r3, #139	@ 0x8b
 8022386:	602b      	strlt	r3, [r5, #0]
 8022388:	2c00      	cmp	r4, #0
 802238a:	d0da      	beq.n	8022342 <sniprintf+0x16>
 802238c:	2200      	movs	r2, #0
 802238e:	9b02      	ldr	r3, [sp, #8]
 8022390:	701a      	strb	r2, [r3, #0]
 8022392:	e7d6      	b.n	8022342 <sniprintf+0x16>
 8022394:	20000134 	.word	0x20000134

08022398 <siscanf>:
 8022398:	b40e      	push	{r1, r2, r3}
 802239a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802239e:	b570      	push	{r4, r5, r6, lr}
 80223a0:	2500      	movs	r5, #0
 80223a2:	b09d      	sub	sp, #116	@ 0x74
 80223a4:	ac21      	add	r4, sp, #132	@ 0x84
 80223a6:	f854 6b04 	ldr.w	r6, [r4], #4
 80223aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80223ae:	951b      	str	r5, [sp, #108]	@ 0x6c
 80223b0:	9002      	str	r0, [sp, #8]
 80223b2:	9006      	str	r0, [sp, #24]
 80223b4:	f7dd ff12 	bl	80001dc <strlen>
 80223b8:	4b0b      	ldr	r3, [pc, #44]	@ (80223e8 <siscanf+0x50>)
 80223ba:	9003      	str	r0, [sp, #12]
 80223bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80223c2:	9007      	str	r0, [sp, #28]
 80223c4:	4809      	ldr	r0, [pc, #36]	@ (80223ec <siscanf+0x54>)
 80223c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80223ca:	4632      	mov	r2, r6
 80223cc:	4623      	mov	r3, r4
 80223ce:	a902      	add	r1, sp, #8
 80223d0:	6800      	ldr	r0, [r0, #0]
 80223d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80223d4:	9514      	str	r5, [sp, #80]	@ 0x50
 80223d6:	9401      	str	r4, [sp, #4]
 80223d8:	f001 fee8 	bl	80241ac <__ssvfiscanf_r>
 80223dc:	b01d      	add	sp, #116	@ 0x74
 80223de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80223e2:	b003      	add	sp, #12
 80223e4:	4770      	bx	lr
 80223e6:	bf00      	nop
 80223e8:	08022413 	.word	0x08022413
 80223ec:	20000134 	.word	0x20000134

080223f0 <__sread>:
 80223f0:	b510      	push	{r4, lr}
 80223f2:	460c      	mov	r4, r1
 80223f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223f8:	f000 f9c4 	bl	8022784 <_read_r>
 80223fc:	2800      	cmp	r0, #0
 80223fe:	bfab      	itete	ge
 8022400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022402:	89a3      	ldrhlt	r3, [r4, #12]
 8022404:	181b      	addge	r3, r3, r0
 8022406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802240a:	bfac      	ite	ge
 802240c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802240e:	81a3      	strhlt	r3, [r4, #12]
 8022410:	bd10      	pop	{r4, pc}

08022412 <__seofread>:
 8022412:	2000      	movs	r0, #0
 8022414:	4770      	bx	lr

08022416 <__swrite>:
 8022416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802241a:	461f      	mov	r7, r3
 802241c:	898b      	ldrh	r3, [r1, #12]
 802241e:	4605      	mov	r5, r0
 8022420:	05db      	lsls	r3, r3, #23
 8022422:	460c      	mov	r4, r1
 8022424:	4616      	mov	r6, r2
 8022426:	d505      	bpl.n	8022434 <__swrite+0x1e>
 8022428:	2302      	movs	r3, #2
 802242a:	2200      	movs	r2, #0
 802242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022430:	f000 f996 	bl	8022760 <_lseek_r>
 8022434:	89a3      	ldrh	r3, [r4, #12]
 8022436:	4632      	mov	r2, r6
 8022438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802243c:	81a3      	strh	r3, [r4, #12]
 802243e:	4628      	mov	r0, r5
 8022440:	463b      	mov	r3, r7
 8022442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802244a:	f000 b9ad 	b.w	80227a8 <_write_r>

0802244e <__sseek>:
 802244e:	b510      	push	{r4, lr}
 8022450:	460c      	mov	r4, r1
 8022452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022456:	f000 f983 	bl	8022760 <_lseek_r>
 802245a:	1c43      	adds	r3, r0, #1
 802245c:	89a3      	ldrh	r3, [r4, #12]
 802245e:	bf15      	itete	ne
 8022460:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802246a:	81a3      	strheq	r3, [r4, #12]
 802246c:	bf18      	it	ne
 802246e:	81a3      	strhne	r3, [r4, #12]
 8022470:	bd10      	pop	{r4, pc}

08022472 <__sclose>:
 8022472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022476:	f000 b963 	b.w	8022740 <_close_r>

0802247a <__swbuf_r>:
 802247a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802247c:	460e      	mov	r6, r1
 802247e:	4614      	mov	r4, r2
 8022480:	4605      	mov	r5, r0
 8022482:	b118      	cbz	r0, 802248c <__swbuf_r+0x12>
 8022484:	6a03      	ldr	r3, [r0, #32]
 8022486:	b90b      	cbnz	r3, 802248c <__swbuf_r+0x12>
 8022488:	f7ff feaa 	bl	80221e0 <__sinit>
 802248c:	69a3      	ldr	r3, [r4, #24]
 802248e:	60a3      	str	r3, [r4, #8]
 8022490:	89a3      	ldrh	r3, [r4, #12]
 8022492:	071a      	lsls	r2, r3, #28
 8022494:	d501      	bpl.n	802249a <__swbuf_r+0x20>
 8022496:	6923      	ldr	r3, [r4, #16]
 8022498:	b943      	cbnz	r3, 80224ac <__swbuf_r+0x32>
 802249a:	4621      	mov	r1, r4
 802249c:	4628      	mov	r0, r5
 802249e:	f000 f82b 	bl	80224f8 <__swsetup_r>
 80224a2:	b118      	cbz	r0, 80224ac <__swbuf_r+0x32>
 80224a4:	f04f 37ff 	mov.w	r7, #4294967295
 80224a8:	4638      	mov	r0, r7
 80224aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80224ac:	6823      	ldr	r3, [r4, #0]
 80224ae:	6922      	ldr	r2, [r4, #16]
 80224b0:	b2f6      	uxtb	r6, r6
 80224b2:	1a98      	subs	r0, r3, r2
 80224b4:	6963      	ldr	r3, [r4, #20]
 80224b6:	4637      	mov	r7, r6
 80224b8:	4283      	cmp	r3, r0
 80224ba:	dc05      	bgt.n	80224c8 <__swbuf_r+0x4e>
 80224bc:	4621      	mov	r1, r4
 80224be:	4628      	mov	r0, r5
 80224c0:	f002 faf4 	bl	8024aac <_fflush_r>
 80224c4:	2800      	cmp	r0, #0
 80224c6:	d1ed      	bne.n	80224a4 <__swbuf_r+0x2a>
 80224c8:	68a3      	ldr	r3, [r4, #8]
 80224ca:	3b01      	subs	r3, #1
 80224cc:	60a3      	str	r3, [r4, #8]
 80224ce:	6823      	ldr	r3, [r4, #0]
 80224d0:	1c5a      	adds	r2, r3, #1
 80224d2:	6022      	str	r2, [r4, #0]
 80224d4:	701e      	strb	r6, [r3, #0]
 80224d6:	6962      	ldr	r2, [r4, #20]
 80224d8:	1c43      	adds	r3, r0, #1
 80224da:	429a      	cmp	r2, r3
 80224dc:	d004      	beq.n	80224e8 <__swbuf_r+0x6e>
 80224de:	89a3      	ldrh	r3, [r4, #12]
 80224e0:	07db      	lsls	r3, r3, #31
 80224e2:	d5e1      	bpl.n	80224a8 <__swbuf_r+0x2e>
 80224e4:	2e0a      	cmp	r6, #10
 80224e6:	d1df      	bne.n	80224a8 <__swbuf_r+0x2e>
 80224e8:	4621      	mov	r1, r4
 80224ea:	4628      	mov	r0, r5
 80224ec:	f002 fade 	bl	8024aac <_fflush_r>
 80224f0:	2800      	cmp	r0, #0
 80224f2:	d0d9      	beq.n	80224a8 <__swbuf_r+0x2e>
 80224f4:	e7d6      	b.n	80224a4 <__swbuf_r+0x2a>
	...

080224f8 <__swsetup_r>:
 80224f8:	b538      	push	{r3, r4, r5, lr}
 80224fa:	4b29      	ldr	r3, [pc, #164]	@ (80225a0 <__swsetup_r+0xa8>)
 80224fc:	4605      	mov	r5, r0
 80224fe:	6818      	ldr	r0, [r3, #0]
 8022500:	460c      	mov	r4, r1
 8022502:	b118      	cbz	r0, 802250c <__swsetup_r+0x14>
 8022504:	6a03      	ldr	r3, [r0, #32]
 8022506:	b90b      	cbnz	r3, 802250c <__swsetup_r+0x14>
 8022508:	f7ff fe6a 	bl	80221e0 <__sinit>
 802250c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022510:	0719      	lsls	r1, r3, #28
 8022512:	d422      	bmi.n	802255a <__swsetup_r+0x62>
 8022514:	06da      	lsls	r2, r3, #27
 8022516:	d407      	bmi.n	8022528 <__swsetup_r+0x30>
 8022518:	2209      	movs	r2, #9
 802251a:	602a      	str	r2, [r5, #0]
 802251c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022520:	f04f 30ff 	mov.w	r0, #4294967295
 8022524:	81a3      	strh	r3, [r4, #12]
 8022526:	e033      	b.n	8022590 <__swsetup_r+0x98>
 8022528:	0758      	lsls	r0, r3, #29
 802252a:	d512      	bpl.n	8022552 <__swsetup_r+0x5a>
 802252c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802252e:	b141      	cbz	r1, 8022542 <__swsetup_r+0x4a>
 8022530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022534:	4299      	cmp	r1, r3
 8022536:	d002      	beq.n	802253e <__swsetup_r+0x46>
 8022538:	4628      	mov	r0, r5
 802253a:	f001 f80d 	bl	8023558 <_free_r>
 802253e:	2300      	movs	r3, #0
 8022540:	6363      	str	r3, [r4, #52]	@ 0x34
 8022542:	89a3      	ldrh	r3, [r4, #12]
 8022544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022548:	81a3      	strh	r3, [r4, #12]
 802254a:	2300      	movs	r3, #0
 802254c:	6063      	str	r3, [r4, #4]
 802254e:	6923      	ldr	r3, [r4, #16]
 8022550:	6023      	str	r3, [r4, #0]
 8022552:	89a3      	ldrh	r3, [r4, #12]
 8022554:	f043 0308 	orr.w	r3, r3, #8
 8022558:	81a3      	strh	r3, [r4, #12]
 802255a:	6923      	ldr	r3, [r4, #16]
 802255c:	b94b      	cbnz	r3, 8022572 <__swsetup_r+0x7a>
 802255e:	89a3      	ldrh	r3, [r4, #12]
 8022560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022568:	d003      	beq.n	8022572 <__swsetup_r+0x7a>
 802256a:	4621      	mov	r1, r4
 802256c:	4628      	mov	r0, r5
 802256e:	f002 fafc 	bl	8024b6a <__smakebuf_r>
 8022572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022576:	f013 0201 	ands.w	r2, r3, #1
 802257a:	d00a      	beq.n	8022592 <__swsetup_r+0x9a>
 802257c:	2200      	movs	r2, #0
 802257e:	60a2      	str	r2, [r4, #8]
 8022580:	6962      	ldr	r2, [r4, #20]
 8022582:	4252      	negs	r2, r2
 8022584:	61a2      	str	r2, [r4, #24]
 8022586:	6922      	ldr	r2, [r4, #16]
 8022588:	b942      	cbnz	r2, 802259c <__swsetup_r+0xa4>
 802258a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802258e:	d1c5      	bne.n	802251c <__swsetup_r+0x24>
 8022590:	bd38      	pop	{r3, r4, r5, pc}
 8022592:	0799      	lsls	r1, r3, #30
 8022594:	bf58      	it	pl
 8022596:	6962      	ldrpl	r2, [r4, #20]
 8022598:	60a2      	str	r2, [r4, #8]
 802259a:	e7f4      	b.n	8022586 <__swsetup_r+0x8e>
 802259c:	2000      	movs	r0, #0
 802259e:	e7f7      	b.n	8022590 <__swsetup_r+0x98>
 80225a0:	20000134 	.word	0x20000134

080225a4 <memcmp>:
 80225a4:	b510      	push	{r4, lr}
 80225a6:	3901      	subs	r1, #1
 80225a8:	4402      	add	r2, r0
 80225aa:	4290      	cmp	r0, r2
 80225ac:	d101      	bne.n	80225b2 <memcmp+0xe>
 80225ae:	2000      	movs	r0, #0
 80225b0:	e005      	b.n	80225be <memcmp+0x1a>
 80225b2:	7803      	ldrb	r3, [r0, #0]
 80225b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80225b8:	42a3      	cmp	r3, r4
 80225ba:	d001      	beq.n	80225c0 <memcmp+0x1c>
 80225bc:	1b18      	subs	r0, r3, r4
 80225be:	bd10      	pop	{r4, pc}
 80225c0:	3001      	adds	r0, #1
 80225c2:	e7f2      	b.n	80225aa <memcmp+0x6>

080225c4 <memmove>:
 80225c4:	4288      	cmp	r0, r1
 80225c6:	b510      	push	{r4, lr}
 80225c8:	eb01 0402 	add.w	r4, r1, r2
 80225cc:	d902      	bls.n	80225d4 <memmove+0x10>
 80225ce:	4284      	cmp	r4, r0
 80225d0:	4623      	mov	r3, r4
 80225d2:	d807      	bhi.n	80225e4 <memmove+0x20>
 80225d4:	1e43      	subs	r3, r0, #1
 80225d6:	42a1      	cmp	r1, r4
 80225d8:	d008      	beq.n	80225ec <memmove+0x28>
 80225da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80225e2:	e7f8      	b.n	80225d6 <memmove+0x12>
 80225e4:	4601      	mov	r1, r0
 80225e6:	4402      	add	r2, r0
 80225e8:	428a      	cmp	r2, r1
 80225ea:	d100      	bne.n	80225ee <memmove+0x2a>
 80225ec:	bd10      	pop	{r4, pc}
 80225ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80225f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80225f6:	e7f7      	b.n	80225e8 <memmove+0x24>

080225f8 <memset>:
 80225f8:	4603      	mov	r3, r0
 80225fa:	4402      	add	r2, r0
 80225fc:	4293      	cmp	r3, r2
 80225fe:	d100      	bne.n	8022602 <memset+0xa>
 8022600:	4770      	bx	lr
 8022602:	f803 1b01 	strb.w	r1, [r3], #1
 8022606:	e7f9      	b.n	80225fc <memset+0x4>

08022608 <strchr>:
 8022608:	4603      	mov	r3, r0
 802260a:	b2c9      	uxtb	r1, r1
 802260c:	4618      	mov	r0, r3
 802260e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022612:	b112      	cbz	r2, 802261a <strchr+0x12>
 8022614:	428a      	cmp	r2, r1
 8022616:	d1f9      	bne.n	802260c <strchr+0x4>
 8022618:	4770      	bx	lr
 802261a:	2900      	cmp	r1, #0
 802261c:	bf18      	it	ne
 802261e:	2000      	movne	r0, #0
 8022620:	4770      	bx	lr
	...

08022624 <strncasecmp>:
 8022624:	b570      	push	{r4, r5, r6, lr}
 8022626:	4605      	mov	r5, r0
 8022628:	4e0d      	ldr	r6, [pc, #52]	@ (8022660 <strncasecmp+0x3c>)
 802262a:	440a      	add	r2, r1
 802262c:	428a      	cmp	r2, r1
 802262e:	d101      	bne.n	8022634 <strncasecmp+0x10>
 8022630:	2000      	movs	r0, #0
 8022632:	e013      	b.n	802265c <strncasecmp+0x38>
 8022634:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022638:	f811 4b01 	ldrb.w	r4, [r1], #1
 802263c:	5cf0      	ldrb	r0, [r6, r3]
 802263e:	f000 0003 	and.w	r0, r0, #3
 8022642:	2801      	cmp	r0, #1
 8022644:	5d30      	ldrb	r0, [r6, r4]
 8022646:	bf08      	it	eq
 8022648:	3320      	addeq	r3, #32
 802264a:	f000 0003 	and.w	r0, r0, #3
 802264e:	2801      	cmp	r0, #1
 8022650:	bf08      	it	eq
 8022652:	3420      	addeq	r4, #32
 8022654:	1b18      	subs	r0, r3, r4
 8022656:	d101      	bne.n	802265c <strncasecmp+0x38>
 8022658:	2c00      	cmp	r4, #0
 802265a:	d1e7      	bne.n	802262c <strncasecmp+0x8>
 802265c:	bd70      	pop	{r4, r5, r6, pc}
 802265e:	bf00      	nop
 8022660:	080330c9 	.word	0x080330c9

08022664 <strncmp>:
 8022664:	b510      	push	{r4, lr}
 8022666:	b16a      	cbz	r2, 8022684 <strncmp+0x20>
 8022668:	3901      	subs	r1, #1
 802266a:	1884      	adds	r4, r0, r2
 802266c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022670:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022674:	429a      	cmp	r2, r3
 8022676:	d103      	bne.n	8022680 <strncmp+0x1c>
 8022678:	42a0      	cmp	r0, r4
 802267a:	d001      	beq.n	8022680 <strncmp+0x1c>
 802267c:	2a00      	cmp	r2, #0
 802267e:	d1f5      	bne.n	802266c <strncmp+0x8>
 8022680:	1ad0      	subs	r0, r2, r3
 8022682:	bd10      	pop	{r4, pc}
 8022684:	4610      	mov	r0, r2
 8022686:	e7fc      	b.n	8022682 <strncmp+0x1e>

08022688 <strncpy>:
 8022688:	4603      	mov	r3, r0
 802268a:	b510      	push	{r4, lr}
 802268c:	3901      	subs	r1, #1
 802268e:	b132      	cbz	r2, 802269e <strncpy+0x16>
 8022690:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022694:	3a01      	subs	r2, #1
 8022696:	f803 4b01 	strb.w	r4, [r3], #1
 802269a:	2c00      	cmp	r4, #0
 802269c:	d1f7      	bne.n	802268e <strncpy+0x6>
 802269e:	2100      	movs	r1, #0
 80226a0:	441a      	add	r2, r3
 80226a2:	4293      	cmp	r3, r2
 80226a4:	d100      	bne.n	80226a8 <strncpy+0x20>
 80226a6:	bd10      	pop	{r4, pc}
 80226a8:	f803 1b01 	strb.w	r1, [r3], #1
 80226ac:	e7f9      	b.n	80226a2 <strncpy+0x1a>

080226ae <strstr>:
 80226ae:	780a      	ldrb	r2, [r1, #0]
 80226b0:	b570      	push	{r4, r5, r6, lr}
 80226b2:	b96a      	cbnz	r2, 80226d0 <strstr+0x22>
 80226b4:	bd70      	pop	{r4, r5, r6, pc}
 80226b6:	429a      	cmp	r2, r3
 80226b8:	d109      	bne.n	80226ce <strstr+0x20>
 80226ba:	460c      	mov	r4, r1
 80226bc:	4605      	mov	r5, r0
 80226be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d0f6      	beq.n	80226b4 <strstr+0x6>
 80226c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80226ca:	429e      	cmp	r6, r3
 80226cc:	d0f7      	beq.n	80226be <strstr+0x10>
 80226ce:	3001      	adds	r0, #1
 80226d0:	7803      	ldrb	r3, [r0, #0]
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d1ef      	bne.n	80226b6 <strstr+0x8>
 80226d6:	4618      	mov	r0, r3
 80226d8:	e7ec      	b.n	80226b4 <strstr+0x6>
	...

080226dc <strcasestr>:
 80226dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80226e0:	780b      	ldrb	r3, [r1, #0]
 80226e2:	4606      	mov	r6, r0
 80226e4:	b1fb      	cbz	r3, 8022726 <strcasestr+0x4a>
 80226e6:	4f13      	ldr	r7, [pc, #76]	@ (8022734 <strcasestr+0x58>)
 80226e8:	1c4d      	adds	r5, r1, #1
 80226ea:	5cfa      	ldrb	r2, [r7, r3]
 80226ec:	4628      	mov	r0, r5
 80226ee:	f002 0203 	and.w	r2, r2, #3
 80226f2:	2a01      	cmp	r2, #1
 80226f4:	bf08      	it	eq
 80226f6:	3320      	addeq	r3, #32
 80226f8:	b2dc      	uxtb	r4, r3
 80226fa:	f7dd fd6f 	bl	80001dc <strlen>
 80226fe:	4681      	mov	r9, r0
 8022700:	46b0      	mov	r8, r6
 8022702:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022706:	b19b      	cbz	r3, 8022730 <strcasestr+0x54>
 8022708:	5cfa      	ldrb	r2, [r7, r3]
 802270a:	f002 0203 	and.w	r2, r2, #3
 802270e:	2a01      	cmp	r2, #1
 8022710:	bf08      	it	eq
 8022712:	3320      	addeq	r3, #32
 8022714:	b2db      	uxtb	r3, r3
 8022716:	42a3      	cmp	r3, r4
 8022718:	d108      	bne.n	802272c <strcasestr+0x50>
 802271a:	464a      	mov	r2, r9
 802271c:	4629      	mov	r1, r5
 802271e:	4640      	mov	r0, r8
 8022720:	f7ff ff80 	bl	8022624 <strncasecmp>
 8022724:	b910      	cbnz	r0, 802272c <strcasestr+0x50>
 8022726:	4630      	mov	r0, r6
 8022728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802272c:	4646      	mov	r6, r8
 802272e:	e7e7      	b.n	8022700 <strcasestr+0x24>
 8022730:	461e      	mov	r6, r3
 8022732:	e7f8      	b.n	8022726 <strcasestr+0x4a>
 8022734:	080330c9 	.word	0x080330c9

08022738 <_localeconv_r>:
 8022738:	4800      	ldr	r0, [pc, #0]	@ (802273c <_localeconv_r+0x4>)
 802273a:	4770      	bx	lr
 802273c:	20000274 	.word	0x20000274

08022740 <_close_r>:
 8022740:	b538      	push	{r3, r4, r5, lr}
 8022742:	2300      	movs	r3, #0
 8022744:	4d05      	ldr	r5, [pc, #20]	@ (802275c <_close_r+0x1c>)
 8022746:	4604      	mov	r4, r0
 8022748:	4608      	mov	r0, r1
 802274a:	602b      	str	r3, [r5, #0]
 802274c:	f7e1 f988 	bl	8003a60 <_close>
 8022750:	1c43      	adds	r3, r0, #1
 8022752:	d102      	bne.n	802275a <_close_r+0x1a>
 8022754:	682b      	ldr	r3, [r5, #0]
 8022756:	b103      	cbz	r3, 802275a <_close_r+0x1a>
 8022758:	6023      	str	r3, [r4, #0]
 802275a:	bd38      	pop	{r3, r4, r5, pc}
 802275c:	2000c060 	.word	0x2000c060

08022760 <_lseek_r>:
 8022760:	b538      	push	{r3, r4, r5, lr}
 8022762:	4604      	mov	r4, r0
 8022764:	4608      	mov	r0, r1
 8022766:	4611      	mov	r1, r2
 8022768:	2200      	movs	r2, #0
 802276a:	4d05      	ldr	r5, [pc, #20]	@ (8022780 <_lseek_r+0x20>)
 802276c:	602a      	str	r2, [r5, #0]
 802276e:	461a      	mov	r2, r3
 8022770:	f7e1 f99a 	bl	8003aa8 <_lseek>
 8022774:	1c43      	adds	r3, r0, #1
 8022776:	d102      	bne.n	802277e <_lseek_r+0x1e>
 8022778:	682b      	ldr	r3, [r5, #0]
 802277a:	b103      	cbz	r3, 802277e <_lseek_r+0x1e>
 802277c:	6023      	str	r3, [r4, #0]
 802277e:	bd38      	pop	{r3, r4, r5, pc}
 8022780:	2000c060 	.word	0x2000c060

08022784 <_read_r>:
 8022784:	b538      	push	{r3, r4, r5, lr}
 8022786:	4604      	mov	r4, r0
 8022788:	4608      	mov	r0, r1
 802278a:	4611      	mov	r1, r2
 802278c:	2200      	movs	r2, #0
 802278e:	4d05      	ldr	r5, [pc, #20]	@ (80227a4 <_read_r+0x20>)
 8022790:	602a      	str	r2, [r5, #0]
 8022792:	461a      	mov	r2, r3
 8022794:	f7e1 f92b 	bl	80039ee <_read>
 8022798:	1c43      	adds	r3, r0, #1
 802279a:	d102      	bne.n	80227a2 <_read_r+0x1e>
 802279c:	682b      	ldr	r3, [r5, #0]
 802279e:	b103      	cbz	r3, 80227a2 <_read_r+0x1e>
 80227a0:	6023      	str	r3, [r4, #0]
 80227a2:	bd38      	pop	{r3, r4, r5, pc}
 80227a4:	2000c060 	.word	0x2000c060

080227a8 <_write_r>:
 80227a8:	b538      	push	{r3, r4, r5, lr}
 80227aa:	4604      	mov	r4, r0
 80227ac:	4608      	mov	r0, r1
 80227ae:	4611      	mov	r1, r2
 80227b0:	2200      	movs	r2, #0
 80227b2:	4d05      	ldr	r5, [pc, #20]	@ (80227c8 <_write_r+0x20>)
 80227b4:	602a      	str	r2, [r5, #0]
 80227b6:	461a      	mov	r2, r3
 80227b8:	f7e1 f936 	bl	8003a28 <_write>
 80227bc:	1c43      	adds	r3, r0, #1
 80227be:	d102      	bne.n	80227c6 <_write_r+0x1e>
 80227c0:	682b      	ldr	r3, [r5, #0]
 80227c2:	b103      	cbz	r3, 80227c6 <_write_r+0x1e>
 80227c4:	6023      	str	r3, [r4, #0]
 80227c6:	bd38      	pop	{r3, r4, r5, pc}
 80227c8:	2000c060 	.word	0x2000c060

080227cc <__errno>:
 80227cc:	4b01      	ldr	r3, [pc, #4]	@ (80227d4 <__errno+0x8>)
 80227ce:	6818      	ldr	r0, [r3, #0]
 80227d0:	4770      	bx	lr
 80227d2:	bf00      	nop
 80227d4:	20000134 	.word	0x20000134

080227d8 <__libc_init_array>:
 80227d8:	b570      	push	{r4, r5, r6, lr}
 80227da:	2600      	movs	r6, #0
 80227dc:	4d0c      	ldr	r5, [pc, #48]	@ (8022810 <__libc_init_array+0x38>)
 80227de:	4c0d      	ldr	r4, [pc, #52]	@ (8022814 <__libc_init_array+0x3c>)
 80227e0:	1b64      	subs	r4, r4, r5
 80227e2:	10a4      	asrs	r4, r4, #2
 80227e4:	42a6      	cmp	r6, r4
 80227e6:	d109      	bne.n	80227fc <__libc_init_array+0x24>
 80227e8:	f002 fc4e 	bl	8025088 <_init>
 80227ec:	2600      	movs	r6, #0
 80227ee:	4d0a      	ldr	r5, [pc, #40]	@ (8022818 <__libc_init_array+0x40>)
 80227f0:	4c0a      	ldr	r4, [pc, #40]	@ (802281c <__libc_init_array+0x44>)
 80227f2:	1b64      	subs	r4, r4, r5
 80227f4:	10a4      	asrs	r4, r4, #2
 80227f6:	42a6      	cmp	r6, r4
 80227f8:	d105      	bne.n	8022806 <__libc_init_array+0x2e>
 80227fa:	bd70      	pop	{r4, r5, r6, pc}
 80227fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022800:	4798      	blx	r3
 8022802:	3601      	adds	r6, #1
 8022804:	e7ee      	b.n	80227e4 <__libc_init_array+0xc>
 8022806:	f855 3b04 	ldr.w	r3, [r5], #4
 802280a:	4798      	blx	r3
 802280c:	3601      	adds	r6, #1
 802280e:	e7f2      	b.n	80227f6 <__libc_init_array+0x1e>
 8022810:	080332d8 	.word	0x080332d8
 8022814:	080332d8 	.word	0x080332d8
 8022818:	080332d8 	.word	0x080332d8
 802281c:	080332dc 	.word	0x080332dc

08022820 <__retarget_lock_init_recursive>:
 8022820:	4770      	bx	lr

08022822 <__retarget_lock_acquire_recursive>:
 8022822:	4770      	bx	lr

08022824 <__retarget_lock_release_recursive>:
 8022824:	4770      	bx	lr

08022826 <memchr>:
 8022826:	4603      	mov	r3, r0
 8022828:	b510      	push	{r4, lr}
 802282a:	b2c9      	uxtb	r1, r1
 802282c:	4402      	add	r2, r0
 802282e:	4293      	cmp	r3, r2
 8022830:	4618      	mov	r0, r3
 8022832:	d101      	bne.n	8022838 <memchr+0x12>
 8022834:	2000      	movs	r0, #0
 8022836:	e003      	b.n	8022840 <memchr+0x1a>
 8022838:	7804      	ldrb	r4, [r0, #0]
 802283a:	3301      	adds	r3, #1
 802283c:	428c      	cmp	r4, r1
 802283e:	d1f6      	bne.n	802282e <memchr+0x8>
 8022840:	bd10      	pop	{r4, pc}

08022842 <memcpy>:
 8022842:	440a      	add	r2, r1
 8022844:	4291      	cmp	r1, r2
 8022846:	f100 33ff 	add.w	r3, r0, #4294967295
 802284a:	d100      	bne.n	802284e <memcpy+0xc>
 802284c:	4770      	bx	lr
 802284e:	b510      	push	{r4, lr}
 8022850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022854:	4291      	cmp	r1, r2
 8022856:	f803 4f01 	strb.w	r4, [r3, #1]!
 802285a:	d1f9      	bne.n	8022850 <memcpy+0xe>
 802285c:	bd10      	pop	{r4, pc}
	...

08022860 <__assert_func>:
 8022860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022862:	4614      	mov	r4, r2
 8022864:	461a      	mov	r2, r3
 8022866:	4b09      	ldr	r3, [pc, #36]	@ (802288c <__assert_func+0x2c>)
 8022868:	4605      	mov	r5, r0
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	68d8      	ldr	r0, [r3, #12]
 802286e:	b14c      	cbz	r4, 8022884 <__assert_func+0x24>
 8022870:	4b07      	ldr	r3, [pc, #28]	@ (8022890 <__assert_func+0x30>)
 8022872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022876:	9100      	str	r1, [sp, #0]
 8022878:	462b      	mov	r3, r5
 802287a:	4906      	ldr	r1, [pc, #24]	@ (8022894 <__assert_func+0x34>)
 802287c:	f002 f93e 	bl	8024afc <fiprintf>
 8022880:	f002 fa52 	bl	8024d28 <abort>
 8022884:	4b04      	ldr	r3, [pc, #16]	@ (8022898 <__assert_func+0x38>)
 8022886:	461c      	mov	r4, r3
 8022888:	e7f3      	b.n	8022872 <__assert_func+0x12>
 802288a:	bf00      	nop
 802288c:	20000134 	.word	0x20000134
 8022890:	08032f87 	.word	0x08032f87
 8022894:	08032f94 	.word	0x08032f94
 8022898:	08032fc2 	.word	0x08032fc2

0802289c <quorem>:
 802289c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228a0:	6903      	ldr	r3, [r0, #16]
 80228a2:	690c      	ldr	r4, [r1, #16]
 80228a4:	4607      	mov	r7, r0
 80228a6:	42a3      	cmp	r3, r4
 80228a8:	db7e      	blt.n	80229a8 <quorem+0x10c>
 80228aa:	3c01      	subs	r4, #1
 80228ac:	00a3      	lsls	r3, r4, #2
 80228ae:	f100 0514 	add.w	r5, r0, #20
 80228b2:	f101 0814 	add.w	r8, r1, #20
 80228b6:	9300      	str	r3, [sp, #0]
 80228b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80228bc:	9301      	str	r3, [sp, #4]
 80228be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80228c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80228c6:	3301      	adds	r3, #1
 80228c8:	429a      	cmp	r2, r3
 80228ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80228ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80228d2:	d32e      	bcc.n	8022932 <quorem+0x96>
 80228d4:	f04f 0a00 	mov.w	sl, #0
 80228d8:	46c4      	mov	ip, r8
 80228da:	46ae      	mov	lr, r5
 80228dc:	46d3      	mov	fp, sl
 80228de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80228e2:	b298      	uxth	r0, r3
 80228e4:	fb06 a000 	mla	r0, r6, r0, sl
 80228e8:	0c1b      	lsrs	r3, r3, #16
 80228ea:	0c02      	lsrs	r2, r0, #16
 80228ec:	fb06 2303 	mla	r3, r6, r3, r2
 80228f0:	f8de 2000 	ldr.w	r2, [lr]
 80228f4:	b280      	uxth	r0, r0
 80228f6:	b292      	uxth	r2, r2
 80228f8:	1a12      	subs	r2, r2, r0
 80228fa:	445a      	add	r2, fp
 80228fc:	f8de 0000 	ldr.w	r0, [lr]
 8022900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022904:	b29b      	uxth	r3, r3
 8022906:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802290a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802290e:	b292      	uxth	r2, r2
 8022910:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8022914:	45e1      	cmp	r9, ip
 8022916:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802291a:	f84e 2b04 	str.w	r2, [lr], #4
 802291e:	d2de      	bcs.n	80228de <quorem+0x42>
 8022920:	9b00      	ldr	r3, [sp, #0]
 8022922:	58eb      	ldr	r3, [r5, r3]
 8022924:	b92b      	cbnz	r3, 8022932 <quorem+0x96>
 8022926:	9b01      	ldr	r3, [sp, #4]
 8022928:	3b04      	subs	r3, #4
 802292a:	429d      	cmp	r5, r3
 802292c:	461a      	mov	r2, r3
 802292e:	d32f      	bcc.n	8022990 <quorem+0xf4>
 8022930:	613c      	str	r4, [r7, #16]
 8022932:	4638      	mov	r0, r7
 8022934:	f001 f980 	bl	8023c38 <__mcmp>
 8022938:	2800      	cmp	r0, #0
 802293a:	db25      	blt.n	8022988 <quorem+0xec>
 802293c:	4629      	mov	r1, r5
 802293e:	2000      	movs	r0, #0
 8022940:	f858 2b04 	ldr.w	r2, [r8], #4
 8022944:	f8d1 c000 	ldr.w	ip, [r1]
 8022948:	fa1f fe82 	uxth.w	lr, r2
 802294c:	fa1f f38c 	uxth.w	r3, ip
 8022950:	eba3 030e 	sub.w	r3, r3, lr
 8022954:	4403      	add	r3, r0
 8022956:	0c12      	lsrs	r2, r2, #16
 8022958:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802295c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8022960:	b29b      	uxth	r3, r3
 8022962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022966:	45c1      	cmp	r9, r8
 8022968:	ea4f 4022 	mov.w	r0, r2, asr #16
 802296c:	f841 3b04 	str.w	r3, [r1], #4
 8022970:	d2e6      	bcs.n	8022940 <quorem+0xa4>
 8022972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802297a:	b922      	cbnz	r2, 8022986 <quorem+0xea>
 802297c:	3b04      	subs	r3, #4
 802297e:	429d      	cmp	r5, r3
 8022980:	461a      	mov	r2, r3
 8022982:	d30b      	bcc.n	802299c <quorem+0x100>
 8022984:	613c      	str	r4, [r7, #16]
 8022986:	3601      	adds	r6, #1
 8022988:	4630      	mov	r0, r6
 802298a:	b003      	add	sp, #12
 802298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022990:	6812      	ldr	r2, [r2, #0]
 8022992:	3b04      	subs	r3, #4
 8022994:	2a00      	cmp	r2, #0
 8022996:	d1cb      	bne.n	8022930 <quorem+0x94>
 8022998:	3c01      	subs	r4, #1
 802299a:	e7c6      	b.n	802292a <quorem+0x8e>
 802299c:	6812      	ldr	r2, [r2, #0]
 802299e:	3b04      	subs	r3, #4
 80229a0:	2a00      	cmp	r2, #0
 80229a2:	d1ef      	bne.n	8022984 <quorem+0xe8>
 80229a4:	3c01      	subs	r4, #1
 80229a6:	e7ea      	b.n	802297e <quorem+0xe2>
 80229a8:	2000      	movs	r0, #0
 80229aa:	e7ee      	b.n	802298a <quorem+0xee>
 80229ac:	0000      	movs	r0, r0
	...

080229b0 <_dtoa_r>:
 80229b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b4:	4614      	mov	r4, r2
 80229b6:	461d      	mov	r5, r3
 80229b8:	69c7      	ldr	r7, [r0, #28]
 80229ba:	b097      	sub	sp, #92	@ 0x5c
 80229bc:	4681      	mov	r9, r0
 80229be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80229c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80229c4:	b97f      	cbnz	r7, 80229e6 <_dtoa_r+0x36>
 80229c6:	2010      	movs	r0, #16
 80229c8:	f000 fe0e 	bl	80235e8 <malloc>
 80229cc:	4602      	mov	r2, r0
 80229ce:	f8c9 001c 	str.w	r0, [r9, #28]
 80229d2:	b920      	cbnz	r0, 80229de <_dtoa_r+0x2e>
 80229d4:	21ef      	movs	r1, #239	@ 0xef
 80229d6:	4bac      	ldr	r3, [pc, #688]	@ (8022c88 <_dtoa_r+0x2d8>)
 80229d8:	48ac      	ldr	r0, [pc, #688]	@ (8022c8c <_dtoa_r+0x2dc>)
 80229da:	f7ff ff41 	bl	8022860 <__assert_func>
 80229de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80229e2:	6007      	str	r7, [r0, #0]
 80229e4:	60c7      	str	r7, [r0, #12]
 80229e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80229ea:	6819      	ldr	r1, [r3, #0]
 80229ec:	b159      	cbz	r1, 8022a06 <_dtoa_r+0x56>
 80229ee:	685a      	ldr	r2, [r3, #4]
 80229f0:	2301      	movs	r3, #1
 80229f2:	4093      	lsls	r3, r2
 80229f4:	604a      	str	r2, [r1, #4]
 80229f6:	608b      	str	r3, [r1, #8]
 80229f8:	4648      	mov	r0, r9
 80229fa:	f000 feeb 	bl	80237d4 <_Bfree>
 80229fe:	2200      	movs	r2, #0
 8022a00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022a04:	601a      	str	r2, [r3, #0]
 8022a06:	1e2b      	subs	r3, r5, #0
 8022a08:	bfaf      	iteee	ge
 8022a0a:	2300      	movge	r3, #0
 8022a0c:	2201      	movlt	r2, #1
 8022a0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8022a12:	9307      	strlt	r3, [sp, #28]
 8022a14:	bfa8      	it	ge
 8022a16:	6033      	strge	r3, [r6, #0]
 8022a18:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8022c90 <_dtoa_r+0x2e0>)
 8022a1e:	bfb8      	it	lt
 8022a20:	6032      	strlt	r2, [r6, #0]
 8022a22:	ea33 0308 	bics.w	r3, r3, r8
 8022a26:	d112      	bne.n	8022a4e <_dtoa_r+0x9e>
 8022a28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022a2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022a2e:	6013      	str	r3, [r2, #0]
 8022a30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8022a34:	4323      	orrs	r3, r4
 8022a36:	f000 855e 	beq.w	80234f6 <_dtoa_r+0xb46>
 8022a3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8022c94 <_dtoa_r+0x2e4>
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	f000 8560 	beq.w	8023506 <_dtoa_r+0xb56>
 8022a46:	f10a 0303 	add.w	r3, sl, #3
 8022a4a:	f000 bd5a 	b.w	8023502 <_dtoa_r+0xb52>
 8022a4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022a52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8022a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022a5a:	2200      	movs	r2, #0
 8022a5c:	2300      	movs	r3, #0
 8022a5e:	f7dd ffe9 	bl	8000a34 <__aeabi_dcmpeq>
 8022a62:	4607      	mov	r7, r0
 8022a64:	b158      	cbz	r0, 8022a7e <_dtoa_r+0xce>
 8022a66:	2301      	movs	r3, #1
 8022a68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022a6a:	6013      	str	r3, [r2, #0]
 8022a6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a6e:	b113      	cbz	r3, 8022a76 <_dtoa_r+0xc6>
 8022a70:	4b89      	ldr	r3, [pc, #548]	@ (8022c98 <_dtoa_r+0x2e8>)
 8022a72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022a74:	6013      	str	r3, [r2, #0]
 8022a76:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8022c9c <_dtoa_r+0x2ec>
 8022a7a:	f000 bd44 	b.w	8023506 <_dtoa_r+0xb56>
 8022a7e:	ab14      	add	r3, sp, #80	@ 0x50
 8022a80:	9301      	str	r3, [sp, #4]
 8022a82:	ab15      	add	r3, sp, #84	@ 0x54
 8022a84:	9300      	str	r3, [sp, #0]
 8022a86:	4648      	mov	r0, r9
 8022a88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8022a8c:	f001 f984 	bl	8023d98 <__d2b>
 8022a90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8022a94:	9003      	str	r0, [sp, #12]
 8022a96:	2e00      	cmp	r6, #0
 8022a98:	d078      	beq.n	8022b8c <_dtoa_r+0x1dc>
 8022a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022aa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8022aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022aa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8022aac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8022ab0:	9712      	str	r7, [sp, #72]	@ 0x48
 8022ab2:	4619      	mov	r1, r3
 8022ab4:	2200      	movs	r2, #0
 8022ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8022ca0 <_dtoa_r+0x2f0>)
 8022ab8:	f7dd fb9c 	bl	80001f4 <__aeabi_dsub>
 8022abc:	a36c      	add	r3, pc, #432	@ (adr r3, 8022c70 <_dtoa_r+0x2c0>)
 8022abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ac2:	f7dd fd4f 	bl	8000564 <__aeabi_dmul>
 8022ac6:	a36c      	add	r3, pc, #432	@ (adr r3, 8022c78 <_dtoa_r+0x2c8>)
 8022ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022acc:	f7dd fb94 	bl	80001f8 <__adddf3>
 8022ad0:	4604      	mov	r4, r0
 8022ad2:	4630      	mov	r0, r6
 8022ad4:	460d      	mov	r5, r1
 8022ad6:	f7dd fcdb 	bl	8000490 <__aeabi_i2d>
 8022ada:	a369      	add	r3, pc, #420	@ (adr r3, 8022c80 <_dtoa_r+0x2d0>)
 8022adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ae0:	f7dd fd40 	bl	8000564 <__aeabi_dmul>
 8022ae4:	4602      	mov	r2, r0
 8022ae6:	460b      	mov	r3, r1
 8022ae8:	4620      	mov	r0, r4
 8022aea:	4629      	mov	r1, r5
 8022aec:	f7dd fb84 	bl	80001f8 <__adddf3>
 8022af0:	4604      	mov	r4, r0
 8022af2:	460d      	mov	r5, r1
 8022af4:	f7dd ffe6 	bl	8000ac4 <__aeabi_d2iz>
 8022af8:	2200      	movs	r2, #0
 8022afa:	4607      	mov	r7, r0
 8022afc:	2300      	movs	r3, #0
 8022afe:	4620      	mov	r0, r4
 8022b00:	4629      	mov	r1, r5
 8022b02:	f7dd ffa1 	bl	8000a48 <__aeabi_dcmplt>
 8022b06:	b140      	cbz	r0, 8022b1a <_dtoa_r+0x16a>
 8022b08:	4638      	mov	r0, r7
 8022b0a:	f7dd fcc1 	bl	8000490 <__aeabi_i2d>
 8022b0e:	4622      	mov	r2, r4
 8022b10:	462b      	mov	r3, r5
 8022b12:	f7dd ff8f 	bl	8000a34 <__aeabi_dcmpeq>
 8022b16:	b900      	cbnz	r0, 8022b1a <_dtoa_r+0x16a>
 8022b18:	3f01      	subs	r7, #1
 8022b1a:	2f16      	cmp	r7, #22
 8022b1c:	d854      	bhi.n	8022bc8 <_dtoa_r+0x218>
 8022b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022b22:	4b60      	ldr	r3, [pc, #384]	@ (8022ca4 <_dtoa_r+0x2f4>)
 8022b24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b2c:	f7dd ff8c 	bl	8000a48 <__aeabi_dcmplt>
 8022b30:	2800      	cmp	r0, #0
 8022b32:	d04b      	beq.n	8022bcc <_dtoa_r+0x21c>
 8022b34:	2300      	movs	r3, #0
 8022b36:	3f01      	subs	r7, #1
 8022b38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022b3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022b3c:	1b9b      	subs	r3, r3, r6
 8022b3e:	1e5a      	subs	r2, r3, #1
 8022b40:	bf49      	itett	mi
 8022b42:	f1c3 0301 	rsbmi	r3, r3, #1
 8022b46:	2300      	movpl	r3, #0
 8022b48:	9304      	strmi	r3, [sp, #16]
 8022b4a:	2300      	movmi	r3, #0
 8022b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8022b4e:	bf54      	ite	pl
 8022b50:	9304      	strpl	r3, [sp, #16]
 8022b52:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8022b54:	2f00      	cmp	r7, #0
 8022b56:	db3b      	blt.n	8022bd0 <_dtoa_r+0x220>
 8022b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b5a:	970e      	str	r7, [sp, #56]	@ 0x38
 8022b5c:	443b      	add	r3, r7
 8022b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b60:	2300      	movs	r3, #0
 8022b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022b66:	2b09      	cmp	r3, #9
 8022b68:	d865      	bhi.n	8022c36 <_dtoa_r+0x286>
 8022b6a:	2b05      	cmp	r3, #5
 8022b6c:	bfc4      	itt	gt
 8022b6e:	3b04      	subgt	r3, #4
 8022b70:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8022b72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022b74:	bfc8      	it	gt
 8022b76:	2400      	movgt	r4, #0
 8022b78:	f1a3 0302 	sub.w	r3, r3, #2
 8022b7c:	bfd8      	it	le
 8022b7e:	2401      	movle	r4, #1
 8022b80:	2b03      	cmp	r3, #3
 8022b82:	d864      	bhi.n	8022c4e <_dtoa_r+0x29e>
 8022b84:	e8df f003 	tbb	[pc, r3]
 8022b88:	2c385553 	.word	0x2c385553
 8022b8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8022b90:	441e      	add	r6, r3
 8022b92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8022b96:	2b20      	cmp	r3, #32
 8022b98:	bfc1      	itttt	gt
 8022b9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8022b9e:	fa08 f803 	lslgt.w	r8, r8, r3
 8022ba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8022ba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8022baa:	bfd6      	itet	le
 8022bac:	f1c3 0320 	rsble	r3, r3, #32
 8022bb0:	ea48 0003 	orrgt.w	r0, r8, r3
 8022bb4:	fa04 f003 	lslle.w	r0, r4, r3
 8022bb8:	f7dd fc5a 	bl	8000470 <__aeabi_ui2d>
 8022bbc:	2201      	movs	r2, #1
 8022bbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8022bc2:	3e01      	subs	r6, #1
 8022bc4:	9212      	str	r2, [sp, #72]	@ 0x48
 8022bc6:	e774      	b.n	8022ab2 <_dtoa_r+0x102>
 8022bc8:	2301      	movs	r3, #1
 8022bca:	e7b5      	b.n	8022b38 <_dtoa_r+0x188>
 8022bcc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022bce:	e7b4      	b.n	8022b3a <_dtoa_r+0x18a>
 8022bd0:	9b04      	ldr	r3, [sp, #16]
 8022bd2:	1bdb      	subs	r3, r3, r7
 8022bd4:	9304      	str	r3, [sp, #16]
 8022bd6:	427b      	negs	r3, r7
 8022bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8022bda:	2300      	movs	r3, #0
 8022bdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8022bde:	e7c1      	b.n	8022b64 <_dtoa_r+0x1b4>
 8022be0:	2301      	movs	r3, #1
 8022be2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022be4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022be6:	eb07 0b03 	add.w	fp, r7, r3
 8022bea:	f10b 0301 	add.w	r3, fp, #1
 8022bee:	2b01      	cmp	r3, #1
 8022bf0:	9308      	str	r3, [sp, #32]
 8022bf2:	bfb8      	it	lt
 8022bf4:	2301      	movlt	r3, #1
 8022bf6:	e006      	b.n	8022c06 <_dtoa_r+0x256>
 8022bf8:	2301      	movs	r3, #1
 8022bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	dd28      	ble.n	8022c54 <_dtoa_r+0x2a4>
 8022c02:	469b      	mov	fp, r3
 8022c04:	9308      	str	r3, [sp, #32]
 8022c06:	2100      	movs	r1, #0
 8022c08:	2204      	movs	r2, #4
 8022c0a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8022c0e:	f102 0514 	add.w	r5, r2, #20
 8022c12:	429d      	cmp	r5, r3
 8022c14:	d926      	bls.n	8022c64 <_dtoa_r+0x2b4>
 8022c16:	6041      	str	r1, [r0, #4]
 8022c18:	4648      	mov	r0, r9
 8022c1a:	f000 fd9b 	bl	8023754 <_Balloc>
 8022c1e:	4682      	mov	sl, r0
 8022c20:	2800      	cmp	r0, #0
 8022c22:	d143      	bne.n	8022cac <_dtoa_r+0x2fc>
 8022c24:	4602      	mov	r2, r0
 8022c26:	f240 11af 	movw	r1, #431	@ 0x1af
 8022c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8022ca8 <_dtoa_r+0x2f8>)
 8022c2c:	e6d4      	b.n	80229d8 <_dtoa_r+0x28>
 8022c2e:	2300      	movs	r3, #0
 8022c30:	e7e3      	b.n	8022bfa <_dtoa_r+0x24a>
 8022c32:	2300      	movs	r3, #0
 8022c34:	e7d5      	b.n	8022be2 <_dtoa_r+0x232>
 8022c36:	2401      	movs	r4, #1
 8022c38:	2300      	movs	r3, #0
 8022c3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022c3c:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c3e:	f04f 3bff 	mov.w	fp, #4294967295
 8022c42:	2200      	movs	r2, #0
 8022c44:	2312      	movs	r3, #18
 8022c46:	f8cd b020 	str.w	fp, [sp, #32]
 8022c4a:	9221      	str	r2, [sp, #132]	@ 0x84
 8022c4c:	e7db      	b.n	8022c06 <_dtoa_r+0x256>
 8022c4e:	2301      	movs	r3, #1
 8022c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022c52:	e7f4      	b.n	8022c3e <_dtoa_r+0x28e>
 8022c54:	f04f 0b01 	mov.w	fp, #1
 8022c58:	465b      	mov	r3, fp
 8022c5a:	f8cd b020 	str.w	fp, [sp, #32]
 8022c5e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8022c62:	e7d0      	b.n	8022c06 <_dtoa_r+0x256>
 8022c64:	3101      	adds	r1, #1
 8022c66:	0052      	lsls	r2, r2, #1
 8022c68:	e7d1      	b.n	8022c0e <_dtoa_r+0x25e>
 8022c6a:	bf00      	nop
 8022c6c:	f3af 8000 	nop.w
 8022c70:	636f4361 	.word	0x636f4361
 8022c74:	3fd287a7 	.word	0x3fd287a7
 8022c78:	8b60c8b3 	.word	0x8b60c8b3
 8022c7c:	3fc68a28 	.word	0x3fc68a28
 8022c80:	509f79fb 	.word	0x509f79fb
 8022c84:	3fd34413 	.word	0x3fd34413
 8022c88:	08032ee6 	.word	0x08032ee6
 8022c8c:	08032fd0 	.word	0x08032fd0
 8022c90:	7ff00000 	.word	0x7ff00000
 8022c94:	08032fcc 	.word	0x08032fcc
 8022c98:	080330ba 	.word	0x080330ba
 8022c9c:	080330b9 	.word	0x080330b9
 8022ca0:	3ff80000 	.word	0x3ff80000
 8022ca4:	08033200 	.word	0x08033200
 8022ca8:	08033028 	.word	0x08033028
 8022cac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022cb0:	6018      	str	r0, [r3, #0]
 8022cb2:	9b08      	ldr	r3, [sp, #32]
 8022cb4:	2b0e      	cmp	r3, #14
 8022cb6:	f200 80a1 	bhi.w	8022dfc <_dtoa_r+0x44c>
 8022cba:	2c00      	cmp	r4, #0
 8022cbc:	f000 809e 	beq.w	8022dfc <_dtoa_r+0x44c>
 8022cc0:	2f00      	cmp	r7, #0
 8022cc2:	dd33      	ble.n	8022d2c <_dtoa_r+0x37c>
 8022cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8022f38 <_dtoa_r+0x588>)
 8022cc6:	f007 020f 	and.w	r2, r7, #15
 8022cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022cce:	05f8      	lsls	r0, r7, #23
 8022cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022cd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8022cd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8022cdc:	d516      	bpl.n	8022d0c <_dtoa_r+0x35c>
 8022cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022ce2:	4b96      	ldr	r3, [pc, #600]	@ (8022f3c <_dtoa_r+0x58c>)
 8022ce4:	2603      	movs	r6, #3
 8022ce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022cea:	f7dd fd65 	bl	80007b8 <__aeabi_ddiv>
 8022cee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022cf2:	f004 040f 	and.w	r4, r4, #15
 8022cf6:	4d91      	ldr	r5, [pc, #580]	@ (8022f3c <_dtoa_r+0x58c>)
 8022cf8:	b954      	cbnz	r4, 8022d10 <_dtoa_r+0x360>
 8022cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022d02:	f7dd fd59 	bl	80007b8 <__aeabi_ddiv>
 8022d06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d0a:	e028      	b.n	8022d5e <_dtoa_r+0x3ae>
 8022d0c:	2602      	movs	r6, #2
 8022d0e:	e7f2      	b.n	8022cf6 <_dtoa_r+0x346>
 8022d10:	07e1      	lsls	r1, r4, #31
 8022d12:	d508      	bpl.n	8022d26 <_dtoa_r+0x376>
 8022d14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022d1c:	f7dd fc22 	bl	8000564 <__aeabi_dmul>
 8022d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022d24:	3601      	adds	r6, #1
 8022d26:	1064      	asrs	r4, r4, #1
 8022d28:	3508      	adds	r5, #8
 8022d2a:	e7e5      	b.n	8022cf8 <_dtoa_r+0x348>
 8022d2c:	f000 80af 	beq.w	8022e8e <_dtoa_r+0x4de>
 8022d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022d34:	427c      	negs	r4, r7
 8022d36:	4b80      	ldr	r3, [pc, #512]	@ (8022f38 <_dtoa_r+0x588>)
 8022d38:	f004 020f 	and.w	r2, r4, #15
 8022d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d44:	f7dd fc0e 	bl	8000564 <__aeabi_dmul>
 8022d48:	2602      	movs	r6, #2
 8022d4a:	2300      	movs	r3, #0
 8022d4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d50:	4d7a      	ldr	r5, [pc, #488]	@ (8022f3c <_dtoa_r+0x58c>)
 8022d52:	1124      	asrs	r4, r4, #4
 8022d54:	2c00      	cmp	r4, #0
 8022d56:	f040 808f 	bne.w	8022e78 <_dtoa_r+0x4c8>
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d1d3      	bne.n	8022d06 <_dtoa_r+0x356>
 8022d5e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	f000 8094 	beq.w	8022e92 <_dtoa_r+0x4e2>
 8022d6a:	2200      	movs	r2, #0
 8022d6c:	4620      	mov	r0, r4
 8022d6e:	4629      	mov	r1, r5
 8022d70:	4b73      	ldr	r3, [pc, #460]	@ (8022f40 <_dtoa_r+0x590>)
 8022d72:	f7dd fe69 	bl	8000a48 <__aeabi_dcmplt>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	f000 808b 	beq.w	8022e92 <_dtoa_r+0x4e2>
 8022d7c:	9b08      	ldr	r3, [sp, #32]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	f000 8087 	beq.w	8022e92 <_dtoa_r+0x4e2>
 8022d84:	f1bb 0f00 	cmp.w	fp, #0
 8022d88:	dd34      	ble.n	8022df4 <_dtoa_r+0x444>
 8022d8a:	4620      	mov	r0, r4
 8022d8c:	2200      	movs	r2, #0
 8022d8e:	4629      	mov	r1, r5
 8022d90:	4b6c      	ldr	r3, [pc, #432]	@ (8022f44 <_dtoa_r+0x594>)
 8022d92:	f7dd fbe7 	bl	8000564 <__aeabi_dmul>
 8022d96:	465c      	mov	r4, fp
 8022d98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d9c:	f107 38ff 	add.w	r8, r7, #4294967295
 8022da0:	3601      	adds	r6, #1
 8022da2:	4630      	mov	r0, r6
 8022da4:	f7dd fb74 	bl	8000490 <__aeabi_i2d>
 8022da8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022dac:	f7dd fbda 	bl	8000564 <__aeabi_dmul>
 8022db0:	2200      	movs	r2, #0
 8022db2:	4b65      	ldr	r3, [pc, #404]	@ (8022f48 <_dtoa_r+0x598>)
 8022db4:	f7dd fa20 	bl	80001f8 <__adddf3>
 8022db8:	4605      	mov	r5, r0
 8022dba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8022dbe:	2c00      	cmp	r4, #0
 8022dc0:	d16a      	bne.n	8022e98 <_dtoa_r+0x4e8>
 8022dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022dc6:	2200      	movs	r2, #0
 8022dc8:	4b60      	ldr	r3, [pc, #384]	@ (8022f4c <_dtoa_r+0x59c>)
 8022dca:	f7dd fa13 	bl	80001f4 <__aeabi_dsub>
 8022dce:	4602      	mov	r2, r0
 8022dd0:	460b      	mov	r3, r1
 8022dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022dd6:	462a      	mov	r2, r5
 8022dd8:	4633      	mov	r3, r6
 8022dda:	f7dd fe53 	bl	8000a84 <__aeabi_dcmpgt>
 8022dde:	2800      	cmp	r0, #0
 8022de0:	f040 8298 	bne.w	8023314 <_dtoa_r+0x964>
 8022de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022de8:	462a      	mov	r2, r5
 8022dea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8022dee:	f7dd fe2b 	bl	8000a48 <__aeabi_dcmplt>
 8022df2:	bb38      	cbnz	r0, 8022e44 <_dtoa_r+0x494>
 8022df4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8022df8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8022dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	f2c0 8157 	blt.w	80230b2 <_dtoa_r+0x702>
 8022e04:	2f0e      	cmp	r7, #14
 8022e06:	f300 8154 	bgt.w	80230b2 <_dtoa_r+0x702>
 8022e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8022f38 <_dtoa_r+0x588>)
 8022e0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022e10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022e14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8022e18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	f280 80e5 	bge.w	8022fea <_dtoa_r+0x63a>
 8022e20:	9b08      	ldr	r3, [sp, #32]
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	f300 80e1 	bgt.w	8022fea <_dtoa_r+0x63a>
 8022e28:	d10c      	bne.n	8022e44 <_dtoa_r+0x494>
 8022e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022e2e:	2200      	movs	r2, #0
 8022e30:	4b46      	ldr	r3, [pc, #280]	@ (8022f4c <_dtoa_r+0x59c>)
 8022e32:	f7dd fb97 	bl	8000564 <__aeabi_dmul>
 8022e36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022e3a:	f7dd fe19 	bl	8000a70 <__aeabi_dcmpge>
 8022e3e:	2800      	cmp	r0, #0
 8022e40:	f000 8266 	beq.w	8023310 <_dtoa_r+0x960>
 8022e44:	2400      	movs	r4, #0
 8022e46:	4625      	mov	r5, r4
 8022e48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022e4a:	4656      	mov	r6, sl
 8022e4c:	ea6f 0803 	mvn.w	r8, r3
 8022e50:	2700      	movs	r7, #0
 8022e52:	4621      	mov	r1, r4
 8022e54:	4648      	mov	r0, r9
 8022e56:	f000 fcbd 	bl	80237d4 <_Bfree>
 8022e5a:	2d00      	cmp	r5, #0
 8022e5c:	f000 80bd 	beq.w	8022fda <_dtoa_r+0x62a>
 8022e60:	b12f      	cbz	r7, 8022e6e <_dtoa_r+0x4be>
 8022e62:	42af      	cmp	r7, r5
 8022e64:	d003      	beq.n	8022e6e <_dtoa_r+0x4be>
 8022e66:	4639      	mov	r1, r7
 8022e68:	4648      	mov	r0, r9
 8022e6a:	f000 fcb3 	bl	80237d4 <_Bfree>
 8022e6e:	4629      	mov	r1, r5
 8022e70:	4648      	mov	r0, r9
 8022e72:	f000 fcaf 	bl	80237d4 <_Bfree>
 8022e76:	e0b0      	b.n	8022fda <_dtoa_r+0x62a>
 8022e78:	07e2      	lsls	r2, r4, #31
 8022e7a:	d505      	bpl.n	8022e88 <_dtoa_r+0x4d8>
 8022e7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022e80:	f7dd fb70 	bl	8000564 <__aeabi_dmul>
 8022e84:	2301      	movs	r3, #1
 8022e86:	3601      	adds	r6, #1
 8022e88:	1064      	asrs	r4, r4, #1
 8022e8a:	3508      	adds	r5, #8
 8022e8c:	e762      	b.n	8022d54 <_dtoa_r+0x3a4>
 8022e8e:	2602      	movs	r6, #2
 8022e90:	e765      	b.n	8022d5e <_dtoa_r+0x3ae>
 8022e92:	46b8      	mov	r8, r7
 8022e94:	9c08      	ldr	r4, [sp, #32]
 8022e96:	e784      	b.n	8022da2 <_dtoa_r+0x3f2>
 8022e98:	4b27      	ldr	r3, [pc, #156]	@ (8022f38 <_dtoa_r+0x588>)
 8022e9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8022ea4:	4454      	add	r4, sl
 8022ea6:	2900      	cmp	r1, #0
 8022ea8:	d054      	beq.n	8022f54 <_dtoa_r+0x5a4>
 8022eaa:	2000      	movs	r0, #0
 8022eac:	4928      	ldr	r1, [pc, #160]	@ (8022f50 <_dtoa_r+0x5a0>)
 8022eae:	f7dd fc83 	bl	80007b8 <__aeabi_ddiv>
 8022eb2:	4633      	mov	r3, r6
 8022eb4:	462a      	mov	r2, r5
 8022eb6:	f7dd f99d 	bl	80001f4 <__aeabi_dsub>
 8022eba:	4656      	mov	r6, sl
 8022ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ec4:	f7dd fdfe 	bl	8000ac4 <__aeabi_d2iz>
 8022ec8:	4605      	mov	r5, r0
 8022eca:	f7dd fae1 	bl	8000490 <__aeabi_i2d>
 8022ece:	4602      	mov	r2, r0
 8022ed0:	460b      	mov	r3, r1
 8022ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ed6:	f7dd f98d 	bl	80001f4 <__aeabi_dsub>
 8022eda:	4602      	mov	r2, r0
 8022edc:	460b      	mov	r3, r1
 8022ede:	3530      	adds	r5, #48	@ 0x30
 8022ee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022ee8:	f806 5b01 	strb.w	r5, [r6], #1
 8022eec:	f7dd fdac 	bl	8000a48 <__aeabi_dcmplt>
 8022ef0:	2800      	cmp	r0, #0
 8022ef2:	d172      	bne.n	8022fda <_dtoa_r+0x62a>
 8022ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022ef8:	2000      	movs	r0, #0
 8022efa:	4911      	ldr	r1, [pc, #68]	@ (8022f40 <_dtoa_r+0x590>)
 8022efc:	f7dd f97a 	bl	80001f4 <__aeabi_dsub>
 8022f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022f04:	f7dd fda0 	bl	8000a48 <__aeabi_dcmplt>
 8022f08:	2800      	cmp	r0, #0
 8022f0a:	f040 80b4 	bne.w	8023076 <_dtoa_r+0x6c6>
 8022f0e:	42a6      	cmp	r6, r4
 8022f10:	f43f af70 	beq.w	8022df4 <_dtoa_r+0x444>
 8022f14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022f18:	2200      	movs	r2, #0
 8022f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8022f44 <_dtoa_r+0x594>)
 8022f1c:	f7dd fb22 	bl	8000564 <__aeabi_dmul>
 8022f20:	2200      	movs	r2, #0
 8022f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f2a:	4b06      	ldr	r3, [pc, #24]	@ (8022f44 <_dtoa_r+0x594>)
 8022f2c:	f7dd fb1a 	bl	8000564 <__aeabi_dmul>
 8022f30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022f34:	e7c4      	b.n	8022ec0 <_dtoa_r+0x510>
 8022f36:	bf00      	nop
 8022f38:	08033200 	.word	0x08033200
 8022f3c:	080331d8 	.word	0x080331d8
 8022f40:	3ff00000 	.word	0x3ff00000
 8022f44:	40240000 	.word	0x40240000
 8022f48:	401c0000 	.word	0x401c0000
 8022f4c:	40140000 	.word	0x40140000
 8022f50:	3fe00000 	.word	0x3fe00000
 8022f54:	4631      	mov	r1, r6
 8022f56:	4628      	mov	r0, r5
 8022f58:	f7dd fb04 	bl	8000564 <__aeabi_dmul>
 8022f5c:	4656      	mov	r6, sl
 8022f5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022f62:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f68:	f7dd fdac 	bl	8000ac4 <__aeabi_d2iz>
 8022f6c:	4605      	mov	r5, r0
 8022f6e:	f7dd fa8f 	bl	8000490 <__aeabi_i2d>
 8022f72:	4602      	mov	r2, r0
 8022f74:	460b      	mov	r3, r1
 8022f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f7a:	f7dd f93b 	bl	80001f4 <__aeabi_dsub>
 8022f7e:	4602      	mov	r2, r0
 8022f80:	460b      	mov	r3, r1
 8022f82:	3530      	adds	r5, #48	@ 0x30
 8022f84:	f806 5b01 	strb.w	r5, [r6], #1
 8022f88:	42a6      	cmp	r6, r4
 8022f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022f8e:	f04f 0200 	mov.w	r2, #0
 8022f92:	d124      	bne.n	8022fde <_dtoa_r+0x62e>
 8022f94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022f98:	4bae      	ldr	r3, [pc, #696]	@ (8023254 <_dtoa_r+0x8a4>)
 8022f9a:	f7dd f92d 	bl	80001f8 <__adddf3>
 8022f9e:	4602      	mov	r2, r0
 8022fa0:	460b      	mov	r3, r1
 8022fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fa6:	f7dd fd6d 	bl	8000a84 <__aeabi_dcmpgt>
 8022faa:	2800      	cmp	r0, #0
 8022fac:	d163      	bne.n	8023076 <_dtoa_r+0x6c6>
 8022fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022fb2:	2000      	movs	r0, #0
 8022fb4:	49a7      	ldr	r1, [pc, #668]	@ (8023254 <_dtoa_r+0x8a4>)
 8022fb6:	f7dd f91d 	bl	80001f4 <__aeabi_dsub>
 8022fba:	4602      	mov	r2, r0
 8022fbc:	460b      	mov	r3, r1
 8022fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fc2:	f7dd fd41 	bl	8000a48 <__aeabi_dcmplt>
 8022fc6:	2800      	cmp	r0, #0
 8022fc8:	f43f af14 	beq.w	8022df4 <_dtoa_r+0x444>
 8022fcc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022fce:	1e73      	subs	r3, r6, #1
 8022fd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022fd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022fd6:	2b30      	cmp	r3, #48	@ 0x30
 8022fd8:	d0f8      	beq.n	8022fcc <_dtoa_r+0x61c>
 8022fda:	4647      	mov	r7, r8
 8022fdc:	e03b      	b.n	8023056 <_dtoa_r+0x6a6>
 8022fde:	4b9e      	ldr	r3, [pc, #632]	@ (8023258 <_dtoa_r+0x8a8>)
 8022fe0:	f7dd fac0 	bl	8000564 <__aeabi_dmul>
 8022fe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022fe8:	e7bc      	b.n	8022f64 <_dtoa_r+0x5b4>
 8022fea:	4656      	mov	r6, sl
 8022fec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022ff4:	4620      	mov	r0, r4
 8022ff6:	4629      	mov	r1, r5
 8022ff8:	f7dd fbde 	bl	80007b8 <__aeabi_ddiv>
 8022ffc:	f7dd fd62 	bl	8000ac4 <__aeabi_d2iz>
 8023000:	4680      	mov	r8, r0
 8023002:	f7dd fa45 	bl	8000490 <__aeabi_i2d>
 8023006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802300a:	f7dd faab 	bl	8000564 <__aeabi_dmul>
 802300e:	4602      	mov	r2, r0
 8023010:	460b      	mov	r3, r1
 8023012:	4620      	mov	r0, r4
 8023014:	4629      	mov	r1, r5
 8023016:	f7dd f8ed 	bl	80001f4 <__aeabi_dsub>
 802301a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802301e:	9d08      	ldr	r5, [sp, #32]
 8023020:	f806 4b01 	strb.w	r4, [r6], #1
 8023024:	eba6 040a 	sub.w	r4, r6, sl
 8023028:	42a5      	cmp	r5, r4
 802302a:	4602      	mov	r2, r0
 802302c:	460b      	mov	r3, r1
 802302e:	d133      	bne.n	8023098 <_dtoa_r+0x6e8>
 8023030:	f7dd f8e2 	bl	80001f8 <__adddf3>
 8023034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023038:	4604      	mov	r4, r0
 802303a:	460d      	mov	r5, r1
 802303c:	f7dd fd22 	bl	8000a84 <__aeabi_dcmpgt>
 8023040:	b9c0      	cbnz	r0, 8023074 <_dtoa_r+0x6c4>
 8023042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023046:	4620      	mov	r0, r4
 8023048:	4629      	mov	r1, r5
 802304a:	f7dd fcf3 	bl	8000a34 <__aeabi_dcmpeq>
 802304e:	b110      	cbz	r0, 8023056 <_dtoa_r+0x6a6>
 8023050:	f018 0f01 	tst.w	r8, #1
 8023054:	d10e      	bne.n	8023074 <_dtoa_r+0x6c4>
 8023056:	4648      	mov	r0, r9
 8023058:	9903      	ldr	r1, [sp, #12]
 802305a:	f000 fbbb 	bl	80237d4 <_Bfree>
 802305e:	2300      	movs	r3, #0
 8023060:	7033      	strb	r3, [r6, #0]
 8023062:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023064:	3701      	adds	r7, #1
 8023066:	601f      	str	r7, [r3, #0]
 8023068:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802306a:	2b00      	cmp	r3, #0
 802306c:	f000 824b 	beq.w	8023506 <_dtoa_r+0xb56>
 8023070:	601e      	str	r6, [r3, #0]
 8023072:	e248      	b.n	8023506 <_dtoa_r+0xb56>
 8023074:	46b8      	mov	r8, r7
 8023076:	4633      	mov	r3, r6
 8023078:	461e      	mov	r6, r3
 802307a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802307e:	2a39      	cmp	r2, #57	@ 0x39
 8023080:	d106      	bne.n	8023090 <_dtoa_r+0x6e0>
 8023082:	459a      	cmp	sl, r3
 8023084:	d1f8      	bne.n	8023078 <_dtoa_r+0x6c8>
 8023086:	2230      	movs	r2, #48	@ 0x30
 8023088:	f108 0801 	add.w	r8, r8, #1
 802308c:	f88a 2000 	strb.w	r2, [sl]
 8023090:	781a      	ldrb	r2, [r3, #0]
 8023092:	3201      	adds	r2, #1
 8023094:	701a      	strb	r2, [r3, #0]
 8023096:	e7a0      	b.n	8022fda <_dtoa_r+0x62a>
 8023098:	2200      	movs	r2, #0
 802309a:	4b6f      	ldr	r3, [pc, #444]	@ (8023258 <_dtoa_r+0x8a8>)
 802309c:	f7dd fa62 	bl	8000564 <__aeabi_dmul>
 80230a0:	2200      	movs	r2, #0
 80230a2:	2300      	movs	r3, #0
 80230a4:	4604      	mov	r4, r0
 80230a6:	460d      	mov	r5, r1
 80230a8:	f7dd fcc4 	bl	8000a34 <__aeabi_dcmpeq>
 80230ac:	2800      	cmp	r0, #0
 80230ae:	d09f      	beq.n	8022ff0 <_dtoa_r+0x640>
 80230b0:	e7d1      	b.n	8023056 <_dtoa_r+0x6a6>
 80230b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80230b4:	2a00      	cmp	r2, #0
 80230b6:	f000 80ea 	beq.w	802328e <_dtoa_r+0x8de>
 80230ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80230bc:	2a01      	cmp	r2, #1
 80230be:	f300 80cd 	bgt.w	802325c <_dtoa_r+0x8ac>
 80230c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80230c4:	2a00      	cmp	r2, #0
 80230c6:	f000 80c1 	beq.w	802324c <_dtoa_r+0x89c>
 80230ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80230ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80230d0:	9e04      	ldr	r6, [sp, #16]
 80230d2:	9a04      	ldr	r2, [sp, #16]
 80230d4:	2101      	movs	r1, #1
 80230d6:	441a      	add	r2, r3
 80230d8:	9204      	str	r2, [sp, #16]
 80230da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80230dc:	4648      	mov	r0, r9
 80230de:	441a      	add	r2, r3
 80230e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80230e2:	f000 fc2b 	bl	802393c <__i2b>
 80230e6:	4605      	mov	r5, r0
 80230e8:	b166      	cbz	r6, 8023104 <_dtoa_r+0x754>
 80230ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	dd09      	ble.n	8023104 <_dtoa_r+0x754>
 80230f0:	42b3      	cmp	r3, r6
 80230f2:	bfa8      	it	ge
 80230f4:	4633      	movge	r3, r6
 80230f6:	9a04      	ldr	r2, [sp, #16]
 80230f8:	1af6      	subs	r6, r6, r3
 80230fa:	1ad2      	subs	r2, r2, r3
 80230fc:	9204      	str	r2, [sp, #16]
 80230fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023100:	1ad3      	subs	r3, r2, r3
 8023102:	9309      	str	r3, [sp, #36]	@ 0x24
 8023104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023106:	b30b      	cbz	r3, 802314c <_dtoa_r+0x79c>
 8023108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802310a:	2b00      	cmp	r3, #0
 802310c:	f000 80c6 	beq.w	802329c <_dtoa_r+0x8ec>
 8023110:	2c00      	cmp	r4, #0
 8023112:	f000 80c0 	beq.w	8023296 <_dtoa_r+0x8e6>
 8023116:	4629      	mov	r1, r5
 8023118:	4622      	mov	r2, r4
 802311a:	4648      	mov	r0, r9
 802311c:	f000 fcc6 	bl	8023aac <__pow5mult>
 8023120:	9a03      	ldr	r2, [sp, #12]
 8023122:	4601      	mov	r1, r0
 8023124:	4605      	mov	r5, r0
 8023126:	4648      	mov	r0, r9
 8023128:	f000 fc1e 	bl	8023968 <__multiply>
 802312c:	9903      	ldr	r1, [sp, #12]
 802312e:	4680      	mov	r8, r0
 8023130:	4648      	mov	r0, r9
 8023132:	f000 fb4f 	bl	80237d4 <_Bfree>
 8023136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023138:	1b1b      	subs	r3, r3, r4
 802313a:	930a      	str	r3, [sp, #40]	@ 0x28
 802313c:	f000 80b1 	beq.w	80232a2 <_dtoa_r+0x8f2>
 8023140:	4641      	mov	r1, r8
 8023142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023144:	4648      	mov	r0, r9
 8023146:	f000 fcb1 	bl	8023aac <__pow5mult>
 802314a:	9003      	str	r0, [sp, #12]
 802314c:	2101      	movs	r1, #1
 802314e:	4648      	mov	r0, r9
 8023150:	f000 fbf4 	bl	802393c <__i2b>
 8023154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023156:	4604      	mov	r4, r0
 8023158:	2b00      	cmp	r3, #0
 802315a:	f000 81d8 	beq.w	802350e <_dtoa_r+0xb5e>
 802315e:	461a      	mov	r2, r3
 8023160:	4601      	mov	r1, r0
 8023162:	4648      	mov	r0, r9
 8023164:	f000 fca2 	bl	8023aac <__pow5mult>
 8023168:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802316a:	4604      	mov	r4, r0
 802316c:	2b01      	cmp	r3, #1
 802316e:	f300 809f 	bgt.w	80232b0 <_dtoa_r+0x900>
 8023172:	9b06      	ldr	r3, [sp, #24]
 8023174:	2b00      	cmp	r3, #0
 8023176:	f040 8097 	bne.w	80232a8 <_dtoa_r+0x8f8>
 802317a:	9b07      	ldr	r3, [sp, #28]
 802317c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023180:	2b00      	cmp	r3, #0
 8023182:	f040 8093 	bne.w	80232ac <_dtoa_r+0x8fc>
 8023186:	9b07      	ldr	r3, [sp, #28]
 8023188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802318c:	0d1b      	lsrs	r3, r3, #20
 802318e:	051b      	lsls	r3, r3, #20
 8023190:	b133      	cbz	r3, 80231a0 <_dtoa_r+0x7f0>
 8023192:	9b04      	ldr	r3, [sp, #16]
 8023194:	3301      	adds	r3, #1
 8023196:	9304      	str	r3, [sp, #16]
 8023198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802319a:	3301      	adds	r3, #1
 802319c:	9309      	str	r3, [sp, #36]	@ 0x24
 802319e:	2301      	movs	r3, #1
 80231a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80231a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	f000 81b8 	beq.w	802351a <_dtoa_r+0xb6a>
 80231aa:	6923      	ldr	r3, [r4, #16]
 80231ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80231b0:	6918      	ldr	r0, [r3, #16]
 80231b2:	f000 fb77 	bl	80238a4 <__hi0bits>
 80231b6:	f1c0 0020 	rsb	r0, r0, #32
 80231ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231bc:	4418      	add	r0, r3
 80231be:	f010 001f 	ands.w	r0, r0, #31
 80231c2:	f000 8082 	beq.w	80232ca <_dtoa_r+0x91a>
 80231c6:	f1c0 0320 	rsb	r3, r0, #32
 80231ca:	2b04      	cmp	r3, #4
 80231cc:	dd73      	ble.n	80232b6 <_dtoa_r+0x906>
 80231ce:	9b04      	ldr	r3, [sp, #16]
 80231d0:	f1c0 001c 	rsb	r0, r0, #28
 80231d4:	4403      	add	r3, r0
 80231d6:	9304      	str	r3, [sp, #16]
 80231d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231da:	4406      	add	r6, r0
 80231dc:	4403      	add	r3, r0
 80231de:	9309      	str	r3, [sp, #36]	@ 0x24
 80231e0:	9b04      	ldr	r3, [sp, #16]
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	dd05      	ble.n	80231f2 <_dtoa_r+0x842>
 80231e6:	461a      	mov	r2, r3
 80231e8:	4648      	mov	r0, r9
 80231ea:	9903      	ldr	r1, [sp, #12]
 80231ec:	f000 fcb8 	bl	8023b60 <__lshift>
 80231f0:	9003      	str	r0, [sp, #12]
 80231f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	dd05      	ble.n	8023204 <_dtoa_r+0x854>
 80231f8:	4621      	mov	r1, r4
 80231fa:	461a      	mov	r2, r3
 80231fc:	4648      	mov	r0, r9
 80231fe:	f000 fcaf 	bl	8023b60 <__lshift>
 8023202:	4604      	mov	r4, r0
 8023204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023206:	2b00      	cmp	r3, #0
 8023208:	d061      	beq.n	80232ce <_dtoa_r+0x91e>
 802320a:	4621      	mov	r1, r4
 802320c:	9803      	ldr	r0, [sp, #12]
 802320e:	f000 fd13 	bl	8023c38 <__mcmp>
 8023212:	2800      	cmp	r0, #0
 8023214:	da5b      	bge.n	80232ce <_dtoa_r+0x91e>
 8023216:	2300      	movs	r3, #0
 8023218:	220a      	movs	r2, #10
 802321a:	4648      	mov	r0, r9
 802321c:	9903      	ldr	r1, [sp, #12]
 802321e:	f000 fafb 	bl	8023818 <__multadd>
 8023222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023224:	f107 38ff 	add.w	r8, r7, #4294967295
 8023228:	9003      	str	r0, [sp, #12]
 802322a:	2b00      	cmp	r3, #0
 802322c:	f000 8177 	beq.w	802351e <_dtoa_r+0xb6e>
 8023230:	4629      	mov	r1, r5
 8023232:	2300      	movs	r3, #0
 8023234:	220a      	movs	r2, #10
 8023236:	4648      	mov	r0, r9
 8023238:	f000 faee 	bl	8023818 <__multadd>
 802323c:	f1bb 0f00 	cmp.w	fp, #0
 8023240:	4605      	mov	r5, r0
 8023242:	dc6f      	bgt.n	8023324 <_dtoa_r+0x974>
 8023244:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023246:	2b02      	cmp	r3, #2
 8023248:	dc49      	bgt.n	80232de <_dtoa_r+0x92e>
 802324a:	e06b      	b.n	8023324 <_dtoa_r+0x974>
 802324c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802324e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8023252:	e73c      	b.n	80230ce <_dtoa_r+0x71e>
 8023254:	3fe00000 	.word	0x3fe00000
 8023258:	40240000 	.word	0x40240000
 802325c:	9b08      	ldr	r3, [sp, #32]
 802325e:	1e5c      	subs	r4, r3, #1
 8023260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023262:	42a3      	cmp	r3, r4
 8023264:	db09      	blt.n	802327a <_dtoa_r+0x8ca>
 8023266:	1b1c      	subs	r4, r3, r4
 8023268:	9b08      	ldr	r3, [sp, #32]
 802326a:	2b00      	cmp	r3, #0
 802326c:	f6bf af30 	bge.w	80230d0 <_dtoa_r+0x720>
 8023270:	9b04      	ldr	r3, [sp, #16]
 8023272:	9a08      	ldr	r2, [sp, #32]
 8023274:	1a9e      	subs	r6, r3, r2
 8023276:	2300      	movs	r3, #0
 8023278:	e72b      	b.n	80230d2 <_dtoa_r+0x722>
 802327a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802327c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802327e:	1ae3      	subs	r3, r4, r3
 8023280:	441a      	add	r2, r3
 8023282:	940a      	str	r4, [sp, #40]	@ 0x28
 8023284:	9e04      	ldr	r6, [sp, #16]
 8023286:	2400      	movs	r4, #0
 8023288:	9b08      	ldr	r3, [sp, #32]
 802328a:	920e      	str	r2, [sp, #56]	@ 0x38
 802328c:	e721      	b.n	80230d2 <_dtoa_r+0x722>
 802328e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023290:	9e04      	ldr	r6, [sp, #16]
 8023292:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023294:	e728      	b.n	80230e8 <_dtoa_r+0x738>
 8023296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802329a:	e751      	b.n	8023140 <_dtoa_r+0x790>
 802329c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802329e:	9903      	ldr	r1, [sp, #12]
 80232a0:	e750      	b.n	8023144 <_dtoa_r+0x794>
 80232a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80232a6:	e751      	b.n	802314c <_dtoa_r+0x79c>
 80232a8:	2300      	movs	r3, #0
 80232aa:	e779      	b.n	80231a0 <_dtoa_r+0x7f0>
 80232ac:	9b06      	ldr	r3, [sp, #24]
 80232ae:	e777      	b.n	80231a0 <_dtoa_r+0x7f0>
 80232b0:	2300      	movs	r3, #0
 80232b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80232b4:	e779      	b.n	80231aa <_dtoa_r+0x7fa>
 80232b6:	d093      	beq.n	80231e0 <_dtoa_r+0x830>
 80232b8:	9a04      	ldr	r2, [sp, #16]
 80232ba:	331c      	adds	r3, #28
 80232bc:	441a      	add	r2, r3
 80232be:	9204      	str	r2, [sp, #16]
 80232c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80232c2:	441e      	add	r6, r3
 80232c4:	441a      	add	r2, r3
 80232c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80232c8:	e78a      	b.n	80231e0 <_dtoa_r+0x830>
 80232ca:	4603      	mov	r3, r0
 80232cc:	e7f4      	b.n	80232b8 <_dtoa_r+0x908>
 80232ce:	9b08      	ldr	r3, [sp, #32]
 80232d0:	46b8      	mov	r8, r7
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	dc20      	bgt.n	8023318 <_dtoa_r+0x968>
 80232d6:	469b      	mov	fp, r3
 80232d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80232da:	2b02      	cmp	r3, #2
 80232dc:	dd1e      	ble.n	802331c <_dtoa_r+0x96c>
 80232de:	f1bb 0f00 	cmp.w	fp, #0
 80232e2:	f47f adb1 	bne.w	8022e48 <_dtoa_r+0x498>
 80232e6:	4621      	mov	r1, r4
 80232e8:	465b      	mov	r3, fp
 80232ea:	2205      	movs	r2, #5
 80232ec:	4648      	mov	r0, r9
 80232ee:	f000 fa93 	bl	8023818 <__multadd>
 80232f2:	4601      	mov	r1, r0
 80232f4:	4604      	mov	r4, r0
 80232f6:	9803      	ldr	r0, [sp, #12]
 80232f8:	f000 fc9e 	bl	8023c38 <__mcmp>
 80232fc:	2800      	cmp	r0, #0
 80232fe:	f77f ada3 	ble.w	8022e48 <_dtoa_r+0x498>
 8023302:	4656      	mov	r6, sl
 8023304:	2331      	movs	r3, #49	@ 0x31
 8023306:	f108 0801 	add.w	r8, r8, #1
 802330a:	f806 3b01 	strb.w	r3, [r6], #1
 802330e:	e59f      	b.n	8022e50 <_dtoa_r+0x4a0>
 8023310:	46b8      	mov	r8, r7
 8023312:	9c08      	ldr	r4, [sp, #32]
 8023314:	4625      	mov	r5, r4
 8023316:	e7f4      	b.n	8023302 <_dtoa_r+0x952>
 8023318:	f8dd b020 	ldr.w	fp, [sp, #32]
 802331c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802331e:	2b00      	cmp	r3, #0
 8023320:	f000 8101 	beq.w	8023526 <_dtoa_r+0xb76>
 8023324:	2e00      	cmp	r6, #0
 8023326:	dd05      	ble.n	8023334 <_dtoa_r+0x984>
 8023328:	4629      	mov	r1, r5
 802332a:	4632      	mov	r2, r6
 802332c:	4648      	mov	r0, r9
 802332e:	f000 fc17 	bl	8023b60 <__lshift>
 8023332:	4605      	mov	r5, r0
 8023334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023336:	2b00      	cmp	r3, #0
 8023338:	d05c      	beq.n	80233f4 <_dtoa_r+0xa44>
 802333a:	4648      	mov	r0, r9
 802333c:	6869      	ldr	r1, [r5, #4]
 802333e:	f000 fa09 	bl	8023754 <_Balloc>
 8023342:	4606      	mov	r6, r0
 8023344:	b928      	cbnz	r0, 8023352 <_dtoa_r+0x9a2>
 8023346:	4602      	mov	r2, r0
 8023348:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802334c:	4b80      	ldr	r3, [pc, #512]	@ (8023550 <_dtoa_r+0xba0>)
 802334e:	f7ff bb43 	b.w	80229d8 <_dtoa_r+0x28>
 8023352:	692a      	ldr	r2, [r5, #16]
 8023354:	f105 010c 	add.w	r1, r5, #12
 8023358:	3202      	adds	r2, #2
 802335a:	0092      	lsls	r2, r2, #2
 802335c:	300c      	adds	r0, #12
 802335e:	f7ff fa70 	bl	8022842 <memcpy>
 8023362:	2201      	movs	r2, #1
 8023364:	4631      	mov	r1, r6
 8023366:	4648      	mov	r0, r9
 8023368:	f000 fbfa 	bl	8023b60 <__lshift>
 802336c:	462f      	mov	r7, r5
 802336e:	4605      	mov	r5, r0
 8023370:	f10a 0301 	add.w	r3, sl, #1
 8023374:	9304      	str	r3, [sp, #16]
 8023376:	eb0a 030b 	add.w	r3, sl, fp
 802337a:	930a      	str	r3, [sp, #40]	@ 0x28
 802337c:	9b06      	ldr	r3, [sp, #24]
 802337e:	f003 0301 	and.w	r3, r3, #1
 8023382:	9309      	str	r3, [sp, #36]	@ 0x24
 8023384:	9b04      	ldr	r3, [sp, #16]
 8023386:	4621      	mov	r1, r4
 8023388:	9803      	ldr	r0, [sp, #12]
 802338a:	f103 3bff 	add.w	fp, r3, #4294967295
 802338e:	f7ff fa85 	bl	802289c <quorem>
 8023392:	4603      	mov	r3, r0
 8023394:	4639      	mov	r1, r7
 8023396:	3330      	adds	r3, #48	@ 0x30
 8023398:	9006      	str	r0, [sp, #24]
 802339a:	9803      	ldr	r0, [sp, #12]
 802339c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802339e:	f000 fc4b 	bl	8023c38 <__mcmp>
 80233a2:	462a      	mov	r2, r5
 80233a4:	9008      	str	r0, [sp, #32]
 80233a6:	4621      	mov	r1, r4
 80233a8:	4648      	mov	r0, r9
 80233aa:	f000 fc61 	bl	8023c70 <__mdiff>
 80233ae:	68c2      	ldr	r2, [r0, #12]
 80233b0:	4606      	mov	r6, r0
 80233b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233b4:	bb02      	cbnz	r2, 80233f8 <_dtoa_r+0xa48>
 80233b6:	4601      	mov	r1, r0
 80233b8:	9803      	ldr	r0, [sp, #12]
 80233ba:	f000 fc3d 	bl	8023c38 <__mcmp>
 80233be:	4602      	mov	r2, r0
 80233c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233c2:	4631      	mov	r1, r6
 80233c4:	4648      	mov	r0, r9
 80233c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80233ca:	f000 fa03 	bl	80237d4 <_Bfree>
 80233ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80233d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80233d2:	9e04      	ldr	r6, [sp, #16]
 80233d4:	ea42 0103 	orr.w	r1, r2, r3
 80233d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233da:	4319      	orrs	r1, r3
 80233dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233de:	d10d      	bne.n	80233fc <_dtoa_r+0xa4c>
 80233e0:	2b39      	cmp	r3, #57	@ 0x39
 80233e2:	d027      	beq.n	8023434 <_dtoa_r+0xa84>
 80233e4:	9a08      	ldr	r2, [sp, #32]
 80233e6:	2a00      	cmp	r2, #0
 80233e8:	dd01      	ble.n	80233ee <_dtoa_r+0xa3e>
 80233ea:	9b06      	ldr	r3, [sp, #24]
 80233ec:	3331      	adds	r3, #49	@ 0x31
 80233ee:	f88b 3000 	strb.w	r3, [fp]
 80233f2:	e52e      	b.n	8022e52 <_dtoa_r+0x4a2>
 80233f4:	4628      	mov	r0, r5
 80233f6:	e7b9      	b.n	802336c <_dtoa_r+0x9bc>
 80233f8:	2201      	movs	r2, #1
 80233fa:	e7e2      	b.n	80233c2 <_dtoa_r+0xa12>
 80233fc:	9908      	ldr	r1, [sp, #32]
 80233fe:	2900      	cmp	r1, #0
 8023400:	db04      	blt.n	802340c <_dtoa_r+0xa5c>
 8023402:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023404:	4301      	orrs	r1, r0
 8023406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023408:	4301      	orrs	r1, r0
 802340a:	d120      	bne.n	802344e <_dtoa_r+0xa9e>
 802340c:	2a00      	cmp	r2, #0
 802340e:	ddee      	ble.n	80233ee <_dtoa_r+0xa3e>
 8023410:	2201      	movs	r2, #1
 8023412:	9903      	ldr	r1, [sp, #12]
 8023414:	4648      	mov	r0, r9
 8023416:	9304      	str	r3, [sp, #16]
 8023418:	f000 fba2 	bl	8023b60 <__lshift>
 802341c:	4621      	mov	r1, r4
 802341e:	9003      	str	r0, [sp, #12]
 8023420:	f000 fc0a 	bl	8023c38 <__mcmp>
 8023424:	2800      	cmp	r0, #0
 8023426:	9b04      	ldr	r3, [sp, #16]
 8023428:	dc02      	bgt.n	8023430 <_dtoa_r+0xa80>
 802342a:	d1e0      	bne.n	80233ee <_dtoa_r+0xa3e>
 802342c:	07da      	lsls	r2, r3, #31
 802342e:	d5de      	bpl.n	80233ee <_dtoa_r+0xa3e>
 8023430:	2b39      	cmp	r3, #57	@ 0x39
 8023432:	d1da      	bne.n	80233ea <_dtoa_r+0xa3a>
 8023434:	2339      	movs	r3, #57	@ 0x39
 8023436:	f88b 3000 	strb.w	r3, [fp]
 802343a:	4633      	mov	r3, r6
 802343c:	461e      	mov	r6, r3
 802343e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8023442:	3b01      	subs	r3, #1
 8023444:	2a39      	cmp	r2, #57	@ 0x39
 8023446:	d04e      	beq.n	80234e6 <_dtoa_r+0xb36>
 8023448:	3201      	adds	r2, #1
 802344a:	701a      	strb	r2, [r3, #0]
 802344c:	e501      	b.n	8022e52 <_dtoa_r+0x4a2>
 802344e:	2a00      	cmp	r2, #0
 8023450:	dd03      	ble.n	802345a <_dtoa_r+0xaaa>
 8023452:	2b39      	cmp	r3, #57	@ 0x39
 8023454:	d0ee      	beq.n	8023434 <_dtoa_r+0xa84>
 8023456:	3301      	adds	r3, #1
 8023458:	e7c9      	b.n	80233ee <_dtoa_r+0xa3e>
 802345a:	9a04      	ldr	r2, [sp, #16]
 802345c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802345e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023462:	428a      	cmp	r2, r1
 8023464:	d028      	beq.n	80234b8 <_dtoa_r+0xb08>
 8023466:	2300      	movs	r3, #0
 8023468:	220a      	movs	r2, #10
 802346a:	9903      	ldr	r1, [sp, #12]
 802346c:	4648      	mov	r0, r9
 802346e:	f000 f9d3 	bl	8023818 <__multadd>
 8023472:	42af      	cmp	r7, r5
 8023474:	9003      	str	r0, [sp, #12]
 8023476:	f04f 0300 	mov.w	r3, #0
 802347a:	f04f 020a 	mov.w	r2, #10
 802347e:	4639      	mov	r1, r7
 8023480:	4648      	mov	r0, r9
 8023482:	d107      	bne.n	8023494 <_dtoa_r+0xae4>
 8023484:	f000 f9c8 	bl	8023818 <__multadd>
 8023488:	4607      	mov	r7, r0
 802348a:	4605      	mov	r5, r0
 802348c:	9b04      	ldr	r3, [sp, #16]
 802348e:	3301      	adds	r3, #1
 8023490:	9304      	str	r3, [sp, #16]
 8023492:	e777      	b.n	8023384 <_dtoa_r+0x9d4>
 8023494:	f000 f9c0 	bl	8023818 <__multadd>
 8023498:	4629      	mov	r1, r5
 802349a:	4607      	mov	r7, r0
 802349c:	2300      	movs	r3, #0
 802349e:	220a      	movs	r2, #10
 80234a0:	4648      	mov	r0, r9
 80234a2:	f000 f9b9 	bl	8023818 <__multadd>
 80234a6:	4605      	mov	r5, r0
 80234a8:	e7f0      	b.n	802348c <_dtoa_r+0xadc>
 80234aa:	f1bb 0f00 	cmp.w	fp, #0
 80234ae:	bfcc      	ite	gt
 80234b0:	465e      	movgt	r6, fp
 80234b2:	2601      	movle	r6, #1
 80234b4:	2700      	movs	r7, #0
 80234b6:	4456      	add	r6, sl
 80234b8:	2201      	movs	r2, #1
 80234ba:	9903      	ldr	r1, [sp, #12]
 80234bc:	4648      	mov	r0, r9
 80234be:	9304      	str	r3, [sp, #16]
 80234c0:	f000 fb4e 	bl	8023b60 <__lshift>
 80234c4:	4621      	mov	r1, r4
 80234c6:	9003      	str	r0, [sp, #12]
 80234c8:	f000 fbb6 	bl	8023c38 <__mcmp>
 80234cc:	2800      	cmp	r0, #0
 80234ce:	dcb4      	bgt.n	802343a <_dtoa_r+0xa8a>
 80234d0:	d102      	bne.n	80234d8 <_dtoa_r+0xb28>
 80234d2:	9b04      	ldr	r3, [sp, #16]
 80234d4:	07db      	lsls	r3, r3, #31
 80234d6:	d4b0      	bmi.n	802343a <_dtoa_r+0xa8a>
 80234d8:	4633      	mov	r3, r6
 80234da:	461e      	mov	r6, r3
 80234dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80234e0:	2a30      	cmp	r2, #48	@ 0x30
 80234e2:	d0fa      	beq.n	80234da <_dtoa_r+0xb2a>
 80234e4:	e4b5      	b.n	8022e52 <_dtoa_r+0x4a2>
 80234e6:	459a      	cmp	sl, r3
 80234e8:	d1a8      	bne.n	802343c <_dtoa_r+0xa8c>
 80234ea:	2331      	movs	r3, #49	@ 0x31
 80234ec:	f108 0801 	add.w	r8, r8, #1
 80234f0:	f88a 3000 	strb.w	r3, [sl]
 80234f4:	e4ad      	b.n	8022e52 <_dtoa_r+0x4a2>
 80234f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80234f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8023554 <_dtoa_r+0xba4>
 80234fc:	b11b      	cbz	r3, 8023506 <_dtoa_r+0xb56>
 80234fe:	f10a 0308 	add.w	r3, sl, #8
 8023502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023504:	6013      	str	r3, [r2, #0]
 8023506:	4650      	mov	r0, sl
 8023508:	b017      	add	sp, #92	@ 0x5c
 802350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802350e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023510:	2b01      	cmp	r3, #1
 8023512:	f77f ae2e 	ble.w	8023172 <_dtoa_r+0x7c2>
 8023516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023518:	930a      	str	r3, [sp, #40]	@ 0x28
 802351a:	2001      	movs	r0, #1
 802351c:	e64d      	b.n	80231ba <_dtoa_r+0x80a>
 802351e:	f1bb 0f00 	cmp.w	fp, #0
 8023522:	f77f aed9 	ble.w	80232d8 <_dtoa_r+0x928>
 8023526:	4656      	mov	r6, sl
 8023528:	4621      	mov	r1, r4
 802352a:	9803      	ldr	r0, [sp, #12]
 802352c:	f7ff f9b6 	bl	802289c <quorem>
 8023530:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023534:	f806 3b01 	strb.w	r3, [r6], #1
 8023538:	eba6 020a 	sub.w	r2, r6, sl
 802353c:	4593      	cmp	fp, r2
 802353e:	ddb4      	ble.n	80234aa <_dtoa_r+0xafa>
 8023540:	2300      	movs	r3, #0
 8023542:	220a      	movs	r2, #10
 8023544:	4648      	mov	r0, r9
 8023546:	9903      	ldr	r1, [sp, #12]
 8023548:	f000 f966 	bl	8023818 <__multadd>
 802354c:	9003      	str	r0, [sp, #12]
 802354e:	e7eb      	b.n	8023528 <_dtoa_r+0xb78>
 8023550:	08033028 	.word	0x08033028
 8023554:	08032fc3 	.word	0x08032fc3

08023558 <_free_r>:
 8023558:	b538      	push	{r3, r4, r5, lr}
 802355a:	4605      	mov	r5, r0
 802355c:	2900      	cmp	r1, #0
 802355e:	d040      	beq.n	80235e2 <_free_r+0x8a>
 8023560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023564:	1f0c      	subs	r4, r1, #4
 8023566:	2b00      	cmp	r3, #0
 8023568:	bfb8      	it	lt
 802356a:	18e4      	addlt	r4, r4, r3
 802356c:	f000 f8e6 	bl	802373c <__malloc_lock>
 8023570:	4a1c      	ldr	r2, [pc, #112]	@ (80235e4 <_free_r+0x8c>)
 8023572:	6813      	ldr	r3, [r2, #0]
 8023574:	b933      	cbnz	r3, 8023584 <_free_r+0x2c>
 8023576:	6063      	str	r3, [r4, #4]
 8023578:	6014      	str	r4, [r2, #0]
 802357a:	4628      	mov	r0, r5
 802357c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023580:	f000 b8e2 	b.w	8023748 <__malloc_unlock>
 8023584:	42a3      	cmp	r3, r4
 8023586:	d908      	bls.n	802359a <_free_r+0x42>
 8023588:	6820      	ldr	r0, [r4, #0]
 802358a:	1821      	adds	r1, r4, r0
 802358c:	428b      	cmp	r3, r1
 802358e:	bf01      	itttt	eq
 8023590:	6819      	ldreq	r1, [r3, #0]
 8023592:	685b      	ldreq	r3, [r3, #4]
 8023594:	1809      	addeq	r1, r1, r0
 8023596:	6021      	streq	r1, [r4, #0]
 8023598:	e7ed      	b.n	8023576 <_free_r+0x1e>
 802359a:	461a      	mov	r2, r3
 802359c:	685b      	ldr	r3, [r3, #4]
 802359e:	b10b      	cbz	r3, 80235a4 <_free_r+0x4c>
 80235a0:	42a3      	cmp	r3, r4
 80235a2:	d9fa      	bls.n	802359a <_free_r+0x42>
 80235a4:	6811      	ldr	r1, [r2, #0]
 80235a6:	1850      	adds	r0, r2, r1
 80235a8:	42a0      	cmp	r0, r4
 80235aa:	d10b      	bne.n	80235c4 <_free_r+0x6c>
 80235ac:	6820      	ldr	r0, [r4, #0]
 80235ae:	4401      	add	r1, r0
 80235b0:	1850      	adds	r0, r2, r1
 80235b2:	4283      	cmp	r3, r0
 80235b4:	6011      	str	r1, [r2, #0]
 80235b6:	d1e0      	bne.n	802357a <_free_r+0x22>
 80235b8:	6818      	ldr	r0, [r3, #0]
 80235ba:	685b      	ldr	r3, [r3, #4]
 80235bc:	4408      	add	r0, r1
 80235be:	6010      	str	r0, [r2, #0]
 80235c0:	6053      	str	r3, [r2, #4]
 80235c2:	e7da      	b.n	802357a <_free_r+0x22>
 80235c4:	d902      	bls.n	80235cc <_free_r+0x74>
 80235c6:	230c      	movs	r3, #12
 80235c8:	602b      	str	r3, [r5, #0]
 80235ca:	e7d6      	b.n	802357a <_free_r+0x22>
 80235cc:	6820      	ldr	r0, [r4, #0]
 80235ce:	1821      	adds	r1, r4, r0
 80235d0:	428b      	cmp	r3, r1
 80235d2:	bf01      	itttt	eq
 80235d4:	6819      	ldreq	r1, [r3, #0]
 80235d6:	685b      	ldreq	r3, [r3, #4]
 80235d8:	1809      	addeq	r1, r1, r0
 80235da:	6021      	streq	r1, [r4, #0]
 80235dc:	6063      	str	r3, [r4, #4]
 80235de:	6054      	str	r4, [r2, #4]
 80235e0:	e7cb      	b.n	802357a <_free_r+0x22>
 80235e2:	bd38      	pop	{r3, r4, r5, pc}
 80235e4:	2000c06c 	.word	0x2000c06c

080235e8 <malloc>:
 80235e8:	4b02      	ldr	r3, [pc, #8]	@ (80235f4 <malloc+0xc>)
 80235ea:	4601      	mov	r1, r0
 80235ec:	6818      	ldr	r0, [r3, #0]
 80235ee:	f000 b825 	b.w	802363c <_malloc_r>
 80235f2:	bf00      	nop
 80235f4:	20000134 	.word	0x20000134

080235f8 <sbrk_aligned>:
 80235f8:	b570      	push	{r4, r5, r6, lr}
 80235fa:	4e0f      	ldr	r6, [pc, #60]	@ (8023638 <sbrk_aligned+0x40>)
 80235fc:	460c      	mov	r4, r1
 80235fe:	6831      	ldr	r1, [r6, #0]
 8023600:	4605      	mov	r5, r0
 8023602:	b911      	cbnz	r1, 802360a <sbrk_aligned+0x12>
 8023604:	f001 fb80 	bl	8024d08 <_sbrk_r>
 8023608:	6030      	str	r0, [r6, #0]
 802360a:	4621      	mov	r1, r4
 802360c:	4628      	mov	r0, r5
 802360e:	f001 fb7b 	bl	8024d08 <_sbrk_r>
 8023612:	1c43      	adds	r3, r0, #1
 8023614:	d103      	bne.n	802361e <sbrk_aligned+0x26>
 8023616:	f04f 34ff 	mov.w	r4, #4294967295
 802361a:	4620      	mov	r0, r4
 802361c:	bd70      	pop	{r4, r5, r6, pc}
 802361e:	1cc4      	adds	r4, r0, #3
 8023620:	f024 0403 	bic.w	r4, r4, #3
 8023624:	42a0      	cmp	r0, r4
 8023626:	d0f8      	beq.n	802361a <sbrk_aligned+0x22>
 8023628:	1a21      	subs	r1, r4, r0
 802362a:	4628      	mov	r0, r5
 802362c:	f001 fb6c 	bl	8024d08 <_sbrk_r>
 8023630:	3001      	adds	r0, #1
 8023632:	d1f2      	bne.n	802361a <sbrk_aligned+0x22>
 8023634:	e7ef      	b.n	8023616 <sbrk_aligned+0x1e>
 8023636:	bf00      	nop
 8023638:	2000c068 	.word	0x2000c068

0802363c <_malloc_r>:
 802363c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023640:	1ccd      	adds	r5, r1, #3
 8023642:	f025 0503 	bic.w	r5, r5, #3
 8023646:	3508      	adds	r5, #8
 8023648:	2d0c      	cmp	r5, #12
 802364a:	bf38      	it	cc
 802364c:	250c      	movcc	r5, #12
 802364e:	2d00      	cmp	r5, #0
 8023650:	4606      	mov	r6, r0
 8023652:	db01      	blt.n	8023658 <_malloc_r+0x1c>
 8023654:	42a9      	cmp	r1, r5
 8023656:	d904      	bls.n	8023662 <_malloc_r+0x26>
 8023658:	230c      	movs	r3, #12
 802365a:	6033      	str	r3, [r6, #0]
 802365c:	2000      	movs	r0, #0
 802365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023738 <_malloc_r+0xfc>
 8023666:	f000 f869 	bl	802373c <__malloc_lock>
 802366a:	f8d8 3000 	ldr.w	r3, [r8]
 802366e:	461c      	mov	r4, r3
 8023670:	bb44      	cbnz	r4, 80236c4 <_malloc_r+0x88>
 8023672:	4629      	mov	r1, r5
 8023674:	4630      	mov	r0, r6
 8023676:	f7ff ffbf 	bl	80235f8 <sbrk_aligned>
 802367a:	1c43      	adds	r3, r0, #1
 802367c:	4604      	mov	r4, r0
 802367e:	d158      	bne.n	8023732 <_malloc_r+0xf6>
 8023680:	f8d8 4000 	ldr.w	r4, [r8]
 8023684:	4627      	mov	r7, r4
 8023686:	2f00      	cmp	r7, #0
 8023688:	d143      	bne.n	8023712 <_malloc_r+0xd6>
 802368a:	2c00      	cmp	r4, #0
 802368c:	d04b      	beq.n	8023726 <_malloc_r+0xea>
 802368e:	6823      	ldr	r3, [r4, #0]
 8023690:	4639      	mov	r1, r7
 8023692:	4630      	mov	r0, r6
 8023694:	eb04 0903 	add.w	r9, r4, r3
 8023698:	f001 fb36 	bl	8024d08 <_sbrk_r>
 802369c:	4581      	cmp	r9, r0
 802369e:	d142      	bne.n	8023726 <_malloc_r+0xea>
 80236a0:	6821      	ldr	r1, [r4, #0]
 80236a2:	4630      	mov	r0, r6
 80236a4:	1a6d      	subs	r5, r5, r1
 80236a6:	4629      	mov	r1, r5
 80236a8:	f7ff ffa6 	bl	80235f8 <sbrk_aligned>
 80236ac:	3001      	adds	r0, #1
 80236ae:	d03a      	beq.n	8023726 <_malloc_r+0xea>
 80236b0:	6823      	ldr	r3, [r4, #0]
 80236b2:	442b      	add	r3, r5
 80236b4:	6023      	str	r3, [r4, #0]
 80236b6:	f8d8 3000 	ldr.w	r3, [r8]
 80236ba:	685a      	ldr	r2, [r3, #4]
 80236bc:	bb62      	cbnz	r2, 8023718 <_malloc_r+0xdc>
 80236be:	f8c8 7000 	str.w	r7, [r8]
 80236c2:	e00f      	b.n	80236e4 <_malloc_r+0xa8>
 80236c4:	6822      	ldr	r2, [r4, #0]
 80236c6:	1b52      	subs	r2, r2, r5
 80236c8:	d420      	bmi.n	802370c <_malloc_r+0xd0>
 80236ca:	2a0b      	cmp	r2, #11
 80236cc:	d917      	bls.n	80236fe <_malloc_r+0xc2>
 80236ce:	1961      	adds	r1, r4, r5
 80236d0:	42a3      	cmp	r3, r4
 80236d2:	6025      	str	r5, [r4, #0]
 80236d4:	bf18      	it	ne
 80236d6:	6059      	strne	r1, [r3, #4]
 80236d8:	6863      	ldr	r3, [r4, #4]
 80236da:	bf08      	it	eq
 80236dc:	f8c8 1000 	streq.w	r1, [r8]
 80236e0:	5162      	str	r2, [r4, r5]
 80236e2:	604b      	str	r3, [r1, #4]
 80236e4:	4630      	mov	r0, r6
 80236e6:	f000 f82f 	bl	8023748 <__malloc_unlock>
 80236ea:	f104 000b 	add.w	r0, r4, #11
 80236ee:	1d23      	adds	r3, r4, #4
 80236f0:	f020 0007 	bic.w	r0, r0, #7
 80236f4:	1ac2      	subs	r2, r0, r3
 80236f6:	bf1c      	itt	ne
 80236f8:	1a1b      	subne	r3, r3, r0
 80236fa:	50a3      	strne	r3, [r4, r2]
 80236fc:	e7af      	b.n	802365e <_malloc_r+0x22>
 80236fe:	6862      	ldr	r2, [r4, #4]
 8023700:	42a3      	cmp	r3, r4
 8023702:	bf0c      	ite	eq
 8023704:	f8c8 2000 	streq.w	r2, [r8]
 8023708:	605a      	strne	r2, [r3, #4]
 802370a:	e7eb      	b.n	80236e4 <_malloc_r+0xa8>
 802370c:	4623      	mov	r3, r4
 802370e:	6864      	ldr	r4, [r4, #4]
 8023710:	e7ae      	b.n	8023670 <_malloc_r+0x34>
 8023712:	463c      	mov	r4, r7
 8023714:	687f      	ldr	r7, [r7, #4]
 8023716:	e7b6      	b.n	8023686 <_malloc_r+0x4a>
 8023718:	461a      	mov	r2, r3
 802371a:	685b      	ldr	r3, [r3, #4]
 802371c:	42a3      	cmp	r3, r4
 802371e:	d1fb      	bne.n	8023718 <_malloc_r+0xdc>
 8023720:	2300      	movs	r3, #0
 8023722:	6053      	str	r3, [r2, #4]
 8023724:	e7de      	b.n	80236e4 <_malloc_r+0xa8>
 8023726:	230c      	movs	r3, #12
 8023728:	4630      	mov	r0, r6
 802372a:	6033      	str	r3, [r6, #0]
 802372c:	f000 f80c 	bl	8023748 <__malloc_unlock>
 8023730:	e794      	b.n	802365c <_malloc_r+0x20>
 8023732:	6005      	str	r5, [r0, #0]
 8023734:	e7d6      	b.n	80236e4 <_malloc_r+0xa8>
 8023736:	bf00      	nop
 8023738:	2000c06c 	.word	0x2000c06c

0802373c <__malloc_lock>:
 802373c:	4801      	ldr	r0, [pc, #4]	@ (8023744 <__malloc_lock+0x8>)
 802373e:	f7ff b870 	b.w	8022822 <__retarget_lock_acquire_recursive>
 8023742:	bf00      	nop
 8023744:	2000c064 	.word	0x2000c064

08023748 <__malloc_unlock>:
 8023748:	4801      	ldr	r0, [pc, #4]	@ (8023750 <__malloc_unlock+0x8>)
 802374a:	f7ff b86b 	b.w	8022824 <__retarget_lock_release_recursive>
 802374e:	bf00      	nop
 8023750:	2000c064 	.word	0x2000c064

08023754 <_Balloc>:
 8023754:	b570      	push	{r4, r5, r6, lr}
 8023756:	69c6      	ldr	r6, [r0, #28]
 8023758:	4604      	mov	r4, r0
 802375a:	460d      	mov	r5, r1
 802375c:	b976      	cbnz	r6, 802377c <_Balloc+0x28>
 802375e:	2010      	movs	r0, #16
 8023760:	f7ff ff42 	bl	80235e8 <malloc>
 8023764:	4602      	mov	r2, r0
 8023766:	61e0      	str	r0, [r4, #28]
 8023768:	b920      	cbnz	r0, 8023774 <_Balloc+0x20>
 802376a:	216b      	movs	r1, #107	@ 0x6b
 802376c:	4b17      	ldr	r3, [pc, #92]	@ (80237cc <_Balloc+0x78>)
 802376e:	4818      	ldr	r0, [pc, #96]	@ (80237d0 <_Balloc+0x7c>)
 8023770:	f7ff f876 	bl	8022860 <__assert_func>
 8023774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023778:	6006      	str	r6, [r0, #0]
 802377a:	60c6      	str	r6, [r0, #12]
 802377c:	69e6      	ldr	r6, [r4, #28]
 802377e:	68f3      	ldr	r3, [r6, #12]
 8023780:	b183      	cbz	r3, 80237a4 <_Balloc+0x50>
 8023782:	69e3      	ldr	r3, [r4, #28]
 8023784:	68db      	ldr	r3, [r3, #12]
 8023786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802378a:	b9b8      	cbnz	r0, 80237bc <_Balloc+0x68>
 802378c:	2101      	movs	r1, #1
 802378e:	fa01 f605 	lsl.w	r6, r1, r5
 8023792:	1d72      	adds	r2, r6, #5
 8023794:	4620      	mov	r0, r4
 8023796:	0092      	lsls	r2, r2, #2
 8023798:	f001 facd 	bl	8024d36 <_calloc_r>
 802379c:	b160      	cbz	r0, 80237b8 <_Balloc+0x64>
 802379e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80237a2:	e00e      	b.n	80237c2 <_Balloc+0x6e>
 80237a4:	2221      	movs	r2, #33	@ 0x21
 80237a6:	2104      	movs	r1, #4
 80237a8:	4620      	mov	r0, r4
 80237aa:	f001 fac4 	bl	8024d36 <_calloc_r>
 80237ae:	69e3      	ldr	r3, [r4, #28]
 80237b0:	60f0      	str	r0, [r6, #12]
 80237b2:	68db      	ldr	r3, [r3, #12]
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d1e4      	bne.n	8023782 <_Balloc+0x2e>
 80237b8:	2000      	movs	r0, #0
 80237ba:	bd70      	pop	{r4, r5, r6, pc}
 80237bc:	6802      	ldr	r2, [r0, #0]
 80237be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80237c2:	2300      	movs	r3, #0
 80237c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80237c8:	e7f7      	b.n	80237ba <_Balloc+0x66>
 80237ca:	bf00      	nop
 80237cc:	08032ee6 	.word	0x08032ee6
 80237d0:	08033039 	.word	0x08033039

080237d4 <_Bfree>:
 80237d4:	b570      	push	{r4, r5, r6, lr}
 80237d6:	69c6      	ldr	r6, [r0, #28]
 80237d8:	4605      	mov	r5, r0
 80237da:	460c      	mov	r4, r1
 80237dc:	b976      	cbnz	r6, 80237fc <_Bfree+0x28>
 80237de:	2010      	movs	r0, #16
 80237e0:	f7ff ff02 	bl	80235e8 <malloc>
 80237e4:	4602      	mov	r2, r0
 80237e6:	61e8      	str	r0, [r5, #28]
 80237e8:	b920      	cbnz	r0, 80237f4 <_Bfree+0x20>
 80237ea:	218f      	movs	r1, #143	@ 0x8f
 80237ec:	4b08      	ldr	r3, [pc, #32]	@ (8023810 <_Bfree+0x3c>)
 80237ee:	4809      	ldr	r0, [pc, #36]	@ (8023814 <_Bfree+0x40>)
 80237f0:	f7ff f836 	bl	8022860 <__assert_func>
 80237f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80237f8:	6006      	str	r6, [r0, #0]
 80237fa:	60c6      	str	r6, [r0, #12]
 80237fc:	b13c      	cbz	r4, 802380e <_Bfree+0x3a>
 80237fe:	69eb      	ldr	r3, [r5, #28]
 8023800:	6862      	ldr	r2, [r4, #4]
 8023802:	68db      	ldr	r3, [r3, #12]
 8023804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023808:	6021      	str	r1, [r4, #0]
 802380a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802380e:	bd70      	pop	{r4, r5, r6, pc}
 8023810:	08032ee6 	.word	0x08032ee6
 8023814:	08033039 	.word	0x08033039

08023818 <__multadd>:
 8023818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802381c:	4607      	mov	r7, r0
 802381e:	460c      	mov	r4, r1
 8023820:	461e      	mov	r6, r3
 8023822:	2000      	movs	r0, #0
 8023824:	690d      	ldr	r5, [r1, #16]
 8023826:	f101 0c14 	add.w	ip, r1, #20
 802382a:	f8dc 3000 	ldr.w	r3, [ip]
 802382e:	3001      	adds	r0, #1
 8023830:	b299      	uxth	r1, r3
 8023832:	fb02 6101 	mla	r1, r2, r1, r6
 8023836:	0c1e      	lsrs	r6, r3, #16
 8023838:	0c0b      	lsrs	r3, r1, #16
 802383a:	fb02 3306 	mla	r3, r2, r6, r3
 802383e:	b289      	uxth	r1, r1
 8023840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023844:	4285      	cmp	r5, r0
 8023846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802384a:	f84c 1b04 	str.w	r1, [ip], #4
 802384e:	dcec      	bgt.n	802382a <__multadd+0x12>
 8023850:	b30e      	cbz	r6, 8023896 <__multadd+0x7e>
 8023852:	68a3      	ldr	r3, [r4, #8]
 8023854:	42ab      	cmp	r3, r5
 8023856:	dc19      	bgt.n	802388c <__multadd+0x74>
 8023858:	6861      	ldr	r1, [r4, #4]
 802385a:	4638      	mov	r0, r7
 802385c:	3101      	adds	r1, #1
 802385e:	f7ff ff79 	bl	8023754 <_Balloc>
 8023862:	4680      	mov	r8, r0
 8023864:	b928      	cbnz	r0, 8023872 <__multadd+0x5a>
 8023866:	4602      	mov	r2, r0
 8023868:	21ba      	movs	r1, #186	@ 0xba
 802386a:	4b0c      	ldr	r3, [pc, #48]	@ (802389c <__multadd+0x84>)
 802386c:	480c      	ldr	r0, [pc, #48]	@ (80238a0 <__multadd+0x88>)
 802386e:	f7fe fff7 	bl	8022860 <__assert_func>
 8023872:	6922      	ldr	r2, [r4, #16]
 8023874:	f104 010c 	add.w	r1, r4, #12
 8023878:	3202      	adds	r2, #2
 802387a:	0092      	lsls	r2, r2, #2
 802387c:	300c      	adds	r0, #12
 802387e:	f7fe ffe0 	bl	8022842 <memcpy>
 8023882:	4621      	mov	r1, r4
 8023884:	4638      	mov	r0, r7
 8023886:	f7ff ffa5 	bl	80237d4 <_Bfree>
 802388a:	4644      	mov	r4, r8
 802388c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023890:	3501      	adds	r5, #1
 8023892:	615e      	str	r6, [r3, #20]
 8023894:	6125      	str	r5, [r4, #16]
 8023896:	4620      	mov	r0, r4
 8023898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802389c:	08033028 	.word	0x08033028
 80238a0:	08033039 	.word	0x08033039

080238a4 <__hi0bits>:
 80238a4:	4603      	mov	r3, r0
 80238a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80238aa:	bf3a      	itte	cc
 80238ac:	0403      	lslcc	r3, r0, #16
 80238ae:	2010      	movcc	r0, #16
 80238b0:	2000      	movcs	r0, #0
 80238b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80238b6:	bf3c      	itt	cc
 80238b8:	021b      	lslcc	r3, r3, #8
 80238ba:	3008      	addcc	r0, #8
 80238bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80238c0:	bf3c      	itt	cc
 80238c2:	011b      	lslcc	r3, r3, #4
 80238c4:	3004      	addcc	r0, #4
 80238c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80238ca:	bf3c      	itt	cc
 80238cc:	009b      	lslcc	r3, r3, #2
 80238ce:	3002      	addcc	r0, #2
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	db05      	blt.n	80238e0 <__hi0bits+0x3c>
 80238d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80238d8:	f100 0001 	add.w	r0, r0, #1
 80238dc:	bf08      	it	eq
 80238de:	2020      	moveq	r0, #32
 80238e0:	4770      	bx	lr

080238e2 <__lo0bits>:
 80238e2:	6803      	ldr	r3, [r0, #0]
 80238e4:	4602      	mov	r2, r0
 80238e6:	f013 0007 	ands.w	r0, r3, #7
 80238ea:	d00b      	beq.n	8023904 <__lo0bits+0x22>
 80238ec:	07d9      	lsls	r1, r3, #31
 80238ee:	d421      	bmi.n	8023934 <__lo0bits+0x52>
 80238f0:	0798      	lsls	r0, r3, #30
 80238f2:	bf49      	itett	mi
 80238f4:	085b      	lsrmi	r3, r3, #1
 80238f6:	089b      	lsrpl	r3, r3, #2
 80238f8:	2001      	movmi	r0, #1
 80238fa:	6013      	strmi	r3, [r2, #0]
 80238fc:	bf5c      	itt	pl
 80238fe:	2002      	movpl	r0, #2
 8023900:	6013      	strpl	r3, [r2, #0]
 8023902:	4770      	bx	lr
 8023904:	b299      	uxth	r1, r3
 8023906:	b909      	cbnz	r1, 802390c <__lo0bits+0x2a>
 8023908:	2010      	movs	r0, #16
 802390a:	0c1b      	lsrs	r3, r3, #16
 802390c:	b2d9      	uxtb	r1, r3
 802390e:	b909      	cbnz	r1, 8023914 <__lo0bits+0x32>
 8023910:	3008      	adds	r0, #8
 8023912:	0a1b      	lsrs	r3, r3, #8
 8023914:	0719      	lsls	r1, r3, #28
 8023916:	bf04      	itt	eq
 8023918:	091b      	lsreq	r3, r3, #4
 802391a:	3004      	addeq	r0, #4
 802391c:	0799      	lsls	r1, r3, #30
 802391e:	bf04      	itt	eq
 8023920:	089b      	lsreq	r3, r3, #2
 8023922:	3002      	addeq	r0, #2
 8023924:	07d9      	lsls	r1, r3, #31
 8023926:	d403      	bmi.n	8023930 <__lo0bits+0x4e>
 8023928:	085b      	lsrs	r3, r3, #1
 802392a:	f100 0001 	add.w	r0, r0, #1
 802392e:	d003      	beq.n	8023938 <__lo0bits+0x56>
 8023930:	6013      	str	r3, [r2, #0]
 8023932:	4770      	bx	lr
 8023934:	2000      	movs	r0, #0
 8023936:	4770      	bx	lr
 8023938:	2020      	movs	r0, #32
 802393a:	4770      	bx	lr

0802393c <__i2b>:
 802393c:	b510      	push	{r4, lr}
 802393e:	460c      	mov	r4, r1
 8023940:	2101      	movs	r1, #1
 8023942:	f7ff ff07 	bl	8023754 <_Balloc>
 8023946:	4602      	mov	r2, r0
 8023948:	b928      	cbnz	r0, 8023956 <__i2b+0x1a>
 802394a:	f240 1145 	movw	r1, #325	@ 0x145
 802394e:	4b04      	ldr	r3, [pc, #16]	@ (8023960 <__i2b+0x24>)
 8023950:	4804      	ldr	r0, [pc, #16]	@ (8023964 <__i2b+0x28>)
 8023952:	f7fe ff85 	bl	8022860 <__assert_func>
 8023956:	2301      	movs	r3, #1
 8023958:	6144      	str	r4, [r0, #20]
 802395a:	6103      	str	r3, [r0, #16]
 802395c:	bd10      	pop	{r4, pc}
 802395e:	bf00      	nop
 8023960:	08033028 	.word	0x08033028
 8023964:	08033039 	.word	0x08033039

08023968 <__multiply>:
 8023968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802396c:	4617      	mov	r7, r2
 802396e:	690a      	ldr	r2, [r1, #16]
 8023970:	693b      	ldr	r3, [r7, #16]
 8023972:	4689      	mov	r9, r1
 8023974:	429a      	cmp	r2, r3
 8023976:	bfa2      	ittt	ge
 8023978:	463b      	movge	r3, r7
 802397a:	460f      	movge	r7, r1
 802397c:	4699      	movge	r9, r3
 802397e:	693d      	ldr	r5, [r7, #16]
 8023980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023984:	68bb      	ldr	r3, [r7, #8]
 8023986:	6879      	ldr	r1, [r7, #4]
 8023988:	eb05 060a 	add.w	r6, r5, sl
 802398c:	42b3      	cmp	r3, r6
 802398e:	b085      	sub	sp, #20
 8023990:	bfb8      	it	lt
 8023992:	3101      	addlt	r1, #1
 8023994:	f7ff fede 	bl	8023754 <_Balloc>
 8023998:	b930      	cbnz	r0, 80239a8 <__multiply+0x40>
 802399a:	4602      	mov	r2, r0
 802399c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80239a0:	4b40      	ldr	r3, [pc, #256]	@ (8023aa4 <__multiply+0x13c>)
 80239a2:	4841      	ldr	r0, [pc, #260]	@ (8023aa8 <__multiply+0x140>)
 80239a4:	f7fe ff5c 	bl	8022860 <__assert_func>
 80239a8:	f100 0414 	add.w	r4, r0, #20
 80239ac:	4623      	mov	r3, r4
 80239ae:	2200      	movs	r2, #0
 80239b0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80239b4:	4573      	cmp	r3, lr
 80239b6:	d320      	bcc.n	80239fa <__multiply+0x92>
 80239b8:	f107 0814 	add.w	r8, r7, #20
 80239bc:	f109 0114 	add.w	r1, r9, #20
 80239c0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80239c4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80239c8:	9302      	str	r3, [sp, #8]
 80239ca:	1beb      	subs	r3, r5, r7
 80239cc:	3b15      	subs	r3, #21
 80239ce:	f023 0303 	bic.w	r3, r3, #3
 80239d2:	3304      	adds	r3, #4
 80239d4:	3715      	adds	r7, #21
 80239d6:	42bd      	cmp	r5, r7
 80239d8:	bf38      	it	cc
 80239da:	2304      	movcc	r3, #4
 80239dc:	9301      	str	r3, [sp, #4]
 80239de:	9b02      	ldr	r3, [sp, #8]
 80239e0:	9103      	str	r1, [sp, #12]
 80239e2:	428b      	cmp	r3, r1
 80239e4:	d80c      	bhi.n	8023a00 <__multiply+0x98>
 80239e6:	2e00      	cmp	r6, #0
 80239e8:	dd03      	ble.n	80239f2 <__multiply+0x8a>
 80239ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	d055      	beq.n	8023a9e <__multiply+0x136>
 80239f2:	6106      	str	r6, [r0, #16]
 80239f4:	b005      	add	sp, #20
 80239f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239fa:	f843 2b04 	str.w	r2, [r3], #4
 80239fe:	e7d9      	b.n	80239b4 <__multiply+0x4c>
 8023a00:	f8b1 a000 	ldrh.w	sl, [r1]
 8023a04:	f1ba 0f00 	cmp.w	sl, #0
 8023a08:	d01f      	beq.n	8023a4a <__multiply+0xe2>
 8023a0a:	46c4      	mov	ip, r8
 8023a0c:	46a1      	mov	r9, r4
 8023a0e:	2700      	movs	r7, #0
 8023a10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8023a14:	f8d9 3000 	ldr.w	r3, [r9]
 8023a18:	fa1f fb82 	uxth.w	fp, r2
 8023a1c:	b29b      	uxth	r3, r3
 8023a1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8023a22:	443b      	add	r3, r7
 8023a24:	f8d9 7000 	ldr.w	r7, [r9]
 8023a28:	0c12      	lsrs	r2, r2, #16
 8023a2a:	0c3f      	lsrs	r7, r7, #16
 8023a2c:	fb0a 7202 	mla	r2, sl, r2, r7
 8023a30:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8023a34:	b29b      	uxth	r3, r3
 8023a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023a3a:	4565      	cmp	r5, ip
 8023a3c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8023a40:	f849 3b04 	str.w	r3, [r9], #4
 8023a44:	d8e4      	bhi.n	8023a10 <__multiply+0xa8>
 8023a46:	9b01      	ldr	r3, [sp, #4]
 8023a48:	50e7      	str	r7, [r4, r3]
 8023a4a:	9b03      	ldr	r3, [sp, #12]
 8023a4c:	3104      	adds	r1, #4
 8023a4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8023a52:	f1b9 0f00 	cmp.w	r9, #0
 8023a56:	d020      	beq.n	8023a9a <__multiply+0x132>
 8023a58:	4647      	mov	r7, r8
 8023a5a:	46a4      	mov	ip, r4
 8023a5c:	f04f 0a00 	mov.w	sl, #0
 8023a60:	6823      	ldr	r3, [r4, #0]
 8023a62:	f8b7 b000 	ldrh.w	fp, [r7]
 8023a66:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8023a6a:	b29b      	uxth	r3, r3
 8023a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8023a70:	4452      	add	r2, sl
 8023a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023a76:	f84c 3b04 	str.w	r3, [ip], #4
 8023a7a:	f857 3b04 	ldr.w	r3, [r7], #4
 8023a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023a82:	f8bc 3000 	ldrh.w	r3, [ip]
 8023a86:	42bd      	cmp	r5, r7
 8023a88:	fb09 330a 	mla	r3, r9, sl, r3
 8023a8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8023a90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023a94:	d8e5      	bhi.n	8023a62 <__multiply+0xfa>
 8023a96:	9a01      	ldr	r2, [sp, #4]
 8023a98:	50a3      	str	r3, [r4, r2]
 8023a9a:	3404      	adds	r4, #4
 8023a9c:	e79f      	b.n	80239de <__multiply+0x76>
 8023a9e:	3e01      	subs	r6, #1
 8023aa0:	e7a1      	b.n	80239e6 <__multiply+0x7e>
 8023aa2:	bf00      	nop
 8023aa4:	08033028 	.word	0x08033028
 8023aa8:	08033039 	.word	0x08033039

08023aac <__pow5mult>:
 8023aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023ab0:	4615      	mov	r5, r2
 8023ab2:	f012 0203 	ands.w	r2, r2, #3
 8023ab6:	4607      	mov	r7, r0
 8023ab8:	460e      	mov	r6, r1
 8023aba:	d007      	beq.n	8023acc <__pow5mult+0x20>
 8023abc:	4c25      	ldr	r4, [pc, #148]	@ (8023b54 <__pow5mult+0xa8>)
 8023abe:	3a01      	subs	r2, #1
 8023ac0:	2300      	movs	r3, #0
 8023ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023ac6:	f7ff fea7 	bl	8023818 <__multadd>
 8023aca:	4606      	mov	r6, r0
 8023acc:	10ad      	asrs	r5, r5, #2
 8023ace:	d03d      	beq.n	8023b4c <__pow5mult+0xa0>
 8023ad0:	69fc      	ldr	r4, [r7, #28]
 8023ad2:	b97c      	cbnz	r4, 8023af4 <__pow5mult+0x48>
 8023ad4:	2010      	movs	r0, #16
 8023ad6:	f7ff fd87 	bl	80235e8 <malloc>
 8023ada:	4602      	mov	r2, r0
 8023adc:	61f8      	str	r0, [r7, #28]
 8023ade:	b928      	cbnz	r0, 8023aec <__pow5mult+0x40>
 8023ae0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8023ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8023b58 <__pow5mult+0xac>)
 8023ae6:	481d      	ldr	r0, [pc, #116]	@ (8023b5c <__pow5mult+0xb0>)
 8023ae8:	f7fe feba 	bl	8022860 <__assert_func>
 8023aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023af0:	6004      	str	r4, [r0, #0]
 8023af2:	60c4      	str	r4, [r0, #12]
 8023af4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8023af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023afc:	b94c      	cbnz	r4, 8023b12 <__pow5mult+0x66>
 8023afe:	f240 2171 	movw	r1, #625	@ 0x271
 8023b02:	4638      	mov	r0, r7
 8023b04:	f7ff ff1a 	bl	802393c <__i2b>
 8023b08:	2300      	movs	r3, #0
 8023b0a:	4604      	mov	r4, r0
 8023b0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8023b10:	6003      	str	r3, [r0, #0]
 8023b12:	f04f 0900 	mov.w	r9, #0
 8023b16:	07eb      	lsls	r3, r5, #31
 8023b18:	d50a      	bpl.n	8023b30 <__pow5mult+0x84>
 8023b1a:	4631      	mov	r1, r6
 8023b1c:	4622      	mov	r2, r4
 8023b1e:	4638      	mov	r0, r7
 8023b20:	f7ff ff22 	bl	8023968 <__multiply>
 8023b24:	4680      	mov	r8, r0
 8023b26:	4631      	mov	r1, r6
 8023b28:	4638      	mov	r0, r7
 8023b2a:	f7ff fe53 	bl	80237d4 <_Bfree>
 8023b2e:	4646      	mov	r6, r8
 8023b30:	106d      	asrs	r5, r5, #1
 8023b32:	d00b      	beq.n	8023b4c <__pow5mult+0xa0>
 8023b34:	6820      	ldr	r0, [r4, #0]
 8023b36:	b938      	cbnz	r0, 8023b48 <__pow5mult+0x9c>
 8023b38:	4622      	mov	r2, r4
 8023b3a:	4621      	mov	r1, r4
 8023b3c:	4638      	mov	r0, r7
 8023b3e:	f7ff ff13 	bl	8023968 <__multiply>
 8023b42:	6020      	str	r0, [r4, #0]
 8023b44:	f8c0 9000 	str.w	r9, [r0]
 8023b48:	4604      	mov	r4, r0
 8023b4a:	e7e4      	b.n	8023b16 <__pow5mult+0x6a>
 8023b4c:	4630      	mov	r0, r6
 8023b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023b52:	bf00      	nop
 8023b54:	080331cc 	.word	0x080331cc
 8023b58:	08032ee6 	.word	0x08032ee6
 8023b5c:	08033039 	.word	0x08033039

08023b60 <__lshift>:
 8023b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b64:	460c      	mov	r4, r1
 8023b66:	4607      	mov	r7, r0
 8023b68:	4691      	mov	r9, r2
 8023b6a:	6923      	ldr	r3, [r4, #16]
 8023b6c:	6849      	ldr	r1, [r1, #4]
 8023b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023b72:	68a3      	ldr	r3, [r4, #8]
 8023b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023b78:	f108 0601 	add.w	r6, r8, #1
 8023b7c:	42b3      	cmp	r3, r6
 8023b7e:	db0b      	blt.n	8023b98 <__lshift+0x38>
 8023b80:	4638      	mov	r0, r7
 8023b82:	f7ff fde7 	bl	8023754 <_Balloc>
 8023b86:	4605      	mov	r5, r0
 8023b88:	b948      	cbnz	r0, 8023b9e <__lshift+0x3e>
 8023b8a:	4602      	mov	r2, r0
 8023b8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023b90:	4b27      	ldr	r3, [pc, #156]	@ (8023c30 <__lshift+0xd0>)
 8023b92:	4828      	ldr	r0, [pc, #160]	@ (8023c34 <__lshift+0xd4>)
 8023b94:	f7fe fe64 	bl	8022860 <__assert_func>
 8023b98:	3101      	adds	r1, #1
 8023b9a:	005b      	lsls	r3, r3, #1
 8023b9c:	e7ee      	b.n	8023b7c <__lshift+0x1c>
 8023b9e:	2300      	movs	r3, #0
 8023ba0:	f100 0114 	add.w	r1, r0, #20
 8023ba4:	f100 0210 	add.w	r2, r0, #16
 8023ba8:	4618      	mov	r0, r3
 8023baa:	4553      	cmp	r3, sl
 8023bac:	db33      	blt.n	8023c16 <__lshift+0xb6>
 8023bae:	6920      	ldr	r0, [r4, #16]
 8023bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023bb4:	f104 0314 	add.w	r3, r4, #20
 8023bb8:	f019 091f 	ands.w	r9, r9, #31
 8023bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023bc4:	d02b      	beq.n	8023c1e <__lshift+0xbe>
 8023bc6:	468a      	mov	sl, r1
 8023bc8:	2200      	movs	r2, #0
 8023bca:	f1c9 0e20 	rsb	lr, r9, #32
 8023bce:	6818      	ldr	r0, [r3, #0]
 8023bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8023bd4:	4310      	orrs	r0, r2
 8023bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8023bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8023bde:	459c      	cmp	ip, r3
 8023be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8023be4:	d8f3      	bhi.n	8023bce <__lshift+0x6e>
 8023be6:	ebac 0304 	sub.w	r3, ip, r4
 8023bea:	3b15      	subs	r3, #21
 8023bec:	f023 0303 	bic.w	r3, r3, #3
 8023bf0:	3304      	adds	r3, #4
 8023bf2:	f104 0015 	add.w	r0, r4, #21
 8023bf6:	4560      	cmp	r0, ip
 8023bf8:	bf88      	it	hi
 8023bfa:	2304      	movhi	r3, #4
 8023bfc:	50ca      	str	r2, [r1, r3]
 8023bfe:	b10a      	cbz	r2, 8023c04 <__lshift+0xa4>
 8023c00:	f108 0602 	add.w	r6, r8, #2
 8023c04:	3e01      	subs	r6, #1
 8023c06:	4638      	mov	r0, r7
 8023c08:	4621      	mov	r1, r4
 8023c0a:	612e      	str	r6, [r5, #16]
 8023c0c:	f7ff fde2 	bl	80237d4 <_Bfree>
 8023c10:	4628      	mov	r0, r5
 8023c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8023c1a:	3301      	adds	r3, #1
 8023c1c:	e7c5      	b.n	8023baa <__lshift+0x4a>
 8023c1e:	3904      	subs	r1, #4
 8023c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8023c24:	459c      	cmp	ip, r3
 8023c26:	f841 2f04 	str.w	r2, [r1, #4]!
 8023c2a:	d8f9      	bhi.n	8023c20 <__lshift+0xc0>
 8023c2c:	e7ea      	b.n	8023c04 <__lshift+0xa4>
 8023c2e:	bf00      	nop
 8023c30:	08033028 	.word	0x08033028
 8023c34:	08033039 	.word	0x08033039

08023c38 <__mcmp>:
 8023c38:	4603      	mov	r3, r0
 8023c3a:	690a      	ldr	r2, [r1, #16]
 8023c3c:	6900      	ldr	r0, [r0, #16]
 8023c3e:	b530      	push	{r4, r5, lr}
 8023c40:	1a80      	subs	r0, r0, r2
 8023c42:	d10e      	bne.n	8023c62 <__mcmp+0x2a>
 8023c44:	3314      	adds	r3, #20
 8023c46:	3114      	adds	r1, #20
 8023c48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023c4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023c50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023c54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023c58:	4295      	cmp	r5, r2
 8023c5a:	d003      	beq.n	8023c64 <__mcmp+0x2c>
 8023c5c:	d205      	bcs.n	8023c6a <__mcmp+0x32>
 8023c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c62:	bd30      	pop	{r4, r5, pc}
 8023c64:	42a3      	cmp	r3, r4
 8023c66:	d3f3      	bcc.n	8023c50 <__mcmp+0x18>
 8023c68:	e7fb      	b.n	8023c62 <__mcmp+0x2a>
 8023c6a:	2001      	movs	r0, #1
 8023c6c:	e7f9      	b.n	8023c62 <__mcmp+0x2a>
	...

08023c70 <__mdiff>:
 8023c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c74:	4689      	mov	r9, r1
 8023c76:	4606      	mov	r6, r0
 8023c78:	4611      	mov	r1, r2
 8023c7a:	4648      	mov	r0, r9
 8023c7c:	4614      	mov	r4, r2
 8023c7e:	f7ff ffdb 	bl	8023c38 <__mcmp>
 8023c82:	1e05      	subs	r5, r0, #0
 8023c84:	d112      	bne.n	8023cac <__mdiff+0x3c>
 8023c86:	4629      	mov	r1, r5
 8023c88:	4630      	mov	r0, r6
 8023c8a:	f7ff fd63 	bl	8023754 <_Balloc>
 8023c8e:	4602      	mov	r2, r0
 8023c90:	b928      	cbnz	r0, 8023c9e <__mdiff+0x2e>
 8023c92:	f240 2137 	movw	r1, #567	@ 0x237
 8023c96:	4b3e      	ldr	r3, [pc, #248]	@ (8023d90 <__mdiff+0x120>)
 8023c98:	483e      	ldr	r0, [pc, #248]	@ (8023d94 <__mdiff+0x124>)
 8023c9a:	f7fe fde1 	bl	8022860 <__assert_func>
 8023c9e:	2301      	movs	r3, #1
 8023ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023ca4:	4610      	mov	r0, r2
 8023ca6:	b003      	add	sp, #12
 8023ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cac:	bfbc      	itt	lt
 8023cae:	464b      	movlt	r3, r9
 8023cb0:	46a1      	movlt	r9, r4
 8023cb2:	4630      	mov	r0, r6
 8023cb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023cb8:	bfba      	itte	lt
 8023cba:	461c      	movlt	r4, r3
 8023cbc:	2501      	movlt	r5, #1
 8023cbe:	2500      	movge	r5, #0
 8023cc0:	f7ff fd48 	bl	8023754 <_Balloc>
 8023cc4:	4602      	mov	r2, r0
 8023cc6:	b918      	cbnz	r0, 8023cd0 <__mdiff+0x60>
 8023cc8:	f240 2145 	movw	r1, #581	@ 0x245
 8023ccc:	4b30      	ldr	r3, [pc, #192]	@ (8023d90 <__mdiff+0x120>)
 8023cce:	e7e3      	b.n	8023c98 <__mdiff+0x28>
 8023cd0:	f100 0b14 	add.w	fp, r0, #20
 8023cd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023cd8:	f109 0310 	add.w	r3, r9, #16
 8023cdc:	60c5      	str	r5, [r0, #12]
 8023cde:	f04f 0c00 	mov.w	ip, #0
 8023ce2:	f109 0514 	add.w	r5, r9, #20
 8023ce6:	46d9      	mov	r9, fp
 8023ce8:	6926      	ldr	r6, [r4, #16]
 8023cea:	f104 0e14 	add.w	lr, r4, #20
 8023cee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8023cf2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8023cf6:	9301      	str	r3, [sp, #4]
 8023cf8:	9b01      	ldr	r3, [sp, #4]
 8023cfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8023cfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8023d02:	b281      	uxth	r1, r0
 8023d04:	9301      	str	r3, [sp, #4]
 8023d06:	fa1f f38a 	uxth.w	r3, sl
 8023d0a:	1a5b      	subs	r3, r3, r1
 8023d0c:	0c00      	lsrs	r0, r0, #16
 8023d0e:	4463      	add	r3, ip
 8023d10:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8023d14:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8023d18:	b29b      	uxth	r3, r3
 8023d1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023d1e:	4576      	cmp	r6, lr
 8023d20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023d24:	f849 3b04 	str.w	r3, [r9], #4
 8023d28:	d8e6      	bhi.n	8023cf8 <__mdiff+0x88>
 8023d2a:	1b33      	subs	r3, r6, r4
 8023d2c:	3b15      	subs	r3, #21
 8023d2e:	f023 0303 	bic.w	r3, r3, #3
 8023d32:	3415      	adds	r4, #21
 8023d34:	3304      	adds	r3, #4
 8023d36:	42a6      	cmp	r6, r4
 8023d38:	bf38      	it	cc
 8023d3a:	2304      	movcc	r3, #4
 8023d3c:	441d      	add	r5, r3
 8023d3e:	445b      	add	r3, fp
 8023d40:	461e      	mov	r6, r3
 8023d42:	462c      	mov	r4, r5
 8023d44:	4544      	cmp	r4, r8
 8023d46:	d30e      	bcc.n	8023d66 <__mdiff+0xf6>
 8023d48:	f108 0103 	add.w	r1, r8, #3
 8023d4c:	1b49      	subs	r1, r1, r5
 8023d4e:	f021 0103 	bic.w	r1, r1, #3
 8023d52:	3d03      	subs	r5, #3
 8023d54:	45a8      	cmp	r8, r5
 8023d56:	bf38      	it	cc
 8023d58:	2100      	movcc	r1, #0
 8023d5a:	440b      	add	r3, r1
 8023d5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023d60:	b199      	cbz	r1, 8023d8a <__mdiff+0x11a>
 8023d62:	6117      	str	r7, [r2, #16]
 8023d64:	e79e      	b.n	8023ca4 <__mdiff+0x34>
 8023d66:	46e6      	mov	lr, ip
 8023d68:	f854 1b04 	ldr.w	r1, [r4], #4
 8023d6c:	fa1f fc81 	uxth.w	ip, r1
 8023d70:	44f4      	add	ip, lr
 8023d72:	0c08      	lsrs	r0, r1, #16
 8023d74:	4471      	add	r1, lr
 8023d76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8023d7a:	b289      	uxth	r1, r1
 8023d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8023d80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023d84:	f846 1b04 	str.w	r1, [r6], #4
 8023d88:	e7dc      	b.n	8023d44 <__mdiff+0xd4>
 8023d8a:	3f01      	subs	r7, #1
 8023d8c:	e7e6      	b.n	8023d5c <__mdiff+0xec>
 8023d8e:	bf00      	nop
 8023d90:	08033028 	.word	0x08033028
 8023d94:	08033039 	.word	0x08033039

08023d98 <__d2b>:
 8023d98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8023d9c:	2101      	movs	r1, #1
 8023d9e:	4690      	mov	r8, r2
 8023da0:	4699      	mov	r9, r3
 8023da2:	9e08      	ldr	r6, [sp, #32]
 8023da4:	f7ff fcd6 	bl	8023754 <_Balloc>
 8023da8:	4604      	mov	r4, r0
 8023daa:	b930      	cbnz	r0, 8023dba <__d2b+0x22>
 8023dac:	4602      	mov	r2, r0
 8023dae:	f240 310f 	movw	r1, #783	@ 0x30f
 8023db2:	4b23      	ldr	r3, [pc, #140]	@ (8023e40 <__d2b+0xa8>)
 8023db4:	4823      	ldr	r0, [pc, #140]	@ (8023e44 <__d2b+0xac>)
 8023db6:	f7fe fd53 	bl	8022860 <__assert_func>
 8023dba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023dbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023dc2:	b10d      	cbz	r5, 8023dc8 <__d2b+0x30>
 8023dc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023dc8:	9301      	str	r3, [sp, #4]
 8023dca:	f1b8 0300 	subs.w	r3, r8, #0
 8023dce:	d024      	beq.n	8023e1a <__d2b+0x82>
 8023dd0:	4668      	mov	r0, sp
 8023dd2:	9300      	str	r3, [sp, #0]
 8023dd4:	f7ff fd85 	bl	80238e2 <__lo0bits>
 8023dd8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023ddc:	b1d8      	cbz	r0, 8023e16 <__d2b+0x7e>
 8023dde:	f1c0 0320 	rsb	r3, r0, #32
 8023de2:	fa02 f303 	lsl.w	r3, r2, r3
 8023de6:	430b      	orrs	r3, r1
 8023de8:	40c2      	lsrs	r2, r0
 8023dea:	6163      	str	r3, [r4, #20]
 8023dec:	9201      	str	r2, [sp, #4]
 8023dee:	9b01      	ldr	r3, [sp, #4]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	bf0c      	ite	eq
 8023df4:	2201      	moveq	r2, #1
 8023df6:	2202      	movne	r2, #2
 8023df8:	61a3      	str	r3, [r4, #24]
 8023dfa:	6122      	str	r2, [r4, #16]
 8023dfc:	b1ad      	cbz	r5, 8023e2a <__d2b+0x92>
 8023dfe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8023e02:	4405      	add	r5, r0
 8023e04:	6035      	str	r5, [r6, #0]
 8023e06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e0c:	6018      	str	r0, [r3, #0]
 8023e0e:	4620      	mov	r0, r4
 8023e10:	b002      	add	sp, #8
 8023e12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8023e16:	6161      	str	r1, [r4, #20]
 8023e18:	e7e9      	b.n	8023dee <__d2b+0x56>
 8023e1a:	a801      	add	r0, sp, #4
 8023e1c:	f7ff fd61 	bl	80238e2 <__lo0bits>
 8023e20:	9b01      	ldr	r3, [sp, #4]
 8023e22:	2201      	movs	r2, #1
 8023e24:	6163      	str	r3, [r4, #20]
 8023e26:	3020      	adds	r0, #32
 8023e28:	e7e7      	b.n	8023dfa <__d2b+0x62>
 8023e2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8023e2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023e32:	6030      	str	r0, [r6, #0]
 8023e34:	6918      	ldr	r0, [r3, #16]
 8023e36:	f7ff fd35 	bl	80238a4 <__hi0bits>
 8023e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023e3e:	e7e4      	b.n	8023e0a <__d2b+0x72>
 8023e40:	08033028 	.word	0x08033028
 8023e44:	08033039 	.word	0x08033039

08023e48 <__ssputs_r>:
 8023e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e4c:	461f      	mov	r7, r3
 8023e4e:	688e      	ldr	r6, [r1, #8]
 8023e50:	4682      	mov	sl, r0
 8023e52:	42be      	cmp	r6, r7
 8023e54:	460c      	mov	r4, r1
 8023e56:	4690      	mov	r8, r2
 8023e58:	680b      	ldr	r3, [r1, #0]
 8023e5a:	d82d      	bhi.n	8023eb8 <__ssputs_r+0x70>
 8023e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023e60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023e64:	d026      	beq.n	8023eb4 <__ssputs_r+0x6c>
 8023e66:	6965      	ldr	r5, [r4, #20]
 8023e68:	6909      	ldr	r1, [r1, #16]
 8023e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e6e:	eba3 0901 	sub.w	r9, r3, r1
 8023e72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023e76:	1c7b      	adds	r3, r7, #1
 8023e78:	444b      	add	r3, r9
 8023e7a:	106d      	asrs	r5, r5, #1
 8023e7c:	429d      	cmp	r5, r3
 8023e7e:	bf38      	it	cc
 8023e80:	461d      	movcc	r5, r3
 8023e82:	0553      	lsls	r3, r2, #21
 8023e84:	d527      	bpl.n	8023ed6 <__ssputs_r+0x8e>
 8023e86:	4629      	mov	r1, r5
 8023e88:	f7ff fbd8 	bl	802363c <_malloc_r>
 8023e8c:	4606      	mov	r6, r0
 8023e8e:	b360      	cbz	r0, 8023eea <__ssputs_r+0xa2>
 8023e90:	464a      	mov	r2, r9
 8023e92:	6921      	ldr	r1, [r4, #16]
 8023e94:	f7fe fcd5 	bl	8022842 <memcpy>
 8023e98:	89a3      	ldrh	r3, [r4, #12]
 8023e9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8023e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023ea2:	81a3      	strh	r3, [r4, #12]
 8023ea4:	6126      	str	r6, [r4, #16]
 8023ea6:	444e      	add	r6, r9
 8023ea8:	6026      	str	r6, [r4, #0]
 8023eaa:	463e      	mov	r6, r7
 8023eac:	6165      	str	r5, [r4, #20]
 8023eae:	eba5 0509 	sub.w	r5, r5, r9
 8023eb2:	60a5      	str	r5, [r4, #8]
 8023eb4:	42be      	cmp	r6, r7
 8023eb6:	d900      	bls.n	8023eba <__ssputs_r+0x72>
 8023eb8:	463e      	mov	r6, r7
 8023eba:	4632      	mov	r2, r6
 8023ebc:	4641      	mov	r1, r8
 8023ebe:	6820      	ldr	r0, [r4, #0]
 8023ec0:	f7fe fb80 	bl	80225c4 <memmove>
 8023ec4:	2000      	movs	r0, #0
 8023ec6:	68a3      	ldr	r3, [r4, #8]
 8023ec8:	1b9b      	subs	r3, r3, r6
 8023eca:	60a3      	str	r3, [r4, #8]
 8023ecc:	6823      	ldr	r3, [r4, #0]
 8023ece:	4433      	add	r3, r6
 8023ed0:	6023      	str	r3, [r4, #0]
 8023ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ed6:	462a      	mov	r2, r5
 8023ed8:	f000 ff53 	bl	8024d82 <_realloc_r>
 8023edc:	4606      	mov	r6, r0
 8023ede:	2800      	cmp	r0, #0
 8023ee0:	d1e0      	bne.n	8023ea4 <__ssputs_r+0x5c>
 8023ee2:	4650      	mov	r0, sl
 8023ee4:	6921      	ldr	r1, [r4, #16]
 8023ee6:	f7ff fb37 	bl	8023558 <_free_r>
 8023eea:	230c      	movs	r3, #12
 8023eec:	f8ca 3000 	str.w	r3, [sl]
 8023ef0:	89a3      	ldrh	r3, [r4, #12]
 8023ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8023ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023efa:	81a3      	strh	r3, [r4, #12]
 8023efc:	e7e9      	b.n	8023ed2 <__ssputs_r+0x8a>
	...

08023f00 <_svfiprintf_r>:
 8023f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f04:	4698      	mov	r8, r3
 8023f06:	898b      	ldrh	r3, [r1, #12]
 8023f08:	4607      	mov	r7, r0
 8023f0a:	061b      	lsls	r3, r3, #24
 8023f0c:	460d      	mov	r5, r1
 8023f0e:	4614      	mov	r4, r2
 8023f10:	b09d      	sub	sp, #116	@ 0x74
 8023f12:	d510      	bpl.n	8023f36 <_svfiprintf_r+0x36>
 8023f14:	690b      	ldr	r3, [r1, #16]
 8023f16:	b973      	cbnz	r3, 8023f36 <_svfiprintf_r+0x36>
 8023f18:	2140      	movs	r1, #64	@ 0x40
 8023f1a:	f7ff fb8f 	bl	802363c <_malloc_r>
 8023f1e:	6028      	str	r0, [r5, #0]
 8023f20:	6128      	str	r0, [r5, #16]
 8023f22:	b930      	cbnz	r0, 8023f32 <_svfiprintf_r+0x32>
 8023f24:	230c      	movs	r3, #12
 8023f26:	603b      	str	r3, [r7, #0]
 8023f28:	f04f 30ff 	mov.w	r0, #4294967295
 8023f2c:	b01d      	add	sp, #116	@ 0x74
 8023f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f32:	2340      	movs	r3, #64	@ 0x40
 8023f34:	616b      	str	r3, [r5, #20]
 8023f36:	2300      	movs	r3, #0
 8023f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f3a:	2320      	movs	r3, #32
 8023f3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023f40:	2330      	movs	r3, #48	@ 0x30
 8023f42:	f04f 0901 	mov.w	r9, #1
 8023f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8023f4a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80240e4 <_svfiprintf_r+0x1e4>
 8023f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023f52:	4623      	mov	r3, r4
 8023f54:	469a      	mov	sl, r3
 8023f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f5a:	b10a      	cbz	r2, 8023f60 <_svfiprintf_r+0x60>
 8023f5c:	2a25      	cmp	r2, #37	@ 0x25
 8023f5e:	d1f9      	bne.n	8023f54 <_svfiprintf_r+0x54>
 8023f60:	ebba 0b04 	subs.w	fp, sl, r4
 8023f64:	d00b      	beq.n	8023f7e <_svfiprintf_r+0x7e>
 8023f66:	465b      	mov	r3, fp
 8023f68:	4622      	mov	r2, r4
 8023f6a:	4629      	mov	r1, r5
 8023f6c:	4638      	mov	r0, r7
 8023f6e:	f7ff ff6b 	bl	8023e48 <__ssputs_r>
 8023f72:	3001      	adds	r0, #1
 8023f74:	f000 80a7 	beq.w	80240c6 <_svfiprintf_r+0x1c6>
 8023f78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023f7a:	445a      	add	r2, fp
 8023f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8023f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8023f82:	2b00      	cmp	r3, #0
 8023f84:	f000 809f 	beq.w	80240c6 <_svfiprintf_r+0x1c6>
 8023f88:	2300      	movs	r3, #0
 8023f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8023f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023f92:	f10a 0a01 	add.w	sl, sl, #1
 8023f96:	9304      	str	r3, [sp, #16]
 8023f98:	9307      	str	r3, [sp, #28]
 8023f9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023f9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023fa0:	4654      	mov	r4, sl
 8023fa2:	2205      	movs	r2, #5
 8023fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023fa8:	484e      	ldr	r0, [pc, #312]	@ (80240e4 <_svfiprintf_r+0x1e4>)
 8023faa:	f7fe fc3c 	bl	8022826 <memchr>
 8023fae:	9a04      	ldr	r2, [sp, #16]
 8023fb0:	b9d8      	cbnz	r0, 8023fea <_svfiprintf_r+0xea>
 8023fb2:	06d0      	lsls	r0, r2, #27
 8023fb4:	bf44      	itt	mi
 8023fb6:	2320      	movmi	r3, #32
 8023fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023fbc:	0711      	lsls	r1, r2, #28
 8023fbe:	bf44      	itt	mi
 8023fc0:	232b      	movmi	r3, #43	@ 0x2b
 8023fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8023fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8023fcc:	d015      	beq.n	8023ffa <_svfiprintf_r+0xfa>
 8023fce:	4654      	mov	r4, sl
 8023fd0:	2000      	movs	r0, #0
 8023fd2:	f04f 0c0a 	mov.w	ip, #10
 8023fd6:	9a07      	ldr	r2, [sp, #28]
 8023fd8:	4621      	mov	r1, r4
 8023fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023fde:	3b30      	subs	r3, #48	@ 0x30
 8023fe0:	2b09      	cmp	r3, #9
 8023fe2:	d94b      	bls.n	802407c <_svfiprintf_r+0x17c>
 8023fe4:	b1b0      	cbz	r0, 8024014 <_svfiprintf_r+0x114>
 8023fe6:	9207      	str	r2, [sp, #28]
 8023fe8:	e014      	b.n	8024014 <_svfiprintf_r+0x114>
 8023fea:	eba0 0308 	sub.w	r3, r0, r8
 8023fee:	fa09 f303 	lsl.w	r3, r9, r3
 8023ff2:	4313      	orrs	r3, r2
 8023ff4:	46a2      	mov	sl, r4
 8023ff6:	9304      	str	r3, [sp, #16]
 8023ff8:	e7d2      	b.n	8023fa0 <_svfiprintf_r+0xa0>
 8023ffa:	9b03      	ldr	r3, [sp, #12]
 8023ffc:	1d19      	adds	r1, r3, #4
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	9103      	str	r1, [sp, #12]
 8024002:	2b00      	cmp	r3, #0
 8024004:	bfbb      	ittet	lt
 8024006:	425b      	neglt	r3, r3
 8024008:	f042 0202 	orrlt.w	r2, r2, #2
 802400c:	9307      	strge	r3, [sp, #28]
 802400e:	9307      	strlt	r3, [sp, #28]
 8024010:	bfb8      	it	lt
 8024012:	9204      	strlt	r2, [sp, #16]
 8024014:	7823      	ldrb	r3, [r4, #0]
 8024016:	2b2e      	cmp	r3, #46	@ 0x2e
 8024018:	d10a      	bne.n	8024030 <_svfiprintf_r+0x130>
 802401a:	7863      	ldrb	r3, [r4, #1]
 802401c:	2b2a      	cmp	r3, #42	@ 0x2a
 802401e:	d132      	bne.n	8024086 <_svfiprintf_r+0x186>
 8024020:	9b03      	ldr	r3, [sp, #12]
 8024022:	3402      	adds	r4, #2
 8024024:	1d1a      	adds	r2, r3, #4
 8024026:	681b      	ldr	r3, [r3, #0]
 8024028:	9203      	str	r2, [sp, #12]
 802402a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802402e:	9305      	str	r3, [sp, #20]
 8024030:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80240e8 <_svfiprintf_r+0x1e8>
 8024034:	2203      	movs	r2, #3
 8024036:	4650      	mov	r0, sl
 8024038:	7821      	ldrb	r1, [r4, #0]
 802403a:	f7fe fbf4 	bl	8022826 <memchr>
 802403e:	b138      	cbz	r0, 8024050 <_svfiprintf_r+0x150>
 8024040:	2240      	movs	r2, #64	@ 0x40
 8024042:	9b04      	ldr	r3, [sp, #16]
 8024044:	eba0 000a 	sub.w	r0, r0, sl
 8024048:	4082      	lsls	r2, r0
 802404a:	4313      	orrs	r3, r2
 802404c:	3401      	adds	r4, #1
 802404e:	9304      	str	r3, [sp, #16]
 8024050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024054:	2206      	movs	r2, #6
 8024056:	4825      	ldr	r0, [pc, #148]	@ (80240ec <_svfiprintf_r+0x1ec>)
 8024058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802405c:	f7fe fbe3 	bl	8022826 <memchr>
 8024060:	2800      	cmp	r0, #0
 8024062:	d036      	beq.n	80240d2 <_svfiprintf_r+0x1d2>
 8024064:	4b22      	ldr	r3, [pc, #136]	@ (80240f0 <_svfiprintf_r+0x1f0>)
 8024066:	bb1b      	cbnz	r3, 80240b0 <_svfiprintf_r+0x1b0>
 8024068:	9b03      	ldr	r3, [sp, #12]
 802406a:	3307      	adds	r3, #7
 802406c:	f023 0307 	bic.w	r3, r3, #7
 8024070:	3308      	adds	r3, #8
 8024072:	9303      	str	r3, [sp, #12]
 8024074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024076:	4433      	add	r3, r6
 8024078:	9309      	str	r3, [sp, #36]	@ 0x24
 802407a:	e76a      	b.n	8023f52 <_svfiprintf_r+0x52>
 802407c:	460c      	mov	r4, r1
 802407e:	2001      	movs	r0, #1
 8024080:	fb0c 3202 	mla	r2, ip, r2, r3
 8024084:	e7a8      	b.n	8023fd8 <_svfiprintf_r+0xd8>
 8024086:	2300      	movs	r3, #0
 8024088:	f04f 0c0a 	mov.w	ip, #10
 802408c:	4619      	mov	r1, r3
 802408e:	3401      	adds	r4, #1
 8024090:	9305      	str	r3, [sp, #20]
 8024092:	4620      	mov	r0, r4
 8024094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024098:	3a30      	subs	r2, #48	@ 0x30
 802409a:	2a09      	cmp	r2, #9
 802409c:	d903      	bls.n	80240a6 <_svfiprintf_r+0x1a6>
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d0c6      	beq.n	8024030 <_svfiprintf_r+0x130>
 80240a2:	9105      	str	r1, [sp, #20]
 80240a4:	e7c4      	b.n	8024030 <_svfiprintf_r+0x130>
 80240a6:	4604      	mov	r4, r0
 80240a8:	2301      	movs	r3, #1
 80240aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80240ae:	e7f0      	b.n	8024092 <_svfiprintf_r+0x192>
 80240b0:	ab03      	add	r3, sp, #12
 80240b2:	9300      	str	r3, [sp, #0]
 80240b4:	462a      	mov	r2, r5
 80240b6:	4638      	mov	r0, r7
 80240b8:	4b0e      	ldr	r3, [pc, #56]	@ (80240f4 <_svfiprintf_r+0x1f4>)
 80240ba:	a904      	add	r1, sp, #16
 80240bc:	f7fd fc48 	bl	8021950 <_printf_float>
 80240c0:	1c42      	adds	r2, r0, #1
 80240c2:	4606      	mov	r6, r0
 80240c4:	d1d6      	bne.n	8024074 <_svfiprintf_r+0x174>
 80240c6:	89ab      	ldrh	r3, [r5, #12]
 80240c8:	065b      	lsls	r3, r3, #25
 80240ca:	f53f af2d 	bmi.w	8023f28 <_svfiprintf_r+0x28>
 80240ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240d0:	e72c      	b.n	8023f2c <_svfiprintf_r+0x2c>
 80240d2:	ab03      	add	r3, sp, #12
 80240d4:	9300      	str	r3, [sp, #0]
 80240d6:	462a      	mov	r2, r5
 80240d8:	4638      	mov	r0, r7
 80240da:	4b06      	ldr	r3, [pc, #24]	@ (80240f4 <_svfiprintf_r+0x1f4>)
 80240dc:	a904      	add	r1, sp, #16
 80240de:	f7fd fed5 	bl	8021e8c <_printf_i>
 80240e2:	e7ed      	b.n	80240c0 <_svfiprintf_r+0x1c0>
 80240e4:	08033092 	.word	0x08033092
 80240e8:	08033098 	.word	0x08033098
 80240ec:	0803309c 	.word	0x0803309c
 80240f0:	08021951 	.word	0x08021951
 80240f4:	08023e49 	.word	0x08023e49

080240f8 <_sungetc_r>:
 80240f8:	b538      	push	{r3, r4, r5, lr}
 80240fa:	1c4b      	adds	r3, r1, #1
 80240fc:	4614      	mov	r4, r2
 80240fe:	d103      	bne.n	8024108 <_sungetc_r+0x10>
 8024100:	f04f 35ff 	mov.w	r5, #4294967295
 8024104:	4628      	mov	r0, r5
 8024106:	bd38      	pop	{r3, r4, r5, pc}
 8024108:	8993      	ldrh	r3, [r2, #12]
 802410a:	b2cd      	uxtb	r5, r1
 802410c:	f023 0320 	bic.w	r3, r3, #32
 8024110:	8193      	strh	r3, [r2, #12]
 8024112:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024114:	6852      	ldr	r2, [r2, #4]
 8024116:	b18b      	cbz	r3, 802413c <_sungetc_r+0x44>
 8024118:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802411a:	4293      	cmp	r3, r2
 802411c:	dd08      	ble.n	8024130 <_sungetc_r+0x38>
 802411e:	6823      	ldr	r3, [r4, #0]
 8024120:	1e5a      	subs	r2, r3, #1
 8024122:	6022      	str	r2, [r4, #0]
 8024124:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024128:	6863      	ldr	r3, [r4, #4]
 802412a:	3301      	adds	r3, #1
 802412c:	6063      	str	r3, [r4, #4]
 802412e:	e7e9      	b.n	8024104 <_sungetc_r+0xc>
 8024130:	4621      	mov	r1, r4
 8024132:	f000 fd8f 	bl	8024c54 <__submore>
 8024136:	2800      	cmp	r0, #0
 8024138:	d0f1      	beq.n	802411e <_sungetc_r+0x26>
 802413a:	e7e1      	b.n	8024100 <_sungetc_r+0x8>
 802413c:	6921      	ldr	r1, [r4, #16]
 802413e:	6823      	ldr	r3, [r4, #0]
 8024140:	b151      	cbz	r1, 8024158 <_sungetc_r+0x60>
 8024142:	4299      	cmp	r1, r3
 8024144:	d208      	bcs.n	8024158 <_sungetc_r+0x60>
 8024146:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802414a:	42a9      	cmp	r1, r5
 802414c:	d104      	bne.n	8024158 <_sungetc_r+0x60>
 802414e:	3b01      	subs	r3, #1
 8024150:	3201      	adds	r2, #1
 8024152:	6023      	str	r3, [r4, #0]
 8024154:	6062      	str	r2, [r4, #4]
 8024156:	e7d5      	b.n	8024104 <_sungetc_r+0xc>
 8024158:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802415c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024160:	6363      	str	r3, [r4, #52]	@ 0x34
 8024162:	2303      	movs	r3, #3
 8024164:	63a3      	str	r3, [r4, #56]	@ 0x38
 8024166:	4623      	mov	r3, r4
 8024168:	f803 5f46 	strb.w	r5, [r3, #70]!
 802416c:	6023      	str	r3, [r4, #0]
 802416e:	2301      	movs	r3, #1
 8024170:	e7dc      	b.n	802412c <_sungetc_r+0x34>

08024172 <__ssrefill_r>:
 8024172:	b510      	push	{r4, lr}
 8024174:	460c      	mov	r4, r1
 8024176:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024178:	b169      	cbz	r1, 8024196 <__ssrefill_r+0x24>
 802417a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802417e:	4299      	cmp	r1, r3
 8024180:	d001      	beq.n	8024186 <__ssrefill_r+0x14>
 8024182:	f7ff f9e9 	bl	8023558 <_free_r>
 8024186:	2000      	movs	r0, #0
 8024188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802418a:	6360      	str	r0, [r4, #52]	@ 0x34
 802418c:	6063      	str	r3, [r4, #4]
 802418e:	b113      	cbz	r3, 8024196 <__ssrefill_r+0x24>
 8024190:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8024192:	6023      	str	r3, [r4, #0]
 8024194:	bd10      	pop	{r4, pc}
 8024196:	6923      	ldr	r3, [r4, #16]
 8024198:	f04f 30ff 	mov.w	r0, #4294967295
 802419c:	6023      	str	r3, [r4, #0]
 802419e:	2300      	movs	r3, #0
 80241a0:	6063      	str	r3, [r4, #4]
 80241a2:	89a3      	ldrh	r3, [r4, #12]
 80241a4:	f043 0320 	orr.w	r3, r3, #32
 80241a8:	81a3      	strh	r3, [r4, #12]
 80241aa:	e7f3      	b.n	8024194 <__ssrefill_r+0x22>

080241ac <__ssvfiscanf_r>:
 80241ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241b0:	460c      	mov	r4, r1
 80241b2:	2100      	movs	r1, #0
 80241b4:	4606      	mov	r6, r0
 80241b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80241ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80241be:	49ab      	ldr	r1, [pc, #684]	@ (802446c <__ssvfiscanf_r+0x2c0>)
 80241c0:	f10d 0804 	add.w	r8, sp, #4
 80241c4:	91a0      	str	r1, [sp, #640]	@ 0x280
 80241c6:	49aa      	ldr	r1, [pc, #680]	@ (8024470 <__ssvfiscanf_r+0x2c4>)
 80241c8:	4faa      	ldr	r7, [pc, #680]	@ (8024474 <__ssvfiscanf_r+0x2c8>)
 80241ca:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80241ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 80241d0:	9300      	str	r3, [sp, #0]
 80241d2:	f892 9000 	ldrb.w	r9, [r2]
 80241d6:	f1b9 0f00 	cmp.w	r9, #0
 80241da:	f000 8159 	beq.w	8024490 <__ssvfiscanf_r+0x2e4>
 80241de:	f817 3009 	ldrb.w	r3, [r7, r9]
 80241e2:	1c55      	adds	r5, r2, #1
 80241e4:	f013 0308 	ands.w	r3, r3, #8
 80241e8:	d019      	beq.n	802421e <__ssvfiscanf_r+0x72>
 80241ea:	6863      	ldr	r3, [r4, #4]
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	dd0f      	ble.n	8024210 <__ssvfiscanf_r+0x64>
 80241f0:	6823      	ldr	r3, [r4, #0]
 80241f2:	781a      	ldrb	r2, [r3, #0]
 80241f4:	5cba      	ldrb	r2, [r7, r2]
 80241f6:	0712      	lsls	r2, r2, #28
 80241f8:	d401      	bmi.n	80241fe <__ssvfiscanf_r+0x52>
 80241fa:	462a      	mov	r2, r5
 80241fc:	e7e9      	b.n	80241d2 <__ssvfiscanf_r+0x26>
 80241fe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8024200:	3301      	adds	r3, #1
 8024202:	3201      	adds	r2, #1
 8024204:	9245      	str	r2, [sp, #276]	@ 0x114
 8024206:	6862      	ldr	r2, [r4, #4]
 8024208:	6023      	str	r3, [r4, #0]
 802420a:	3a01      	subs	r2, #1
 802420c:	6062      	str	r2, [r4, #4]
 802420e:	e7ec      	b.n	80241ea <__ssvfiscanf_r+0x3e>
 8024210:	4621      	mov	r1, r4
 8024212:	4630      	mov	r0, r6
 8024214:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8024216:	4798      	blx	r3
 8024218:	2800      	cmp	r0, #0
 802421a:	d0e9      	beq.n	80241f0 <__ssvfiscanf_r+0x44>
 802421c:	e7ed      	b.n	80241fa <__ssvfiscanf_r+0x4e>
 802421e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8024222:	f040 8086 	bne.w	8024332 <__ssvfiscanf_r+0x186>
 8024226:	9341      	str	r3, [sp, #260]	@ 0x104
 8024228:	9343      	str	r3, [sp, #268]	@ 0x10c
 802422a:	7853      	ldrb	r3, [r2, #1]
 802422c:	2b2a      	cmp	r3, #42	@ 0x2a
 802422e:	bf04      	itt	eq
 8024230:	2310      	moveq	r3, #16
 8024232:	1c95      	addeq	r5, r2, #2
 8024234:	f04f 020a 	mov.w	r2, #10
 8024238:	bf08      	it	eq
 802423a:	9341      	streq	r3, [sp, #260]	@ 0x104
 802423c:	46aa      	mov	sl, r5
 802423e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8024242:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8024246:	2b09      	cmp	r3, #9
 8024248:	d91e      	bls.n	8024288 <__ssvfiscanf_r+0xdc>
 802424a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8024478 <__ssvfiscanf_r+0x2cc>
 802424e:	2203      	movs	r2, #3
 8024250:	4658      	mov	r0, fp
 8024252:	f7fe fae8 	bl	8022826 <memchr>
 8024256:	b138      	cbz	r0, 8024268 <__ssvfiscanf_r+0xbc>
 8024258:	2301      	movs	r3, #1
 802425a:	4655      	mov	r5, sl
 802425c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802425e:	eba0 000b 	sub.w	r0, r0, fp
 8024262:	4083      	lsls	r3, r0
 8024264:	4313      	orrs	r3, r2
 8024266:	9341      	str	r3, [sp, #260]	@ 0x104
 8024268:	f815 3b01 	ldrb.w	r3, [r5], #1
 802426c:	2b78      	cmp	r3, #120	@ 0x78
 802426e:	d806      	bhi.n	802427e <__ssvfiscanf_r+0xd2>
 8024270:	2b57      	cmp	r3, #87	@ 0x57
 8024272:	d810      	bhi.n	8024296 <__ssvfiscanf_r+0xea>
 8024274:	2b25      	cmp	r3, #37	@ 0x25
 8024276:	d05c      	beq.n	8024332 <__ssvfiscanf_r+0x186>
 8024278:	d856      	bhi.n	8024328 <__ssvfiscanf_r+0x17c>
 802427a:	2b00      	cmp	r3, #0
 802427c:	d074      	beq.n	8024368 <__ssvfiscanf_r+0x1bc>
 802427e:	2303      	movs	r3, #3
 8024280:	9347      	str	r3, [sp, #284]	@ 0x11c
 8024282:	230a      	movs	r3, #10
 8024284:	9342      	str	r3, [sp, #264]	@ 0x108
 8024286:	e087      	b.n	8024398 <__ssvfiscanf_r+0x1ec>
 8024288:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802428a:	4655      	mov	r5, sl
 802428c:	fb02 1103 	mla	r1, r2, r3, r1
 8024290:	3930      	subs	r1, #48	@ 0x30
 8024292:	9143      	str	r1, [sp, #268]	@ 0x10c
 8024294:	e7d2      	b.n	802423c <__ssvfiscanf_r+0x90>
 8024296:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802429a:	2a20      	cmp	r2, #32
 802429c:	d8ef      	bhi.n	802427e <__ssvfiscanf_r+0xd2>
 802429e:	a101      	add	r1, pc, #4	@ (adr r1, 80242a4 <__ssvfiscanf_r+0xf8>)
 80242a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80242a4:	08024377 	.word	0x08024377
 80242a8:	0802427f 	.word	0x0802427f
 80242ac:	0802427f 	.word	0x0802427f
 80242b0:	080243d1 	.word	0x080243d1
 80242b4:	0802427f 	.word	0x0802427f
 80242b8:	0802427f 	.word	0x0802427f
 80242bc:	0802427f 	.word	0x0802427f
 80242c0:	0802427f 	.word	0x0802427f
 80242c4:	0802427f 	.word	0x0802427f
 80242c8:	0802427f 	.word	0x0802427f
 80242cc:	0802427f 	.word	0x0802427f
 80242d0:	080243e7 	.word	0x080243e7
 80242d4:	080243cd 	.word	0x080243cd
 80242d8:	0802432f 	.word	0x0802432f
 80242dc:	0802432f 	.word	0x0802432f
 80242e0:	0802432f 	.word	0x0802432f
 80242e4:	0802427f 	.word	0x0802427f
 80242e8:	08024389 	.word	0x08024389
 80242ec:	0802427f 	.word	0x0802427f
 80242f0:	0802427f 	.word	0x0802427f
 80242f4:	0802427f 	.word	0x0802427f
 80242f8:	0802427f 	.word	0x0802427f
 80242fc:	080243f7 	.word	0x080243f7
 8024300:	08024391 	.word	0x08024391
 8024304:	0802436f 	.word	0x0802436f
 8024308:	0802427f 	.word	0x0802427f
 802430c:	0802427f 	.word	0x0802427f
 8024310:	080243f3 	.word	0x080243f3
 8024314:	0802427f 	.word	0x0802427f
 8024318:	080243cd 	.word	0x080243cd
 802431c:	0802427f 	.word	0x0802427f
 8024320:	0802427f 	.word	0x0802427f
 8024324:	08024377 	.word	0x08024377
 8024328:	3b45      	subs	r3, #69	@ 0x45
 802432a:	2b02      	cmp	r3, #2
 802432c:	d8a7      	bhi.n	802427e <__ssvfiscanf_r+0xd2>
 802432e:	2305      	movs	r3, #5
 8024330:	e031      	b.n	8024396 <__ssvfiscanf_r+0x1ea>
 8024332:	6863      	ldr	r3, [r4, #4]
 8024334:	2b00      	cmp	r3, #0
 8024336:	dd0d      	ble.n	8024354 <__ssvfiscanf_r+0x1a8>
 8024338:	6823      	ldr	r3, [r4, #0]
 802433a:	781a      	ldrb	r2, [r3, #0]
 802433c:	454a      	cmp	r2, r9
 802433e:	f040 80a7 	bne.w	8024490 <__ssvfiscanf_r+0x2e4>
 8024342:	3301      	adds	r3, #1
 8024344:	6862      	ldr	r2, [r4, #4]
 8024346:	6023      	str	r3, [r4, #0]
 8024348:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802434a:	3a01      	subs	r2, #1
 802434c:	3301      	adds	r3, #1
 802434e:	6062      	str	r2, [r4, #4]
 8024350:	9345      	str	r3, [sp, #276]	@ 0x114
 8024352:	e752      	b.n	80241fa <__ssvfiscanf_r+0x4e>
 8024354:	4621      	mov	r1, r4
 8024356:	4630      	mov	r0, r6
 8024358:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802435a:	4798      	blx	r3
 802435c:	2800      	cmp	r0, #0
 802435e:	d0eb      	beq.n	8024338 <__ssvfiscanf_r+0x18c>
 8024360:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8024362:	2800      	cmp	r0, #0
 8024364:	f040 808c 	bne.w	8024480 <__ssvfiscanf_r+0x2d4>
 8024368:	f04f 30ff 	mov.w	r0, #4294967295
 802436c:	e08c      	b.n	8024488 <__ssvfiscanf_r+0x2dc>
 802436e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8024370:	f042 0220 	orr.w	r2, r2, #32
 8024374:	9241      	str	r2, [sp, #260]	@ 0x104
 8024376:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8024378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802437c:	9241      	str	r2, [sp, #260]	@ 0x104
 802437e:	2210      	movs	r2, #16
 8024380:	2b6e      	cmp	r3, #110	@ 0x6e
 8024382:	9242      	str	r2, [sp, #264]	@ 0x108
 8024384:	d902      	bls.n	802438c <__ssvfiscanf_r+0x1e0>
 8024386:	e005      	b.n	8024394 <__ssvfiscanf_r+0x1e8>
 8024388:	2300      	movs	r3, #0
 802438a:	9342      	str	r3, [sp, #264]	@ 0x108
 802438c:	2303      	movs	r3, #3
 802438e:	e002      	b.n	8024396 <__ssvfiscanf_r+0x1ea>
 8024390:	2308      	movs	r3, #8
 8024392:	9342      	str	r3, [sp, #264]	@ 0x108
 8024394:	2304      	movs	r3, #4
 8024396:	9347      	str	r3, [sp, #284]	@ 0x11c
 8024398:	6863      	ldr	r3, [r4, #4]
 802439a:	2b00      	cmp	r3, #0
 802439c:	dd39      	ble.n	8024412 <__ssvfiscanf_r+0x266>
 802439e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80243a0:	0659      	lsls	r1, r3, #25
 80243a2:	d404      	bmi.n	80243ae <__ssvfiscanf_r+0x202>
 80243a4:	6823      	ldr	r3, [r4, #0]
 80243a6:	781a      	ldrb	r2, [r3, #0]
 80243a8:	5cba      	ldrb	r2, [r7, r2]
 80243aa:	0712      	lsls	r2, r2, #28
 80243ac:	d438      	bmi.n	8024420 <__ssvfiscanf_r+0x274>
 80243ae:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80243b0:	2b02      	cmp	r3, #2
 80243b2:	dc47      	bgt.n	8024444 <__ssvfiscanf_r+0x298>
 80243b4:	466b      	mov	r3, sp
 80243b6:	4622      	mov	r2, r4
 80243b8:	4630      	mov	r0, r6
 80243ba:	a941      	add	r1, sp, #260	@ 0x104
 80243bc:	f000 f9aa 	bl	8024714 <_scanf_chars>
 80243c0:	2801      	cmp	r0, #1
 80243c2:	d065      	beq.n	8024490 <__ssvfiscanf_r+0x2e4>
 80243c4:	2802      	cmp	r0, #2
 80243c6:	f47f af18 	bne.w	80241fa <__ssvfiscanf_r+0x4e>
 80243ca:	e7c9      	b.n	8024360 <__ssvfiscanf_r+0x1b4>
 80243cc:	220a      	movs	r2, #10
 80243ce:	e7d7      	b.n	8024380 <__ssvfiscanf_r+0x1d4>
 80243d0:	4629      	mov	r1, r5
 80243d2:	4640      	mov	r0, r8
 80243d4:	f000 fc05 	bl	8024be2 <__sccl>
 80243d8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80243da:	4605      	mov	r5, r0
 80243dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80243e2:	2301      	movs	r3, #1
 80243e4:	e7d7      	b.n	8024396 <__ssvfiscanf_r+0x1ea>
 80243e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80243e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80243ee:	2300      	movs	r3, #0
 80243f0:	e7d1      	b.n	8024396 <__ssvfiscanf_r+0x1ea>
 80243f2:	2302      	movs	r3, #2
 80243f4:	e7cf      	b.n	8024396 <__ssvfiscanf_r+0x1ea>
 80243f6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80243f8:	06c3      	lsls	r3, r0, #27
 80243fa:	f53f aefe 	bmi.w	80241fa <__ssvfiscanf_r+0x4e>
 80243fe:	9b00      	ldr	r3, [sp, #0]
 8024400:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8024402:	1d19      	adds	r1, r3, #4
 8024404:	9100      	str	r1, [sp, #0]
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	07c0      	lsls	r0, r0, #31
 802440a:	bf4c      	ite	mi
 802440c:	801a      	strhmi	r2, [r3, #0]
 802440e:	601a      	strpl	r2, [r3, #0]
 8024410:	e6f3      	b.n	80241fa <__ssvfiscanf_r+0x4e>
 8024412:	4621      	mov	r1, r4
 8024414:	4630      	mov	r0, r6
 8024416:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8024418:	4798      	blx	r3
 802441a:	2800      	cmp	r0, #0
 802441c:	d0bf      	beq.n	802439e <__ssvfiscanf_r+0x1f2>
 802441e:	e79f      	b.n	8024360 <__ssvfiscanf_r+0x1b4>
 8024420:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8024422:	3201      	adds	r2, #1
 8024424:	9245      	str	r2, [sp, #276]	@ 0x114
 8024426:	6862      	ldr	r2, [r4, #4]
 8024428:	3a01      	subs	r2, #1
 802442a:	2a00      	cmp	r2, #0
 802442c:	6062      	str	r2, [r4, #4]
 802442e:	dd02      	ble.n	8024436 <__ssvfiscanf_r+0x28a>
 8024430:	3301      	adds	r3, #1
 8024432:	6023      	str	r3, [r4, #0]
 8024434:	e7b6      	b.n	80243a4 <__ssvfiscanf_r+0x1f8>
 8024436:	4621      	mov	r1, r4
 8024438:	4630      	mov	r0, r6
 802443a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802443c:	4798      	blx	r3
 802443e:	2800      	cmp	r0, #0
 8024440:	d0b0      	beq.n	80243a4 <__ssvfiscanf_r+0x1f8>
 8024442:	e78d      	b.n	8024360 <__ssvfiscanf_r+0x1b4>
 8024444:	2b04      	cmp	r3, #4
 8024446:	dc06      	bgt.n	8024456 <__ssvfiscanf_r+0x2aa>
 8024448:	466b      	mov	r3, sp
 802444a:	4622      	mov	r2, r4
 802444c:	4630      	mov	r0, r6
 802444e:	a941      	add	r1, sp, #260	@ 0x104
 8024450:	f000 f9ba 	bl	80247c8 <_scanf_i>
 8024454:	e7b4      	b.n	80243c0 <__ssvfiscanf_r+0x214>
 8024456:	4b09      	ldr	r3, [pc, #36]	@ (802447c <__ssvfiscanf_r+0x2d0>)
 8024458:	2b00      	cmp	r3, #0
 802445a:	f43f aece 	beq.w	80241fa <__ssvfiscanf_r+0x4e>
 802445e:	466b      	mov	r3, sp
 8024460:	4622      	mov	r2, r4
 8024462:	4630      	mov	r0, r6
 8024464:	a941      	add	r1, sp, #260	@ 0x104
 8024466:	f3af 8000 	nop.w
 802446a:	e7a9      	b.n	80243c0 <__ssvfiscanf_r+0x214>
 802446c:	080240f9 	.word	0x080240f9
 8024470:	08024173 	.word	0x08024173
 8024474:	080330c9 	.word	0x080330c9
 8024478:	08033098 	.word	0x08033098
 802447c:	00000000 	.word	0x00000000
 8024480:	89a3      	ldrh	r3, [r4, #12]
 8024482:	065b      	lsls	r3, r3, #25
 8024484:	f53f af70 	bmi.w	8024368 <__ssvfiscanf_r+0x1bc>
 8024488:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 802448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024490:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8024492:	e7f9      	b.n	8024488 <__ssvfiscanf_r+0x2dc>

08024494 <__sfputc_r>:
 8024494:	6893      	ldr	r3, [r2, #8]
 8024496:	b410      	push	{r4}
 8024498:	3b01      	subs	r3, #1
 802449a:	2b00      	cmp	r3, #0
 802449c:	6093      	str	r3, [r2, #8]
 802449e:	da07      	bge.n	80244b0 <__sfputc_r+0x1c>
 80244a0:	6994      	ldr	r4, [r2, #24]
 80244a2:	42a3      	cmp	r3, r4
 80244a4:	db01      	blt.n	80244aa <__sfputc_r+0x16>
 80244a6:	290a      	cmp	r1, #10
 80244a8:	d102      	bne.n	80244b0 <__sfputc_r+0x1c>
 80244aa:	bc10      	pop	{r4}
 80244ac:	f7fd bfe5 	b.w	802247a <__swbuf_r>
 80244b0:	6813      	ldr	r3, [r2, #0]
 80244b2:	1c58      	adds	r0, r3, #1
 80244b4:	6010      	str	r0, [r2, #0]
 80244b6:	7019      	strb	r1, [r3, #0]
 80244b8:	4608      	mov	r0, r1
 80244ba:	bc10      	pop	{r4}
 80244bc:	4770      	bx	lr

080244be <__sfputs_r>:
 80244be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244c0:	4606      	mov	r6, r0
 80244c2:	460f      	mov	r7, r1
 80244c4:	4614      	mov	r4, r2
 80244c6:	18d5      	adds	r5, r2, r3
 80244c8:	42ac      	cmp	r4, r5
 80244ca:	d101      	bne.n	80244d0 <__sfputs_r+0x12>
 80244cc:	2000      	movs	r0, #0
 80244ce:	e007      	b.n	80244e0 <__sfputs_r+0x22>
 80244d0:	463a      	mov	r2, r7
 80244d2:	4630      	mov	r0, r6
 80244d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80244d8:	f7ff ffdc 	bl	8024494 <__sfputc_r>
 80244dc:	1c43      	adds	r3, r0, #1
 80244de:	d1f3      	bne.n	80244c8 <__sfputs_r+0xa>
 80244e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080244e4 <_vfiprintf_r>:
 80244e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244e8:	460d      	mov	r5, r1
 80244ea:	4614      	mov	r4, r2
 80244ec:	4698      	mov	r8, r3
 80244ee:	4606      	mov	r6, r0
 80244f0:	b09d      	sub	sp, #116	@ 0x74
 80244f2:	b118      	cbz	r0, 80244fc <_vfiprintf_r+0x18>
 80244f4:	6a03      	ldr	r3, [r0, #32]
 80244f6:	b90b      	cbnz	r3, 80244fc <_vfiprintf_r+0x18>
 80244f8:	f7fd fe72 	bl	80221e0 <__sinit>
 80244fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80244fe:	07d9      	lsls	r1, r3, #31
 8024500:	d405      	bmi.n	802450e <_vfiprintf_r+0x2a>
 8024502:	89ab      	ldrh	r3, [r5, #12]
 8024504:	059a      	lsls	r2, r3, #22
 8024506:	d402      	bmi.n	802450e <_vfiprintf_r+0x2a>
 8024508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802450a:	f7fe f98a 	bl	8022822 <__retarget_lock_acquire_recursive>
 802450e:	89ab      	ldrh	r3, [r5, #12]
 8024510:	071b      	lsls	r3, r3, #28
 8024512:	d501      	bpl.n	8024518 <_vfiprintf_r+0x34>
 8024514:	692b      	ldr	r3, [r5, #16]
 8024516:	b99b      	cbnz	r3, 8024540 <_vfiprintf_r+0x5c>
 8024518:	4629      	mov	r1, r5
 802451a:	4630      	mov	r0, r6
 802451c:	f7fd ffec 	bl	80224f8 <__swsetup_r>
 8024520:	b170      	cbz	r0, 8024540 <_vfiprintf_r+0x5c>
 8024522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024524:	07dc      	lsls	r4, r3, #31
 8024526:	d504      	bpl.n	8024532 <_vfiprintf_r+0x4e>
 8024528:	f04f 30ff 	mov.w	r0, #4294967295
 802452c:	b01d      	add	sp, #116	@ 0x74
 802452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024532:	89ab      	ldrh	r3, [r5, #12]
 8024534:	0598      	lsls	r0, r3, #22
 8024536:	d4f7      	bmi.n	8024528 <_vfiprintf_r+0x44>
 8024538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802453a:	f7fe f973 	bl	8022824 <__retarget_lock_release_recursive>
 802453e:	e7f3      	b.n	8024528 <_vfiprintf_r+0x44>
 8024540:	2300      	movs	r3, #0
 8024542:	9309      	str	r3, [sp, #36]	@ 0x24
 8024544:	2320      	movs	r3, #32
 8024546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802454a:	2330      	movs	r3, #48	@ 0x30
 802454c:	f04f 0901 	mov.w	r9, #1
 8024550:	f8cd 800c 	str.w	r8, [sp, #12]
 8024554:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8024700 <_vfiprintf_r+0x21c>
 8024558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802455c:	4623      	mov	r3, r4
 802455e:	469a      	mov	sl, r3
 8024560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024564:	b10a      	cbz	r2, 802456a <_vfiprintf_r+0x86>
 8024566:	2a25      	cmp	r2, #37	@ 0x25
 8024568:	d1f9      	bne.n	802455e <_vfiprintf_r+0x7a>
 802456a:	ebba 0b04 	subs.w	fp, sl, r4
 802456e:	d00b      	beq.n	8024588 <_vfiprintf_r+0xa4>
 8024570:	465b      	mov	r3, fp
 8024572:	4622      	mov	r2, r4
 8024574:	4629      	mov	r1, r5
 8024576:	4630      	mov	r0, r6
 8024578:	f7ff ffa1 	bl	80244be <__sfputs_r>
 802457c:	3001      	adds	r0, #1
 802457e:	f000 80a7 	beq.w	80246d0 <_vfiprintf_r+0x1ec>
 8024582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024584:	445a      	add	r2, fp
 8024586:	9209      	str	r2, [sp, #36]	@ 0x24
 8024588:	f89a 3000 	ldrb.w	r3, [sl]
 802458c:	2b00      	cmp	r3, #0
 802458e:	f000 809f 	beq.w	80246d0 <_vfiprintf_r+0x1ec>
 8024592:	2300      	movs	r3, #0
 8024594:	f04f 32ff 	mov.w	r2, #4294967295
 8024598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802459c:	f10a 0a01 	add.w	sl, sl, #1
 80245a0:	9304      	str	r3, [sp, #16]
 80245a2:	9307      	str	r3, [sp, #28]
 80245a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80245a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80245aa:	4654      	mov	r4, sl
 80245ac:	2205      	movs	r2, #5
 80245ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80245b2:	4853      	ldr	r0, [pc, #332]	@ (8024700 <_vfiprintf_r+0x21c>)
 80245b4:	f7fe f937 	bl	8022826 <memchr>
 80245b8:	9a04      	ldr	r2, [sp, #16]
 80245ba:	b9d8      	cbnz	r0, 80245f4 <_vfiprintf_r+0x110>
 80245bc:	06d1      	lsls	r1, r2, #27
 80245be:	bf44      	itt	mi
 80245c0:	2320      	movmi	r3, #32
 80245c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80245c6:	0713      	lsls	r3, r2, #28
 80245c8:	bf44      	itt	mi
 80245ca:	232b      	movmi	r3, #43	@ 0x2b
 80245cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80245d0:	f89a 3000 	ldrb.w	r3, [sl]
 80245d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80245d6:	d015      	beq.n	8024604 <_vfiprintf_r+0x120>
 80245d8:	4654      	mov	r4, sl
 80245da:	2000      	movs	r0, #0
 80245dc:	f04f 0c0a 	mov.w	ip, #10
 80245e0:	9a07      	ldr	r2, [sp, #28]
 80245e2:	4621      	mov	r1, r4
 80245e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80245e8:	3b30      	subs	r3, #48	@ 0x30
 80245ea:	2b09      	cmp	r3, #9
 80245ec:	d94b      	bls.n	8024686 <_vfiprintf_r+0x1a2>
 80245ee:	b1b0      	cbz	r0, 802461e <_vfiprintf_r+0x13a>
 80245f0:	9207      	str	r2, [sp, #28]
 80245f2:	e014      	b.n	802461e <_vfiprintf_r+0x13a>
 80245f4:	eba0 0308 	sub.w	r3, r0, r8
 80245f8:	fa09 f303 	lsl.w	r3, r9, r3
 80245fc:	4313      	orrs	r3, r2
 80245fe:	46a2      	mov	sl, r4
 8024600:	9304      	str	r3, [sp, #16]
 8024602:	e7d2      	b.n	80245aa <_vfiprintf_r+0xc6>
 8024604:	9b03      	ldr	r3, [sp, #12]
 8024606:	1d19      	adds	r1, r3, #4
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	9103      	str	r1, [sp, #12]
 802460c:	2b00      	cmp	r3, #0
 802460e:	bfbb      	ittet	lt
 8024610:	425b      	neglt	r3, r3
 8024612:	f042 0202 	orrlt.w	r2, r2, #2
 8024616:	9307      	strge	r3, [sp, #28]
 8024618:	9307      	strlt	r3, [sp, #28]
 802461a:	bfb8      	it	lt
 802461c:	9204      	strlt	r2, [sp, #16]
 802461e:	7823      	ldrb	r3, [r4, #0]
 8024620:	2b2e      	cmp	r3, #46	@ 0x2e
 8024622:	d10a      	bne.n	802463a <_vfiprintf_r+0x156>
 8024624:	7863      	ldrb	r3, [r4, #1]
 8024626:	2b2a      	cmp	r3, #42	@ 0x2a
 8024628:	d132      	bne.n	8024690 <_vfiprintf_r+0x1ac>
 802462a:	9b03      	ldr	r3, [sp, #12]
 802462c:	3402      	adds	r4, #2
 802462e:	1d1a      	adds	r2, r3, #4
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	9203      	str	r2, [sp, #12]
 8024634:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024638:	9305      	str	r3, [sp, #20]
 802463a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8024704 <_vfiprintf_r+0x220>
 802463e:	2203      	movs	r2, #3
 8024640:	4650      	mov	r0, sl
 8024642:	7821      	ldrb	r1, [r4, #0]
 8024644:	f7fe f8ef 	bl	8022826 <memchr>
 8024648:	b138      	cbz	r0, 802465a <_vfiprintf_r+0x176>
 802464a:	2240      	movs	r2, #64	@ 0x40
 802464c:	9b04      	ldr	r3, [sp, #16]
 802464e:	eba0 000a 	sub.w	r0, r0, sl
 8024652:	4082      	lsls	r2, r0
 8024654:	4313      	orrs	r3, r2
 8024656:	3401      	adds	r4, #1
 8024658:	9304      	str	r3, [sp, #16]
 802465a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802465e:	2206      	movs	r2, #6
 8024660:	4829      	ldr	r0, [pc, #164]	@ (8024708 <_vfiprintf_r+0x224>)
 8024662:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024666:	f7fe f8de 	bl	8022826 <memchr>
 802466a:	2800      	cmp	r0, #0
 802466c:	d03f      	beq.n	80246ee <_vfiprintf_r+0x20a>
 802466e:	4b27      	ldr	r3, [pc, #156]	@ (802470c <_vfiprintf_r+0x228>)
 8024670:	bb1b      	cbnz	r3, 80246ba <_vfiprintf_r+0x1d6>
 8024672:	9b03      	ldr	r3, [sp, #12]
 8024674:	3307      	adds	r3, #7
 8024676:	f023 0307 	bic.w	r3, r3, #7
 802467a:	3308      	adds	r3, #8
 802467c:	9303      	str	r3, [sp, #12]
 802467e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024680:	443b      	add	r3, r7
 8024682:	9309      	str	r3, [sp, #36]	@ 0x24
 8024684:	e76a      	b.n	802455c <_vfiprintf_r+0x78>
 8024686:	460c      	mov	r4, r1
 8024688:	2001      	movs	r0, #1
 802468a:	fb0c 3202 	mla	r2, ip, r2, r3
 802468e:	e7a8      	b.n	80245e2 <_vfiprintf_r+0xfe>
 8024690:	2300      	movs	r3, #0
 8024692:	f04f 0c0a 	mov.w	ip, #10
 8024696:	4619      	mov	r1, r3
 8024698:	3401      	adds	r4, #1
 802469a:	9305      	str	r3, [sp, #20]
 802469c:	4620      	mov	r0, r4
 802469e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80246a2:	3a30      	subs	r2, #48	@ 0x30
 80246a4:	2a09      	cmp	r2, #9
 80246a6:	d903      	bls.n	80246b0 <_vfiprintf_r+0x1cc>
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	d0c6      	beq.n	802463a <_vfiprintf_r+0x156>
 80246ac:	9105      	str	r1, [sp, #20]
 80246ae:	e7c4      	b.n	802463a <_vfiprintf_r+0x156>
 80246b0:	4604      	mov	r4, r0
 80246b2:	2301      	movs	r3, #1
 80246b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80246b8:	e7f0      	b.n	802469c <_vfiprintf_r+0x1b8>
 80246ba:	ab03      	add	r3, sp, #12
 80246bc:	9300      	str	r3, [sp, #0]
 80246be:	462a      	mov	r2, r5
 80246c0:	4630      	mov	r0, r6
 80246c2:	4b13      	ldr	r3, [pc, #76]	@ (8024710 <_vfiprintf_r+0x22c>)
 80246c4:	a904      	add	r1, sp, #16
 80246c6:	f7fd f943 	bl	8021950 <_printf_float>
 80246ca:	4607      	mov	r7, r0
 80246cc:	1c78      	adds	r0, r7, #1
 80246ce:	d1d6      	bne.n	802467e <_vfiprintf_r+0x19a>
 80246d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80246d2:	07d9      	lsls	r1, r3, #31
 80246d4:	d405      	bmi.n	80246e2 <_vfiprintf_r+0x1fe>
 80246d6:	89ab      	ldrh	r3, [r5, #12]
 80246d8:	059a      	lsls	r2, r3, #22
 80246da:	d402      	bmi.n	80246e2 <_vfiprintf_r+0x1fe>
 80246dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80246de:	f7fe f8a1 	bl	8022824 <__retarget_lock_release_recursive>
 80246e2:	89ab      	ldrh	r3, [r5, #12]
 80246e4:	065b      	lsls	r3, r3, #25
 80246e6:	f53f af1f 	bmi.w	8024528 <_vfiprintf_r+0x44>
 80246ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246ec:	e71e      	b.n	802452c <_vfiprintf_r+0x48>
 80246ee:	ab03      	add	r3, sp, #12
 80246f0:	9300      	str	r3, [sp, #0]
 80246f2:	462a      	mov	r2, r5
 80246f4:	4630      	mov	r0, r6
 80246f6:	4b06      	ldr	r3, [pc, #24]	@ (8024710 <_vfiprintf_r+0x22c>)
 80246f8:	a904      	add	r1, sp, #16
 80246fa:	f7fd fbc7 	bl	8021e8c <_printf_i>
 80246fe:	e7e4      	b.n	80246ca <_vfiprintf_r+0x1e6>
 8024700:	08033092 	.word	0x08033092
 8024704:	08033098 	.word	0x08033098
 8024708:	0803309c 	.word	0x0803309c
 802470c:	08021951 	.word	0x08021951
 8024710:	080244bf 	.word	0x080244bf

08024714 <_scanf_chars>:
 8024714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024718:	4615      	mov	r5, r2
 802471a:	688a      	ldr	r2, [r1, #8]
 802471c:	4680      	mov	r8, r0
 802471e:	460c      	mov	r4, r1
 8024720:	b932      	cbnz	r2, 8024730 <_scanf_chars+0x1c>
 8024722:	698a      	ldr	r2, [r1, #24]
 8024724:	2a00      	cmp	r2, #0
 8024726:	bf14      	ite	ne
 8024728:	f04f 32ff 	movne.w	r2, #4294967295
 802472c:	2201      	moveq	r2, #1
 802472e:	608a      	str	r2, [r1, #8]
 8024730:	2700      	movs	r7, #0
 8024732:	6822      	ldr	r2, [r4, #0]
 8024734:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80247c4 <_scanf_chars+0xb0>
 8024738:	06d1      	lsls	r1, r2, #27
 802473a:	bf5f      	itttt	pl
 802473c:	681a      	ldrpl	r2, [r3, #0]
 802473e:	1d11      	addpl	r1, r2, #4
 8024740:	6019      	strpl	r1, [r3, #0]
 8024742:	6816      	ldrpl	r6, [r2, #0]
 8024744:	69a0      	ldr	r0, [r4, #24]
 8024746:	b188      	cbz	r0, 802476c <_scanf_chars+0x58>
 8024748:	2801      	cmp	r0, #1
 802474a:	d107      	bne.n	802475c <_scanf_chars+0x48>
 802474c:	682b      	ldr	r3, [r5, #0]
 802474e:	781a      	ldrb	r2, [r3, #0]
 8024750:	6963      	ldr	r3, [r4, #20]
 8024752:	5c9b      	ldrb	r3, [r3, r2]
 8024754:	b953      	cbnz	r3, 802476c <_scanf_chars+0x58>
 8024756:	2f00      	cmp	r7, #0
 8024758:	d031      	beq.n	80247be <_scanf_chars+0xaa>
 802475a:	e022      	b.n	80247a2 <_scanf_chars+0x8e>
 802475c:	2802      	cmp	r0, #2
 802475e:	d120      	bne.n	80247a2 <_scanf_chars+0x8e>
 8024760:	682b      	ldr	r3, [r5, #0]
 8024762:	781b      	ldrb	r3, [r3, #0]
 8024764:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024768:	071b      	lsls	r3, r3, #28
 802476a:	d41a      	bmi.n	80247a2 <_scanf_chars+0x8e>
 802476c:	6823      	ldr	r3, [r4, #0]
 802476e:	3701      	adds	r7, #1
 8024770:	06da      	lsls	r2, r3, #27
 8024772:	bf5e      	ittt	pl
 8024774:	682b      	ldrpl	r3, [r5, #0]
 8024776:	781b      	ldrbpl	r3, [r3, #0]
 8024778:	f806 3b01 	strbpl.w	r3, [r6], #1
 802477c:	682a      	ldr	r2, [r5, #0]
 802477e:	686b      	ldr	r3, [r5, #4]
 8024780:	3201      	adds	r2, #1
 8024782:	602a      	str	r2, [r5, #0]
 8024784:	68a2      	ldr	r2, [r4, #8]
 8024786:	3b01      	subs	r3, #1
 8024788:	3a01      	subs	r2, #1
 802478a:	606b      	str	r3, [r5, #4]
 802478c:	60a2      	str	r2, [r4, #8]
 802478e:	b142      	cbz	r2, 80247a2 <_scanf_chars+0x8e>
 8024790:	2b00      	cmp	r3, #0
 8024792:	dcd7      	bgt.n	8024744 <_scanf_chars+0x30>
 8024794:	4629      	mov	r1, r5
 8024796:	4640      	mov	r0, r8
 8024798:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802479c:	4798      	blx	r3
 802479e:	2800      	cmp	r0, #0
 80247a0:	d0d0      	beq.n	8024744 <_scanf_chars+0x30>
 80247a2:	6823      	ldr	r3, [r4, #0]
 80247a4:	f013 0310 	ands.w	r3, r3, #16
 80247a8:	d105      	bne.n	80247b6 <_scanf_chars+0xa2>
 80247aa:	68e2      	ldr	r2, [r4, #12]
 80247ac:	3201      	adds	r2, #1
 80247ae:	60e2      	str	r2, [r4, #12]
 80247b0:	69a2      	ldr	r2, [r4, #24]
 80247b2:	b102      	cbz	r2, 80247b6 <_scanf_chars+0xa2>
 80247b4:	7033      	strb	r3, [r6, #0]
 80247b6:	2000      	movs	r0, #0
 80247b8:	6923      	ldr	r3, [r4, #16]
 80247ba:	443b      	add	r3, r7
 80247bc:	6123      	str	r3, [r4, #16]
 80247be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80247c2:	bf00      	nop
 80247c4:	080330c9 	.word	0x080330c9

080247c8 <_scanf_i>:
 80247c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247cc:	460c      	mov	r4, r1
 80247ce:	4698      	mov	r8, r3
 80247d0:	4b72      	ldr	r3, [pc, #456]	@ (802499c <_scanf_i+0x1d4>)
 80247d2:	b087      	sub	sp, #28
 80247d4:	4682      	mov	sl, r0
 80247d6:	4616      	mov	r6, r2
 80247d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80247dc:	ab03      	add	r3, sp, #12
 80247de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80247e2:	4b6f      	ldr	r3, [pc, #444]	@ (80249a0 <_scanf_i+0x1d8>)
 80247e4:	69a1      	ldr	r1, [r4, #24]
 80247e6:	4a6f      	ldr	r2, [pc, #444]	@ (80249a4 <_scanf_i+0x1dc>)
 80247e8:	4627      	mov	r7, r4
 80247ea:	2903      	cmp	r1, #3
 80247ec:	bf08      	it	eq
 80247ee:	461a      	moveq	r2, r3
 80247f0:	68a3      	ldr	r3, [r4, #8]
 80247f2:	9201      	str	r2, [sp, #4]
 80247f4:	1e5a      	subs	r2, r3, #1
 80247f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80247fa:	bf81      	itttt	hi
 80247fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024800:	eb03 0905 	addhi.w	r9, r3, r5
 8024804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024808:	60a3      	strhi	r3, [r4, #8]
 802480a:	f857 3b1c 	ldr.w	r3, [r7], #28
 802480e:	bf98      	it	ls
 8024810:	f04f 0900 	movls.w	r9, #0
 8024814:	463d      	mov	r5, r7
 8024816:	f04f 0b00 	mov.w	fp, #0
 802481a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802481e:	6023      	str	r3, [r4, #0]
 8024820:	6831      	ldr	r1, [r6, #0]
 8024822:	ab03      	add	r3, sp, #12
 8024824:	2202      	movs	r2, #2
 8024826:	7809      	ldrb	r1, [r1, #0]
 8024828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802482c:	f7fd fffb 	bl	8022826 <memchr>
 8024830:	b328      	cbz	r0, 802487e <_scanf_i+0xb6>
 8024832:	f1bb 0f01 	cmp.w	fp, #1
 8024836:	d159      	bne.n	80248ec <_scanf_i+0x124>
 8024838:	6862      	ldr	r2, [r4, #4]
 802483a:	b92a      	cbnz	r2, 8024848 <_scanf_i+0x80>
 802483c:	2108      	movs	r1, #8
 802483e:	6822      	ldr	r2, [r4, #0]
 8024840:	6061      	str	r1, [r4, #4]
 8024842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8024846:	6022      	str	r2, [r4, #0]
 8024848:	6822      	ldr	r2, [r4, #0]
 802484a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802484e:	6022      	str	r2, [r4, #0]
 8024850:	68a2      	ldr	r2, [r4, #8]
 8024852:	1e51      	subs	r1, r2, #1
 8024854:	60a1      	str	r1, [r4, #8]
 8024856:	b192      	cbz	r2, 802487e <_scanf_i+0xb6>
 8024858:	6832      	ldr	r2, [r6, #0]
 802485a:	1c51      	adds	r1, r2, #1
 802485c:	6031      	str	r1, [r6, #0]
 802485e:	7812      	ldrb	r2, [r2, #0]
 8024860:	f805 2b01 	strb.w	r2, [r5], #1
 8024864:	6872      	ldr	r2, [r6, #4]
 8024866:	3a01      	subs	r2, #1
 8024868:	2a00      	cmp	r2, #0
 802486a:	6072      	str	r2, [r6, #4]
 802486c:	dc07      	bgt.n	802487e <_scanf_i+0xb6>
 802486e:	4631      	mov	r1, r6
 8024870:	4650      	mov	r0, sl
 8024872:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8024876:	4790      	blx	r2
 8024878:	2800      	cmp	r0, #0
 802487a:	f040 8085 	bne.w	8024988 <_scanf_i+0x1c0>
 802487e:	f10b 0b01 	add.w	fp, fp, #1
 8024882:	f1bb 0f03 	cmp.w	fp, #3
 8024886:	d1cb      	bne.n	8024820 <_scanf_i+0x58>
 8024888:	6863      	ldr	r3, [r4, #4]
 802488a:	b90b      	cbnz	r3, 8024890 <_scanf_i+0xc8>
 802488c:	230a      	movs	r3, #10
 802488e:	6063      	str	r3, [r4, #4]
 8024890:	6863      	ldr	r3, [r4, #4]
 8024892:	4945      	ldr	r1, [pc, #276]	@ (80249a8 <_scanf_i+0x1e0>)
 8024894:	6960      	ldr	r0, [r4, #20]
 8024896:	1ac9      	subs	r1, r1, r3
 8024898:	f000 f9a3 	bl	8024be2 <__sccl>
 802489c:	f04f 0b00 	mov.w	fp, #0
 80248a0:	68a3      	ldr	r3, [r4, #8]
 80248a2:	6822      	ldr	r2, [r4, #0]
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d03d      	beq.n	8024924 <_scanf_i+0x15c>
 80248a8:	6831      	ldr	r1, [r6, #0]
 80248aa:	6960      	ldr	r0, [r4, #20]
 80248ac:	f891 c000 	ldrb.w	ip, [r1]
 80248b0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80248b4:	2800      	cmp	r0, #0
 80248b6:	d035      	beq.n	8024924 <_scanf_i+0x15c>
 80248b8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80248bc:	d124      	bne.n	8024908 <_scanf_i+0x140>
 80248be:	0510      	lsls	r0, r2, #20
 80248c0:	d522      	bpl.n	8024908 <_scanf_i+0x140>
 80248c2:	f10b 0b01 	add.w	fp, fp, #1
 80248c6:	f1b9 0f00 	cmp.w	r9, #0
 80248ca:	d003      	beq.n	80248d4 <_scanf_i+0x10c>
 80248cc:	3301      	adds	r3, #1
 80248ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80248d2:	60a3      	str	r3, [r4, #8]
 80248d4:	6873      	ldr	r3, [r6, #4]
 80248d6:	3b01      	subs	r3, #1
 80248d8:	2b00      	cmp	r3, #0
 80248da:	6073      	str	r3, [r6, #4]
 80248dc:	dd1b      	ble.n	8024916 <_scanf_i+0x14e>
 80248de:	6833      	ldr	r3, [r6, #0]
 80248e0:	3301      	adds	r3, #1
 80248e2:	6033      	str	r3, [r6, #0]
 80248e4:	68a3      	ldr	r3, [r4, #8]
 80248e6:	3b01      	subs	r3, #1
 80248e8:	60a3      	str	r3, [r4, #8]
 80248ea:	e7d9      	b.n	80248a0 <_scanf_i+0xd8>
 80248ec:	f1bb 0f02 	cmp.w	fp, #2
 80248f0:	d1ae      	bne.n	8024850 <_scanf_i+0x88>
 80248f2:	6822      	ldr	r2, [r4, #0]
 80248f4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80248f8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80248fc:	d1c4      	bne.n	8024888 <_scanf_i+0xc0>
 80248fe:	2110      	movs	r1, #16
 8024900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8024904:	6061      	str	r1, [r4, #4]
 8024906:	e7a2      	b.n	802484e <_scanf_i+0x86>
 8024908:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802490c:	6022      	str	r2, [r4, #0]
 802490e:	780b      	ldrb	r3, [r1, #0]
 8024910:	f805 3b01 	strb.w	r3, [r5], #1
 8024914:	e7de      	b.n	80248d4 <_scanf_i+0x10c>
 8024916:	4631      	mov	r1, r6
 8024918:	4650      	mov	r0, sl
 802491a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802491e:	4798      	blx	r3
 8024920:	2800      	cmp	r0, #0
 8024922:	d0df      	beq.n	80248e4 <_scanf_i+0x11c>
 8024924:	6823      	ldr	r3, [r4, #0]
 8024926:	05d9      	lsls	r1, r3, #23
 8024928:	d50d      	bpl.n	8024946 <_scanf_i+0x17e>
 802492a:	42bd      	cmp	r5, r7
 802492c:	d909      	bls.n	8024942 <_scanf_i+0x17a>
 802492e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024932:	4632      	mov	r2, r6
 8024934:	4650      	mov	r0, sl
 8024936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802493a:	f105 39ff 	add.w	r9, r5, #4294967295
 802493e:	4798      	blx	r3
 8024940:	464d      	mov	r5, r9
 8024942:	42bd      	cmp	r5, r7
 8024944:	d028      	beq.n	8024998 <_scanf_i+0x1d0>
 8024946:	6822      	ldr	r2, [r4, #0]
 8024948:	f012 0210 	ands.w	r2, r2, #16
 802494c:	d113      	bne.n	8024976 <_scanf_i+0x1ae>
 802494e:	702a      	strb	r2, [r5, #0]
 8024950:	4639      	mov	r1, r7
 8024952:	6863      	ldr	r3, [r4, #4]
 8024954:	4650      	mov	r0, sl
 8024956:	9e01      	ldr	r6, [sp, #4]
 8024958:	47b0      	blx	r6
 802495a:	f8d8 3000 	ldr.w	r3, [r8]
 802495e:	6821      	ldr	r1, [r4, #0]
 8024960:	1d1a      	adds	r2, r3, #4
 8024962:	f8c8 2000 	str.w	r2, [r8]
 8024966:	f011 0f20 	tst.w	r1, #32
 802496a:	681b      	ldr	r3, [r3, #0]
 802496c:	d00f      	beq.n	802498e <_scanf_i+0x1c6>
 802496e:	6018      	str	r0, [r3, #0]
 8024970:	68e3      	ldr	r3, [r4, #12]
 8024972:	3301      	adds	r3, #1
 8024974:	60e3      	str	r3, [r4, #12]
 8024976:	2000      	movs	r0, #0
 8024978:	6923      	ldr	r3, [r4, #16]
 802497a:	1bed      	subs	r5, r5, r7
 802497c:	445d      	add	r5, fp
 802497e:	442b      	add	r3, r5
 8024980:	6123      	str	r3, [r4, #16]
 8024982:	b007      	add	sp, #28
 8024984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024988:	f04f 0b00 	mov.w	fp, #0
 802498c:	e7ca      	b.n	8024924 <_scanf_i+0x15c>
 802498e:	07ca      	lsls	r2, r1, #31
 8024990:	bf4c      	ite	mi
 8024992:	8018      	strhmi	r0, [r3, #0]
 8024994:	6018      	strpl	r0, [r3, #0]
 8024996:	e7eb      	b.n	8024970 <_scanf_i+0x1a8>
 8024998:	2001      	movs	r0, #1
 802499a:	e7f2      	b.n	8024982 <_scanf_i+0x1ba>
 802499c:	08027f88 	.word	0x08027f88
 80249a0:	080217e9 	.word	0x080217e9
 80249a4:	08024ebd 	.word	0x08024ebd
 80249a8:	080330b3 	.word	0x080330b3

080249ac <__sflush_r>:
 80249ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80249b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249b2:	0716      	lsls	r6, r2, #28
 80249b4:	4605      	mov	r5, r0
 80249b6:	460c      	mov	r4, r1
 80249b8:	d454      	bmi.n	8024a64 <__sflush_r+0xb8>
 80249ba:	684b      	ldr	r3, [r1, #4]
 80249bc:	2b00      	cmp	r3, #0
 80249be:	dc02      	bgt.n	80249c6 <__sflush_r+0x1a>
 80249c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	dd48      	ble.n	8024a58 <__sflush_r+0xac>
 80249c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80249c8:	2e00      	cmp	r6, #0
 80249ca:	d045      	beq.n	8024a58 <__sflush_r+0xac>
 80249cc:	2300      	movs	r3, #0
 80249ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80249d2:	682f      	ldr	r7, [r5, #0]
 80249d4:	6a21      	ldr	r1, [r4, #32]
 80249d6:	602b      	str	r3, [r5, #0]
 80249d8:	d030      	beq.n	8024a3c <__sflush_r+0x90>
 80249da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80249dc:	89a3      	ldrh	r3, [r4, #12]
 80249de:	0759      	lsls	r1, r3, #29
 80249e0:	d505      	bpl.n	80249ee <__sflush_r+0x42>
 80249e2:	6863      	ldr	r3, [r4, #4]
 80249e4:	1ad2      	subs	r2, r2, r3
 80249e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80249e8:	b10b      	cbz	r3, 80249ee <__sflush_r+0x42>
 80249ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80249ec:	1ad2      	subs	r2, r2, r3
 80249ee:	2300      	movs	r3, #0
 80249f0:	4628      	mov	r0, r5
 80249f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80249f4:	6a21      	ldr	r1, [r4, #32]
 80249f6:	47b0      	blx	r6
 80249f8:	1c43      	adds	r3, r0, #1
 80249fa:	89a3      	ldrh	r3, [r4, #12]
 80249fc:	d106      	bne.n	8024a0c <__sflush_r+0x60>
 80249fe:	6829      	ldr	r1, [r5, #0]
 8024a00:	291d      	cmp	r1, #29
 8024a02:	d82b      	bhi.n	8024a5c <__sflush_r+0xb0>
 8024a04:	4a28      	ldr	r2, [pc, #160]	@ (8024aa8 <__sflush_r+0xfc>)
 8024a06:	40ca      	lsrs	r2, r1
 8024a08:	07d6      	lsls	r6, r2, #31
 8024a0a:	d527      	bpl.n	8024a5c <__sflush_r+0xb0>
 8024a0c:	2200      	movs	r2, #0
 8024a0e:	6062      	str	r2, [r4, #4]
 8024a10:	6922      	ldr	r2, [r4, #16]
 8024a12:	04d9      	lsls	r1, r3, #19
 8024a14:	6022      	str	r2, [r4, #0]
 8024a16:	d504      	bpl.n	8024a22 <__sflush_r+0x76>
 8024a18:	1c42      	adds	r2, r0, #1
 8024a1a:	d101      	bne.n	8024a20 <__sflush_r+0x74>
 8024a1c:	682b      	ldr	r3, [r5, #0]
 8024a1e:	b903      	cbnz	r3, 8024a22 <__sflush_r+0x76>
 8024a20:	6560      	str	r0, [r4, #84]	@ 0x54
 8024a22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024a24:	602f      	str	r7, [r5, #0]
 8024a26:	b1b9      	cbz	r1, 8024a58 <__sflush_r+0xac>
 8024a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024a2c:	4299      	cmp	r1, r3
 8024a2e:	d002      	beq.n	8024a36 <__sflush_r+0x8a>
 8024a30:	4628      	mov	r0, r5
 8024a32:	f7fe fd91 	bl	8023558 <_free_r>
 8024a36:	2300      	movs	r3, #0
 8024a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8024a3a:	e00d      	b.n	8024a58 <__sflush_r+0xac>
 8024a3c:	2301      	movs	r3, #1
 8024a3e:	4628      	mov	r0, r5
 8024a40:	47b0      	blx	r6
 8024a42:	4602      	mov	r2, r0
 8024a44:	1c50      	adds	r0, r2, #1
 8024a46:	d1c9      	bne.n	80249dc <__sflush_r+0x30>
 8024a48:	682b      	ldr	r3, [r5, #0]
 8024a4a:	2b00      	cmp	r3, #0
 8024a4c:	d0c6      	beq.n	80249dc <__sflush_r+0x30>
 8024a4e:	2b1d      	cmp	r3, #29
 8024a50:	d001      	beq.n	8024a56 <__sflush_r+0xaa>
 8024a52:	2b16      	cmp	r3, #22
 8024a54:	d11d      	bne.n	8024a92 <__sflush_r+0xe6>
 8024a56:	602f      	str	r7, [r5, #0]
 8024a58:	2000      	movs	r0, #0
 8024a5a:	e021      	b.n	8024aa0 <__sflush_r+0xf4>
 8024a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024a60:	b21b      	sxth	r3, r3
 8024a62:	e01a      	b.n	8024a9a <__sflush_r+0xee>
 8024a64:	690f      	ldr	r7, [r1, #16]
 8024a66:	2f00      	cmp	r7, #0
 8024a68:	d0f6      	beq.n	8024a58 <__sflush_r+0xac>
 8024a6a:	0793      	lsls	r3, r2, #30
 8024a6c:	bf18      	it	ne
 8024a6e:	2300      	movne	r3, #0
 8024a70:	680e      	ldr	r6, [r1, #0]
 8024a72:	bf08      	it	eq
 8024a74:	694b      	ldreq	r3, [r1, #20]
 8024a76:	1bf6      	subs	r6, r6, r7
 8024a78:	600f      	str	r7, [r1, #0]
 8024a7a:	608b      	str	r3, [r1, #8]
 8024a7c:	2e00      	cmp	r6, #0
 8024a7e:	ddeb      	ble.n	8024a58 <__sflush_r+0xac>
 8024a80:	4633      	mov	r3, r6
 8024a82:	463a      	mov	r2, r7
 8024a84:	4628      	mov	r0, r5
 8024a86:	6a21      	ldr	r1, [r4, #32]
 8024a88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8024a8c:	47e0      	blx	ip
 8024a8e:	2800      	cmp	r0, #0
 8024a90:	dc07      	bgt.n	8024aa2 <__sflush_r+0xf6>
 8024a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8024a9e:	81a3      	strh	r3, [r4, #12]
 8024aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024aa2:	4407      	add	r7, r0
 8024aa4:	1a36      	subs	r6, r6, r0
 8024aa6:	e7e9      	b.n	8024a7c <__sflush_r+0xd0>
 8024aa8:	20400001 	.word	0x20400001

08024aac <_fflush_r>:
 8024aac:	b538      	push	{r3, r4, r5, lr}
 8024aae:	690b      	ldr	r3, [r1, #16]
 8024ab0:	4605      	mov	r5, r0
 8024ab2:	460c      	mov	r4, r1
 8024ab4:	b913      	cbnz	r3, 8024abc <_fflush_r+0x10>
 8024ab6:	2500      	movs	r5, #0
 8024ab8:	4628      	mov	r0, r5
 8024aba:	bd38      	pop	{r3, r4, r5, pc}
 8024abc:	b118      	cbz	r0, 8024ac6 <_fflush_r+0x1a>
 8024abe:	6a03      	ldr	r3, [r0, #32]
 8024ac0:	b90b      	cbnz	r3, 8024ac6 <_fflush_r+0x1a>
 8024ac2:	f7fd fb8d 	bl	80221e0 <__sinit>
 8024ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024aca:	2b00      	cmp	r3, #0
 8024acc:	d0f3      	beq.n	8024ab6 <_fflush_r+0xa>
 8024ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024ad0:	07d0      	lsls	r0, r2, #31
 8024ad2:	d404      	bmi.n	8024ade <_fflush_r+0x32>
 8024ad4:	0599      	lsls	r1, r3, #22
 8024ad6:	d402      	bmi.n	8024ade <_fflush_r+0x32>
 8024ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024ada:	f7fd fea2 	bl	8022822 <__retarget_lock_acquire_recursive>
 8024ade:	4628      	mov	r0, r5
 8024ae0:	4621      	mov	r1, r4
 8024ae2:	f7ff ff63 	bl	80249ac <__sflush_r>
 8024ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024ae8:	4605      	mov	r5, r0
 8024aea:	07da      	lsls	r2, r3, #31
 8024aec:	d4e4      	bmi.n	8024ab8 <_fflush_r+0xc>
 8024aee:	89a3      	ldrh	r3, [r4, #12]
 8024af0:	059b      	lsls	r3, r3, #22
 8024af2:	d4e1      	bmi.n	8024ab8 <_fflush_r+0xc>
 8024af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024af6:	f7fd fe95 	bl	8022824 <__retarget_lock_release_recursive>
 8024afa:	e7dd      	b.n	8024ab8 <_fflush_r+0xc>

08024afc <fiprintf>:
 8024afc:	b40e      	push	{r1, r2, r3}
 8024afe:	b503      	push	{r0, r1, lr}
 8024b00:	4601      	mov	r1, r0
 8024b02:	ab03      	add	r3, sp, #12
 8024b04:	4805      	ldr	r0, [pc, #20]	@ (8024b1c <fiprintf+0x20>)
 8024b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8024b0a:	6800      	ldr	r0, [r0, #0]
 8024b0c:	9301      	str	r3, [sp, #4]
 8024b0e:	f7ff fce9 	bl	80244e4 <_vfiprintf_r>
 8024b12:	b002      	add	sp, #8
 8024b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8024b18:	b003      	add	sp, #12
 8024b1a:	4770      	bx	lr
 8024b1c:	20000134 	.word	0x20000134

08024b20 <__swhatbuf_r>:
 8024b20:	b570      	push	{r4, r5, r6, lr}
 8024b22:	460c      	mov	r4, r1
 8024b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b28:	4615      	mov	r5, r2
 8024b2a:	2900      	cmp	r1, #0
 8024b2c:	461e      	mov	r6, r3
 8024b2e:	b096      	sub	sp, #88	@ 0x58
 8024b30:	da0c      	bge.n	8024b4c <__swhatbuf_r+0x2c>
 8024b32:	89a3      	ldrh	r3, [r4, #12]
 8024b34:	2100      	movs	r1, #0
 8024b36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024b3a:	bf14      	ite	ne
 8024b3c:	2340      	movne	r3, #64	@ 0x40
 8024b3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024b42:	2000      	movs	r0, #0
 8024b44:	6031      	str	r1, [r6, #0]
 8024b46:	602b      	str	r3, [r5, #0]
 8024b48:	b016      	add	sp, #88	@ 0x58
 8024b4a:	bd70      	pop	{r4, r5, r6, pc}
 8024b4c:	466a      	mov	r2, sp
 8024b4e:	f000 f8b9 	bl	8024cc4 <_fstat_r>
 8024b52:	2800      	cmp	r0, #0
 8024b54:	dbed      	blt.n	8024b32 <__swhatbuf_r+0x12>
 8024b56:	9901      	ldr	r1, [sp, #4]
 8024b58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024b5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024b60:	4259      	negs	r1, r3
 8024b62:	4159      	adcs	r1, r3
 8024b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024b68:	e7eb      	b.n	8024b42 <__swhatbuf_r+0x22>

08024b6a <__smakebuf_r>:
 8024b6a:	898b      	ldrh	r3, [r1, #12]
 8024b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024b6e:	079d      	lsls	r5, r3, #30
 8024b70:	4606      	mov	r6, r0
 8024b72:	460c      	mov	r4, r1
 8024b74:	d507      	bpl.n	8024b86 <__smakebuf_r+0x1c>
 8024b76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024b7a:	6023      	str	r3, [r4, #0]
 8024b7c:	6123      	str	r3, [r4, #16]
 8024b7e:	2301      	movs	r3, #1
 8024b80:	6163      	str	r3, [r4, #20]
 8024b82:	b003      	add	sp, #12
 8024b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b86:	466a      	mov	r2, sp
 8024b88:	ab01      	add	r3, sp, #4
 8024b8a:	f7ff ffc9 	bl	8024b20 <__swhatbuf_r>
 8024b8e:	9f00      	ldr	r7, [sp, #0]
 8024b90:	4605      	mov	r5, r0
 8024b92:	4639      	mov	r1, r7
 8024b94:	4630      	mov	r0, r6
 8024b96:	f7fe fd51 	bl	802363c <_malloc_r>
 8024b9a:	b948      	cbnz	r0, 8024bb0 <__smakebuf_r+0x46>
 8024b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ba0:	059a      	lsls	r2, r3, #22
 8024ba2:	d4ee      	bmi.n	8024b82 <__smakebuf_r+0x18>
 8024ba4:	f023 0303 	bic.w	r3, r3, #3
 8024ba8:	f043 0302 	orr.w	r3, r3, #2
 8024bac:	81a3      	strh	r3, [r4, #12]
 8024bae:	e7e2      	b.n	8024b76 <__smakebuf_r+0xc>
 8024bb0:	89a3      	ldrh	r3, [r4, #12]
 8024bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024bba:	81a3      	strh	r3, [r4, #12]
 8024bbc:	9b01      	ldr	r3, [sp, #4]
 8024bbe:	6020      	str	r0, [r4, #0]
 8024bc0:	b15b      	cbz	r3, 8024bda <__smakebuf_r+0x70>
 8024bc2:	4630      	mov	r0, r6
 8024bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024bc8:	f000 f88e 	bl	8024ce8 <_isatty_r>
 8024bcc:	b128      	cbz	r0, 8024bda <__smakebuf_r+0x70>
 8024bce:	89a3      	ldrh	r3, [r4, #12]
 8024bd0:	f023 0303 	bic.w	r3, r3, #3
 8024bd4:	f043 0301 	orr.w	r3, r3, #1
 8024bd8:	81a3      	strh	r3, [r4, #12]
 8024bda:	89a3      	ldrh	r3, [r4, #12]
 8024bdc:	431d      	orrs	r5, r3
 8024bde:	81a5      	strh	r5, [r4, #12]
 8024be0:	e7cf      	b.n	8024b82 <__smakebuf_r+0x18>

08024be2 <__sccl>:
 8024be2:	b570      	push	{r4, r5, r6, lr}
 8024be4:	780b      	ldrb	r3, [r1, #0]
 8024be6:	4604      	mov	r4, r0
 8024be8:	2b5e      	cmp	r3, #94	@ 0x5e
 8024bea:	bf0b      	itete	eq
 8024bec:	784b      	ldrbeq	r3, [r1, #1]
 8024bee:	1c4a      	addne	r2, r1, #1
 8024bf0:	1c8a      	addeq	r2, r1, #2
 8024bf2:	2100      	movne	r1, #0
 8024bf4:	bf08      	it	eq
 8024bf6:	2101      	moveq	r1, #1
 8024bf8:	3801      	subs	r0, #1
 8024bfa:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8024bfe:	f800 1f01 	strb.w	r1, [r0, #1]!
 8024c02:	42a8      	cmp	r0, r5
 8024c04:	d1fb      	bne.n	8024bfe <__sccl+0x1c>
 8024c06:	b90b      	cbnz	r3, 8024c0c <__sccl+0x2a>
 8024c08:	1e50      	subs	r0, r2, #1
 8024c0a:	bd70      	pop	{r4, r5, r6, pc}
 8024c0c:	f081 0101 	eor.w	r1, r1, #1
 8024c10:	4610      	mov	r0, r2
 8024c12:	54e1      	strb	r1, [r4, r3]
 8024c14:	4602      	mov	r2, r0
 8024c16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024c1a:	2d2d      	cmp	r5, #45	@ 0x2d
 8024c1c:	d005      	beq.n	8024c2a <__sccl+0x48>
 8024c1e:	2d5d      	cmp	r5, #93	@ 0x5d
 8024c20:	d016      	beq.n	8024c50 <__sccl+0x6e>
 8024c22:	2d00      	cmp	r5, #0
 8024c24:	d0f1      	beq.n	8024c0a <__sccl+0x28>
 8024c26:	462b      	mov	r3, r5
 8024c28:	e7f2      	b.n	8024c10 <__sccl+0x2e>
 8024c2a:	7846      	ldrb	r6, [r0, #1]
 8024c2c:	2e5d      	cmp	r6, #93	@ 0x5d
 8024c2e:	d0fa      	beq.n	8024c26 <__sccl+0x44>
 8024c30:	42b3      	cmp	r3, r6
 8024c32:	dcf8      	bgt.n	8024c26 <__sccl+0x44>
 8024c34:	461a      	mov	r2, r3
 8024c36:	3002      	adds	r0, #2
 8024c38:	3201      	adds	r2, #1
 8024c3a:	4296      	cmp	r6, r2
 8024c3c:	54a1      	strb	r1, [r4, r2]
 8024c3e:	dcfb      	bgt.n	8024c38 <__sccl+0x56>
 8024c40:	1af2      	subs	r2, r6, r3
 8024c42:	3a01      	subs	r2, #1
 8024c44:	42b3      	cmp	r3, r6
 8024c46:	bfa8      	it	ge
 8024c48:	2200      	movge	r2, #0
 8024c4a:	1c5d      	adds	r5, r3, #1
 8024c4c:	18ab      	adds	r3, r5, r2
 8024c4e:	e7e1      	b.n	8024c14 <__sccl+0x32>
 8024c50:	4610      	mov	r0, r2
 8024c52:	e7da      	b.n	8024c0a <__sccl+0x28>

08024c54 <__submore>:
 8024c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c58:	460c      	mov	r4, r1
 8024c5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024c60:	4299      	cmp	r1, r3
 8024c62:	d11b      	bne.n	8024c9c <__submore+0x48>
 8024c64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8024c68:	f7fe fce8 	bl	802363c <_malloc_r>
 8024c6c:	b918      	cbnz	r0, 8024c76 <__submore+0x22>
 8024c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8024c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024c7a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8024c7c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8024c80:	6360      	str	r0, [r4, #52]	@ 0x34
 8024c82:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8024c86:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8024c8a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8024c8e:	7043      	strb	r3, [r0, #1]
 8024c90:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8024c94:	7003      	strb	r3, [r0, #0]
 8024c96:	6020      	str	r0, [r4, #0]
 8024c98:	2000      	movs	r0, #0
 8024c9a:	e7ea      	b.n	8024c72 <__submore+0x1e>
 8024c9c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8024c9e:	0077      	lsls	r7, r6, #1
 8024ca0:	463a      	mov	r2, r7
 8024ca2:	f000 f86e 	bl	8024d82 <_realloc_r>
 8024ca6:	4605      	mov	r5, r0
 8024ca8:	2800      	cmp	r0, #0
 8024caa:	d0e0      	beq.n	8024c6e <__submore+0x1a>
 8024cac:	eb00 0806 	add.w	r8, r0, r6
 8024cb0:	4601      	mov	r1, r0
 8024cb2:	4632      	mov	r2, r6
 8024cb4:	4640      	mov	r0, r8
 8024cb6:	f7fd fdc4 	bl	8022842 <memcpy>
 8024cba:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8024cbe:	f8c4 8000 	str.w	r8, [r4]
 8024cc2:	e7e9      	b.n	8024c98 <__submore+0x44>

08024cc4 <_fstat_r>:
 8024cc4:	b538      	push	{r3, r4, r5, lr}
 8024cc6:	2300      	movs	r3, #0
 8024cc8:	4d06      	ldr	r5, [pc, #24]	@ (8024ce4 <_fstat_r+0x20>)
 8024cca:	4604      	mov	r4, r0
 8024ccc:	4608      	mov	r0, r1
 8024cce:	4611      	mov	r1, r2
 8024cd0:	602b      	str	r3, [r5, #0]
 8024cd2:	f7de fed0 	bl	8003a76 <_fstat>
 8024cd6:	1c43      	adds	r3, r0, #1
 8024cd8:	d102      	bne.n	8024ce0 <_fstat_r+0x1c>
 8024cda:	682b      	ldr	r3, [r5, #0]
 8024cdc:	b103      	cbz	r3, 8024ce0 <_fstat_r+0x1c>
 8024cde:	6023      	str	r3, [r4, #0]
 8024ce0:	bd38      	pop	{r3, r4, r5, pc}
 8024ce2:	bf00      	nop
 8024ce4:	2000c060 	.word	0x2000c060

08024ce8 <_isatty_r>:
 8024ce8:	b538      	push	{r3, r4, r5, lr}
 8024cea:	2300      	movs	r3, #0
 8024cec:	4d05      	ldr	r5, [pc, #20]	@ (8024d04 <_isatty_r+0x1c>)
 8024cee:	4604      	mov	r4, r0
 8024cf0:	4608      	mov	r0, r1
 8024cf2:	602b      	str	r3, [r5, #0]
 8024cf4:	f7de fece 	bl	8003a94 <_isatty>
 8024cf8:	1c43      	adds	r3, r0, #1
 8024cfa:	d102      	bne.n	8024d02 <_isatty_r+0x1a>
 8024cfc:	682b      	ldr	r3, [r5, #0]
 8024cfe:	b103      	cbz	r3, 8024d02 <_isatty_r+0x1a>
 8024d00:	6023      	str	r3, [r4, #0]
 8024d02:	bd38      	pop	{r3, r4, r5, pc}
 8024d04:	2000c060 	.word	0x2000c060

08024d08 <_sbrk_r>:
 8024d08:	b538      	push	{r3, r4, r5, lr}
 8024d0a:	2300      	movs	r3, #0
 8024d0c:	4d05      	ldr	r5, [pc, #20]	@ (8024d24 <_sbrk_r+0x1c>)
 8024d0e:	4604      	mov	r4, r0
 8024d10:	4608      	mov	r0, r1
 8024d12:	602b      	str	r3, [r5, #0]
 8024d14:	f7de fed4 	bl	8003ac0 <_sbrk>
 8024d18:	1c43      	adds	r3, r0, #1
 8024d1a:	d102      	bne.n	8024d22 <_sbrk_r+0x1a>
 8024d1c:	682b      	ldr	r3, [r5, #0]
 8024d1e:	b103      	cbz	r3, 8024d22 <_sbrk_r+0x1a>
 8024d20:	6023      	str	r3, [r4, #0]
 8024d22:	bd38      	pop	{r3, r4, r5, pc}
 8024d24:	2000c060 	.word	0x2000c060

08024d28 <abort>:
 8024d28:	2006      	movs	r0, #6
 8024d2a:	b508      	push	{r3, lr}
 8024d2c:	f000 f8fe 	bl	8024f2c <raise>
 8024d30:	2001      	movs	r0, #1
 8024d32:	f7de fe51 	bl	80039d8 <_exit>

08024d36 <_calloc_r>:
 8024d36:	b570      	push	{r4, r5, r6, lr}
 8024d38:	fba1 5402 	umull	r5, r4, r1, r2
 8024d3c:	b934      	cbnz	r4, 8024d4c <_calloc_r+0x16>
 8024d3e:	4629      	mov	r1, r5
 8024d40:	f7fe fc7c 	bl	802363c <_malloc_r>
 8024d44:	4606      	mov	r6, r0
 8024d46:	b928      	cbnz	r0, 8024d54 <_calloc_r+0x1e>
 8024d48:	4630      	mov	r0, r6
 8024d4a:	bd70      	pop	{r4, r5, r6, pc}
 8024d4c:	220c      	movs	r2, #12
 8024d4e:	2600      	movs	r6, #0
 8024d50:	6002      	str	r2, [r0, #0]
 8024d52:	e7f9      	b.n	8024d48 <_calloc_r+0x12>
 8024d54:	462a      	mov	r2, r5
 8024d56:	4621      	mov	r1, r4
 8024d58:	f7fd fc4e 	bl	80225f8 <memset>
 8024d5c:	e7f4      	b.n	8024d48 <_calloc_r+0x12>

08024d5e <__ascii_mbtowc>:
 8024d5e:	b082      	sub	sp, #8
 8024d60:	b901      	cbnz	r1, 8024d64 <__ascii_mbtowc+0x6>
 8024d62:	a901      	add	r1, sp, #4
 8024d64:	b142      	cbz	r2, 8024d78 <__ascii_mbtowc+0x1a>
 8024d66:	b14b      	cbz	r3, 8024d7c <__ascii_mbtowc+0x1e>
 8024d68:	7813      	ldrb	r3, [r2, #0]
 8024d6a:	600b      	str	r3, [r1, #0]
 8024d6c:	7812      	ldrb	r2, [r2, #0]
 8024d6e:	1e10      	subs	r0, r2, #0
 8024d70:	bf18      	it	ne
 8024d72:	2001      	movne	r0, #1
 8024d74:	b002      	add	sp, #8
 8024d76:	4770      	bx	lr
 8024d78:	4610      	mov	r0, r2
 8024d7a:	e7fb      	b.n	8024d74 <__ascii_mbtowc+0x16>
 8024d7c:	f06f 0001 	mvn.w	r0, #1
 8024d80:	e7f8      	b.n	8024d74 <__ascii_mbtowc+0x16>

08024d82 <_realloc_r>:
 8024d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d86:	4607      	mov	r7, r0
 8024d88:	4614      	mov	r4, r2
 8024d8a:	460d      	mov	r5, r1
 8024d8c:	b921      	cbnz	r1, 8024d98 <_realloc_r+0x16>
 8024d8e:	4611      	mov	r1, r2
 8024d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d94:	f7fe bc52 	b.w	802363c <_malloc_r>
 8024d98:	b92a      	cbnz	r2, 8024da6 <_realloc_r+0x24>
 8024d9a:	f7fe fbdd 	bl	8023558 <_free_r>
 8024d9e:	4625      	mov	r5, r4
 8024da0:	4628      	mov	r0, r5
 8024da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024da6:	f000 f8dd 	bl	8024f64 <_malloc_usable_size_r>
 8024daa:	4284      	cmp	r4, r0
 8024dac:	4606      	mov	r6, r0
 8024dae:	d802      	bhi.n	8024db6 <_realloc_r+0x34>
 8024db0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8024db4:	d8f4      	bhi.n	8024da0 <_realloc_r+0x1e>
 8024db6:	4621      	mov	r1, r4
 8024db8:	4638      	mov	r0, r7
 8024dba:	f7fe fc3f 	bl	802363c <_malloc_r>
 8024dbe:	4680      	mov	r8, r0
 8024dc0:	b908      	cbnz	r0, 8024dc6 <_realloc_r+0x44>
 8024dc2:	4645      	mov	r5, r8
 8024dc4:	e7ec      	b.n	8024da0 <_realloc_r+0x1e>
 8024dc6:	42b4      	cmp	r4, r6
 8024dc8:	4622      	mov	r2, r4
 8024dca:	4629      	mov	r1, r5
 8024dcc:	bf28      	it	cs
 8024dce:	4632      	movcs	r2, r6
 8024dd0:	f7fd fd37 	bl	8022842 <memcpy>
 8024dd4:	4629      	mov	r1, r5
 8024dd6:	4638      	mov	r0, r7
 8024dd8:	f7fe fbbe 	bl	8023558 <_free_r>
 8024ddc:	e7f1      	b.n	8024dc2 <_realloc_r+0x40>
	...

08024de0 <_strtoul_l.isra.0>:
 8024de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024de4:	4686      	mov	lr, r0
 8024de6:	460d      	mov	r5, r1
 8024de8:	4e33      	ldr	r6, [pc, #204]	@ (8024eb8 <_strtoul_l.isra.0+0xd8>)
 8024dea:	4628      	mov	r0, r5
 8024dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024df0:	5d37      	ldrb	r7, [r6, r4]
 8024df2:	f017 0708 	ands.w	r7, r7, #8
 8024df6:	d1f8      	bne.n	8024dea <_strtoul_l.isra.0+0xa>
 8024df8:	2c2d      	cmp	r4, #45	@ 0x2d
 8024dfa:	d110      	bne.n	8024e1e <_strtoul_l.isra.0+0x3e>
 8024dfc:	2701      	movs	r7, #1
 8024dfe:	782c      	ldrb	r4, [r5, #0]
 8024e00:	1c85      	adds	r5, r0, #2
 8024e02:	f033 0010 	bics.w	r0, r3, #16
 8024e06:	d115      	bne.n	8024e34 <_strtoul_l.isra.0+0x54>
 8024e08:	2c30      	cmp	r4, #48	@ 0x30
 8024e0a:	d10d      	bne.n	8024e28 <_strtoul_l.isra.0+0x48>
 8024e0c:	7828      	ldrb	r0, [r5, #0]
 8024e0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8024e12:	2858      	cmp	r0, #88	@ 0x58
 8024e14:	d108      	bne.n	8024e28 <_strtoul_l.isra.0+0x48>
 8024e16:	786c      	ldrb	r4, [r5, #1]
 8024e18:	3502      	adds	r5, #2
 8024e1a:	2310      	movs	r3, #16
 8024e1c:	e00a      	b.n	8024e34 <_strtoul_l.isra.0+0x54>
 8024e1e:	2c2b      	cmp	r4, #43	@ 0x2b
 8024e20:	bf04      	itt	eq
 8024e22:	782c      	ldrbeq	r4, [r5, #0]
 8024e24:	1c85      	addeq	r5, r0, #2
 8024e26:	e7ec      	b.n	8024e02 <_strtoul_l.isra.0+0x22>
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	d1f6      	bne.n	8024e1a <_strtoul_l.isra.0+0x3a>
 8024e2c:	2c30      	cmp	r4, #48	@ 0x30
 8024e2e:	bf14      	ite	ne
 8024e30:	230a      	movne	r3, #10
 8024e32:	2308      	moveq	r3, #8
 8024e34:	f04f 38ff 	mov.w	r8, #4294967295
 8024e38:	fbb8 f8f3 	udiv	r8, r8, r3
 8024e3c:	2600      	movs	r6, #0
 8024e3e:	fb03 f908 	mul.w	r9, r3, r8
 8024e42:	4630      	mov	r0, r6
 8024e44:	ea6f 0909 	mvn.w	r9, r9
 8024e48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8024e4c:	f1bc 0f09 	cmp.w	ip, #9
 8024e50:	d810      	bhi.n	8024e74 <_strtoul_l.isra.0+0x94>
 8024e52:	4664      	mov	r4, ip
 8024e54:	42a3      	cmp	r3, r4
 8024e56:	dd1e      	ble.n	8024e96 <_strtoul_l.isra.0+0xb6>
 8024e58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8024e5c:	d007      	beq.n	8024e6e <_strtoul_l.isra.0+0x8e>
 8024e5e:	4580      	cmp	r8, r0
 8024e60:	d316      	bcc.n	8024e90 <_strtoul_l.isra.0+0xb0>
 8024e62:	d101      	bne.n	8024e68 <_strtoul_l.isra.0+0x88>
 8024e64:	45a1      	cmp	r9, r4
 8024e66:	db13      	blt.n	8024e90 <_strtoul_l.isra.0+0xb0>
 8024e68:	2601      	movs	r6, #1
 8024e6a:	fb00 4003 	mla	r0, r0, r3, r4
 8024e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024e72:	e7e9      	b.n	8024e48 <_strtoul_l.isra.0+0x68>
 8024e74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8024e78:	f1bc 0f19 	cmp.w	ip, #25
 8024e7c:	d801      	bhi.n	8024e82 <_strtoul_l.isra.0+0xa2>
 8024e7e:	3c37      	subs	r4, #55	@ 0x37
 8024e80:	e7e8      	b.n	8024e54 <_strtoul_l.isra.0+0x74>
 8024e82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8024e86:	f1bc 0f19 	cmp.w	ip, #25
 8024e8a:	d804      	bhi.n	8024e96 <_strtoul_l.isra.0+0xb6>
 8024e8c:	3c57      	subs	r4, #87	@ 0x57
 8024e8e:	e7e1      	b.n	8024e54 <_strtoul_l.isra.0+0x74>
 8024e90:	f04f 36ff 	mov.w	r6, #4294967295
 8024e94:	e7eb      	b.n	8024e6e <_strtoul_l.isra.0+0x8e>
 8024e96:	1c73      	adds	r3, r6, #1
 8024e98:	d106      	bne.n	8024ea8 <_strtoul_l.isra.0+0xc8>
 8024e9a:	2322      	movs	r3, #34	@ 0x22
 8024e9c:	4630      	mov	r0, r6
 8024e9e:	f8ce 3000 	str.w	r3, [lr]
 8024ea2:	b932      	cbnz	r2, 8024eb2 <_strtoul_l.isra.0+0xd2>
 8024ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024ea8:	b107      	cbz	r7, 8024eac <_strtoul_l.isra.0+0xcc>
 8024eaa:	4240      	negs	r0, r0
 8024eac:	2a00      	cmp	r2, #0
 8024eae:	d0f9      	beq.n	8024ea4 <_strtoul_l.isra.0+0xc4>
 8024eb0:	b106      	cbz	r6, 8024eb4 <_strtoul_l.isra.0+0xd4>
 8024eb2:	1e69      	subs	r1, r5, #1
 8024eb4:	6011      	str	r1, [r2, #0]
 8024eb6:	e7f5      	b.n	8024ea4 <_strtoul_l.isra.0+0xc4>
 8024eb8:	080330c9 	.word	0x080330c9

08024ebc <_strtoul_r>:
 8024ebc:	f7ff bf90 	b.w	8024de0 <_strtoul_l.isra.0>

08024ec0 <__ascii_wctomb>:
 8024ec0:	4603      	mov	r3, r0
 8024ec2:	4608      	mov	r0, r1
 8024ec4:	b141      	cbz	r1, 8024ed8 <__ascii_wctomb+0x18>
 8024ec6:	2aff      	cmp	r2, #255	@ 0xff
 8024ec8:	d904      	bls.n	8024ed4 <__ascii_wctomb+0x14>
 8024eca:	228a      	movs	r2, #138	@ 0x8a
 8024ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8024ed0:	601a      	str	r2, [r3, #0]
 8024ed2:	4770      	bx	lr
 8024ed4:	2001      	movs	r0, #1
 8024ed6:	700a      	strb	r2, [r1, #0]
 8024ed8:	4770      	bx	lr

08024eda <_raise_r>:
 8024eda:	291f      	cmp	r1, #31
 8024edc:	b538      	push	{r3, r4, r5, lr}
 8024ede:	4605      	mov	r5, r0
 8024ee0:	460c      	mov	r4, r1
 8024ee2:	d904      	bls.n	8024eee <_raise_r+0x14>
 8024ee4:	2316      	movs	r3, #22
 8024ee6:	6003      	str	r3, [r0, #0]
 8024ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8024eec:	bd38      	pop	{r3, r4, r5, pc}
 8024eee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024ef0:	b112      	cbz	r2, 8024ef8 <_raise_r+0x1e>
 8024ef2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024ef6:	b94b      	cbnz	r3, 8024f0c <_raise_r+0x32>
 8024ef8:	4628      	mov	r0, r5
 8024efa:	f000 f831 	bl	8024f60 <_getpid_r>
 8024efe:	4622      	mov	r2, r4
 8024f00:	4601      	mov	r1, r0
 8024f02:	4628      	mov	r0, r5
 8024f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f08:	f000 b818 	b.w	8024f3c <_kill_r>
 8024f0c:	2b01      	cmp	r3, #1
 8024f0e:	d00a      	beq.n	8024f26 <_raise_r+0x4c>
 8024f10:	1c59      	adds	r1, r3, #1
 8024f12:	d103      	bne.n	8024f1c <_raise_r+0x42>
 8024f14:	2316      	movs	r3, #22
 8024f16:	6003      	str	r3, [r0, #0]
 8024f18:	2001      	movs	r0, #1
 8024f1a:	e7e7      	b.n	8024eec <_raise_r+0x12>
 8024f1c:	2100      	movs	r1, #0
 8024f1e:	4620      	mov	r0, r4
 8024f20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024f24:	4798      	blx	r3
 8024f26:	2000      	movs	r0, #0
 8024f28:	e7e0      	b.n	8024eec <_raise_r+0x12>
	...

08024f2c <raise>:
 8024f2c:	4b02      	ldr	r3, [pc, #8]	@ (8024f38 <raise+0xc>)
 8024f2e:	4601      	mov	r1, r0
 8024f30:	6818      	ldr	r0, [r3, #0]
 8024f32:	f7ff bfd2 	b.w	8024eda <_raise_r>
 8024f36:	bf00      	nop
 8024f38:	20000134 	.word	0x20000134

08024f3c <_kill_r>:
 8024f3c:	b538      	push	{r3, r4, r5, lr}
 8024f3e:	2300      	movs	r3, #0
 8024f40:	4d06      	ldr	r5, [pc, #24]	@ (8024f5c <_kill_r+0x20>)
 8024f42:	4604      	mov	r4, r0
 8024f44:	4608      	mov	r0, r1
 8024f46:	4611      	mov	r1, r2
 8024f48:	602b      	str	r3, [r5, #0]
 8024f4a:	f7de fd33 	bl	80039b4 <_kill>
 8024f4e:	1c43      	adds	r3, r0, #1
 8024f50:	d102      	bne.n	8024f58 <_kill_r+0x1c>
 8024f52:	682b      	ldr	r3, [r5, #0]
 8024f54:	b103      	cbz	r3, 8024f58 <_kill_r+0x1c>
 8024f56:	6023      	str	r3, [r4, #0]
 8024f58:	bd38      	pop	{r3, r4, r5, pc}
 8024f5a:	bf00      	nop
 8024f5c:	2000c060 	.word	0x2000c060

08024f60 <_getpid_r>:
 8024f60:	f7de bd20 	b.w	80039a4 <_getpid>

08024f64 <_malloc_usable_size_r>:
 8024f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f68:	1f18      	subs	r0, r3, #4
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	bfbc      	itt	lt
 8024f6e:	580b      	ldrlt	r3, [r1, r0]
 8024f70:	18c0      	addlt	r0, r0, r3
 8024f72:	4770      	bx	lr

08024f74 <sqrtf>:
 8024f74:	b538      	push	{r3, r4, r5, lr}
 8024f76:	4605      	mov	r5, r0
 8024f78:	f000 f816 	bl	8024fa8 <__ieee754_sqrtf>
 8024f7c:	4629      	mov	r1, r5
 8024f7e:	4604      	mov	r4, r0
 8024f80:	4628      	mov	r0, r5
 8024f82:	f7dc f8eb 	bl	800115c <__aeabi_fcmpun>
 8024f86:	b968      	cbnz	r0, 8024fa4 <sqrtf+0x30>
 8024f88:	2100      	movs	r1, #0
 8024f8a:	4628      	mov	r0, r5
 8024f8c:	f7dc f8be 	bl	800110c <__aeabi_fcmplt>
 8024f90:	b140      	cbz	r0, 8024fa4 <sqrtf+0x30>
 8024f92:	f7fd fc1b 	bl	80227cc <__errno>
 8024f96:	2321      	movs	r3, #33	@ 0x21
 8024f98:	2100      	movs	r1, #0
 8024f9a:	6003      	str	r3, [r0, #0]
 8024f9c:	4608      	mov	r0, r1
 8024f9e:	f7db ffcb 	bl	8000f38 <__aeabi_fdiv>
 8024fa2:	4604      	mov	r4, r0
 8024fa4:	4620      	mov	r0, r4
 8024fa6:	bd38      	pop	{r3, r4, r5, pc}

08024fa8 <__ieee754_sqrtf>:
 8024fa8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8024fac:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8024fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024fb4:	4603      	mov	r3, r0
 8024fb6:	4604      	mov	r4, r0
 8024fb8:	d30a      	bcc.n	8024fd0 <__ieee754_sqrtf+0x28>
 8024fba:	4601      	mov	r1, r0
 8024fbc:	f7db ff08 	bl	8000dd0 <__aeabi_fmul>
 8024fc0:	4601      	mov	r1, r0
 8024fc2:	4620      	mov	r0, r4
 8024fc4:	f7db fdfc 	bl	8000bc0 <__addsf3>
 8024fc8:	4604      	mov	r4, r0
 8024fca:	4620      	mov	r0, r4
 8024fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fd0:	2a00      	cmp	r2, #0
 8024fd2:	d0fa      	beq.n	8024fca <__ieee754_sqrtf+0x22>
 8024fd4:	2800      	cmp	r0, #0
 8024fd6:	da06      	bge.n	8024fe6 <__ieee754_sqrtf+0x3e>
 8024fd8:	4601      	mov	r1, r0
 8024fda:	f7db fdef 	bl	8000bbc <__aeabi_fsub>
 8024fde:	4601      	mov	r1, r0
 8024fe0:	f7db ffaa 	bl	8000f38 <__aeabi_fdiv>
 8024fe4:	e7f0      	b.n	8024fc8 <__ieee754_sqrtf+0x20>
 8024fe6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8024fea:	d03c      	beq.n	8025066 <__ieee754_sqrtf+0xbe>
 8024fec:	15c2      	asrs	r2, r0, #23
 8024fee:	2400      	movs	r4, #0
 8024ff0:	2019      	movs	r0, #25
 8024ff2:	4626      	mov	r6, r4
 8024ff4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8024ff8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024ffc:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8025000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8025004:	07d2      	lsls	r2, r2, #31
 8025006:	bf58      	it	pl
 8025008:	005b      	lslpl	r3, r3, #1
 802500a:	106d      	asrs	r5, r5, #1
 802500c:	005b      	lsls	r3, r3, #1
 802500e:	1872      	adds	r2, r6, r1
 8025010:	429a      	cmp	r2, r3
 8025012:	bfcf      	iteee	gt
 8025014:	461a      	movgt	r2, r3
 8025016:	1856      	addle	r6, r2, r1
 8025018:	1864      	addle	r4, r4, r1
 802501a:	1a9a      	suble	r2, r3, r2
 802501c:	3801      	subs	r0, #1
 802501e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8025022:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8025026:	d1f2      	bne.n	802500e <__ieee754_sqrtf+0x66>
 8025028:	b1ba      	cbz	r2, 802505a <__ieee754_sqrtf+0xb2>
 802502a:	4e15      	ldr	r6, [pc, #84]	@ (8025080 <__ieee754_sqrtf+0xd8>)
 802502c:	4f15      	ldr	r7, [pc, #84]	@ (8025084 <__ieee754_sqrtf+0xdc>)
 802502e:	6830      	ldr	r0, [r6, #0]
 8025030:	6839      	ldr	r1, [r7, #0]
 8025032:	f7db fdc3 	bl	8000bbc <__aeabi_fsub>
 8025036:	f8d6 8000 	ldr.w	r8, [r6]
 802503a:	4601      	mov	r1, r0
 802503c:	4640      	mov	r0, r8
 802503e:	f7dc f86f 	bl	8001120 <__aeabi_fcmple>
 8025042:	b150      	cbz	r0, 802505a <__ieee754_sqrtf+0xb2>
 8025044:	6830      	ldr	r0, [r6, #0]
 8025046:	6839      	ldr	r1, [r7, #0]
 8025048:	f7db fdba 	bl	8000bc0 <__addsf3>
 802504c:	6836      	ldr	r6, [r6, #0]
 802504e:	4601      	mov	r1, r0
 8025050:	4630      	mov	r0, r6
 8025052:	f7dc f85b 	bl	800110c <__aeabi_fcmplt>
 8025056:	b170      	cbz	r0, 8025076 <__ieee754_sqrtf+0xce>
 8025058:	3402      	adds	r4, #2
 802505a:	1064      	asrs	r4, r4, #1
 802505c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8025060:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8025064:	e7b1      	b.n	8024fca <__ieee754_sqrtf+0x22>
 8025066:	005b      	lsls	r3, r3, #1
 8025068:	0218      	lsls	r0, r3, #8
 802506a:	460a      	mov	r2, r1
 802506c:	f101 0101 	add.w	r1, r1, #1
 8025070:	d5f9      	bpl.n	8025066 <__ieee754_sqrtf+0xbe>
 8025072:	4252      	negs	r2, r2
 8025074:	e7bb      	b.n	8024fee <__ieee754_sqrtf+0x46>
 8025076:	3401      	adds	r4, #1
 8025078:	f024 0401 	bic.w	r4, r4, #1
 802507c:	e7ed      	b.n	802505a <__ieee754_sqrtf+0xb2>
 802507e:	bf00      	nop
 8025080:	080332cc 	.word	0x080332cc
 8025084:	080332c8 	.word	0x080332c8

08025088 <_init>:
 8025088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802508a:	bf00      	nop
 802508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802508e:	bc08      	pop	{r3}
 8025090:	469e      	mov	lr, r3
 8025092:	4770      	bx	lr

08025094 <_fini>:
 8025094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025096:	bf00      	nop
 8025098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802509a:	bc08      	pop	{r3}
 802509c:	469e      	mov	lr, r3
 802509e:	4770      	bx	lr
